uint64_t outlined init with copy of AdaptableTabView.BodyContent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_187E76510()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 32))
  {
    swift_release();
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in IdentifiedDropConfiguration.drop(_:onto:)()
{
  return closure #1 in IdentifiedDropConfiguration.drop(_:onto:)((uint64_t)(v0 + 2), v0[8], v0[9], v0[10]);
}

uint64_t outlined consume of IdentifiedDropConfiguration?(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    outlined consume of Binding<NavigationSplitViewColumn>?(a2, a3);
    return swift_release();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for UIKitAdaptableTabView(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v8;
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v9 = a2[5];
    swift_retain();
    swift_retain();
    if (v9)
    {
      *(void *)(a1 + 32) = a2[4];
      *(void *)(a1 + 40) = v9;
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    }
    uint64_t v10 = a2[7];
    if (v10 == 1)
    {
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      *(void *)(a1 + 72) = a2[9];
    }
    else
    {
      uint64_t v11 = a2[8];
      uint64_t v12 = a2[9];
      *(void *)(a1 + 56) = v10;
      *(void *)(a1 + 64) = v11;
      *(void *)(a1 + 72) = v12;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    v13 = a2 + 10;
    int v14 = *((unsigned __int8 *)a2 + 88);
    if (v14 == 255)
    {
      *(void *)(a1 + 80) = *v13;
      *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
    }
    else
    {
      char v15 = v14 & 1;
      uint64_t v16 = *v13;
      outlined copy of PlatformItemCollection.Storage(*v13, v14 & 1);
      *(void *)(a1 + 80) = v16;
      *(unsigned char *)(a1 + 88) = v15;
    }
    *(_WORD *)(a1 + 89) = *(_WORD *)((char *)a2 + 89);
    uint64_t v17 = a3[6];
    v18 = (void *)(a1 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    type metadata accessor for Binding<TabViewCustomization>(0);
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v20))
    {
      type metadata accessor for Binding<TabViewCustomization>?(0);
      memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      uint64_t v24 = v19[1];
      void *v18 = *v19;
      v18[1] = v24;
      uint64_t v25 = *(int *)(v21 + 32);
      v34 = (char *)v18 + v25;
      v26 = (char *)v19 + v25;
      uint64_t v27 = type metadata accessor for UUID();
      v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16);
      swift_retain();
      swift_retain();
      v33(v34, v26, v27);
      uint64_t v28 = type metadata accessor for TabViewCustomization();
      *(void *)&v34[*(int *)(v28 + 20)] = *(void *)&v26[*(int *)(v28 + 20)];
      *(void *)&v34[*(int *)(v28 + 24)] = *(void *)&v26[*(int *)(v28 + 24)];
      v29 = *(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v29(v18, 0, 1, v21);
    }
    uint64_t v30 = a3[8];
    *(void *)(a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(void *)(a1 + v30) = *(uint64_t *)((char *)a2 + v30);
    uint64_t v31 = a3[10];
    *(void *)(a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(unsigned char *)(a1 + v31) = *((unsigned char *)a2 + v31);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for UIKitAdaptableTabView(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  if (*(void *)(a1 + 40))
  {
    swift_release();
    swift_release();
  }
  if (*(void *)(a1 + 56) != 1)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  int v4 = *(unsigned __int8 *)(a1 + 88);
  if (v4 != 255) {
    outlined consume of PlatformItemCollection.Storage(*(void *)(a1 + 80), v4 & 1);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  type metadata accessor for Binding<TabViewCustomization>(0);
  uint64_t v7 = v6;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_release();
    swift_release();
    uint64_t v8 = v5 + *(int *)(v7 + 32);
    uint64_t v9 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
    type metadata accessor for TabViewCustomization();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UIKitAdaptableTabView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 40);
  swift_retain();
  swift_retain();
  if (v7)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v7;
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  }
  uint64_t v8 = *(void *)(a2 + 56);
  if (v8 == 1)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
  }
  else
  {
    uint64_t v9 = *(void *)(a2 + 64);
    uint64_t v10 = *(void *)(a2 + 72);
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = v10;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  uint64_t v11 = (uint64_t *)(a2 + 80);
  int v12 = *(unsigned __int8 *)(a2 + 88);
  if (v12 == 255)
  {
    *(void *)(a1 + 80) = *v11;
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  }
  else
  {
    char v13 = v12 & 1;
    uint64_t v14 = *v11;
    outlined copy of PlatformItemCollection.Storage(*v11, v12 & 1);
    *(void *)(a1 + 80) = v14;
    *(unsigned char *)(a1 + 88) = v13;
  }
  *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  type metadata accessor for Binding<TabViewCustomization>(0);
  uint64_t v19 = v18;
  uint64_t v20 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v18))
  {
    type metadata accessor for Binding<TabViewCustomization>?(0);
    memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    uint64_t v22 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v22;
    uint64_t v23 = *(int *)(v19 + 32);
    uint64_t v24 = (char *)v16 + v23;
    uint64_t v25 = (char *)v17 + v23;
    uint64_t v26 = type metadata accessor for UUID();
    v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16);
    swift_retain();
    swift_retain();
    v32(v24, v25, v26);
    uint64_t v27 = type metadata accessor for TabViewCustomization();
    *(void *)&v24[*(int *)(v27 + 20)] = *(void *)&v25[*(int *)(v27 + 20)];
    *(void *)&v24[*(int *)(v27 + 24)] = *(void *)&v25[*(int *)(v27 + 24)];
    uint64_t v28 = *(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28(v16, 0, 1, v19);
  }
  uint64_t v29 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v29) = *(void *)(a2 + v29);
  uint64_t v30 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v30) = *(unsigned char *)(a2 + v30);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UIKitAdaptableTabView(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = (_OWORD *)(a1 + 32);
  uint64_t v7 = (_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v8)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_retain();
      swift_release();
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    }
    else
    {
      outlined destroy of PlatformItem.SelectionContent?(a1 + 32, &lazy cache variable for type metadata for Binding<Visibility>, MEMORY[0x1E4F3F3F0], MEMORY[0x1E4F41638]);
      char v9 = *(unsigned char *)(a2 + 48);
      *uint64_t v6 = *v7;
      *(unsigned char *)(a1 + 48) = v9;
    }
  }
  else if (v8)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v10 = *v7;
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    *uint64_t v6 = v10;
  }
  uint64_t v11 = (long long *)(a1 + 56);
  char v13 = (long long *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) == 1)
  {
    if (v12 == 1)
    {
      long long v14 = *v13;
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *uint64_t v11 = v14;
    }
    else
    {
      *(void *)(a1 + 56) = v12;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_retain();
      swift_retain();
      swift_retain();
    }
  }
  else if (v12 == 1)
  {
    outlined destroy of TabSidebarAccessoryViewConfiguration(a1 + 56);
    uint64_t v15 = *(void *)(a2 + 72);
    *uint64_t v11 = *v13;
    *(void *)(a1 + 72) = v15;
  }
  else
  {
    *(void *)(a1 + 56) = v12;
    swift_retain();
    swift_release();
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_retain();
    swift_release();
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    swift_retain();
    swift_release();
  }
  uint64_t v16 = (uint64_t *)(a1 + 80);
  uint64_t v17 = (uint64_t *)(a2 + 80);
  int v18 = *(unsigned __int8 *)(a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v18 == 255)
    {
      uint64_t v20 = *v17;
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *uint64_t v16 = v20;
    }
    else
    {
      char v25 = v18 & 1;
      uint64_t v26 = *v17;
      outlined copy of PlatformItemCollection.Storage(*v17, v18 & 1);
      *(void *)(a1 + 80) = v26;
      *(unsigned char *)(a1 + 88) = v25;
    }
  }
  else if (v18 == 255)
  {
    outlined destroy of PlatformItemCollection(a1 + 80);
    char v19 = *(unsigned char *)(a2 + 88);
    *uint64_t v16 = *v17;
    *(unsigned char *)(a1 + 88) = v19;
  }
  else
  {
    char v21 = v18 & 1;
    uint64_t v22 = *v17;
    outlined copy of PlatformItemCollection.Storage(*v17, v18 & 1);
    uint64_t v23 = *(void *)(a1 + 80);
    char v24 = *(unsigned char *)(a1 + 88);
    *(void *)(a1 + 80) = v22;
    *(unsigned char *)(a1 + 88) = v21;
    outlined consume of PlatformItemCollection.Storage(v23, v24);
  }
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  uint64_t v27 = a3[6];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  type metadata accessor for Binding<TabViewCustomization>(0);
  uint64_t v31 = v30;
  uint64_t v32 = *(void *)(v30 - 8);
  v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v28, 1, v30);
  int v35 = v33(v29, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      *uint64_t v28 = *v29;
      swift_retain();
      swift_release();
      v28[1] = v29[1];
      swift_retain();
      swift_release();
      uint64_t v45 = *(int *)(v31 + 32);
      v46 = (char *)v28 + v45;
      v47 = (char *)v29 + v45;
      uint64_t v48 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 24))(v46, v47, v48);
      uint64_t v49 = type metadata accessor for TabViewCustomization();
      *(void *)&v46[*(int *)(v49 + 20)] = *(void *)&v47[*(int *)(v49 + 20)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v46[*(int *)(v49 + 24)] = *(void *)&v47[*(int *)(v49 + 24)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
    _s2os6LoggerVSgWOhTm_1((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>);
    goto LABEL_27;
  }
  if (v35)
  {
LABEL_27:
    type metadata accessor for Binding<TabViewCustomization>?(0);
    memcpy(v28, v29, *(void *)(*(void *)(v43 - 8) + 64));
    goto LABEL_28;
  }
  *uint64_t v28 = *v29;
  v28[1] = v29[1];
  uint64_t v36 = *(int *)(v31 + 32);
  v37 = (char *)v28 + v36;
  v38 = (char *)v29 + v36;
  v51 = a3;
  uint64_t v39 = type metadata accessor for UUID();
  v50 = *(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16);
  swift_retain();
  swift_retain();
  uint64_t v40 = v39;
  a3 = v51;
  v50(v37, v38, v40);
  uint64_t v41 = type metadata accessor for TabViewCustomization();
  *(void *)&v37[*(int *)(v41 + 20)] = *(void *)&v38[*(int *)(v41 + 20)];
  *(void *)&v37[*(int *)(v41 + 24)] = *(void *)&v38[*(int *)(v41 + 24)];
  v42 = *(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v42(v28, 0, 1, v31);
LABEL_28:
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  return a1;
}

uint64_t initializeWithTake for UIKitAdaptableTabView(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 87) = *(_DWORD *)(a2 + 87);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  type metadata accessor for Binding<TabViewCustomization>(0);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9))
  {
    type metadata accessor for Binding<TabViewCustomization>?(0);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v13;
    uint64_t v14 = *(int *)(v10 + 32);
    uint64_t v15 = (char *)v7 + v14;
    uint64_t v16 = (char *)v8 + v14;
    uint64_t v17 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
    uint64_t v18 = type metadata accessor for TabViewCustomization();
    *(void *)&v15[*(int *)(v18 + 20)] = *(void *)&v16[*(int *)(v18 + 20)];
    *(void *)&v15[*(int *)(v18 + 24)] = *(void *)&v16[*(int *)(v18 + 24)];
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  uint64_t v19 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  uint64_t v20 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v20) = *(unsigned char *)(a2 + v20);
  return a1;
}

uint64_t assignWithTake for UIKitAdaptableTabView(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  if (*(void *)(a1 + 40))
  {
    uint64_t v6 = *(void *)(a2 + 40);
    if (v6)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_release();
      *(void *)(a1 + 40) = v6;
      swift_release();
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      goto LABEL_6;
    }
    outlined destroy of PlatformItem.SelectionContent?(a1 + 32, &lazy cache variable for type metadata for Binding<Visibility>, MEMORY[0x1E4F3F3F0], MEMORY[0x1E4F41638]);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
LABEL_6:
  uint64_t v7 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) == 1)
  {
LABEL_9:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    goto LABEL_11;
  }
  if (v7 == 1)
  {
    outlined destroy of TabSidebarAccessoryViewConfiguration(a1 + 56);
    goto LABEL_9;
  }
  *(void *)(a1 + 56) = v7;
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
LABEL_11:
  uint64_t v8 = (void *)(a2 + 80);
  int v9 = *(unsigned __int8 *)(a1 + 88);
  if (v9 == 255)
  {
LABEL_14:
    *(void *)(a1 + 80) = *v8;
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    goto LABEL_16;
  }
  int v10 = *(unsigned __int8 *)(a2 + 88);
  if (v10 == 255)
  {
    outlined destroy of PlatformItemCollection(a1 + 80);
    goto LABEL_14;
  }
  uint64_t v11 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = *v8;
  *(unsigned char *)(a1 + 88) = v10 & 1;
  outlined consume of PlatformItemCollection.Storage(v11, v9 & 1);
LABEL_16:
  *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  type metadata accessor for Binding<TabViewCustomization>(0);
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 - 8);
  uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v13, 1, v15);
  int v20 = v18(v14, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      void *v13 = *v14;
      swift_release();
      v13[1] = v14[1];
      swift_release();
      uint64_t v29 = *(int *)(v16 + 32);
      uint64_t v30 = (char *)v13 + v29;
      uint64_t v31 = (char *)v14 + v29;
      uint64_t v32 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 40))(v30, v31, v32);
      uint64_t v33 = type metadata accessor for TabViewCustomization();
      *(void *)&v30[*(int *)(v33 + 20)] = *(void *)&v31[*(int *)(v33 + 20)];
      swift_bridgeObjectRelease();
      *(void *)&v30[*(int *)(v33 + 24)] = *(void *)&v31[*(int *)(v33 + 24)];
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    _s2os6LoggerVSgWOhTm_1((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>);
    goto LABEL_21;
  }
  if (v20)
  {
LABEL_21:
    type metadata accessor for Binding<TabViewCustomization>?(0);
    memcpy(v13, v14, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_22;
  }
  uint64_t v21 = v14[1];
  void *v13 = *v14;
  v13[1] = v21;
  uint64_t v22 = *(int *)(v16 + 32);
  uint64_t v23 = (char *)v13 + v22;
  char v24 = (char *)v14 + v22;
  uint64_t v25 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
  uint64_t v26 = type metadata accessor for TabViewCustomization();
  *(void *)&v23[*(int *)(v26 + 20)] = *(void *)&v24[*(int *)(v26 + 20)];
  *(void *)&v23[*(int *)(v26 + 24)] = *(void *)&v24[*(int *)(v26 + 24)];
  (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
LABEL_22:
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitAdaptableTabView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187E778E0);
}

uint64_t sub_187E778E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for Binding<TabViewCustomization>?(0);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for UIKitAdaptableTabView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187E779A4);
}

uint64_t sub_187E779A4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    type metadata accessor for Binding<TabViewCustomization>?(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for UIKitAdaptableTabView(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitAdaptableTabView);
}

void type metadata completion function for UIKitAdaptableTabView()
{
  type metadata accessor for Binding<TabViewCustomization>?(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AdaptableTabView.BodyContent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<TabViewCustomization>(0);
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
      {
        type metadata accessor for Binding<TabViewCustomization>?(0);
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        uint64_t v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        uint64_t v13 = *(int *)(v8 + 32);
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = type metadata accessor for UUID();
        uint64_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
        swift_retain();
        swift_retain();
        v48(v14, v15, v16);
        uint64_t v17 = type metadata accessor for TabViewCustomization();
        *(void *)&v14[*(int *)(v17 + 20)] = *(void *)&v15[*(int *)(v17 + 20)];
        *(void *)&v14[*(int *)(v17 + 24)] = *(void *)&v15[*(int *)(v17 + 24)];
        uint64_t v18 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v18(a1, 0, 1, v8);
      }
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = a3[5];
    int v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = *(void *)v21;
    char v23 = v21[8];
    outlined copy of Environment<Bool>.Content(*(void *)v21, v23);
    *(void *)int v20 = v22;
    v20[8] = v23;
    uint64_t v24 = a3[6];
    uint64_t v25 = (char *)a1 + v24;
    uint64_t v26 = (char *)a2 + v24;
    long long v27 = *(_OWORD *)((char *)a2 + v24 + 24);
    *(_OWORD *)((char *)a1 + v24 + 24) = v27;
    (**(void (***)(char *, char *))(v27 - 8))((char *)a1 + v24, (char *)a2 + v24);
    uint64_t v28 = (void *)*((void *)v26 + 5);
    uint64_t v29 = *((void *)v26 + 6);
    *((void *)v25 + 5) = v28;
    *((void *)v25 + 6) = v29;
    uint64_t v30 = a3[7];
    uint64_t v31 = a3[8];
    uint64_t v32 = (uint64_t *)((char *)a1 + v30);
    uint64_t v33 = (uint64_t *)((char *)a2 + v30);
    uint64_t v34 = v33[1];
    *uint64_t v32 = *v33;
    v32[1] = v34;
    v32[2] = v33[2];
    int v35 = (char *)a1 + v31;
    uint64_t v36 = (char *)a2 + v31;
    *((unsigned char *)a1 + v31) = *((unsigned char *)a2 + v31);
    uint64_t v37 = (uint64_t)a1 + v31 + 8;
    uint64_t v38 = *(uint64_t *)((char *)a2 + v31 + 16);
    id v39 = v28;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v38)
    {
      *((void *)v35 + 1) = *((void *)v36 + 1);
      *((void *)v35 + 2) = v38;
      v35[24] = v36[24];
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v37 = *(_OWORD *)(v36 + 8);
      *(unsigned char *)(v37 + 16) = v36[24];
    }
    uint64_t v40 = *((void *)v36 + 4);
    if (v40 == 1)
    {
      *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
      *((void *)v35 + 6) = *((void *)v36 + 6);
    }
    else
    {
      uint64_t v41 = *((void *)v36 + 5);
      uint64_t v42 = *((void *)v36 + 6);
      *((void *)v35 + 4) = v40;
      *((void *)v35 + 5) = v41;
      *((void *)v35 + 6) = v42;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    uint64_t v43 = (uint64_t *)(v36 + 56);
    int v44 = v36[64];
    if (v44 == 255)
    {
      *((void *)v35 + 7) = *v43;
      v35[64] = v36[64];
    }
    else
    {
      char v45 = v44 & 1;
      uint64_t v46 = *v43;
      outlined copy of PlatformItemCollection.Storage(*v43, v44 & 1);
      *((void *)v35 + 7) = v46;
      v35[64] = v45;
    }
    *(_WORD *)(v35 + 65) = *(_WORD *)(v36 + 65);
  }
  return a1;
}

void type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(uint64_t a1)
{
}

uint64_t destroy for AdaptableTabView.BodyContent(uint64_t a1, int *a2)
{
  type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<TabViewCustomization>(0);
    uint64_t v5 = v4;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
    {
      swift_release();
      swift_release();
      uint64_t v6 = a1 + *(int *)(v5 + 32);
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
      type metadata accessor for TabViewCustomization();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_release();
  }
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + a2[5]), *(unsigned char *)(a1 + a2[5] + 8));
  uint64_t v8 = a1 + a2[6];
  __swift_destroy_boxed_opaque_existential_1(v8);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v9 = a1 + a2[8];
  if (*(void *)(v9 + 16))
  {
    swift_release();
    swift_release();
  }
  uint64_t result = *(void *)(v9 + 32);
  if (result != 1)
  {
    swift_release();
    swift_release();
    uint64_t result = swift_release();
  }
  int v11 = *(unsigned __int8 *)(v9 + 64);
  if (v11 != 255)
  {
    uint64_t v12 = *(void *)(v9 + 56);
    return outlined consume of PlatformItemCollection.Storage(v12, v11 & 1);
  }
  return result;
}

void *initializeWithCopy for AdaptableTabView.BodyContent(void *a1, void *a2, int *a3)
{
  type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<TabViewCustomization>(0);
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
    {
      type metadata accessor for Binding<TabViewCustomization>?(0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      uint64_t v11 = *(int *)(v7 + 32);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for UUID();
      uint64_t v46 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
      swift_retain();
      swift_retain();
      v46(v12, v13, v14);
      uint64_t v15 = type metadata accessor for TabViewCustomization();
      *(void *)&v12[*(int *)(v15 + 20)] = *(void *)&v13[*(int *)(v15 + 20)];
      *(void *)&v12[*(int *)(v15 + 24)] = *(void *)&v13[*(int *)(v15 + 24)];
      uint64_t v16 = *(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v16(a1, 0, 1, v7);
    }
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = a3[5];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = *(void *)v19;
  char v21 = v19[8];
  outlined copy of Environment<Bool>.Content(*(void *)v19, v21);
  *(void *)uint64_t v18 = v20;
  v18[8] = v21;
  uint64_t v22 = a3[6];
  char v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  long long v25 = *(_OWORD *)((char *)a2 + v22 + 24);
  *(_OWORD *)((char *)a1 + v22 + 24) = v25;
  (**(void (***)(char *, char *))(v25 - 8))((char *)a1 + v22, (char *)a2 + v22);
  uint64_t v26 = (void *)*((void *)v24 + 5);
  uint64_t v27 = *((void *)v24 + 6);
  *((void *)v23 + 5) = v26;
  *((void *)v23 + 6) = v27;
  uint64_t v28 = a3[7];
  uint64_t v29 = a3[8];
  uint64_t v30 = (void *)((char *)a1 + v28);
  uint64_t v31 = (void *)((char *)a2 + v28);
  uint64_t v32 = v31[1];
  *uint64_t v30 = *v31;
  v30[1] = v32;
  v30[2] = v31[2];
  uint64_t v33 = (char *)a1 + v29;
  uint64_t v34 = (char *)a2 + v29;
  *((unsigned char *)a1 + v29) = *((unsigned char *)a2 + v29);
  uint64_t v35 = (uint64_t)a1 + v29 + 8;
  uint64_t v36 = *(void *)((char *)a2 + v29 + 16);
  id v37 = v26;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v36)
  {
    *((void *)v33 + 1) = *((void *)v34 + 1);
    *((void *)v33 + 2) = v36;
    v33[24] = v34[24];
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v35 = *(_OWORD *)(v34 + 8);
    *(unsigned char *)(v35 + 16) = v34[24];
  }
  uint64_t v38 = *((void *)v34 + 4);
  if (v38 == 1)
  {
    *((_OWORD *)v33 + 2) = *((_OWORD *)v34 + 2);
    *((void *)v33 + 6) = *((void *)v34 + 6);
  }
  else
  {
    uint64_t v39 = *((void *)v34 + 5);
    uint64_t v40 = *((void *)v34 + 6);
    *((void *)v33 + 4) = v38;
    *((void *)v33 + 5) = v39;
    *((void *)v33 + 6) = v40;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  uint64_t v41 = (uint64_t *)(v34 + 56);
  int v42 = v34[64];
  if (v42 == 255)
  {
    *((void *)v33 + 7) = *v41;
    v33[64] = v34[64];
  }
  else
  {
    char v43 = v42 & 1;
    uint64_t v44 = *v41;
    outlined copy of PlatformItemCollection.Storage(*v41, v42 & 1);
    *((void *)v33 + 7) = v44;
    v33[64] = v43;
  }
  *(_WORD *)(v33 + 65) = *(_WORD *)(v34 + 65);
  return a1;
}

void *assignWithCopy for AdaptableTabView.BodyContent(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    _s2os6LoggerVSgWOhTm_1((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content);
    type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<TabViewCustomization>(0);
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)(v6 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
      {
        type metadata accessor for Binding<TabViewCustomization>?(0);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v10 = *(int *)(v7 + 32);
        uint64_t v11 = (char *)a1 + v10;
        uint64_t v12 = (char *)a2 + v10;
        uint64_t v13 = type metadata accessor for UUID();
        v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
        swift_retain();
        swift_retain();
        v58(v11, v12, v13);
        uint64_t v14 = type metadata accessor for TabViewCustomization();
        *(void *)&v11[*(int *)(v14 + 20)] = *(void *)&v12[*(int *)(v14 + 20)];
        *(void *)&v11[*(int *)(v14 + 24)] = *(void *)&v12[*(int *)(v14 + 24)];
        uint64_t v15 = *(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v15(a1, 0, 1, v7);
      }
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v16 = a3[5];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = *(void *)v18;
  char v20 = v18[8];
  outlined copy of Environment<Bool>.Content(*(void *)v18, v20);
  uint64_t v21 = *(void *)v17;
  char v22 = v17[8];
  *(void *)uint64_t v17 = v19;
  v17[8] = v20;
  outlined consume of Environment<Bool>.Content(v21, v22);
  uint64_t v23 = a3[6];
  uint64_t v24 = (char *)a1 + v23;
  long long v25 = (char *)a2 + v23;
  __swift_assign_boxed_opaque_existential_1((void *)((char *)a1 + v23), (void *)((char *)a2 + v23));
  uint64_t v26 = (void *)*((void *)v25 + 5);
  uint64_t v27 = (void *)*((void *)v24 + 5);
  *((void *)v24 + 5) = v26;
  id v28 = v26;

  *((void *)v24 + 6) = *((void *)v25 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[7];
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  *(void *)((char *)a1 + v29) = *(void *)((char *)a2 + v29);
  swift_retain();
  swift_release();
  *((void *)v30 + 1) = *((void *)v31 + 1);
  swift_retain();
  swift_release();
  *((void *)v30 + 2) = *((void *)v31 + 2);
  uint64_t v32 = a3[8];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  *((unsigned char *)a1 + v32) = *((unsigned char *)a2 + v32);
  uint64_t v35 = (uint64_t)a1 + v32 + 8;
  uint64_t v36 = v34 + 8;
  uint64_t v37 = *(void *)((char *)a1 + v32 + 16);
  uint64_t v38 = *((void *)v34 + 2);
  if (v37)
  {
    if (v38)
    {
      *((void *)v33 + 1) = *((void *)v34 + 1);
      swift_retain();
      swift_release();
      *((void *)v33 + 2) = *((void *)v34 + 2);
      swift_retain();
      swift_release();
      v33[24] = v34[24];
    }
    else
    {
      outlined destroy of PlatformItem.SelectionContent?(v35, &lazy cache variable for type metadata for Binding<Visibility>, MEMORY[0x1E4F3F3F0], MEMORY[0x1E4F41638]);
      char v39 = v34[24];
      *(_OWORD *)uint64_t v35 = *v36;
      *(unsigned char *)(v35 + 16) = v39;
    }
  }
  else if (v38)
  {
    *((void *)v33 + 1) = *((void *)v34 + 1);
    *((void *)v33 + 2) = *((void *)v34 + 2);
    v33[24] = v34[24];
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v40 = *v36;
    *(unsigned char *)(v35 + 16) = v34[24];
    *(_OWORD *)uint64_t v35 = v40;
  }
  uint64_t v41 = (long long *)(v33 + 32);
  char v43 = (long long *)(v34 + 32);
  uint64_t v42 = *((void *)v34 + 4);
  if (*((void *)v33 + 4) == 1)
  {
    if (v42 == 1)
    {
      long long v44 = *v43;
      *((void *)v33 + 6) = *((void *)v34 + 6);
      *uint64_t v41 = v44;
    }
    else
    {
      *((void *)v33 + 4) = v42;
      *((void *)v33 + 5) = *((void *)v34 + 5);
      *((void *)v33 + 6) = *((void *)v34 + 6);
      swift_retain();
      swift_retain();
      swift_retain();
    }
  }
  else if (v42 == 1)
  {
    outlined destroy of TabSidebarAccessoryViewConfiguration((uint64_t)(v33 + 32));
    uint64_t v45 = *((void *)v34 + 6);
    *uint64_t v41 = *v43;
    *((void *)v33 + 6) = v45;
  }
  else
  {
    *((void *)v33 + 4) = v42;
    swift_retain();
    swift_release();
    *((void *)v33 + 5) = *((void *)v34 + 5);
    swift_retain();
    swift_release();
    *((void *)v33 + 6) = *((void *)v34 + 6);
    swift_retain();
    swift_release();
  }
  uint64_t v46 = (uint64_t *)(v33 + 56);
  v47 = (uint64_t *)(v34 + 56);
  int v48 = v34[64];
  if (v33[64] == 255)
  {
    if (v48 == 255)
    {
      uint64_t v50 = *v47;
      v33[64] = v34[64];
      uint64_t *v46 = v50;
    }
    else
    {
      char v55 = v48 & 1;
      uint64_t v56 = *v47;
      outlined copy of PlatformItemCollection.Storage(v56, v48 & 1);
      *((void *)v33 + 7) = v56;
      v33[64] = v55;
    }
  }
  else if (v48 == 255)
  {
    outlined destroy of PlatformItemCollection((uint64_t)(v33 + 56));
    char v49 = v34[64];
    uint64_t *v46 = *v47;
    v33[64] = v49;
  }
  else
  {
    char v51 = v48 & 1;
    uint64_t v52 = *v47;
    outlined copy of PlatformItemCollection.Storage(v52, v48 & 1);
    uint64_t v53 = *((void *)v33 + 7);
    char v54 = v33[64];
    *((void *)v33 + 7) = v52;
    v33[64] = v51;
    outlined consume of PlatformItemCollection.Storage(v53, v54);
  }
  v33[65] = v34[65];
  v33[66] = v34[66];
  return a1;
}

void *initializeWithTake for AdaptableTabView.BodyContent(void *a1, void *a2, int *a3)
{
  type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(0);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<TabViewCustomization>(0);
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v8))
    {
      type metadata accessor for Binding<TabViewCustomization>?(0);
      memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      uint64_t v13 = *(int *)(v9 + 32);
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
      uint64_t v17 = type metadata accessor for TabViewCustomization();
      *(void *)&v14[*(int *)(v17 + 20)] = *(void *)&v15[*(int *)(v17 + 20)];
      *(void *)&v14[*(int *)(v17 + 24)] = *(void *)&v15[*(int *)(v17 + 24)];
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v18 = a3[5];
  uint64_t v19 = a3[6];
  char v20 = (char *)a1 + v18;
  uint64_t v21 = (char *)a2 + v18;
  v20[8] = v21[8];
  *(void *)char v20 = *(void *)v21;
  char v22 = (char *)a1 + v19;
  uint64_t v23 = (char *)a2 + v19;
  *((void *)v22 + 6) = *((void *)v23 + 6);
  long long v24 = *((_OWORD *)v23 + 2);
  long long v25 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = *((_OWORD *)v23 + 1);
  *((_OWORD *)v22 + 2) = v24;
  *(_OWORD *)char v22 = v25;
  uint64_t v26 = a3[7];
  uint64_t v27 = a3[8];
  id v28 = (char *)a1 + v26;
  uint64_t v29 = (char *)a2 + v26;
  *(_OWORD *)id v28 = *(_OWORD *)v29;
  *((void *)v28 + 2) = *((void *)v29 + 2);
  uint64_t v30 = (char *)a1 + v27;
  uint64_t v31 = (char *)a2 + v27;
  long long v32 = *(_OWORD *)v31;
  long long v33 = *((_OWORD *)v31 + 1);
  long long v34 = *((_OWORD *)v31 + 2);
  long long v35 = *((_OWORD *)v31 + 3);
  *(_DWORD *)(v30 + 63) = *(_DWORD *)(v31 + 63);
  *((_OWORD *)v30 + 2) = v34;
  *((_OWORD *)v30 + 3) = v35;
  *(_OWORD *)uint64_t v30 = v32;
  *((_OWORD *)v30 + 1) = v33;
  return a1;
}

void *assignWithTake for AdaptableTabView.BodyContent(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    _s2os6LoggerVSgWOhTm_1((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content);
    type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(0);
    uint64_t v7 = v6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<TabViewCustomization>(0);
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v8))
      {
        type metadata accessor for Binding<TabViewCustomization>?(0);
        memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        uint64_t v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        uint64_t v13 = *(int *)(v9 + 32);
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
        uint64_t v17 = type metadata accessor for TabViewCustomization();
        *(void *)&v14[*(int *)(v17 + 20)] = *(void *)&v15[*(int *)(v17 + 20)];
        *(void *)&v14[*(int *)(v17 + 24)] = *(void *)&v15[*(int *)(v17 + 24)];
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
  }
  uint64_t v18 = a3[5];
  uint64_t v19 = (char *)a1 + v18;
  char v20 = (char *)a2 + v18;
  uint64_t v21 = *(void *)v20;
  LOBYTE(v20) = v20[8];
  uint64_t v22 = *(void *)v19;
  char v23 = v19[8];
  *(void *)uint64_t v19 = v21;
  v19[8] = (char)v20;
  outlined consume of Environment<Bool>.Content(v22, v23);
  uint64_t v24 = a3[6];
  long long v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1 + v24);
  long long v27 = *((_OWORD *)v26 + 1);
  *(_OWORD *)long long v25 = *(_OWORD *)v26;
  *((_OWORD *)v25 + 1) = v27;
  uint64_t v28 = *((void *)v26 + 5);
  uint64_t v29 = (void *)*((void *)v25 + 5);
  *((void *)v25 + 4) = *((void *)v26 + 4);
  *((void *)v25 + 5) = v28;

  *((void *)v25 + 6) = *((void *)v26 + 6);
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[7];
  uint64_t v31 = (char *)a1 + v30;
  long long v32 = (char *)a2 + v30;
  *(void *)((char *)a1 + v30) = *(void *)((char *)a2 + v30);
  swift_release();
  *((void *)v31 + 1) = *((void *)v32 + 1);
  swift_release();
  *((void *)v31 + 2) = *((void *)v32 + 2);
  uint64_t v33 = a3[8];
  long long v34 = (char *)a1 + v33;
  long long v35 = (char *)a2 + v33;
  uint64_t v36 = (uint64_t)a2 + v33 + 8;
  *((unsigned char *)a1 + v33) = *((unsigned char *)a2 + v33);
  uint64_t v37 = (uint64_t)a1 + v33 + 8;
  if (*(void *)((char *)a1 + v33 + 16))
  {
    if (*((void *)v35 + 2))
    {
      *((void *)v34 + 1) = *((void *)v35 + 1);
      swift_release();
      *((void *)v34 + 2) = *((void *)v35 + 2);
      swift_release();
      v34[24] = v35[24];
      goto LABEL_13;
    }
    outlined destroy of PlatformItem.SelectionContent?(v37, &lazy cache variable for type metadata for Binding<Visibility>, MEMORY[0x1E4F3F3F0], MEMORY[0x1E4F41638]);
  }
  *(_OWORD *)uint64_t v37 = *(_OWORD *)v36;
  *(unsigned char *)(v37 + 16) = *(unsigned char *)(v36 + 16);
LABEL_13:
  uint64_t v38 = *((void *)v35 + 4);
  if (*((void *)v34 + 4) == 1)
  {
LABEL_16:
    *((_OWORD *)v34 + 2) = *((_OWORD *)v35 + 2);
    *((void *)v34 + 6) = *((void *)v35 + 6);
    goto LABEL_18;
  }
  if (v38 == 1)
  {
    outlined destroy of TabSidebarAccessoryViewConfiguration((uint64_t)(v34 + 32));
    goto LABEL_16;
  }
  *((void *)v34 + 4) = v38;
  swift_release();
  *((void *)v34 + 5) = *((void *)v35 + 5);
  swift_release();
  *((void *)v34 + 6) = *((void *)v35 + 6);
  swift_release();
LABEL_18:
  char v39 = v35 + 56;
  int v40 = v34[64];
  if (v40 != 255)
  {
    int v41 = v35[64];
    if (v41 != 255)
    {
      uint64_t v42 = *((void *)v34 + 7);
      *((void *)v34 + 7) = *v39;
      v34[64] = v41 & 1;
      outlined consume of PlatformItemCollection.Storage(v42, v40 & 1);
      goto LABEL_23;
    }
    outlined destroy of PlatformItemCollection((uint64_t)(v34 + 56));
  }
  *((void *)v34 + 7) = *v39;
  v34[64] = v35[64];
LABEL_23:
  *(_WORD *)(v34 + 65) = *(_WORD *)(v35 + 65);
  return a1;
}

uint64_t getEnumTagSinglePayload for AdaptableTabView.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187E7902C);
}

uint64_t sub_187E7902C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s2os6LoggerVSgMaTm_1(0, &lazy cache variable for type metadata for Environment<Binding<TabViewCustomization>?>, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>?, MEMORY[0x1E4F3F4E0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AdaptableTabView.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187E79134);
}

void sub_187E79134(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _s2os6LoggerVSgMaTm_1(0, &lazy cache variable for type metadata for Environment<Binding<TabViewCustomization>?>, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>?, MEMORY[0x1E4F3F4E0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 24) = (a2 - 1);
  }
}

uint64_t type metadata accessor for AdaptableTabView.BodyContent(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for AdaptableTabView.BodyContent);
}

void type metadata completion function for AdaptableTabView.BodyContent()
{
  type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t associated type witness table accessor for View.Body : View in AdaptableTabView.BodyContent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined assign with take of Binding<SearchFieldState>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<SearchFieldState>?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Binding<TabViewCustomization>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for (offset: Int, element: (UIViewController, TabEntry))?(uint64_t a1)
{
}

void type metadata accessor for (offset: Int, element: (UIViewController, TabEntry))()
{
  if (!lazy cache variable for type metadata for (offset: Int, element: (UIViewController, TabEntry)))
  {
    type metadata accessor for (UIViewController, TabEntry)();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: (UIViewController, TabEntry)));
    }
  }
}

void _s7SwiftUI19UIHostingControllerCyAA7TabItemV8RootViewVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>;
  if (!lazy protocol witness table cache variable for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>)
  {
    _s7SwiftUI19UIHostingControllerCyAA7TabItemV8RootViewVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for IntegerFormatStyle<Int>, (uint64_t (*)(void))lazy protocol witness table accessor for type Int and conformance Int, MEMORY[0x1E4FBB550], MEMORY[0x1E4F27420]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>);
  }
  return result;
}

uint64_t _s7SwiftUI7TabItemVSgWObTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for TabItem?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI7TabItemVSgWOcTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for TabItem?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_187E79678()
{
  if (*(void *)(v0 + 64) >= 2uLL) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIHostingController.createBridgedTab(using:)()
{
  return closure #1 in UIHostingController.createBridgedTab(using:)(v0 + 16);
}

void type metadata accessor for UIViewController?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for NSObject(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [_UITab] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [_UITab] and conformance [A];
  if (!lazy protocol witness table cache variable for type [_UITab] and conformance [A])
  {
    type metadata accessor for UIViewController?(255, &lazy cache variable for type metadata for [_UITab], &lazy cache variable for type metadata for _UITab, 0x1E4FB2398, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [_UITab] and conformance [A]);
  }
  return result;
}

void type metadata accessor for TabViewCustomization?(uint64_t a1)
{
}

uint64_t outlined consume of TabItemGroup.HostCache?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for implicit closure #13 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:)()
{
  return implicit closure #13 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:)(v0 + 16);
}

uint64_t sub_187E79840()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #14 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:)()
{
  return implicit closure #14 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:)(*(void *)(v0 + 16));
}

uint64_t sub_187E79880()
{
  return swift_deallocObject();
}

unsigned char **partial apply for closure #1 in OSLogArguments.append(_:)(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_187E79898()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t partial apply for closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_187E798B8()
{
  return swift_deallocObject();
}

uint64_t sub_187E798C8()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for (_:_:_:)()
{
  unint64_t result = lazy cache variable for type metadata for (_:_:_:);
  if (!lazy cache variable for type metadata for (_:_:_:))
  {
    type metadata accessor for TabItem?(255, &lazy cache variable for type metadata for UnsafeMutablePointer<UInt8>, MEMORY[0x1E4FBC358], MEMORY[0x1E4FBB700]);
    _s2os6LoggerVSgMaTm_1(255, &lazy cache variable for type metadata for UnsafeMutablePointer<NSObject?>?, (uint64_t (*)(uint64_t))type metadata accessor for UnsafeMutablePointer<NSObject?>, MEMORY[0x1E4FBB718]);
    type metadata accessor for UnsafeMutablePointer<Any>?();
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:_:));
  }
  return result;
}

void type metadata accessor for UnsafeMutablePointer<NSObject?>()
{
  if (!lazy cache variable for type metadata for UnsafeMutablePointer<NSObject?>)
  {
    type metadata accessor for UIViewController?(255, (unint64_t *)&lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject, 0x1E4FBA8A8, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for UnsafeMutablePointer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UnsafeMutablePointer<NSObject?>);
    }
  }
}

void type metadata accessor for UnsafeMutablePointer<Any>?()
{
  if (!lazy cache variable for type metadata for UnsafeMutablePointer<Any>?)
  {
    type metadata accessor for TabItem?(255, &lazy cache variable for type metadata for UnsafeMutablePointer<Any>, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB700]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UnsafeMutablePointer<Any>?);
    }
  }
}

void type metadata accessor for TabItem?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined copy of TabItemGroup.HostCache?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_187E79B4C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #8 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(void *)(v4 + 16), a2, a3, a4);
}

uint64_t objectdestroy_12Tm()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of TabCustomizationID.Base();
  if (*(void *)(v0 + 88))
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 64);
    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 192))
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 168);
    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #9 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:)()
{
  return implicit closure #9 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:)(v0 + 16);
}

uint64_t sub_187E79C24()
{
  if ((*(unsigned char *)(v0 + 280) & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_release();
    swift_bridgeObjectRelease();

    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of TabCustomizationID.Base();
  if (*(void *)(v0 + 88))
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 64);
    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 192))
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 168);
    swift_release();
    swift_bridgeObjectRelease();

LABEL_7:
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #10 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:)()
{
  return implicit closure #10 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:)(v0 + 16);
}

uint64_t sub_187E79D14()
{
  return swift_deallocObject();
}

uint64_t sub_187E79D24()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t partial apply for specialized closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, *(void (**)(uint64_t *__return_ptr))(v3 + 16));
}

uint64_t sub_187E79D44()
{
  return swift_deallocObject();
}

uint64_t sub_187E79D54()
{
  return swift_deallocObject();
}

uint64_t sub_187E79D64()
{
  return swift_deallocObject();
}

uint64_t sub_187E79D74()
{
  return swift_deallocObject();
}

uint64_t sub_187E79D84()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_187E79DBC()
{
  return swift_deallocObject();
}

uint64_t sub_187E79DCC()
{
  return swift_deallocObject();
}

uint64_t sub_187E79DDC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in static TabViewCustomization.arrangedChildren<A, B>(_:customization:sectionID:includeHidden:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  specialized closure #1 in static TabViewCustomization.arrangedChildren<A, B>(_:customization:sectionID:includeHidden:id:)(a1, *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16), *(uint64_t (**)(uint64_t *, double))(v3 + 16), *(unsigned char *)(v3 + 32), *(void *)(v3 + 40), (uint64_t)v6);
  return outlined init with take of Binding<TabViewCustomization>((uint64_t)v6, a3, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TabCustomizationID, id: TabCustomizationID)?);
}

void type metadata accessor for (index: Int, element: TabCustomizationID, id: TabCustomizationID)?(uint64_t a1)
{
}

void type metadata accessor for (offset: Int, element: TabEntry)?(uint64_t a1)
{
}

void type metadata accessor for (offset: Int, element: TabEntry)()
{
  if (!lazy cache variable for type metadata for (offset: Int, element: TabEntry))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: TabEntry));
    }
  }
}

uint64_t sub_187E79F50()
{
  uint64_t v1 = type metadata accessor for UIKitAdaptableTabView(0);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 64);

  swift_bridgeObjectRelease();
  uint64_t v4 = v0 + v2;
  swift_release();
  swift_release();
  if (*(void *)(v0 + v2 + 40))
  {
    swift_release();
    swift_release();
  }
  if (*(void *)(v4 + 56) != 1)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  int v5 = *(unsigned __int8 *)(v4 + 88);
  if (v5 != 255) {
    outlined consume of PlatformItemCollection.Storage(*(void *)(v4 + 80), v5 & 1);
  }
  uint64_t v6 = v4 + *(int *)(v1 + 24);
  type metadata accessor for Binding<TabViewCustomization>(0);
  uint64_t v8 = v7;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_release();
    swift_release();
    uint64_t v9 = v6 + *(int *)(v8 + 32);
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
    type metadata accessor for TabViewCustomization();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in UIKitAdaptableTabView.setViewControllers(on:allViewControllers:tabs:selected:environment:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UIKitAdaptableTabView(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = (void *)v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = (void *)v0[4];
  uint64_t v7 = (uint64_t)v0 + v2;
  uint64_t v8 = *(void *)((char *)v0 + v3);
  uint64_t v9 = (void *)((char *)v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];

  return closure #3 in UIKitAdaptableTabView.setViewControllers(on:allViewControllers:tabs:selected:environment:)(v4, v5, v6, v7, v8, v10, v11);
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<PhoneInterfaceIdiom>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<PhoneInterfaceIdiom>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>>)
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultToggleIsOnKey>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<PhoneInterfaceIdiom>, MEMORY[0x1E4F40460], MEMORY[0x1E4F40458], MEMORY[0x1E4F40C60]);
    type metadata accessor for ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, type metadata accessor for ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<PhoneInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<PhoneInterfaceIdiom>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<PhoneInterfaceIdiom>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<PhoneInterfaceIdiom>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<PhoneInterfaceIdiom>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<PhoneInterfaceIdiom>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<PhoneInterfaceIdiom>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t _CoordinateSpaceModifier.name.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _CoordinateSpaceModifier.name.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_CoordinateSpaceModifier.name.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _CoordinateSpaceModifier.init(name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

void protocol witness for ViewModifier.body(content:) in conformance CoordinateSpaceNameModifier()
{
}

double protocol witness for Rule.value.getter in conformance CoordinateSpaceNameTransform@<D0>(uint64_t a1@<X8>)
{
  return CoordinateSpaceNameTransform.value.getter(a1);
}

uint64_t getEnumTagSinglePayload for _CoordinateSpaceModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _CoordinateSpaceModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187E7A874);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_187E7A89C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187E7A90C()
{
  return swift_getWitnessTable();
}

_OWORD *assignWithTake for CoordinateSpaceNameModifier(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of CoordinateSpace.Name((uint64_t)a1);
    long long v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  return a1;
}

uint64_t specialized static CoordinateSpaceNameModifier._makeViewInputs(modifier:inputs:)()
{
  return _ViewInputs.transform.setter();
}

ValueMetadata *type metadata accessor for CoordinateSpaceNameTransform()
{
  return &type metadata for CoordinateSpaceNameTransform;
}

uint64_t ControlGroup.init<A, B>(content:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  MEMORY[0x1F4188790](a1);
  unsigned int v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v19(v16);
  a2(v20);
  LabeledControlGroupContent.init(content:label:)((uint64_t)v18, (uint64_t)v14, a3, a4, a7);
  v22[0] = a3;
  v22[1] = a4;
  v22[2] = a5;
  v22[3] = a6;
  type metadata accessor for LabeledControlGroupContent();
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for ControlGroup();
  *(unsigned char *)(a7 + *(int *)(result + 36)) = 1;
  return result;
}

void ControlGroup<>.init(_:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t ControlGroup.init(content:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  a1();
  uint64_t result = type metadata accessor for ControlGroup();
  *(unsigned char *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t ControlGroup.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v2;
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  BOOL v9 = (char *)&v26 - v8;
  unint64_t v10 = lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content();
  uint64_t v11 = *(void *)(a1 + 24);
  int v40 = &type metadata for ControlGroupStyleConfiguration.Content;
  uint64_t v41 = v4;
  unint64_t v42 = v10;
  uint64_t v43 = v11;
  uint64_t v30 = v11;
  type metadata accessor for StaticSourceWriter();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v26 - v17;
  uint64_t v19 = type metadata accessor for _ConditionalContent();
  uint64_t v29 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v26 - v20;
  if (*(unsigned char *)(v28 + *(int *)(a1 + 36)))
  {
    uint64_t v22 = v30;
    static ViewBuilder.buildExpression<A>(_:)(v28);
    static ViewBuilder.buildExpression<A>(_:)(v9);
    unint64_t v38 = lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup();
    char v39 = &protocol witness table for StaticSourceWriter<A, B>;
    swift_getWitnessTable();
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)v6, v12, v4);
    char v23 = *(void (**)(char *, uint64_t))(v27 + 8);
    v23(v6, v4);
    v23(v9, v4);
  }
  else
  {
    ControlGroup.resolvedBody.getter(a1);
    unint64_t v32 = lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup();
    uint64_t v33 = &protocol witness table for StaticSourceWriter<A, B>;
    swift_getWitnessTable();
    static ViewBuilder.buildExpression<A>(_:)(v15);
    uint64_t v24 = *(void (**)(char *, uint64_t))(v13 + 8);
    v24(v15, v12);
    static ViewBuilder.buildExpression<A>(_:)(v18);
    uint64_t v22 = v30;
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v15, v12);
    v24(v15, v12);
    v24(v18, v12);
  }
  unint64_t v36 = lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup();
  uint64_t v37 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v35 = v22;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v21);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v21, v19);
}

uint64_t ControlGroup.resolvedBody.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = v1;
  unint64_t v2 = lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup();
  lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content();
  return View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for ControlGroupStyleConfiguration.Content, (void (*)(double))partial apply for closure #1 in ControlGroup.resolvedBody.getter, (uint64_t)v4, (uint64_t)&type metadata for ResolvedControlGroup, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Content, v5, v2);
}

uint64_t closure #1 in ControlGroup.resolvedBody.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a2);
}

uint64_t LabeledControlGroupContent.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v4 = a1[2];
  unint64_t v27 = lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content();
  uint64_t v5 = a1[4];
  uint64_t v46 = &type metadata for ControlGroupStyleConfiguration.Content;
  uint64_t v47 = v4;
  unint64_t v48 = v27;
  uint64_t v49 = v5;
  type metadata accessor for StaticSourceWriter();
  uint64_t v24 = type metadata accessor for ModifiedContent();
  uint64_t v28 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  char v23 = (char *)&v22 - v6;
  uint64_t v7 = a1[3];
  unint64_t v25 = lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label();
  uint64_t v8 = a1[5];
  uint64_t v46 = &type metadata for ControlGroupStyleConfiguration.Label;
  uint64_t v47 = v7;
  unint64_t v48 = v25;
  uint64_t v49 = v8;
  type metadata accessor for StaticSourceWriter();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v26 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v37 = v4;
  uint64_t v38 = v7;
  uint64_t v39 = v5;
  uint64_t v40 = v8;
  uint64_t v41 = v2;
  uint64_t v15 = v2;
  unint64_t v16 = lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup();
  uint64_t v17 = v23;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for ControlGroupStyleConfiguration.Content, (void (*)(double))partial apply for closure #1 in LabeledControlGroupContent.body.getter, (uint64_t)v36, (uint64_t)&type metadata for ResolvedControlGroup, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Content, v4, v16);
  uint64_t v31 = v4;
  uint64_t v32 = v7;
  uint64_t v33 = v5;
  uint64_t v34 = v8;
  uint64_t v35 = v15;
  unint64_t v44 = v16;
  uint64_t v45 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v18 = v24;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for ControlGroupStyleConfiguration.Label, (void (*)(double))partial apply for closure #2 in LabeledControlGroupContent.body.getter, (uint64_t)v30, v18, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Label, v7, WitnessTable);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v18);
  uint64_t v42 = WitnessTable;
  uint64_t v43 = &protocol witness table for StaticSourceWriter<A, B>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v26 + 8);
  v20(v11, v9);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v20)(v14, v9);
}

uint64_t closure #1 in LabeledControlGroupContent.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a2);
}

uint64_t closure #2 in LabeledControlGroupContent.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = v8;
  v14[1] = v9;
  v14[2] = v10;
  v14[3] = v11;
  uint64_t v12 = type metadata accessor for LabeledControlGroupContent();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v12 + 52));
  static ViewBuilder.buildExpression<A>(_:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a3);
}

uint64_t LabeledControlGroupContent.init(content:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for LabeledControlGroupContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t type metadata accessor for LabeledControlGroupContent()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ControlGroup()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content()
{
  unint64_t result = lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedControlGroup and conformance ResolvedControlGroup;
  if (!lazy protocol witness table cache variable for type ResolvedControlGroup and conformance ResolvedControlGroup)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedControlGroup and conformance ResolvedControlGroup);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedControlGroup and conformance ResolvedControlGroup;
  if (!lazy protocol witness table cache variable for type ResolvedControlGroup and conformance ResolvedControlGroup)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedControlGroup and conformance ResolvedControlGroup);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label);
  }
  return result;
}

uint64_t partial apply for closure #1 in LabeledControlGroupContent.body.getter()
{
  return partial apply for closure #1 in LabeledControlGroupContent.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in LabeledControlGroupContent.body.getter);
}

uint64_t partial apply for closure #2 in LabeledControlGroupContent.body.getter()
{
  return partial apply for closure #1 in LabeledControlGroupContent.body.getter((uint64_t (*)(void, void, void, void, void))closure #2 in LabeledControlGroupContent.body.getter);
}

uint64_t partial apply for closure #1 in LabeledControlGroupContent.body.getter(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t ControlGroup.init<A>(_:image:content:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X7>, uint64_t a4@<X8>, uint64_t a5)
{
  type metadata accessor for Label<Text, Image>();
  uint64_t v10 = v9;
  unint64_t v11 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  ControlGroup.init<A, B>(content:label:)(a2, (void (*)(uint64_t))partial apply for closure #1 in ControlGroup.init<A>(_:image:content:), a3, v10, a5, v11, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = type metadata accessor for ImageResource();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
}

uint64_t closure #1 in ControlGroup.init<A>(_:image:content:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  LODWORD(v25) = a2;
  uint64_t v24 = a1;
  uint64_t v6 = type metadata accessor for ImageResource();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v14((char *)&v24 - v12, a3, v6, v11);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v24 = v16;
  uint64_t v25 = v15;
  uint64_t v18 = v17;
  char v26 = v19 & 1;
  ((void (*)(char *, char *, uint64_t))v14)(v9, v13, v6);
  uint64_t v20 = Image.init(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  char v22 = v26;
  uint64_t v23 = v24;
  *(void *)a4 = v25;
  *(void *)(a4 + 8) = v23;
  *(unsigned char *)(a4 + 16) = v22;
  *(void *)(a4 + 24) = v18;
  *(void *)(a4 + 32) = v20;
  return result;
}

uint64_t partial apply for closure #1 in ControlGroup.init<A>(_:image:content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ControlGroup.init<A>(_:image:content:)(*(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 48), a1);
}

uint64_t ControlGroup.init<A, B>(_:image:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  type metadata accessor for Label<Text, Image>();
  uint64_t v15 = v14;
  unint64_t v16 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  ControlGroup.init<A, B>(content:label:)(a3, (void (*)(uint64_t))partial apply for closure #1 in ControlGroup.init<A, B>(_:image:content:), a4, v15, a6, v16, a7);
  uint64_t v17 = type metadata accessor for ImageResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a2, v17);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
}

__n128 closure #1 in ControlGroup.init<A, B>(_:image:content:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ImageResource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  double v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, a1, a3, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  Label<>.init<A>(_:image:)((uint64_t)v15, (uint64_t)v11, a3, (uint64_t)&v19);
  char v17 = v20;
  __n128 result = v21;
  *(_OWORD *)a4 = v19;
  *(unsigned char *)(a4 + 16) = v17;
  *(__n128 *)(a4 + 24) = result;
  return result;
}

double partial apply for closure #1 in ControlGroup.init<A, B>(_:image:content:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = closure #1 in ControlGroup.init<A, B>(_:image:content:)(v1[6], v1[7], v1[3], a1).n128_u64[0];
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ControlGroup<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in LabeledControlGroupContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for ControlGroup()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ControlGroup(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = v6 + 1;
  char v10 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 >= 0xFE) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      unsigned int v15 = *((unsigned __int8 *)a1 + v6);
      if (v15 >= 2) {
        return v15 - 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for ControlGroup(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x187E7C5CCLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 < 0xFE)
        {
          a1[v9] = a2 + 1;
        }
        else
        {
          uint64_t v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for LabeledControlGroupContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for LabeledControlGroupContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187E7CAB8);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t sub_187E7CAE0()
{
  return swift_getWitnessTable();
}

uint64_t sub_187E7CBB0()
{
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for ControlGroup.BodyMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187E7CD64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for ControlGroup.BodyMode()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in ControlGroup<A>.BodyMode()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in ControlGroup.resolvedBody.getter()
{
  return closure #1 in ControlGroup.resolvedBody.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

void ControlWidgetConfigurationModifier<>.body(content:)()
{
}

uint64_t static EmptyControlWidgetConfiguration._makeWidgetControlConfiguration(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  int v5 = *((_DWORD *)a2 + 14);
  uint64_t v7 = *a2;
  int v8 = v3;
  uint64_t v9 = v4;
  long long v10 = *(_OWORD *)(a2 + 3);
  long long v11 = *(_OWORD *)(a2 + 5);
  int v12 = v5;
  return a3(a1, &v7);
}

void protocol witness for ControlWidgetConfigurationModifier.body(content:) in conformance EmptyControlWidgetConfiguration()
{
}

uint64_t ControlWidgetConfiguration.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  return ModifiedContent.init(content:modifier:)();
}

uint64_t static ModifiedContent<>._makeWidgetControlConfiguration(control:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a2;
  int v13 = *((_DWORD *)a2 + 2);
  uint64_t v14 = a2[2];
  int v15 = *((_DWORD *)a2 + 14);
  LODWORD(v21) = *a1;
  int v11 = v21;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  long long v20 = *(_OWORD *)(a2 + 5);
  uint64_t v16 = a2[3];
  uint64_t v17 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v21 = v12;
  int v22 = v13;
  uint64_t v23 = v14;
  uint64_t v24 = v16;
  uint64_t v25 = v17;
  long long v26 = v20;
  int v27 = v15;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a3;
  *(void *)(v18 + 24) = a4;
  *(void *)(v18 + 32) = a5;
  *(void *)(v18 + 40) = a6;
  *(_DWORD *)(v18 + 48) = v11;
  (*(void (**)(unsigned char *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a6 + 32))(v28, &v21, partial apply for closure #2 in static ModifiedContent<>._makeWidgetControlConfiguration(control:inputs:), v18, a4, a6);
  return swift_release();
}

uint64_t closure #2 in static ModifiedContent<>._makeWidgetControlConfiguration(control:inputs:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *a2;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  int v12 = *((_DWORD *)a2 + 14);
  LODWORD(v17) = a3;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  long long v16 = *(_OWORD *)(a2 + 5);
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v17 = v9;
  int v18 = v10;
  uint64_t v19 = v11;
  uint64_t v20 = v13;
  uint64_t v21 = v14;
  long long v22 = v16;
  int v23 = v12;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(a6 + 32))(v24, &v17, a4, a6);
}

void protocol witness for ControlWidgetConfiguration.body.getter in conformance <> ModifiedContent<A, B>()
{
}

uint64_t protocol witness for static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:) in conformance <> ModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static ModifiedContent<>._makeWidgetControlConfiguration(control:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t static ModifiedContent<>._makeWidgetControlConfiguration(modifier:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *a2;
  int v16 = *((_DWORD *)a2 + 2);
  uint64_t v17 = a2[2];
  int v24 = *((_DWORD *)a2 + 14);
  LODWORD(v26) = *a1;
  int v14 = v26;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  long long v23 = *(_OWORD *)(a2 + 5);
  uint64_t v18 = a2[3];
  uint64_t v19 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v26 = v15;
  int v27 = v16;
  uint64_t v28 = v17;
  uint64_t v29 = v18;
  uint64_t v30 = v19;
  long long v31 = v23;
  int v32 = v24;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a5;
  *(void *)(v20 + 24) = a6;
  *(void *)(v20 + 32) = a7;
  *(void *)(v20 + 40) = a8;
  *(_DWORD *)(v20 + 48) = v14;
  *(void *)(v20 + 56) = a3;
  *(void *)(v20 + 64) = a4;
  uint64_t v21 = *(void (**)(unsigned char *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a8 + 32);
  swift_retain();
  v21(v33, &v26, partial apply for closure #2 in static ModifiedContent<>._makeWidgetControlConfiguration(modifier:inputs:body:), v20, a6, a8);
  return swift_release();
}

uint64_t closure #2 in static ModifiedContent<>._makeWidgetControlConfiguration(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *a2;
  int v14 = *((_DWORD *)a2 + 2);
  uint64_t v15 = a2[2];
  int v16 = *((_DWORD *)a2 + 14);
  LODWORD(v21) = a3;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  long long v20 = *(_OWORD *)(a2 + 5);
  uint64_t v17 = a2[3];
  uint64_t v18 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v21 = v13;
  int v22 = v14;
  uint64_t v23 = v15;
  uint64_t v24 = v17;
  uint64_t v25 = v18;
  long long v26 = v20;
  int v27 = v16;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 32))(v28, &v21, a4, a5, a6, a8);
}

void protocol witness for ControlWidgetConfigurationModifier.body(content:) in conformance <> ModifiedContent<A, B>()
{
}

uint64_t protocol witness for static ControlWidgetConfigurationModifier._makeWidgetControlConfiguration(modifier:inputs:body:) in conformance <> ModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ModifiedContent<>._makeWidgetControlConfiguration(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), *(void *)(a6 - 8), *(void *)(a6 - 16));
}

uint64_t static ControlWidgetConfigurationModifier_Content._makeWidgetControlConfiguration(control:inputs:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  int v6 = *(_DWORD *)(a2 + 56);
  uint64_t v17 = *(void (**)(uint64_t, void))a2;
  int v18 = v2;
  uint64_t v19 = v3;
  long long v20 = *(_OWORD *)(a2 + 24);
  uint64_t v21 = v4;
  uint64_t v22 = v5;
  int v23 = v6;
  type metadata accessor for ControlWidgetConfigurationModifier_Content.BodyInput();
  type metadata accessor for (_:_:)();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  _SceneInputs.popLast<A, B>(_:)();
  uint64_t v7 = v10;
  if (v10)
  {
    int v10 = v17;
    LODWORD(v11) = v18;
    uint64_t v12 = v19;
    long long v13 = v20;
    uint64_t v14 = v21;
    uint64_t v15 = v22;
    int v16 = v23;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v8 = swift_bridgeObjectRetain();
    v7(v8, &v10);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v7);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    PreferencesOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
}

uint64_t protocol witness for static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:) in conformance ControlWidgetConfigurationModifier_Content<A>(uint64_t a1, uint64_t a2)
{
  return static ControlWidgetConfigurationModifier_Content._makeWidgetControlConfiguration(control:inputs:)(a1, a2);
}

void specialized ControlWidgetConfigurationModifier.controlBodyError()()
{
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v0._object = (void *)0x800000018833B540;
  v0._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized ControlWidgetConfigurationModifier<>.body(content:)()
{
}

uint64_t sub_187E7D86C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeWidgetControlConfiguration(control:inputs:)(uint64_t a1, uint64_t *a2)
{
  return closure #2 in static ModifiedContent<>._makeWidgetControlConfiguration(control:inputs:)(a1, a2, *(_DWORD *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_187E7D88C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeWidgetControlConfiguration(modifier:inputs:body:)(uint64_t a1, uint64_t *a2)
{
  return closure #2 in static ModifiedContent<>._makeWidgetControlConfiguration(modifier:inputs:body:)(a1, a2, *(_DWORD *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t type metadata accessor for ControlWidgetConfigurationModifier_Content.BodyInput()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **associated type witness table accessor for ControlWidgetConfigurationModifier.Body : ControlWidgetConfiguration in EmptyControlWidgetConfiguration()
{
  return &protocol witness table for Never;
}

uint64_t dispatch thunk of ControlWidgetConfigurationModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static ControlWidgetConfigurationModifier._makeWidgetControlConfiguration(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t type metadata accessor for ControlWidgetConfigurationModifier_Content()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for PropertyKey in ControlWidgetConfigurationModifier_Content<A>.BodyInput()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for ControlWidgetConfigurationModifier_Content<A>.BodyInput(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t one-time initialization function for clarityUINavigationTransition()
{
  uint64_t result = static Animation.coreAnimationDefault(duration:)();
  static Animation.clarityUINavigationTransition = result;
  return result;
}

uint64_t static Animation.clarityUINavigationTransition.getter()
{
  if (one-time initialization token for clarityUINavigationTransition != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t PrimaryContentStyle._apply(to:)(uint64_t a1)
{
  return MEMORY[0x1F40FFE48](a1, 0);
}

unsigned char *static PrimaryContentStyle._apply(to:)(unsigned char *result)
{
  *uint64_t result = 1;
  return result;
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance PrimaryContentStyle(uint64_t a1)
{
  return MEMORY[0x1F40FFE48](a1, 0);
}

uint64_t SecondaryContentStyle._apply(to:)(uint64_t a1)
{
  return MEMORY[0x1F40FFE48](a1, 1);
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance SecondaryContentStyle(uint64_t a1)
{
  return MEMORY[0x1F40FFE48](a1, 1);
}

uint64_t TertiaryContentStyle._apply(to:)(uint64_t a1)
{
  return MEMORY[0x1F40FFE48](a1, 2);
}

uint64_t QuaternaryContentStyle._apply(to:)(uint64_t a1)
{
  return MEMORY[0x1F40FFE48](a1, 3);
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance QuaternaryContentStyle(uint64_t a1)
{
  return MEMORY[0x1F40FFE48](a1, 3);
}

void __swiftcall QuinaryContentStyle.init()()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void QuinaryContentStyle._apply(to:)()
{
}

_UNKNOWN **base witness table accessor for ShapeStyle in PrimaryContentStyle()
{
  return &protocol witness table for PrimaryContentStyle;
}

_UNKNOWN **base witness table accessor for ShapeStyle in SecondaryContentStyle()
{
  return &protocol witness table for SecondaryContentStyle;
}

_UNKNOWN **base witness table accessor for ShapeStyle in TertiaryContentStyle()
{
  return &protocol witness table for TertiaryContentStyle;
}

_UNKNOWN **base witness table accessor for ShapeStyle in QuaternaryContentStyle()
{
  return &protocol witness table for QuaternaryContentStyle;
}

_UNKNOWN **base witness table accessor for ShapeStyle in QuinaryContentStyle()
{
  return &protocol witness table for QuinaryContentStyle;
}

ValueMetadata *type metadata accessor for PrimaryContentStyle()
{
  return &type metadata for PrimaryContentStyle;
}

ValueMetadata *type metadata accessor for SecondaryContentStyle()
{
  return &type metadata for SecondaryContentStyle;
}

ValueMetadata *type metadata accessor for TertiaryContentStyle()
{
  return &type metadata for TertiaryContentStyle;
}

ValueMetadata *type metadata accessor for QuaternaryContentStyle()
{
  return &type metadata for QuaternaryContentStyle;
}

ValueMetadata *type metadata accessor for QuinaryContentStyle()
{
  return &type metadata for QuinaryContentStyle;
}

void static QuinaryContentStyle._apply(to:)()
{
}

ValueMetadata *type metadata accessor for AllPlatformItemListFlags()
{
  return &type metadata for AllPlatformItemListFlags;
}

ValueMetadata *type metadata accessor for PlatformItemListFlagsInput()
{
  return &type metadata for PlatformItemListFlagsInput;
}

_DWORD *protocol witness for OptionSet.init(rawValue:) in conformance PlatformItemListFlagsSet@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.union(_:) in conformance PlatformItemListFlagsSet@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.intersection(_:) in conformance PlatformItemListFlagsSet@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance PlatformItemListFlagsSet@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance PlatformItemListFlagsSet(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *protocol witness for SetAlgebra.remove(_:) in conformance PlatformItemListFlagsSet@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *protocol witness for SetAlgebra.update(with:) in conformance PlatformItemListFlagsSet@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance PlatformItemListFlagsSet(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance PlatformItemListFlagsSet(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance PlatformItemListFlagsSet(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance PlatformItemListFlagsSet@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance PlatformItemListFlagsSet(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance PlatformItemListFlagsSet(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance PlatformItemListFlagsSet(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance PlatformItemListFlagsSet()
{
  return *v0 == 0;
}

_DWORD *protocol witness for SetAlgebra.subtract(_:) in conformance PlatformItemListFlagsSet(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance PlatformItemListFlagsSet@<X0>(_DWORD *a1@<X8>)
{
  int v2 = specialized SetAlgebra<>.init(arrayLiteral:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for static PlatformItemListFlags.flags.getter in conformance ActionPlatformItemListFlags()
{
  return 13;
}

uint64_t protocol witness for static PlatformItemListFlags.flags.getter in conformance SearchTokenPlatformItemListFlags()
{
  return 15;
}

uint64_t protocol witness for static PlatformItemListFlags.flags.getter in conformance AllPlatformItemListFlags()
{
  return 0xFFFFFFFFLL;
}

ValueMetadata *type metadata accessor for ActionPlatformItemListFlags()
{
  return &type metadata for ActionPlatformItemListFlags;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IncludesStyledText()
{
  lazy protocol witness table accessor for type IncludesStyledText and conformance IncludesStyledText();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IncludesStyledText()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IncludesStyledTextModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance IncludesStyledTextModifier()
{
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IncludesStyledTextModifier()
{
  return PropertyList.subscript.setter();
}

_UNKNOWN **base witness table accessor for ViewModifier in IncludesStyledTextModifier()
{
  return &protocol witness table for IncludesStyledTextModifier;
}

unint64_t lazy protocol witness table accessor for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet;
  if (!lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet;
  if (!lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet;
  if (!lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet;
  if (!lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet);
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchTokenPlatformItemListFlags()
{
  return &type metadata for SearchTokenPlatformItemListFlags;
}

ValueMetadata *type metadata accessor for IncludesStyledText()
{
  return &type metadata for IncludesStyledText;
}

ValueMetadata *type metadata accessor for ToolbarPlatformItemListFlags()
{
  return &type metadata for ToolbarPlatformItemListFlags;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IncludesStyledText()
{
  return &protocol witness table for IncludesStyledText;
}

id LazyWidgetAuxiliaryMetadataTextImage.init(flags:content:inputs:)@<X0>(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  long long v13 = *(_OWORD *)(a2 + 5);
  long long v14 = *(_OWORD *)(a2 + 3);
  long long v12 = *(_OWORD *)(a2 + 7);
  uint64_t v8 = a2[9];
  int v9 = *((_DWORD *)a2 + 20);
  id result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    int v11 = *MEMORY[0x1E4F4E7A0];
    *(void *)a3 = result;
    *(_DWORD *)(a3 + 8) = a1;
    *(void *)(a3 + 16) = v5;
    *(_DWORD *)(a3 + 24) = v6;
    *(void *)(a3 + 32) = v7;
    *(_OWORD *)(a3 + 40) = v14;
    *(_OWORD *)(a3 + 56) = v13;
    *(_OWORD *)(a3 + 72) = v12;
    *(void *)(a3 + 88) = v8;
    *(_DWORD *)(a3 + 96) = v9;
    *(_DWORD *)(a3 + 100) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, id *a5@<X8>)
{
  uint64_t v162 = a4;
  uint64_t v160 = a2;
  uint64_t v177 = a1;
  type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v154 = (uint64_t)&v140 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v9 - 8);
  v184 = (char *)&v140 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v155 = (uint64_t)&v140 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  v183 = (char *)&v140 - v14;
  uint64_t v15 = type metadata accessor for PlatformItemList.Item();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v182 = (uint64_t)&v140 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v18 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  uint64_t v187 = *((void *)v18 - 1);
  MEMORY[0x1F4188790](v18);
  v156 = (void **)((char *)&v140 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v20);
  v141 = (char *)&v140 - v21;
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v153 = (uint64_t)&v140 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  v143 = (uint64_t *)((char *)&v140 - v25);
  type metadata accessor for PlatformItemList.Item?(0);
  MEMORY[0x1F4188790](v26 - 8);
  v181 = (char *)&v140 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v140 - v29;
  MEMORY[0x1F4188790](v31);
  uint64_t v142 = (uint64_t)&v140 - v32;
  MEMORY[0x1F4188790](v33);
  uint64_t v175 = (uint64_t)&v140 - v34;
  MEMORY[0x1F4188790](v35);
  uint64_t v37 = (uint64_t *)((char *)&v140 - v36);
  MEMORY[0x1F4188790](v38);
  uint64_t v40 = (char *)&v140 - v39;
  MEMORY[0x1F4188790](v41);
  uint64_t v43 = (id *)((char *)&v140 - v42);
  uint64_t v44 = *a3;
  uint64_t v157 = a3[1];
  uint64_t v158 = v44;
  uint64_t v45 = a3[2];
  uint64_t v167 = a3[3];
  uint64_t v168 = v45;
  uint64_t v46 = a3[4];
  uint64_t v165 = a3[5];
  uint64_t v166 = v46;
  uint64_t v47 = a3[6];
  uint64_t v163 = a3[7];
  uint64_t v164 = v47;
  *a5 = 0;
  a5[1] = 0;
  uint64_t v48 = (uint64_t)a5 + v18[6];
  uint64_t v49 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  uint64_t v147 = *(void *)(v49 - 8);
  uint64_t v50 = *(void (***)(char *, uint64_t, uint64_t, int *))(v147 + 56);
  uint64_t v169 = v49;
  v170 = (uint64_t *)v48;
  v173 = v50;
  v174 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v147 + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t))v50)(v48, 1, 1);
  uint64_t v159 = v18[7];
  *(id *)((char *)a5 + v159) = 0;
  uint64_t v51 = (uint64_t)a5 + v18[8];
  uint64_t v52 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  uint64_t v148 = *(void *)(v52 - 8);
  uint64_t v149 = v52;
  uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v148 + 56);
  uint64_t v150 = v51;
  v53(v51, 1, 1);
  char v54 = (char *)a5 + v18[9];
  v54[48] = 0;
  *((_OWORD *)v54 + 1) = 0u;
  *((_OWORD *)v54 + 2) = 0u;
  v151 = v54;
  *(_OWORD *)char v54 = 0u;
  char v55 = (char *)a5 + v18[10];
  uint64_t v56 = type metadata accessor for URL();
  uint64_t v152 = *(void *)(v56 - 8);
  v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v152 + 56);
  uint64_t v171 = (uint64_t)v55;
  uint64_t v185 = v56;
  v179 = v57;
  uint64_t v180 = v152 + 56;
  ((void (*)(char *, uint64_t, uint64_t))v57)(v55, 1, 1);
  uint64_t v58 = v18[11];
  v172 = a5;
  v59 = (_OWORD *)((char *)a5 + v58);
  long long v178 = xmmword_18834BB90;
  _OWORD *v59 = xmmword_18834BB90;
  v59[1] = 0u;
  v59[2] = 0u;
  v59[3] = 0u;
  v161 = (uint64_t *)((char *)a5 + v58);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v177, (uint64_t)v43, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
  uint64_t v140 = v16;
  v60 = *(int **)(v16 + 48);
  uint64_t v186 = v15;
  v176 = v60;
  if (((unsigned int (*)(id *, uint64_t, uint64_t))v60)(v43, 1, v15) == 1)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
    uint64_t v61 = (uint64_t)v30;
    v62 = v176;
  }
  else
  {
    id v63 = *v43;
    id v64 = *v43;
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    uint64_t v61 = (uint64_t)v30;
    v62 = v176;
    if (v63)
    {
      v65 = v172;

      id *v65 = v63;
    }
  }
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v177, (uint64_t)v40, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
  uint64_t v66 = v186;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v62)(v40, 1, v186) == 1)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
  }
  else
  {
    v67 = (void *)*((void *)v40 + 1);
    id v68 = v67;
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    if (v67)
    {
      v69 = v172;

      v69[1] = v67;
    }
  }
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v177, (uint64_t)v37, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
  if (((unsigned int (*)(void *, uint64_t, uint64_t))v62)(v37, 1, v66) == 1)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
  }
  else
  {
    uint64_t v71 = v37[31];
    uint64_t v70 = v37[32];
    v72 = (void *)v37[33];
    uint64_t v73 = v37[34];
    uint64_t v74 = v37[36];
    uint64_t v145 = v37[35];
    v146 = v72;
    uint64_t v144 = v74;
    outlined copy of Image.NamedResolved?(v71, v70, v72);
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    if (v70)
    {
      v189[0] = v71;
      v189[1] = v70;
      v189[2] = (uint64_t)v146;
      int v190 = v73;
      char v191 = BYTE4(v73) & 1;
      char v192 = BYTE5(v73);
      char v193 = BYTE6(v73) & 1;
      uint64_t v194 = v145;
      uint64_t v195 = v144;
      uint64_t v75 = v142;
      outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v177, v142, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v62)(v75, 1, v66) == 1)
      {
        swift_bridgeObjectRetain();
        outlined copy of Image.Location(v146);
        swift_retain();
        swift_retain();
        outlined destroy of ResolvableTextSegmentAttribute.Value?(v75, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
        _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v188);
        uint64_t v76 = MEMORY[0x1E4F41550];
      }
      else
      {
        uint64_t v83 = MEMORY[0x1E4F41550];
        _sypSgWObTm_1(v75 + 64, (uint64_t)v188, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
        outlined copy of Image.NamedResolved?(v71, v70, v146);
        outlined retain of Image.Resolved?((uint64_t)v188, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
        outlined destroy of ResolvableTextSegmentAttribute.Value?(v75, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        uint64_t v76 = v83;
        uint64_t v66 = v186;
      }
      _sypSgWObTm_1((uint64_t)v188, (uint64_t)v196, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v76);
      uint64_t v79 = v171;
      _sypSgWObTm_1((uint64_t)v196, (uint64_t)v188, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
      v84 = v143;
      WidgetAuxiliaryViewMetadata.Graphic.Named.init(_:_:)(v189, (uint64_t)v188, v143);
      outlined consume of Image.NamedResolved?(v71, v70, v146);
      uint64_t v85 = v169;
      swift_storeEnumTagMultiPayload();
      ((void (*)(void *, void, uint64_t, uint64_t))v173)(v84, 0, 1, v85);
      outlined assign with take of WidgetAuxiliaryViewMetadata.Progress?((uint64_t)v84, (uint64_t)v170, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
      v62 = v176;
      goto LABEL_20;
    }
  }
  uint64_t v77 = v175;
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v177, v175, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
  unsigned int v78 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v62)(v77, 1, v66);
  uint64_t v79 = v171;
  if (v78 == 1)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?(v77, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
  }
  else
  {
    uint64_t v80 = PlatformItemList.Item.image.getter();
    outlined destroy of ResolvableTextSegmentAttribute.Value?(v77, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    if (v80)
    {
      v81 = v170;
      outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v170, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
      uint64_t *v81 = v80;
      uint64_t v82 = v169;
      swift_storeEnumTagMultiPayload();
      ((void (*)(uint64_t *, void, uint64_t, uint64_t))v173)(v81, 0, 1, v82);
    }
  }
LABEL_20:
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v177, v61, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v62)(v61, 1, v66) == 1)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?(v61, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
LABEL_31:
    outlined destroy of ResolvableTextSegmentAttribute.Value?(v177, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
LABEL_32:
    v133 = v172;
    v136 = v161;
    uint64_t v135 = v162;
    uint64_t v138 = v158;
    uint64_t v134 = v159;
    uint64_t v139 = v157;
    uint64_t v137 = v160;
    goto LABEL_33;
  }
  v86 = *(void **)(v61 + 616);
  swift_bridgeObjectRetain();
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v61, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  if (!v86) {
    goto LABEL_31;
  }
  int64_t v87 = v86[2];
  if (!v87)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?(v177, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  v188[0] = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v87, 0);
  uint64_t v88 = (uint64_t)v141;
  unint64_t v89 = (*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80);
  v146 = v86;
  uint64_t v90 = (uint64_t)v86 + v89;
  uint64_t v91 = *(void *)(v140 + 72);
  v174 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v140 + 56);
  uint64_t v175 = v91;
  v173 = (void (**)(char *, uint64_t, uint64_t, int *))(v187 + 56);
  v176 = v18;
  uint64_t v92 = (uint64_t)v181;
  do
  {
    v93 = v18;
    uint64_t v94 = v182;
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v90, v182, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v94, v92, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    (*v174)(v92, 0, 1, v66);
    v95 = v183;
    v179(v183, 1, 1, v185);
    v196[0] = v178;
    memset(&v196[1], 0, 48);
    v96 = v184;
    (*v173)(v184, 1, 1, v93);
    WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)(v92, v95, v196, v96);
    outlined destroy of ResolvableTextSegmentAttribute.Value?(v94, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    v97 = (unint64_t *)v188[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v97[2] + 1, 1);
      v97 = (unint64_t *)v188[0];
    }
    unint64_t v99 = v97[2];
    unint64_t v98 = v97[3];
    if (v99 >= v98 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v98 > 1, v99 + 1, 1);
      v97 = (unint64_t *)v188[0];
    }
    v97[2] = v99 + 1;
    outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v88, (uint64_t)v97+ ((*(unsigned __int8 *)(v187 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v187 + 80))+ *(void *)(v187 + 72) * v99, type metadata accessor for WidgetAuxiliaryViewMetadata);
    int v18 = v176;
    v90 += v175;
    --v87;
    uint64_t v66 = v186;
  }
  while (v87);
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v177, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
  swift_bridgeObjectRelease();
  v133 = v172;
  uint64_t v134 = v159;
  swift_bridgeObjectRelease();
  *(id *)((char *)v133 + v134) = v97;
  v136 = v161;
  uint64_t v135 = v162;
  uint64_t v137 = v160;
  uint64_t v79 = v171;
  uint64_t v139 = v157;
  uint64_t v138 = v158;
LABEL_33:
  outlined assign with take of WidgetAuxiliaryViewMetadata.Progress?(v137, v79, (uint64_t (*)(void))type metadata accessor for URL?);
  outlined consume of WidgetAuxiliaryViewMetadata.Accessibility?(*v136, v136[1]);
  uint64_t *v136 = v138;
  v136[1] = v139;
  uint64_t v100 = v167;
  v136[2] = v168;
  v136[3] = v100;
  uint64_t v101 = v165;
  v136[4] = v166;
  v136[5] = v101;
  uint64_t v102 = v163;
  v136[6] = v164;
  v136[7] = v102;
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v187 + 48))(v135, 1, v18) == 1)
  {
    v103 = (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?;
    uint64_t v104 = v135;
  }
  else
  {
    v105 = v156;
    outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v135, (uint64_t)v156, type metadata accessor for WidgetAuxiliaryViewMetadata);
    if (!*(id *)((char *)v133 + v134))
    {
      *(id *)((char *)v133 + v134) = *(void **)((char *)v105 + v18[7]);
      if (!*v133)
      {
        v106 = *v105;
        id *v133 = *v105;
        id v107 = v106;
      }
      swift_bridgeObjectRetain();
    }
    uint64_t v108 = (uint64_t)v170;
    uint64_t v109 = v153;
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v170, v153, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
    int v110 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v109, 1, v169);
    outlined destroy of ResolvableTextSegmentAttribute.Value?(v109, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
    if (v110 == 1) {
      outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v105 + v18[6], v108, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
    }
    uint64_t v111 = v150;
    uint64_t v112 = v154;
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v150, v154, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?);
    int v113 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v148 + 48))(v112, 1, v149);
    outlined destroy of ResolvableTextSegmentAttribute.Value?(v112, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?);
    if (v113 == 1) {
      outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v105 + v18[8], v111, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?);
    }
    v114 = v151;
    if (!v151[1])
    {
      v115 = (char *)v105 + v18[9];
      uint64_t v116 = *(void *)v115;
      uint64_t v117 = *((void *)v115 + 1);
      uint64_t v118 = *((void *)v115 + 2);
      uint64_t v119 = *((void *)v115 + 3);
      uint64_t v120 = *((void *)v115 + 4);
      uint64_t v121 = *((void *)v115 + 5);
      void *v151 = *(void *)v115;
      v114[1] = v117;
      v114[2] = v118;
      v114[3] = v119;
      v114[4] = v120;
      v114[5] = v121;
      *((unsigned char *)v114 + 48) = v115[48];
      outlined copy of WidgetAuxiliaryViewMetadata.Gauge?(v116, v117);
    }
    uint64_t v122 = v155;
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v79, v155, (uint64_t (*)(void))type metadata accessor for URL?);
    int v123 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 48))(v122, 1, v185);
    outlined destroy of ResolvableTextSegmentAttribute.Value?(v122, (uint64_t (*)(void))type metadata accessor for URL?);
    if (v123 == 1) {
      outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v105 + v18[10], v79, (uint64_t (*)(void))type metadata accessor for URL?);
    }
    if (v136[1] == 1)
    {
      v124 = (uint64_t *)((char *)v105 + v18[11]);
      uint64_t v125 = *v124;
      uint64_t v126 = v124[1];
      uint64_t v127 = v124[2];
      uint64_t v128 = v124[3];
      uint64_t v130 = v124[4];
      uint64_t v129 = v124[5];
      uint64_t v131 = v124[7];
      uint64_t v187 = v124[6];
      outlined copy of WidgetAuxiliaryViewMetadata.Accessibility?(v125, v126);
      outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v105, type metadata accessor for WidgetAuxiliaryViewMetadata);
      uint64_t result = outlined consume of WidgetAuxiliaryViewMetadata.Accessibility?(*v136, v136[1]);
      uint64_t *v136 = v125;
      v136[1] = v126;
      v136[2] = v127;
      v136[3] = v128;
      v136[4] = v130;
      v136[5] = v129;
      v136[6] = v187;
      v136[7] = v131;
      return result;
    }
    v103 = type metadata accessor for WidgetAuxiliaryViewMetadata;
    uint64_t v104 = (uint64_t)v105;
  }
  return outlined destroy of ResolvableTextSegmentAttribute.Value?(v104, v103);
}

uint64_t static WidgetAuxiliaryViewMetadata.tint(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.tint.getter();
  if (result)
  {
    uint64_t v3 = result;
    ShapeStyle.resolveGradient(in:level:)();
    if (v7)
    {
      uint64_t result = swift_release();
      *(void *)a1 = v7;
      *(unsigned char *)(a1 + 8) = v8;
      return result;
    }
    uint64_t v4 = ShapeStyle.fallbackColor(in:level:)();
    if (v4)
    {
      uint64_t v5 = v4;
      type metadata accessor for [Color.Resolved](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Color>, MEMORY[0x1E4F414E0], MEMORY[0x1E4FBBE00]);
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_18834BB80;
      *(void *)(v6 + 32) = v5;
      uint64_t v9 = v6;
      specialized Array._endMutation()();
      swift_retain();
      MEMORY[0x18C114170](v9);
      Gradient.resolve(in:)();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_release();
      *(void *)a1 = v3;
      *(unsigned char *)(a1 + 8) = v8;
      return result;
    }
    uint64_t result = swift_release();
  }
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.init(kind:label:currentValueLabel:tint:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v34 = a1;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v33 = (uint64_t)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v38 = *a4;
  int v37 = *((unsigned __int8 *)a4 + 8);
  uint64_t v12 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  uint64_t v13 = *(int *)(v12 + 20);
  uint64_t v14 = v12;
  uint64_t v15 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  v16(v11, 1, 1, v15);
  type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>(0);
  uint64_t v17 = (void *)swift_allocObject();
  uint64_t v31 = (uint64_t)v17 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v17 + 8);
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v11, v31, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  *(void *)(a5 + v13) = v17;
  uint64_t v18 = v14;
  uint64_t v19 = *(int *)(v14 + 24);
  uint64_t v32 = v19;
  v16(v11, 1, 1, v15);
  uint64_t v20 = (void *)swift_allocObject();
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v11, (uint64_t)v20 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v20 + 8), (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  *(void *)(a5 + v19) = v20;
  uint64_t v21 = a5 + *(int *)(v18 + 28);
  uint64_t v22 = a5;
  *(void *)uint64_t v21 = 0;
  *(unsigned char *)(v21 + 8) = 0;
  uint64_t v23 = v34;
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v34, a5, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
  uint64_t v24 = v35;
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v35, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v25 = v33;
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v11, v33, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v26 = v31;
  swift_beginAccess();
  outlined assign with copy of WidgetAuxiliaryViewMetadata?(v25, v26, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v25, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v27 = v36;
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v36, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v11, v25, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v28 = *(void *)(v22 + v32) + *(void *)(*MEMORY[0x1E4F3F3A0] + **(void **)(v22 + v32) + 8);
  swift_beginAccess();
  outlined assign with copy of WidgetAuxiliaryViewMetadata?(v25, v28, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v25, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v27, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v24, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v23, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v21 = v38;
  *(unsigned char *)(v21 + 8) = v37;
  return result;
}

uint64_t WidgetAuxiliaryViewMetadata.init(progress:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = (char *)a2 + v4[6];
  uint64_t v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(void *)((char *)a2 + v4[7]) = 0;
  uint64_t v7 = (uint64_t)a2 + v4[8];
  uint64_t v8 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = (char *)a2 + v4[9];
  v9[48] = 0;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  uint64_t v10 = (char *)a2 + v4[10];
  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = (_OWORD *)((char *)a2 + v4[11]);
  *uint64_t v12 = xmmword_18834BB90;
  v12[1] = 0u;
  v12[2] = 0u;
  v12[3] = 0u;
  return outlined assign with take of WidgetAuxiliaryViewMetadata.Progress?(a1, v7, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?);
}

uint64_t type metadata accessor for WidgetAuxiliaryViewMetadata(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for WidgetAuxiliaryViewMetadata);
}

uint64_t type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for WidgetAuxiliaryViewMetadata.Graphic);
}

uint64_t type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for WidgetAuxiliaryViewMetadata.Progress);
}

void type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(uint64_t a1)
{
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.kind.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v1, a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
}

uint64_t type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.kind.setter(uint64_t a1)
{
  return outlined assign with take of WidgetAuxiliaryViewMetadata.Progress?(a1, v1, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
}

uint64_t outlined assign with take of WidgetAuxiliaryViewMetadata.Progress?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Text.Metadata.kind.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.range.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0) + 20));
}

uint64_t type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for WidgetAuxiliaryViewMetadata.Text.Metadata);
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.range.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0);
  uint64_t v6 = (void *)(v2 + *(int *)(result + 20));
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Text.Metadata.range.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.color.getter()
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0);

  return swift_retain();
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.color.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0) + 24);
  uint64_t result = swift_release();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Text.Metadata.color.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.features.getter()
{
  return WidgetAuxiliaryViewMetadata.Text.Metadata.features.getter((void (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata);
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.features.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0) + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Text.Metadata.features.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.textScale.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.textScale.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = v2;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Text.Metadata.textScale.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

id WidgetAuxiliaryViewMetadata.Text.text.getter()
{
  return *v0;
}

void WidgetAuxiliaryViewMetadata.Text.text.setter(void *a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Text.text.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Text.metadata.getter()
{
  type metadata accessor for ResolvableTextSegmentAttribute.Value?(0);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&aBlock[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  uint64_t v17 = MEMORY[0x1E4FBC860];
  uint64_t v5 = type metadata accessor for ResolvableTextSegmentAttribute.Value();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
  uint64_t v6 = NSAttributedString.range.getter();
  uint64_t v8 = v7;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = v3;
  v9[3] = v4;
  v9[4] = &v17;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = partial apply for closure #1 in WidgetAuxiliaryViewMetadata.Text.metadata.getter;
  *(void *)(v10 + 24) = v9;
  aBlock[4] = _sSDySo21NSAttributedStringKeyaypGSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIggyy_AceIIeggyy_TRTA_0;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_55;
  uint64_t v11 = _Block_copy(aBlock);
  id v12 = v4;
  swift_retain();
  swift_release();
  objc_msgSend(v12, sel_enumerateAttributesInRange_options_usingBlock_, v6, v8, 0, v11);
  _Block_release(v11);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v12)
  {
    __break(1u);
  }
  else
  {
    uint64_t v14 = v17;
    swift_bridgeObjectRetain();
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
    swift_release();
    swift_bridgeObjectRelease();
    return v14;
  }
  return result;
}

void type metadata accessor for ResolvableTextSegmentAttribute.Value?(uint64_t a1)
{
}

uint64_t closure #1 in WidgetAuxiliaryViewMetadata.Text.metadata.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void **a7)
{
  uint64_t v102 = a7;
  id v92 = a6;
  uint64_t v104 = a2;
  uint64_t v105 = a5;
  uint64_t v98 = a3;
  uint64_t v97 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0);
  uint64_t v101 = *(void *)(v97 - 8);
  MEMORY[0x1F4188790](v97);
  uint64_t v100 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind?(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v94 = (uint64_t *)((char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v95 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
  uint64_t v93 = *(void *)(v95 - 8);
  MEMORY[0x1F4188790](v95);
  v103 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unint64_t v99 = (uint64_t *)((char *)&v91 - v13);
  uint64_t v14 = type metadata accessor for ResolvableTextSegmentAttribute.Value();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (ResolvableTextSegmentAttribute.Value?, ResolvableTextSegmentAttribute.Value?)(0);
  uint64_t v19 = v18;
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ResolvableTextSegmentAttribute.Value?(0);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v91 = (uint64_t)&v91 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v91 - v25;
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v91 - v28;
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)&v91 - v31;
  MEMORY[0x1F4188790](v33);
  uint64_t v106 = (uint64_t)&v91 - v34;
  uint64_t v35 = static NSAttributedStringKey.resolvableTextSegment.getter();
  uint64_t v36 = (void *)v35;
  uint64_t v37 = *(void *)(a1 + 16);
  uint64_t v96 = a1;
  if (v37 && (unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v35), (v39 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v38, (uint64_t)&v108);

    if (*((void *)&v109 + 1))
    {
      uint64_t v40 = v106;
      int v41 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v40, v41 ^ 1u, 1, v14);
      goto LABEL_7;
    }
  }
  else
  {
    long long v108 = 0u;
    long long v109 = 0u;
  }
  outlined destroy of TimeDataFormattingContainer?((uint64_t)&v108, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
  uint64_t v40 = v106;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v106, 1, 1, v14);
LABEL_7:
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v105, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  uint64_t v42 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v40, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v32, v42, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v43((uint64_t)v21, 1, v14) != 1)
  {
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v21, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
    if (v43(v42, 1, v14) != 1)
    {
      outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v42, (uint64_t)v17, MEMORY[0x1E4F411C8]);
      char v45 = static UUID.== infix(_:_:)();
      uint64_t v46 = (uint64_t (*)(void))MEMORY[0x1E4F411C8];
      outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v17, MEMORY[0x1E4F411C8]);
      outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
      outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v29, v46);
      outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
      uint64_t v44 = v106;
      outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v106, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
      if (v45) {
        goto LABEL_14;
      }
LABEL_17:
      outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
      goto LABEL_18;
    }
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v29, MEMORY[0x1E4F411C8]);
LABEL_12:
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for (ResolvableTextSegmentAttribute.Value?, ResolvableTextSegmentAttribute.Value?));
    uint64_t v44 = v106;
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v106, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
    goto LABEL_17;
  }
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  if (v43(v42, 1, v14) != 1) {
    goto LABEL_12;
  }
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  uint64_t v44 = v106;
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v106, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
LABEL_14:
  if (v43((uint64_t)v26, 1, v14) != 1)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
    return outlined destroy of ResolvableTextSegmentAttribute.Value?(v44, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  }
  uint64_t v47 = v91;
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v105, v91, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  unsigned int v48 = v43(v47, 1, v14);
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v47, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  if (v48 != 1) {
    return outlined destroy of ResolvableTextSegmentAttribute.Value?(v44, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  }
LABEL_18:
  outlined assign with copy of WidgetAuxiliaryViewMetadata?(v44, v105, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  uint64_t v49 = v94;
  uint64_t v50 = v96;
  static WidgetAuxiliaryViewMetadata.Text.extractSpecialMetadata(from:)(v96, v94);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v93 + 48))(v49, 1, v95) == 1)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v49, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind?);
    uint64_t v51 = v98;
    id v52 = objc_msgSend(v92, sel_attributedSubstringFromRange_, v104, v98);
    id v53 = objc_msgSend(v52, sel_string);

    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v56 = v55;

    *(void *)&long long v108 = v54;
    *((void *)&v108 + 1) = v56;
    uint64_t v57 = String.init<A>(_:)();
    uint64_t v58 = v99;
    *unint64_t v99 = v57;
    v58[1] = v59;
    swift_storeEnumTagMultiPayload();
    uint64_t v60 = (uint64_t)v100;
  }
  else
  {
    uint64_t v58 = v99;
    outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v49, (uint64_t)v99, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
    uint64_t v60 = (uint64_t)v100;
    uint64_t v51 = v98;
  }
  uint64_t v61 = MEMORY[0x1E4FBC840];
  if (!*(void *)(v50 + 16))
  {
    long long v108 = 0u;
    long long v109 = 0u;
LABEL_30:
    outlined destroy of TimeDataFormattingContainer?((uint64_t)&v108, (unint64_t *)&lazy cache variable for type metadata for Any?, v61 + 8);
LABEL_31:
    uint64_t v67 = 0;
    id v66 = 0;
    if (!*(void *)(v50 + 16)) {
      goto LABEL_29;
    }
    goto LABEL_32;
  }
  id v62 = (id)*MEMORY[0x1E4FB0700];
  unint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v62);
  if (v64)
  {
    outlined init with copy of Any(*(void *)(v50 + 56) + 32 * v63, (uint64_t)&v108);
  }
  else
  {
    long long v108 = 0u;
    long long v109 = 0u;
  }

  if (!*((void *)&v109 + 1)) {
    goto LABEL_30;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_31;
  }
  v65 = *(void **)&v107[0];
  *(void *)&long long v108 = *(void *)&v107[0];
  lazy protocol witness table accessor for type UIColor and conformance UIColor();
  id v66 = v65;
  uint64_t v67 = Color.init<A>(provider:)();
  if (!*(void *)(v50 + 16))
  {
LABEL_29:
    long long v108 = 0u;
    long long v109 = 0u;
LABEL_40:
    outlined destroy of TimeDataFormattingContainer?((uint64_t)&v108, (unint64_t *)&lazy cache variable for type metadata for Any?, v61 + 8);
LABEL_41:
    uint64_t v71 = 0;
    long long v108 = 0u;
    long long v109 = 0u;
LABEL_42:
    outlined destroy of TimeDataFormattingContainer?((uint64_t)&v108, (unint64_t *)&lazy cache variable for type metadata for Any?, v61 + 8);
    unint64_t v74 = 0;
    goto LABEL_43;
  }
LABEL_32:
  id v68 = (id)*MEMORY[0x1E4FB06F8];
  unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v68);
  if (v70)
  {
    outlined init with copy of Any(*(void *)(v50 + 56) + 32 * v69, (uint64_t)&v108);
  }
  else
  {
    long long v108 = 0u;
    long long v109 = 0u;
  }

  if (!*((void *)&v109 + 1)) {
    goto LABEL_40;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_41;
  }
  uint64_t v71 = *(void **)&v107[0];
  if (!*(void *)&v107[0]) {
    goto LABEL_41;
  }
  id v72 = objc_msgSend(*(id *)&v107[0], sel_fontDescriptor);
  id v73 = objc_msgSend(v72, sel_objectForKey_, *MEMORY[0x1E4FB0910]);

  if (v73)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v107, 0, sizeof(v107));
  }
  _sypSgWObTm_1((uint64_t)v107, (uint64_t)&v108, (unint64_t *)&lazy cache variable for type metadata for Any?, v61 + 8);
  if (!*((void *)&v109 + 1)) {
    goto LABEL_42;
  }
  type metadata accessor for [NSDictionary]();
  if (swift_dynamicCast()) {
    unint64_t v74 = *(void *)&v107[0];
  }
  else {
    unint64_t v74 = 0;
  }
LABEL_43:
  uint64_t v75 = static NSAttributedStringKey._textScale.getter();
  uint64_t v76 = (void *)v75;
  if (*(void *)(v50 + 16) && (unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v75), (v78 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v50 + 56) + 32 * v77, (uint64_t)&v108);
  }
  else
  {
    long long v108 = 0u;
    long long v109 = 0u;
  }

  if (!*((void *)&v109 + 1))
  {
    outlined destroy of TimeDataFormattingContainer?((uint64_t)&v108, (unint64_t *)&lazy cache variable for type metadata for Any?, v61 + 8);
    uint64_t v80 = (uint64_t)v103;
    goto LABEL_51;
  }
  char v79 = swift_dynamicCast();
  uint64_t v80 = (uint64_t)v103;
  if ((v79 & 1) == 0)
  {
LABEL_51:
    char v81 = 2;
    goto LABEL_52;
  }
  Text.Scale.init(_:)();
  char v81 = v108;
LABEL_52:
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v58, v80, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
  if (v74)
  {
    if (v74 >> 62)
    {
      type metadata accessor for CFDictionaryRef(0);
      swift_bridgeObjectRetain();
      uint64_t v80 = (uint64_t)v103;
      uint64_t v90 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease_n();
      unint64_t v74 = v90;
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for CFDictionaryRef(0);
      swift_bridgeObjectRelease();
    }
  }
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v80, v60, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
  uint64_t v82 = (int *)v97;
  uint64_t v83 = (uint64_t *)(v60 + *(int *)(v97 + 20));
  *uint64_t v83 = v104;
  v83[1] = v51;
  *(void *)(v60 + v82[6]) = v67;
  *(void *)(v60 + v82[7]) = v74;
  *(unsigned char *)(v60 + v82[8]) = v81;
  v84 = v102;
  uint64_t v85 = *v102;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v84 = v85;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v85 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v85[2] + 1, 1, v85);
    void *v84 = v85;
  }
  unint64_t v88 = v85[2];
  unint64_t v87 = v85[3];
  if (v88 >= v87 >> 1)
  {
    uint64_t v85 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v87 > 1, v88 + 1, 1, v85);
    void *v84 = v85;
  }
  v85[2] = v88 + 1;
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v60, (uint64_t)v85+ ((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80))+ *(void *)(v101 + 72) * v88, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata);
  swift_release();

  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v58, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
  uint64_t v44 = v106;
  return outlined destroy of ResolvableTextSegmentAttribute.Value?(v44, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
}

uint64_t sub_187E8128C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in WidgetAuxiliaryViewMetadata.Text.metadata.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in WidgetAuxiliaryViewMetadata.Text.metadata.getter(a1, a2, a3, a4, *(void *)(v4 + 16), *(void **)(v4 + 24), *(void ***)(v4 + 32));
}

uint64_t sub_187E812D0()
{
  return swift_deallocObject();
}

uint64_t _sSDySo21NSAttributedStringKeyaypGSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIggyy_AceIIeggyy_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void static WidgetAuxiliaryViewMetadata.Text.extractSpecialMetadata(from:)(uint64_t a1@<X0>, void *a2@<X8>)
{
  v103 = a2;
  type metadata accessor for ResolvableTimer?(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v97 = (char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for ResolvableTimer();
  uint64_t v96 = *(void *)(v101 - 8);
  MEMORY[0x1F4188790](v101);
  uint64_t v93 = (uint64_t)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ResolvableCurrentDate?(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v100 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = type metadata accessor for ResolvableCurrentDate();
  uint64_t v98 = *(void *)(v99 - 8);
  MEMORY[0x1F4188790](v99);
  uint64_t v94 = (uint64_t)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ResolvableDateInterval?(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ResolvableDateInterval();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v95 = (uint64_t)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind?(0);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v102 = (uint64_t *)((char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ResolvableAbsoluteDate?(0);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for ResolvableAbsoluteDate();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1E4FBC840];
  if (!*(void *)(a1 + 16))
  {
    long long v111 = 0u;
    long long v112 = 0u;
    goto LABEL_8;
  }
  uint64_t v25 = MEMORY[0x1E4FBC840];
  id v26 = (id)*MEMORY[0x1E4FB06B8];
  unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v26);
  if ((v28 & 1) == 0)
  {
    long long v111 = 0u;
    long long v112 = 0u;

    uint64_t v24 = v25;
    goto LABEL_8;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v27, (uint64_t)&v111);

  uint64_t v24 = v25;
  if (!*((void *)&v112 + 1))
  {
LABEL_8:
    uint64_t v25 = v24;
    outlined destroy of TimeDataFormattingContainer?((uint64_t)&v111, (unint64_t *)&lazy cache variable for type metadata for Any?, v24 + 8);
    goto LABEL_9;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSTextAttachment);
  if (swift_dynamicCast())
  {
    uint64_t v29 = (void *)v108;
    static WidgetAuxiliaryViewMetadata.Text.metadataKind(from:)((void *)v108, v103);

    return;
  }
LABEL_9:
  uint64_t v30 = static ResolvableAbsoluteDate.attribute.getter();
  uint64_t v31 = (void *)v30;
  if (*(void *)(a1 + 16) && (unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v30), (v33 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v32, (uint64_t)&v111);
  }
  else
  {
    long long v111 = 0u;
    long long v112 = 0u;
  }

  if (*((void *)&v112 + 1))
  {
    int v34 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v19, v34 ^ 1u, 1, v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) != 1)
    {
      outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v19, (uint64_t)v23, MEMORY[0x1E4F40998]);
      type metadata accessor for (ClosedRange<Date>, Bool)(0, &lazy cache variable for type metadata for (Date, Text.DateStyle), MEMORY[0x1E4F27928]);
      uint64_t v36 = v102;
      uint64_t v37 = (char *)v102 + *(int *)(v35 + 48);
      ResolvableAbsoluteDate.date.getter();
      unint64_t v38 = &v23[*(int *)(v20 + 20)];
      char v39 = *v38;
      uint64_t v40 = *((void *)v38 + 1);
      LOBYTE(v38) = v38[16];
      char *v37 = v39;
      *((void *)v37 + 1) = v40;
      v37[16] = (char)v38;
      outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v23, MEMORY[0x1E4F40998]);
      uint64_t v41 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
LABEL_32:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v36, 0, 1, v41);
      uint64_t v64 = (uint64_t)v36;
LABEL_33:
      outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v64, (uint64_t)v103, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind?);
      return;
    }
  }
  else
  {
    outlined destroy of TimeDataFormattingContainer?((uint64_t)&v111, (unint64_t *)&lazy cache variable for type metadata for Any?, v25 + 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
  }
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ResolvableAbsoluteDate?);
  uint64_t v42 = static ResolvableDateInterval.attribute.getter();
  uint64_t v43 = (void *)v42;
  if (*(void *)(a1 + 16) && (unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v42), (v45 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v44, (uint64_t)&v111);
  }
  else
  {
    long long v111 = 0u;
    long long v112 = 0u;
  }

  if (*((void *)&v112 + 1))
  {
    int v46 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, v46 ^ 1u, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
    {
      uint64_t v47 = v95;
      outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v11, v95, MEMORY[0x1E4F409A0]);
      uint64_t v36 = v102;
      ResolvableDateInterval.interval.getter();
      outlined destroy of ResolvableTextSegmentAttribute.Value?(v47, MEMORY[0x1E4F409A0]);
      uint64_t v41 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
      goto LABEL_32;
    }
  }
  else
  {
    outlined destroy of TimeDataFormattingContainer?((uint64_t)&v111, (unint64_t *)&lazy cache variable for type metadata for Any?, v25 + 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  }
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ResolvableDateInterval?);
  uint64_t v48 = static ResolvableCurrentDate.attribute.getter();
  uint64_t v49 = (void *)v48;
  if (*(void *)(a1 + 16) && (unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v48), (v51 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v50, (uint64_t)&v111);
  }
  else
  {
    long long v111 = 0u;
    long long v112 = 0u;
  }
  uint64_t v52 = v101;

  if (*((void *)&v112 + 1))
  {
    uint64_t v53 = (uint64_t)v100;
    uint64_t v54 = v99;
    int v55 = swift_dynamicCast();
    uint64_t v56 = v98;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v98 + 56))(v53, v55 ^ 1u, 1, v54);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v53, 1, v54) != 1)
    {
      uint64_t v57 = v94;
      outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v53, v94, MEMORY[0x1E4F40810]);
      uint64_t v58 = *(void *)v57;
      uint64_t v59 = *(void *)(v57 + 8);
      char v60 = *(unsigned char *)(v57 + 16);
      type metadata accessor for (String, Bool, TimeZone?)();
      uint64_t v36 = v102;
      id v62 = (char *)v102 + *(int *)(v61 + 64);
      *uint64_t v102 = v58;
      v36[1] = v59;
      *((unsigned char *)v36 + 16) = v60;
      outlined copy of TabCustomizationID.Base();
      ResolvableCurrentDate.timeZone.getter();
      outlined destroy of ResolvableTextSegmentAttribute.Value?(v57, MEMORY[0x1E4F40810]);
      uint64_t v63 = type metadata accessor for TimeZone();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v62, 0, 1, v63);
      uint64_t v41 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
      goto LABEL_32;
    }
  }
  else
  {
    outlined destroy of TimeDataFormattingContainer?((uint64_t)&v111, (unint64_t *)&lazy cache variable for type metadata for Any?, v25 + 8);
    uint64_t v53 = (uint64_t)v100;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56))(v100, 1, 1, v99);
  }
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v53, (uint64_t (*)(void))type metadata accessor for ResolvableCurrentDate?);
  uint64_t v65 = static ResolvableTimer.attribute.getter();
  id v66 = (void *)v65;
  if (*(void *)(a1 + 16) && (unint64_t v67 = specialized __RawDictionaryStorage.find<A>(_:)(v65), (v68 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v67, (uint64_t)&v111);
  }
  else
  {
    long long v111 = 0u;
    long long v112 = 0u;
  }

  if (*((void *)&v112 + 1))
  {
    uint64_t v69 = (uint64_t)v97;
    int v70 = swift_dynamicCast();
    uint64_t v71 = v96;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v96 + 56))(v69, v70 ^ 1u, 1, v52);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v69, 1, v52) != 1)
    {
      uint64_t v72 = v93;
      outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v69, v93, MEMORY[0x1E4F3FBF0]);
      type metadata accessor for (DateInterval, Double?, Bool)();
      unint64_t v74 = v102;
      uint64_t v75 = (char *)v102 + *(int *)(v73 + 48);
      uint64_t v76 = *(int *)(v73 + 64);
      ResolvableTimer.interval.getter();
      uint64_t v77 = v72 + *(int *)(v52 + 20);
      uint64_t v78 = *(void *)v77;
      LOBYTE(v77) = *(unsigned char *)(v77 + 8);
      *(void *)uint64_t v75 = v78;
      v75[8] = v77;
      LOBYTE(v75) = *(unsigned char *)(v72 + *(int *)(v52 + 24));
      outlined destroy of ResolvableTextSegmentAttribute.Value?(v72, MEMORY[0x1E4F3FBF0]);
      *((unsigned char *)v74 + v76) = (_BYTE)v75;
      uint64_t v79 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v74, 0, 1, v79);
      uint64_t v64 = (uint64_t)v74;
      goto LABEL_33;
    }
  }
  else
  {
    outlined destroy of TimeDataFormattingContainer?((uint64_t)&v111, (unint64_t *)&lazy cache variable for type metadata for Any?, v25 + 8);
    uint64_t v69 = (uint64_t)v97;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v96 + 56))(v97, 1, 1, v52);
  }
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v69, (uint64_t (*)(void))type metadata accessor for ResolvableTimer?);
  uint64_t v80 = static TimeDataFormatting.attribute.getter();
  char v81 = (void *)v80;
  if (*(void *)(a1 + 16) && (unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)(v80), (v83 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v82, (uint64_t)&v105);
  }
  else
  {
    long long v105 = 0u;
    long long v106 = 0u;
  }

  if (!*((void *)&v106 + 1))
  {
    outlined destroy of TimeDataFormattingContainer?((uint64_t)&v105, (unint64_t *)&lazy cache variable for type metadata for Any?, v25 + 8);
    long long v108 = 0u;
    long long v109 = 0u;
    uint64_t v110 = 0;
    goto LABEL_54;
  }
  type metadata accessor for ResolvableStringAttribute();
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v110 = 0;
    long long v108 = 0u;
    long long v109 = 0u;
    goto LABEL_54;
  }
  if (!*((void *)&v109 + 1))
  {
LABEL_54:
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)&v108, (uint64_t (*)(void))type metadata accessor for ResolvableStringAttribute?);
    goto LABEL_55;
  }
  outlined init with take of OptionalBinaryInteger(&v108, (uint64_t)&v111);
  uint64_t v84 = *((void *)&v112 + 1);
  uint64_t v85 = __swift_project_boxed_opaque_existential_1(&v111, *((uint64_t *)&v112 + 1));
  v104[3] = v84;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v104);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v84 - 8) + 16))(boxed_opaque_existential_1, v85, v84);
  TimeDataFormattingContainer.init(resolvable:)();
  if (*((void *)&v106 + 1))
  {
    long long v87 = v106;
    long long v108 = v105;
    long long v109 = v106;
    uint64_t v88 = v107;
    uint64_t v110 = v107;
    unint64_t v89 = v103;
    *(_OWORD *)v103 = v105;
    *((_OWORD *)v89 + 1) = v87;
    v89[4] = v88;
    uint64_t v90 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v89, 0, 1, v90);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v111);
    return;
  }
  outlined destroy of TimeDataFormattingContainer?((uint64_t)&v105, &lazy cache variable for type metadata for TimeDataFormattingContainer?, MEMORY[0x1E4F41028]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v111);
LABEL_55:
  uint64_t v91 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v103, 1, 1, v91);
}

uint64_t static WidgetAuxiliaryViewMetadata.Text.metadataKind(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  uint64_t v36 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = objc_msgSend(a1, sel_contents, v15);
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v35 = v7;
    uint64_t v37 = a2;
    uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;

    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata and conformance WidgetAuxiliaryViewMetadata();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
    swift_release();
    outlined consume of Data._Representation(v20, v22);
    outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v12, (uint64_t)v17, type metadata accessor for WidgetAuxiliaryViewMetadata);
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)&v17[*(int *)(v13 + 24)], (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v17, type metadata accessor for WidgetAuxiliaryViewMetadata);
    int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48))(v6, 1, v35);
    uint64_t v30 = (uint64_t)v37;
    if (v29 == 1)
    {
      outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
      uint64_t v31 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
    }
    else
    {
      outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v6, (uint64_t)v9, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
      outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v9, v30, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
      uint64_t v34 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v30, 0, 1, v34);
    }
  }
  else
  {
    id v23 = objc_msgSend(a1, sel_image);
    if (v23)
    {
      *a2 = v23;
      swift_storeEnumTagMultiPayload();
      uint64_t v24 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
      swift_storeEnumTagMultiPayload();
      uint64_t v25 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
      id v26 = a2;
      uint64_t v27 = 0;
      uint64_t v28 = v24;
    }
    else
    {
      static Log.internalWarning(_:)();
      uint64_t v33 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
      uint64_t v25 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56);
      uint64_t v28 = v33;
      id v26 = a2;
      uint64_t v27 = 1;
    }
    return v25(v26, v27, 1, v28);
  }
}

unint64_t implicit closure #1 in static WidgetAuxiliaryViewMetadata.Text.metadataKind(from:)()
{
  return 0xD000000000000028;
}

unint64_t implicit closure #2 in static WidgetAuxiliaryViewMetadata.Text.metadataKind(from:)()
{
  return 0xD00000000000002FLL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys()
{
  if (*v0) {
    return 0x6D6574737973;
  }
  else {
    return 0x656C646E7562;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Graphic.Named.name.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.location.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v1 + *(int *)(v3 + 20), a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
}

uint64_t type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for WidgetAuxiliaryViewMetadata.Graphic.Named);
}

uint64_t outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.location.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  return outlined assign with take of WidgetAuxiliaryViewMetadata.Progress?(a1, v1 + *(int *)(v3 + 20), type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
}

uint64_t (*WidgetAuxiliaryViewMetadata.Graphic.Named.location.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

unint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.value.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0) + 24));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.value.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  uint64_t v4 = v1 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Graphic.Named.value.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.isSymbol.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0) + 28));
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.isSymbol.setter(char a1)
{
  uint64_t result = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Graphic.Named.isSymbol.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.colors.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0) + 32));
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = v1 + 44;
    do
    {
      Color.init(_:)();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v4 += 16;
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.tintColor.getter()
{
  uint64_t v1 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  uint64_t result = 0;
  if ((*(unsigned char *)(v0 + *(int *)(v1 + 36) + 16) & 1) == 0) {
    return Color.init(_:)();
  }
  return result;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.symbolRenderingMode.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 40));
  return result;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.symbolEffects.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0) + 44));
  int64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v4 = 0;
    uint64_t v3 = v19;
    uint64_t v15 = v1;
    do
    {
      uint64_t v5 = *(void *)(v1 + v4 + 32);
      uint64_t v6 = *(void *)(v1 + v4 + 40);
      uint64_t v7 = *(void *)(v1 + v4 + 48);
      unsigned __int16 v8 = *(_WORD *)(v1 + v4 + 56);
      int v9 = *(_DWORD *)(v1 + v4 + 60);
      int v10 = *(_DWORD *)(v1 + v4 + 64);
      int v17 = *(_DWORD *)(v1 + v4 + 72);
      char v18 = *(unsigned char *)(v1 + v4 + 68);
      char v16 = *(unsigned char *)(v1 + v4 + 76);
      outlined copy of _SymbolEffect.Storage(v5, v6, v7, v8);
      unint64_t v12 = *(void *)(v19 + 16);
      unint64_t v11 = *(void *)(v19 + 24);
      if (v12 >= v11 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
      }
      *(void *)(v19 + 16) = v12 + 1;
      uint64_t v13 = v19 + 48 * v12;
      *(void *)(v13 + 32) = v5;
      *(void *)(v13 + 40) = v6;
      *(void *)(v13 + 48) = v7;
      *(_WORD *)(v13 + 56) = v8;
      *(_DWORD *)(v13 + 60) = v9;
      *(_DWORD *)(v13 + 64) = v10;
      *(unsigned char *)(v13 + 68) = v18;
      *(_DWORD *)(v13 + 72) = v17;
      *(unsigned char *)(v13 + 76) = v16;
      v4 += 48;
      --v2;
      uint64_t v1 = v15;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.contentTransition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0) + 48);
  uint64_t v4 = *(void *)v3;
  uint64_t v5 = *(unsigned __int8 *)(v3 + 12);
  uint64_t v6 = *(unsigned int *)(v3 + 8);
  char v7 = *(unsigned char *)(v3 + 14);
  *(void *)a1 = *(void *)v3;
  *(unsigned char *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 8) = v6;
  char v8 = *(unsigned char *)(v3 + 13);
  *(unsigned char *)(a1 + 13) = v8;
  *(unsigned char *)(a1 + 14) = v7;

  return outlined copy of ContentTransition.Storage(v4, v6 | (v5 << 32), v8);
}

unint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 1701667182;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 2:
      unint64_t result = 0x65756C6176;
      break;
    case 3:
      unint64_t result = 0x6C6F626D79537369;
      break;
    case 4:
      unint64_t result = 0x73726F6C6F635FLL;
      break;
    case 5:
      unint64_t result = 0x6C6F43746E69745FLL;
      break;
    case 6:
      unint64_t result = 0x65646F6D5FLL;
      break;
    case 7:
      unint64_t result = 0x456C6F626D79735FLL;
      break;
    case 8:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys()
{
  return WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.isSymbol.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  MEMORY[0x1F4188790](v5);
  char v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v1, (uint64_t)v7, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v7, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    return 0;
  }
  else
  {
    outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v7, (uint64_t)v4, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
    uint64_t v8 = v4[*(int *)(v2 + 28)];
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v4, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
  }
  return v8;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys()
{
  if (*v0) {
    return 1702125924;
  }
  else {
    return 0x6574756C6F736261;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys()
{
  if (*v0) {
    return 12639;
  }
  else {
    return 12383;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.kind.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v1, a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.kind.setter(uint64_t a1)
{
  return outlined assign with take of WidgetAuxiliaryViewMetadata.Progress?(a1, v1, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
}

uint64_t (*WidgetAuxiliaryViewMetadata.Progress.kind.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.label.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 20));
  uint64_t v4 = (uint64_t)v3 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v3 + 8);
  swift_beginAccess();
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v4, a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path getter for WidgetAuxiliaryViewMetadata.Progress.label : WidgetAuxiliaryViewMetadata.Progress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void **)(a1 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 20));
  uint64_t v4 = (uint64_t)v3 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v3 + 8);
  swift_beginAccess();
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v4, a2, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path setter for WidgetAuxiliaryViewMetadata.Progress.label : WidgetAuxiliaryViewMetadata.Progress(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  int v9 = (char *)&v13 - v8;
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a1, (uint64_t)&v13 - v8, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v10 = *(void **)(a2 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 20));
  uint64_t v11 = (uint64_t)v10 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v10 + 8);
  swift_beginAccess();
  outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v6, v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.label.setter(uint64_t a1)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v6 = *(void **)(v1 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 20));
  uint64_t v7 = (uint64_t)v6 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v6 + 8);
  swift_beginAccess();
  outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v5, v7, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return outlined destroy of ResolvableTextSegmentAttribute.Value?(a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t (*WidgetAuxiliaryViewMetadata.Progress.label.modify(void *a1))()
{
  uint64_t v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[9] = v1;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  size_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  v3[11] = malloc(v5);
  uint64_t v6 = malloc(v5);
  v3[12] = v6;
  uint64_t v7 = *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 20);
  *((_DWORD *)v3 + 26) = v7;
  uint64_t v8 = *(void *)(v1 + v7) + *(void *)(*MEMORY[0x1E4F3F3A0] + **(void **)(v1 + v7) + 8);
  swift_beginAccess();
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v8, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return WidgetAuxiliaryViewMetadata.Progress.label.modify;
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.currentValueLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 24));
  uint64_t v4 = (uint64_t)v3 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v3 + 8);
  swift_beginAccess();
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v4, a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path getter for WidgetAuxiliaryViewMetadata.Progress.currentValueLabel : WidgetAuxiliaryViewMetadata.Progress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void **)(a1 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 24));
  uint64_t v4 = (uint64_t)v3 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v3 + 8);
  swift_beginAccess();
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v4, a2, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path setter for WidgetAuxiliaryViewMetadata.Progress.currentValueLabel : WidgetAuxiliaryViewMetadata.Progress(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v13 - v8;
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a1, (uint64_t)&v13 - v8, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v10 = *(void **)(a2 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 24));
  uint64_t v11 = (uint64_t)v10 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v10 + 8);
  swift_beginAccess();
  outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v6, v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.currentValueLabel.setter(uint64_t a1)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v6 = *(void **)(v1 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 24));
  uint64_t v7 = (uint64_t)v6 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v6 + 8);
  swift_beginAccess();
  outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v5, v7, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return outlined destroy of ResolvableTextSegmentAttribute.Value?(a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t (*WidgetAuxiliaryViewMetadata.Progress.currentValueLabel.modify(void *a1))()
{
  uint64_t v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[9] = v1;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  size_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  v3[11] = malloc(v5);
  uint64_t v6 = malloc(v5);
  v3[12] = v6;
  uint64_t v7 = *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 24);
  *((_DWORD *)v3 + 26) = v7;
  uint64_t v8 = *(void *)(v1 + v7) + *(void *)(*MEMORY[0x1E4F3F3A0] + **(void **)(v1 + v7) + 8);
  swift_beginAccess();
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v8, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return WidgetAuxiliaryViewMetadata.Progress.label.modify;
}

void WidgetAuxiliaryViewMetadata.Progress.label.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(*(void *)(*a1 + 96), *(void *)(*a1 + 88), (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v4 = *(int *)(v3 + 104);
  size_t v5 = *(void **)(v3 + 88);
  uint64_t v6 = *(void **)(v3 + 96);
  uint64_t v8 = *(void *)(v3 + 72);
  uint64_t v7 = *(void **)(v3 + 80);
  if (a2)
  {
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(*(void *)(v3 + 88), *(void *)(v3 + 80), (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    uint64_t v9 = *(void *)(v8 + v4) + *(void *)(*MEMORY[0x1E4F3F3A0] + **(void **)(v8 + v4) + 8);
    swift_beginAccess();
    outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v7, v9, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_endAccess();
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  }
  else
  {
    uint64_t v10 = *(void *)(v8 + v4) + *(void *)(*MEMORY[0x1E4F3F3A0] + **(void **)(v8 + v4) + 8);
    swift_beginAccess();
    outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v5, v10, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_endAccess();
  }
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  free(v6);
  free(v5);
  free(v7);

  free((void *)v3);
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.tint.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 28));
  if (!v1) {
    return 0;
  }
  int64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v12;
    uint64_t v4 = v1 + 36;
    do
    {
      Color.init(_:)();
      ResolvedGradient.Stop.location.getter();
      uint64_t v5 = Gradient.Stop.init(color:location:)();
      uint64_t v7 = v6;
      unint64_t v9 = *(void *)(v12 + 16);
      unint64_t v8 = *(void *)(v12 + 24);
      if (v9 >= v8 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1);
      }
      *(void *)(v12 + 16) = v9 + 1;
      uint64_t v10 = v12 + 16 * v9;
      *(void *)(v10 + 32) = v5;
      *(void *)(v10 + 40) = v7;
      v4 += 48;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return MEMORY[0x18C114160](v3);
}

void Gradient.init(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int64_t v2 = *(void *)(*a1 + 16);
  if (v2)
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v1 + 36;
    do
    {
      Color.init(_:)();
      ResolvedGradient.Stop.location.getter();
      uint64_t v4 = Gradient.Stop.init(color:location:)();
      uint64_t v6 = v5;
      unint64_t v8 = *(void *)(v10 + 16);
      unint64_t v7 = *(void *)(v10 + 24);
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      }
      *(void *)(v10 + 16) = v8 + 1;
      uint64_t v9 = v10 + 16 * v8;
      *(void *)(v9 + 32) = v4;
      *(void *)(v9 + 40) = v6;
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();

  JUMPOUT(0x18C114160);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys()
{
  unint64_t result = 1684957547;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x786F426C6562616CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0x746E69745FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized WidgetAuxiliaryViewMetadata.Progress.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

double WidgetAuxiliaryViewMetadata.Gauge.value.getter()
{
  return *(double *)v0;
}

void WidgetAuxiliaryViewMetadata.Gauge.value.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Gauge.value.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.label.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8) + *(void *)(*MEMORY[0x1E4F3F3A0] + **(void **)(v1 + 8) + 8);
  swift_beginAccess();
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v3, a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path getter for WidgetAuxiliaryViewMetadata.Gauge.label : WidgetAuxiliaryViewMetadata.Gauge@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8) + *(void *)(*MEMORY[0x1E4F3F3A0] + **(void **)(a1 + 8) + 8);
  swift_beginAccess();
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v3, a2, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path setter for WidgetAuxiliaryViewMetadata.Gauge.label : WidgetAuxiliaryViewMetadata.Gauge(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v13 - v8;
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a1, (uint64_t)&v13 - v8, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v10 = *(void **)(a2 + 8);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v11 = (uint64_t)v10 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v10 + 8);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v6, v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.label.setter(uint64_t a1)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)(v1 + 8);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v7 = (uint64_t)v6 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v6 + 8);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v5, v7, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?(a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void (*WidgetAuxiliaryViewMetadata.Gauge.label.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[9] = v1;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  size_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  v3[11] = malloc(v5);
  uint64_t v6 = malloc(v5);
  v3[12] = v6;
  uint64_t v7 = *(void *)(v1 + 8) + *(void *)(*MEMORY[0x1E4F3F3A0] + **(void **)(v1 + 8) + 8);
  swift_beginAccess();
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v7, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return WidgetAuxiliaryViewMetadata.Gauge.label.modify;
}

void WidgetAuxiliaryViewMetadata.Gauge.label.modify(uint64_t a1, char a2)
{
  unint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 88);
  uint64_t v4 = *(void **)(*(void *)a1 + 96);
  uint64_t v6 = *(void *)(*(void *)a1 + 72);
  size_t v5 = *(void **)(*(void *)a1 + 80);
  if (a2)
  {
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(*(void *)(*(void *)a1 + 96), (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    uint64_t v7 = *(void **)(v6 + 8);
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v3, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    uint64_t v8 = (uint64_t)v7 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v7 + 8);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v5, v8, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_endAccess();
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  }
  else
  {
    uint64_t v9 = *(void **)(v6 + 8);
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v4, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    uint64_t v10 = (uint64_t)v9 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v9 + 8);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v3, v10, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_endAccess();
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  free(v4);
  free(v3);
  free(v5);

  free(v2);
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.currentValueLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16) + *(void *)(*MEMORY[0x1E4F3F3A0] + **(void **)(v1 + 16) + 8);
  swift_beginAccess();
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v3, a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path getter for WidgetAuxiliaryViewMetadata.Gauge.currentValueLabel : WidgetAuxiliaryViewMetadata.Gauge@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16) + *(void *)(*MEMORY[0x1E4F3F3A0] + **(void **)(a1 + 16) + 8);
  swift_beginAccess();
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v3, a2, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path setter for WidgetAuxiliaryViewMetadata.Gauge.currentValueLabel : WidgetAuxiliaryViewMetadata.Gauge(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v13 - v8;
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a1, (uint64_t)&v13 - v8, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v10 = *(void **)(a2 + 16);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v11 = (uint64_t)v10 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v10 + 8);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v6, v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.currentValueLabel.setter(uint64_t a1)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)(v1 + 16);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v7 = (uint64_t)v6 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v6 + 8);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v5, v7, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?(a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void (*WidgetAuxiliaryViewMetadata.Gauge.currentValueLabel.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[9] = v1;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  size_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  v3[11] = malloc(v5);
  uint64_t v6 = malloc(v5);
  v3[12] = v6;
  uint64_t v7 = *(void *)(v1 + 16) + *(void *)(*MEMORY[0x1E4F3F3A0] + **(void **)(v1 + 16) + 8);
  swift_beginAccess();
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v7, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return WidgetAuxiliaryViewMetadata.Gauge.currentValueLabel.modify;
}

void WidgetAuxiliaryViewMetadata.Gauge.currentValueLabel.modify(uint64_t a1, char a2)
{
  unint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 88);
  uint64_t v4 = *(void **)(*(void *)a1 + 96);
  uint64_t v6 = *(void *)(*(void *)a1 + 72);
  size_t v5 = *(void **)(*(void *)a1 + 80);
  if (a2)
  {
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(*(void *)(*(void *)a1 + 96), (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    uint64_t v7 = *(void **)(v6 + 16);
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v3, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    uint64_t v8 = (uint64_t)v7 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v7 + 8);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v5, v8, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_endAccess();
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  }
  else
  {
    uint64_t v9 = *(void **)(v6 + 16);
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v4, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    uint64_t v10 = (uint64_t)v9 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v9 + 8);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v3, v10, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_endAccess();
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  free(v4);
  free(v3);
  free(v5);

  free(v2);
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.minimumValueLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24) + *(void *)(*MEMORY[0x1E4F3F3A0] + **(void **)(v1 + 24) + 8);
  swift_beginAccess();
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v3, a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path getter for WidgetAuxiliaryViewMetadata.Gauge.minimumValueLabel : WidgetAuxiliaryViewMetadata.Gauge@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24) + *(void *)(*MEMORY[0x1E4F3F3A0] + **(void **)(a1 + 24) + 8);
  swift_beginAccess();
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v3, a2, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path setter for WidgetAuxiliaryViewMetadata.Gauge.minimumValueLabel : WidgetAuxiliaryViewMetadata.Gauge(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v13 - v8;
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a1, (uint64_t)&v13 - v8, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v10 = *(void **)(a2 + 24);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v11 = (uint64_t)v10 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v10 + 8);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v6, v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.minimumValueLabel.setter(uint64_t a1)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)(v1 + 24);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v7 = (uint64_t)v6 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v6 + 8);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v5, v7, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?(a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void (*WidgetAuxiliaryViewMetadata.Gauge.minimumValueLabel.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[9] = v1;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  size_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  v3[11] = malloc(v5);
  uint64_t v6 = malloc(v5);
  v3[12] = v6;
  uint64_t v7 = *(void *)(v1 + 24) + *(void *)(*MEMORY[0x1E4F3F3A0] + **(void **)(v1 + 24) + 8);
  swift_beginAccess();
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v7, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return WidgetAuxiliaryViewMetadata.Gauge.minimumValueLabel.modify;
}

void WidgetAuxiliaryViewMetadata.Gauge.minimumValueLabel.modify(uint64_t a1, char a2)
{
  unint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 88);
  uint64_t v4 = *(void **)(*(void *)a1 + 96);
  uint64_t v6 = *(void *)(*(void *)a1 + 72);
  size_t v5 = *(void **)(*(void *)a1 + 80);
  if (a2)
  {
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(*(void *)(*(void *)a1 + 96), (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    uint64_t v7 = *(void **)(v6 + 24);
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v3, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    uint64_t v8 = (uint64_t)v7 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v7 + 8);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v5, v8, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_endAccess();
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  }
  else
  {
    uint64_t v11 = *(void **)(*(void *)a1 + 80);
    uint64_t v9 = *(void **)(v6 + 24);
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v4, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    uint64_t v10 = (uint64_t)v9 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v9 + 8);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    size_t v5 = v11;
    swift_retain();
    outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v3, v10, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_endAccess();
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  free(v4);
  free(v3);
  free(v5);

  free(v2);
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.maximumValueLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32) + *(void *)(*MEMORY[0x1E4F3F3A0] + **(void **)(v1 + 32) + 8);
  swift_beginAccess();
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v3, a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path getter for WidgetAuxiliaryViewMetadata.Gauge.maximumValueLabel : WidgetAuxiliaryViewMetadata.Gauge@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32) + *(void *)(*MEMORY[0x1E4F3F3A0] + **(void **)(a1 + 32) + 8);
  swift_beginAccess();
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v3, a2, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path setter for WidgetAuxiliaryViewMetadata.Gauge.maximumValueLabel : WidgetAuxiliaryViewMetadata.Gauge(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v13 - v8;
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a1, (uint64_t)&v13 - v8, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v10 = *(void **)(a2 + 32);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v11 = (uint64_t)v10 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v10 + 8);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v6, v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.maximumValueLabel.setter(uint64_t a1)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)(v1 + 32);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v7 = (uint64_t)v6 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v6 + 8);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v5, v7, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?(a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void (*WidgetAuxiliaryViewMetadata.Gauge.maximumValueLabel.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[9] = v1;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  size_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  v3[11] = malloc(v5);
  uint64_t v6 = malloc(v5);
  v3[12] = v6;
  uint64_t v7 = *(void *)(v1 + 32) + *(void *)(*MEMORY[0x1E4F3F3A0] + **(void **)(v1 + 32) + 8);
  swift_beginAccess();
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v7, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return WidgetAuxiliaryViewMetadata.Gauge.maximumValueLabel.modify;
}

void WidgetAuxiliaryViewMetadata.Gauge.maximumValueLabel.modify(uint64_t a1, char a2)
{
  unint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 88);
  uint64_t v4 = *(void **)(*(void *)a1 + 96);
  uint64_t v5 = *(void *)(*(void *)a1 + 72);
  uint64_t v11 = *(void *)(*(void *)a1 + 80);
  if (a2)
  {
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v4, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    uint64_t v6 = (void *)v11;
    uint64_t v7 = *(void **)(v5 + 32);
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v3, v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    uint64_t v8 = (uint64_t)v7 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v7 + 8);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined assign with copy of WidgetAuxiliaryViewMetadata?(v11, v8, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_endAccess();
    outlined destroy of ResolvableTextSegmentAttribute.Value?(v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  }
  else
  {
    uint64_t v9 = *(void **)(v5 + 32);
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v4, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    uint64_t v10 = (uint64_t)v9 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v9 + 8);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v3, v10, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_endAccess();
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v6 = (void *)v11;
  }
  free(v4);
  free(v3);
  free(v6);

  free(v2);
}

void WidgetAuxiliaryViewMetadata.Gauge.tint.getter()
{
  if (*(void *)(v0 + 40))
  {
    char v1 = *(unsigned char *)(v0 + 48);
    uint64_t v2 = *(void *)(v0 + 40);
    char v3 = v1;
    swift_bridgeObjectRetain();
    Gradient.init(_:)(&v2);
  }
}

unint64_t WidgetAuxiliaryViewMetadata.Gauge.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x65756C6176;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x786F426C6562616CLL;
      break;
    case 2:
    case 3:
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0x746E69745FLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys()
{
  return WidgetAuxiliaryViewMetadata.Gauge.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized WidgetAuxiliaryViewMetadata.Gauge.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.label.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.label.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Accessibility.label.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.value.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Accessibility.value.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.identifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Accessibility.identifier.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.hint.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.hint.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Accessibility.hint.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys()
{
  uint64_t result = 0x6C6562616CLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x65756C6176;
      break;
    case 2:
      uint64_t result = 0x696669746E656469;
      break;
    case 3:
      uint64_t result = 1953393000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

id WidgetAuxiliaryViewMetadata.metadataText.getter@<X0>(void **a1@<X8>)
{
  unint64_t v2 = *v1;
  *a1 = *v1;
  return v2;
}

id WidgetAuxiliaryViewMetadata.metadataSecondaryText.getter@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *(void **)(v1 + 8);
  *a1 = v2;
  return v2;
}

uint64_t WidgetAuxiliaryViewMetadata.graphic.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v1 + *(int *)(v3 + 24), a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
}

uint64_t WidgetAuxiliaryViewMetadata.fallbacks.getter()
{
  return WidgetAuxiliaryViewMetadata.Text.Metadata.features.getter((void (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata);
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.features.getter(void (*a1)(void))
{
  a1(0);

  return swift_bridgeObjectRetain();
}

uint64_t WidgetAuxiliaryViewMetadata.progress.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v1 + *(int *)(v3 + 32), a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?);
}

uint64_t WidgetAuxiliaryViewMetadata.gauge.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata(0) + 36);
  uint64_t v4 = *(void *)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v3 + 32);
  uint64_t v9 = *(void *)(v3 + 40);
  *(void *)a1 = *(void *)v3;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(v3 + 48);

  return outlined copy of WidgetAuxiliaryViewMetadata.Gauge?(v4, v5);
}

uint64_t WidgetAuxiliaryViewMetadata.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v1 + *(int *)(v3 + 40), a1, (uint64_t (*)(void))type metadata accessor for URL?);
}

uint64_t WidgetAuxiliaryViewMetadata.accessibility.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata(0) + 44));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v10 = v3[6];
  uint64_t v11 = v3[7];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;

  return outlined copy of WidgetAuxiliaryViewMetadata.Accessibility?(v4, v5);
}

__n128 WidgetAuxiliaryViewMetadata.init(gauge:)@<Q0>(__n128 *a1@<X0>, void *a2@<X8>)
{
  __n128 v16 = a1[1];
  __n128 v17 = *a1;
  unint64_t v3 = a1[2].n128_u64[0];
  unint64_t v4 = a1[2].n128_u64[1];
  char v5 = a1[3].n128_i8[0];
  uint64_t v6 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  *a2 = 0;
  a2[1] = 0;
  uint64_t v7 = (char *)a2 + v6[6];
  uint64_t v8 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(void *)((char *)a2 + v6[7]) = 0;
  uint64_t v9 = (char *)a2 + v6[8];
  uint64_t v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = (__n128 *)((char *)a2 + v6[9]);
  uint64_t v12 = (char *)a2 + v6[10];
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = (_OWORD *)((char *)a2 + v6[11]);
  *uint64_t v14 = xmmword_18834BB90;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  __n128 result = v16;
  *uint64_t v11 = v17;
  v11[1] = v16;
  v11[2].n128_u64[0] = v3;
  v11[2].n128_u64[1] = v4;
  v11[3].n128_u8[0] = v5;
  return result;
}

double WidgetAuxiliaryViewMetadata.init(fallbacks:)@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  *a2 = 0;
  a2[1] = 0;
  char v5 = (char *)a2 + v4[6];
  uint64_t v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = v4[7];
  uint64_t v8 = (char *)a2 + v4[8];
  uint64_t v9 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = (char *)a2 + v4[9];
  v10[48] = 0;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  uint64_t v11 = (char *)a2 + v4[10];
  uint64_t v12 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = (_OWORD *)((char *)a2 + v4[11]);
  double result = 0.0;
  _OWORD *v13 = xmmword_18834BB90;
  v13[1] = 0u;
  v13[2] = 0u;
  v13[3] = 0u;
  *(void *)((char *)a2 + v7) = a1;
  return result;
}

unint64_t WidgetAuxiliaryViewMetadata.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x617461646174656DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0x63696870617267;
      break;
    case 3:
      unint64_t result = 0x6B6361626C6C6166;
      break;
    case 4:
      unint64_t result = 0x73736572676F7270;
      break;
    case 5:
      unint64_t result = 0x6567756167;
      break;
    case 6:
      unint64_t result = 7107189;
      break;
    case 7:
      unint64_t result = 0x6269737365636361;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.CodingKeys()
{
  return WidgetAuxiliaryViewMetadata.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized WidgetAuxiliaryViewMetadata.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance WidgetAuxiliaryViewMetadata.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t TimeDataFormattingContainer.representation(for:)@<X0>(unsigned char *a1@<X0>, void *a2@<X8>)
{
  LOBYTE(v11[0]) = *a1;
  TimeDataFormattingContainer.representation(for:)();
  __swift_project_boxed_opaque_existential_1(v13, v14);
  swift_getDynamicType();
  unint64_t v3 = (void *)static ResolvableStringAttributeRepresentation.attribute.getter();
  uint64_t v4 = v14;
  char v5 = __swift_project_boxed_opaque_existential_1(v13, v14);
  uint64_t v12 = v4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(boxed_opaque_existential_1, v5, v4);
  outlined init with take of Any(v11, v10);
  uint64_t v7 = MEMORY[0x1E4FBC868];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, v3, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  static WidgetAuxiliaryViewMetadata.Text.extractSpecialMetadata(from:)(v7, a2);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

uint64_t WidgetAuxiliaryViewMetadata.tint.getter()
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  MEMORY[0x1F4188790](v1 - 8);
  unint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v0 + *(int *)(v7 + 24), (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
  uint64_t v8 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v3, 1, v8) == 1)
  {
    uint64_t v9 = (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?;
LABEL_5:
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, v9);
    return 0;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic;
    goto LABEL_5;
  }
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v3, (uint64_t)v6, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
  if (v6[*(int *)(v4 + 36) + 16]) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = Color.init(_:)();
  }
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v6, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
  return v10;
}

uint64_t WidgetAuxiliaryViewMetadata.resolvedTint.getter()
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  MEMORY[0x1F4188790](v1 - 8);
  unint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v0 + *(int *)(v7 + 24), (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
  uint64_t v8 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v3, 1, v8) == 1)
  {
    uint64_t v9 = (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?;
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v3, (uint64_t)v6, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
      uint64_t v10 = *(void *)&v6[*(int *)(v4 + 36)];
      outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v6, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
      return v10;
    }
    uint64_t v9 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic;
  }
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, v9);
  return 0;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.init(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1[1];
  uint64_t v80 = *a1;
  uint64_t v5 = (void *)a1[2];
  int v83 = *((_DWORD *)a1 + 6);
  char v82 = *((unsigned char *)a1 + 28);
  int v86 = *((unsigned __int8 *)a1 + 29);
  unsigned int v78 = *((unsigned __int8 *)a1 + 30);
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = a1[5];
  _sypSgWObTm_1(a2, (uint64_t)v123, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  uint64_t v8 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  uint64_t v90 = v8[7];
  uint64_t v9 = (char *)a3 + v8[6];
  uint64_t v88 = v8[8];
  uint64_t v10 = (int8x16_t *)((char *)a3 + v8[9]);
  v10->i64[0] = 0;
  v10->i64[1] = 0;
  uint64_t v77 = v10;
  v10[1].i8[0] = 1;
  uint64_t v11 = v8[10];
  id v116 = v6;
  uint64_t v117 = v7;
  swift_retain();
  swift_retain();
  uint64_t v12 = EnvironmentValues.symbolEffects.getter();
  uint64_t v13 = specialized SymbolEffectArray.init(effects:)(v12);
  swift_bridgeObjectRelease();
  *(void *)((char *)a3 + v8[11]) = v13;
  id v116 = v6;
  uint64_t v117 = v7;
  EnvironmentValues.contentTransition.getter();
  int v14 = DWORD2(v94);
  __int16 v15 = WORD6(v94);
  char v16 = BYTE14(v94);
  __n128 v17 = (char *)a3 + v8[12];
  *(void *)__n128 v17 = v94;
  *((_DWORD *)v17 + 2) = v14;
  *((_WORD *)v17 + 6) = v15;
  v17[14] = v16;
  id v116 = v6;
  uint64_t v117 = v7;
  if (EnvironmentValues.shouldRedactSymbolImages.getter())
  {
    swift_bridgeObjectRelease();
    outlined consume of Image.Location(v5);
    swift_release();
    swift_release();
    outlined retain of Image.Resolved?((uint64_t)v123, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
    *a3 = 0x662E657261757173;
    a3[1] = 0xEB000000006C6C69;
    *((unsigned char *)a3 + v8[5]) = 0;
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    swift_storeEnumTagMultiPayload();
    *(_DWORD *)uint64_t v9 = 0;
    v9[4] = 1;
    *((unsigned char *)a3 + v11) = 0;
    *((unsigned char *)a3 + v90) = 1;
    id v116 = v6;
    uint64_t v117 = v7;
    if (EnvironmentValues.effectiveForegroundColor.getter())
    {
      id v116 = v6;
      uint64_t v117 = v7;
      dispatch thunk of AnyColorBox.resolve(in:)();
      int v19 = v18;
      int v21 = v20;
      int v23 = v22;
      int v25 = v24;
      type metadata accessor for [Color.Resolved](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Color.Resolved>, MEMORY[0x1E4F414B8], MEMORY[0x1E4FBBE00]);
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_18834BB80;
      *(_DWORD *)(v26 + 32) = v19;
      *(_DWORD *)(v26 + 36) = v21;
      *(_DWORD *)(v26 + 40) = v23;
      *(_DWORD *)(v26 + 44) = v25;
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      *(void *)((char *)a3 + v88) = v26;
    }
    else
    {
      swift_release();
      uint64_t result = swift_release();
      *(void *)((char *)a3 + v88) = MEMORY[0x1E4FBC860];
    }
    return result;
  }
  uint64_t v28 = v9;
  uint64_t v75 = v11;
  uint64_t v76 = v7;
  *a3 = v80;
  a3[1] = v4;
  char v81 = a3;
  if (!v5)
  {
    *((unsigned char *)a3 + v8[5]) = 0;
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    swift_storeEnumTagMultiPayload();
    *((unsigned char *)a3 + v90) = 1;
    swift_bridgeObjectRetain();
    int v29 = v86;
    uint64_t v31 = v6;
    uint64_t v30 = v7;
    goto LABEL_16;
  }
  int v29 = v86;
  uint64_t v30 = v7;
  if (v5 == (void *)1)
  {
    *((unsigned char *)v81 + v8[5]) = 1;
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    swift_storeEnumTagMultiPayload();
    *((unsigned char *)v81 + v90) = 1;
    int v29 = v86;
    swift_bridgeObjectRetain();
    uint64_t v31 = v6;
    goto LABEL_16;
  }
  outlined copy of Image.Location(v5);
  outlined copy of Image.Location(v5);
  swift_bridgeObjectRetain();
  id v32 = objc_msgSend(v5, sel_bundleURL);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
  swift_storeEnumTagMultiPayload();
  _sypSgWObTm_1((uint64_t)v123, (uint64_t)&v116, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  uint64_t v31 = v6;
  if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v116) == 1)
  {
    outlined consume of Image.Location(v5);
    outlined consume of Image.Location(v5);
    uint64_t v33 = v90;
  }
  else
  {
    id v34 = v116;
    int v35 = v117;
    outlined copy of GraphicsImage.Contents?(v116, v117);
    outlined copy of GraphicsImage.Contents?(v34, v35);
    outlined consume of Image.Location(v5);
    outlined consume of Image.Location(v5);
    outlined consume of GraphicsImage.Contents?(v34, v35);
    uint64_t v33 = v90;
    if (v35 != 255)
    {
      if (v35 == 2)
      {
        outlined consume of GraphicsImage.Contents?(v34, 2);
        *((unsigned char *)v81 + v90) = 1;
        goto LABEL_16;
      }
      outlined consume of GraphicsImage.Contents?(v34, v35);
    }
  }
  *((unsigned char *)v81 + v33) = 0;
LABEL_16:
  *(_DWORD *)uint64_t v28 = v83;
  unsigned char v28[4] = v82;
  _sypSgWObTm_1((uint64_t)v123, (uint64_t)&v116, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v116) == 1)
  {
    swift_bridgeObjectRelease();
    outlined consume of Image.Location(v5);
    swift_release();
    swift_release();
    if (v78) {
      uint64_t v36 = (char *)MEMORY[0x1E4FBC860];
    }
    else {
      uint64_t v36 = 0;
    }
    uint64_t v37 = v75;
    goto LABEL_59;
  }
  if (v29 == 8)
  {
    if (v117 == 2)
    {
      char v38 = *((unsigned char *)v116 + 24);
      uint64_t v39 = *((void *)v116 + 4);
      int v40 = *((_DWORD *)v116 + 10);
      char v41 = *((unsigned char *)v116 + 44);
      char v42 = *((unsigned char *)v116 + 45);
      uint64_t v43 = *((void *)v116 + 6);
      *(void *)&long long v94 = *((void *)v116 + 2);
      BYTE8(v94) = v38;
      *(void *)&long long v95 = v39;
      DWORD2(v95) = v40;
      BYTE12(v95) = v41;
      BYTE13(v95) = v42;
      *(void *)&long long v96 = v43;
      ResolvedVectorGlyph.renderingMode.getter();
      LOBYTE(v29) = v93;
    }
    else
    {
      LOBYTE(v29) = 8;
    }
  }
  char v44 = v29;
  if (v118) {
    uint64_t v45 = 1;
  }
  else {
    uint64_t v45 = v78;
  }
  if (v119) {
    uint64_t v46 = v118;
  }
  else {
    uint64_t v46 = v45;
  }
  if (!v46)
  {
    swift_bridgeObjectRelease();
    outlined consume of Image.Location(v5);
    swift_release();
    swift_release();
    outlined retain of Image.Resolved?((uint64_t)v123, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
    uint64_t v36 = 0;
LABEL_39:
    uint64_t v37 = v75;
    LOBYTE(v29) = v44;
LABEL_59:
    *((unsigned char *)v81 + v37) = v29;
    *(void *)((char *)v81 + v88) = v36;
    *(void *)&long long v94 = v31;
    *((void *)&v94 + 1) = v30;
    swift_bridgeObjectRetain();
    uint64_t v66 = EnvironmentValues.tintColor.getter();
    if (v66)
    {
      *(void *)&long long v94 = v31;
      *((void *)&v94 + 1) = v30;
      dispatch thunk of AnyColorBox.resolve(in:)();
      unsigned int v87 = v67;
      unsigned int v92 = v68;
      unsigned int v85 = v69;
      unsigned int v89 = v70;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      v71.i64[0] = v87;
      v71.i64[1] = v85;
      int8x16_t v72 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(v89, v92), 0x20uLL), v71);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_release();
      int8x16_t v72 = 0uLL;
    }
    *uint64_t v77 = v72;
    v77[1].i8[0] = v66 == 0;
    return result;
  }
  *(void *)&long long v94 = v31;
  *((void *)&v94 + 1) = v30;
  if (!EnvironmentValues.foregroundStyle.getter())
  {
    swift_bridgeObjectRelease();
    outlined consume of Image.Location(v5);
    swift_release();
    swift_release();
    outlined retain of Image.Resolved?((uint64_t)v123, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
    uint64_t v36 = (char *)MEMORY[0x1E4FBC860];
    goto LABEL_39;
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  outlined consume of Image.Location(v5);
  swift_release();
  swift_release();
  unint64_t v74 = v31;
  long long v120 = 0u;
  long long v121 = 0u;
  char v122 = 1;
  char v104 = 5;
  _ShapeStyle_Shape.init(operation:result:environment:foregroundStyle:bounds:role:)();
  dispatch thunk of AnyShapeStyleBox.apply(to:)();
  long long v94 = v105;
  *(void *)&long long v95 = v106;
  BYTE8(v95) = v107;
  uint64_t v79 = v108;
  *(void *)&long long v96 = v108;
  BYTE8(v96) = v109;
  long long v97 = v110;
  long long v98 = v111;
  long long v99 = v112;
  *(void *)&long long v100 = v113;
  BYTE8(v100) = v114;
  *(_WORD *)((char *)&v100 + 9) = v115;
  _ShapeStyle_Shape.stylePack.getter();
  v103 = v31;
  char v102 = 0;
  _ShapeStyle_Pack.subscript.getter();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v91 = v106;
  unint64_t v84 = *((void *)&v95 + 1) >> 1;
  uint64_t v47 = (*((void *)&v95 + 1) >> 1) - v106;
  if (!__OFSUB__(*((void *)&v95 + 1) >> 1, v106))
  {
    uint64_t v48 = v96;
    uint64_t v49 = v96 + v47;
    uint64_t v37 = v75;
    if (__OFADD__(v96, v47)) {
      goto LABEL_66;
    }
    uint64_t result = v94;
    if (v49 == v96)
    {
      swift_unknownObjectRelease();
      outlined retain of Image.Resolved?((uint64_t)v123, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
      swift_release();
      outlined consume of _ShapeStyle_Shape.Result(v108, v109);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v36 = (char *)MEMORY[0x1E4FBC860];
      LOBYTE(v29) = v44;
LABEL_58:
      uint64_t v31 = v74;
      goto LABEL_59;
    }
    char v73 = v109;
    if (v106 <= 0 && *((void *)&v95 + 1) >= 2uLL)
    {
      unint64_t v50 = (long long *)*((void *)&v94 + 1);
      uint64_t v36 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v51 = 1;
      while (1)
      {
        long long v52 = *v50;
        long long v53 = v50[1];
        long long v54 = v50[3];
        long long v96 = v50[2];
        long long v97 = v54;
        long long v94 = v52;
        long long v95 = v53;
        long long v55 = v50[4];
        long long v56 = v50[5];
        long long v57 = v50[6];
        uint64_t v101 = *((void *)v50 + 14);
        long long v99 = v56;
        long long v100 = v57;
        long long v98 = v55;
        if (v48 + v51 - 1 >= v49) {
          goto LABEL_64;
        }
        outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v94);
        uint64_t result = _ShapeStyle_Pack.Style.color.getter();
        if (v59) {
          break;
        }
        if (!v36) {
          goto LABEL_67;
        }
        uint64_t v60 = result;
        uint64_t v61 = v58;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v36 + 2) + 1, 1, v36);
        }
        unint64_t v63 = *((void *)v36 + 2);
        unint64_t v62 = *((void *)v36 + 3);
        if (v63 >= v62 >> 1) {
          uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v62 > 1), v63 + 1, 1, v36);
        }
        *((void *)v36 + 2) = v63 + 1;
        uint64_t v64 = &v36[16 * v63];
        *((void *)v64 + 4) = v60;
        *((void *)v64 + 5) = v61;
        uint64_t result = outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v94);
        if (v47 == v51)
        {
          swift_unknownObjectRelease();
          outlined retain of Image.Resolved?((uint64_t)v123, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
          goto LABEL_57;
        }
        if (v51 >= v91)
        {
          unint64_t v50 = (long long *)((char *)v50 + 120);
          if (v51++ < v84) {
            continue;
          }
        }
        goto LABEL_63;
      }
      swift_unknownObjectRelease();
      outlined retain of Image.Resolved?((uint64_t)v123, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
      outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v94);
LABEL_57:
      swift_release();
      outlined consume of _ShapeStyle_Shape.Result(v79, v73);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v37 = v75;
      uint64_t v30 = v76;
      LOBYTE(v29) = v44;
      goto LABEL_58;
    }
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
  }
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
  return result;
}

uint64_t SymbolEffectArray.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; ; i += 48)
    {
      uint64_t v6 = *(void *)(a2 + i + 32);
      uint64_t v7 = *(void *)(a2 + i + 40);
      uint64_t v8 = *(void *)(a2 + i + 48);
      unsigned __int16 v9 = *(_WORD *)(a2 + i + 56);
      outlined copy of _SymbolEffect.Storage(v6, v7, v8, v9);
      ProtobufEncoder.messageField<A>(_:_:)();
      if (v2) {
        break;
      }
      outlined consume of _SymbolEffect.Storage(v6, v7, v8, v9);
      if (!--v3) {
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    return outlined consume of _SymbolEffect.Storage(v6, v7, v8, v9);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SymbolEffectArray()
{
  return CodableByProtobuf.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SymbolEffectArray()
{
  return CodableByProtobuf.encode(to:)();
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance SymbolEffectArray(uint64_t a1)
{
  return SymbolEffectArray.encode(to:)(a1, *v1);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance SymbolEffectArray@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized SymbolEffectArray.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffectArray(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.init(value:label:currentValueLabel:minimumValueLabel:maximumValueLabel:tint:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, double *a6@<X8>, double a7@<D0>)
{
  uint64_t v34 = a4;
  uint64_t v38 = a3;
  uint64_t v39 = a2;
  uint64_t v40 = a1;
  uint64_t v37 = a6;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  int v14 = (char *)&v30 - v13;
  uint64_t v36 = *a5;
  int v35 = *((unsigned __int8 *)a5 + 8);
  uint64_t v15 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  char v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  v16(v14, 1, 1, v15);
  type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>(0);
  uint64_t v33 = (void *)swift_allocObject();
  __n128 v17 = (void *)MEMORY[0x1E4F3F3A0];
  uint64_t v32 = (uint64_t)v33 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v33 + 8);
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v14, v32, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v16(v14, 1, 1, v15);
  int v18 = (void *)swift_allocObject();
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v14, (uint64_t)v18 + *(void *)(*v17 + *v18 + 8), (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v16(v14, 1, 1, v15);
  int v19 = (void *)swift_allocObject();
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v14, (uint64_t)v19 + *(void *)(*v17 + *v19 + 8), (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v16(v14, 1, 1, v15);
  int v20 = (void *)swift_allocObject();
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v14, (uint64_t)v20 + *(void *)(*v17 + *v20 + 8), (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v40, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v21 = v32;
  swift_beginAccess();
  int v22 = v33;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v11, v21, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v39, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v23 = (uint64_t)v18 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v18 + 8);
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v31 = type metadata accessor for WidgetAuxiliaryViewMetadata?;
  outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v11, v23, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v38, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v24 = (uint64_t)v19 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v19 + 8);
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v11, v24, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v25 = v34;
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v34, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v26 = (uint64_t)v20 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v20 + 8);
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of WidgetAuxiliaryViewMetadata?((uint64_t)v11, v26, (uint64_t (*)(void))v31);
  swift_endAccess();
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v25, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v38, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v39, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v40, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v29 = v36;
  uint64_t v28 = v37;
  double *v37 = a7;
  *((void *)v28 + 1) = v22;
  *((void *)v28 + 2) = v18;
  *((void *)v28 + 3) = v19;
  *((void *)v28 + 4) = v20;
  *((void *)v28 + 5) = v29;
  *((unsigned char *)v28 + 48) = v35;
  return result;
}

id WidgetAuxiliaryViewMetadata.text.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

uint64_t WidgetAuxiliaryViewMetadata.image.getter()
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v0 + *(int *)(v4 + 24), (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
  uint64_t v5 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    uint64_t v6 = (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?;
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return *(void *)v3;
    }
    uint64_t v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic;
  }
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, v6);
  return 0;
}

uint64_t WidgetAuxiliaryViewMetadata.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys, (uint64_t)&unk_1ED4511D0, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v18 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(void *)&long long v18 = *v3;
  char v22 = 0;
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text and conformance WidgetAuxiliaryViewMetadata.Text();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    *(void *)&long long v18 = v3[1];
    char v22 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v10 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata(0);
    LOBYTE(v18) = 2;
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v18 = *(void *)((char *)v3 + v10[7]);
    char v22 = 3;
    type metadata accessor for [WidgetAuxiliaryViewMetadata](0);
    lazy protocol witness table accessor for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A](&lazy protocol witness table cache variable for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A], type metadata accessor for [WidgetAuxiliaryViewMetadata], (void (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata and conformance WidgetAuxiliaryViewMetadata);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 4;
    type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress and conformance WidgetAuxiliaryViewMetadata.Progress, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v11 = (char *)v3 + v10[9];
    char v12 = v11[48];
    long long v13 = *((_OWORD *)v11 + 1);
    long long v18 = *(_OWORD *)v11;
    long long v19 = v13;
    long long v20 = *((_OWORD *)v11 + 2);
    LOBYTE(v21) = v12;
    char v22 = 5;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge and conformance WidgetAuxiliaryViewMetadata.Gauge();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 6;
    type metadata accessor for URL();
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    int v14 = (long long *)((char *)v3 + v10[11]);
    long long v15 = v14[1];
    long long v18 = *v14;
    long long v19 = v15;
    long long v16 = v14[3];
    long long v20 = v14[2];
    long long v21 = v16;
    char v22 = 7;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility and conformance WidgetAuxiliaryViewMetadata.Accessibility();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t WidgetAuxiliaryViewMetadata.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v50 = a2;
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v51 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
  MEMORY[0x1F4188790](v5 - 8);
  *(void *)&long long v58 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  MEMORY[0x1F4188790](v7 - 8);
  long long v57 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys, (uint64_t)&unk_1ED4511D0, MEMORY[0x1E4FBBDC0]);
  *(void *)&long long v60 = v9;
  uint64_t v56 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v46 - v10;
  uint64_t v12 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  long long v13 = (int *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v15 = (uint64_t *)((char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  *long long v15 = 0;
  v15[1] = 0;
  uint64_t v16 = (uint64_t)v15 + v13[8];
  uint64_t v17 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  long long v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v54 = v16;
  uint64_t v55 = v17;
  v18(v16, 1, 1);
  uint64_t v53 = v13[9];
  *(void *)((char *)v15 + v53) = 0;
  uint64_t v19 = (uint64_t)v15 + v13[10];
  uint64_t v20 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  long long v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  uint64_t v52 = v19;
  v21(v19, 1, 1, v20);
  char v22 = (char *)v15 + v13[11];
  v22[48] = 0;
  *((_OWORD *)v22 + 1) = 0u;
  *((_OWORD *)v22 + 2) = 0u;
  *(_OWORD *)char v22 = 0u;
  uint64_t v23 = (uint64_t)v15 + v13[12];
  uint64_t v24 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  uint64_t v25 = v13[13];
  unint64_t v62 = v15;
  uint64_t v26 = (void *)((char *)v15 + v25);
  *(_OWORD *)uint64_t v26 = xmmword_18834BB90;
  *((_OWORD *)v26 + 1) = 0u;
  *((_OWORD *)v26 + 2) = 0u;
  *((_OWORD *)v26 + 3) = 0u;
  uint64_t v27 = a1[3];
  uint64_t v61 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v27);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys();
  *(void *)&long long v59 = v11;
  uint64_t v28 = v63;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v28)
  {
    uint64_t v41 = (uint64_t)v61;
    uint64_t v33 = (uint64_t)v62;
  }
  else
  {
    *(void *)&long long v63 = v20;
    uint64_t v29 = (uint64_t)v57;
    uint64_t v49 = (uint64_t *)v22;
    uint64_t v47 = v26;
    uint64_t v48 = v23;
    uint64_t v30 = v58;
    uint64_t v31 = v56;
    char v69 = 0;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text and conformance WidgetAuxiliaryViewMetadata.Text();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v33 = (uint64_t)v62;
    void *v62 = v64;
    char v69 = 1;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(void *)(v33 + 8) = v64;
    LOBYTE(v64) = 2;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of WidgetAuxiliaryViewMetadata.Progress?(v29, v54, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
    type metadata accessor for [WidgetAuxiliaryViewMetadata](0);
    char v69 = 3;
    lazy protocol witness table accessor for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A](&lazy protocol witness table cache variable for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A], type metadata accessor for [WidgetAuxiliaryViewMetadata], (void (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata and conformance WidgetAuxiliaryViewMetadata);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v34 = v64;
    uint64_t v35 = v53;
    swift_bridgeObjectRelease();
    *(void *)(v33 + v35) = v34;
    LOBYTE(v64) = 4;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress and conformance WidgetAuxiliaryViewMetadata.Progress, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of WidgetAuxiliaryViewMetadata.Progress?(v30, v52, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?);
    char v69 = 5;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge and conformance WidgetAuxiliaryViewMetadata.Gauge();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    long long v63 = v64;
    long long v58 = v65;
    long long v36 = v66;
    char v37 = v67;
    uint64_t v38 = v49;
    outlined consume of WidgetAuxiliaryViewMetadata.Gauge?(*v49, v49[1]);
    long long v39 = v58;
    *(_OWORD *)uint64_t v38 = v63;
    *((_OWORD *)v38 + 1) = v39;
    *((_OWORD *)v38 + 2) = v36;
    *((unsigned char *)v38 + 48) = v37;
    LOBYTE(v64) = 6;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
    uint64_t v40 = (uint64_t)v51;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of WidgetAuxiliaryViewMetadata.Progress?(v40, v48, (uint64_t (*)(void))type metadata accessor for URL?);
    char v69 = 7;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility and conformance WidgetAuxiliaryViewMetadata.Accessibility();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v41 = (uint64_t)v61;
    (*(void (**)(void, void))(v31 + 8))(v59, v60);
    long long v63 = v64;
    long long v59 = v66;
    long long v60 = v65;
    uint64_t v42 = v67;
    uint64_t v43 = v68;
    char v44 = v47;
    outlined consume of WidgetAuxiliaryViewMetadata.Accessibility?(*v47, v47[1]);
    long long v45 = v60;
    *(_OWORD *)char v44 = v63;
    *((_OWORD *)v44 + 1) = v45;
    *((_OWORD *)v44 + 2) = v59;
    v44[6] = v42;
    v44[7] = v43;
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v33, v50, type metadata accessor for WidgetAuxiliaryViewMetadata);
  }
  __swift_destroy_boxed_opaque_existential_1(v41);
  return outlined destroy of ResolvableTextSegmentAttribute.Value?(v33, type metadata accessor for WidgetAuxiliaryViewMetadata);
}

uint64_t protocol witness for Decodable.init(from:) in conformance WidgetAuxiliaryViewMetadata@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return WidgetAuxiliaryViewMetadata.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WidgetAuxiliaryViewMetadata(void *a1)
{
  return WidgetAuxiliaryViewMetadata.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys()
{
  return 1954047348;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1954047348 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t WidgetAuxiliaryViewMetadata.Text.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v19 = a2;
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Text.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys, (uint64_t)&unk_1ED4513A8, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v9 = v6;
    uint64_t v10 = v19;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v11 = (uint64_t)v21;
    unint64_t v12 = v22;
    outlined copy of Data._Representation((uint64_t)v21, v22);
    ProtobufDecoder.init(_:)();
    CodableAttributedString.init(from:)();
    uint64_t v18 = v5;
    uint64_t v14 = v9;
    long long v15 = v23;
    uint64_t v20 = v23;
    uint64_t v16 = CodableAttributedString.base.getter();
    outlined consume of Data._Representation(v11, v12);

    uint64_t v17 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v18);
    *uint64_t v10 = v16;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t WidgetAuxiliaryViewMetadata.Text.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Text.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys, (uint64_t)&unk_1ED4513A8, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v17 - v6;
  uint64_t v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  id v9 = v8;
  CodableAttributedString.init(_:)();
  uint64_t v11 = v17[1];
  uint64_t v10 = v18;
  uint64_t v20 = v18;
  uint64_t v12 = static ProtobufEncoder.encoding<A>(_:)();
  if (v11)
  {

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    uint64_t v15 = v12;
    unint64_t v16 = v13;

    uint64_t v18 = (void *)v15;
    unint64_t v19 = v16;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return outlined consume of Data._Representation(v15, v16);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance WidgetAuxiliaryViewMetadata.Text@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return WidgetAuxiliaryViewMetadata.Text.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WidgetAuxiliaryViewMetadata.Text(void *a1)
{
  return WidgetAuxiliaryViewMetadata.Text.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys()
{
  if (*v0) {
    return 0x6567616D69;
  }
  else {
    return 0x64656D616ELL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized WidgetAuxiliaryViewMetadata.Graphic.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named?(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v42 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  MEMORY[0x1F4188790](v5);
  long long v39 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Graphic.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys, (uint64_t)&unk_1ED451528, MEMORY[0x1E4FBBDC0]);
  uint64_t v43 = v7;
  uint64_t v38 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  id v9 = (char *)v35 - v8;
  uint64_t v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v35 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys();
  unint64_t v16 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    goto LABEL_9;
  }
  uint64_t v18 = (uint64_t)v39;
  uint64_t v17 = v40;
  v35[0] = v12;
  v35[1] = v10;
  long long v36 = v15;
  uint64_t v19 = v38;
  char v44 = a1;
  LOBYTE(v45) = 0;
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named and conformance WidgetAuxiliaryViewMetadata.Graphic.Named, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
  uint64_t v21 = v41;
  uint64_t v20 = (uint64_t)v42;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v20, 1, v21);
  uint64_t v23 = v19;
  if (v22 == 1)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?(v20, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named?);
    LOBYTE(v47) = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    uint64_t v24 = v43;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    unint64_t v27 = v46;
    if (v46 >> 60 == 15)
    {
      lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Error and conformance WidgetAuxiliaryViewMetadata.Graphic.Error();
      swift_allocError();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v24);
      a1 = v44;
LABEL_9:
      uint64_t v26 = (uint64_t)a1;
      return __swift_destroy_boxed_opaque_existential_1(v26);
    }
    uint64_t v28 = (uint64_t)v45;
    outlined copy of Data._Representation((uint64_t)v45, v46);
    ProtobufDecoder.init(_:)();
    CodablePlatformImage.init(from:)();
    uint64_t v30 = v23;
    uint64_t v31 = v47;
    CodablePlatformImage.kitImage.getter();
    outlined consume of Data?(v28, v27);

    uint64_t v32 = v45;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v43);
    self;
    uint64_t v33 = swift_dynamicCastObjCClassUnconditional();
    uint64_t v34 = v35[0];
    *(void *)v35[0] = v33;
    swift_storeEnumTagMultiPayload();
    uint64_t v25 = (uint64_t)v36;
    outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v34, (uint64_t)v36, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v43);
    outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v20, v18, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
    uint64_t v25 = (uint64_t)v36;
    outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v18, (uint64_t)v36, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
    swift_storeEnumTagMultiPayload();
  }
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v25, v37, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
  uint64_t v26 = (uint64_t)v44;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

void WidgetAuxiliaryViewMetadata.Graphic.encode(to:)(void *a1)
{
  uint64_t v18 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  MEMORY[0x1F4188790](v18);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (id *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Graphic.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys, (uint64_t)&unk_1ED451528, MEMORY[0x1E4FBBDE0]);
  uint64_t v8 = v7;
  uint64_t v19 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v18 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v21, (uint64_t)v6, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = v8;
    id v12 = *v6;
    uint64_t v13 = v20;
    CodablePlatformImage.init(_:)();
    if (v13)
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v8);
    }
    else
    {
      uint64_t v14 = v22;
      uint64_t v24 = v22;
      uint64_t v15 = static ProtobufEncoder.encoding<A>(_:)();
      unint64_t v17 = v16;

      int v22 = (void *)v15;
      unint64_t v23 = v17;
      LOBYTE(v24) = 1;
      lazy protocol witness table accessor for type Data and conformance Data();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v11);

      outlined consume of Data._Representation(v15, v17);
    }
  }
  else
  {
    outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v6, (uint64_t)v3, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
    LOBYTE(v22) = 0;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named and conformance WidgetAuxiliaryViewMetadata.Graphic.Named, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v8);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance WidgetAuxiliaryViewMetadata.Graphic@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return WidgetAuxiliaryViewMetadata.Graphic.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance WidgetAuxiliaryViewMetadata.Graphic(void *a1)
{
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys, (uint64_t)&unk_1ED451648, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v19 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v19) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
    LOBYTE(v19) = 1;
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v11 = *(unsigned char *)(v3 + v10[6] + 4);
    LOBYTE(v19) = 2;
    char v21 = v11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v19) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&long long v19 = *(void *)(v3 + v10[8]);
    char v21 = 4;
    type metadata accessor for [Color.Resolved](0, &lazy cache variable for type metadata for [Color.Resolved], MEMORY[0x1E4F414B8], MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type [Color.Resolved] and conformance <A> [A](&lazy protocol witness table cache variable for type [Color.Resolved] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    id v12 = (long long *)(v3 + v10[9]);
    char v13 = *((unsigned char *)v12 + 16);
    long long v19 = *v12;
    char v20 = v13;
    char v21 = 5;
    lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = *(unsigned char *)(v3 + v10[10]);
    char v21 = 6;
    lazy protocol witness table accessor for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v19 = *(void *)(v3 + v10[11]);
    char v21 = 7;
    type metadata accessor for ProtobufCodable<SymbolEffectArray>();
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type ProtobufCodable<SymbolEffectArray> and conformance ProtobufCodable<A>, (void (*)(uint64_t))type metadata accessor for ProtobufCodable<SymbolEffectArray>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v14 = (uint64_t *)(v3 + v10[12]);
    uint64_t v15 = *v14;
    __int16 v16 = *((_WORD *)v14 + 6);
    int v17 = *((_DWORD *)v14 + 2);
    LOBYTE(v14) = *((unsigned char *)v14 + 14);
    *(void *)&long long v19 = v15;
    DWORD2(v19) = v17;
    WORD6(v19) = v16;
    BYTE14(v19) = (_BYTE)v14;
    char v21 = 8;
    type metadata accessor for ProtobufCodable<ContentTransition>();
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type ProtobufCodable<ContentTransition> and conformance ProtobufCodable<A>, (void (*)(uint64_t))type metadata accessor for ProtobufCodable<ContentTransition>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v38 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
  MEMORY[0x1F4188790](v38);
  uint64_t v37 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys, (uint64_t)&unk_1ED451648, MEMORY[0x1E4FBBDC0]);
  uint64_t v39 = v4;
  uint64_t v36 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v31 - v5;
  uint64_t v7 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (uint64_t *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v11 = (char *)v9 + v10[6];
  *(_DWORD *)char v11 = 0;
  v11[4] = 1;
  uint64_t v12 = v10[7];
  *((unsigned char *)v9 + v12) = 0;
  uint64_t v41 = v10[8];
  uint64_t v42 = a1;
  *(uint64_t *)((char *)v9 + v41) = 0;
  char v13 = (char *)v9 + v10[9];
  *(void *)char v13 = 0;
  *((void *)v13 + 1) = 0;
  v13[16] = 1;
  char v44 = v10;
  uint64_t v14 = v10[10];
  uint64_t v15 = v9;
  *((unsigned char *)v9 + v14) = 8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys();
  uint64_t v40 = v6;
  __int16 v16 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v43 = v11;
    uint64_t v33 = v13;
    uint64_t v34 = v12;
    uint64_t v17 = (uint64_t)v37;
    uint64_t v32 = v14;
    uint64_t v18 = v36;
    LOBYTE(v45) = 0;
    *uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
    v15[1] = v19;
    LOBYTE(v45) = 1;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v20 = v44;
    outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v17, (uint64_t)v15 + v44[5], type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
    LOBYTE(v45) = 2;
    uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v22 = v43;
    *(_DWORD *)uint64_t v43 = v21;
    void v22[4] = BYTE4(v21) & 1;
    LOBYTE(v45) = 3;
    *((unsigned char *)v15 + v34) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    type metadata accessor for [Color.Resolved](0, &lazy cache variable for type metadata for [Color.Resolved], MEMORY[0x1E4F414B8], MEMORY[0x1E4FBB320]);
    char v47 = 4;
    lazy protocol witness table accessor for type [Color.Resolved] and conformance <A> [A](&lazy protocol witness table cache variable for type [Color.Resolved] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v23 = (uint64_t)v42;
    *(uint64_t *)((char *)v15 + v41) = v45;
    char v47 = 5;
    lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v24 = v46;
    uint64_t v25 = v33;
    *(_OWORD *)uint64_t v33 = v45;
    v25[16] = v24;
    char v47 = 6;
    lazy protocol witness table accessor for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *((unsigned char *)v15 + v32) = v45;
    type metadata accessor for ProtobufCodable<SymbolEffectArray>();
    char v47 = 7;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type ProtobufCodable<SymbolEffectArray> and conformance ProtobufCodable<A>, (void (*)(uint64_t))type metadata accessor for ProtobufCodable<SymbolEffectArray>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(uint64_t *)((char *)v15 + v20[11]) = v45;
    type metadata accessor for ProtobufCodable<ContentTransition>();
    char v47 = 8;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type ProtobufCodable<ContentTransition> and conformance ProtobufCodable<A>, (void (*)(uint64_t))type metadata accessor for ProtobufCodable<ContentTransition>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v40, v39);
    int v26 = DWORD2(v45);
    __int16 v27 = WORD6(v45);
    char v28 = BYTE14(v45);
    uint64_t v29 = (char *)v15 + v20[12];
    *(void *)uint64_t v29 = v45;
    *((_DWORD *)v29 + 2) = v26;
    *((_WORD *)v29 + 6) = v27;
    v29[14] = v28;
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v15, v35, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
    __swift_destroy_boxed_opaque_existential_1(v23);
    return outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v15, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance WidgetAuxiliaryViewMetadata.Graphic.Named@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return WidgetAuxiliaryViewMetadata.Graphic.Named.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WidgetAuxiliaryViewMetadata.Graphic.Named(void *a1)
{
  return WidgetAuxiliaryViewMetadata.Graphic.Named.encode(to:)(a1);
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.Location.encode(to:)(void *a1)
{
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDE0];
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys, (uint64_t)&unk_1ED4517F8, MEMORY[0x1E4FBBDE0]);
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  MEMORY[0x1F4188790](v3);
  __int16 v27 = (char *)&v25 - v4;
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys, (uint64_t)&unk_1ED451768, v2);
  uint64_t v30 = *(void *)(v5 - 8);
  uint64_t v31 = v5;
  MEMORY[0x1F4188790](v5);
  int v26 = (char *)&v25 - v6;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v28 = *(void *)(v7 - 8);
  uint64_t v29 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys, (uint64_t)&unk_1ED4516D8, v2);
  uint64_t v14 = v13;
  uint64_t v34 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  __int16 v16 = (char *)&v25 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v35, (uint64_t)v12, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    char v37 = 1;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys();
    uint64_t v17 = v27;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v18 = v33;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v18);
  }
  else
  {
    uint64_t v19 = v28;
    char v20 = v12;
    uint64_t v21 = v29;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v9, v20, v29);
    char v36 = 0;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys();
    int v22 = v26;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
    uint64_t v23 = v31;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v23);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v16, v14);
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.Location.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDC0];
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, (unint64_t *)&lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys, (uint64_t)&unk_1ED4517F8, MEMORY[0x1E4FBBDC0]);
  uint64_t v42 = v4;
  uint64_t v44 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v49 = (char *)&v37 - v5;
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys, (uint64_t)&unk_1ED451768, v3);
  uint64_t v43 = v6;
  uint64_t v45 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v48 = (char *)&v37 - v7;
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys, (uint64_t)&unk_1ED4516D8, v3);
  uint64_t v46 = *(void *)(v8 - 8);
  uint64_t v47 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  __int16 v16 = (char *)&v37 - v15;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v37 - v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys();
  uint64_t v20 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v20)
  {
    uint64_t v38 = v13;
    uint64_t v39 = v19;
    uint64_t v40 = v16;
    int v22 = v48;
    uint64_t v21 = v49;
    uint64_t v50 = v11;
    uint64_t v23 = v47;
    uint64_t v24 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v24 + 16) == 1)
    {
      if (*(unsigned char *)(v24 + 32))
      {
        char v52 = 1;
        lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys();
        uint64_t v25 = v21;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        uint64_t v26 = v42;
        char v27 = KeyedDecodingContainer.decode(_:forKey:)();
        uint64_t v28 = v25;
        uint64_t v29 = v46;
        (*(void (**)(char *, uint64_t))(v44 + 8))(v28, v26);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v23);
        uint64_t v35 = (uint64_t)v38;
        unsigned char *v38 = v27 & 1;
      }
      else
      {
        char v51 = 0;
        lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        type metadata accessor for URL();
        lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
        uint64_t v33 = v43;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v45 + 8))(v22, v33);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v23);
        uint64_t v35 = (uint64_t)v40;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v36 = (uint64_t)v39;
      outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v35, (uint64_t)v39, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
      outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v36, v41, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
    }
    else
    {
      uint64_t v30 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v32 = v31;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *uint64_t v32 = v50;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v30 - 8) + 104))(v32, *MEMORY[0x1E4FBBA70], v30);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v23);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return WidgetAuxiliaryViewMetadata.Graphic.Named.Location.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location(void *a1)
{
  return WidgetAuxiliaryViewMetadata.Graphic.Named.Location.encode(to:)(a1);
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Progress.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys, (uint64_t)&unk_1ED451888, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind and conformance WidgetAuxiliaryViewMetadata.Progress.Kind, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
    uint64_t v14 = *(void *)(v3 + v10[5]);
    char v16 = 1;
    type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>(0);
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?> and conformance <A> MutableBox<A>, type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v14 = *(void *)(v3 + v10[6]);
    char v16 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v11 = (uint64_t *)(v3 + v10[7]);
    uint64_t v12 = *v11;
    LOBYTE(v11) = *((unsigned char *)v11 + 8);
    uint64_t v14 = v12;
    char v15 = (char)v11;
    char v16 = 3;
    lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a1;
  uint64_t v28 = a2;
  uint64_t v30 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  MEMORY[0x1F4188790](v30);
  uint64_t v31 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Progress.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys, (uint64_t)&unk_1ED451888, MEMORY[0x1E4FBBDC0]);
  uint64_t v32 = v3;
  uint64_t v29 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v38 = (char *)&v27 - v4;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  uint64_t v9 = (int *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (uint64_t)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v9[7];
  uint64_t v13 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  uint64_t v35 = *(char **)(*(void *)(v13 - 8) + 56);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v35)(v7, 1, 1, v13);
  type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>(0);
  uint64_t v14 = (void *)swift_allocObject();
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v7, (uint64_t)v14 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v14 + 8), (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v34 = v12;
  *(void *)(v11 + v12) = v14;
  char v15 = (char *)v9[8];
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v35)(v7, 1, 1, v13);
  char v16 = v36;
  uint64_t v17 = (void *)swift_allocObject();
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v7, (uint64_t)v17 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v17 + 8), (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v35 = v15;
  *(void *)&v15[v11] = v17;
  uint64_t v18 = (char *)(v11 + v9[9]);
  *(void *)uint64_t v18 = 0;
  uint64_t v33 = v18;
  v18[8] = 0;
  __swift_project_boxed_opaque_existential_1(v16, v16[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys();
  uint64_t v19 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v39) = 0;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind and conformance WidgetAuxiliaryViewMetadata.Progress.Kind, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
    uint64_t v20 = (uint64_t)v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v20, v11, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
    char v41 = 1;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?> and conformance <A> MutableBox<A>, type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_release();
    uint64_t v21 = v38;
    *(void *)(v11 + v34) = v39;
    char v41 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_release();
    *(void *)&v35[v11] = v39;
    char v41 = 3;
    lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v22 = v33;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v21, v32);
    uint64_t v23 = v39;
    uint64_t v24 = v11;
    char v25 = v40;
    swift_bridgeObjectRelease();
    *(void *)int v22 = v23;
    v22[8] = v25;
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v24, v28, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    return outlined destroy of ResolvableTextSegmentAttribute.Value?(v24, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance WidgetAuxiliaryViewMetadata.Progress@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return WidgetAuxiliaryViewMetadata.Progress.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WidgetAuxiliaryViewMetadata.Progress(void *a1)
{
  return WidgetAuxiliaryViewMetadata.Progress.encode(to:)(a1);
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.Kind.encode(to:)(void *a1)
{
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDE0];
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys, (uint64_t)&unk_1ED4519A8, MEMORY[0x1E4FBBDE0]);
  uint64_t v31 = v3;
  uint64_t v27 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v35 = (char *)&v26 - v4;
  type metadata accessor for ClosedRange<Date>();
  uint64_t v30 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v29 = (uint64_t)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys, (uint64_t)&unk_1ED451A38, v2);
  uint64_t v28 = v7;
  uint64_t v26 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v26 - v8;
  uint64_t v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys, (uint64_t)&unk_1ED451918, v2);
  uint64_t v14 = v13;
  uint64_t v33 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  char v16 = (char *)&v26 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v34, (uint64_t)v12, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = v27;
    type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    uint64_t v18 = (uint64_t)v12;
    uint64_t v19 = v29;
    outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v18, v29, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    char v41 = 1;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    char v40 = 0;
    lazy protocol witness table accessor for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A](&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>, (void (*)(void))lazy protocol witness table accessor for type Date and conformance Date);
    uint64_t v20 = v31;
    uint64_t v21 = v32;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (!v21)
    {
      char v39 = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v35, v20);
    outlined destroy of ResolvableTextSegmentAttribute.Value?(v19, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  }
  else
  {
    uint64_t v22 = v26;
    char v38 = 0;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    char v37 = 0;
    uint64_t v23 = v28;
    uint64_t v24 = v32;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    if (!v24)
    {
      char v36 = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v23);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v16, v14);
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.Kind.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDC0];
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys, (uint64_t)&unk_1ED4519A8, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v53 = v4;
  uint64_t v54 = v5;
  MEMORY[0x1F4188790](v4);
  long long v58 = (char *)&v46 - v6;
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys, (uint64_t)&unk_1ED451A38, v3);
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v52 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v55 = (char *)&v46 - v8;
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys, (uint64_t)&unk_1ED451918, v3);
  uint64_t v56 = *(void *)(v9 - 8);
  uint64_t v57 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v46 - v10;
  uint64_t v12 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v46 - v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v46 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys();
  uint64_t v21 = (uint64_t)v59;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v48 = v17;
  uint64_t v49 = v14;
  uint64_t v22 = v57;
  uint64_t v23 = v58;
  uint64_t v24 = v12;
  long long v59 = a1;
  uint64_t v25 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v26 = (char *)v25;
  if (*(void *)(v25 + 16) != 1)
  {
    uint64_t v28 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v29 = v11;
    uint64_t v31 = v30;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v31 = v24;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v28 - 8) + 104))(v31, *MEMORY[0x1E4FBBA70], v28);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v29, v22);
    a1 = v59;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (*(unsigned char *)(v25 + 32))
  {
    char v65 = 1;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v52 = v24;
    uint64_t v55 = v26;
    type metadata accessor for ClosedRange<Date>();
    char v64 = 0;
    lazy protocol witness table accessor for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A](&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>, (void (*)(void))lazy protocol witness table accessor for type Date and conformance Date);
    uint64_t v27 = v53;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v63 = 1;
    int v36 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v37 = v56;
    uint64_t v38 = v54;
    uint64_t v47 = 0;
    LODWORD(v51) = v36;
    type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    uint64_t v42 = *(int *)(v41 + 48);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v23, v27);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v22);
    uint64_t v43 = (uint64_t)v49;
    v49[v42] = v51 & 1;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    char v62 = 0;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys();
    uint64_t v32 = v55;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    char v61 = 0;
    uint64_t v33 = v52;
    uint64_t v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LODWORD(v54) = v39;
    long long v58 = (char *)v34;
    char v60 = 1;
    char v40 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v47 = 0;
    char v44 = v40;
    (*(void (**)(char *, uint64_t))(v51 + 8))(v32, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v11, v22);
    uint64_t v45 = v48;
    *uint64_t v48 = v58;
    *((unsigned char *)v45 + 8) = v54 & 1;
    *((unsigned char *)v45 + 9) = v44 & 1;
    swift_storeEnumTagMultiPayload();
    uint64_t v43 = (uint64_t)v45;
  }
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v43, (uint64_t)v20, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v20, v50, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
}

uint64_t protocol witness for Decodable.init(from:) in conformance WidgetAuxiliaryViewMetadata.Progress.Kind@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return WidgetAuxiliaryViewMetadata.Progress.Kind.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WidgetAuxiliaryViewMetadata.Progress.Kind(void *a1)
{
  return WidgetAuxiliaryViewMetadata.Progress.Kind.encode(to:)(a1);
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Gauge.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys, (uint64_t)&unk_1ED451460, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v15 - v6;
  uint64_t v8 = *(void *)(v1 + 8);
  uint64_t v18 = *(void *)(v1 + 16);
  uint64_t v19 = v8;
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v15 = *(void *)(v1 + 32);
  uint64_t v16 = v9;
  uint64_t v17 = *(void *)(v1 + 40);
  int v10 = *(unsigned __int8 *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v21) = 0;
  uint64_t v11 = v20;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v11)
  {
    LODWORD(v20) = v10;
    uint64_t v12 = v17;
    uint64_t v13 = v18;
    uint64_t v21 = v19;
    char v23 = 1;
    type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>(0);
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?> and conformance <A> MutableBox<A>, type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v21 = v13;
    char v23 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v21 = v16;
    char v23 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v21 = v15;
    char v23 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v21 = v12;
    char v22 = v20;
    char v23 = 5;
    lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  char v44 = a1;
  int v39 = a2;
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Gauge.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys, (uint64_t)&unk_1ED451460, MEMORY[0x1E4FBBDC0]);
  uint64_t v40 = *(void *)(v2 - 8);
  uint64_t v41 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v46 = (char *)&v39 - v3;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v39 - v8;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v39 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v39 - v14;
  uint64_t v16 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  v17(v15, 1, 1, v16);
  type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>(0);
  uint64_t v18 = (void *)swift_allocObject();
  uint64_t v19 = *(void *)(*MEMORY[0x1E4F3F3A0] + *v18 + 8);
  uint64_t v43 = v18;
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v15, (uint64_t)v18 + v19, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v17(v12, 1, 1, v16);
  uint64_t v20 = (void *)swift_allocObject();
  uint64_t v21 = (void *)MEMORY[0x1E4F3F3A0];
  uint64_t v22 = *(void *)(*MEMORY[0x1E4F3F3A0] + *v20 + 8);
  uint64_t v42 = v20;
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v12, (uint64_t)v20 + v22, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v17(v9, 1, 1, v16);
  char v23 = (void *)swift_allocObject();
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v9, (uint64_t)v23 + *(void *)(*v21 + *v23 + 8), (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v17(v6, 1, 1, v16);
  uint64_t v24 = v44;
  uint64_t v25 = (void *)swift_allocObject();
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v6, (uint64_t)v25 + *(void *)(*v21 + *v25 + 8), (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  __swift_project_boxed_opaque_existential_1(v24, v24[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys();
  uint64_t v26 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v26)
  {
    uint64_t v27 = v40;
    LOBYTE(v47) = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v29 = v28;
    char v49 = 1;
    uint64_t v45 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?> and conformance <A> MutableBox<A>, type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v31 = v47;
    swift_retain();
    swift_release();
    char v49 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v43 = v31;
    uint64_t v32 = v47;
    swift_retain();
    swift_release();
    char v49 = 3;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v33 = v47;
    swift_retain();
    swift_release();
    char v49 = 4;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v34 = v47;
    swift_retain();
    swift_release();
    char v49 = 5;
    lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v35 = v43;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v46, v41);
    int v36 = v47;
    uint64_t v37 = v35;
    LOBYTE(v35) = v48;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v38 = v39;
    *int v39 = v29;
    v38[1] = v37;
    v38[2] = v32;
    v38[3] = v33;
    v38[4] = v34;
    v38[5] = v36;
    *((unsigned char *)v38 + 48) = (_BYTE)v35;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for Decodable.init(from:) in conformance WidgetAuxiliaryViewMetadata.Gauge@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return WidgetAuxiliaryViewMetadata.Gauge.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WidgetAuxiliaryViewMetadata.Gauge(void *a1)
{
  return WidgetAuxiliaryViewMetadata.Gauge.encode(to:)(a1);
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys, (uint64_t)&unk_1ED451260, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v13 - v6;
  uint64_t v8 = v1[2];
  v13[5] = v1[3];
  v13[6] = v8;
  uint64_t v9 = v1[4];
  void v13[3] = v1[5];
  v13[4] = v9;
  uint64_t v10 = v1[6];
  v13[1] = v1[7];
  v13[2] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v17 = 0;
  uint64_t v11 = v13[7];
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v11)
  {
    char v16 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v15 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v14 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v28 = a2;
  type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys, (uint64_t)&unk_1ED451260, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v25 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v27 = v6;
    char v32 = 0;
    uint64_t v9 = v5;
    uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v13 = v12;
    char v31 = 1;
    swift_bridgeObjectRetain();
    uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v16 = v15;
    uint64_t v26 = v14;
    char v30 = 2;
    swift_bridgeObjectRetain();
    uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v19 = v18;
    uint64_t v25 = v17;
    char v29 = 3;
    swift_bridgeObjectRetain();
    uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v22 = v21;
    char v23 = *(void (**)(char *, uint64_t))(v27 + 8);
    uint64_t v27 = v20;
    v23(v8, v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v24 = v28;
    *uint64_t v28 = v11;
    v24[1] = v13;
    v24[2] = v26;
    v24[3] = v16;
    unsigned char v24[4] = v25;
    v24[5] = v19;
    v24[6] = v27;
    v24[7] = v22;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance WidgetAuxiliaryViewMetadata.Accessibility@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return WidgetAuxiliaryViewMetadata.Accessibility.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WidgetAuxiliaryViewMetadata.Accessibility(void *a1)
{
  return WidgetAuxiliaryViewMetadata.Accessibility.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MutableBox<A><A>.CodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys and conformance MutableBox<A><A>.CodingKeys, (void (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys);

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MutableBox<A><A>.CodingKeys(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys and conformance MutableBox<A><A>.CodingKeys, (void (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys);

  return MEMORY[0x1F41862B0](a1, v2);
}

void *MutableBox<A>.init(from:)(void *a1)
{
  return specialized MutableBox<A>.init(from:)(a1);
}

uint64_t MutableBox<A>.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  uint64_t v14 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys>, MEMORY[0x1E4FBBDE0]);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v14 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys();
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys and conformance MutableBox<A><A>.CodingKeys, (void (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v12 = (uint64_t)v2 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v2 + 8);
  swift_beginAccess();
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v12, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  lazy protocol witness table accessor for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A](&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata? and conformance <A> A?, type metadata accessor for WidgetAuxiliaryViewMetadata?, (void (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata and conformance WidgetAuxiliaryViewMetadata);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void *protocol witness for Decodable.init(from:) in conformance <A> MutableBox<A>@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = specialized MutableBox<A>.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <A> MutableBox<A>(void *a1)
{
  return MutableBox<A>.encode(to:)(a1);
}

unint64_t WidgetAuxiliaryViewMetadata.debugDescription.getter()
{
  uint64_t v1 = v0;
  if (*v0)
  {
    id v2 = *v0;
    id v3 = objc_msgSend(v2, sel_string);
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    v7._countAndFlagsBits = v4;
    v7._object = v6;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 10530;
    v8._object = (void *)0xE200000000000000;
    String.append(_:)(v8);
    v9._countAndFlagsBits = 0x222874786554;
    v9._object = (void *)0xE600000000000000;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v10._countAndFlagsBits = 2314;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    swift_endAccess();

    swift_bridgeObjectRelease();
  }
  uint64_t v11 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  specialized append #1 <A>(_:) in WidgetAuxiliaryViewMetadata.debugDescription.getter((uint64_t)v1 + v11[6]);
  specialized append #1 <A>(_:) in WidgetAuxiliaryViewMetadata.debugDescription.getter((uint64_t)v1 + v11[10]);
  uint64_t v12 = (uint64_t *)((char *)v1 + v11[11]);
  uint64_t v13 = v12[1];
  if (v13 != 1)
  {
    uint64_t v26 = *v12;
    outlined copy of WidgetAuxiliaryViewMetadata.Accessibility?(*v12, v13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = WidgetAuxiliaryViewMetadata.Accessibility.debugDescription.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v15._countAndFlagsBits = 2314;
    v15._object = (void *)0xE200000000000000;
    String.append(_:)(v15);
    swift_endAccess();
    swift_bridgeObjectRelease();
    outlined consume of WidgetAuxiliaryViewMetadata.Accessibility?(v26, v13);
    outlined consume of WidgetAuxiliaryViewMetadata.Accessibility?(v26, v13);
  }
  uint64_t v16 = (uint64_t *)((char *)v1 + v11[9]);
  uint64_t v17 = v16[1];
  if (v17)
  {
    uint64_t v18 = *v16;
    outlined copy of WidgetAuxiliaryViewMetadata.Gauge?(*v16, v17);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v19._countAndFlagsBits = 0x6176286567756147;
    v19._object = (void *)0xEC0000003A65756CLL;
    String.append(_:)(v19);
    Double.write<A>(to:)();
    v20._countAndFlagsBits = 41;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v22._countAndFlagsBits = 2314;
    v22._object = (void *)0xE200000000000000;
    String.append(_:)(v22);
    swift_endAccess();
    swift_bridgeObjectRelease();
    outlined consume of WidgetAuxiliaryViewMetadata.Gauge?(v18, v17);
    outlined consume of WidgetAuxiliaryViewMetadata.Gauge?(v18, v17);
  }
  specialized append #1 <A>(_:) in WidgetAuxiliaryViewMetadata.debugDescription.getter((uint64_t)v1 + v11[8]);
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 10506;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  return 0xD00000000000001CLL;
}

uint64_t specialized append #1 <A>(_:) in WidgetAuxiliaryViewMetadata.debugDescription.getter(uint64_t a1)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  Swift::String v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    Swift::String v9 = (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?;
    uint64_t v10 = (uint64_t)v4;
  }
  else
  {
    outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v4, (uint64_t)v8, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    uint64_t v17 = 2314;
    unint64_t v18 = 0xE200000000000000;
    v11._countAndFlagsBits = WidgetAuxiliaryViewMetadata.Graphic.debugDescription.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    uint64_t v12 = v17;
    uint64_t v13 = (void *)v18;
    swift_beginAccess();
    v14._countAndFlagsBits = v12;
    v14._object = v13;
    String.append(_:)(v14);
    swift_endAccess();
    swift_bridgeObjectRelease();
    Swift::String v9 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic;
    uint64_t v10 = (uint64_t)v8;
  }
  return outlined destroy of ResolvableTextSegmentAttribute.Value?(v10, v9);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::String v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  Swift::String v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1) {
    return outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for URL?);
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  Swift::String v15 = 2314;
  uint64_t v16 = 0xE200000000000000;
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
  v10._countAndFlagsBits = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  Swift::String v11 = v15;
  uint64_t v12 = (void *)v16;
  swift_beginAccess();
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_endAccess();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  Swift::String v20;

  type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  Swift::String v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    Swift::String v9 = (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?;
    uint64_t v10 = (uint64_t)v4;
  }
  else
  {
    outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v4, (uint64_t)v8, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress);
    unint64_t v18 = 2314;
    Swift::String v19 = 0xE200000000000000;
    v20._countAndFlagsBits = 0x73736572676F7250;
    v20._object = (void *)0xE900000000000028;
    v11._countAndFlagsBits = WidgetAuxiliaryViewMetadata.Progress.Kind.debugDescription.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 41;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    uint64_t v13 = v18;
    Swift::String v14 = (void *)v19;
    swift_beginAccess();
    v15._countAndFlagsBits = v13;
    v15._object = v14;
    String.append(_:)(v15);
    swift_endAccess();
    swift_bridgeObjectRelease();
    Swift::String v9 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress;
    uint64_t v10 = (uint64_t)v8;
  }
  return outlined destroy of ResolvableTextSegmentAttribute.Value?(v10, v9);
}

uint64_t WidgetAuxiliaryViewMetadata.Text.debugDescription.getter()
{
  id v1 = objc_msgSend(*v0, sel_string);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 10530;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  return 0x222874786554;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Text()
{
  id v1 = objc_msgSend(*v0, sel_string);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 10530;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  return 0x222874786554;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.debugDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (id *)((char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v1, (uint64_t)v7, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    id v8 = *v7;
    id v9 = objc_msgSend(*v7, sel_debugDescription);
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;
  }
  else
  {
    outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v7, (uint64_t)v4, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
    uint64_t v10 = WidgetAuxiliaryViewMetadata.Graphic.Named.debugDescription.getter();
    uint64_t v12 = v13;
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v4, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
  }
  v17[0] = 0x2863696870617247;
  v17[1] = 0xE800000000000000;
  v14._countAndFlagsBits = v10;
  v14._object = v12;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 41;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return v17[0];
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.debugDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
  MEMORY[0x1F4188790](v6);
  id v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v1 + *(int *)(v9 + 20), (uint64_t)v8, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (*v8) {
      uint64_t v10 = 0x6D6574737973;
    }
    else {
      uint64_t v10 = 0x6C616E7265746E69;
    }
    if (*v8) {
      Swift::String v11 = (void *)0xE600000000000000;
    }
    else {
      Swift::String v11 = (void *)0xE800000000000000;
    }
  }
  else
  {
    (*(void (**)(char *, unsigned char *, uint64_t))(v3 + 32))(v5, v8, v2);
    uint64_t v32 = 0x28656C646E7562;
    unint64_t v33 = 0xE700000000000000;
    v12._countAndFlagsBits = URL.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 41;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    uint64_t v10 = v32;
    Swift::String v11 = (void *)v33;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  uint64_t v32 = 0;
  unint64_t v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v14._countAndFlagsBits = 0x616E2864656D614ELL;
  v14._object = (void *)0xEC000000203A656DLL;
  String.append(_:)(v14);
  uint64_t v15 = *v1;
  uint64_t v16 = (void *)v1[1];
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._object = (void *)0xEC000000203A6E6FLL;
  v18._countAndFlagsBits = 0x697461636F6C202CLL;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v10;
  v19._object = v11;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x3A65756C6176202CLL;
  v20._object = (void *)0xE900000000000020;
  String.append(_:)(v20);
  if (*((unsigned char *)v1 + *(int *)(v9 + 24) + 4))
  {
    unint64_t v21 = 0xE200000000000000;
    uint64_t v22 = 11565;
  }
  else
  {
    uint64_t v22 = Float.description.getter();
    unint64_t v21 = v23;
  }
  unint64_t v24 = v21;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 0x73726F6C6F63202CLL;
  v25._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v25);
  if (WidgetAuxiliaryViewMetadata.Graphic.Named.colors.getter())
  {
    uint64_t v26 = MEMORY[0x18C115BD0]();
    uint64_t v28 = v27;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v28 = (void *)0xE200000000000000;
    uint64_t v26 = 23899;
  }
  v29._countAndFlagsBits = v26;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 41;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  return v32;
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.debugDescription.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = (void *)v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v6 = v0[4];
  uint64_t v5 = (void *)v0[5];
  _StringGuts.grow(_:)(52);
  v7._object = (void *)0x800000018833B5C0;
  v7._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v7);
  if (v1)
  {
    id v8 = v1;
  }
  else
  {
    uint64_t v2 = 7104878;
    id v8 = (void *)0xE300000000000000;
  }
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v2;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x3A65756C6176202CLL;
  v10._object = (void *)0xE900000000000020;
  String.append(_:)(v10);
  if (v3) {
    uint64_t v11 = v4;
  }
  else {
    uint64_t v11 = 7104878;
  }
  if (v3) {
    Swift::String v12 = v3;
  }
  else {
    Swift::String v12 = (void *)0xE300000000000000;
  }
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x69746E656469202CLL;
  v14._object = (void *)0xEE00203A72656966;
  String.append(_:)(v14);
  if (v5) {
    uint64_t v15 = v6;
  }
  else {
    uint64_t v15 = 7104878;
  }
  if (v5) {
    uint64_t v16 = v5;
  }
  else {
    uint64_t v16 = (void *)0xE300000000000000;
  }
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 10528;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  return 0;
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.debugDescription.getter()
{
  v0._countAndFlagsBits = 0x6176286567756147;
  v0._object = (void *)0xEC0000003A65756CLL;
  String.append(_:)(v0);
  Double.write<A>(to:)();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Gauge()
{
  v0._countAndFlagsBits = 0x6176286567756147;
  v0._object = (void *)0xEC0000003A65756CLL;
  String.append(_:)(v0);
  Double.write<A>(to:)();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.debugDescription.getter()
{
  v0._countAndFlagsBits = WidgetAuxiliaryViewMetadata.Progress.Kind.debugDescription.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x73736572676F7250;
}

unint64_t WidgetAuxiliaryViewMetadata.Progress.Kind.debugDescription.getter()
{
  uint64_t v1 = v0;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  MEMORY[0x1F4188790](v5);
  Swift::String v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v1, (uint64_t)v7, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    int v9 = v7[*(int *)(v8 + 48)];
    outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    unint64_t v29 = 0;
    unint64_t v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    unint64_t v29 = 0x2865746164;
    unint64_t v30 = 0xE500000000000000;
    v10._countAndFlagsBits = ClosedRange.debugDescription.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 0x64746E756F63202CLL;
    v11._object = (void *)0xED0000203A6E776FLL;
    String.append(_:)(v11);
    if (v9) {
      uint64_t v12 = 1702195828;
    }
    else {
      uint64_t v12 = 0x65736C6166;
    }
    if (v9) {
      unint64_t v13 = 0xE400000000000000;
    }
    else {
      unint64_t v13 = 0xE500000000000000;
    }
    unint64_t v14 = v13;
    String.append(_:)(*(Swift::String *)&v12);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 41;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    unint64_t v16 = v29;
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  }
  else
  {
    char v17 = v7[8];
    int v18 = v7[9];
    unint64_t v29 = 0;
    unint64_t v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    unint64_t v29 = 0xD000000000000014;
    unint64_t v30 = 0x800000018833B5E0;
    if (v17)
    {
      unint64_t v19 = 0xE300000000000000;
      uint64_t v20 = 7104878;
    }
    else
    {
      uint64_t v20 = Double.description.getter();
      unint64_t v19 = v21;
    }
    unint64_t v22 = v19;
    String.append(_:)(*(Swift::String *)&v20);
    swift_bridgeObjectRelease();
    v23._object = (void *)0x800000018833B600;
    v23._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v23);
    if (v18) {
      uint64_t v24 = 1702195828;
    }
    else {
      uint64_t v24 = 0x65736C6166;
    }
    if (v18) {
      unint64_t v25 = 0xE400000000000000;
    }
    else {
      unint64_t v25 = 0xE500000000000000;
    }
    unint64_t v26 = v25;
    String.append(_:)(*(Swift::String *)&v24);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 8745;
    v27._object = (void *)0xE200000000000000;
    String.append(_:)(v27);
    return v29;
  }
  return v16;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Progress()
{
  v0._countAndFlagsBits = WidgetAuxiliaryViewMetadata.Progress.Kind.debugDescription.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x73736572676F7250;
}

uint64_t static WidgetAuxiliaryViewMetadata.Key.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static WidgetAuxiliaryViewMetadata.Key.defaultValue);
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v3, a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t static WidgetAuxiliaryViewMetadata.Key.reduce(value:nextValue:)(uint64_t a1, void (*a2)(double))
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  Swift::String v10 = (char *)&v12 - v9;
  a2(v8);
  static WidgetAuxiliaryViewMetadata.reduce(_:_:)(a1, (uint64_t)v6, (uint64_t)v10);
  outlined destroy of ResolvableTextSegmentAttribute.Value?(a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v10, a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t static WidgetAuxiliaryViewMetadata.reduce(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  MEMORY[0x1F4188790](v6 - 8);
  double v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v48 = (uint64_t)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v11 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  uint64_t v12 = *((void *)v11 - 1);
  MEMORY[0x1F4188790](v11);
  unint64_t v14 = (void **)((char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v15);
  uint64_t v51 = (void **)((char *)&v47 - v16);
  type metadata accessor for (WidgetAuxiliaryViewMetadata?, WidgetAuxiliaryViewMetadata?)(0, (unint64_t *)&lazy cache variable for type metadata for (WidgetAuxiliaryViewMetadata?, WidgetAuxiliaryViewMetadata?), type metadata accessor for WidgetAuxiliaryViewMetadata?);
  MEMORY[0x1F4188790](v17 - 8);
  unint64_t v19 = (char *)&v47 - v18;
  unint64_t v21 = (char *)&v47 + *(int *)(v20 + 56) - v18;
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a1, (uint64_t)&v47 - v18, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a2, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  uint64_t v52 = v12;
  unint64_t v22 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  if (v22(v19, 1, v11) == 1) {
    return outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v21, a3, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  }
  uint64_t v47 = a3;
  if (v22(v21, 1, v11) == 1) {
    return outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v19, v47, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  }
  uint64_t v24 = v51;
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v19, (uint64_t)v51, type metadata accessor for WidgetAuxiliaryViewMetadata);
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v21, (uint64_t)v14, type metadata accessor for WidgetAuxiliaryViewMetadata);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v14 + v11[6], (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
  uint64_t v26 = v49;
  uint64_t v25 = v50;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v8, 1, v50) == 1)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
  }
  else
  {
    uint64_t v27 = (uint64_t)v8;
    uint64_t v28 = v48;
    outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v27, v48, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    uint64_t v29 = (uint64_t)v24 + v11[6];
    outlined destroy of ResolvableTextSegmentAttribute.Value?(v29, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
    outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v28, v29, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v29, 0, 1, v25);
  }
  uint64_t v30 = v11[7];
  char v31 = *(void **)((char *)v14 + v30);
  if (v31)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void **)((char *)v24 + v30) = v31;
  }
  uint64_t v32 = *v14;
  if (*v14)
  {
    unint64_t v33 = *v24;
    id v34 = v32;

    *uint64_t v24 = v32;
  }
  uint64_t v35 = (uint64_t *)((char *)v14 + v11[11]);
  uint64_t v36 = *v35;
  uint64_t v37 = v35[1];
  uint64_t v38 = v35[2];
  uint64_t v39 = v35[3];
  uint64_t v40 = v35[4];
  uint64_t v41 = v35[5];
  uint64_t v42 = v35[6];
  uint64_t v43 = *v35;
  uint64_t v50 = v35[7];
  outlined copy of WidgetAuxiliaryViewMetadata.Accessibility?(v43, v37);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v14, type metadata accessor for WidgetAuxiliaryViewMetadata);
  if (v37 != 1)
  {
    char v44 = (uint64_t *)((char *)v24 + v11[11]);
    outlined consume of WidgetAuxiliaryViewMetadata.Accessibility?(*v44, v44[1]);
    *char v44 = v36;
    v44[1] = v37;
    v44[2] = v38;
    v44[3] = v39;
    v44[4] = v40;
    v44[5] = v41;
    uint64_t v45 = v50;
    v44[6] = v42;
    v44[7] = v45;
  }
  uint64_t v46 = v47;
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v24, v47, type metadata accessor for WidgetAuxiliaryViewMetadata);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v52 + 56))(v46, 0, 1, v11);
  return outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v24, type metadata accessor for WidgetAuxiliaryViewMetadata);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance WidgetAuxiliaryViewMetadata.Key@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static WidgetAuxiliaryViewMetadata.Key.defaultValue);
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v3, a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance WidgetAuxiliaryViewMetadata.Key(uint64_t a1, void (*a2)(double))
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v12 - v9;
  a2(v8);
  static WidgetAuxiliaryViewMetadata.reduce(_:_:)(a1, (uint64_t)v6, (uint64_t)v10);
  outlined destroy of ResolvableTextSegmentAttribute.Value?(a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v10, a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t WidgetAuxiliaryViewMetadataModifier.init(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  double v6 = MEMORY[0x1F4188790](a1);
  double v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v8, a2);
}

uint64_t static WidgetAuxiliaryViewMetadataModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void *(*a3)(void *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v58 = *a2;
  unsigned int v49 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  unsigned int v9 = *((_DWORD *)a2 + 6);
  unsigned int v10 = *((_DWORD *)a2 + 7);
  int v12 = *((_DWORD *)a2 + 8);
  int v11 = *((_DWORD *)a2 + 9);
  uint64_t v13 = a2[5];
  uint64_t v53 = a2[6];
  unsigned int v52 = *((_DWORD *)a2 + 14);
  unsigned int v57 = *((_DWORD *)a2 + 15);
  unsigned int v51 = *((_DWORD *)a2 + 16);
  unsigned int v50 = *((_DWORD *)a2 + 17);
  int v56 = *((_DWORD *)a2 + 18);
  int v55 = *((_DWORD *)a2 + 19);
  int v54 = *((_DWORD *)a2 + 20);
  LODWORD(v72) = *a1;
  type metadata accessor for WidgetAuxiliaryViewMetadataModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(a4 - 8) + 64)) {
    closure #1 in static WidgetAuxiliaryViewMetadataModifier._makeView(modifier:inputs:body:)(1, a4);
  }
  AGGraphCreateOffsetAttribute2();
  _ViewInputs.withoutGeometryDependencies.getter();
  PreferenceKeys.init()();
  PreferenceKeys.add(_:)();
  _ViewInputs.hasWidgetMetadata.setter();
  unsigned int v48 = v10;
  *(void *)&long long v60 = v59[2];
  LOBYTE(v59[0]) = 0;
  _ViewInputs.intern<A>(_:id:)();
  swift_bridgeObjectRelease();
  PreferencesInputs.init(hostKeys:)();
  swift_bridgeObjectRelease();
  *((void *)&v78 + 1) = v58;
  LODWORD(v79) = v49;
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(0);
  PreferenceKeys.add(_:)();
  PreferenceKeys.add(_:)();
  v77 |= 0x10u;
  _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _ViewInputs.EnvironmentTransform and conformance _ViewInputs.EnvironmentTransform();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.setter();
  PreferenceKeys.add(_:)();
  _GraphValue.init(_:)();
  uint64_t v43 = v72;
  uint64_t v63 = v72;
  unsigned int v42 = v73;
  unsigned int v64 = v73;
  uint64_t v41 = v74;
  uint64_t v65 = v74;
  unsigned int v40 = v75;
  unint64_t v66 = v75;
  unsigned int v39 = HIDWORD(v75);
  int v38 = v76;
  int v67 = v76;
  int v68 = v77;
  int v37 = v77;
  uint64_t v36 = v78;
  long long v69 = v78;
  long long v70 = v79;
  unsigned int v34 = DWORD2(v79);
  unsigned int v35 = DWORD1(v79);
  unsigned int v33 = HIDWORD(v79);
  int v32 = v80[0];
  v71[0] = v80[0];
  *(void *)&v71[1] = *(void *)&v80[1];
  int v31 = v80[1];
  int v30 = v80[2];
  (*(void (**)(long long *__return_ptr, void *, uint64_t *, uint64_t))(a5 + 24))(&v60, v59, &v63, a4);
  uint64_t v14 = v60;
  unsigned int v15 = DWORD2(v60);
  uint64_t v63 = v60;
  unsigned int v64 = DWORD2(v60);
  uint64_t v16 = PreferencesOutputs.subscript.getter();
  uint64_t v63 = v14;
  unsigned int v64 = v15;
  uint64_t v17 = PreferencesOutputs.subscript.getter();
  if ((v17 & 0x100000000) != 0)
  {
    uint64_t v63 = v58;
    unsigned int v64 = v49;
    uint64_t v65 = v8;
    unint64_t v66 = __PAIR64__(v48, v9);
    int v67 = v12;
    int v68 = v11;
    *(void *)&long long v69 = v13;
    *((void *)&v69 + 1) = v53;
    *(void *)&long long v70 = __PAIR64__(v57, v52);
    *((void *)&v70 + 1) = __PAIR64__(v50, v51);
    v71[0] = v56;
    v71[1] = v55;
    v71[2] = v54;
    *(void *)&long long v60 = MEMORY[0x1E4FBC860];
    LOBYTE(v59[0]) = 0;
    LODWORD(v17) = _ViewInputs.intern<A>(_:id:)();
  }
  int v45 = v17;
  uint64_t v63 = v14;
  unsigned int v64 = v15;
  uint64_t v18 = PreferencesOutputs.subscript.getter();
  uint64_t v63 = v14;
  unsigned int v64 = v15;
  uint64_t v19 = PreferencesOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  unsigned int v20 = *MEMORY[0x1E4F4E7A0];
  if ((v16 & 0x100000000) != 0) {
    unsigned int v21 = *MEMORY[0x1E4F4E7A0];
  }
  else {
    unsigned int v21 = v16;
  }
  unsigned int v44 = v21;
  if ((v18 & 0x100000000) != 0) {
    unsigned int v22 = *MEMORY[0x1E4F4E7A0];
  }
  else {
    unsigned int v22 = v18;
  }
  unsigned int v29 = v22;
  uint64_t v63 = v43;
  if ((v19 & 0x100000000) == 0) {
    unsigned int v20 = v19;
  }
  unsigned int v28 = v20;
  unsigned int v64 = v42;
  uint64_t v65 = v41;
  unint64_t v66 = __PAIR64__(v39, v40);
  int v67 = v38;
  int v68 = v37;
  *(void *)&long long v69 = v36;
  *((void *)&v69 + 1) = v58;
  *(void *)&long long v70 = __PAIR64__(v35, v49);
  *((void *)&v70 + 1) = __PAIR64__(v33, v34);
  v71[0] = v32;
  v71[1] = v31;
  v71[2] = v30;
  unsigned int v23 = _ViewInputs.environment.getter();
  uint64_t v63 = v43;
  unsigned int v64 = v42;
  uint64_t v65 = v41;
  unint64_t v66 = __PAIR64__(v39, v40);
  int v67 = v38;
  int v68 = v37;
  *(void *)&long long v69 = v36;
  uint64_t v24 = _GraphInputs.interfaceIdiom.getter();
  long long v25 = v60;
  *(void *)&long long v60 = __PAIR64__(v29, v44);
  *((void *)&v60 + 1) = __PAIR64__(v23, v28);
  int v61 = v45;
  long long v62 = v25;
  uint64_t v63 = v58;
  unsigned int v64 = v49;
  uint64_t v65 = v8;
  unint64_t v66 = __PAIR64__(v48, v9);
  int v67 = v12;
  int v68 = v11;
  *(void *)&long long v69 = v13;
  *((void *)&v69 + 1) = v53;
  *(void *)&long long v70 = __PAIR64__(v57, v52);
  *((void *)&v70 + 1) = __PAIR64__(v50, v51);
  v71[0] = v56;
  v71[1] = v55;
  v71[2] = v54;
  uint64_t v26 = a3(v59, v24, &v63);
  uint64_t v63 = v53;
  unsigned int v64 = v52;
  MEMORY[0x1F4188790](v26);
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  *a6 = v59[0];
  a6[1] = v59[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in static WidgetAuxiliaryViewMetadataModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for WidgetAuxiliaryViewMetadataModifier();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t implicit closure #2 in static WidgetAuxiliaryViewMetadataModifier._makeView(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance WidgetAuxiliaryViewMetadataModifier<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void *(*a3)(void *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X4>, void *a5@<X8>)
{
  return static WidgetAuxiliaryViewMetadataModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance WidgetAuxiliaryViewMetadataModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3F8](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t AuxiliaryViewMetadataPreferenceWriter.value.getter@<X0>(id *a1@<X8>)
{
  unsigned int v33 = a1;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  uint64_t v32 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlatformItemList.Item?(0);
  MEMORY[0x1F4188790](v8 - 8);
  unsigned int v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v12 = *v1;
  int v11 = v1[1];
  int v13 = v1[2];
  long long v31 = *(_OWORD *)(v1 + 6);
  AGGraphGetValue();
  uint64_t v14 = swift_bridgeObjectRetain();
  PlatformItemList.mergedContentItem.getter(v14, (uint64_t)v10);
  swift_bridgeObjectRelease();
  uint64_t v15 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v10, 0, 1, v15);
  int v16 = *MEMORY[0x1E4F4E7A0];
  if (v11 == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v17 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v7, 1, 1, v17);
    if (v13 != v16)
    {
LABEL_3:
      uint64_t Value = AGGraphGetValue();
      char v19 = *(unsigned char *)(Value + 16);
      v35[1] = *(_OWORD *)Value;
      char v36 = v19;
      long long v20 = *(_OWORD *)AGGraphGetValue();
      long long v34 = v31;
      v35[0] = v20;
      AccessibilityAttachment.Tree.metadataAccessibility(in:idiom:)((uint64_t *)v35, (uint64_t)&v37);
      long long v21 = v37;
      long long v22 = v38;
      long long v23 = v39;
      long long v24 = v40;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v25 = AGGraphGetValue();
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v25, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for URL?);
    if (v13 != v16) {
      goto LABEL_3;
    }
  }
  long long v21 = xmmword_18834BB90;
  long long v22 = 0uLL;
  long long v23 = 0uLL;
  long long v24 = 0uLL;
LABEL_6:
  long long v37 = v21;
  long long v38 = v22;
  long long v39 = v23;
  long long v40 = v24;
  if (v12 == v16)
  {
    uint64_t v26 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v4, 1, 1, v26);
  }
  else
  {
    uint64_t v27 = AGGraphGetValue();
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v27, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  }
  unsigned int v28 = v33;
  WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)((uint64_t)v10, (uint64_t)v7, (uint64_t *)&v37, (uint64_t)v4, v33);
  uint64_t v29 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  return (*(uint64_t (**)(id *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v28, 0, 1, v29);
}

void AccessibilityAttachment.Tree.metadataAccessibility(in:idiom:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v7 = *(void *)v2;
  uint64_t v6 = *(void **)(v2 + 8);
  if (*(unsigned char *)(v2 + 16))
  {
    if (*(unsigned char *)(v2 + 16) != 1)
    {
      *(_OWORD *)a2 = xmmword_18834BB90;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      return;
    }
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v9 = specialized Sequence.compactMap<A>(_:)(v8);
    static AccessibilityAttachment.combine(_:)(v9, (uint64_t *)&v27);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v7, v6, 1);
    uint64_t v6 = (void *)*((void *)&v27 + 1);
    uint64_t v7 = v27;
  }
  else
  {
    id v10 = v6;
    swift_bridgeObjectRetain();
  }
  uint64_t v11 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v11, (uint64_t)&v27);
  swift_bridgeObjectRelease();
  if ((void)v27)
  {
    *(void *)&long long v27 = v5;
    *((void *)&v27 + 1) = v4;
    uint64_t v12 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
    uint64_t v25 = v13;
    uint64_t v26 = v12;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  uint64_t v14 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v14, &v27);
  swift_bridgeObjectRelease();
  if (v29)
  {
    AccessibilityValueStorage.valueDescription.getter();
    outlined destroy of AccessibilityValueStorage((uint64_t)&v27);
    *(void *)&long long v27 = v5;
    *((void *)&v27 + 1) = v4;
    uint64_t v24 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of TimeDataFormattingContainer?((uint64_t)&v27, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80]);
    uint64_t v24 = 0;
    uint64_t v16 = 0;
  }
  *(void *)&long long v27 = v7;
  if (*(void *)(AccessibilityProperties.hints.getter() + 16))
  {
    *(void *)&long long v27 = v5;
    *((void *)&v27 + 1) = v4;
    uint64_t v17 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = 0;
    uint64_t v19 = 0;
  }
  uint64_t v20 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v20, (uint64_t)&v27);
  swift_bridgeObjectRelease();
  uint64_t v21 = *((void *)&v27 + 1);
  if (*((void *)&v27 + 1))
  {
    uint64_t v22 = v27;
    unsigned int v23 = v28;
    swift_bridgeObjectRelease();

    if (v23 >= 2)
    {
      swift_bridgeObjectRelease();
      uint64_t v22 = 0;
      uint64_t v21 = 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();

    uint64_t v22 = 0;
  }
  *(void *)a2 = v26;
  *(void *)(a2 + 8) = v25;
  *(void *)(a2 + 16) = v24;
  *(void *)(a2 + 24) = v16;
  *(void *)(a2 + 32) = v22;
  *(void *)(a2 + 40) = v21;
  *(void *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = v19;
}

uint64_t protocol witness for Rule.value.getter in conformance WidgetAuxiliaryMetadataTextImageWriter@<X0>(uint64_t *a1@<X8>)
{
  if (AGGraphGetWeakValue()) {
    uint64_t result = swift_bridgeObjectRetain();
  }
  else {
    uint64_t result = 1;
  }
  *a1 = result;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance WidgetAuxiliaryMetadataTextImageWriter(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WidgetAuxiliaryMetadataTextImageWriter and conformance WidgetAuxiliaryMetadataTextImageWriter();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t LazyWidgetAuxiliaryMetadataTextImage.textImagePref.getter()
{
  if (*(_DWORD *)(v0 + 100) == *MEMORY[0x1E4F4E7A0]) {
    return 2;
  }
  type metadata accessor for [Color.Resolved](0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryTextImagePreference?, (uint64_t)&type metadata for WidgetAuxiliaryTextImagePreference, MEMORY[0x1E4FBB718]);
  uint64_t v1 = *(void *)AGGraphGetValue();
  outlined copy of WidgetAuxiliaryTextImagePreference?(v1);
  return v1;
}

Swift::Void __swiftcall LazyWidgetAuxiliaryMetadataTextImage.updateValue()()
{
  unint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  type metadata accessor for [Color.Resolved](0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryTextImagePreference?, (uint64_t)&type metadata for WidgetAuxiliaryTextImagePreference, MEMORY[0x1E4FBB718]);
  if (AGGraphGetOutputValue())
  {
    unsigned int v4 = *((_DWORD *)v1 + 25);
  }
  else
  {
    uint64_t v25 = *v1;
    int v5 = *((_DWORD *)v1 + 2);
    uint64_t v6 = v1[2];
    int v7 = *((_DWORD *)v1 + 6);
    uint64_t v8 = v1[4];
    int v9 = *((_DWORD *)v1 + 10);
    int v10 = *((_DWORD *)v2 + 11);
    int v36 = *((_DWORD *)v2 + 13);
    int v37 = *((_DWORD *)v2 + 12);
    uint64_t v34 = v2[8];
    uint64_t v35 = v2[7];
    int v32 = *((_DWORD *)v2 + 19);
    int v33 = *((_DWORD *)v2 + 18);
    int v30 = *((_DWORD *)v2 + 21);
    int v31 = *((_DWORD *)v2 + 20);
    int v28 = *((_DWORD *)v2 + 23);
    int v29 = *((_DWORD *)v2 + 22);
    unsigned int v26 = *((_DWORD *)v2 + 25);
    unsigned int v27 = *((_DWORD *)v2 + 24);
    uint64_t v38 = *(void *)(v3 + 24);
    uint64_t v39 = *(void *)(v3 + 16);
    *(void *)&long long v40 = v25;
    DWORD2(v40) = v5;
    *(void *)&long long v41 = v6;
    DWORD2(v41) = v7;
    *(void *)unsigned int v42 = v8;
    *(_DWORD *)&v42[8] = v9;
    *(_DWORD *)&v42[12] = v10;
    *(_DWORD *)&v42[16] = v37;
    *(_DWORD *)&v42[20] = v36;
    *(void *)&v42[24] = v35;
    *(void *)&v42[32] = v34;
    *(_DWORD *)&v42[40] = v33;
    *(_DWORD *)&v42[44] = v32;
    *(_DWORD *)&v42[48] = v31;
    *(_DWORD *)&v42[52] = v30;
    *(_DWORD *)&v42[56] = v29;
    *(_DWORD *)&v42[60] = v28;
    unint64_t v43 = __PAIR64__(v26, v27);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v39;
    *(void *)(v11 + 24) = v38;
    *(void *)(v11 + 32) = v25;
    *(_DWORD *)(v11 + 40) = v5;
    *(void *)(v11 + 48) = v6;
    *(_DWORD *)(v11 + 56) = v7;
    *(void *)(v11 + 64) = v8;
    *(_DWORD *)(v11 + 72) = v9;
    *(_DWORD *)(v11 + 76) = v10;
    *(_DWORD *)(v11 + 80) = v37;
    *(_DWORD *)(v11 + 84) = v36;
    *(void *)(v11 + 88) = v35;
    *(void *)(v11 + 96) = v34;
    *(_DWORD *)(v11 + 104) = v33;
    *(_DWORD *)(v11 + 108) = v32;
    *(_DWORD *)(v11 + 112) = v31;
    *(_DWORD *)(v11 + 116) = v30;
    *(_DWORD *)(v11 + 120) = v29;
    *(_DWORD *)(v11 + 124) = v28;
    *(_DWORD *)(v11 + 128) = v27;
    *(_DWORD *)(v11 + 132) = v26;
    outlined retain of SelectionEditMenuModifier<A>.Child((void **)&v40);
    AGGraphClearUpdate();
    id v12 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    long long v13 = *(_OWORD *)(v11 + 112);
    *(_OWORD *)&v42[32] = *(_OWORD *)(v11 + 96);
    *(_OWORD *)&v42[48] = v13;
    unint64_t v43 = *(void *)(v11 + 128);
    long long v14 = *(_OWORD *)(v11 + 48);
    long long v40 = *(_OWORD *)(v11 + 32);
    long long v41 = v14;
    long long v15 = *(_OWORD *)(v11 + 80);
    *(_OWORD *)unsigned int v42 = *(_OWORD *)(v11 + 64);
    *(_OWORD *)&v42[16] = v15;
    uint64_t v16 = type metadata accessor for LazyWidgetAuxiliaryMetadataTextImage();
    unsigned int v4 = LazyWidgetAuxiliaryMetadataTextImage.makeTextImage()(v16);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    swift_release();
    *((_DWORD *)v2 + 25) = v4;
  }
  int v17 = *((_DWORD *)v2 + 2);
  uint64_t v18 = v2[2];
  int v19 = *((_DWORD *)v2 + 6);
  uint64_t v20 = v2[4];
  unsigned int v21 = *((_DWORD *)v2 + 24);
  *(void *)&long long v40 = *v2;
  DWORD2(v40) = v17;
  *(void *)&long long v41 = v18;
  DWORD2(v41) = v19;
  *(void *)unsigned int v42 = v20;
  *(_OWORD *)&v42[8] = *(_OWORD *)(v2 + 5);
  *(_OWORD *)&v42[24] = *(_OWORD *)(v2 + 7);
  *(_OWORD *)&v42[40] = *(_OWORD *)(v2 + 9);
  *(void *)&v42[56] = v2[11];
  unint64_t v43 = __PAIR64__(v4, v21);
  uint64_t v22 = LazyWidgetAuxiliaryMetadataTextImage.textImagePref.getter();
  uint64_t v23 = v22;
  if (v22 == 2) {
    uint64_t v24 = 1;
  }
  else {
    uint64_t v24 = v22;
  }
  *(void *)&long long v40 = v24;
  AGGraphSetOutputValue();
  outlined consume of WidgetAuxiliaryTextImagePreference??(v23);
}

uint64_t LazyWidgetAuxiliaryMetadataTextImage.makeTextImage()(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = *(void *)(v1 + 64);
  int v7 = *(_DWORD *)(v1 + 96);
  uint64_t v23 = *(void *)(v1 + 16);
  int v24 = v3;
  uint64_t v25 = v4;
  long long v26 = *(_OWORD *)(v1 + 40);
  uint64_t v27 = v5;
  uint64_t v28 = v6;
  long long v29 = *(_OWORD *)(v1 + 72);
  uint64_t v30 = *(void *)(v1 + 88);
  int v31 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(0);
  uint64_t v8 = *(void *)(a1 + 16);
  _GraphValue.init(_:)();
  uint64_t v14 = v23;
  int v15 = v24;
  uint64_t v16 = v4;
  long long v17 = v26;
  uint64_t v18 = v5;
  uint64_t v19 = v6;
  long long v20 = v29;
  uint64_t v21 = v30;
  int v22 = v31;
  (*(void (**)(uint64_t *__return_ptr, unsigned char *, uint64_t *, uint64_t))(*(void *)(a1 + 24) + 24))(&v12, v11, &v14, v8);
  uint64_t v14 = v12;
  int v15 = v13;
  PreferencesOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t v14 = AGCreateWeakAttribute();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for [Color.Resolved](0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryTextImagePreference?, (uint64_t)&type metadata for WidgetAuxiliaryTextImagePreference, MEMORY[0x1E4FBB718]);
  lazy protocol witness table accessor for type WidgetAuxiliaryMetadataTextImageWriter and conformance WidgetAuxiliaryMetadataTextImageWriter();
  uint64_t v9 = Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v9;
}

uint64_t static WidgetAuxiliaryURLPreferenceKey.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  type metadata accessor for URL?(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static WidgetAuxiliaryURLPreferenceKey.defaultValue);
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v3, a1, (uint64_t (*)(void))type metadata accessor for URL?);
}

uint64_t static WidgetAuxiliaryURLPreferenceKey.reduce(value:nextValue:)(uint64_t a1, void (*a2)(void))
{
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v13 - v8;
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for URL?);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    a2();
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for URL?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v6, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  }
  return outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v9, a1, (uint64_t (*)(void))type metadata accessor for URL?);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance WidgetAuxiliaryURLPreferenceKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  type metadata accessor for URL?(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static WidgetAuxiliaryURLPreferenceKey.defaultValue);
  return outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(v3, a1, (uint64_t (*)(void))type metadata accessor for URL?);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance WidgetAuxiliaryURLPreferenceKey(uint64_t a1, void (*a2)(void))
{
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v13 - v8;
  outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for URL?);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    a2();
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for URL?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v6, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  }
  return outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v9, a1, (uint64_t (*)(void))type metadata accessor for URL?);
}

uint64_t type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for WidgetAuxiliaryViewMetadata.Progress.Kind);
}

void type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(uint64_t a1)
{
}

uint64_t outlined copy of WidgetAuxiliaryViewMetadata.Gauge?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of WidgetAuxiliaryViewMetadata.Accessibility?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text and conformance WidgetAuxiliaryViewMetadata.Text()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text and conformance WidgetAuxiliaryViewMetadata.Text;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text and conformance WidgetAuxiliaryViewMetadata.Text)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text and conformance WidgetAuxiliaryViewMetadata.Text);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text and conformance WidgetAuxiliaryViewMetadata.Text;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text and conformance WidgetAuxiliaryViewMetadata.Text)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text and conformance WidgetAuxiliaryViewMetadata.Text);
  }
  return result;
}

void type metadata accessor for [WidgetAuxiliaryViewMetadata](uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata and conformance WidgetAuxiliaryViewMetadata()
{
  return lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata and conformance WidgetAuxiliaryViewMetadata, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
}

{
  return lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata and conformance WidgetAuxiliaryViewMetadata, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge and conformance WidgetAuxiliaryViewMetadata.Gauge()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge and conformance WidgetAuxiliaryViewMetadata.Gauge;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge and conformance WidgetAuxiliaryViewMetadata.Gauge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge and conformance WidgetAuxiliaryViewMetadata.Gauge);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge and conformance WidgetAuxiliaryViewMetadata.Gauge;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge and conformance WidgetAuxiliaryViewMetadata.Gauge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge and conformance WidgetAuxiliaryViewMetadata.Gauge);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility and conformance WidgetAuxiliaryViewMetadata.Accessibility()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility and conformance WidgetAuxiliaryViewMetadata.Accessibility;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility and conformance WidgetAuxiliaryViewMetadata.Accessibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility and conformance WidgetAuxiliaryViewMetadata.Accessibility);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility and conformance WidgetAuxiliaryViewMetadata.Accessibility;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility and conformance WidgetAuxiliaryViewMetadata.Accessibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility and conformance WidgetAuxiliaryViewMetadata.Accessibility);
  }
  return result;
}

uint64_t outlined consume of WidgetAuxiliaryViewMetadata.Gauge?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of WidgetAuxiliaryViewMetadata.Accessibility?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys);
  }
  return result;
}

void type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named?(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Error and conformance WidgetAuxiliaryViewMetadata.Graphic.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Error and conformance WidgetAuxiliaryViewMetadata.Graphic.Error;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Error and conformance WidgetAuxiliaryViewMetadata.Graphic.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Error and conformance WidgetAuxiliaryViewMetadata.Graphic.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Error and conformance WidgetAuxiliaryViewMetadata.Graphic.Error;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Error and conformance WidgetAuxiliaryViewMetadata.Graphic.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Error and conformance WidgetAuxiliaryViewMetadata.Graphic.Error);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Color.Resolved] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for [Color.Resolved](255, &lazy cache variable for type metadata for [Color.Resolved], MEMORY[0x1E4F414B8], MEMORY[0x1E4FBB320]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage);
  }
  return result;
}

void type metadata accessor for ProtobufCodable<SymbolEffectArray>()
{
  if (!lazy cache variable for type metadata for ProtobufCodable<SymbolEffectArray>)
  {
    lazy protocol witness table accessor for type SymbolEffectArray and conformance SymbolEffectArray();
    lazy protocol witness table accessor for type SymbolEffectArray and conformance SymbolEffectArray();
    unint64_t v0 = type metadata accessor for ProtobufCodable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ProtobufCodable<SymbolEffectArray>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SymbolEffectArray and conformance SymbolEffectArray()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray;
  if (!lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray;
  if (!lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray;
  if (!lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray;
  if (!lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray;
  if (!lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray);
  }
  return result;
}

void type metadata accessor for ProtobufCodable<ContentTransition>()
{
  if (!lazy cache variable for type metadata for ProtobufCodable<ContentTransition>)
  {
    unint64_t v0 = type metadata accessor for ProtobufCodable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ProtobufCodable<ContentTransition>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys);
  }
  return result;
}

void type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient;
  if (!lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient;
  if (!lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  return lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E4F27928]);
}

{
  return lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E4F27928]);
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t specialized static WidgetAuxiliaryViewMetadata.Accessibility.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[2];
  uint64_t v13 = a2[3];
  uint64_t v12 = a2[4];
  uint64_t v15 = a2[5];
  uint64_t v14 = a2[6];
  uint64_t v16 = a2[7];
  if (!v3)
  {
    if (v10) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!v10) {
    return 0;
  }
  if (*a1 == *a2 && v3 == v10) {
    goto LABEL_8;
  }
  uint64_t v33 = a1[5];
  uint64_t v34 = a2[5];
  uint64_t v17 = a1[4];
  uint64_t v18 = a2[6];
  uint64_t v19 = a2[7];
  uint64_t v20 = a1[7];
  uint64_t v21 = a1[6];
  uint64_t v22 = a2[4];
  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v12 = v22;
  uint64_t v7 = v21;
  uint64_t v9 = v20;
  uint64_t v16 = v19;
  uint64_t v14 = v18;
  uint64_t v5 = v17;
  uint64_t v8 = v33;
  uint64_t v15 = v34;
  char v24 = v23;
  uint64_t result = 0;
  if (v24)
  {
LABEL_8:
    if (v6)
    {
      if (!v13) {
        return 0;
      }
      if (v4 != v11 || v6 != v13)
      {
        uint64_t v26 = v7;
        uint64_t v27 = v12;
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v12 = v27;
        uint64_t v7 = v26;
        char v29 = v28;
        uint64_t result = 0;
        if ((v29 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v13)
    {
      return 0;
    }
    if (v8)
    {
      if (!v15) {
        return 0;
      }
      if (v5 != v12 || v8 != v15)
      {
        uint64_t v30 = v7;
        char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v7 = v30;
        char v32 = v31;
        uint64_t result = 0;
        if ((v32 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v15)
    {
      return 0;
    }
    if (v9)
    {
      if (v16 && (v7 == v14 && v9 == v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v16)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static WidgetAuxiliaryViewMetadata.Graphic.Named.Location.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v23 - v11;
  type metadata accessor for (WidgetAuxiliaryViewMetadata.Graphic.Named.Location, WidgetAuxiliaryViewMetadata.Graphic.Named.Location)(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = &v15[*(int *)(v16 + 56)];
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a1, (uint64_t)v15, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a2, (uint64_t)v17, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v15, (uint64_t)v12, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v20 = v24;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v17, v24);
      char v19 = MEMORY[0x18C10A440](v12, v6);
      uint64_t v21 = *(void (**)(char *, uint64_t))(v4 + 8);
      v21(v6, v20);
      v21(v12, v20);
      outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v15, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
      return v19 & 1;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v24);
    goto LABEL_6;
  }
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v15, (uint64_t)v9, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
LABEL_6:
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for (WidgetAuxiliaryViewMetadata.Graphic.Named.Location, WidgetAuxiliaryViewMetadata.Graphic.Named.Location));
    char v19 = 0;
    return v19 & 1;
  }
  char v18 = *v9 ^ *v17;
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v15, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
  char v19 = v18 ^ 1;
  return v19 & 1;
}

uint64_t specialized static WidgetAuxiliaryViewMetadata.Graphic.Named.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), LOBYTE(v6) = 0, (v5 & 1) != 0))
  {
    uint64_t v7 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
    if ((specialized static WidgetAuxiliaryViewMetadata.Graphic.Named.Location.== infix(_:_:)((uint64_t)a1 + v7[5], (uint64_t)a2 + v7[5]) & 1) == 0)goto LABEL_14; {
    uint64_t v8 = v7[6];
    }
    uint64_t v9 = (float *)((char *)a1 + v8);
    char v10 = *((unsigned char *)a1 + v8 + 4);
    uint64_t v11 = (float *)((char *)a2 + v8);
    int v6 = *((unsigned __int8 *)a2 + v8 + 4);
    if (v10)
    {
      if (!v6) {
        return v6 & 1;
      }
    }
    else
    {
      if (*v9 != *v11) {
        LOBYTE(v6) = 1;
      }
      if (v6) {
        goto LABEL_14;
      }
    }
    if (*((unsigned __int8 *)a1 + v7[7]) != *((unsigned __int8 *)a2 + v7[7]))
    {
LABEL_14:
      LOBYTE(v6) = 0;
      return v6 & 1;
    }
    uint64_t v13 = v7[8];
    uint64_t v14 = *(float32x4_t **)((char *)a1 + v13);
    uint64_t v15 = *(float32x4_t **)((char *)a2 + v13);
    if (v14)
    {
      if (!v15) {
        goto LABEL_14;
      }
      specialized static Array<A>.== infix(_:_:)(v14, v15);
      if ((v16 & 1) == 0) {
        goto LABEL_14;
      }
    }
    else if (v15)
    {
      goto LABEL_14;
    }
    uint64_t v17 = v7[9];
    char v18 = (float *)((char *)a1 + v17);
    char v19 = *((unsigned char *)a1 + v17 + 16);
    uint64_t v20 = (char *)a2 + v17;
    if (v19)
    {
      if (!v20[16]) {
        goto LABEL_14;
      }
    }
    else
    {
      if (v20[16]) {
        goto LABEL_14;
      }
      uint64_t v22 = *(void *)v20;
      uint64_t v21 = *((void *)v20 + 1);
      BOOL v23 = *v18 == *(float *)&v22 && v18[1] == *((float *)&v22 + 1);
      BOOL v24 = v23 && v18[2] == *(float *)&v21;
      if (!v24 || v18[3] != *((float *)&v21 + 1)) {
        goto LABEL_14;
      }
    }
    uint64_t v26 = v7[10];
    int v27 = *((unsigned __int8 *)a1 + v26);
    int v28 = *((unsigned __int8 *)a2 + v26);
    if (v27 == 8)
    {
      if (v28 != 8) {
        goto LABEL_14;
      }
LABEL_41:
      uint64_t v29 = v7[11];
      uint64_t v30 = *(void *)((char *)a1 + v29);
      uint64_t v31 = *(void *)((char *)a2 + v29);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v32 = specialized static Array<A>.== infix(_:_:)(v30, v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v32)
      {
        uint64_t v33 = v7[12];
        uint64_t v34 = *(void *)((char *)a1 + v33);
        __int16 v35 = *(_WORD *)((char *)a1 + v33 + 12);
        int v36 = *(_DWORD *)((char *)a1 + v33 + 8);
        char v37 = *((unsigned char *)a1 + v33 + 14);
        uint64_t v38 = (char *)a2 + v33;
        uint64_t v39 = *(void *)v38;
        __int16 v40 = *((_WORD *)v38 + 6);
        int v41 = *((_DWORD *)v38 + 2);
        char v42 = v38[14];
        uint64_t v46 = v34;
        int v47 = v36;
        __int16 v48 = v35;
        uint64_t v43 = v39;
        int v44 = v41;
        __int16 v45 = v40;
        LOBYTE(v6) = MEMORY[0x18C10F820](&v46, &v43) & (v37 ^ v42 ^ 1);
        return v6 & 1;
      }
      goto LABEL_14;
    }
    LOBYTE(v6) = 0;
    if (v28 != 8 && v27 == v28) {
      goto LABEL_41;
    }
  }
  return v6 & 1;
}

uint64_t specialized static WidgetAuxiliaryViewMetadata.Graphic.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  MEMORY[0x1F4188790](v4 - 8);
  int v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (void **)((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (uint64_t *)((char *)&v23 - v11);
  type metadata accessor for (WidgetAuxiliaryViewMetadata.Graphic, WidgetAuxiliaryViewMetadata.Graphic)(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (void **)&v15[*(int *)(v16 + 56)];
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a1, (uint64_t)v15, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
  outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(a2, (uint64_t)v17, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v15, (uint64_t)v9, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    char v18 = *v9;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      char v19 = *v17;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      char v20 = static NSObject.== infix(_:_:)();

LABEL_9:
      uint64_t v21 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic;
      goto LABEL_10;
    }
  }
  else
  {
    outlined init with copy of WidgetAuxiliaryViewMetadata.Text.Metadata.Kind((uint64_t)v15, (uint64_t)v12, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named((uint64_t)v17, (uint64_t)v6, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
      char v20 = specialized static WidgetAuxiliaryViewMetadata.Graphic.Named.== infix(_:_:)(v12, v6);
      outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v6, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
      outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v12, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
      goto LABEL_9;
    }
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v12, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
  }
  char v20 = 0;
  uint64_t v21 = (uint64_t (*)(void))type metadata accessor for (WidgetAuxiliaryViewMetadata.Graphic, WidgetAuxiliaryViewMetadata.Graphic);
LABEL_10:
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v15, v21);
  return v20 & 1;
}

uint64_t specialized SymbolEffectArray.init(effects:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v18 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v18;
    uint64_t v4 = (unsigned char *)(a1 + 92);
    do
    {
      uint64_t v5 = *(void *)(v4 - 44);
      uint64_t v6 = *(void *)(v4 - 36);
      uint64_t v7 = *(void *)(v4 - 28);
      unsigned __int16 v8 = *((_WORD *)v4 - 10);
      int v9 = *((_DWORD *)v4 - 4);
      int v10 = *((_DWORD *)v4 - 3);
      int v16 = *((_DWORD *)v4 - 1);
      char v17 = *(v4 - 8);
      char v15 = *v4;
      outlined copy of _SymbolEffect.Storage(v5, v6, v7, v8);
      unint64_t v12 = *(void *)(v18 + 16);
      unint64_t v11 = *(void *)(v18 + 24);
      if (v12 >= v11 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
      }
      *(void *)(v18 + 16) = v12 + 1;
      uint64_t v13 = v18 + 48 * v12;
      *(void *)(v13 + 32) = v5;
      *(void *)(v13 + 40) = v6;
      *(void *)(v13 + 48) = v7;
      *(_WORD *)(v13 + 56) = v8;
      *(_DWORD *)(v13 + 60) = v9;
      *(_DWORD *)(v13 + 64) = v10;
      *(unsigned char *)(v13 + 68) = v17;
      *(_DWORD *)(v13 + 72) = v16;
      *(unsigned char *)(v13 + 76) = v15;
      v4 += 64;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *specialized MutableBox<A>.init(from:)(void *a1)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v3);
  char v15 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys>, MEMORY[0x1E4FBBDC0]);
  uint64_t v16 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unsigned __int16 v8 = (char *)&v14 - v7;
  int v9 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys();
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys and conformance MutableBox<A><A>.CodingKeys, (void (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    uint64_t v10 = v6;
    lazy protocol witness table accessor for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A](&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata? and conformance <A> A?, type metadata accessor for WidgetAuxiliaryViewMetadata?, (void (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata and conformance WidgetAuxiliaryViewMetadata);
    uint64_t v11 = (uint64_t)v15;
    uint64_t v12 = v16;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>(0);
    int v9 = (void *)swift_allocObject();
    outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(v11, (uint64_t)v9 + *(void *)(*MEMORY[0x1E4F3F3A0] + *v9 + 8), (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v12);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v9;
}

void type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys()
{
  if (!lazy cache variable for type metadata for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys)
  {
    unint64_t v0 = type metadata accessor for MutableBox<A>.CodingKeys();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys);
    }
  }
}

uint64_t type metadata accessor for MutableBox<A>.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for WidgetAuxiliaryViewMetadataModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for implicit closure #2 in static WidgetAuxiliaryViewMetadataModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #2 in static WidgetAuxiliaryViewMetadataModifier._makeView(modifier:inputs:body:)();
}

_UNKNOWN **base witness table accessor for ViewModifier in WidgetAuxiliaryViewMetadataModifier<A>()
{
  return &protocol witness table for WidgetAuxiliaryViewMetadataModifier<A>;
}

char *initializeBufferWithCopyOfBuffer for WidgetAuxiliaryViewMetadata(char *a1, char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v6 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2[1];
    *((void *)a1 + 1) = v7;
    uint64_t v8 = a3[6];
    int v9 = (void **)&a1[v8];
    uint64_t v10 = (void **)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v12 + 48);
    uint64_t v14 = v4;
    char v15 = v7;
    if (v13(v10, 1, v11))
    {
      type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
      memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      uint64_t v77 = v12;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        char v17 = *v10;
        *int v9 = *v10;
        id v18 = v17;
      }
      else
      {
        char v19 = v10[1];
        *int v9 = *v10;
        v9[1] = v19;
        char v20 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
        uint64_t v21 = v20[5];
        uint64_t v22 = (char *)v9 + v21;
        uint64_t v23 = (char *)v10 + v21;
        uint64_t v24 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
        swift_bridgeObjectRetain();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
        }
        else
        {
          uint64_t v25 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v22, v23, v25);
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v26 = v20[6];
        int v27 = (char *)v9 + v26;
        int v28 = (char *)v10 + v26;
        *(_DWORD *)int v27 = *(_DWORD *)v28;
        v27[4] = v28[4];
        *((unsigned char *)v9 + v20[7]) = *((unsigned char *)v10 + v20[7]);
        *(void **)((char *)v9 + v20[8]) = *(void **)((char *)v10 + v20[8]);
        uint64_t v29 = v20[9];
        uint64_t v30 = (char *)v9 + v29;
        uint64_t v31 = (char *)v10 + v29;
        *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
        char v30[16] = v31[16];
        *((unsigned char *)v9 + v20[10]) = *((unsigned char *)v10 + v20[10]);
        *(void **)((char *)v9 + v20[11]) = *(void **)((char *)v10 + v20[11]);
        uint64_t v32 = v20[12];
        uint64_t v33 = (char *)v9 + v32;
        uint64_t v34 = (char *)v10 + v32;
        uint64_t v35 = *(uint64_t *)((char *)v10 + v32);
        uint64_t v36 = v34[12];
        uint64_t v76 = *((unsigned int *)v34 + 2);
        char v37 = v34[13];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of ContentTransition.Storage(v35, v76 | (v36 << 32), v37);
        *(void *)uint64_t v33 = v35;
        unsigned char v33[12] = v36;
        *((_DWORD *)v33 + 2) = v76;
        v33[13] = v37;
        v33[14] = v34[14];
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void **, void, uint64_t, uint64_t))(v77 + 56))(v9, 0, 1, v11);
    }
    uint64_t v38 = a3[8];
    *(void *)&v6[a3[7]] = *(char **)((char *)a2 + a3[7]);
    uint64_t v39 = &v6[v38];
    __int16 v40 = (char *)a2 + v38;
    int v41 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
    uint64_t v42 = *((void *)v41 - 1);
    uint64_t v43 = *(unsigned int (**)(char *, uint64_t, int *))(v42 + 48);
    swift_bridgeObjectRetain();
    if (v43(v40, 1, v41))
    {
      type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
      memcpy(v39, v40, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      uint64_t v45 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v78 = type metadata accessor for Date();
        uint64_t v46 = *(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 16);
        v46(v39, v40, v78);
        type metadata accessor for ClosedRange<Date>();
        v46(&v39[*(int *)(v47 + 36)], &v40[*(int *)(v47 + 36)], v78);
        type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
        v39[*(int *)(v48 + 48)] = v40[*(int *)(v48 + 48)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v39, v40, *(void *)(*(void *)(v45 - 8) + 64));
      }
      *(void *)&v39[v41[5]] = *(void *)&v40[v41[5]];
      *(void *)&v39[v41[6]] = *(void *)&v40[v41[6]];
      uint64_t v49 = v41[7];
      unsigned int v50 = &v39[v49];
      unsigned int v51 = &v40[v49];
      *(void *)unsigned int v50 = *(void *)v51;
      v50[8] = v51[8];
      unsigned int v52 = *(void (**)(char *, void, uint64_t, int *))(v42 + 56);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      v52(v39, 0, 1, v41);
    }
    uint64_t v53 = a3[9];
    int v54 = &v6[v53];
    uint64_t v55 = (uint64_t)a2 + v53;
    uint64_t v56 = *(void *)(v55 + 8);
    if (v56)
    {
      *(void *)int v54 = *(void *)v55;
      *((void *)v54 + 1) = v56;
      uint64_t v57 = *(void *)(v55 + 24);
      *((void *)v54 + 2) = *(void *)(v55 + 16);
      *((void *)v54 + 3) = v57;
      uint64_t v58 = *(void *)(v55 + 40);
      *((void *)v54 + 4) = *(void *)(v55 + 32);
      *((void *)v54 + 5) = v58;
      v54[48] = *(unsigned char *)(v55 + 48);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v59 = *(_OWORD *)(v55 + 16);
      *(_OWORD *)int v54 = *(_OWORD *)v55;
      *((_OWORD *)v54 + 1) = v59;
      *((_OWORD *)v54 + 2) = *(_OWORD *)(v55 + 32);
      v54[48] = *(unsigned char *)(v55 + 48);
    }
    uint64_t v60 = a3[10];
    int v61 = &v6[v60];
    long long v62 = (char *)a2 + v60;
    uint64_t v63 = type metadata accessor for URL();
    uint64_t v64 = *(void *)(v63 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
    {
      type metadata accessor for URL?(0);
      memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v61, v62, v63);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
    }
    uint64_t v66 = a3[11];
    int v67 = &v6[v66];
    uint64_t v68 = (uint64_t)a2 + v66;
    uint64_t v69 = *(void *)(v68 + 8);
    if (v69 == 1)
    {
      long long v70 = *(_OWORD *)(v68 + 16);
      *(_OWORD *)int v67 = *(_OWORD *)v68;
      *((_OWORD *)v67 + 1) = v70;
      long long v71 = *(_OWORD *)(v68 + 48);
      *((_OWORD *)v67 + 2) = *(_OWORD *)(v68 + 32);
      *((_OWORD *)v67 + 3) = v71;
    }
    else
    {
      *(void *)int v67 = *(void *)v68;
      *((void *)v67 + 1) = v69;
      uint64_t v72 = *(void *)(v68 + 24);
      *((void *)v67 + 2) = *(void *)(v68 + 16);
      *((void *)v67 + 3) = v72;
      uint64_t v73 = *(void *)(v68 + 40);
      *((void *)v67 + 4) = *(void *)(v68 + 32);
      *((void *)v67 + 5) = v73;
      uint64_t v74 = *(void *)(v68 + 56);
      *((void *)v67 + 6) = *(void *)(v68 + 48);
      *((void *)v67 + 7) = v74;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  return v6;
}

uint64_t destroy for WidgetAuxiliaryViewMetadata(id *a1, int *a2)
{
  uint64_t v4 = (id *)((char *)a1 + a2[6]);
  uint64_t v5 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
      uint64_t v7 = (char *)v4 + *(int *)(v6 + 20);
      type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
      if (!swift_getEnumCaseMultiPayload())
      {
        uint64_t v8 = type metadata accessor for URL();
        (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of ContentTransition.Storage(*(uint64_t *)((char *)v4 + *(int *)(v6 + 48)), *(unsigned int *)((char *)v4 + *(int *)(v6 + 48) + 8) | ((unint64_t)*((unsigned __int8 *)v4+ *(int *)(v6 + 48)+ 12) << 32), *((unsigned char *)v4 + *(int *)(v6 + 48) + 13));
    }
  }
  swift_bridgeObjectRelease();
  int v9 = (char *)a1 + a2[8];
  uint64_t v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for Date();
      uint64_t v12 = *(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8);
      v12(v9, v11);
      type metadata accessor for ClosedRange<Date>();
      v12(&v9[*(int *)(v13 + 36)], v11);
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  if (*(id *)((char *)a1 + a2[9] + 8))
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = (char *)a1 + a2[10];
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
  }
  uint64_t result = *(uint64_t *)((char *)a1 + a2[11] + 8);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for WidgetAuxiliaryViewMetadata(void *a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void **)a2;
  uint64_t v6 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (void **)((char *)a1 + v7);
  int v9 = (void **)(a2 + v7);
  uint64_t v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v11 + 48);
  id v13 = v5;
  id v14 = v6;
  if (v12(v9, 1, v10))
  {
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = *v9;
      *uint64_t v8 = *v9;
      id v17 = v16;
    }
    else
    {
      id v18 = v9[1];
      *uint64_t v8 = *v9;
      v8[1] = v18;
      char v19 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
      uint64_t v20 = v19[5];
      __dst = (char *)v8 + v20;
      uint64_t v21 = (char *)v9 + v20;
      uint64_t v22 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
      swift_bridgeObjectRetain();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(__dst, v21, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        uint64_t v23 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(__dst, v21, v23);
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v24 = v19[6];
      uint64_t v25 = (char *)v8 + v24;
      uint64_t v26 = (char *)v9 + v24;
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      *((unsigned char *)v8 + v19[7]) = *((unsigned char *)v9 + v19[7]);
      *(void **)((char *)v8 + v19[8]) = *(void **)((char *)v9 + v19[8]);
      uint64_t v27 = v19[9];
      int v28 = (char *)v8 + v27;
      uint64_t v29 = (char *)v9 + v27;
      *(_OWORD *)int v28 = *(_OWORD *)v29;
      v28[16] = v29[16];
      *((unsigned char *)v8 + v19[10]) = *((unsigned char *)v9 + v19[10]);
      *(void **)((char *)v8 + v19[11]) = *(void **)((char *)v9 + v19[11]);
      uint64_t v30 = v19[12];
      uint64_t v31 = (char *)v8 + v30;
      uint64_t v32 = (char *)v9 + v30;
      uint64_t v33 = *(uint64_t *)((char *)v9 + v30);
      uint64_t v75 = v32[12];
      unint64_t __dsta = *((unsigned int *)v32 + 2);
      char v34 = v32[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of ContentTransition.Storage(v33, __dsta | (v75 << 32), v34);
      *(void *)uint64_t v31 = v33;
      v31[12] = v75;
      *((_DWORD *)v31 + 2) = __dsta;
      v31[13] = v34;
      v31[14] = v32[14];
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void **, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v35 = a3;
  uint64_t v36 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)(a2 + a3[7]);
  char v37 = (char *)a1 + v36;
  uint64_t v38 = (char *)(a2 + v36);
  uint64_t v39 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  uint64_t v40 = *((void *)v39 - 1);
  int v41 = *(unsigned int (**)(char *, uint64_t, int *))(v40 + 48);
  swift_bridgeObjectRetain();
  if (v41(v38, 1, v39))
  {
    type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
    memcpy(v37, v38, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    uint64_t v43 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v44 = type metadata accessor for Date();
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 16);
      v45(v37, v38, v44);
      type metadata accessor for ClosedRange<Date>();
      v45(&v37[*(int *)(v46 + 36)], &v38[*(int *)(v46 + 36)], v44);
      uint64_t v35 = a3;
      type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      v37[*(int *)(v47 + 48)] = v38[*(int *)(v47 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v37, v38, *(void *)(*(void *)(v43 - 8) + 64));
    }
    *(void *)&v37[v39[5]] = *(void *)&v38[v39[5]];
    *(void *)&v37[v39[6]] = *(void *)&v38[v39[6]];
    uint64_t v48 = v39[7];
    uint64_t v49 = &v37[v48];
    unsigned int v50 = &v38[v48];
    *(void *)uint64_t v49 = *(void *)v50;
    v49[8] = v50[8];
    unsigned int v51 = *(void (**)(char *, void, uint64_t, int *))(v40 + 56);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v51(v37, 0, 1, v39);
  }
  uint64_t v52 = v35[9];
  uint64_t v53 = (char *)a1 + v52;
  uint64_t v54 = a2 + v52;
  uint64_t v55 = *(void *)(v54 + 8);
  if (v55)
  {
    *(void *)uint64_t v53 = *(void *)v54;
    *((void *)v53 + 1) = v55;
    uint64_t v56 = *(void *)(v54 + 24);
    *((void *)v53 + 2) = *(void *)(v54 + 16);
    *((void *)v53 + 3) = v56;
    uint64_t v57 = *(void *)(v54 + 40);
    *((void *)v53 + 4) = *(void *)(v54 + 32);
    *((void *)v53 + 5) = v57;
    v53[48] = *(unsigned char *)(v54 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v58 = *(_OWORD *)(v54 + 16);
    *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
    *((_OWORD *)v53 + 1) = v58;
    *((_OWORD *)v53 + 2) = *(_OWORD *)(v54 + 32);
    v53[48] = *(unsigned char *)(v54 + 48);
  }
  uint64_t v59 = v35[10];
  uint64_t v60 = (char *)a1 + v59;
  int v61 = (const void *)(a2 + v59);
  uint64_t v62 = type metadata accessor for URL();
  uint64_t v63 = *(void *)(v62 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
  {
    type metadata accessor for URL?(0);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v63 + 16))(v60, v61, v62);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
  }
  uint64_t v65 = v35[11];
  uint64_t v66 = (char *)a1 + v65;
  uint64_t v67 = a2 + v65;
  uint64_t v68 = *(void *)(v67 + 8);
  if (v68 == 1)
  {
    long long v69 = *(_OWORD *)(v67 + 16);
    *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
    *((_OWORD *)v66 + 1) = v69;
    long long v70 = *(_OWORD *)(v67 + 48);
    *((_OWORD *)v66 + 2) = *(_OWORD *)(v67 + 32);
    *((_OWORD *)v66 + 3) = v70;
  }
  else
  {
    *(void *)uint64_t v66 = *(void *)v67;
    *((void *)v66 + 1) = v68;
    uint64_t v71 = *(void *)(v67 + 24);
    *((void *)v66 + 2) = *(void *)(v67 + 16);
    *((void *)v66 + 3) = v71;
    uint64_t v72 = *(void *)(v67 + 40);
    *((void *)v66 + 4) = *(void *)(v67 + 32);
    *((void *)v66 + 5) = v72;
    uint64_t v73 = *(void *)(v67 + 56);
    *((void *)v66 + 6) = *(void *)(v67 + 48);
    *((void *)v66 + 7) = v73;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for WidgetAuxiliaryViewMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v8 = v7;

  int v9 = *(void **)(a1 + 8);
  uint64_t v10 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v10;
  id v11 = v10;

  uint64_t v12 = a3[6];
  id v13 = (void *)(a1 + v12);
  id v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  uint64_t v16 = *(void *)(v15 - 8);
  id v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v20 = (void *)*v14;
        void *v13 = *v14;
        id v21 = v20;
      }
      else
      {
        uint64_t v125 = a3;
        void *v13 = *v14;
        v13[1] = v14[1];
        uint64_t v25 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
        uint64_t v26 = v25[5];
        __dst = (char *)v13 + v26;
        uint64_t v27 = (char *)v14 + v26;
        uint64_t v28 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
        swift_bridgeObjectRetain();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(__dst, v27, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          uint64_t v34 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(__dst, v27, v34);
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v35 = v25[6];
        uint64_t v36 = (char *)v13 + v35;
        char v37 = (char *)v14 + v35;
        int v38 = *(_DWORD *)v37;
        v36[4] = v37[4];
        *(_DWORD *)uint64_t v36 = v38;
        *((unsigned char *)v13 + v25[7]) = *((unsigned char *)v14 + v25[7]);
        *(void *)((char *)v13 + v25[8]) = *(void *)((char *)v14 + v25[8]);
        uint64_t v39 = v25[9];
        uint64_t v40 = (char *)v13 + v39;
        int v41 = (char *)v14 + v39;
        long long v42 = *(_OWORD *)v41;
        v40[16] = v41[16];
        *(_OWORD *)uint64_t v40 = v42;
        *((unsigned char *)v13 + v25[10]) = *((unsigned char *)v14 + v25[10]);
        *(void *)((char *)v13 + v25[11]) = *(void *)((char *)v14 + v25[11]);
        uint64_t v43 = v25[12];
        uint64_t v44 = (char *)v13 + v43;
        uint64_t v45 = (char *)v14 + v43;
        uint64_t v46 = *(void *)((char *)v14 + v43);
        uint64_t v121 = v45[12];
        unint64_t __dsta = *((unsigned int *)v45 + 2);
        char v47 = v45[13];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of ContentTransition.Storage(v46, __dsta | (v121 << 32), v47);
        *(void *)uint64_t v44 = v46;
        v44[12] = v121;
        *((_DWORD *)v44 + 2) = __dsta;
        v44[13] = v47;
        v44[14] = v45[14];
        a3 = v125;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_18;
    }
LABEL_7:
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
    memcpy(v13, v14, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_18;
  }
  if (v19)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v13, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v13, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = (void *)*v14;
      void *v13 = *v14;
      id v24 = v23;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v126 = a3;
      void *v13 = *v14;
      v13[1] = v14[1];
      uint64_t v29 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
      uint64_t v30 = v29[5];
      uint64_t v31 = (char *)v13 + v30;
      uint64_t v32 = (char *)v14 + v30;
      uint64_t v33 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
      swift_bridgeObjectRetain();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        uint64_t v106 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 16))(v31, v32, v106);
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v107 = v29[6];
      uint64_t v108 = (char *)v13 + v107;
      char v109 = (char *)v14 + v107;
      int v110 = *(_DWORD *)v109;
      v108[4] = v109[4];
      *(_DWORD *)uint64_t v108 = v110;
      *((unsigned char *)v13 + v29[7]) = *((unsigned char *)v14 + v29[7]);
      *(void *)((char *)v13 + v29[8]) = *(void *)((char *)v14 + v29[8]);
      uint64_t v111 = v29[9];
      long long v112 = (char *)v13 + v111;
      uint64_t v113 = (char *)v14 + v111;
      long long v114 = *(_OWORD *)v113;
      v112[16] = v113[16];
      *(_OWORD *)long long v112 = v114;
      *((unsigned char *)v13 + v29[10]) = *((unsigned char *)v14 + v29[10]);
      *(void *)((char *)v13 + v29[11]) = *(void *)((char *)v14 + v29[11]);
      uint64_t v115 = v29[12];
      id v116 = (char *)v13 + v115;
      uint64_t v117 = (char *)v14 + v115;
      uint64_t v118 = *(void *)((char *)v14 + v115);
      uint64_t v119 = v117[12];
      unint64_t __dstb = *((unsigned int *)v117 + 2);
      char v120 = v117[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of ContentTransition.Storage(v118, __dstb | (v119 << 32), v120);
      *(void *)id v116 = v118;
      v116[12] = v119;
      *((_DWORD *)v116 + 2) = __dstb;
      v116[13] = v120;
      v116[14] = v117[14];
      swift_storeEnumTagMultiPayload();
      a3 = v126;
    }
  }
LABEL_18:
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = a3[8];
  uint64_t v49 = (unsigned char *)(a1 + v48);
  unsigned int v50 = (unsigned char *)(a2 + v48);
  unsigned int v51 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  uint64_t v52 = *((void *)v51 - 1);
  uint64_t v53 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v52 + 48);
  int v54 = v53(v49, 1, v51);
  int v55 = v53(v50, 1, v51);
  if (v54)
  {
    if (!v55)
    {
      uint64_t v56 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v57 = type metadata accessor for Date();
        long long v58 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v57 - 8) + 16);
        v58(v49, v50, v57);
        type metadata accessor for ClosedRange<Date>();
        v58(&v49[*(int *)(v59 + 36)], &v50[*(int *)(v59 + 36)], v57);
        type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
        v49[*(int *)(v60 + 48)] = v50[*(int *)(v60 + 48)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v49, v50, *(void *)(*(void *)(v56 - 8) + 64));
      }
      *(void *)&v49[v51[5]] = *(void *)&v50[v51[5]];
      *(void *)&v49[v51[6]] = *(void *)&v50[v51[6]];
      uint64_t v67 = v51[7];
      uint64_t v68 = &v49[v67];
      long long v69 = &v50[v67];
      *(void *)uint64_t v68 = *(void *)v69;
      v68[8] = v69[8];
      long long v70 = *(void (**)(unsigned char *, void, uint64_t, int *))(v52 + 56);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      v70(v49, 0, 1, v51);
      goto LABEL_32;
    }
LABEL_24:
    type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
    memcpy(v49, v50, *(void *)(*(void *)(v61 - 8) + 64));
    goto LABEL_32;
  }
  if (v55)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v49, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress);
    goto LABEL_24;
  }
  if (a1 != a2)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v49, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
    uint64_t v62 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v63 = type metadata accessor for Date();
      uint64_t v64 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v63 - 8) + 16);
      v64(v49, v50, v63);
      type metadata accessor for ClosedRange<Date>();
      v64(&v49[*(int *)(v65 + 36)], &v50[*(int *)(v65 + 36)], v63);
      type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      v49[*(int *)(v66 + 48)] = v50[*(int *)(v66 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v49, v50, *(void *)(*(void *)(v62 - 8) + 64));
    }
  }
  *(void *)&v49[v51[5]] = *(void *)&v50[v51[5]];
  swift_retain();
  swift_release();
  *(void *)&v49[v51[6]] = *(void *)&v50[v51[6]];
  swift_retain();
  swift_release();
  uint64_t v71 = v51[7];
  uint64_t v72 = &v49[v71];
  uint64_t v73 = &v50[v71];
  *(void *)&v49[v71] = *(void *)v73;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v72[8] = v73[8];
LABEL_32:
  uint64_t v74 = a3[9];
  uint64_t v75 = a1 + v74;
  uint64_t v76 = (long long *)(a2 + v74);
  uint64_t v77 = *(void *)(a1 + v74 + 8);
  uint64_t v78 = *(void *)(a2 + v74 + 8);
  if (v77)
  {
    if (v78)
    {
      *(void *)uint64_t v75 = *(void *)v76;
      *(void *)(v75 + 8) = *((void *)v76 + 1);
      swift_retain();
      swift_release();
      *(void *)(v75 + 16) = *((void *)v76 + 2);
      swift_retain();
      swift_release();
      *(void *)(v75 + 24) = *((void *)v76 + 3);
      swift_retain();
      swift_release();
      *(void *)(v75 + 32) = *((void *)v76 + 4);
      swift_retain();
      swift_release();
      *(void *)(v75 + 40) = *((void *)v76 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v75 + 48) = *((unsigned char *)v76 + 48);
    }
    else
    {
      outlined destroy of WidgetAuxiliaryViewMetadata.Gauge(v75);
      long long v80 = v76[1];
      long long v79 = v76[2];
      long long v81 = *v76;
      *(unsigned char *)(v75 + 48) = *((unsigned char *)v76 + 48);
      *(_OWORD *)(v75 + 16) = v80;
      *(_OWORD *)(v75 + 32) = v79;
      *(_OWORD *)uint64_t v75 = v81;
    }
  }
  else if (v78)
  {
    *(void *)uint64_t v75 = *(void *)v76;
    *(void *)(v75 + 8) = *((void *)v76 + 1);
    *(void *)(v75 + 16) = *((void *)v76 + 2);
    *(void *)(v75 + 24) = *((void *)v76 + 3);
    *(void *)(v75 + 32) = *((void *)v76 + 4);
    *(void *)(v75 + 40) = *((void *)v76 + 5);
    *(unsigned char *)(v75 + 48) = *((unsigned char *)v76 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v82 = *v76;
    long long v83 = v76[1];
    long long v84 = v76[2];
    *(unsigned char *)(v75 + 48) = *((unsigned char *)v76 + 48);
    *(_OWORD *)(v75 + 16) = v83;
    *(_OWORD *)(v75 + 32) = v84;
    *(_OWORD *)uint64_t v75 = v82;
  }
  uint64_t v85 = a3[10];
  int v86 = (void *)(a1 + v85);
  unsigned int v87 = (void *)(a2 + v85);
  uint64_t v88 = type metadata accessor for URL();
  uint64_t v89 = *(void *)(v88 - 8);
  uint64_t v90 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v89 + 48);
  int v91 = v90(v86, 1, v88);
  int v92 = v90(v87, 1, v88);
  if (v91)
  {
    if (!v92)
    {
      (*(void (**)(void *, void *, uint64_t))(v89 + 16))(v86, v87, v88);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (v92)
  {
    (*(void (**)(void *, uint64_t))(v89 + 8))(v86, v88);
LABEL_44:
    type metadata accessor for URL?(0);
    memcpy(v86, v87, *(void *)(*(void *)(v93 - 8) + 64));
    goto LABEL_45;
  }
  (*(void (**)(void *, void *, uint64_t))(v89 + 24))(v86, v87, v88);
LABEL_45:
  uint64_t v94 = a3[11];
  uint64_t v95 = a1 + v94;
  long long v96 = (long long *)(a2 + v94);
  uint64_t v97 = *(void *)(a1 + v94 + 8);
  uint64_t v98 = *((void *)v96 + 1);
  if (v97 == 1)
  {
    if (v98 == 1)
    {
      long long v99 = *v96;
      long long v100 = v96[1];
      long long v101 = v96[3];
      *(_OWORD *)(v95 + 32) = v96[2];
      *(_OWORD *)(v95 + 48) = v101;
      *(_OWORD *)uint64_t v95 = v99;
      *(_OWORD *)(v95 + 16) = v100;
    }
    else
    {
      *(void *)uint64_t v95 = *(void *)v96;
      *(void *)(v95 + 8) = *((void *)v96 + 1);
      *(void *)(v95 + 16) = *((void *)v96 + 2);
      *(void *)(v95 + 24) = *((void *)v96 + 3);
      *(void *)(v95 + 32) = *((void *)v96 + 4);
      *(void *)(v95 + 40) = *((void *)v96 + 5);
      *(void *)(v95 + 48) = *((void *)v96 + 6);
      *(void *)(v95 + 56) = *((void *)v96 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v98 == 1)
  {
    outlined destroy of WidgetAuxiliaryViewMetadata.Accessibility(v95);
    long long v102 = v96[3];
    long long v104 = *v96;
    long long v103 = v96[1];
    *(_OWORD *)(v95 + 32) = v96[2];
    *(_OWORD *)(v95 + 48) = v102;
    *(_OWORD *)uint64_t v95 = v104;
    *(_OWORD *)(v95 + 16) = v103;
  }
  else
  {
    *(void *)uint64_t v95 = *(void *)v96;
    *(void *)(v95 + 8) = *((void *)v96 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v95 + 16) = *((void *)v96 + 2);
    *(void *)(v95 + 24) = *((void *)v96 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v95 + 32) = *((void *)v96 + 4);
    *(void *)(v95 + 40) = *((void *)v96 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v95 + 48) = *((void *)v96 + 6);
    *(void *)(v95 + 56) = *((void *)v96 + 7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t outlined destroy of WidgetAuxiliaryViewMetadata.Gauge(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of WidgetAuxiliaryViewMetadata.Accessibility(uint64_t a1)
{
  return a1;
}

_OWORD *initializeWithTake for WidgetAuxiliaryViewMetadata(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (_OWORD *)((char *)a1 + v6);
  id v8 = (_OWORD *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v7, v8, *(void *)(v10 + 64));
    }
    else
    {
      *uint64_t v7 = *v8;
      uint64_t v12 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
      uint64_t v13 = v12[5];
      __dst = (char *)v7 + v13;
      id v14 = (char *)v8 + v13;
      uint64_t v15 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(__dst, v14, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        uint64_t v16 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(__dst, v14, v16);
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v17 = v12[6];
      int v18 = (char *)v7 + v17;
      int v19 = (char *)v8 + v17;
      *(_DWORD *)int v18 = *(_DWORD *)v19;
      v18[4] = v19[4];
      *((unsigned char *)v7 + v12[7]) = *((unsigned char *)v8 + v12[7]);
      *(void *)((char *)v7 + v12[8]) = *(void *)((char *)v8 + v12[8]);
      uint64_t v20 = v12[9];
      id v21 = (char *)v7 + v20;
      uint64_t v22 = (char *)v8 + v20;
      *(_OWORD *)id v21 = *(_OWORD *)v22;
      v21[16] = v22[16];
      *((unsigned char *)v7 + v12[10]) = *((unsigned char *)v8 + v12[10]);
      *(void *)((char *)v7 + v12[11]) = *(void *)((char *)v8 + v12[11]);
      uint64_t v23 = v12[12];
      id v24 = (void *)((char *)v7 + v23);
      uint64_t v25 = (void *)((char *)v8 + v23);
      *id v24 = *v25;
      *(void *)((char *)v24 + 7) = *(void *)((char *)v25 + 7);
      swift_storeEnumTagMultiPayload();
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v26 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  uint64_t v30 = *((void *)v29 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
  {
    type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    uint64_t v32 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v33 = type metadata accessor for Date();
      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32);
      v34(v27, v28, v33);
      type metadata accessor for ClosedRange<Date>();
      v34(&v27[*(int *)(v35 + 36)], &v28[*(int *)(v35 + 36)], v33);
      type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      v27[*(int *)(v36 + 48)] = v28[*(int *)(v36 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64));
    }
    *(void *)&v27[v29[5]] = *(void *)&v28[v29[5]];
    *(void *)&v27[v29[6]] = *(void *)&v28[v29[6]];
    uint64_t v37 = v29[7];
    int v38 = &v27[v37];
    uint64_t v39 = &v28[v37];
    v38[8] = v39[8];
    *(void *)int v38 = *(void *)v39;
    (*(void (**)(char *, void, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
  }
  uint64_t v40 = a3[9];
  uint64_t v41 = a3[10];
  long long v42 = (char *)a1 + v40;
  uint64_t v43 = (char *)a2 + v40;
  long long v44 = *((_OWORD *)v43 + 1);
  *(_OWORD *)long long v42 = *(_OWORD *)v43;
  *((_OWORD *)v42 + 1) = v44;
  *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
  v42[48] = v43[48];
  uint64_t v45 = (char *)a1 + v41;
  uint64_t v46 = (char *)a2 + v41;
  uint64_t v47 = type metadata accessor for URL();
  uint64_t v48 = *(void *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    type metadata accessor for URL?(0);
    memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v45, v46, v47);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  uint64_t v50 = a3[11];
  unsigned int v51 = (_OWORD *)((char *)a1 + v50);
  uint64_t v52 = (_OWORD *)((char *)a2 + v50);
  long long v53 = v52[1];
  _OWORD *v51 = *v52;
  v51[1] = v53;
  long long v54 = v52[3];
  v51[2] = v52[2];
  v51[3] = v54;
  return a1;
}

void **assignWithTake for WidgetAuxiliaryViewMetadata(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = a1[1];
  a1[1] = a2[1];

  uint64_t v8 = a3[6];
  uint64_t v9 = (_OWORD *)((char *)a1 + v8);
  uint64_t v10 = (_OWORD *)((char *)a2 + v8);
  uint64_t v11 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      if (a1 == a2) {
        goto LABEL_19;
      }
      outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v9, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
      if (!swift_getEnumCaseMultiPayload())
      {
        *uint64_t v9 = *v10;
        uint64_t v22 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
        uint64_t v23 = v22[5];
        id v24 = (char *)v9 + v23;
        uint64_t v25 = (char *)v10 + v23;
        uint64_t v26 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          uint64_t v87 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 32))(v24, v25, v87);
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v88 = v22[6];
        uint64_t v89 = (char *)v9 + v88;
        uint64_t v90 = (char *)v10 + v88;
        *(_DWORD *)uint64_t v89 = *(_DWORD *)v90;
        v89[4] = v90[4];
        *((unsigned char *)v9 + v22[7]) = *((unsigned char *)v10 + v22[7]);
        *(void *)((char *)v9 + v22[8]) = *(void *)((char *)v10 + v22[8]);
        uint64_t v91 = v22[9];
        int v92 = (char *)v9 + v91;
        uint64_t v93 = (char *)v10 + v91;
        *(_OWORD *)int v92 = *(_OWORD *)v93;
        v92[16] = v93[16];
        *((unsigned char *)v9 + v22[10]) = *((unsigned char *)v10 + v22[10]);
        *(void *)((char *)v9 + v22[11]) = *(void *)((char *)v10 + v22[11]);
        uint64_t v94 = v22[12];
        uint64_t v95 = (void *)((char *)v9 + v94);
        long long v96 = (void *)((char *)v10 + v94);
        void *v95 = *v96;
        *(void *)((char *)v95 + 7) = *(void *)((char *)v96 + 7);
        swift_storeEnumTagMultiPayload();
        goto LABEL_19;
      }
      size_t v17 = *(void *)(v12 + 64);
LABEL_8:
      memcpy(v9, v10, v17);
      goto LABEL_19;
    }
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v9, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
LABEL_7:
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
    size_t v17 = *(void *)(*(void *)(v16 - 8) + 64);
    goto LABEL_8;
  }
  if (v15) {
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v9, v10, *(void *)(v12 + 64));
  }
  else
  {
    *uint64_t v9 = *v10;
    int v18 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
    uint64_t v19 = v18[5];
    __dst = (char *)v9 + v19;
    uint64_t v20 = (char *)v10 + v19;
    uint64_t v21 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(__dst, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v27 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(__dst, v20, v27);
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v28 = v18[6];
    uint64_t v29 = (char *)v9 + v28;
    uint64_t v30 = (char *)v10 + v28;
    *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
    v29[4] = v30[4];
    *((unsigned char *)v9 + v18[7]) = *((unsigned char *)v10 + v18[7]);
    *(void *)((char *)v9 + v18[8]) = *(void *)((char *)v10 + v18[8]);
    uint64_t v31 = v18[9];
    uint64_t v32 = (char *)v9 + v31;
    uint64_t v33 = (char *)v10 + v31;
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    v32[16] = v33[16];
    *((unsigned char *)v9 + v18[10]) = *((unsigned char *)v10 + v18[10]);
    *(void *)((char *)v9 + v18[11]) = *(void *)((char *)v10 + v18[11]);
    uint64_t v34 = v18[12];
    uint64_t v35 = (void *)((char *)v9 + v34);
    uint64_t v36 = (void *)((char *)v10 + v34);
    *uint64_t v35 = *v36;
    *(void *)((char *)v35 + 7) = *(void *)((char *)v36 + 7);
    swift_storeEnumTagMultiPayload();
  }
  (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_19:
  *(void **)((char *)a1 + a3[7]) = *(void **)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[8];
  int v38 = (char *)a1 + v37;
  uint64_t v39 = (char *)a2 + v37;
  uint64_t v40 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  uint64_t v41 = *((void *)v40 - 1);
  long long v42 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v41 + 48);
  int v43 = v42(v38, 1, v40);
  int v44 = v42(v39, 1, v40);
  if (v43)
  {
    if (!v44)
    {
      uint64_t v45 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v46 = type metadata accessor for Date();
        uint64_t v47 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v46 - 8) + 32);
        v47(v38, v39, v46);
        type metadata accessor for ClosedRange<Date>();
        v47(&v38[*(int *)(v48 + 36)], &v39[*(int *)(v48 + 36)], v46);
        type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
        v38[*(int *)(v49 + 48)] = v39[*(int *)(v49 + 48)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v38, v39, *(void *)(*(void *)(v45 - 8) + 64));
      }
      *(void *)&v38[v40[5]] = *(void *)&v39[v40[5]];
      *(void *)&v38[v40[6]] = *(void *)&v39[v40[6]];
      uint64_t v56 = v40[7];
      uint64_t v57 = &v38[v56];
      long long v58 = &v39[v56];
      v57[8] = v58[8];
      *(void *)uint64_t v57 = *(void *)v58;
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v41 + 56))(v38, 0, 1, v40);
      goto LABEL_33;
    }
LABEL_25:
    type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
    memcpy(v38, v39, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_33;
  }
  if (v44)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v38, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress);
    goto LABEL_25;
  }
  if (a1 != a2)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v38, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
    uint64_t v51 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v52 = type metadata accessor for Date();
      long long v53 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v52 - 8) + 32);
      v53(v38, v39, v52);
      type metadata accessor for ClosedRange<Date>();
      v53(&v38[*(int *)(v54 + 36)], &v39[*(int *)(v54 + 36)], v52);
      type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      v38[*(int *)(v55 + 48)] = v39[*(int *)(v55 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v38, v39, *(void *)(*(void *)(v51 - 8) + 64));
    }
  }
  *(void *)&v38[v40[5]] = *(void *)&v39[v40[5]];
  swift_release();
  *(void *)&v38[v40[6]] = *(void *)&v39[v40[6]];
  swift_release();
  uint64_t v59 = v40[7];
  uint64_t v60 = &v38[v59];
  uint64_t v61 = &v39[v59];
  *(void *)uint64_t v60 = *(void *)v61;
  swift_bridgeObjectRelease();
  v60[8] = v61[8];
LABEL_33:
  uint64_t v62 = a3[9];
  uint64_t v63 = (uint64_t)a1 + v62;
  uint64_t v64 = (char *)a2 + v62;
  if (*(void **)((char *)a1 + v62 + 8))
  {
    uint64_t v65 = *((void *)v64 + 1);
    if (v65)
    {
      *(void *)uint64_t v63 = *(void *)v64;
      *(void *)(v63 + 8) = v65;
      swift_release();
      *(void *)(v63 + 16) = *((void *)v64 + 2);
      swift_release();
      *(void *)(v63 + 24) = *((void *)v64 + 3);
      swift_release();
      *(void *)(v63 + 32) = *((void *)v64 + 4);
      swift_release();
      *(void *)(v63 + 40) = *((void *)v64 + 5);
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
    outlined destroy of WidgetAuxiliaryViewMetadata.Gauge(v63);
  }
  long long v66 = *((_OWORD *)v64 + 1);
  *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
  *(_OWORD *)(v63 + 16) = v66;
  *(_OWORD *)(v63 + 32) = *((_OWORD *)v64 + 2);
LABEL_38:
  *(unsigned char *)(v63 + 48) = v64[48];
  uint64_t v67 = a3;
  uint64_t v68 = a3[10];
  long long v69 = (char *)a1 + v68;
  long long v70 = (char *)a2 + v68;
  uint64_t v71 = type metadata accessor for URL();
  uint64_t v72 = *(void *)(v71 - 8);
  uint64_t v73 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v72 + 48);
  int v74 = v73(v69, 1, v71);
  int v75 = v73(v70, 1, v71);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v69, v70, v71);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v72 + 8))(v69, v71);
LABEL_43:
    type metadata accessor for URL?(0);
    memcpy(v69, v70, *(void *)(*(void *)(v76 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(char *, char *, uint64_t))(v72 + 40))(v69, v70, v71);
LABEL_44:
  uint64_t v77 = v67[11];
  uint64_t v78 = (void **)((char *)a1 + v77);
  long long v79 = (void **)((char *)a2 + v77);
  if (*(void **)((char *)a1 + v77 + 8) != (void *)1)
  {
    uint64_t v80 = v79[1];
    if (v80 != 1)
    {
      *uint64_t v78 = *v79;
      v78[1] = v80;
      swift_bridgeObjectRelease();
      uint64_t v83 = v79[3];
      v78[2] = v79[2];
      v78[3] = v83;
      swift_bridgeObjectRelease();
      uint64_t v84 = v79[5];
      v78[4] = v79[4];
      v78[5] = v84;
      swift_bridgeObjectRelease();
      uint64_t v85 = v79[7];
      v78[6] = v79[6];
      v78[7] = v85;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of WidgetAuxiliaryViewMetadata.Accessibility((uint64_t)v78);
  }
  long long v81 = *((_OWORD *)v79 + 1);
  *(_OWORD *)uint64_t v78 = *(_OWORD *)v79;
  *((_OWORD *)v78 + 1) = v81;
  long long v82 = *((_OWORD *)v79 + 3);
  *((_OWORD *)v78 + 2) = *((_OWORD *)v79 + 2);
  *((_OWORD *)v78 + 3) = v82;
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetAuxiliaryViewMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187E977DC);
}

uint64_t sub_187E977DC(char *a1, uint64_t a2, int *a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  if (*(_DWORD *)(*(void *)(v9 - 8) + 84) == a2)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)(v9 - 8);
    uint64_t v12 = a3[6];
LABEL_11:
    int v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
    return v14(&a1[v12], a2, v10);
  }
  type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v10 = v13;
    uint64_t v11 = *(void *)(v13 - 8);
    uint64_t v12 = a3[8];
    goto LABEL_11;
  }
  type metadata accessor for URL?(0);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  int v18 = &a1[a3[10]];

  return v16(v18, a2, v17);
}

uint64_t storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187E97974);
}

char *sub_187E97974(char *result, uint64_t a2, int a3, int *a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)uint64_t result = a2;
    return result;
  }
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v13(&v5[v11], a2, a2, v9);
  }
  type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_7;
  }
  type metadata accessor for URL?(0);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = &v5[a4[10]];

  return (char *)v15(v17, a2, a2, v16);
}

void type metadata completion function for WidgetAuxiliaryViewMetadata()
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(319);
    if (v1 <= 0x3F)
    {
      type metadata accessor for URL?(319);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

ValueMetadata *type metadata accessor for WidgetAuxiliaryViewMetadata.Text()
{
  return &type metadata for WidgetAuxiliaryViewMetadata.Text;
}

char *initializeBufferWithCopyOfBuffer for WidgetAuxiliaryViewMetadata.Text.Metadata(char *a1, char **a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v9 = *a2;
          *(void *)a1 = *a2;
          uint64_t v10 = v9;
        }
        else
        {
          uint64_t v31 = a2[1];
          *(void *)a1 = *a2;
          *((void *)a1 + 1) = v31;
          uint64_t v32 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
          uint64_t v33 = v32[5];
          uint64_t v34 = &a1[v33];
          uint64_t v35 = (char *)a2 + v33;
          uint64_t v36 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
          swift_bridgeObjectRetain();
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
          }
          else
          {
            uint64_t v37 = type metadata accessor for URL();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v34, v35, v37);
            swift_storeEnumTagMultiPayload();
          }
          uint64_t v38 = v32[6];
          uint64_t v39 = &a1[v38];
          uint64_t v40 = (uint64_t)a2 + v38;
          *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
          v39[4] = *(unsigned char *)(v40 + 4);
          a1[v32[7]] = *((unsigned char *)a2 + v32[7]);
          *(void *)&a1[v32[8]] = *(char **)((char *)a2 + v32[8]);
          uint64_t v41 = v32[9];
          long long v42 = &a1[v41];
          uint64_t v43 = (uint64_t)a2 + v41;
          *(_OWORD *)long long v42 = *(_OWORD *)v43;
          v42[16] = *(unsigned char *)(v43 + 16);
          a1[v32[10]] = *((unsigned char *)a2 + v32[10]);
          *(void *)&a1[v32[11]] = *(char **)((char *)a2 + v32[11]);
          uint64_t v44 = v32[12];
          uint64_t v45 = &a1[v44];
          uint64_t v46 = (uint64_t)a2 + v44;
          uint64_t v47 = *(uint64_t *)((char *)a2 + v44);
          uint64_t v48 = *((unsigned __int8 *)a2 + v44 + 12);
          uint64_t v53 = *(unsigned int *)((char *)a2 + v44 + 8);
          char v49 = *((unsigned char *)a2 + v44 + 13);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of ContentTransition.Storage(v47, v53 | (v48 << 32), v49);
          *(void *)uint64_t v45 = v47;
          v45[12] = v48;
          *((_DWORD *)v45 + 2) = v53;
          v45[13] = v49;
          v45[14] = *(unsigned char *)(v46 + 14);
        }
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v11 = type metadata accessor for Date();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        type metadata accessor for (ClosedRange<Date>, Bool)(0, &lazy cache variable for type metadata for (Date, Text.DateStyle), MEMORY[0x1E4F27928]);
        uint64_t v13 = *(int *)(v12 + 48);
        uint64_t v14 = &a1[v13];
        uint64_t v15 = (uint64_t)a2 + v13;
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
        v14[16] = *(unsigned char *)(v15 + 16);
        break;
      case 3u:
        uint64_t v16 = type metadata accessor for DateInterval();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
        break;
      case 4u:
        uint64_t v17 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v17;
        a1[16] = *((unsigned char *)a2 + 16);
        type metadata accessor for (String, Bool, TimeZone?)();
        uint64_t v19 = *(int *)(v18 + 64);
        __dst = &a1[v19];
        uint64_t v20 = (char *)a2 + v19;
        uint64_t v21 = type metadata accessor for TimeZone();
        uint64_t v22 = *(void *)(v21 - 8);
        uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
        swift_bridgeObjectRetain();
        if (v23(v20, 1, v21))
        {
          type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
          memcpy(__dst, v20, *(void *)(*(void *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dst, v20, v21);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
        }
        break;
      case 5u:
        uint64_t v25 = type metadata accessor for DateInterval();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v25 - 8) + 16))(a1, a2, v25);
        type metadata accessor for (DateInterval, Double?, Bool)();
        uint64_t v27 = *(int *)(v26 + 48);
        uint64_t v28 = &a1[v27];
        uint64_t v29 = (uint64_t)a2 + v27;
        *(void *)uint64_t v28 = *(void *)v29;
        v28[8] = *(unsigned char *)(v29 + 8);
        a1[*(int *)(v26 + 64)] = *((unsigned char *)a2 + *(int *)(v26 + 64));
        break;
      case 6u:
        long long v30 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 24) = v30;
        (**(void (***)(char *, char **))(v30 - 8))(a1, a2);
        break;
      default:
        uint64_t v7 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v7;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v50 = a3[6];
    *(_OWORD *)&a1[a3[5]] = *(_OWORD *)((char *)a2 + a3[5]);
    *(void *)&a1[v50] = *(char **)((char *)a2 + v50);
    uint64_t v51 = a3[8];
    *(void *)&a1[a3[7]] = *(char **)((char *)a2 + a3[7]);
    a1[v51] = *((unsigned char *)a2 + v51);
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

void type metadata accessor for (ClosedRange<Date>, Bool)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for (String, Bool, TimeZone?)()
{
  if (!lazy cache variable for type metadata for (String, Bool, TimeZone?))
  {
    type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(255, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (String, Bool, TimeZone?));
    }
  }
}

void type metadata accessor for (DateInterval, Double?, Bool)()
{
  if (!lazy cache variable for type metadata for (DateInterval, Double?, Bool))
  {
    type metadata accessor for DateInterval();
    type metadata accessor for [Color.Resolved](255, &lazy cache variable for type metadata for Double?, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB718]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (DateInterval, Double?, Bool));
    }
  }
}

uint64_t destroy for WidgetAuxiliaryViewMetadata.Text.Metadata(id *a1)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      break;
    case 1u:
      type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v7 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
        uint64_t v8 = (char *)a1 + *(int *)(v7 + 20);
        type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
        if (!swift_getEnumCaseMultiPayload())
        {
          uint64_t v9 = type metadata accessor for URL();
          (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of ContentTransition.Storage(*(uint64_t *)((char *)a1 + *(int *)(v7 + 48)), *(unsigned int *)((char *)a1 + *(int *)(v7 + 48) + 8) | ((unint64_t)*((unsigned __int8 *)a1+ *(int *)(v7 + 48)+ 12) << 32), *((unsigned char *)a1 + *(int *)(v7 + 48) + 13));
      }
      break;
    case 2u:
      uint64_t v2 = type metadata accessor for Date();
      goto LABEL_7;
    case 3u:
    case 5u:
      uint64_t v2 = type metadata accessor for DateInterval();
LABEL_7:
      (*(void (**)(id *, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
      break;
    case 4u:
      swift_bridgeObjectRelease();
      type metadata accessor for (String, Bool, TimeZone?)();
      uint64_t v4 = (char *)a1 + *(int *)(v3 + 64);
      uint64_t v5 = type metadata accessor for TimeZone();
      uint64_t v6 = *(void *)(v5 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
      }
      break;
    case 6u:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      break;
    default:
      break;
  }
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WidgetAuxiliaryViewMetadata.Text.Metadata(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v7 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v8 = v7;
      }
      else
      {
        uint64_t v29 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v29;
        long long v30 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
        uint64_t v31 = v30[5];
        uint64_t v32 = (void *)(a1 + v31);
        uint64_t v33 = (const void *)(a2 + v31);
        uint64_t v34 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
        swift_bridgeObjectRetain();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
        }
        else
        {
          uint64_t v35 = type metadata accessor for URL();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v35 - 8) + 16))(v32, v33, v35);
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v36 = v30[6];
        uint64_t v37 = a1 + v36;
        uint64_t v38 = a2 + v36;
        *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
        *(unsigned char *)(v37 + 4) = *(unsigned char *)(v38 + 4);
        *(unsigned char *)(a1 + v30[7]) = *(unsigned char *)(a2 + v30[7]);
        *(void *)(a1 + v30[8]) = *(void *)(a2 + v30[8]);
        uint64_t v39 = v30[9];
        uint64_t v40 = a1 + v39;
        uint64_t v41 = a2 + v39;
        *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
        *(unsigned char *)(v40 + 16) = *(unsigned char *)(v41 + 16);
        *(unsigned char *)(a1 + v30[10]) = *(unsigned char *)(a2 + v30[10]);
        *(void *)(a1 + v30[11]) = *(void *)(a2 + v30[11]);
        uint64_t v42 = v30[12];
        uint64_t v43 = a1 + v42;
        uint64_t v44 = a2 + v42;
        uint64_t v45 = *(void *)(a2 + v42);
        uint64_t v46 = *(unsigned __int8 *)(a2 + v42 + 12);
        uint64_t v51 = *(unsigned int *)(a2 + v42 + 8);
        char v47 = *(unsigned char *)(a2 + v42 + 13);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of ContentTransition.Storage(v45, v51 | (v46 << 32), v47);
        *(void *)uint64_t v43 = v45;
        *(unsigned char *)(v43 + 12) = v46;
        *(_DWORD *)(v43 + 8) = v51;
        *(unsigned char *)(v43 + 13) = v47;
        *(unsigned char *)(v43 + 14) = *(unsigned char *)(v44 + 14);
      }
      swift_storeEnumTagMultiPayload();
      break;
    case 2u:
      uint64_t v9 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      type metadata accessor for (ClosedRange<Date>, Bool)(0, &lazy cache variable for type metadata for (Date, Text.DateStyle), MEMORY[0x1E4F27928]);
      uint64_t v11 = *(int *)(v10 + 48);
      uint64_t v12 = a1 + v11;
      uint64_t v13 = a2 + v11;
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
      break;
    case 3u:
      uint64_t v14 = type metadata accessor for DateInterval();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
      break;
    case 4u:
      uint64_t v15 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v15;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      type metadata accessor for (String, Bool, TimeZone?)();
      uint64_t v17 = *(int *)(v16 + 64);
      __dst = (void *)(a1 + v17);
      uint64_t v18 = (const void *)(a2 + v17);
      uint64_t v19 = type metadata accessor for TimeZone();
      uint64_t v20 = *(void *)(v19 - 8);
      uint64_t v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
      swift_bridgeObjectRetain();
      if (v21(v18, 1, v19))
      {
        type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
        memcpy(__dst, v18, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(__dst, v18, v19);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
      }
      break;
    case 5u:
      uint64_t v23 = type metadata accessor for DateInterval();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(a1, a2, v23);
      type metadata accessor for (DateInterval, Double?, Bool)();
      uint64_t v25 = *(int *)(v24 + 48);
      uint64_t v26 = a1 + v25;
      uint64_t v27 = a2 + v25;
      *(void *)uint64_t v26 = *(void *)v27;
      *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
      *(unsigned char *)(a1 + *(int *)(v24 + 64)) = *(unsigned char *)(a2 + *(int *)(v24 + 64));
      break;
    case 6u:
      long long v28 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v28;
      (**(void (***)(uint64_t, uint64_t))(v28 - 8))(a1, a2);
      break;
    default:
      uint64_t v6 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v6;
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v48 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(void *)(a1 + v48) = *(void *)(a2 + v48);
  uint64_t v49 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v49) = *(unsigned char *)(a2 + v49);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WidgetAuxiliaryViewMetadata.Text.Metadata(uint64_t a1, uint64_t a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?(a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
    type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v6 = *(void **)a2;
          *(void *)a1 = *(void *)a2;
          id v7 = v6;
        }
        else
        {
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          uint64_t v29 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
          uint64_t v30 = v29[5];
          uint64_t v31 = (void *)(a1 + v30);
          uint64_t v32 = (const void *)(a2 + v30);
          uint64_t v33 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
          swift_bridgeObjectRetain();
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
          }
          else
          {
            uint64_t v34 = type metadata accessor for URL();
            (*(void (**)(void *, const void *, uint64_t))(*(void *)(v34 - 8) + 16))(v31, v32, v34);
            swift_storeEnumTagMultiPayload();
          }
          uint64_t v35 = v29[6];
          uint64_t v36 = a1 + v35;
          uint64_t v37 = (int *)(a2 + v35);
          int v38 = *v37;
          *(unsigned char *)(v36 + 4) = *((unsigned char *)v37 + 4);
          *(_DWORD *)uint64_t v36 = v38;
          *(unsigned char *)(a1 + v29[7]) = *(unsigned char *)(a2 + v29[7]);
          *(void *)(a1 + v29[8]) = *(void *)(a2 + v29[8]);
          uint64_t v39 = v29[9];
          uint64_t v40 = a1 + v39;
          uint64_t v41 = (long long *)(a2 + v39);
          long long v42 = *v41;
          *(unsigned char *)(v40 + 16) = *((unsigned char *)v41 + 16);
          *(_OWORD *)uint64_t v40 = v42;
          *(unsigned char *)(a1 + v29[10]) = *(unsigned char *)(a2 + v29[10]);
          *(void *)(a1 + v29[11]) = *(void *)(a2 + v29[11]);
          uint64_t v43 = v29[12];
          uint64_t v44 = a1 + v43;
          uint64_t v45 = a2 + v43;
          uint64_t v46 = *(void *)(a2 + v43);
          uint64_t v47 = *(unsigned __int8 *)(a2 + v43 + 12);
          uint64_t v53 = *(unsigned int *)(a2 + v43 + 8);
          char v48 = *(unsigned char *)(a2 + v43 + 13);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of ContentTransition.Storage(v46, v53 | (v47 << 32), v48);
          *(void *)uint64_t v44 = v46;
          *(unsigned char *)(v44 + 12) = v47;
          *(_DWORD *)(v44 + 8) = v53;
          *(unsigned char *)(v44 + 13) = v48;
          *(unsigned char *)(v44 + 14) = *(unsigned char *)(v45 + 14);
        }
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v8 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        type metadata accessor for (ClosedRange<Date>, Bool)(0, &lazy cache variable for type metadata for (Date, Text.DateStyle), MEMORY[0x1E4F27928]);
        uint64_t v10 = *(int *)(v9 + 48);
        uint64_t v11 = a1 + v10;
        uint64_t v12 = a2 + v10;
        char v13 = *(unsigned char *)(v12 + 16);
        *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
        *(unsigned char *)(v11 + 16) = v13;
        break;
      case 3u:
        uint64_t v14 = type metadata accessor for DateInterval();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
        break;
      case 4u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        type metadata accessor for (String, Bool, TimeZone?)();
        uint64_t v16 = *(int *)(v15 + 64);
        __dst = (void *)(a1 + v16);
        uint64_t v17 = (const void *)(a2 + v16);
        uint64_t v18 = type metadata accessor for TimeZone();
        uint64_t v19 = *(void *)(v18 - 8);
        uint64_t v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
        swift_bridgeObjectRetain();
        if (v20(v17, 1, v18))
        {
          type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
          memcpy(__dst, v17, *(void *)(*(void *)(v21 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(__dst, v17, v18);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
        }
        break;
      case 5u:
        uint64_t v22 = type metadata accessor for DateInterval();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(a1, a2, v22);
        type metadata accessor for (DateInterval, Double?, Bool)();
        uint64_t v24 = *(int *)(v23 + 48);
        uint64_t v25 = a1 + v24;
        uint64_t v26 = a2 + v24;
        char v27 = *(unsigned char *)(v26 + 8);
        *(void *)uint64_t v25 = *(void *)v26;
        *(unsigned char *)(v25 + 8) = v27;
        *(unsigned char *)(a1 + *(int *)(v23 + 64)) = *(unsigned char *)(a2 + *(int *)(v23 + 64));
        break;
      case 6u:
        uint64_t v28 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v28;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v28 - 8))(a1, a2);
        break;
      default:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v49 = a3[5];
  uint64_t v50 = (void *)(a1 + v49);
  uint64_t v51 = (void *)(a2 + v49);
  *uint64_t v50 = *v51;
  v50[1] = v51[1];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

unsigned char *initializeWithTake for WidgetAuxiliaryViewMetadata.Text.Metadata(unsigned char *a1, unsigned char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v7 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v26 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
        uint64_t v27 = v26[5];
        uint64_t v28 = &a1[v27];
        uint64_t v29 = &a2[v27];
        uint64_t v30 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
        }
        else
        {
          uint64_t v31 = type metadata accessor for URL();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v31 - 8) + 32))(v28, v29, v31);
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v32 = v26[6];
        uint64_t v33 = &a1[v32];
        uint64_t v34 = &a2[v32];
        *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
        v33[4] = v34[4];
        a1[v26[7]] = a2[v26[7]];
        *(void *)&a1[v26[8]] = *(void *)&a2[v26[8]];
        uint64_t v35 = v26[9];
        uint64_t v36 = &a1[v35];
        uint64_t v37 = &a2[v35];
        *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
        char v36[16] = v37[16];
        a1[v26[10]] = a2[v26[10]];
        *(void *)&a1[v26[11]] = *(void *)&a2[v26[11]];
        uint64_t v38 = v26[12];
        uint64_t v39 = &a1[v38];
        uint64_t v40 = &a2[v38];
        *uint64_t v39 = *v40;
        *(void *)((char *)v39 + 7) = *(void *)((char *)v40 + 7);
        swift_storeEnumTagMultiPayload();
      }
      goto LABEL_16;
    case 2u:
      uint64_t v8 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      type metadata accessor for (ClosedRange<Date>, Bool)(0, &lazy cache variable for type metadata for (Date, Text.DateStyle), MEMORY[0x1E4F27928]);
      uint64_t v10 = *(int *)(v9 + 48);
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      v11[16] = v12[16];
      goto LABEL_16;
    case 3u:
      uint64_t v13 = type metadata accessor for DateInterval();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
      goto LABEL_16;
    case 4u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      type metadata accessor for (String, Bool, TimeZone?)();
      uint64_t v15 = *(int *)(v14 + 64);
      uint64_t v16 = &a1[v15];
      uint64_t v17 = &a2[v15];
      uint64_t v18 = type metadata accessor for TimeZone();
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v19 + 32))(v16, v17, v18);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      goto LABEL_16;
    case 5u:
      uint64_t v21 = type metadata accessor for DateInterval();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v21 - 8) + 32))(a1, a2, v21);
      type metadata accessor for (DateInterval, Double?, Bool)();
      uint64_t v23 = *(int *)(v22 + 48);
      uint64_t v24 = &a1[v23];
      uint64_t v25 = &a2[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v25[8];
      a1[*(int *)(v22 + 64)] = a2[*(int *)(v22 + 64)];
LABEL_16:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      break;
  }
  uint64_t v41 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(void *)&a1[v41] = *(void *)&a2[v41];
  uint64_t v42 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  a1[v42] = a2[v42];
  return a1;
}

unsigned char *assignWithTake for WidgetAuxiliaryViewMetadata.Text.Metadata(unsigned char *a1, unsigned char *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
    uint64_t v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v7 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        }
        else
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
          uint64_t v26 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
          uint64_t v27 = v26[5];
          uint64_t v28 = &a1[v27];
          uint64_t v29 = &a2[v27];
          uint64_t v30 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
          }
          else
          {
            uint64_t v31 = type metadata accessor for URL();
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v31 - 8) + 32))(v28, v29, v31);
            swift_storeEnumTagMultiPayload();
          }
          uint64_t v32 = v26[6];
          uint64_t v33 = &a1[v32];
          uint64_t v34 = &a2[v32];
          *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
          v33[4] = v34[4];
          a1[v26[7]] = a2[v26[7]];
          *(void *)&a1[v26[8]] = *(void *)&a2[v26[8]];
          uint64_t v35 = v26[9];
          uint64_t v36 = &a1[v35];
          uint64_t v37 = &a2[v35];
          *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
          char v36[16] = v37[16];
          a1[v26[10]] = a2[v26[10]];
          *(void *)&a1[v26[11]] = *(void *)&a2[v26[11]];
          uint64_t v38 = v26[12];
          uint64_t v39 = &a1[v38];
          uint64_t v40 = &a2[v38];
          *uint64_t v39 = *v40;
          *(void *)((char *)v39 + 7) = *(void *)((char *)v40 + 7);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_17;
      case 2u:
        uint64_t v8 = type metadata accessor for Date();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        type metadata accessor for (ClosedRange<Date>, Bool)(0, &lazy cache variable for type metadata for (Date, Text.DateStyle), MEMORY[0x1E4F27928]);
        uint64_t v10 = *(int *)(v9 + 48);
        uint64_t v11 = &a1[v10];
        uint64_t v12 = &a2[v10];
        *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
        v11[16] = v12[16];
        goto LABEL_17;
      case 3u:
        uint64_t v13 = type metadata accessor for DateInterval();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
        goto LABEL_17;
      case 4u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[16] = a2[16];
        type metadata accessor for (String, Bool, TimeZone?)();
        uint64_t v15 = *(int *)(v14 + 64);
        uint64_t v16 = &a1[v15];
        uint64_t v17 = &a2[v15];
        uint64_t v18 = type metadata accessor for TimeZone();
        uint64_t v19 = *(void *)(v18 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
        {
          type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
          memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v19 + 32))(v16, v17, v18);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
        }
        goto LABEL_17;
      case 5u:
        uint64_t v21 = type metadata accessor for DateInterval();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v21 - 8) + 32))(a1, a2, v21);
        type metadata accessor for (DateInterval, Double?, Bool)();
        uint64_t v23 = *(int *)(v22 + 48);
        uint64_t v24 = &a1[v23];
        uint64_t v25 = &a2[v23];
        *(void *)uint64_t v24 = *(void *)v25;
        v24[8] = v25[8];
        a1[*(int *)(v22 + 64)] = a2[*(int *)(v22 + 64)];
LABEL_17:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
  }
  uint64_t v41 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(void *)&a1[v41] = *(void *)&a2[v41];
  swift_release();
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_bridgeObjectRelease();
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Text.Metadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187E99C74);
}

uint64_t sub_187E99C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Text.Metadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187E99D54);
}

uint64_t sub_187E99D54(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = a2;
  }
  return result;
}

uint64_t type metadata completion function for WidgetAuxiliaryViewMetadata.Text.Metadata()
{
  uint64_t result = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *(void *)a1 = *a2;
    a1 = &v7[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v8 = *a2;
          *(void *)a1 = *a2;
          uint64_t v9 = v8;
        }
        else
        {
          uint64_t v31 = a2[1];
          *(void *)a1 = *a2;
          *((void *)a1 + 1) = v31;
          uint64_t v32 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
          uint64_t v33 = v32[5];
          uint64_t v34 = &a1[v33];
          uint64_t v35 = (char *)a2 + v33;
          uint64_t v36 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
          swift_bridgeObjectRetain();
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
          }
          else
          {
            uint64_t v37 = type metadata accessor for URL();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v34, v35, v37);
            swift_storeEnumTagMultiPayload();
          }
          uint64_t v38 = v32[6];
          uint64_t v39 = &a1[v38];
          uint64_t v40 = (uint64_t)a2 + v38;
          *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
          v39[4] = *(unsigned char *)(v40 + 4);
          a1[v32[7]] = *((unsigned char *)a2 + v32[7]);
          *(void *)&a1[v32[8]] = *(char **)((char *)a2 + v32[8]);
          uint64_t v41 = v32[9];
          uint64_t v42 = &a1[v41];
          uint64_t v43 = (uint64_t)a2 + v41;
          *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
          v42[16] = *(unsigned char *)(v43 + 16);
          a1[v32[10]] = *((unsigned char *)a2 + v32[10]);
          *(void *)&a1[v32[11]] = *(char **)((char *)a2 + v32[11]);
          uint64_t v44 = v32[12];
          uint64_t v45 = &a1[v44];
          uint64_t v46 = (uint64_t)a2 + v44;
          uint64_t v47 = *(uint64_t *)((char *)a2 + v44);
          uint64_t v48 = *(unsigned __int8 *)(v46 + 12);
          uint64_t v49 = *(unsigned int *)(v46 + 8);
          char v50 = *(unsigned char *)(v46 + 13);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of ContentTransition.Storage(v47, v49 | (v48 << 32), v50);
          *(void *)uint64_t v45 = v47;
          v45[12] = v48;
          *((_DWORD *)v45 + 2) = v49;
          v45[13] = v50;
          v45[14] = *(unsigned char *)(v46 + 14);
        }
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v10 = type metadata accessor for Date();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        type metadata accessor for (ClosedRange<Date>, Bool)(0, &lazy cache variable for type metadata for (Date, Text.DateStyle), MEMORY[0x1E4F27928]);
        uint64_t v12 = *(int *)(v11 + 48);
        uint64_t v13 = &a1[v12];
        uint64_t v14 = (uint64_t)a2 + v12;
        *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
        v13[16] = *(unsigned char *)(v14 + 16);
        break;
      case 3u:
        uint64_t v15 = type metadata accessor for DateInterval();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
        break;
      case 4u:
        uint64_t v16 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v16;
        a1[16] = *((unsigned char *)a2 + 16);
        type metadata accessor for (String, Bool, TimeZone?)();
        uint64_t v18 = *(int *)(v17 + 64);
        uint64_t v19 = &a1[v18];
        uint64_t v20 = (char *)a2 + v18;
        uint64_t v21 = type metadata accessor for TimeZone();
        uint64_t v22 = *(void *)(v21 - 8);
        uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
        swift_bridgeObjectRetain();
        if (v23(v20, 1, v21))
        {
          type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
          memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
        }
        break;
      case 5u:
        uint64_t v25 = type metadata accessor for DateInterval();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v25 - 8) + 16))(a1, a2, v25);
        type metadata accessor for (DateInterval, Double?, Bool)();
        uint64_t v27 = *(int *)(v26 + 48);
        uint64_t v28 = &a1[v27];
        uint64_t v29 = (uint64_t)a2 + v27;
        *(void *)uint64_t v28 = *(void *)v29;
        v28[8] = *(unsigned char *)(v29 + 8);
        a1[*(int *)(v26 + 64)] = *((unsigned char *)a2 + *(int *)(v26 + 64));
        break;
      case 6u:
        long long v30 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 24) = v30;
        (**(void (***)(char *, char **))(v30 - 8))(a1, a2);
        break;
      default:
        uint64_t v6 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v6;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(void **a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      return;
    case 1u:
      type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v3 = *a1;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
        uint64_t v11 = (char *)a1 + *(int *)(v10 + 20);
        type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
        if (!swift_getEnumCaseMultiPayload())
        {
          uint64_t v12 = type metadata accessor for URL();
          (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v13 = (char *)a1 + *(int *)(v10 + 48);
        uint64_t v14 = *(void *)v13;
        unint64_t v15 = *((unsigned int *)v13 + 2) | ((unint64_t)v13[12] << 32);
        char v16 = v13[13];
        outlined consume of ContentTransition.Storage(v14, v15, v16);
      }
      return;
    case 2u:
      uint64_t v2 = type metadata accessor for Date();
      goto LABEL_11;
    case 3u:
    case 5u:
      uint64_t v2 = type metadata accessor for DateInterval();
LABEL_11:
      uint64_t v4 = *(void (**)(void **, uint64_t))(*(void *)(v2 - 8) + 8);
      uint64_t v5 = v2;
      uint64_t v6 = a1;
      goto LABEL_12;
    case 4u:
      swift_bridgeObjectRelease();
      type metadata accessor for (String, Bool, TimeZone?)();
      uint64_t v8 = (void **)((char *)a1 + *(int *)(v7 + 64));
      uint64_t v9 = type metadata accessor for TimeZone();
      uint64_t v17 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v17 + 48))(v8, 1, v9)) {
        return;
      }
      uint64_t v4 = *(void (**)(void **, uint64_t))(v17 + 8);
      uint64_t v6 = v8;
      uint64_t v5 = v9;
LABEL_12:
      v4(v6, v5);
      return;
    case 6u:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      return;
    default:
      return;
  }
}

uint64_t initializeWithCopy for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v5 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v6 = v5;
      }
      else
      {
        uint64_t v28 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v28;
        uint64_t v29 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
        uint64_t v30 = v29[5];
        uint64_t v31 = (void *)(a1 + v30);
        uint64_t v32 = (const void *)(a2 + v30);
        uint64_t v33 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
        swift_bridgeObjectRetain();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
        }
        else
        {
          uint64_t v34 = type metadata accessor for URL();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v34 - 8) + 16))(v31, v32, v34);
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v35 = v29[6];
        uint64_t v36 = a1 + v35;
        uint64_t v37 = a2 + v35;
        *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
        *(unsigned char *)(v36 + 4) = *(unsigned char *)(v37 + 4);
        *(unsigned char *)(a1 + v29[7]) = *(unsigned char *)(a2 + v29[7]);
        *(void *)(a1 + v29[8]) = *(void *)(a2 + v29[8]);
        uint64_t v38 = v29[9];
        uint64_t v39 = a1 + v38;
        uint64_t v40 = a2 + v38;
        *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
        *(unsigned char *)(v39 + 16) = *(unsigned char *)(v40 + 16);
        *(unsigned char *)(a1 + v29[10]) = *(unsigned char *)(a2 + v29[10]);
        *(void *)(a1 + v29[11]) = *(void *)(a2 + v29[11]);
        uint64_t v41 = v29[12];
        uint64_t v42 = a1 + v41;
        uint64_t v43 = a2 + v41;
        uint64_t v44 = *(void *)(a2 + v41);
        uint64_t v45 = *(unsigned __int8 *)(v43 + 12);
        uint64_t v46 = *(unsigned int *)(v43 + 8);
        char v47 = *(unsigned char *)(v43 + 13);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of ContentTransition.Storage(v44, v46 | (v45 << 32), v47);
        *(void *)uint64_t v42 = v44;
        *(unsigned char *)(v42 + 12) = v45;
        *(_DWORD *)(v42 + 8) = v46;
        *(unsigned char *)(v42 + 13) = v47;
        *(unsigned char *)(v42 + 14) = *(unsigned char *)(v43 + 14);
      }
      swift_storeEnumTagMultiPayload();
      break;
    case 2u:
      uint64_t v7 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      type metadata accessor for (ClosedRange<Date>, Bool)(0, &lazy cache variable for type metadata for (Date, Text.DateStyle), MEMORY[0x1E4F27928]);
      uint64_t v9 = *(int *)(v8 + 48);
      uint64_t v10 = a1 + v9;
      uint64_t v11 = a2 + v9;
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
      *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
      break;
    case 3u:
      uint64_t v12 = type metadata accessor for DateInterval();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
      break;
    case 4u:
      uint64_t v13 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v13;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      type metadata accessor for (String, Bool, TimeZone?)();
      uint64_t v15 = *(int *)(v14 + 64);
      char v16 = (void *)(a1 + v15);
      uint64_t v17 = (const void *)(a2 + v15);
      uint64_t v18 = type metadata accessor for TimeZone();
      uint64_t v19 = *(void *)(v18 - 8);
      uint64_t v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
      swift_bridgeObjectRetain();
      if (v20(v17, 1, v18))
      {
        type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
        memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v16, v17, v18);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      break;
    case 5u:
      uint64_t v22 = type metadata accessor for DateInterval();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(a1, a2, v22);
      type metadata accessor for (DateInterval, Double?, Bool)();
      uint64_t v24 = *(int *)(v23 + 48);
      uint64_t v25 = a1 + v24;
      uint64_t v26 = a2 + v24;
      *(void *)uint64_t v25 = *(void *)v26;
      *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
      *(unsigned char *)(a1 + *(int *)(v23 + 64)) = *(unsigned char *)(a2 + *(int *)(v23 + 64));
      break;
    case 6u:
      long long v27 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v27;
      (**(void (***)(uint64_t, uint64_t))(v27 - 8))(a1, a2);
      break;
    default:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?(a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v4 = *(void **)a2;
          *(void *)a1 = *(void *)a2;
          id v5 = v4;
        }
        else
        {
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          uint64_t v28 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
          uint64_t v29 = v28[5];
          uint64_t v30 = (void *)(a1 + v29);
          uint64_t v31 = (const void *)(a2 + v29);
          uint64_t v32 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
          swift_bridgeObjectRetain();
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
          }
          else
          {
            uint64_t v33 = type metadata accessor for URL();
            (*(void (**)(void *, const void *, uint64_t))(*(void *)(v33 - 8) + 16))(v30, v31, v33);
            swift_storeEnumTagMultiPayload();
          }
          uint64_t v34 = v28[6];
          uint64_t v35 = a1 + v34;
          uint64_t v36 = (int *)(a2 + v34);
          int v37 = *v36;
          *(unsigned char *)(v35 + 4) = *((unsigned char *)v36 + 4);
          *(_DWORD *)uint64_t v35 = v37;
          *(unsigned char *)(a1 + v28[7]) = *(unsigned char *)(a2 + v28[7]);
          *(void *)(a1 + v28[8]) = *(void *)(a2 + v28[8]);
          uint64_t v38 = v28[9];
          uint64_t v39 = a1 + v38;
          uint64_t v40 = (long long *)(a2 + v38);
          long long v41 = *v40;
          *(unsigned char *)(v39 + 16) = *((unsigned char *)v40 + 16);
          *(_OWORD *)uint64_t v39 = v41;
          *(unsigned char *)(a1 + v28[10]) = *(unsigned char *)(a2 + v28[10]);
          *(void *)(a1 + v28[11]) = *(void *)(a2 + v28[11]);
          uint64_t v42 = v28[12];
          uint64_t v43 = a1 + v42;
          uint64_t v44 = a2 + v42;
          uint64_t v45 = *(void *)(a2 + v42);
          uint64_t v46 = *(unsigned __int8 *)(v44 + 12);
          uint64_t v47 = *(unsigned int *)(v44 + 8);
          char v48 = *(unsigned char *)(v44 + 13);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of ContentTransition.Storage(v45, v47 | (v46 << 32), v48);
          *(void *)uint64_t v43 = v45;
          *(unsigned char *)(v43 + 12) = v46;
          *(_DWORD *)(v43 + 8) = v47;
          *(unsigned char *)(v43 + 13) = v48;
          *(unsigned char *)(v43 + 14) = *(unsigned char *)(v44 + 14);
        }
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v6 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        type metadata accessor for (ClosedRange<Date>, Bool)(0, &lazy cache variable for type metadata for (Date, Text.DateStyle), MEMORY[0x1E4F27928]);
        uint64_t v8 = *(int *)(v7 + 48);
        uint64_t v9 = a1 + v8;
        uint64_t v10 = a2 + v8;
        char v11 = *(unsigned char *)(v10 + 16);
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        *(unsigned char *)(v9 + 16) = v11;
        break;
      case 3u:
        uint64_t v12 = type metadata accessor for DateInterval();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        break;
      case 4u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        type metadata accessor for (String, Bool, TimeZone?)();
        uint64_t v14 = *(int *)(v13 + 64);
        uint64_t v15 = (void *)(a1 + v14);
        char v16 = (const void *)(a2 + v14);
        uint64_t v17 = type metadata accessor for TimeZone();
        uint64_t v18 = *(void *)(v17 - 8);
        uint64_t v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
        swift_bridgeObjectRetain();
        if (v19(v16, 1, v17))
        {
          type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
          memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(v15, v16, v17);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
        }
        break;
      case 5u:
        uint64_t v21 = type metadata accessor for DateInterval();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(a1, a2, v21);
        type metadata accessor for (DateInterval, Double?, Bool)();
        uint64_t v23 = *(int *)(v22 + 48);
        uint64_t v24 = a1 + v23;
        uint64_t v25 = a2 + v23;
        char v26 = *(unsigned char *)(v25 + 8);
        *(void *)uint64_t v24 = *(void *)v25;
        *(unsigned char *)(v24 + 8) = v26;
        *(unsigned char *)(a1 + *(int *)(v22 + 64)) = *(unsigned char *)(a2 + *(int *)(v22 + 64));
        break;
      case 6u:
        uint64_t v27 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v27;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v27 - 8))(a1, a2);
        break;
      default:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

unsigned char *initializeWithTake for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v25 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
        uint64_t v26 = v25[5];
        uint64_t v27 = &a1[v26];
        uint64_t v28 = &a2[v26];
        uint64_t v29 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          uint64_t v30 = type metadata accessor for URL();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v30 - 8) + 32))(v27, v28, v30);
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v31 = v25[6];
        uint64_t v32 = &a1[v31];
        uint64_t v33 = &a2[v31];
        *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
        v32[4] = v33[4];
        a1[v25[7]] = a2[v25[7]];
        *(void *)&a1[v25[8]] = *(void *)&a2[v25[8]];
        uint64_t v34 = v25[9];
        uint64_t v35 = &a1[v34];
        uint64_t v36 = &a2[v34];
        *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
        v35[16] = v36[16];
        a1[v25[10]] = a2[v25[10]];
        *(void *)&a1[v25[11]] = *(void *)&a2[v25[11]];
        uint64_t v37 = v25[12];
        uint64_t v38 = &a1[v37];
        uint64_t v39 = &a2[v37];
        void *v38 = *v39;
        *(void *)((char *)v38 + 7) = *(void *)((char *)v39 + 7);
        swift_storeEnumTagMultiPayload();
      }
      goto LABEL_16;
    case 2u:
      uint64_t v7 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      type metadata accessor for (ClosedRange<Date>, Bool)(0, &lazy cache variable for type metadata for (Date, Text.DateStyle), MEMORY[0x1E4F27928]);
      uint64_t v9 = *(int *)(v8 + 48);
      uint64_t v10 = &a1[v9];
      char v11 = &a2[v9];
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
      v10[16] = v11[16];
      goto LABEL_16;
    case 3u:
      uint64_t v12 = type metadata accessor for DateInterval();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
      goto LABEL_16;
    case 4u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      type metadata accessor for (String, Bool, TimeZone?)();
      uint64_t v14 = *(int *)(v13 + 64);
      uint64_t v15 = &a1[v14];
      char v16 = &a2[v14];
      uint64_t v17 = type metadata accessor for TimeZone();
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
        memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v18 + 32))(v15, v16, v17);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      goto LABEL_16;
    case 5u:
      uint64_t v20 = type metadata accessor for DateInterval();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v20 - 8) + 32))(a1, a2, v20);
      type metadata accessor for (DateInterval, Double?, Bool)();
      uint64_t v22 = *(int *)(v21 + 48);
      uint64_t v23 = &a1[v22];
      uint64_t v24 = &a2[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      a1[*(int *)(v21 + 64)] = a2[*(int *)(v21 + 64)];
LABEL_16:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

unsigned char *assignWithTake for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        }
        else
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
          uint64_t v25 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
          uint64_t v26 = v25[5];
          uint64_t v27 = &a1[v26];
          uint64_t v28 = &a2[v26];
          uint64_t v29 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
          }
          else
          {
            uint64_t v30 = type metadata accessor for URL();
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v30 - 8) + 32))(v27, v28, v30);
            swift_storeEnumTagMultiPayload();
          }
          uint64_t v31 = v25[6];
          uint64_t v32 = &a1[v31];
          uint64_t v33 = &a2[v31];
          *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
          v32[4] = v33[4];
          a1[v25[7]] = a2[v25[7]];
          *(void *)&a1[v25[8]] = *(void *)&a2[v25[8]];
          uint64_t v34 = v25[9];
          uint64_t v35 = &a1[v34];
          uint64_t v36 = &a2[v34];
          *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
          v35[16] = v36[16];
          a1[v25[10]] = a2[v25[10]];
          *(void *)&a1[v25[11]] = *(void *)&a2[v25[11]];
          uint64_t v37 = v25[12];
          uint64_t v38 = &a1[v37];
          uint64_t v39 = &a2[v37];
          void *v38 = *v39;
          *(void *)((char *)v38 + 7) = *(void *)((char *)v39 + 7);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_17;
      case 2u:
        uint64_t v7 = type metadata accessor for Date();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        type metadata accessor for (ClosedRange<Date>, Bool)(0, &lazy cache variable for type metadata for (Date, Text.DateStyle), MEMORY[0x1E4F27928]);
        uint64_t v9 = *(int *)(v8 + 48);
        uint64_t v10 = &a1[v9];
        char v11 = &a2[v9];
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
        v10[16] = v11[16];
        goto LABEL_17;
      case 3u:
        uint64_t v12 = type metadata accessor for DateInterval();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
        goto LABEL_17;
      case 4u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[16] = a2[16];
        type metadata accessor for (String, Bool, TimeZone?)();
        uint64_t v14 = *(int *)(v13 + 64);
        uint64_t v15 = &a1[v14];
        char v16 = &a2[v14];
        uint64_t v17 = type metadata accessor for TimeZone();
        uint64_t v18 = *(void *)(v17 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
        {
          type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
          memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v18 + 32))(v15, v16, v17);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
        }
        goto LABEL_17;
      case 5u:
        uint64_t v20 = type metadata accessor for DateInterval();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v20 - 8) + 32))(a1, a2, v20);
        type metadata accessor for (DateInterval, Double?, Bool)();
        uint64_t v22 = *(int *)(v21 + 48);
        uint64_t v23 = &a1[v22];
        uint64_t v24 = &a2[v22];
        *(void *)uint64_t v23 = *(void *)v24;
        v23[8] = v24[8];
        a1[*(int *)(v21 + 64)] = a2[*(int *)(v21 + 64)];
LABEL_17:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void type metadata completion function for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind()
{
  uint64_t v9 = &unk_1883AAF90;
  uint64_t v0 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(319);
  if (v1 <= 0x3F)
  {
    uint64_t v10 = *(void *)(v0 - 8) + 64;
    type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      char v11 = &v8;
      uint64_t v3 = type metadata accessor for DateInterval();
      if (v4 <= 0x3F)
      {
        uint64_t v12 = *(void *)(v3 - 8) + 64;
        type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(319, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
        if (v5 <= 0x3F)
        {
          swift_getTupleTypeLayout3();
          uint64_t v13 = &v7;
          swift_getTupleTypeLayout3();
          uint64_t v14 = &v6;
          uint64_t v15 = &unk_1883AAFF0;
          swift_initEnumMetadataMultiPayload();
        }
      }
    }
  }
}

char *initializeBufferWithCopyOfBuffer for WidgetAuxiliaryViewMetadata.Graphic(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    char v8 = *a2;
    *(void *)a1 = *a2;
    a1 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      char v6 = *a2;
      *(void *)a1 = *a2;
      char v7 = v6;
    }
    else
    {
      uint64_t v9 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v9;
      uint64_t v10 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
      uint64_t v11 = v10[5];
      uint64_t v12 = &a1[v11];
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
      swift_bridgeObjectRetain();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        uint64_t v15 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v12, v13, v15);
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v16 = v10[6];
      uint64_t v17 = &a1[v16];
      uint64_t v18 = (char *)a2 + v16;
      *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
      v17[4] = v18[4];
      a1[v10[7]] = *((unsigned char *)a2 + v10[7]);
      *(void *)&a1[v10[8]] = *(char **)((char *)a2 + v10[8]);
      uint64_t v19 = v10[9];
      uint64_t v20 = &a1[v19];
      uint64_t v21 = (char *)a2 + v19;
      *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
      v20[16] = v21[16];
      a1[v10[10]] = *((unsigned char *)a2 + v10[10]);
      *(void *)&a1[v10[11]] = *(char **)((char *)a2 + v10[11]);
      uint64_t v22 = v10[12];
      uint64_t v23 = &a1[v22];
      uint64_t v24 = (char *)a2 + v22;
      uint64_t v25 = *(uint64_t *)((char *)a2 + v22);
      uint64_t v26 = v24[12];
      uint64_t v27 = *((unsigned int *)v24 + 2);
      char v28 = v24[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of ContentTransition.Storage(v25, v27 | (v26 << 32), v28);
      *(void *)uint64_t v23 = v25;
      v23[12] = v26;
      *((_DWORD *)v23 + 2) = v27;
      v23[13] = v28;
      v23[14] = v24[14];
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for WidgetAuxiliaryViewMetadata.Graphic(void **a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    unint64_t v2 = *a1;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
    unint64_t v4 = (char *)a1 + *(int *)(v3 + 20);
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    if (!swift_getEnumCaseMultiPayload())
    {
      uint64_t v5 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v6 = (char *)a1 + *(int *)(v3 + 48);
    uint64_t v7 = *(void *)v6;
    unint64_t v8 = *((unsigned int *)v6 + 2) | ((unint64_t)v6[12] << 32);
    char v9 = v6[13];
    outlined consume of ContentTransition.Storage(v7, v8, v9);
  }
}

void *initializeWithCopy for WidgetAuxiliaryViewMetadata.Graphic(void *a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    unint64_t v4 = *(void **)a2;
    *a1 = *(void *)a2;
    id v5 = v4;
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *a1 = *(void *)a2;
    a1[1] = v6;
    uint64_t v7 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
    uint64_t v8 = v7[5];
    char v9 = (char *)a1 + v8;
    uint64_t v10 = (const void *)(a2 + v8);
    uint64_t v11 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      uint64_t v12 = type metadata accessor for URL();
      (*(void (**)(char *, const void *, uint64_t))(*(void *)(v12 - 8) + 16))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v13 = v7[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = a2 + v13;
    *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
    void v14[4] = *(unsigned char *)(v15 + 4);
    *((unsigned char *)a1 + v7[7]) = *(unsigned char *)(a2 + v7[7]);
    *(void *)((char *)a1 + v7[8]) = *(void *)(a2 + v7[8]);
    uint64_t v16 = v7[9];
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = a2 + v16;
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    v17[16] = *(unsigned char *)(v18 + 16);
    *((unsigned char *)a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
    *(void *)((char *)a1 + v7[11]) = *(void *)(a2 + v7[11]);
    uint64_t v19 = v7[12];
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = a2 + v19;
    uint64_t v22 = *(void *)(a2 + v19);
    uint64_t v23 = *(unsigned __int8 *)(v21 + 12);
    uint64_t v24 = *(unsigned int *)(v21 + 8);
    char v25 = *(unsigned char *)(v21 + 13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of ContentTransition.Storage(v22, v24 | (v23 << 32), v25);
    *(void *)uint64_t v20 = v22;
    v20[12] = v23;
    *((_DWORD *)v20 + 2) = v24;
    v20[13] = v25;
    v20[14] = *(unsigned char *)(v21 + 14);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for WidgetAuxiliaryViewMetadata.Graphic(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      unint64_t v4 = (void *)*a2;
      *a1 = *a2;
      id v5 = v4;
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v6 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
      uint64_t v7 = v6[5];
      uint64_t v8 = (char *)a1 + v7;
      char v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
      swift_bridgeObjectRetain();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        uint64_t v11 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v8, v9, v11);
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v12 = v6[6];
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      int v15 = *(_DWORD *)v14;
      v13[4] = v14[4];
      *(_DWORD *)uint64_t v13 = v15;
      *((unsigned char *)a1 + v6[7]) = *((unsigned char *)a2 + v6[7]);
      *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
      uint64_t v16 = v6[9];
      uint64_t v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      long long v19 = *(_OWORD *)v18;
      v17[16] = v18[16];
      *(_OWORD *)uint64_t v17 = v19;
      *((unsigned char *)a1 + v6[10]) = *((unsigned char *)a2 + v6[10]);
      *(void *)((char *)a1 + v6[11]) = *(void *)((char *)a2 + v6[11]);
      uint64_t v20 = v6[12];
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      uint64_t v23 = *(void *)((char *)a2 + v20);
      uint64_t v24 = v22[12];
      uint64_t v25 = *((unsigned int *)v22 + 2);
      char v26 = v22[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of ContentTransition.Storage(v23, v25 | (v24 << 32), v26);
      *(void *)uint64_t v21 = v23;
      v21[12] = v24;
      *((_DWORD *)v21 + 2) = v25;
      v21[13] = v26;
      v21[14] = v22[14];
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for WidgetAuxiliaryViewMetadata.Graphic(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v6 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
    uint64_t v7 = v6[5];
    uint64_t v8 = (char *)a1 + v7;
    char v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v12 = v6[6];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
    v13[4] = v14[4];
    *((unsigned char *)a1 + v6[7]) = *((unsigned char *)a2 + v6[7]);
    *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
    uint64_t v15 = v6[9];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    v16[16] = v17[16];
    *((unsigned char *)a1 + v6[10]) = *((unsigned char *)a2 + v6[10]);
    *(void *)((char *)a1 + v6[11]) = *(void *)((char *)a2 + v6[11]);
    uint64_t v18 = v6[12];
    long long v19 = (void *)((char *)a1 + v18);
    uint64_t v20 = (void *)((char *)a2 + v18);
    void *v19 = *v20;
    *(void *)((char *)v19 + 7) = *(void *)((char *)v20 + 7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *assignWithTake for WidgetAuxiliaryViewMetadata.Graphic(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      uint64_t v6 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
      uint64_t v7 = v6[5];
      uint64_t v8 = (char *)a1 + v7;
      char v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        uint64_t v11 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v12 = v6[6];
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
      v13[4] = v14[4];
      *((unsigned char *)a1 + v6[7]) = *((unsigned char *)a2 + v6[7]);
      *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
      uint64_t v15 = v6[9];
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      v16[16] = v17[16];
      *((unsigned char *)a1 + v6[10]) = *((unsigned char *)a2 + v6[10]);
      *(void *)((char *)a1 + v6[11]) = *(void *)((char *)a2 + v6[11]);
      uint64_t v18 = v6[12];
      long long v19 = (void *)((char *)a1 + v18);
      uint64_t v20 = (void *)((char *)a2 + v18);
      void *v19 = *v20;
      *(void *)((char *)v19 + 7) = *(void *)((char *)v20 + 7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for WidgetAuxiliaryViewMetadata.Graphic(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for WidgetAuxiliaryViewMetadata.Graphic(a1, a2, a3, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
}

void *initializeBufferWithCopyOfBuffer for WidgetAuxiliaryViewMetadata.Graphic.Named(void *a1, void *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    char v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      uint64_t v13 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v9, v10, v13);
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = (char *)v4 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    *((unsigned char *)v4 + v15) = *((unsigned char *)a2 + v15);
    uint64_t v18 = a3[9];
    *(void *)((char *)v4 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    long long v19 = (char *)v4 + v18;
    uint64_t v20 = (char *)a2 + v18;
    *(_OWORD *)long long v19 = *(_OWORD *)v20;
    v19[16] = v20[16];
    uint64_t v21 = a3[11];
    *((unsigned char *)v4 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    *(void *)((char *)v4 + v21) = *(void *)((char *)a2 + v21);
    uint64_t v22 = a3[12];
    uint64_t v23 = (char *)v4 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = *(void *)((char *)a2 + v22);
    uint64_t v26 = v24[12];
    uint64_t v27 = *((unsigned int *)v24 + 2);
    char v28 = v24[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of ContentTransition.Storage(v25, v27 | (v26 << 32), v28);
    *(void *)uint64_t v23 = v25;
    v23[12] = v26;
    *((_DWORD *)v23 + 2) = v27;
    v23[13] = v28;
    v23[14] = v24[14];
  }
  return v4;
}

uint64_t destroy for WidgetAuxiliaryViewMetadata.Graphic.Named(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
  if (!swift_getEnumCaseMultiPayload())
  {
    uint64_t v5 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 48);
  uint64_t v7 = *(void *)v6;
  unint64_t v8 = *(unsigned int *)(v6 + 8) | ((unint64_t)*(unsigned __int8 *)(v6 + 12) << 32);
  char v9 = *(unsigned char *)(v6 + 13);

  return outlined consume of ContentTransition.Storage(v7, v8, v9);
}

void *initializeWithCopy for WidgetAuxiliaryViewMetadata.Graphic.Named(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  unint64_t v8 = (char *)a1 + v7;
  char v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v8, v9, v11);
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v12;
  uint64_t v15 = (char *)a2 + v12;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  void v14[4] = v15[4];
  *((unsigned char *)a1 + v13) = *((unsigned char *)a2 + v13);
  uint64_t v16 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  v17[16] = v18[16];
  uint64_t v19 = a3[11];
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  *(void *)((char *)a1 + v19) = *(void *)((char *)a2 + v19);
  uint64_t v20 = a3[12];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = *(void *)((char *)a2 + v20);
  uint64_t v24 = v22[12];
  uint64_t v25 = *((unsigned int *)v22 + 2);
  char v26 = v22[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ContentTransition.Storage(v23, v25 | (v24 << 32), v26);
  *(void *)uint64_t v21 = v23;
  v21[12] = v24;
  *((_DWORD *)v21 + 2) = v25;
  v21[13] = v26;
  v21[14] = v22[14];
  return a1;
}

void *assignWithCopy for WidgetAuxiliaryViewMetadata.Graphic.Named(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v6 = a3[5];
    uint64_t v7 = (char *)a1 + v6;
    unint64_t v8 = (char *)a2 + v6;
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)a1 + v6, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
    uint64_t v9 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  int v14 = *(_DWORD *)v13;
  v12[4] = v13[4];
  *(_DWORD *)uint64_t v12 = v14;
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[9];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  long long v18 = *(_OWORD *)v17;
  v16[16] = v17[16];
  *(_OWORD *)uint64_t v16 = v18;
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[12];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = *(void *)((char *)a2 + v19);
  uint64_t v23 = v21[12];
  uint64_t v24 = *((unsigned int *)v21 + 2);
  char v25 = v21[13];
  outlined copy of ContentTransition.Storage(v22, v24 | (v23 << 32), v25);
  uint64_t v26 = *(void *)v20;
  unint64_t v27 = *((unsigned int *)v20 + 2) | ((unint64_t)v20[12] << 32);
  *(void *)uint64_t v20 = v22;
  *((_DWORD *)v20 + 2) = v24;
  v20[12] = v23;
  char v28 = v20[13];
  v20[13] = v25;
  outlined consume of ContentTransition.Storage(v26, v27, v28);
  v20[14] = v21[14];
  return a1;
}

_OWORD *initializeWithTake for WidgetAuxiliaryViewMetadata.Graphic.Named(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v11;
  int v14 = (char *)a2 + v11;
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  v13[4] = v14[4];
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  uint64_t v15 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  v16[16] = v17[16];
  uint64_t v18 = a3[11];
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  uint64_t v19 = a3[12];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  *(void *)((char *)v20 + 7) = *(void *)((char *)v21 + 7);
  *uint64_t v20 = *v21;
  return a1;
}

void *assignWithTake for WidgetAuxiliaryViewMetadata.Graphic.Named(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v7 = a3[5];
    unint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)a1 + v7, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
    uint64_t v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  int v14 = (char *)a1 + v12;
  uint64_t v15 = (char *)a2 + v12;
  *(_DWORD *)int v14 = *(_DWORD *)v15;
  void v14[4] = v15[4];
  *((unsigned char *)a1 + v13) = *((unsigned char *)a2 + v13);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[9];
  uint64_t v17 = a3[10];
  uint64_t v18 = (char *)a1 + v16;
  uint64_t v19 = (char *)a2 + v16;
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  v18[16] = v19[16];
  *((unsigned char *)a1 + v17) = *((unsigned char *)a2 + v17);
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[12];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  __int16 v23 = *((_WORD *)v22 + 6);
  int v24 = *((_DWORD *)v22 + 2);
  uint64_t v25 = *(void *)((char *)a1 + v20);
  unint64_t v26 = *(unsigned int *)((char *)a1 + v20 + 8) | ((unint64_t)*((unsigned __int8 *)a1 + v20 + 12) << 32);
  *(void *)uint64_t v21 = *(void *)v22;
  *((_DWORD *)v21 + 2) = v24;
  char v27 = *((unsigned char *)a1 + v20 + 13);
  *((_WORD *)v21 + 6) = v23;
  outlined consume of ContentTransition.Storage(v25, v26, v27);
  v21[14] = v22[14];
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Graphic.Named(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187E9D290);
}

uint64_t sub_187E9D290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Graphic.Named(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187E9D354);
}

uint64_t sub_187E9D354(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for WidgetAuxiliaryViewMetadata.Graphic.Named()
{
  uint64_t result = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (!result)
  {
    uint64_t v3 = type metadata accessor for URL();
    unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *assignWithTake for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for WidgetAuxiliaryViewMetadata.Graphic(a1, a2, a3, MEMORY[0x1E4F276F0]);
}

uint64_t type metadata completion function for WidgetAuxiliaryViewMetadata.Graphic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for WidgetAuxiliaryViewMetadata.Progress(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = type metadata accessor for Date();
      uint64_t v9 = *(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      type metadata accessor for ClosedRange<Date>();
      v9((void *)((char *)a1 + *(int *)(v10 + 36)), (void *)((char *)a2 + *(int *)(v10 + 36)), v8);
      type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      *((unsigned char *)a1 + *(int *)(v11 + 48)) = *((unsigned char *)a2 + *(int *)(v11 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    uint64_t v13 = a3[6];
    *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
    *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for WidgetAuxiliaryViewMetadata.Progress(uint64_t a1)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for Date();
    uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    v3(a1, v2);
    type metadata accessor for ClosedRange<Date>();
    v3(a1 + *(int *)(v4 + 36), v2);
  }
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

unsigned char *initializeWithCopy for WidgetAuxiliaryViewMetadata.Progress(unsigned char *a1, unsigned char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v11 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  uint64_t v12 = a3[7];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  void v13[8] = v14[8];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *assignWithCopy for WidgetAuxiliaryViewMetadata.Progress(unsigned char *a1, unsigned char *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
    uint64_t v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Date();
      uint64_t v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_retain();
  swift_release();
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12[8] = v13[8];
  return a1;
}

unsigned char *initializeWithTake for WidgetAuxiliaryViewMetadata.Progress(unsigned char *a1, unsigned char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v11 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  uint64_t v12 = a3[7];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  void v13[8] = v14[8];
  return a1;
}

unsigned char *assignWithTake for WidgetAuxiliaryViewMetadata.Progress(unsigned char *a1, unsigned char *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
    uint64_t v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Date();
      uint64_t v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_release();
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(void *)&a1[v11] = *(void *)v13;
  swift_bridgeObjectRelease();
  v12[8] = v13[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Progress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187E9E254);
}

uint64_t sub_187E9E254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Progress(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187E9E328);
}

uint64_t sub_187E9E328(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for WidgetAuxiliaryViewMetadata.Progress()
{
  uint64_t result = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for WidgetAuxiliaryViewMetadata.Progress.Kind(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (void *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Date();
      uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8((void *)((char *)a1 + *(int *)(v9 + 36)), (void *)((char *)a2 + *(int *)(v9 + 36)), v7);
      type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      *((unsigned char *)a1 + *(int *)(v10 + 48)) = *((unsigned char *)a2 + *(int *)(v10 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

unsigned char *initializeWithCopy for WidgetAuxiliaryViewMetadata.Progress.Kind(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    type metadata accessor for ClosedRange<Date>();
    v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
    type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

unsigned char *assignWithCopy for WidgetAuxiliaryViewMetadata.Progress.Kind(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Date();
      uint64_t v7 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 16);
      v7(a1, a2, v6);
      type metadata accessor for ClosedRange<Date>();
      v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
      type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

unsigned char *initializeWithTake for WidgetAuxiliaryViewMetadata.Progress.Kind(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32);
    v7(a1, a2, v6);
    type metadata accessor for ClosedRange<Date>();
    v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
    type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

unsigned char *assignWithTake for WidgetAuxiliaryViewMetadata.Progress.Kind(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Date();
      uint64_t v7 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      type metadata accessor for ClosedRange<Date>();
      v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
      type metadata accessor for (ClosedRange<Date>, Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void type metadata completion function for WidgetAuxiliaryViewMetadata.Progress.Kind()
{
  v1[4] = &unk_1883AB0D8;
  type metadata accessor for ClosedRange<Date>();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v1[5] = v1;
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t destroy for WidgetAuxiliaryViewMetadata.Gauge()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WidgetAuxiliaryViewMetadata.Gauge(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WidgetAuxiliaryViewMetadata.Gauge(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for WidgetAuxiliaryViewMetadata.Gauge(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for WidgetAuxiliaryViewMetadata.Gauge()
{
  return &type metadata for WidgetAuxiliaryViewMetadata.Gauge;
}

uint64_t destroy for WidgetAuxiliaryViewMetadata.Accessibility()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for WidgetAuxiliaryViewMetadata.Accessibility(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for WidgetAuxiliaryViewMetadata.Accessibility(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for WidgetAuxiliaryViewMetadata.Accessibility(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Accessibility(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Accessibility(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetAuxiliaryViewMetadata.Accessibility()
{
  return &type metadata for WidgetAuxiliaryViewMetadata.Accessibility;
}

ValueMetadata *type metadata accessor for WidgetAuxiliaryViewMetadata.Key()
{
  return &type metadata for WidgetAuxiliaryViewMetadata.Key;
}

uint64_t getEnumTagSinglePayload for WidgetAuxiliaryViewMetadataModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadataModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187E9F388);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

ValueMetadata *type metadata accessor for WidgetAuxiliaryURLPreferenceKey()
{
  return &type metadata for WidgetAuxiliaryURLPreferenceKey;
}

uint64_t type metadata instantiation function for MutableBox<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 0);
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys()
{
  return &unk_1ED451260;
}

unsigned char *storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Gauge.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187E9F4ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Gauge.CodingKeys()
{
  return &unk_1ED451460;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys()
{
  return &unk_1ED451918;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys()
{
  return &unk_1ED451A38;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys()
{
  return &unk_1ED4519A8;
}

unsigned char *storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187E9F5E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.CodingKeys()
{
  return &unk_1ED451888;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys()
{
  return &unk_1ED4516D8;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys()
{
  return &unk_1ED451768;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys()
{
  return &unk_1ED4517F8;
}

void *type metadata accessor for SymbolEffectArray()
{
  return &unk_1ED425270;
}

unsigned char *storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187E9F728);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys()
{
  return &unk_1ED451648;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Error()
{
  return &unk_1ED4515B8;
}

unsigned char *storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187E9F83CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.CodingKeys()
{
  return &unk_1ED451528;
}

unsigned char *storeEnumTagSinglePayload for MutableBox<A>.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x187E9F910);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Text.CodingKeys()
{
  return &unk_1ED4513A8;
}

unsigned char *storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187E9FA14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.CodingKeys()
{
  return &unk_1ED4511D0;
}

uint64_t base witness table accessor for Equatable in MutableBox<A><A>.CodingKeys()
{
  return lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys and conformance MutableBox<A><A>.CodingKeys, (void (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MutableBox<A><A>.CodingKeys()
{
  return lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys and conformance MutableBox<A><A>.CodingKeys, (void (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in MutableBox<A><A>.CodingKeys()
{
  return lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys and conformance MutableBox<A><A>.CodingKeys, (void (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys);
}

uint64_t specialized WidgetAuxiliaryViewMetadata.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x617461646174656DLL && a2 == 0xEC00000074786554;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000018833B620 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x63696870617267 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6B6361626C6C6166 && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x73736572676F7270 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6567756167 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6269737365636361 && a2 == 0xED00007974696C69)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t specialized WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1953393000 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized WidgetAuxiliaryViewMetadata.Gauge.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x786F426C6562616CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000018833B660 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000018833B680 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000018833B6A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x746E69745FLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t specialized WidgetAuxiliaryViewMetadata.Graphic.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64656D616ELL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6567616D69 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C6F626D79537369 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x73726F6C6F635FLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C6F43746E69745FLL && a2 == 0xEA0000000000726FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x65646F6D5FLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x456C6F626D79735FLL && a2 == 0xEE00737463656666 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000018833B640)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t specialized WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C646E7562 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D6574737973 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized WidgetAuxiliaryViewMetadata.Progress.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684957547 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x786F426C6562616CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000018833B660 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746E69745FLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574756C6F736261 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized SymbolEffectArray.init(from:)(void *a1)
{
  uint64_t v3 = specialized SymbolEffectArray.init(effects:)(MEMORY[0x1E4FBC860]);
  unint64_t v4 = a1[1];
  if (v4 >= a1[2])
  {
LABEL_18:
    a1[3] = 0;
    return v3;
  }
  while (1)
  {
    unint64_t v5 = a1[3];
    if (!v5) {
      break;
    }
    unint64_t v6 = a1[4];
    if (v4 >= v6)
    {
      if (v6 < v4) {
        goto LABEL_19;
      }
      a1[3] = 0;
      break;
    }
LABEL_8:
    if ((v5 & 0xFFFFFFFFFFFFFFF8) == 8)
    {
      ProtobufDecoder.messageField<A>(_:)();
      if (v1) {
        goto LABEL_20;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1, (char *)v3);
      }
      unint64_t v8 = *(void *)(v3 + 16);
      unint64_t v7 = *(void *)(v3 + 24);
      unint64_t v9 = v8 + 1;
      if (v8 >= v7 >> 1)
      {
        int v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, (char *)v3);
        unint64_t v9 = v8 + 1;
        uint64_t v3 = (uint64_t)v11;
      }
      *(void *)(v3 + 16) = v9;
      uint64_t v10 = v3 + 48 * v8;
      *(void *)(v10 + 32) = v13;
      *(void *)(v10 + 40) = v14;
      *(void *)(v10 + 48) = v15;
      *(_WORD *)(v10 + 56) = v16;
      *(_DWORD *)(v10 + 60) = v17;
      *(_DWORD *)(v10 + 64) = v18;
      *(unsigned char *)(v10 + 68) = v19;
      *(_DWORD *)(v10 + 72) = v20;
      *(unsigned char *)(v10 + 76) = v21;
      unint64_t v4 = a1[1];
      if (v4 >= a1[2]) {
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v13 = v5;
      ProtobufDecoder.skipField(_:)();
      if (v1) {
        goto LABEL_20;
      }
      unint64_t v4 = a1[1];
      if (v4 >= a1[2]) {
        goto LABEL_18;
      }
    }
  }
  unint64_t v5 = ProtobufDecoder.decodeVarint()();
  if (v1) {
    goto LABEL_20;
  }
  if (v5 >= 8) {
    goto LABEL_8;
  }
LABEL_19:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
LABEL_20:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t outlined assign with copy of WidgetAuxiliaryViewMetadata?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  unsigned __int8 v3 = *(unsigned char *)(a1 + 104);
  outlined copy of _ShapeStyle_Pack.Fill(*(id *)(a1 + 8), *(void *)(a1 + 16), *(void **)(a1 + 24), *(void **)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
  outlined copy of GraphicsBlendMode?(v2, v3);
  swift_bridgeObjectRetain();
  return a1;
}

id outlined copy of _ShapeStyle_Pack.Fill(id result, unsigned __int8 a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  switch(a11)
  {
    case 1:
      uint64_t result = (id)swift_retain();
      break;
    case 2:
      uint64_t result = a3;
      a2 = a4;
      goto LABEL_4;
    case 3:
LABEL_4:
      uint64_t result = (id)outlined copy of Material.ID((uint64_t)result, a2);
      break;
    case 6:
      uint64_t result = a4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined copy of GraphicsBlendMode?(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return outlined copy of GraphicsBlendMode(result, a2 & 1);
  }
  return result;
}

uint64_t outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  unsigned __int8 v3 = *(unsigned char *)(a1 + 104);
  outlined consume of _ShapeStyle_Pack.Fill(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void **)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
  outlined consume of GraphicsBlendMode?(v2, v3);
  swift_bridgeObjectRelease();
  return a1;
}

void outlined consume of _ShapeStyle_Pack.Fill(uint64_t a1, unsigned __int8 a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  switch(a11)
  {
    case 1:
      swift_release();
      break;
    case 2:
      a1 = a3;
      a2 = a4;
      goto LABEL_4;
    case 3:
LABEL_4:
      outlined consume of Material.ID(a1, a2);
      break;
    case 6:

      break;
    default:
      return;
  }
}

uint64_t outlined consume of GraphicsBlendMode?(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return outlined consume of GraphicsBlendMode(result, a2 & 1);
  }
  return result;
}

uint64_t outlined destroy of TimeDataFormattingContainer?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for [Color.Resolved](0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t lazy protocol witness table accessor for type AuxiliaryViewMetadataPreferenceWriter and conformance AuxiliaryViewMetadataPreferenceWriter()
{
  unint64_t result = lazy protocol witness table cache variable for type AuxiliaryViewMetadataPreferenceWriter and conformance AuxiliaryViewMetadataPreferenceWriter;
  if (!lazy protocol witness table cache variable for type AuxiliaryViewMetadataPreferenceWriter and conformance AuxiliaryViewMetadataPreferenceWriter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AuxiliaryViewMetadataPreferenceWriter and conformance AuxiliaryViewMetadataPreferenceWriter);
  }
  return result;
}

void type metadata accessor for (WidgetAuxiliaryViewMetadata.Graphic, WidgetAuxiliaryViewMetadata.Graphic)(uint64_t a1)
{
}

void type metadata accessor for (WidgetAuxiliaryViewMetadata?, WidgetAuxiliaryViewMetadata?)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for (WidgetAuxiliaryViewMetadata.Graphic.Named.Location, WidgetAuxiliaryViewMetadata.Graphic.Named.Location)(uint64_t a1)
{
}

void type metadata accessor for KeyedEncodingContainer<MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys();
    uint64_t v7 = v6;
    uint64_t v8 = lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys and conformance MutableBox<A><A>.CodingKeys, (void (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A](unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ResolvableTimer?(uint64_t a1)
{
}

void type metadata accessor for ResolvableCurrentDate?(uint64_t a1)
{
}

void type metadata accessor for ResolvableDateInterval?(uint64_t a1)
{
}

void type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind?(uint64_t a1)
{
}

void type metadata accessor for ResolvableAbsoluteDate?(uint64_t a1)
{
}

void type metadata accessor for ResolvableStringAttribute?(uint64_t a1)
{
}

void type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t type metadata accessor for ResolvableStringAttribute()
{
  unint64_t result = lazy cache variable for type metadata for ResolvableStringAttribute;
  if (!lazy cache variable for type metadata for ResolvableStringAttribute)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ResolvableStringAttribute);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for (ResolvableTextSegmentAttribute.Value?, ResolvableTextSegmentAttribute.Value?)(uint64_t a1)
{
}

void type metadata accessor for [NSDictionary]()
{
  if (!lazy cache variable for type metadata for [NSDictionary])
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [NSDictionary]);
    }
  }
}

uint64_t outlined destroy of ResolvableTextSegmentAttribute.Value?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of WidgetAuxiliaryViewMetadata.Graphic.Named(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *type metadata accessor for AuxiliaryViewMetadataPreferenceWriter()
{
  return &unk_1ED473C58;
}

ValueMetadata *type metadata accessor for WidgetAuxiliaryTextImagePreference()
{
  return &type metadata for WidgetAuxiliaryTextImagePreference;
}

uint64_t initializeWithCopy for LazyWidgetAuxiliaryMetadataTextImage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  id v5 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LazyWidgetAuxiliaryMetadataTextImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  return a1;
}

uint64_t assignWithTake for LazyWidgetAuxiliaryMetadataTextImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyWidgetAuxiliaryMetadataTextImage(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LazyWidgetAuxiliaryMetadataTextImage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for LazyWidgetAuxiliaryMetadataTextImage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in LazyWidgetAuxiliaryMetadataTextImage<A>()
{
  return swift_getWitnessTable();
}

uint64_t outlined consume of WidgetAuxiliaryTextImagePreference??(uint64_t result)
{
  if (result != 2) {
    return outlined consume of WidgetAuxiliaryTextImagePreference?(result);
  }
  return result;
}

uint64_t sub_187EA2804()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryMetadataTextImageWriter and conformance WidgetAuxiliaryMetadataTextImageWriter()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryMetadataTextImageWriter and conformance WidgetAuxiliaryMetadataTextImageWriter;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryMetadataTextImageWriter and conformance WidgetAuxiliaryMetadataTextImageWriter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryMetadataTextImageWriter and conformance WidgetAuxiliaryMetadataTextImageWriter);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetAuxiliaryMetadataTextImageWriter and conformance WidgetAuxiliaryMetadataTextImageWriter;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryMetadataTextImageWriter and conformance WidgetAuxiliaryMetadataTextImageWriter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryMetadataTextImageWriter and conformance WidgetAuxiliaryMetadataTextImageWriter);
  }
  return result;
}

void type metadata accessor for [Color.Resolved](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

ValueMetadata *type metadata accessor for WidgetAuxiliaryMetadataTextImageWriter()
{
  return &type metadata for WidgetAuxiliaryMetadataTextImageWriter;
}

void View.accessoryBar<A>(content:)()
{
}

uint64_t sub_187EA2980()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type AccessoryBarContent and conformance AccessoryBarContent()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessoryBarContent and conformance AccessoryBarContent;
  if (!lazy protocol witness table cache variable for type AccessoryBarContent and conformance AccessoryBarContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessoryBarContent and conformance AccessoryBarContent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessoryBarContent and conformance AccessoryBarContent;
  if (!lazy protocol witness table cache variable for type AccessoryBarContent and conformance AccessoryBarContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessoryBarContent and conformance AccessoryBarContent);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryBarContent()
{
  return &type metadata for AccessoryBarContent;
}

_UNKNOWN **base witness table accessor for View in AccessoryBarContent()
{
  return &protocol witness table for AccessoryBarContent;
}

void protocol witness for View.body.getter in conformance AccessoryBarContent()
{
}

unint64_t instantiation function for generic protocol witness table for AccessoryBarContent(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessoryBarContent and conformance AccessoryBarContent();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t CustomHoverEffect.hoverEffectDisabled(_:)()
{
  return CustomHoverEffect.concat<A>(_:)();
}

uint64_t sub_187EA2BAC()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect;
  if (!lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect;
  if (!lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect;
  if (!lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect;
  if (!lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for _CustomDisabledHoverEffect(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187EA2D30);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for _CustomDisabledHoverEffect()
{
  return &unk_1ED44D9D0;
}

void protocol witness for PrimitiveCustomHoverContextEffect.makeContextValue() in conformance _CustomDisabledHoverEffect(char *a1@<X8>)
{
  if (*v1) {
    char v2 = 1;
  }
  else {
    char v2 = 3;
  }
  *a1 = v2;
}

void protocol witness for CustomHoverEffect.body(content:) in conformance _CustomDisabledHoverEffect()
{
}

uint64_t protocol witness for static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:) in conformance _CustomDisabledHoverEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect();

  return MEMORY[0x1F4100610](a1, a2, a3, a4, a5, v10);
}

void protocol witness for InternalCustomHoverEffect.systemHoverEffect.getter in conformance _CustomDisabledHoverEffect(unsigned char *a1@<X8>)
{
  BOOL v2 = (*v1 & 1) == 0;
  *a1 = 3;
  a1[1] = v2;
}

uint64_t EnvironmentValues.documentConfiguration.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.documentConfiguration : EnvironmentValues(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.documentConfiguration : EnvironmentValues(uint64_t a1)
{
  _s10Foundation3URLVSgMaTm_7(0, &lazy cache variable for type metadata for DocumentConfiguration?, (void (*)(uint64_t))type metadata accessor for DocumentConfiguration);
  MEMORY[0x1F4188790](v2 - 8);
  unsigned int v4 = (char *)&v6 - v3;
  _s10Foundation3URLVSgWOcTm_2(a1, (uint64_t)&v6 - v3, &lazy cache variable for type metadata for DocumentConfiguration?, (void (*)(uint64_t))type metadata accessor for DocumentConfiguration);
  return EnvironmentValues.documentConfiguration.setter((uint64_t)v4);
}

uint64_t EnvironmentValues.documentConfiguration.setter(uint64_t a1)
{
  _s10Foundation3URLVSgMaTm_7(0, &lazy cache variable for type metadata for DocumentConfiguration?, (void (*)(uint64_t))type metadata accessor for DocumentConfiguration);
  MEMORY[0x1F4188790](v3 - 8);
  _s10Foundation3URLVSgWOcTm_2(a1, (uint64_t)&v6 - v4, &lazy cache variable for type metadata for DocumentConfiguration?, (void (*)(uint64_t))type metadata accessor for DocumentConfiguration);
  type metadata accessor for EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of DocumentConfiguration?(a1);
}

uint64_t DocumentConfiguration.isEditable.getter()
{
  return *v0;
}

uint64_t DocumentConfiguration.fileURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DocumentConfiguration();
  return _s10Foundation3URLVSgWOcTm_2(v1 + *(int *)(v3 + 20), a1, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
}

uint64_t type metadata accessor for DocumentConfiguration()
{
  uint64_t result = type metadata singleton initialization cache for DocumentConfiguration;
  if (!type metadata singleton initialization cache for DocumentConfiguration) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    {
      _s10Foundation3URLVSgMaTm_7(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
      memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

unsigned char *initializeWithCopy for DocumentConfiguration(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    _s10Foundation3URLVSgMaTm_7(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

unsigned char *assignWithCopy for DocumentConfiguration(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(v5, 1, v7);
  int v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 24))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    _s10Foundation3URLVSgMaTm_7(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
    memcpy(v5, v6, *(void *)(*(void *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16))(v5, v6, v7);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

unsigned char *initializeWithTake for DocumentConfiguration(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    _s10Foundation3URLVSgMaTm_7(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

unsigned char *assignWithTake for DocumentConfiguration(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(v5, 1, v7);
  int v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 40))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    _s10Foundation3URLVSgMaTm_7(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
    memcpy(v5, v6, *(void *)(*(void *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v5, v6, v7);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187EA3BAC);
}

uint64_t sub_187EA3BAC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    _s10Foundation3URLVSgMaTm_7(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
    int v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    unint64_t v13 = &a1[*(int *)(a3 + 20)];
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187EA3C8C);
}

unsigned char *sub_187EA3C8C(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    _s10Foundation3URLVSgMaTm_7(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 20)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for DocumentConfiguration()
{
  _s10Foundation3URLVSgMaTm_7(319, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *type metadata accessor for DocumentConfigurationEnvironmentKey()
{
  return &unk_1ED461398;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance DocumentConfigurationEnvironmentKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  _s10Foundation3URLVSgMaTm_7(0, &lazy cache variable for type metadata for DocumentConfiguration?, (void (*)(uint64_t))type metadata accessor for DocumentConfiguration);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentConfigurationEnvironmentKey.defaultValue);
  return _s10Foundation3URLVSgWOcTm_2(v3, a1, &lazy cache variable for type metadata for DocumentConfiguration?, (void (*)(uint64_t))type metadata accessor for DocumentConfiguration);
}

uint64_t outlined destroy of DocumentConfiguration?(uint64_t a1)
{
  _s10Foundation3URLVSgMaTm_7(0, &lazy cache variable for type metadata for DocumentConfiguration?, (void (*)(uint64_t))type metadata accessor for DocumentConfiguration);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OscillationDetector.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t OscillationDetector.__deallocating_deinit()
{
  OscillationDetector.deinit();

  return swift_deallocClassInstance();
}

uint64_t NavigationLink.init(destination:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  v22[1] = a5;
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  int v18 = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v18, a1, v19, v16);
  a2(v20);
  NavigationLink.init(destination:label:)((uint64_t)v18, (uint64_t)v12, a3, a4, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a4);
}

uint64_t NavigationLink<>.init(_:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a3 - 8);
  double v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v11, v12, v8);
  NavigationLink<>.init(destination:titleKey:)((uint64_t)v10, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a2, a3);
}

uint64_t NavigationLink<>.init<A>(_:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v23[1] = a6;
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 - 8);
  double v19 = MEMORY[0x1F4188790](v18);
  char v21 = (char *)v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v17 + 16))(v21, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a4);
  NavigationLink<>.init<A>(destination:title:)((uint64_t)v21, (uint64_t)v15, a3, a4, a5, a7);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a1, a4);
}

uint64_t NavigationLink.init(destination:isActive:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  int v28 = a4;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v25 = a9;
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 - 8);
  double v19 = MEMORY[0x1F4188790](v18);
  char v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v21, a1, v22, v19);
  a5(v23);
  NavigationLink.init(destination:label:isActive:)((uint64_t)v21, (uint64_t)v15, v26, v27, v28, a6, a7, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a7);
}

uint64_t NavigationLink.init<A>(destination:tag:selection:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v42 = a1;
  uint64_t v43 = a6;
  uint64_t v47 = a5;
  char v48 = a4;
  uint64_t v45 = a3;
  uint64_t v51 = a9;
  uint64_t v52 = a10;
  uint64_t v49 = a12;
  uint64_t v50 = a11;
  type metadata accessor for Optional();
  uint64_t v46 = type metadata accessor for Binding();
  uint64_t v16 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v44 = (char *)&v39 - v17;
  uint64_t v41 = *(void *)(a8 - 8);
  uint64_t v18 = v41;
  MEMORY[0x1F4188790](v19);
  char v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  int v24 = (char *)&v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = a7;
  uint64_t v25 = *(void *)(a7 - 8);
  double v27 = MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v39 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, double))(v25 + 16))(v29, a1, v27);
  v48(v30);
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v32 = a8;
  v31(v21, a2, a8);
  uint64_t v33 = v44;
  uint64_t v34 = v45;
  uint64_t v35 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v44, v45, v46);
  uint64_t v36 = (uint64_t)v33;
  uint64_t v37 = v40;
  NavigationLink.init<A>(destination:label:tag:selection:)((uint64_t)v29, (uint64_t)v24, (uint64_t)v21, v36, v43, v40, v32, v52, v51, v50, v49);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v34, v35);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(a2, v32);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v42, v37);
}

uint64_t NavigationLink<>.init(_:destination:isActive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, int a5@<W7>, uint64_t a6@<X8>, uint64_t a7)
{
  int v18 = a5;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v9 = *(void *)(a7 - 8);
  double v10 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v13, a7, v10);
  NavigationLink<>.init(destination:titleKey:isActive:)((uint64_t)v12, v16, v17, v18, a6, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a2, a7);
}

uint64_t NavigationLink<>.init<A>(_:destination:isActive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v27 = a8;
  int v26 = a5;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v14 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v17 - 8);
  double v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v24 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v18 + 16))(v22, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a7);
  NavigationLink<>.init<A>(destination:title:isActive:)((uint64_t)v22, (uint64_t)v16, v24, v25, v26, a6, a7, v27, a9);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a2, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a7);
}

uint64_t NavigationLink<>.init<A>(_:destination:tag:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v39 = a7;
  uint64_t v40 = a9;
  uint64_t v35 = a5;
  uint64_t v44 = a4;
  int v43 = a3;
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v37 = a12;
  uint64_t v38 = a11;
  type metadata accessor for Optional();
  uint64_t v36 = type metadata accessor for Binding();
  uint64_t v15 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  uint64_t v17 = (char *)&v33 - v16;
  uint64_t v18 = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a8;
  uint64_t v22 = *(void *)(a8 - 8);
  double v24 = MEMORY[0x1F4188790](v23);
  int v26 = (char *)&v33 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))(v26, a5, a8, v24);
  uint64_t v27 = a6;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, a6, a10);
  uint64_t v28 = v39;
  uint64_t v29 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v39, v36);
  uint64_t v30 = (uint64_t)v17;
  uint64_t v31 = v34;
  NavigationLink<>.init<A>(destination:titleKey:tag:selection:)((uint64_t)v26, v41, v42, v43, v44, (uint64_t)v21, v30, v34, v40, a10, v38, v37);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v28, v29);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v27, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v35, v31);
}

uint64_t NavigationLink<>.init<A, B>(_:destination:tag:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v51 = a8;
  uint64_t v52 = a1;
  uint64_t v44 = a3;
  uint64_t v42 = a2;
  uint64_t v50 = a9;
  uint64_t v49 = a10;
  uint64_t v47 = a4;
  uint64_t v48 = a11;
  type metadata accessor for Optional();
  uint64_t v46 = type metadata accessor for Binding();
  uint64_t v15 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v45 = (char *)&v39 - v16;
  uint64_t v41 = *(void *)(a7 - 8);
  uint64_t v17 = v41;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = a6;
  uint64_t v43 = *(void *)(a6 - 8);
  uint64_t v21 = v43;
  MEMORY[0x1F4188790](v22);
  double v24 = (char *)&v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = a5;
  uint64_t v25 = *(void *)(a5 - 8);
  double v27 = MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v39 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v25 + 16))(v29, a2, v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, v52, a6);
  uint64_t v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v44, a7);
  uint64_t v31 = (uint64_t)v45;
  uint64_t v32 = v46;
  uint64_t v33 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v45, v47, v46);
  uint64_t v34 = (uint64_t)v29;
  uint64_t v35 = (uint64_t)v24;
  uint64_t v36 = v39;
  uint64_t v37 = v40;
  NavigationLink<>.init<A, B>(destination:title:tag:selection:)(v34, v35, (uint64_t)v20, v31, v40, v39, a7, v51, v50, v49, v48);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v33, v32);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v30, a7);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v42, v37);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v52, v36);
}

void NavigationLink<>.init(destinationName:label:)()
{
}

void NavigationLink<>.init(destinationName:isActive:label:)()
{
}

void NavigationLink<>.init<A>(destinationName:tag:selection:label:)()
{
}

uint64_t View.accessibilityIntentAction(_:lnAction:perform:)(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v12 = a1[2];
  unint64_t v11 = a1[3];
  type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBBE00]);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_18834BB80;
  uint64_t KeyPath = swift_getKeyPath();
  char v23 = 0;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
  *(void *)(v13 + 56) = v15;
  *(void *)(v13 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  uint64_t v16 = swift_allocObject();
  *(void *)(v13 + 32) = v16;
  char v17 = v23;
  *(void *)(v16 + 16) = v9;
  *(void *)(v16 + 24) = v10;
  *(void *)(v16 + 32) = v12;
  *(void *)(v16 + 40) = v11;
  *(void *)(v16 + 48) = KeyPath;
  *(void *)(v16 + 56) = 0;
  *(unsigned char *)(v16 + 64) = v17;
  *(void *)(v16 + 72) = a2;
  *(void *)(v16 + 80) = a3;
  *(void *)(v16 + 88) = a4;
  *(void *)(v16 + 96) = 0;
  *(void *)(v16 + 104) = 0;
  *(void *)(v16 + 112) = 0;
  *(void *)(v16 + 120) = 2;
  *(_OWORD *)(v16 + 128) = 0u;
  *(_OWORD *)(v16 + 144) = 0u;
  *(void *)(v16 + 160) = 0;
  *(unsigned char *)(v16 + 168) = 1;
  *(unsigned char *)(v13 + 72) = 1;
  uint64_t v22 = v13;
  outlined copy of AccessibilityActionKind.ActionKind(v9, v10, v12, v11);
  lazy protocol witness table accessor for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey();
  id v18 = a2;
  swift_retain();
  View.accessibility<A>(_:_:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey, (uint64_t)&v22, 1, a5, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey, a6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_187EA54D4()
{
  if (*(void *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));

  swift_release();
  if (*(void *)(v0 + 120) >= 3uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 96), *(void *)(v0 + 104), *(unsigned char *)(v0 + 112));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 152))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 128), *(void *)(v0 + 136), *(unsigned char *)(v0 + 144));
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t View.accessibilityIntentAction(named:lnAction:perform:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBBE00]);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18834BB80;
  uint64_t KeyPath = swift_getKeyPath();
  char v25 = 0;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
  *(void *)(v16 + 56) = v18;
  *(void *)(v16 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  uint64_t v19 = swift_allocObject();
  *(void *)(v16 + 32) = v19;
  char v20 = v25;
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  *(void *)(v19 + 32) = a3 & 1;
  *(void *)(v19 + 40) = a4;
  *(void *)(v19 + 48) = KeyPath;
  *(void *)(v19 + 56) = 0;
  *(unsigned char *)(v19 + 64) = v20;
  *(void *)(v19 + 72) = a5;
  *(void *)(v19 + 80) = a6;
  *(void *)(v19 + 88) = a7;
  *(void *)(v19 + 96) = 0;
  *(void *)(v19 + 104) = 0;
  *(void *)(v19 + 112) = 0;
  *(void *)(v19 + 120) = 2;
  *(_OWORD *)(v19 + 128) = 0u;
  *(_OWORD *)(v19 + 144) = 0u;
  *(void *)(v19 + 160) = 0;
  *(unsigned char *)(v19 + 168) = 1;
  *(unsigned char *)(v16 + 72) = 1;
  uint64_t v24 = v16;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  lazy protocol witness table accessor for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey();
  swift_bridgeObjectRetain();
  id v21 = a5;
  swift_retain();
  View.accessibility<A>(_:_:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey, (uint64_t)&v24, 1, a8, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey, a9);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityIntentAction<A>(lnAction:perform:label:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  uint64_t v23 = a6;
  uint64_t v22 = a4;
  uint64_t v13 = *(void *)(a5 - 8);
  double v14 = MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17(v14);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = a3;
  id v19 = a1;
  swift_retain();
  View.accessibilityAttachment<A>(content:_:)((uint64_t)v16, (uint64_t)partial apply for closure #1 in View.accessibilityIntentAction<A>(lnAction:perform:label:), (uint64_t)v18, v22, a5, v23, a8, a7);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, a5);
}

void closure #1 in View.accessibilityIntentAction<A>(lnAction:perform:label:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)a1;
  double v8 = *(void **)(a1 + 8);
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 16) != 1)
    {
      AccessibilityAttachment.init()();
      goto LABEL_11;
    }
    uint64_t v10 = swift_bridgeObjectRetain();
    unint64_t v11 = specialized Sequence.compactMap<A>(_:)(v10);
    static AccessibilityAttachment.combine(_:)(v11, &v27);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v9, v8, 1);
    uint64_t v9 = v27;
    id v12 = v28;
    double v8 = v28;
  }
  else
  {
    id v12 = v8;
    swift_bridgeObjectRetain();
  }
  uint64_t v27 = v9;
  uint64_t v28 = v8;
  AccessibilityAttachment.mergedProperties.getter(v33);

  swift_bridgeObjectRelease();
  uint64_t v13 = v33[0];
  AccessibilityAttachment.init()();
  if (v13)
  {
    uint64_t v14 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v14, (uint64_t)&v27);
    swift_bridgeObjectRelease_n();
    if (v27)
    {
      if (*(void *)(v27 + 16))
      {
        uint64_t v15 = *(void *)(v27 + 32);
        uint64_t v16 = *(void *)(v27 + 40);
        uint64_t v17 = *(unsigned __int8 *)(v27 + 48);
        uint64_t v18 = *(void *)(v27 + 56);
        outlined copy of Text.Storage(v15, v16, *(unsigned char *)(v27 + 48));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t KeyPath = swift_getKeyPath();
        char v32 = 0;
        type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
        uint64_t v29 = v20;
        uint64_t v30 = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
        uint64_t v21 = swift_allocObject();
        uint64_t v27 = v21;
        char v22 = v32;
        *(void *)(v21 + 16) = v15;
        *(void *)(v21 + 24) = v16;
        *(void *)(v21 + 32) = v17;
        *(void *)(v21 + 40) = v18;
        *(void *)(v21 + 48) = KeyPath;
        *(void *)(v21 + 56) = 0;
        *(unsigned char *)(v21 + 64) = v22;
        *(void *)(v21 + 72) = a2;
        *(void *)(v21 + 80) = a3;
        *(void *)(v21 + 88) = a4;
        *(void *)(v21 + 96) = 0;
        *(void *)(v21 + 104) = 0;
        *(void *)(v21 + 112) = 0;
        *(void *)(v21 + 120) = 2;
        *(_OWORD *)(v21 + 128) = 0u;
        *(_OWORD *)(v21 + 144) = 0u;
        *(void *)(v21 + 160) = 0;
        *(unsigned char *)(v21 + 168) = 1;
        char v31 = 1;
        type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBBE00]);
        uint64_t v23 = swift_allocObject();
        *(_OWORD *)(v23 + 16) = xmmword_18834BB80;
        outlined init with copy of AnyAccessibilityAction((uint64_t)&v27, v23 + 32);
        id v24 = a2;
        swift_retain();
        specialized AccessibilityProperties.subscript.setter(v23);
        outlined destroy of AnyAccessibilityAction((uint64_t)&v27);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
LABEL_11:
  uint64_t v25 = v33[0];
  uint64_t v26 = v33[1];
  outlined consume of AccessibilityAttachment.Tree(*(void *)a1, *(void **)(a1 + 8), *(unsigned char *)(a1 + 16));
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v26;
  *(unsigned char *)(a1 + 16) = 0;
}

uint64_t sub_187EA5B4C()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in View.accessibilityIntentAction<A>(lnAction:perform:label:)(uint64_t a1)
{
  closure #1 in View.accessibilityIntentAction<A>(lnAction:perform:label:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t ModifiedContent<>.accessibilityIntentAction(_:lnAction:perform:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBBE00]);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_18834BB80;
  uint64_t KeyPath = swift_getKeyPath();
  char v25 = 0;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
  *(void *)(v14 + 56) = v16;
  *(void *)(v14 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  uint64_t v17 = swift_allocObject();
  *(void *)(v14 + 32) = v17;
  char v18 = v25;
  *(void *)(v17 + 16) = v10;
  *(void *)(v17 + 24) = v11;
  *(void *)(v17 + 32) = v12;
  *(void *)(v17 + 40) = v13;
  *(void *)(v17 + 48) = KeyPath;
  *(void *)(v17 + 56) = 0;
  *(unsigned char *)(v17 + 64) = v18;
  *(void *)(v17 + 72) = a2;
  *(void *)(v17 + 80) = a3;
  *(void *)(v17 + 88) = a4;
  *(void *)(v17 + 96) = 0;
  *(void *)(v17 + 104) = 0;
  *(void *)(v17 + 112) = 0;
  *(void *)(v17 + 120) = 2;
  *(_OWORD *)(v17 + 128) = 0u;
  *(_OWORD *)(v17 + 144) = 0u;
  *(void *)(v17 + 160) = 0;
  *(unsigned char *)(v17 + 168) = 1;
  *(unsigned char *)(v14 + 72) = 1;
  uint64_t v24 = v14;
  outlined copy of AccessibilityActionKind.ActionKind(v10, v11, v12, v13);
  unint64_t v19 = lazy protocol witness table accessor for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey();
  unint64_t v20 = lazy protocol witness table accessor for type [AnyAccessibilityAction] and conformance [A]();
  id v21 = a2;
  swift_retain();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey, (uint64_t)&v24, 1, a5, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey, v19, v20, a6);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityIntentAction(named:lnAction:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBBE00]);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18834BB80;
  uint64_t KeyPath = swift_getKeyPath();
  char v28 = 0;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
  *(void *)(v16 + 56) = v18;
  *(void *)(v16 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  uint64_t v19 = swift_allocObject();
  *(void *)(v16 + 32) = v19;
  char v20 = v28;
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  *(void *)(v19 + 32) = a3 & 1;
  *(void *)(v19 + 40) = a4;
  *(void *)(v19 + 48) = KeyPath;
  *(void *)(v19 + 56) = 0;
  *(unsigned char *)(v19 + 64) = v20;
  *(void *)(v19 + 72) = a5;
  *(void *)(v19 + 80) = a6;
  *(void *)(v19 + 88) = a7;
  *(void *)(v19 + 96) = 0;
  *(void *)(v19 + 104) = 0;
  *(void *)(v19 + 112) = 0;
  *(void *)(v19 + 120) = 2;
  *(_OWORD *)(v19 + 128) = 0u;
  *(_OWORD *)(v19 + 144) = 0u;
  *(void *)(v19 + 160) = 0;
  *(unsigned char *)(v19 + 168) = 1;
  *(unsigned char *)(v16 + 72) = 1;
  uint64_t v27 = v16;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  unint64_t v21 = lazy protocol witness table accessor for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey();
  unint64_t v22 = lazy protocol witness table accessor for type [AnyAccessibilityAction] and conformance [A]();
  swift_bridgeObjectRetain();
  id v23 = a5;
  swift_retain();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey, (uint64_t)&v27, 1, a8, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey, v21, v22, a9);
  return swift_bridgeObjectRelease();
}

BOOL AccessibilityAppIntentAction.impliedRole(for:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(v1 + 24) | v2 & 1) {
    return 0;
  }
  char v3 = AccessibilityNullableOptionSet<>.subscript.getter();
  BOOL result = 0;
  if ((v3 & 1) == 0 && (v2 & 0x20000) == 0)
  {
    char v5 = AccessibilityNullableOptionSet<>.subscript.getter();
    BOOL result = 0;
    if ((v5 & 1) == 0 && (v2 & 8) == 0)
    {
      char v6 = AccessibilityNullableOptionSet<>.subscript.getter();
      BOOL result = 0;
      if ((v6 & 1) == 0 && (v2 & 2) == 0) {
        return (AccessibilityNullableOptionSet<>.subscript.getter() & 1) == 0;
      }
    }
  }
  return result;
}

uint64_t AccessibilityAppIntentAction.asCodableAction(in:)@<X0>(uint64_t a1@<X8>)
{
  unint64_t v4 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(unsigned __int8 *)(v1 + 48);
  long long v7 = *(_OWORD *)(v1 + 56);
  uint64_t v8 = *(void *)(v1 + 72);
  long long v13 = v7;
  if (v4 >= 5)
  {
    outlined copy of AccessibilityActionKind.ActionKind(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), v4);
    swift_retain();
    swift_retain();
    uint64_t result = AccessibilityText.init(_:environment:idiom:)();
    if ((_BYTE)v15 == 0xFF)
    {
      *(void *)(a1 + 64) = 0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      return result;
    }
    long long v10 = v14;
    unint64_t v9 = v15 & 0x101;
    long long v7 = v13;
  }
  else
  {
    unint64_t v9 = 255 - v4;
    long long v10 = 0uLL;
  }
  *(_OWORD *)a1 = v10;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(void *)(a1 + 64) = v8;
  outlined copy of Environment<AppIntentExecutor?>.Content(v3, v5, v6);
  id v12 = (id)v13;

  return swift_retain();
}

uint64_t AccessibilityAppIntentAction.matches<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  long long v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x1F4188790](v8);
  long long v46 = *v2;
  unint64_t v10 = *((void *)v2 + 3);
  id v47 = (id)*((void *)v2 + 2);
  uint64_t v12 = *((void *)v2 + 4);
  uint64_t v11 = *((void *)v2 + 5);
  uint64_t v13 = *((unsigned __int8 *)v2 + 48);
  uint64_t v44 = (void *)*((void *)v2 + 7);
  uint64_t v43 = *((void *)v2 + 8);
  uint64_t v45 = *((void *)v2 + 9);
  long long v14 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v14((char *)&v38 - v15, a1, a2, v9);
  if (swift_dynamicCast())
  {
    long long v16 = v48;
    char v17 = v49;
    unint64_t v18 = *((void *)&v49 + 1);
    switch(*((void *)&v49 + 1))
    {
      case 0:
        char v19 = v10 == 0;
        outlined consume of AccessibilityActionKind.ActionKind(v48, *((uint64_t *)&v48 + 1), v49, 0);
        uint64_t v21 = *((void *)&v16 + 1);
        uint64_t v20 = v16;
        char v22 = v17;
        unint64_t v23 = 0;
        goto LABEL_15;
      case 1:
        char v19 = v10 == 1;
        outlined consume of AccessibilityActionKind.ActionKind(v48, *((uint64_t *)&v48 + 1), v49, 1uLL);
        uint64_t v21 = *((void *)&v16 + 1);
        uint64_t v20 = v16;
        char v22 = v17;
        unint64_t v23 = 1;
        goto LABEL_15;
      case 2:
        char v19 = v10 == 2;
        outlined consume of AccessibilityActionKind.ActionKind(v48, *((uint64_t *)&v48 + 1), v49, 2uLL);
        uint64_t v21 = *((void *)&v16 + 1);
        uint64_t v20 = v16;
        char v22 = v17;
        unint64_t v23 = 2;
        goto LABEL_15;
      case 3:
        char v19 = v10 == 3;
        outlined consume of AccessibilityActionKind.ActionKind(v48, *((uint64_t *)&v48 + 1), v49, 3uLL);
        uint64_t v21 = *((void *)&v16 + 1);
        uint64_t v20 = v16;
        char v22 = v17;
        unint64_t v23 = 3;
        goto LABEL_15;
      case 4:
        char v19 = v10 == 4;
        outlined consume of AccessibilityActionKind.ActionKind(v48, *((uint64_t *)&v48 + 1), v49, 4uLL);
        uint64_t v21 = *((void *)&v16 + 1);
        uint64_t v20 = v16;
        char v22 = v17;
        unint64_t v23 = 4;
        goto LABEL_15;
      default:
        if (v10 < 5)
        {
          outlined consume of AccessibilityActionKind.ActionKind(v48, *((uint64_t *)&v48 + 1), v49, *((unint64_t *)&v49 + 1));
          goto LABEL_7;
        }
        long long v35 = v46;
        char v36 = (char)v47;
        outlined copy of AccessibilityActionKind.ActionKind(v46, *((uint64_t *)&v46 + 1), (char)v47, v10);
        outlined copy of AccessibilityActionKind.ActionKind(v16, *((uint64_t *)&v16 + 1), v17, v18);
        LOBYTE(v48) = v36 & 1;
        char v19 = static Text.== infix(_:_:)();
        outlined consume of AccessibilityActionKind.ActionKind(v16, *((uint64_t *)&v16 + 1), v17, v18);
        outlined consume of AccessibilityActionKind.ActionKind(v35, *((uint64_t *)&v35 + 1), v36, v10);
        uint64_t v21 = *((void *)&v16 + 1);
        uint64_t v20 = v16;
        char v22 = v17;
        unint64_t v23 = v18;
LABEL_15:
        outlined consume of AccessibilityActionKind.ActionKind(v20, v21, v22, v23);
        break;
    }
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v14)(v7, a1, a2);
    if (swift_dynamicCast())
    {
      long long v24 = v61;
      uint64_t v26 = *((void *)&v63 + 1);
      uint64_t v25 = v63;
      char v27 = v64;
      long long v38 = v65;
      long long v48 = v61;
      long long v49 = v62;
      char v28 = v62;
      uint64_t v39 = v62;
      long long v50 = v63;
      uint64_t v41 = *((void *)&v63 + 1);
      uint64_t v42 = v63;
      v51[0] = v64;
      uint64_t v40 = v64;
      *(_OWORD *)&v51[1] = v65;
      v51[3] = v66;
      long long v61 = v46;
      *(void *)&long long v62 = v47;
      *((void *)&v62 + 1) = v10;
      *(void *)&long long v63 = v12;
      *((void *)&v63 + 1) = v11;
      unsigned __int8 v64 = v13;
      *(void *)&long long v65 = v44;
      *((void *)&v65 + 1) = v43;
      uint64_t v66 = v45;
      unint64_t v29 = *((void *)&v49 + 1);
      outlined copy of AccessibilityActionKind.ActionKind(v48, *((uint64_t *)&v48 + 1), v28, *((unint64_t *)&v49 + 1));
      outlined copy of Environment<AppIntentExecutor?>.Content(v25, v26, v27);
      id v47 = (id)v38;
      swift_retain();
      char v19 = specialized static AccessibilityAppIntentAction.== infix(_:_:)((uint64_t *)&v48, (uint64_t *)&v61);
      long long v30 = v50;
      char v31 = v51[0];
      char v32 = (void *)v51[1];
      outlined consume of AccessibilityActionKind.ActionKind(v48, *((uint64_t *)&v48 + 1), v49, *((unint64_t *)&v49 + 1));
      outlined consume of Environment<AppIntentExecutor?>.Content(v30, *((uint64_t *)&v30 + 1), v31);
      swift_release();

      outlined consume of AccessibilityActionKind.ActionKind(v24, *((uint64_t *)&v24 + 1), v39, v29);
      outlined consume of Environment<AppIntentExecutor?>.Content(v42, v41, v40);
      swift_release();
    }
    else
    {
      memset(v51, 0, sizeof(v51));
      long long v50 = 0u;
      long long v49 = 0u;
      long long v48 = 0u;
      long long v52 = v46;
      id v53 = v47;
      unint64_t v54 = v10;
      uint64_t v55 = v12;
      uint64_t v56 = v11;
      uint64_t v33 = v44;
      uint64_t v57 = v13;
      long long v58 = v44;
      uint64_t v59 = v43;
      uint64_t v60 = v45;
      outlined copy of AccessibilityActionKind.ActionKind(v46, *((uint64_t *)&v46 + 1), (char)v47, v10);
      outlined copy of Environment<AppIntentExecutor?>.Content(v12, v11, v13);
      id v34 = v33;
      swift_retain();
      outlined release of (AccessibilityAppIntentAction?, AccessibilityAppIntentAction?)((uint64_t)&v48);
LABEL_7:
      char v19 = 0;
    }
  }
  return v19 & 1;
}

uint64_t protocol witness for AccessibilityKindActionProvider.kind.getter in conformance AccessibilityAppIntentAction@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  unint64_t v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of AccessibilityActionKind.ActionKind(v2, v3, v4, v5);
}

BOOL protocol witness for AccessibilityAction.impliedRole(for:) in conformance AccessibilityAppIntentAction(uint64_t a1)
{
  return AccessibilityAppIntentAction.impliedRole(for:)(a1);
}

uint64_t CodableAccessibilityAction.ActionKind.encode(to:)(void *a1)
{
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDE0];
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityAction.ActionKind.CustomCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys, (uint64_t)&unk_1ED44A6F0, MEMORY[0x1E4FBBDE0]);
  uint64_t v49 = v4;
  uint64_t v45 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  long long v48 = (char *)&v33 - v5;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys, (uint64_t)&unk_1ED44A800, v3);
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v44 = (char *)&v33 - v7;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityAction.ActionKind.DeleteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys, (uint64_t)&unk_1ED44A780, v3);
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v41 = (char *)&v33 - v9;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityAction.ActionKind.MagicTapCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys, (uint64_t)&unk_1ED44A7E0, v3);
  uint64_t v39 = *(void *)(v10 - 8);
  uint64_t v40 = v10;
  MEMORY[0x1F4188790](v10);
  long long v38 = (char *)&v33 - v11;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityAction.ActionKind.EscapeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys, (uint64_t)&unk_1ED44A7A0, v3);
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  MEMORY[0x1F4188790](v12);
  long long v35 = (char *)&v33 - v13;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityAction.ActionKind.DefaultCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys, (uint64_t)&unk_1ED44A7C0, v3);
  uint64_t v34 = v14;
  uint64_t v33 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  long long v16 = (char *)&v33 - v15;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityAction.ActionKind.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys, (uint64_t)&unk_1ED44A660, v3);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v51 = v17;
  uint64_t v52 = v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v33 - v19;
  uint64_t v21 = *(void *)(v1 + 8);
  long long v50 = *(void **)v1;
  __int16 v22 = *(_WORD *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch((char)v22)
  {
    case -5:
      LOBYTE(v53) = 4;
      lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys();
      unint64_t v23 = v44;
      uint64_t v24 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v26 = v46;
      uint64_t v25 = v47;
      goto LABEL_7;
    case -4:
      LOBYTE(v53) = 3;
      lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys();
      unint64_t v23 = v41;
      uint64_t v24 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v26 = v42;
      uint64_t v25 = v43;
      goto LABEL_7;
    case -3:
      LOBYTE(v53) = 2;
      lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys();
      unint64_t v23 = v38;
      uint64_t v24 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v26 = v39;
      uint64_t v25 = v40;
      goto LABEL_7;
    case -2:
      LOBYTE(v53) = 1;
      lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys();
      unint64_t v23 = v35;
      uint64_t v24 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v26 = v36;
      uint64_t v25 = v37;
LABEL_7:
      (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
      goto LABEL_9;
    case -1:
      LOBYTE(v53) = 0;
      lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys();
      uint64_t v24 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v34);
LABEL_9:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v20, v24);
      break;
    default:
      uint64_t v27 = v45;
      LOBYTE(v53) = 5;
      char v28 = v50;
      outlined copy of AccessibilityText.Storage(v50, v21, v22 & 1);
      lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys();
      unint64_t v29 = v48;
      uint64_t v30 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      id v53 = v28;
      uint64_t v54 = v21;
      __int16 v55 = v22 & 0x101;
      lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText();
      uint64_t v31 = v49;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v31);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v20, v30);
      uint64_t result = outlined copy of CodableAccessibilityAction.ActionKind((uint64_t)v50, v21, v22, (uint64_t (*)(uint64_t, uint64_t, void))outlined consume of AccessibilityText.Storage);
      break;
  }
  return result;
}

uint64_t CodableAccessibilityAction.ActionKind.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  long long v58 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDC0];
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityAction.ActionKind.CustomCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys, (uint64_t)&unk_1ED44A6F0, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v54 = v4;
  uint64_t v55 = v5;
  MEMORY[0x1F4188790](v4);
  long long v62 = (char *)&v43 - v6;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys, (uint64_t)&unk_1ED44A800, v3);
  uint64_t v52 = *(void *)(v7 - 8);
  uint64_t v53 = v7;
  MEMORY[0x1F4188790](v7);
  long long v61 = (char *)&v43 - v8;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityAction.ActionKind.DeleteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys, (uint64_t)&unk_1ED44A780, v3);
  uint64_t v50 = *(void *)(v9 - 8);
  uint64_t v51 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v57 = (char *)&v43 - v10;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityAction.ActionKind.MagicTapCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys, (uint64_t)&unk_1ED44A7E0, v3);
  uint64_t v48 = *(void *)(v11 - 8);
  uint64_t v49 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v60 = (char *)&v43 - v12;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityAction.ActionKind.EscapeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys, (uint64_t)&unk_1ED44A7A0, v3);
  uint64_t v46 = *(void *)(v13 - 8);
  uint64_t v47 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v56 = (char *)&v43 - v14;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityAction.ActionKind.DefaultCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys, (uint64_t)&unk_1ED44A7C0, v3);
  uint64_t v16 = v15;
  uint64_t v45 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v43 - v17;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityAction.ActionKind.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys, (uint64_t)&unk_1ED44A660, v3);
  uint64_t v20 = v19;
  uint64_t v59 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  __int16 v22 = (char *)&v43 - v21;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys();
  uint64_t v23 = v66;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v24 = (uint64_t)a1;
  if (!v23)
  {
    uint64_t v25 = v18;
    uint64_t v27 = v60;
    uint64_t v26 = v61;
    char v28 = v62;
    uint64_t v44 = v24;
    uint64_t v66 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v66 + 16) == 1)
    {
      switch(*(unsigned char *)(v66 + 32))
      {
        case 1:
          LOBYTE(v63) = 1;
          lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys();
          long long v35 = v56;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v46 + 8))(v35, v47);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v59 + 8))(v22, v20);
          long long v29 = 0uLL;
          __int16 v30 = 254;
          break;
        case 2:
          LOBYTE(v63) = 2;
          lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v27, v49);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v59 + 8))(v22, v20);
          long long v29 = 0uLL;
          __int16 v30 = 253;
          break;
        case 3:
          LOBYTE(v63) = 3;
          lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys();
          uint64_t v36 = v57;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v50 + 8))(v36, v51);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v59 + 8))(v22, v20);
          long long v29 = 0uLL;
          __int16 v30 = 252;
          break;
        case 4:
          LOBYTE(v63) = 4;
          lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v52 + 8))(v26, v53);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v59 + 8))(v22, v20);
          long long v29 = 0uLL;
          __int16 v30 = 251;
          break;
        case 5:
          LOBYTE(v63) = 5;
          lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText();
          long long v38 = v28;
          uint64_t v39 = v54;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v40 = v59;
          (*(void (**)(char *, uint64_t))(v55 + 8))(v38, v39);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v40 + 8))(v22, v20);
          long long v29 = v63;
          if (v65) {
            __int16 v41 = 256;
          }
          else {
            __int16 v41 = 0;
          }
          __int16 v30 = v41 | v64;
          break;
        default:
          LOBYTE(v63) = 0;
          lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v45 + 8))(v25, v16);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v59 + 8))(v22, v20);
          long long v29 = 0uLL;
          __int16 v30 = 255;
          break;
      }
      uint64_t v24 = v44;
      uint64_t v42 = v58;
      *long long v58 = v29;
      *((_WORD *)v42 + 8) = v30;
    }
    else
    {
      uint64_t v31 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v32 = v20;
      uint64_t v34 = v33;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      void *v34 = &type metadata for CodableAccessibilityAction.ActionKind;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v31 - 8) + 104))(v34, *MEMORY[0x1E4FBBA70], v31);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v22, v32);
      uint64_t v24 = v44;
    }
  }
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t CodableAccessibilityAction.encode(to:)(void *a1)
{
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityAction.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys, (uint64_t)&unk_1ED44A840, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v17 - v5;
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  __int16 v9 = *((_WORD *)v1 + 8);
  uint64_t v10 = v1[3];
  uint64_t v19 = v1[4];
  uint64_t v20 = v10;
  int v28 = *((unsigned __int8 *)v1 + 40);
  long long v21 = *((_OWORD *)v1 + 3);
  uint64_t v18 = v1[8];
  uint64_t v11 = a1[3];
  uint64_t v12 = a1;
  uint64_t v14 = v13;
  __swift_project_boxed_opaque_existential_1(v12, v11);
  lazy protocol witness table accessor for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v23 = v7;
  uint64_t v24 = v8;
  __int16 v25 = v9;
  char v29 = 0;
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind and conformance CodableAccessibilityAction.ActionKind();
  uint64_t v15 = v22;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v15)
  {
    uint64_t v23 = v20;
    uint64_t v24 = v19;
    LOBYTE(v25) = v28;
    long long v26 = v21;
    uint64_t v27 = v18;
    char v29 = 1;
    lazy protocol witness table accessor for type AppIntentAction and conformance AppIntentAction();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v14);
}

void CodableAccessibilityAction.init(from:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  long long v26 = a2;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityAction.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys, (uint64_t)&unk_1ED44A840, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v21 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v9 = v6;
    char v33 = 0;
    lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind and conformance CodableAccessibilityAction.ActionKind();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v10 = v28;
    __int16 v11 = v29;
    char v33 = 1;
    uint64_t v12 = v27;
    outlined copy of CodableAccessibilityAction.ActionKind(v27, v28, v29, (uint64_t (*)(uint64_t, uint64_t, void))outlined copy of AccessibilityText.Storage);
    lazy protocol witness table accessor for type AppIntentAction and conformance AppIntentAction();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
    uint64_t v13 = v27;
    uint64_t v22 = v27;
    uint64_t v24 = v28;
    char v14 = v29;
    int v32 = v29;
    uint64_t v15 = v31;
    long long v25 = v30;
    uint64_t v16 = v12;
    outlined copy of CodableAccessibilityAction.ActionKind(v12, v10, v11, (uint64_t (*)(uint64_t, uint64_t, void))outlined copy of AccessibilityText.Storage);
    uint64_t v17 = v13;
    uint64_t v18 = v24;
    outlined copy of Environment<AppIntentExecutor?>.Content(v17, v24, v14);
    id v23 = (id)v25;
    swift_retain();
    long long v21 = outlined consume of AccessibilityText.Storage;
    outlined copy of CodableAccessibilityAction.ActionKind(v12, v10, v11, (uint64_t (*)(uint64_t, uint64_t, void))outlined consume of AccessibilityText.Storage);
    uint64_t v19 = v26;
    uint64_t *v26 = v16;
    v19[1] = v10;
    *((_WORD *)v19 + 8) = v11;
    uint64_t v20 = v22;
    v19[3] = v22;
    v19[4] = v18;
    LOBYTE(v18) = v32;
    *((unsigned char *)v19 + 40) = v32;
    *((_OWORD *)v19 + 3) = v25;
    v19[8] = v15;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined copy of CodableAccessibilityAction.ActionKind(v16, v10, v11, (uint64_t (*)(uint64_t, uint64_t, void))v21);
    outlined consume of Environment<AppIntentExecutor?>.Content(v20, v24, v18);
    swift_release();
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityAction.ActionKind.CodingKeys()
{
  uint64_t result = 0x746C7561666564;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x657061637365;
      break;
    case 2:
      uint64_t result = 0x706154636967616DLL;
      break;
    case 3:
      uint64_t result = 0x6574656C6564;
      break;
    case 4:
      uint64_t result = 0x756E654D776F6873;
      break;
    case 5:
      uint64_t result = 0x6D6F74737563;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityAction.ActionKind.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CodableAccessibilityAction.ActionKind.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityAction.ActionKind.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityAction.ActionKind.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAccessibilityAction.ActionKind@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return CodableAccessibilityAction.ActionKind.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityAction.ActionKind(void *a1)
{
  return CodableAccessibilityAction.ActionKind.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityAction.CodingKeys()
{
  if (*v0) {
    return 0x746E65746E69;
  }
  else {
    return 1684957547;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityAction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CodableAccessibilityAction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

void protocol witness for Decodable.init(from:) in conformance CodableAccessibilityAction(void *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityAction(void *a1)
{
  return CodableAccessibilityAction.encode(to:)(a1);
}

uint64_t AccessibilityAppIntentHandler.perform(value:)@<X0>(unsigned char *a1@<X8>)
{
  type metadata accessor for MainActor();
  static Semantics.v7.getter();
  uint64_t result = static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)();
  *a1 = 2;
  return result;
}

double AccessibilityAppIntentHandler.asCustomAction(category:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 40);
  char v7 = *(unsigned char *)(v2 + 48);
  uint64_t v8 = *(void *)(v2 + 72);
  if (v4 >= 5)
  {
    long long v21 = *(_OWORD *)(v2 + 56);
    uint64_t v16 = *(void *)(v2 + 144);
    unint64_t v17 = a1[3];
    uint64_t v18 = a1[2];
    uint64_t v19 = a1[1];
    uint64_t v20 = *a1;
    uint64_t v10 = *(void *)(v2 + 8);
    uint64_t v9 = *(void *)v2;
    uint64_t v11 = *(void *)(v2 + 16) & 1;
    outlined copy of AccessibilityActionKind.ActionKind(*(void *)v2, v10, *(void *)(v2 + 16), v4);
  }
  else
  {
    unint64_t v4 = *(void *)(v2 + 136);
    if (!v4)
    {
      double result = 0.0;
      *(_OWORD *)(a2 + 25) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    }
    long long v21 = *(_OWORD *)(v2 + 56);
    uint64_t v16 = *(void *)(v2 + 144);
    unint64_t v17 = a1[3];
    uint64_t v18 = a1[2];
    uint64_t v19 = a1[1];
    uint64_t v20 = *a1;
    uint64_t v9 = *(void *)(v2 + 112);
    uint64_t v10 = *(void *)(v2 + 120);
    uint64_t v11 = *(void *)(v2 + 128) & 1;
    outlined copy of Text.Storage(v9, v10, *(unsigned char *)(v2 + 128) & 1);
    swift_bridgeObjectRetain();
  }
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
  *(void *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  uint64_t v13 = swift_allocObject();
  *(void *)a2 = v13;
  *(void *)(v13 + 16) = v9;
  *(void *)(v13 + 24) = v10;
  *(void *)(v13 + 32) = v11;
  *(void *)(v13 + 40) = v4;
  *(void *)(v13 + 48) = v5;
  *(void *)(v13 + 56) = v6;
  *(unsigned char *)(v13 + 64) = v7;
  *(_OWORD *)(v13 + 72) = v21;
  *(void *)(v13 + 88) = v8;
  *(void *)(v13 + 96) = v20;
  *(void *)(v13 + 104) = v19;
  *(void *)(v13 + 112) = v18;
  *(void *)(v13 + 120) = v17;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 144) = 0u;
  *(void *)(v13 + 160) = v16;
  *(unsigned char *)(v13 + 168) = 1;
  *(unsigned char *)(a2 + 40) = 1;
  outlined copy of Environment<AppIntentExecutor?>.Content(v5, v6, v7);
  id v14 = (id)v21;
  swift_retain();
  outlined copy of AccessibilityActionCategory?(v20, v19, v18, v17);

  swift_retain();
  return result;
}

uint64_t AccessibilityAppIntentHandler.asCombinedAction(name:properties:child:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = a3 & 1;
  uint64_t v8 = *(void *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 40);
  char v10 = *(unsigned char *)(v5 + 48);
  long long v34 = *(_OWORD *)(v5 + 56);
  uint64_t v11 = *(void *)(v5 + 72);
  uint64_t v12 = *(void *)(v5 + 88);
  uint64_t v32 = *(void *)(v5 + 96);
  uint64_t v33 = *(void *)(v5 + 80);
  unint64_t v13 = *(void *)(v5 + 104);
  uint64_t v14 = *(void *)(v5 + 144);
  if (v14)
  {
    uint64_t v15 = a1;
    uint64_t v16 = v7;
    outlined copy of Text.Storage(a1, a2, v7);
    swift_bridgeObjectRetain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v8, v9, v10);
    id v17 = (id)v34;
    swift_retain();
    outlined copy of AccessibilityActionCategory?(v33, v12, v32, v13);
    uint64_t v29 = v14;
    char v18 = v10;
    unint64_t v19 = v13;
  }
  else
  {
    uint64_t v15 = a1;
    uint64_t v27 = v7;
    outlined copy of Text.Storage(a1, a2, v7);
    uint64_t v28 = a4;
    swift_bridgeObjectRetain();
    char v26 = v10;
    outlined copy of Environment<AppIntentExecutor?>.Content(v8, v9, v10);
    id v20 = (id)v34;
    swift_retain();
    unint64_t v19 = v13;
    outlined copy of AccessibilityActionCategory?(v33, v12, v32, v13);
    uint64_t v21 = swift_bridgeObjectRetain();
    uint64_t v22 = specialized AccessibilityProperties.subscript.getter(v21);
    swift_bridgeObjectRelease();
    if (*(void *)(v22 + 16))
    {
      uint64_t v29 = *(void *)(v22 + 32);
      swift_retain();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = 0;
    }
    a4 = v28;
    uint64_t v16 = v27;
    char v18 = v26;
  }
  char v35 = v18;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
  *(void *)(a5 + 24) = v23;
  *(void *)(a5 + 32) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  uint64_t v24 = swift_allocObject();
  *(void *)a5 = v24;
  *(void *)(v24 + 16) = v15;
  *(void *)(v24 + 24) = a2;
  *(void *)(v24 + 32) = v16;
  *(void *)(v24 + 40) = a4;
  *(void *)(v24 + 48) = v8;
  *(void *)(v24 + 56) = v9;
  *(unsigned char *)(v24 + 64) = v35;
  *(_OWORD *)(v24 + 72) = v34;
  *(void *)(v24 + 88) = v11;
  *(void *)(v24 + 96) = v33;
  *(void *)(v24 + 104) = v12;
  *(void *)(v24 + 112) = v32;
  *(void *)(v24 + 120) = v19;
  *(_OWORD *)(v24 + 128) = 0u;
  *(_OWORD *)(v24 + 144) = 0u;
  *(void *)(v24 + 160) = v29;
  *(unsigned char *)(v24 + 168) = 1;
  *(unsigned char *)(a5 + 40) = 1;

  return swift_retain();
}

uint64_t AccessibilityAppIntentHandler.matches<A>(_:)(uint64_t a1, uint64_t a2)
{
  return AccessibilityAppIntentAction.matches<A>(_:)(a1, a2) & 1;
}

uint64_t protocol witness for AccessibilityActionHandler.action.getter in conformance AccessibilityAppIntentHandler@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  unint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  char v8 = *(unsigned char *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 72);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = v8;
  long long v12 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)(a1 + 56) = v12;
  *(void *)(a1 + 72) = v9;
  outlined copy of AccessibilityActionKind.ActionKind(v2, v3, v4, v5);
  outlined copy of Environment<AppIntentExecutor?>.Content(v6, v7, v8);
  id v10 = (id)v12;

  return swift_retain();
}

uint64_t protocol witness for AccessibilityActionHandler.category.getter in conformance AccessibilityAppIntentHandler@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[10];
  uint64_t v3 = v1[11];
  uint64_t v4 = v1[12];
  unint64_t v5 = v1[13];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of AccessibilityActionCategory?(v2, v3, v4, v5);
}

uint64_t protocol witness for AccessibilityActionHandler.label.getter in conformance AccessibilityAppIntentHandler()
{
  uint64_t v1 = v0[14];
  outlined copy of Text?(v1, v0[15], v0[16], v0[17]);
  return v1;
}

uint64_t protocol witness for AccessibilityActionHandler.image.getter in conformance AccessibilityAppIntentHandler()
{
  return swift_retain();
}

uint64_t protocol witness for AccessibilityActionHandler.asCombinedAction(name:properties:child:) in conformance AccessibilityAppIntentHandler@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return AccessibilityAppIntentHandler.asCombinedAction(name:properties:child:)(a1, a2, a3 & 1, a4, a5);
}

double protocol witness for AccessibilityActionHandler.asCodableAction(in:) in conformance AccessibilityAppIntentHandler@<D0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 152) == 1)
  {
    AccessibilityAppIntentAction.asCodableAction(in:)(a1);
  }
  else
  {
    *(void *)(a1 + 64) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t View.accessibilityAction(_:lnAction:perform:)(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  unint64_t v12 = a1[3];
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAppIntentAction>, (uint64_t)&type metadata for AccessibilityAppIntentAction, MEMORY[0x1E4FBBE00]);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_18834BB80;
  *(void *)(v14 + 32) = v9;
  *(void *)(v14 + 40) = v10;
  *(void *)(v14 + 48) = v11;
  *(void *)(v14 + 56) = v12;
  *(void *)(v14 + 64) = KeyPath;
  *(void *)(v14 + 72) = 0;
  *(unsigned char *)(v14 + 80) = 0;
  *(void *)(v14 + 88) = a2;
  *(void *)(v14 + 96) = a3;
  *(void *)(v14 + 104) = a4;
  type metadata accessor for MutableBox<[AccessibilityAppIntentAction]>(0, &lazy cache variable for type metadata for MutableBox<[AccessibilityAppIntentAction]>, &lazy cache variable for type metadata for [AccessibilityAppIntentAction], (uint64_t)&type metadata for AccessibilityAppIntentAction, MEMORY[0x1E4F3F398]);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  uint64_t v20 = v15;
  outlined copy of AccessibilityActionKind.ActionKind(v9, v10, v11, v12);
  id v16 = a2;
  swift_retain();
  MEMORY[0x18C113660](&v20, a5, &type metadata for AccessibilityArchivableAttachmentModifier, a6);
  return swift_release();
}

uint64_t View.accessibilityAction(named:lnAction:perform:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16 = a3 & 1;
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAppIntentAction>, (uint64_t)&type metadata for AccessibilityAppIntentAction, MEMORY[0x1E4FBBE00]);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_18834BB80;
  *(void *)(v18 + 32) = a1;
  *(void *)(v18 + 40) = a2;
  *(void *)(v18 + 48) = v16;
  *(void *)(v18 + 56) = a4;
  *(void *)(v18 + 64) = KeyPath;
  *(void *)(v18 + 72) = 0;
  *(unsigned char *)(v18 + 80) = 0;
  *(void *)(v18 + 88) = a5;
  *(void *)(v18 + 96) = a6;
  *(void *)(v18 + 104) = a7;
  type metadata accessor for MutableBox<[AccessibilityAppIntentAction]>(0, &lazy cache variable for type metadata for MutableBox<[AccessibilityAppIntentAction]>, &lazy cache variable for type metadata for [AccessibilityAppIntentAction], (uint64_t)&type metadata for AccessibilityAppIntentAction, MEMORY[0x1E4F3F398]);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v18;
  uint64_t v23 = v19;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  id v20 = a5;
  swift_retain();
  MEMORY[0x18C113660](&v23, a8, &type metadata for AccessibilityArchivableAttachmentModifier, a9);
  return swift_release();
}

uint64_t ModifiedContent<>.accessibilityAction(_:lnAction:perform:)@<X0>(_OWORD *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  long long v11 = a1[1];
  v14[0] = *a1;
  v14[1] = v11;
  v15[0] = swift_getKeyPath();
  v15[1] = 0;
  char v16 = 0;
  id v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  id v12 = a2;
  swift_retain();
  ModifiedContent<>.append(kind:intent:)((uint64_t *)v14, v15, a5, a6);
  swift_release();

  return swift_release();
}

uint64_t ModifiedContent<>.append(kind:intent:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v22 = a2[1];
  uint64_t v23 = *a2;
  char v21 = *((unsigned char *)a2 + 16);
  long long v26 = *(_OWORD *)(a2 + 3);
  uint64_t v7 = a2[5];
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  id v12 = (char **)(*(void *)(v4 + *(int *)(a3 + 36)) + 16);
  swift_beginAccess();
  char v28 = *((unsigned char *)a2 + 16);
  long long v27 = *(_OWORD *)a2;
  unint64_t v13 = *v12;
  swift_retain();
  outlined copy of AccessibilityActionKind.ActionKind(v8, v9, v10, v11);
  outlined retain of Environment<AppIntentExecutor?>((uint64_t)&v27);
  id v14 = (id)v26;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *id v12 = v13;
  id v20 = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v13 + 2) + 1, 1, v13);
    *id v12 = v13;
  }
  unint64_t v17 = *((void *)v13 + 2);
  unint64_t v16 = *((void *)v13 + 3);
  if (v17 >= v16 >> 1)
  {
    unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v13);
    *id v20 = v13;
  }
  *((void *)v13 + 2) = v17 + 1;
  uint64_t v18 = &v13[80 * v17];
  *((void *)v18 + 4) = v8;
  *((void *)v18 + 5) = v9;
  *((void *)v18 + 6) = v10;
  *((void *)v18 + 7) = v11;
  *((void *)v18 + 8) = v23;
  *((void *)v18 + 9) = v22;
  v18[80] = v21 & 1;
  *(_OWORD *)(v18 + 88) = v26;
  *((void *)v18 + 13) = v7;
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a4, v25, a3);
}

uint64_t ModifiedContent<>.accessibilityAction(named:lnAction:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  v21[0] = a1;
  v21[1] = a2;
  char v17 = a3 & 1;
  v21[2] = a3 & 1;
  v21[3] = a4;
  v22[0] = swift_getKeyPath();
  v22[1] = 0;
  char v23 = 0;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  id v18 = a5;
  swift_retain();
  ModifiedContent<>.append(kind:intent:)(v21, v22, a8, a9);
  swift_release();

  swift_release();

  return outlined consume of AccessibilityActionKind.ActionKind(a1, a2, v17, a4);
}

void static AccessibilityArchivableAttachmentModifier._makeView(modifier:inputs:body:)(long long *a1@<X1>, void (*a2)(long long *__return_ptr, uint64_t, long long *)@<X2>, void *a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  long long v6 = a1[3];
  long long v26 = a1[2];
  long long v27 = v6;
  long long v28 = a1[4];
  int v29 = *((_DWORD *)a1 + 20);
  long long v7 = a1[1];
  long long v24 = *a1;
  long long v25 = v7;
  *(void *)&long long v18 = v6;
  DWORD2(v18) = DWORD2(v6);
  uint64_t v8 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (v8)
  {
    type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityArchivableAttachmentModifier>, (uint64_t)&type metadata for AccessibilityArchivableAttachmentModifier, MEMORY[0x1E4F3F590]);
    int v15 = _GraphValue.value.getter();
    long long v20 = v26;
    long long v21 = v27;
    long long v22 = v28;
    int v23 = v29;
    *((void *)&v18 + 1) = *((void *)&v24 + 1);
    long long v19 = v25;
    DWORD1(v18) = _ViewInputs.environment.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type AccessibilityArchivableAttachmentModifier.ArchivableTransform and conformance AccessibilityArchivableAttachmentModifier.ArchivableTransform();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    specialized static _ArchivableViewModifier.makeArchivableView(modifier:inputs:body:)(v15, (uint64_t)&v24, a2, a3);
  }
  else
  {
    long long v16 = a1[3];
    long long v20 = a1[2];
    long long v21 = v16;
    long long v22 = a1[4];
    int v23 = *((_DWORD *)a1 + 20);
    long long v17 = a1[1];
    long long v18 = *a1;
    long long v19 = v17;
    ((void (*)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a2)(v8, &v18, v9, v10, v11, v12, v13, v14);
  }
}

uint64_t AccessibilityArchivableAttachmentModifier.ArchivableTransform.value.getter()
{
  AGGraphGetValue();
  if (EnvironmentValues.accessibilityEnabled.getter())
  {
    uint64_t v0 = *(void *)AGGraphGetValue();
    swift_beginAccess();
    uint64_t v1 = *(void *)(v0 + 16);
    uint64_t v2 = *(void *)(v1 + 16);
    if (v2)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v3 = v1 + 56;
      uint64_t v4 = (char *)MEMORY[0x1E4FBC860];
      while (2)
      {
        uint64_t v36 = v4;
        uint64_t v5 = *(void *)(v3 - 24);
        uint64_t v6 = *(void *)(v3 - 16);
        uint64_t v7 = *(void *)(v3 - 8);
        unint64_t v8 = *(void *)v3;
        uint64_t v10 = *(void *)(v3 + 8);
        uint64_t v9 = *(void *)(v3 + 16);
        char v11 = *(unsigned char *)(v3 + 24);
        long long v37 = *(_OWORD *)(v3 + 32);
        uint64_t v12 = *(void *)(v3 + 48);
        AGGraphGetValue();
        uint64_t v35 = v2;
        switch(v8)
        {
          case 0uLL:
            char v13 = v11;
            outlined copy of AccessibilityActionKind.ActionKind(v5, v6, v7, 0);
            outlined copy of Environment<AppIntentExecutor?>.Content(v10, v9, v11);
            swift_retain();
            id v14 = (id)v37;
            swift_retain();
            swift_retain();
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            __int16 v15 = 255;
            goto LABEL_12;
          case 1uLL:
            char v13 = v11;
            outlined copy of AccessibilityActionKind.ActionKind(v5, v6, v7, 1uLL);
            outlined copy of Environment<AppIntentExecutor?>.Content(v10, v9, v11);
            swift_retain();
            id v17 = (id)v37;
            swift_retain();
            swift_retain();
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            __int16 v15 = 254;
            goto LABEL_12;
          case 2uLL:
            char v13 = v11;
            outlined copy of AccessibilityActionKind.ActionKind(v5, v6, v7, 2uLL);
            outlined copy of Environment<AppIntentExecutor?>.Content(v10, v9, v11);
            swift_retain();
            id v18 = (id)v37;
            swift_retain();
            swift_retain();
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            __int16 v15 = 253;
            goto LABEL_12;
          case 3uLL:
            char v13 = v11;
            outlined copy of AccessibilityActionKind.ActionKind(v5, v6, v7, 3uLL);
            outlined copy of Environment<AppIntentExecutor?>.Content(v10, v9, v11);
            swift_retain();
            id v19 = (id)v37;
            swift_retain();
            swift_retain();
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            __int16 v15 = 252;
            goto LABEL_12;
          case 4uLL:
            char v13 = v11;
            outlined copy of AccessibilityActionKind.ActionKind(v5, v6, v7, 4uLL);
            outlined copy of Environment<AppIntentExecutor?>.Content(v10, v9, v11);
            swift_retain();
            id v20 = (id)v37;
            swift_retain();
            swift_retain();
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            __int16 v15 = 251;
LABEL_12:
            __int16 v32 = v15;
            char v21 = v13;
            goto LABEL_13;
          default:
            swift_retain();
            swift_retain();
            outlined copy of AccessibilityActionKind.ActionKind(v5, v6, v7, v8);
            char v31 = v11;
            outlined copy of Environment<AppIntentExecutor?>.Content(v10, v9, v11);
            id v16 = (id)v37;
            swift_retain();
            swift_retain();
            swift_retain();
            outlined copy of AccessibilityActionKind.ActionKind(v5, v6, v7, v8);
            AccessibilityText.init(_:environment:idiom:)();
            if ((_BYTE)v40 == 0xFF)
            {
              swift_release();
              swift_release();
              outlined consume of AccessibilityActionKind.ActionKind(v5, v6, v7, v8);
              outlined consume of Environment<AppIntentExecutor?>.Content(v10, v9, v31);
              swift_release();

              uint64_t v4 = v36;
            }
            else
            {
              uint64_t v33 = v38;
              uint64_t v34 = v39;
              __int16 v32 = v40 & 0x101;
              char v21 = v31;
LABEL_13:
              char v22 = v7;
              uint64_t v23 = v6;
              outlined copy of Environment<AppIntentExecutor?>.Content(v10, v9, v21);
              id v24 = (id)v37;
              swift_retain();
              swift_release();
              swift_release();
              outlined consume of AccessibilityActionKind.ActionKind(v5, v23, v22, v8);
              outlined consume of Environment<AppIntentExecutor?>.Content(v10, v9, v21);
              swift_release();

              uint64_t v4 = v36;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v36 + 2) + 1, 1, v36);
              }
              uint64_t v2 = v35;
              unint64_t v26 = *((void *)v4 + 2);
              unint64_t v25 = *((void *)v4 + 3);
              long long v27 = v37;
              if (v26 >= v25 >> 1)
              {
                int v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v4);
                long long v27 = v37;
                uint64_t v4 = v29;
              }
              *((void *)v4 + 2) = v26 + 1;
              long long v28 = &v4[72 * v26];
              *((void *)v28 + 4) = v33;
              *((void *)v28 + 5) = v34;
              *((_WORD *)v28 + 24) = v32;
              *((void *)v28 + 7) = v10;
              *((void *)v28 + 8) = v9;
              v28[72] = v21;
              *((_OWORD *)v28 + 5) = v27;
              *((void *)v28 + 12) = v12;
            }
            v3 += 80;
            if (--v2) {
              continue;
            }
            swift_bridgeObjectRelease_n();
            break;
        }
        break;
      }
    }
  }
  return swift_getKeyPath();
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityArchivableAttachmentModifier.ArchivableTransform@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = AccessibilityArchivableAttachmentModifier.ArchivableTransform.value.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityArchivableAttachmentModifier()
{
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CodableAccessibilityActionList.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CodableAccessibilityActionList.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CodableAccessibilityActionList.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CodableAccessibilityActionList.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance CodableAccessibilityActionList.CodingKeys, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CodableAccessibilityActionList.CodingKeys(void *a1@<X8>)
{
  *a1 = 0x656761726F7473;
  a1[1] = 0xE700000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityActionList.CodingKeys()
{
  return 0x656761726F7473;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityActionList.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityActionList.CodingKeys, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityActionList.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityActionList.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAccessibilityActionList@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized CodableAccessibilityActionList.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
    *(void *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityActionList(void *a1)
{
  return specialized CodableAccessibilityActionList.encode(to:)(a1, *(void *)(v1 + 24));
}

uint64_t ArchivableAccessibilityActionModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, void *a4@<X8>)
{
  char v7 = a3 & 1;
  outlined copy of Environment<AppIntentExecutor?>.Content(a1, a2, a3 & 1);
  uint64_t v8 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI26CodableAccessibilityActionVG_AF03AnygH0Vs5NeverOTg503_s7d4UI30fgh36ListV7actionsSayAA03AnydE0VGvgAfA0cdR6VXEfU_AF0fghM0VTf1cn_nTf4ngX_n(v8, a1, a2, v7);
  uint64_t v10 = v9;
  outlined consume of Environment<AppIntentExecutor?>.Content(a1, a2, v7);
  swift_bridgeObjectRelease();
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  v14[5] = Dictionary.init(minimumCapacity:)();
  type metadata accessor for MutableBox<[AccessibilityAppIntentAction]>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>, (unint64_t *)&lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4F41090]);
  v14[3] = v11;
  void v14[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<[AnyAccessibilityAction]> and conformance AccessibilityPropertiesEntry<A>();
  v14[0] = v10;
  specialized Dictionary.subscript.setter((uint64_t)v14, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey);
  uint64_t result = AccessibilityAttachment.init(properties:)();
  uint64_t v13 = v14[1];
  *a4 = v14[0];
  a4[1] = v13;
  return result;
}

uint64_t ArchivableAccessibilityActionModifier.encode(to:)(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v15 = a5;
  HIDWORD(v14) = a4;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ArchivableAccessibilityActionModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys, (uint64_t)&unk_1ED462B60, MEMORY[0x1E4FBBDE0]);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v14 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  char v18 = BYTE4(v14) & 1;
  uint64_t v19 = v15;
  lazy protocol witness table accessor for type CodableAccessibilityActionList and conformance CodableAccessibilityActionList();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivableAccessibilityActionModifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivableAccessibilityActionModifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ArchivableAccessibilityActionModifier@<X0>(void *a1@<X8>)
{
  return ArchivableAccessibilityActionModifier.body(content:)(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16), a1);
}

void *protocol witness for Decodable.init(from:) in conformance ArchivableAccessibilityActionModifier@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized ArchivableAccessibilityActionModifier.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
    *(void *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivableAccessibilityActionModifier(void *a1)
{
  return ArchivableAccessibilityActionModifier.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24));
}

double specialized static _ArchivableViewModifier.makeArchivableView(modifier:inputs:body:)@<D0>(int a1@<W0>, uint64_t a2@<X1>, void (*a3)(long long *__return_ptr, uint64_t, long long *)@<X2>, void *a4@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v38)
  {
    long long v12 = *(_OWORD *)(a2 + 32);
    long long v13 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v13;
    long long v38 = *(_OWORD *)a2;
    long long v14 = *(_OWORD *)a2;
    long long v15 = *(_OWORD *)(a2 + 32);
    v39[0] = *(_OWORD *)(a2 + 16);
    v39[1] = v15;
    *(_OWORD *)&v35[16] = v12;
    *(_OWORD *)uint64_t v36 = v40[0];
    *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
    int v41 = *(_DWORD *)(a2 + 80);
    HIDWORD(v34) = HIDWORD(v14);
    outlined retain of _ViewInputs(a2);
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
    *(void *)&long long v34 = v38;
    DWORD2(v34) = DWORD2(v38);
    *(void *)uint64_t v35 = *(void *)&v39[0];
    *(_OWORD *)&v35[8] = *(_OWORD *)((char *)v39 + 8);
    *(void *)&v35[24] = *((void *)&v39[1] + 1);
    *(void *)uint64_t v36 = *(void *)&v40[0];
    *(_OWORD *)&v36[8] = *(_OWORD *)((char *)v40 + 8);
    *(void *)&v36[24] = *((void *)&v40[1] + 1);
    int v37 = v41;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v16 = swift_bridgeObjectRetain();
    a3(&v33, v16, &v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)&long long v34 = *(void *)(a2 + 48);
    DWORD2(v34) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v17 = v34;
      long long v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v18;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v19 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v19;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v34) = a1;
      type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(0, &lazy cache variable for type metadata for _GraphValue<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, (uint64_t)&type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter, MEMORY[0x1E4F3F590]);
      unsigned int v32 = _GraphValue.value.getter();
      long long v20 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v20;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v21 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v21;
      unsigned int v31 = _ViewInputs.animatedPosition()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v22;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v23 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v23;
      unsigned int v24 = _ViewInputs.animatedSize()();
      long long v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v25;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v26 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v26;
      int v27 = _ViewInputs.containerPosition.getter();
      long long v34 = v33;
      uint64_t v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0) {
        int v29 = *MEMORY[0x1E4F4E7A0];
      }
      else {
        int v29 = v28;
      }
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      char v30 = v34;
      *(void *)&long long v34 = __PAIR64__(v32, v17);
      *((void *)&v34 + 1) = __PAIR64__(v24, v31);
      *(_DWORD *)uint64_t v35 = v27;
      *(_DWORD *)&v35[4] = v29;
      v35[8] = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for ArchivableDisplayList<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>();
      lazy protocol witness table accessor for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>(&lazy protocol witness table cache variable for type ArchivableDisplayList<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance ArchivableDisplayList<A>, (void (*)(uint64_t))type metadata accessor for ArchivableDisplayList<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v34) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *a4 = v33;
    double result = *((double *)&v33 + 1);
    a4[1] = *((void *)&v33 + 1);
  }
  else
  {
    LODWORD(v34) = a1;
    long long v8 = *(_OWORD *)(a2 + 32);
    long long v9 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v9;
    int v41 = *(_DWORD *)(a2 + 80);
    long long v10 = *(_OWORD *)(a2 + 16);
    long long v38 = *(_OWORD *)a2;
    v39[0] = v10;
    v39[1] = v8;
    lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
    static ViewModifier.makeView(modifier:inputs:body:)();
  }
  return result;
}

{
  long long v8;
  long long v9;
  long long v10;
  double result;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  uint64_t v16;
  unsigned int v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  unsigned int v24;
  long long v25;
  long long v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  long long v33;
  long long v34;
  unsigned char v35[32];
  unsigned char v36[32];
  int v37;
  long long v38;
  _OWORD v39[2];
  _OWORD v40[2];
  int v41;
  uint64_t v42;

  uint64_t v42 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v38)
  {
    long long v12 = *(_OWORD *)(a2 + 32);
    long long v13 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v13;
    long long v38 = *(_OWORD *)a2;
    long long v14 = *(_OWORD *)a2;
    long long v15 = *(_OWORD *)(a2 + 32);
    v39[0] = *(_OWORD *)(a2 + 16);
    v39[1] = v15;
    *(_OWORD *)&v35[16] = v12;
    *(_OWORD *)uint64_t v36 = v40[0];
    *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
    int v41 = *(_DWORD *)(a2 + 80);
    HIDWORD(v34) = HIDWORD(v14);
    outlined retain of _ViewInputs(a2);
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
    *(void *)&long long v34 = v38;
    DWORD2(v34) = DWORD2(v38);
    *(void *)uint64_t v35 = *(void *)&v39[0];
    *(_OWORD *)&v35[8] = *(_OWORD *)((char *)v39 + 8);
    *(void *)&v35[24] = *((void *)&v39[1] + 1);
    *(void *)uint64_t v36 = *(void *)&v40[0];
    *(_OWORD *)&v36[8] = *(_OWORD *)((char *)v40 + 8);
    *(void *)&v36[24] = *((void *)&v40[1] + 1);
    int v37 = v41;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v16 = swift_bridgeObjectRetain();
    a3(&v33, v16, &v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)&long long v34 = *(void *)(a2 + 48);
    DWORD2(v34) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v17 = v34;
      long long v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v18;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v19 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v19;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v34) = a1;
      type metadata accessor for _GraphValue<ArchivablePlaybackButtonViewModifier>(0, &lazy cache variable for type metadata for _GraphValue<ArchivablePlaybackButtonViewModifier>, (void (*)(uint64_t))type metadata accessor for ArchivablePlaybackButtonViewModifier);
      unsigned int v32 = _GraphValue.value.getter();
      long long v20 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v20;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v21 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v21;
      unsigned int v31 = _ViewInputs.animatedPosition()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v22;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v23 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v23;
      unsigned int v24 = _ViewInputs.animatedSize()();
      long long v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v25;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v26 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v26;
      int v27 = _ViewInputs.containerPosition.getter();
      long long v34 = v33;
      uint64_t v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0) {
        int v29 = *MEMORY[0x1E4F4E7A0];
      }
      else {
        int v29 = v28;
      }
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      char v30 = v34;
      *(void *)&long long v34 = __PAIR64__(v32, v17);
      *((void *)&v34 + 1) = __PAIR64__(v24, v31);
      *(_DWORD *)uint64_t v35 = v27;
      *(_DWORD *)&v35[4] = v29;
      v35[8] = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for ArchivableDisplayList<ArchivablePlaybackButtonViewModifier>();
      lazy protocol witness table accessor for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>(&lazy protocol witness table cache variable for type ArchivableDisplayList<ArchivablePlaybackButtonViewModifier> and conformance ArchivableDisplayList<A>, (void (*)(uint64_t))type metadata accessor for ArchivableDisplayList<ArchivablePlaybackButtonViewModifier>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v34) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *a4 = v33;
    double result = *((double *)&v33 + 1);
    a4[1] = *((void *)&v33 + 1);
  }
  else
  {
    LODWORD(v34) = a1;
    long long v8 = *(_OWORD *)(a2 + 32);
    long long v9 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v9;
    int v41 = *(_DWORD *)(a2 + 80);
    long long v10 = *(_OWORD *)(a2 + 16);
    long long v38 = *(_OWORD *)a2;
    v39[0] = v10;
    v39[1] = v8;
    type metadata accessor for ArchivablePlaybackButtonViewModifier(0);
    lazy protocol witness table accessor for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, (void (*)(uint64_t))type metadata accessor for ArchivablePlaybackButtonViewModifier);
    static ViewModifier.makeView(modifier:inputs:body:)();
  }
  return result;
}

{
  long long v8;
  long long v9;
  long long v10;
  double result;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  uint64_t v16;
  unsigned int v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  unsigned int v24;
  long long v25;
  long long v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  long long v33;
  long long v34;
  unsigned char v35[32];
  unsigned char v36[32];
  int v37;
  long long v38;
  _OWORD v39[2];
  _OWORD v40[2];
  int v41;
  uint64_t v42;

  uint64_t v42 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v38)
  {
    long long v12 = *(_OWORD *)(a2 + 32);
    long long v13 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v13;
    long long v38 = *(_OWORD *)a2;
    long long v14 = *(_OWORD *)a2;
    long long v15 = *(_OWORD *)(a2 + 32);
    v39[0] = *(_OWORD *)(a2 + 16);
    v39[1] = v15;
    *(_OWORD *)&v35[16] = v12;
    *(_OWORD *)uint64_t v36 = v40[0];
    *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
    int v41 = *(_DWORD *)(a2 + 80);
    HIDWORD(v34) = HIDWORD(v14);
    outlined retain of _ViewInputs(a2);
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
    *(void *)&long long v34 = v38;
    DWORD2(v34) = DWORD2(v38);
    *(void *)uint64_t v35 = *(void *)&v39[0];
    *(_OWORD *)&v35[8] = *(_OWORD *)((char *)v39 + 8);
    *(void *)&v35[24] = *((void *)&v39[1] + 1);
    *(void *)uint64_t v36 = *(void *)&v40[0];
    *(_OWORD *)&v36[8] = *(_OWORD *)((char *)v40 + 8);
    *(void *)&v36[24] = *((void *)&v40[1] + 1);
    int v37 = v41;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v16 = swift_bridgeObjectRetain();
    a3(&v33, v16, &v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)&long long v34 = *(void *)(a2 + 48);
    DWORD2(v34) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v17 = v34;
      long long v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v18;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v19 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v19;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v34) = a1;
      type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(0, &lazy cache variable for type metadata for _GraphValue<InvalidatableContentModifier>, (uint64_t)&type metadata for InvalidatableContentModifier, MEMORY[0x1E4F3F590]);
      unsigned int v32 = _GraphValue.value.getter();
      long long v20 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v20;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v21 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v21;
      unsigned int v31 = _ViewInputs.animatedPosition()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v22;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v23 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v23;
      unsigned int v24 = _ViewInputs.animatedSize()();
      long long v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v25;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v26 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v26;
      int v27 = _ViewInputs.containerPosition.getter();
      long long v34 = v33;
      uint64_t v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0) {
        int v29 = *MEMORY[0x1E4F4E7A0];
      }
      else {
        int v29 = v28;
      }
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      char v30 = v34;
      *(void *)&long long v34 = __PAIR64__(v32, v17);
      *((void *)&v34 + 1) = __PAIR64__(v24, v31);
      *(_DWORD *)uint64_t v35 = v27;
      *(_DWORD *)&v35[4] = v29;
      v35[8] = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for ArchivableDisplayList<InvalidatableContentModifier>();
      lazy protocol witness table accessor for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>(&lazy protocol witness table cache variable for type ArchivableDisplayList<InvalidatableContentModifier> and conformance ArchivableDisplayList<A>, (void (*)(uint64_t))type metadata accessor for ArchivableDisplayList<InvalidatableContentModifier>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v34) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *a4 = v33;
    double result = *((double *)&v33 + 1);
    a4[1] = *((void *)&v33 + 1);
  }
  else
  {
    LODWORD(v34) = a1;
    long long v8 = *(_OWORD *)(a2 + 32);
    long long v9 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v9;
    int v41 = *(_DWORD *)(a2 + 80);
    long long v10 = *(_OWORD *)(a2 + 16);
    long long v38 = *(_OWORD *)a2;
    v39[0] = v10;
    v39[1] = v8;
    lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
    static ViewModifier.makeView(modifier:inputs:body:)();
  }
  return result;
}

{
  long long v8;
  long long v9;
  long long v10;
  double result;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  uint64_t v16;
  unsigned int v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  unsigned int v24;
  long long v25;
  long long v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  long long v33;
  long long v34;
  unsigned char v35[32];
  unsigned char v36[32];
  int v37;
  long long v38;
  _OWORD v39[2];
  _OWORD v40[2];
  int v41;
  uint64_t v42;

  uint64_t v42 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v38)
  {
    long long v12 = *(_OWORD *)(a2 + 32);
    long long v13 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v13;
    long long v38 = *(_OWORD *)a2;
    long long v14 = *(_OWORD *)a2;
    long long v15 = *(_OWORD *)(a2 + 32);
    v39[0] = *(_OWORD *)(a2 + 16);
    v39[1] = v15;
    *(_OWORD *)&v35[16] = v12;
    *(_OWORD *)uint64_t v36 = v40[0];
    *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
    int v41 = *(_DWORD *)(a2 + 80);
    HIDWORD(v34) = HIDWORD(v14);
    outlined retain of _ViewInputs(a2);
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
    *(void *)&long long v34 = v38;
    DWORD2(v34) = DWORD2(v38);
    *(void *)uint64_t v35 = *(void *)&v39[0];
    *(_OWORD *)&v35[8] = *(_OWORD *)((char *)v39 + 8);
    *(void *)&v35[24] = *((void *)&v39[1] + 1);
    *(void *)uint64_t v36 = *(void *)&v40[0];
    *(_OWORD *)&v36[8] = *(_OWORD *)((char *)v40 + 8);
    *(void *)&v36[24] = *((void *)&v40[1] + 1);
    int v37 = v41;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v16 = swift_bridgeObjectRetain();
    a3(&v33, v16, &v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)&long long v34 = *(void *)(a2 + 48);
    DWORD2(v34) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v17 = v34;
      long long v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v18;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v19 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v19;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v34) = a1;
      type metadata accessor for _GraphValue<ArchivablePlaybackButtonViewModifier>(0, &lazy cache variable for type metadata for _GraphValue<ArchivableLinkModifier>, (void (*)(uint64_t))type metadata accessor for ArchivableLinkModifier);
      unsigned int v32 = _GraphValue.value.getter();
      long long v20 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v20;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v21 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v21;
      unsigned int v31 = _ViewInputs.animatedPosition()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v22;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v23 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v23;
      unsigned int v24 = _ViewInputs.animatedSize()();
      long long v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v25;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v26 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v26;
      int v27 = _ViewInputs.containerPosition.getter();
      long long v34 = v33;
      uint64_t v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0) {
        int v29 = *MEMORY[0x1E4F4E7A0];
      }
      else {
        int v29 = v28;
      }
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      char v30 = v34;
      *(void *)&long long v34 = __PAIR64__(v32, v17);
      *((void *)&v34 + 1) = __PAIR64__(v24, v31);
      *(_DWORD *)uint64_t v35 = v27;
      *(_DWORD *)&v35[4] = v29;
      v35[8] = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for ArchivableDisplayList<ArchivableLinkModifier>();
      lazy protocol witness table accessor for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>(&lazy protocol witness table cache variable for type ArchivableDisplayList<ArchivableLinkModifier> and conformance ArchivableDisplayList<A>, (void (*)(uint64_t))type metadata accessor for ArchivableDisplayList<ArchivableLinkModifier>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v34) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *a4 = v33;
    double result = *((double *)&v33 + 1);
    a4[1] = *((void *)&v33 + 1);
  }
  else
  {
    LODWORD(v34) = a1;
    long long v8 = *(_OWORD *)(a2 + 32);
    long long v9 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v9;
    int v41 = *(_DWORD *)(a2 + 80);
    long long v10 = *(_OWORD *)(a2 + 16);
    long long v38 = *(_OWORD *)a2;
    v39[0] = v10;
    v39[1] = v8;
    type metadata accessor for ArchivableLinkModifier(0);
    lazy protocol witness table accessor for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>((unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, (void (*)(uint64_t))type metadata accessor for ArchivableLinkModifier);
    static ViewModifier.makeView(modifier:inputs:body:)();
  }
  return result;
}

{
  long long v8;
  long long v9;
  long long v10;
  double result;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  uint64_t v16;
  unsigned int v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  unsigned int v24;
  long long v25;
  long long v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  long long v33;
  long long v34;
  unsigned char v35[32];
  unsigned char v36[32];
  int v37;
  long long v38;
  _OWORD v39[2];
  _OWORD v40[2];
  int v41;
  uint64_t v42;

  uint64_t v42 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v38)
  {
    long long v12 = *(_OWORD *)(a2 + 32);
    long long v13 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v13;
    long long v38 = *(_OWORD *)a2;
    long long v14 = *(_OWORD *)a2;
    long long v15 = *(_OWORD *)(a2 + 32);
    v39[0] = *(_OWORD *)(a2 + 16);
    v39[1] = v15;
    *(_OWORD *)&v35[16] = v12;
    *(_OWORD *)uint64_t v36 = v40[0];
    *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
    int v41 = *(_DWORD *)(a2 + 80);
    HIDWORD(v34) = HIDWORD(v14);
    outlined retain of _ViewInputs(a2);
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
    *(void *)&long long v34 = v38;
    DWORD2(v34) = DWORD2(v38);
    *(void *)uint64_t v35 = *(void *)&v39[0];
    *(_OWORD *)&v35[8] = *(_OWORD *)((char *)v39 + 8);
    *(void *)&v35[24] = *((void *)&v39[1] + 1);
    *(void *)uint64_t v36 = *(void *)&v40[0];
    *(_OWORD *)&v36[8] = *(_OWORD *)((char *)v40 + 8);
    *(void *)&v36[24] = *((void *)&v40[1] + 1);
    int v37 = v41;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v16 = swift_bridgeObjectRetain();
    a3(&v33, v16, &v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)&long long v34 = *(void *)(a2 + 48);
    DWORD2(v34) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v17 = v34;
      long long v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v18;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v19 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v19;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v34) = a1;
      type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(0, &lazy cache variable for type metadata for _GraphValue<ArchivableButtonAppIntentModifier>, (uint64_t)&type metadata for ArchivableButtonAppIntentModifier, MEMORY[0x1E4F3F590]);
      unsigned int v32 = _GraphValue.value.getter();
      long long v20 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v20;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v21 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v21;
      unsigned int v31 = _ViewInputs.animatedPosition()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v22;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v23 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v23;
      unsigned int v24 = _ViewInputs.animatedSize()();
      long long v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v25;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v26 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v26;
      int v27 = _ViewInputs.containerPosition.getter();
      long long v34 = v33;
      uint64_t v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0) {
        int v29 = *MEMORY[0x1E4F4E7A0];
      }
      else {
        int v29 = v28;
      }
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      char v30 = v34;
      *(void *)&long long v34 = __PAIR64__(v32, v17);
      *((void *)&v34 + 1) = __PAIR64__(v24, v31);
      *(_DWORD *)uint64_t v35 = v27;
      *(_DWORD *)&v35[4] = v29;
      v35[8] = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for ArchivableDisplayList<ArchivableButtonAppIntentModifier>();
      lazy protocol witness table accessor for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>(&lazy protocol witness table cache variable for type ArchivableDisplayList<ArchivableButtonAppIntentModifier> and conformance ArchivableDisplayList<A>, (void (*)(uint64_t))type metadata accessor for ArchivableDisplayList<ArchivableButtonAppIntentModifier>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v34) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *a4 = v33;
    double result = *((double *)&v33 + 1);
    a4[1] = *((void *)&v33 + 1);
  }
  else
  {
    LODWORD(v34) = a1;
    long long v8 = *(_OWORD *)(a2 + 32);
    long long v9 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v9;
    int v41 = *(_DWORD *)(a2 + 80);
    long long v10 = *(_OWORD *)(a2 + 16);
    long long v38 = *(_OWORD *)a2;
    v39[0] = v10;
    v39[1] = v8;
    lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
    static ViewModifier.makeView(modifier:inputs:body:)();
  }
  return result;
}

{
  long long v8;
  long long v9;
  long long v10;
  double result;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  uint64_t v16;
  unsigned int v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  unsigned int v24;
  long long v25;
  long long v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  long long v33;
  long long v34;
  unsigned char v35[32];
  unsigned char v36[32];
  int v37;
  long long v38;
  _OWORD v39[2];
  _OWORD v40[2];
  int v41;
  uint64_t v42;

  uint64_t v42 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v38)
  {
    long long v12 = *(_OWORD *)(a2 + 32);
    long long v13 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v13;
    long long v38 = *(_OWORD *)a2;
    long long v14 = *(_OWORD *)a2;
    long long v15 = *(_OWORD *)(a2 + 32);
    v39[0] = *(_OWORD *)(a2 + 16);
    v39[1] = v15;
    *(_OWORD *)&v35[16] = v12;
    *(_OWORD *)uint64_t v36 = v40[0];
    *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
    int v41 = *(_DWORD *)(a2 + 80);
    HIDWORD(v34) = HIDWORD(v14);
    outlined retain of _ViewInputs(a2);
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
    *(void *)&long long v34 = v38;
    DWORD2(v34) = DWORD2(v38);
    *(void *)uint64_t v35 = *(void *)&v39[0];
    *(_OWORD *)&v35[8] = *(_OWORD *)((char *)v39 + 8);
    *(void *)&v35[24] = *((void *)&v39[1] + 1);
    *(void *)uint64_t v36 = *(void *)&v40[0];
    *(_OWORD *)&v36[8] = *(_OWORD *)((char *)v40 + 8);
    *(void *)&v36[24] = *((void *)&v40[1] + 1);
    int v37 = v41;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v16 = swift_bridgeObjectRetain();
    a3(&v33, v16, &v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)&long long v34 = *(void *)(a2 + 48);
    DWORD2(v34) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v17 = v34;
      long long v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v18;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v19 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v19;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v34) = a1;
      type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(0, &lazy cache variable for type metadata for _GraphValue<ArchivableToggleAppIntentModifier>, (uint64_t)&type metadata for ArchivableToggleAppIntentModifier, MEMORY[0x1E4F3F590]);
      unsigned int v32 = _GraphValue.value.getter();
      long long v20 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v20;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v21 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v21;
      unsigned int v31 = _ViewInputs.animatedPosition()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v22;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v23 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v23;
      unsigned int v24 = _ViewInputs.animatedSize()();
      long long v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v25;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v26 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v26;
      int v27 = _ViewInputs.containerPosition.getter();
      long long v34 = v33;
      uint64_t v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0) {
        int v29 = *MEMORY[0x1E4F4E7A0];
      }
      else {
        int v29 = v28;
      }
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      char v30 = v34;
      *(void *)&long long v34 = __PAIR64__(v32, v17);
      *((void *)&v34 + 1) = __PAIR64__(v24, v31);
      *(_DWORD *)uint64_t v35 = v27;
      *(_DWORD *)&v35[4] = v29;
      v35[8] = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for ArchivableDisplayList<ArchivableToggleAppIntentModifier>();
      lazy protocol witness table accessor for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>(&lazy protocol witness table cache variable for type ArchivableDisplayList<ArchivableToggleAppIntentModifier> and conformance ArchivableDisplayList<A>, (void (*)(uint64_t))type metadata accessor for ArchivableDisplayList<ArchivableToggleAppIntentModifier>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v34) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *a4 = v33;
    double result = *((double *)&v33 + 1);
    a4[1] = *((void *)&v33 + 1);
  }
  else
  {
    LODWORD(v34) = a1;
    long long v8 = *(_OWORD *)(a2 + 32);
    long long v9 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v9;
    int v41 = *(_DWORD *)(a2 + 80);
    long long v10 = *(_OWORD *)(a2 + 16);
    long long v38 = *(_OWORD *)a2;
    v39[0] = v10;
    v39[1] = v8;
    lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
    static ViewModifier.makeView(modifier:inputs:body:)();
  }
  return result;
}

{
  long long v8;
  long long v9;
  long long v10;
  double result;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  uint64_t v16;
  unsigned int v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  unsigned int v24;
  long long v25;
  long long v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  long long v33;
  long long v34;
  unsigned char v35[32];
  unsigned char v36[32];
  int v37;
  long long v38;
  _OWORD v39[2];
  _OWORD v40[2];
  int v41;
  uint64_t v42;

  uint64_t v42 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v38)
  {
    long long v12 = *(_OWORD *)(a2 + 32);
    long long v13 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v13;
    long long v38 = *(_OWORD *)a2;
    long long v14 = *(_OWORD *)a2;
    long long v15 = *(_OWORD *)(a2 + 32);
    v39[0] = *(_OWORD *)(a2 + 16);
    v39[1] = v15;
    *(_OWORD *)&v35[16] = v12;
    *(_OWORD *)uint64_t v36 = v40[0];
    *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
    int v41 = *(_DWORD *)(a2 + 80);
    HIDWORD(v34) = HIDWORD(v14);
    outlined retain of _ViewInputs(a2);
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
    *(void *)&long long v34 = v38;
    DWORD2(v34) = DWORD2(v38);
    *(void *)uint64_t v35 = *(void *)&v39[0];
    *(_OWORD *)&v35[8] = *(_OWORD *)((char *)v39 + 8);
    *(void *)&v35[24] = *((void *)&v39[1] + 1);
    *(void *)uint64_t v36 = *(void *)&v40[0];
    *(_OWORD *)&v36[8] = *(_OWORD *)((char *)v40 + 8);
    *(void *)&v36[24] = *((void *)&v40[1] + 1);
    int v37 = v41;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v16 = swift_bridgeObjectRetain();
    a3(&v33, v16, &v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)&long long v34 = *(void *)(a2 + 48);
    DWORD2(v34) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v17 = v34;
      long long v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v18;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v19 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v19;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v34) = a1;
      type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(0, &lazy cache variable for type metadata for _GraphValue<ArchivableAccessibilityViewModifier>, (uint64_t)&type metadata for ArchivableAccessibilityViewModifier, MEMORY[0x1E4F3F590]);
      unsigned int v32 = _GraphValue.value.getter();
      long long v20 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v20;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v21 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v21;
      unsigned int v31 = _ViewInputs.animatedPosition()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v22;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v23 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v23;
      unsigned int v24 = _ViewInputs.animatedSize()();
      long long v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v25;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v26 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v26;
      int v27 = _ViewInputs.containerPosition.getter();
      long long v34 = v33;
      uint64_t v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0) {
        int v29 = *MEMORY[0x1E4F4E7A0];
      }
      else {
        int v29 = v28;
      }
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      char v30 = v34;
      *(void *)&long long v34 = __PAIR64__(v32, v17);
      *((void *)&v34 + 1) = __PAIR64__(v24, v31);
      *(_DWORD *)uint64_t v35 = v27;
      *(_DWORD *)&v35[4] = v29;
      v35[8] = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for ArchivableDisplayList<ArchivableAccessibilityViewModifier>();
      lazy protocol witness table accessor for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>(&lazy protocol witness table cache variable for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>, (void (*)(uint64_t))type metadata accessor for ArchivableDisplayList<ArchivableAccessibilityViewModifier>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v34) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *a4 = v33;
    double result = *((double *)&v33 + 1);
    a4[1] = *((void *)&v33 + 1);
  }
  else
  {
    LODWORD(v34) = a1;
    long long v8 = *(_OWORD *)(a2 + 32);
    long long v9 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v9;
    int v41 = *(_DWORD *)(a2 + 80);
    long long v10 = *(_OWORD *)(a2 + 16);
    long long v38 = *(_OWORD *)a2;
    v39[0] = v10;
    v39[1] = v8;
    lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
    static ViewModifier.makeView(modifier:inputs:body:)();
  }
  return result;
}

{
  long long v8;
  long long v9;
  long long v10;
  double result;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  uint64_t v16;
  unsigned int v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  unsigned int v24;
  long long v25;
  long long v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  long long v33;
  long long v34;
  unsigned char v35[32];
  unsigned char v36[32];
  int v37;
  long long v38;
  _OWORD v39[2];
  _OWORD v40[2];
  int v41;
  uint64_t v42;

  uint64_t v42 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v38)
  {
    long long v12 = *(_OWORD *)(a2 + 32);
    long long v13 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v13;
    long long v38 = *(_OWORD *)a2;
    long long v14 = *(_OWORD *)a2;
    long long v15 = *(_OWORD *)(a2 + 32);
    v39[0] = *(_OWORD *)(a2 + 16);
    v39[1] = v15;
    *(_OWORD *)&v35[16] = v12;
    *(_OWORD *)uint64_t v36 = v40[0];
    *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
    int v41 = *(_DWORD *)(a2 + 80);
    HIDWORD(v34) = HIDWORD(v14);
    outlined retain of _ViewInputs(a2);
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
    *(void *)&long long v34 = v38;
    DWORD2(v34) = DWORD2(v38);
    *(void *)uint64_t v35 = *(void *)&v39[0];
    *(_OWORD *)&v35[8] = *(_OWORD *)((char *)v39 + 8);
    *(void *)&v35[24] = *((void *)&v39[1] + 1);
    *(void *)uint64_t v36 = *(void *)&v40[0];
    *(_OWORD *)&v36[8] = *(_OWORD *)((char *)v40 + 8);
    *(void *)&v36[24] = *((void *)&v40[1] + 1);
    int v37 = v41;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v16 = swift_bridgeObjectRetain();
    a3(&v33, v16, &v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)&long long v34 = *(void *)(a2 + 48);
    DWORD2(v34) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v17 = v34;
      long long v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v18;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v19 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v19;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v34) = a1;
      type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(0, &lazy cache variable for type metadata for _GraphValue<ArchivableAccessibilityActionModifier>, (uint64_t)&type metadata for ArchivableAccessibilityActionModifier, MEMORY[0x1E4F3F590]);
      unsigned int v32 = _GraphValue.value.getter();
      long long v20 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v20;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v21 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v21;
      unsigned int v31 = _ViewInputs.animatedPosition()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v22;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v23 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v23;
      unsigned int v24 = _ViewInputs.animatedSize()();
      long long v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)uint64_t v36 = v25;
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 64);
      int v37 = *(_DWORD *)(a2 + 80);
      long long v26 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v35 = v26;
      int v27 = _ViewInputs.containerPosition.getter();
      long long v34 = v33;
      uint64_t v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0) {
        int v29 = *MEMORY[0x1E4F4E7A0];
      }
      else {
        int v29 = v28;
      }
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      char v30 = v34;
      *(void *)&long long v34 = __PAIR64__(v32, v17);
      *((void *)&v34 + 1) = __PAIR64__(v24, v31);
      *(_DWORD *)uint64_t v35 = v27;
      *(_DWORD *)&v35[4] = v29;
      v35[8] = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for ArchivableDisplayList<ArchivableAccessibilityActionModifier>();
      lazy protocol witness table accessor for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>(&lazy protocol witness table cache variable for type ArchivableDisplayList<ArchivableAccessibilityActionModifier> and conformance ArchivableDisplayList<A>, (void (*)(uint64_t))type metadata accessor for ArchivableDisplayList<ArchivableAccessibilityActionModifier>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v34) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *a4 = v33;
    double result = *((double *)&v33 + 1);
    a4[1] = *((void *)&v33 + 1);
  }
  else
  {
    LODWORD(v34) = a1;
    long long v8 = *(_OWORD *)(a2 + 32);
    long long v9 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v9;
    int v41 = *(_DWORD *)(a2 + 80);
    long long v10 = *(_OWORD *)(a2 + 16);
    long long v38 = *(_OWORD *)a2;
    v39[0] = v10;
    v39[1] = v8;
    lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
    static ViewModifier.makeView(modifier:inputs:body:)();
  }
  return result;
}

{
  long long v8;
  long long v9;
  long long v10;
  double result;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  uint64_t v16;
  unsigned int v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  unsigned int v24;
  long long v25;
  long long v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;
  long long v34;
  long long v35;
  unsigned char v36[32];
  unsigned char v37[32];
  int v38;
  long long v39;
  _OWORD v40[2];
  _OWORD v41[2];
  int v42;
  uint64_t v43;

  uint64_t v43 = *MEMORY[0x1E4F143B8];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v39)
  {
    long long v33 = a4;
    long long v12 = *(_OWORD *)(a2 + 32);
    long long v13 = *(_OWORD *)(a2 + 64);
    v41[0] = *(_OWORD *)(a2 + 48);
    v41[1] = v13;
    uint64_t v39 = *(_OWORD *)a2;
    long long v14 = *(_OWORD *)a2;
    long long v15 = *(_OWORD *)(a2 + 32);
    v40[0] = *(_OWORD *)(a2 + 16);
    v40[1] = v15;
    *(_OWORD *)&char v36[16] = v12;
    *(_OWORD *)int v37 = v41[0];
    *(_OWORD *)&v37[16] = *(_OWORD *)(a2 + 64);
    uint64_t v42 = *(_DWORD *)(a2 + 80);
    HIDWORD(v35) = HIDWORD(v14);
    outlined retain of _ViewInputs(a2);
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
    *(void *)&uint64_t v35 = v39;
    DWORD2(v35) = DWORD2(v39);
    *(void *)uint64_t v36 = *(void *)&v40[0];
    *(_OWORD *)&v36[8] = *(_OWORD *)((char *)v40 + 8);
    *(void *)&v36[24] = *((void *)&v40[1] + 1);
    *(void *)int v37 = *(void *)&v41[0];
    *(_OWORD *)&v37[8] = *(_OWORD *)((char *)v41 + 8);
    *(void *)&v37[24] = *((void *)&v41[1] + 1);
    long long v38 = v42;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v16 = swift_bridgeObjectRetain();
    a3(&v34, v16, &v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)&uint64_t v35 = *(void *)(a2 + 48);
    DWORD2(v35) = *(_DWORD *)(a2 + 56);
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      unsigned int v17 = v35;
      long long v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)int v37 = v18;
      *(_OWORD *)&v37[16] = *(_OWORD *)(a2 + 64);
      long long v38 = *(_DWORD *)(a2 + 80);
      long long v19 = *(_OWORD *)(a2 + 16);
      uint64_t v35 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v36 = v19;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v35) = a1;
      type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(0, &lazy cache variable for type metadata for _GraphValue<ArchivableAccessibilityActionModifier>, (uint64_t)&type metadata for ArchivableAccessibilityActionModifier, MEMORY[0x1E4F3F590]);
      unsigned int v32 = _GraphValue.value.getter();
      long long v20 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)int v37 = v20;
      *(_OWORD *)&v37[16] = *(_OWORD *)(a2 + 64);
      long long v38 = *(_DWORD *)(a2 + 80);
      long long v21 = *(_OWORD *)(a2 + 16);
      uint64_t v35 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v36 = v21;
      unsigned int v31 = _ViewInputs.animatedPosition()();
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)int v37 = v22;
      *(_OWORD *)&v37[16] = *(_OWORD *)(a2 + 64);
      long long v38 = *(_DWORD *)(a2 + 80);
      long long v23 = *(_OWORD *)(a2 + 16);
      uint64_t v35 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v36 = v23;
      unsigned int v24 = _ViewInputs.animatedSize()();
      long long v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&char v36[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)int v37 = v25;
      *(_OWORD *)&v37[16] = *(_OWORD *)(a2 + 64);
      long long v38 = *(_DWORD *)(a2 + 80);
      long long v26 = *(_OWORD *)(a2 + 16);
      uint64_t v35 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v36 = v26;
      int v27 = _ViewInputs.containerPosition.getter();
      uint64_t v35 = v34;
      uint64_t v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0) {
        int v29 = *MEMORY[0x1E4F4E7A0];
      }
      else {
        int v29 = v28;
      }
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      char v30 = v35;
      *(void *)&uint64_t v35 = __PAIR64__(v32, v17);
      *((void *)&v35 + 1) = __PAIR64__(v24, v31);
      *(_DWORD *)uint64_t v36 = v27;
      *(_DWORD *)&v36[4] = v29;
      v36[8] = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for ArchivableDisplayList<ArchivableAccessibilityActionModifier>();
      lazy protocol witness table accessor for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>(&lazy protocol witness table cache variable for type ArchivableDisplayList<ArchivableAccessibilityActionModifier> and conformance ArchivableDisplayList<A>, (void (*)(uint64_t))type metadata accessor for ArchivableDisplayList<ArchivableAccessibilityActionModifier>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v35) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *long long v33 = v34;
    double result = *((double *)&v34 + 1);
    v33[1] = *((void *)&v34 + 1);
  }
  else
  {
    LODWORD(v35) = a1;
    long long v8 = *(_OWORD *)(a2 + 32);
    long long v9 = *(_OWORD *)(a2 + 64);
    v41[0] = *(_OWORD *)(a2 + 48);
    v41[1] = v9;
    uint64_t v42 = *(_DWORD *)(a2 + 80);
    long long v10 = *(_OWORD *)(a2 + 16);
    uint64_t v39 = *(_OWORD *)a2;
    v40[0] = v10;
    v40[1] = v8;
    lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
    static ViewModifier.makeView(modifier:inputs:body:)();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityArchivableAttachmentModifier.ArchivableTransform and conformance AccessibilityArchivableAttachmentModifier.ArchivableTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityArchivableAttachmentModifier.ArchivableTransform and conformance AccessibilityArchivableAttachmentModifier.ArchivableTransform;
  if (!lazy protocol witness table cache variable for type AccessibilityArchivableAttachmentModifier.ArchivableTransform and conformance AccessibilityArchivableAttachmentModifier.ArchivableTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityArchivableAttachmentModifier.ArchivableTransform and conformance AccessibilityArchivableAttachmentModifier.ArchivableTransform);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityArchivableAttachmentModifier()
{
  return &protocol witness table for AccessibilityArchivableAttachmentModifier;
}

ValueMetadata *type metadata accessor for AccessibilityArchivableAttachmentModifier()
{
  return &type metadata for AccessibilityArchivableAttachmentModifier;
}

uint64_t sub_187EACBD4()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for AccessibilityArchivableAttachmentModifier.ArchivableTransform()
{
  return &unk_1ED4649C8;
}

ValueMetadata *type metadata accessor for ArchivableAccessibilityActionModifier()
{
  return &type metadata for ArchivableAccessibilityActionModifier;
}

uint64_t destroy for AccessibilityAppIntentAction(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 5uLL)
  {
    outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));

  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityAppIntentAction(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 24);
  if (v4 >= 5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = *(void *)(a2 + 8);
    char v8 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v7, v8);
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  char v11 = *(unsigned char *)(a2 + 48);
  outlined copy of Environment<AppIntentExecutor?>.Content(v9, v10, v11);
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = v11;
  uint64_t v12 = *(void *)(a2 + 72);
  long long v13 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v13;
  *(void *)(a1 + 72) = v12;
  id v14 = (id)v13;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityAppIntentAction(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >= 5uLL)
  {
    if (v4 >= 5)
    {
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = *(void *)(a2 + 8);
      char v12 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v11, v12);
      uint64_t v13 = *(void *)a1;
      uint64_t v14 = *(void *)(a1 + 8);
      char v15 = *(unsigned char *)(a1 + 16);
      *(void *)a1 = v10;
      *(void *)(a1 + 8) = v11;
      *(unsigned char *)(a1 + 16) = v12;
      outlined consume of Text.Storage(v13, v14, v15);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
    }
  }
  else if (v4 >= 5)
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    char v9 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v8, v9);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  uint64_t v16 = *(void *)(a2 + 32);
  uint64_t v17 = *(void *)(a2 + 40);
  char v18 = *(unsigned char *)(a2 + 48);
  outlined copy of Environment<AppIntentExecutor?>.Content(v16, v17, v18);
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v20 = *(void *)(a1 + 40);
  char v21 = *(unsigned char *)(a1 + 48);
  *(void *)(a1 + 32) = v16;
  *(void *)(a1 + 40) = v17;
  *(unsigned char *)(a1 + 48) = v18;
  outlined consume of Environment<AppIntentExecutor?>.Content(v19, v20, v21);
  long long v22 = *(void **)(a2 + 56);
  long long v23 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v22;
  id v24 = v22;

  uint64_t v25 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v25;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AccessibilityAppIntentAction(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 5uLL)
  {
    unint64_t v4 = *(void *)(a2 + 24);
    if (v4 >= 5)
    {
      char v6 = *(unsigned char *)(a2 + 16);
      uint64_t v7 = *(void *)a1;
      uint64_t v8 = *(void *)(a1 + 8);
      char v9 = *(unsigned char *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = v6;
      outlined consume of Text.Storage(v7, v8, v9);
      *(void *)(a1 + 24) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1);
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
LABEL_6:
  char v10 = *(unsigned char *)(a2 + 48);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  char v13 = *(unsigned char *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = v10;
  outlined consume of Environment<AppIntentExecutor?>.Content(v11, v12, v13);
  uint64_t v14 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityAppIntentAction()
{
  return &type metadata for AccessibilityAppIntentAction;
}

uint64_t destroy for AccessibilityAppIntentHandler(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 5uLL)
  {
    outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));

  swift_release();
  if (*(void *)(a1 + 104) >= 3uLL)
  {
    outlined consume of Text.Storage(*(void *)(a1 + 80), *(void *)(a1 + 88), *(unsigned char *)(a1 + 96));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 136))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 112), *(void *)(a1 + 120), *(unsigned char *)(a1 + 128));
    swift_bridgeObjectRelease();
  }

  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityAppIntentHandler(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 24);
  if (v4 >= 5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = *(void *)(a2 + 8);
    char v8 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v7, v8);
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  char v11 = *(unsigned char *)(a2 + 48);
  outlined copy of Environment<AppIntentExecutor?>.Content(v9, v10, v11);
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = v11;
  uint64_t v12 = *(void *)(a2 + 72);
  long long v13 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v13;
  *(void *)(a1 + 72) = v12;
  unint64_t v14 = *(void *)(a2 + 104);
  id v15 = (id)v13;
  swift_retain();
  if (v14 <= 2)
  {
    long long v16 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v16;
    uint64_t v17 = *(void *)(a2 + 136);
    if (!v17)
    {
LABEL_9:
      long long v24 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v24;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v21 = *(void *)(a2 + 80);
    uint64_t v22 = *(void *)(a2 + 88);
    char v23 = *(unsigned char *)(a2 + 96);
    outlined copy of Text.Storage(v21, v22, v23);
    *(void *)(a1 + 80) = v21;
    *(void *)(a1 + 88) = v22;
    *(unsigned char *)(a1 + 96) = v23;
    *(void *)(a1 + 104) = v14;
    swift_bridgeObjectRetain();
    uint64_t v17 = *(void *)(a2 + 136);
    if (!v17) {
      goto LABEL_9;
    }
  }
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a2 + 120);
  char v20 = *(unsigned char *)(a2 + 128);
  outlined copy of Text.Storage(v18, v19, v20);
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  *(unsigned char *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v17;
  swift_bridgeObjectRetain();
LABEL_10:
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityAppIntentHandler(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >= 5uLL)
  {
    if (v4 >= 5)
    {
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = *(void *)(a2 + 8);
      char v12 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v11, v12);
      uint64_t v13 = *(void *)a1;
      uint64_t v14 = *(void *)(a1 + 8);
      char v15 = *(unsigned char *)(a1 + 16);
      *(void *)a1 = v10;
      *(void *)(a1 + 8) = v11;
      *(unsigned char *)(a1 + 16) = v12;
      outlined consume of Text.Storage(v13, v14, v15);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
    }
  }
  else if (v4 >= 5)
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    char v9 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v8, v9);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  uint64_t v16 = *(void *)(a2 + 32);
  uint64_t v17 = *(void *)(a2 + 40);
  char v18 = *(unsigned char *)(a2 + 48);
  outlined copy of Environment<AppIntentExecutor?>.Content(v16, v17, v18);
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v20 = *(void *)(a1 + 40);
  char v21 = *(unsigned char *)(a1 + 48);
  *(void *)(a1 + 32) = v16;
  *(void *)(a1 + 40) = v17;
  *(unsigned char *)(a1 + 48) = v18;
  outlined consume of Environment<AppIntentExecutor?>.Content(v19, v20, v21);
  uint64_t v22 = *(void **)(a2 + 56);
  char v23 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v22;
  id v24 = v22;

  uint64_t v25 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v25;
  swift_retain();
  swift_release();
  long long v26 = (_OWORD *)(a1 + 80);
  int v27 = (_OWORD *)(a2 + 80);
  unint64_t v28 = *(void *)(a1 + 104);
  unint64_t v29 = *(void *)(a2 + 104);
  if (v28 == 2)
  {
    if (v29 <= 2)
    {
LABEL_10:
      long long v30 = *(_OWORD *)(a2 + 96);
      _OWORD *v26 = *v27;
      *(_OWORD *)(a1 + 96) = v30;
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  if (v29 == 2)
  {
    outlined destroy of AccessibilityActionCategory(a1 + 80);
LABEL_18:
    long long v34 = *(_OWORD *)(a2 + 96);
    _OWORD *v26 = *v27;
    *(_OWORD *)(a1 + 96) = v34;
    goto LABEL_19;
  }
  if (v28 < 2)
  {
    if (v29 < 2) {
      goto LABEL_10;
    }
LABEL_15:
    uint64_t v31 = *(void *)(a2 + 80);
    uint64_t v32 = *(void *)(a2 + 88);
    char v33 = *(unsigned char *)(a2 + 96);
    outlined copy of Text.Storage(v31, v32, v33);
    *(void *)(a1 + 80) = v31;
    *(void *)(a1 + 88) = v32;
    *(unsigned char *)(a1 + 96) = v33;
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    swift_bridgeObjectRetain();
    goto LABEL_19;
  }
  if (v29 < 2)
  {
    outlined destroy of Text(a1 + 80);
    goto LABEL_18;
  }
  uint64_t v50 = *(void *)(a2 + 80);
  uint64_t v51 = *(void *)(a2 + 88);
  char v52 = *(unsigned char *)(a2 + 96);
  outlined copy of Text.Storage(v50, v51, v52);
  uint64_t v53 = *(void *)(a1 + 80);
  uint64_t v54 = *(void *)(a1 + 88);
  char v55 = *(unsigned char *)(a1 + 96);
  *(void *)(a1 + 80) = v50;
  *(void *)(a1 + 88) = v51;
  *(unsigned char *)(a1 + 96) = v52;
  outlined consume of Text.Storage(v53, v54, v55);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v35 = (_OWORD *)(a1 + 112);
  uint64_t v36 = (_OWORD *)(a2 + 112);
  uint64_t v37 = *(void *)(a2 + 136);
  if (*(void *)(a1 + 136))
  {
    if (v37)
    {
      uint64_t v38 = *(void *)(a2 + 112);
      uint64_t v39 = *(void *)(a2 + 120);
      char v40 = *(unsigned char *)(a2 + 128);
      outlined copy of Text.Storage(v38, v39, v40);
      uint64_t v41 = *(void *)(a1 + 112);
      uint64_t v42 = *(void *)(a1 + 120);
      char v43 = *(unsigned char *)(a1 + 128);
      *(void *)(a1 + 112) = v38;
      *(void *)(a1 + 120) = v39;
      *(unsigned char *)(a1 + 128) = v40;
      outlined consume of Text.Storage(v41, v42, v43);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 112);
      long long v47 = *(_OWORD *)(a2 + 128);
      *uint64_t v35 = *v36;
      *(_OWORD *)(a1 + 128) = v47;
    }
  }
  else if (v37)
  {
    uint64_t v44 = *(void *)(a2 + 112);
    uint64_t v45 = *(void *)(a2 + 120);
    char v46 = *(unsigned char *)(a2 + 128);
    outlined copy of Text.Storage(v44, v45, v46);
    *(void *)(a1 + 112) = v44;
    *(void *)(a1 + 120) = v45;
    *(unsigned char *)(a1 + 128) = v46;
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v48 = *(_OWORD *)(a2 + 128);
    *uint64_t v35 = *v36;
    *(_OWORD *)(a1 + 128) = v48;
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  return a1;
}

uint64_t outlined destroy of AccessibilityActionCategory(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for AccessibilityAppIntentHandler(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) < 5uLL) {
    goto LABEL_4;
  }
  unint64_t v4 = *(void *)(a2 + 24);
  if (v4 < 5)
  {
    outlined destroy of Text(a1);
LABEL_4:
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    goto LABEL_6;
  }
  char v6 = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
LABEL_6:
  char v10 = *(unsigned char *)(a2 + 48);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  char v13 = *(unsigned char *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = v10;
  outlined consume of Environment<AppIntentExecutor?>.Content(v11, v12, v13);
  uint64_t v14 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  unint64_t v15 = *(void *)(a1 + 104);
  if (v15 == 2)
  {
LABEL_12:
    long long v17 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v17;
    goto LABEL_13;
  }
  unint64_t v16 = *(void *)(a2 + 104);
  if (v16 == 2)
  {
    outlined destroy of AccessibilityActionCategory(a1 + 80);
    goto LABEL_12;
  }
  if (v15 < 2) {
    goto LABEL_12;
  }
  if (v16 < 2)
  {
    outlined destroy of Text(a1 + 80);
    goto LABEL_12;
  }
  char v25 = *(unsigned char *)(a2 + 96);
  uint64_t v26 = *(void *)(a1 + 80);
  uint64_t v27 = *(void *)(a1 + 88);
  char v28 = *(unsigned char *)(a1 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = v25;
  outlined consume of Text.Storage(v26, v27, v28);
  *(void *)(a1 + 104) = v16;
  swift_bridgeObjectRelease();
LABEL_13:
  if (!*(void *)(a1 + 136))
  {
LABEL_17:
    long long v23 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v23;
    goto LABEL_18;
  }
  uint64_t v18 = *(void *)(a2 + 136);
  if (!v18)
  {
    outlined destroy of Text(a1 + 112);
    goto LABEL_17;
  }
  char v19 = *(unsigned char *)(a2 + 128);
  uint64_t v20 = *(void *)(a1 + 112);
  uint64_t v21 = *(void *)(a1 + 120);
  char v22 = *(unsigned char *)(a1 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 128) = v19;
  outlined consume of Text.Storage(v20, v21, v22);
  *(void *)(a1 + 136) = v18;
  swift_bridgeObjectRelease();
LABEL_18:
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_release();
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityAppIntentHandler(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 153)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityAppIntentHandler(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 152) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 153) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 153) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityAppIntentHandler()
{
  return &type metadata for AccessibilityAppIntentHandler;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityAppIntentHandler(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityAppIntentAction(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityAppIntentAction and conformance AccessibilityAppIntentAction();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityAppIntentAction and conformance AccessibilityAppIntentAction()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityAppIntentAction and conformance AccessibilityAppIntentAction;
  if (!lazy protocol witness table cache variable for type AccessibilityAppIntentAction and conformance AccessibilityAppIntentAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAppIntentAction and conformance AccessibilityAppIntentAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityAppIntentAction and conformance AccessibilityAppIntentAction;
  if (!lazy protocol witness table cache variable for type AccessibilityAppIntentAction and conformance AccessibilityAppIntentAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAppIntentAction and conformance AccessibilityAppIntentAction);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ArchivableAccessibilityActionModifier()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for ArchivableAccessibilityActionModifier(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
  a1[2] = lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
  unint64_t result = lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
  a1[3] = result;
  return result;
}

void type metadata accessor for _GraphValue<ArchivablePlaybackButtonViewModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for _GraphValue();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ArchivableDisplayList<ArchivableLinkModifier>()
{
  if (!lazy cache variable for type metadata for ArchivableDisplayList<ArchivableLinkModifier>)
  {
    type metadata accessor for ArchivableLinkModifier(255);
    lazy protocol witness table accessor for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>(&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, (void (*)(uint64_t))type metadata accessor for ArchivableLinkModifier);
    lazy protocol witness table accessor for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>(&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, (void (*)(uint64_t))type metadata accessor for ArchivableLinkModifier);
    lazy protocol witness table accessor for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>((unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, (void (*)(uint64_t))type metadata accessor for ArchivableLinkModifier);
    unint64_t v0 = type metadata accessor for ArchivableDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArchivableDisplayList<ArchivableLinkModifier>);
    }
  }
}

uint64_t outlined copy of AccessibilityActionCategory?(uint64_t result, uint64_t a2, char a3, unint64_t a4)
{
  if (a4 != 2) {
    return outlined copy of AccessibilityActionCategory.Category(result, a2, a3, a4);
  }
  return result;
}

void type metadata accessor for ArchivableDisplayList<ArchivablePlaybackButtonViewModifier>()
{
  if (!lazy cache variable for type metadata for ArchivableDisplayList<ArchivablePlaybackButtonViewModifier>)
  {
    type metadata accessor for ArchivablePlaybackButtonViewModifier(255);
    lazy protocol witness table accessor for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, (void (*)(uint64_t))type metadata accessor for ArchivablePlaybackButtonViewModifier);
    lazy protocol witness table accessor for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, (void (*)(uint64_t))type metadata accessor for ArchivablePlaybackButtonViewModifier);
    lazy protocol witness table accessor for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, (void (*)(uint64_t))type metadata accessor for ArchivablePlaybackButtonViewModifier);
    unint64_t v0 = type metadata accessor for ArchivableDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArchivableDisplayList<ArchivablePlaybackButtonViewModifier>);
    }
  }
}

void type metadata accessor for ArchivableDisplayList<InvalidatableContentModifier>()
{
  if (!lazy cache variable for type metadata for ArchivableDisplayList<InvalidatableContentModifier>)
  {
    lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
    lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
    lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
    unint64_t v0 = type metadata accessor for ArchivableDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArchivableDisplayList<InvalidatableContentModifier>);
    }
  }
}

uint64_t specialized static AccessibilityAppIntentAction.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  unint64_t v5 = a1[3];
  char v6 = (void *)a1[7];
  unint64_t v7 = a2[3];
  uint64_t v8 = (void *)a2[7];
  switch(v5)
  {
    case 0uLL:
      outlined consume of AccessibilityActionKind.ActionKind(*a1, v2, v4, 0);
      if (v7) {
        return 0;
      }
      goto LABEL_14;
    case 1uLL:
      outlined consume of AccessibilityActionKind.ActionKind(*a1, v2, v4, 1uLL);
      if (v7 != 1) {
        return 0;
      }
      goto LABEL_14;
    case 2uLL:
      outlined consume of AccessibilityActionKind.ActionKind(*a1, v2, v4, 2uLL);
      if (v7 != 2) {
        return 0;
      }
      goto LABEL_14;
    case 3uLL:
      outlined consume of AccessibilityActionKind.ActionKind(*a1, v2, v4, 3uLL);
      if (v7 != 3) {
        return 0;
      }
      goto LABEL_14;
    case 4uLL:
      outlined consume of AccessibilityActionKind.ActionKind(*a1, v2, v4, 4uLL);
      if (v7 != 4) {
        return 0;
      }
      goto LABEL_14;
    default:
      if (v7 < 5) {
        return 0;
      }
      uint64_t v9 = *a2;
      uint64_t v10 = a2[1];
      uint64_t v11 = a2[2];
      outlined copy of AccessibilityActionKind.ActionKind(*a2, v10, v11, v7);
      outlined copy of AccessibilityActionKind.ActionKind(v3, v2, v4, v5);
      char v16 = static Text.== infix(_:_:)();
      outlined consume of AccessibilityActionKind.ActionKind(v9, v10, v11, v7);
      outlined consume of AccessibilityActionKind.ActionKind(v3, v2, v4, v5);
      if ((v16 & 1) == 0) {
        return 0;
      }
LABEL_14:
      type metadata accessor for NSObject();
      id v12 = v6;
      id v13 = v8;
      char v14 = static NSObject.== infix(_:_:)();

      return v14 & 1;
  }
}

uint64_t specialized static AccessibilityAppIntentHandler.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  unint64_t v7 = *(void *)(a1 + 104);
  uint64_t v30 = *(void *)(a1 + 120);
  uint64_t v31 = *(void *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 136);
  uint64_t v29 = *(void *)(a1 + 128);
  uint64_t v25 = *(void *)(a1 + 144);
  int v23 = *(unsigned __int8 *)(a1 + 152);
  char v9 = *(unsigned char *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a2 + 88);
  uint64_t v12 = *(void *)(a2 + 96);
  unint64_t v14 = *(void *)(a2 + 104);
  uint64_t v27 = *(void *)(a2 + 120);
  uint64_t v28 = *(void *)(a2 + 112);
  uint64_t v15 = *(void *)(a2 + 136);
  uint64_t v26 = *(void *)(a2 + 128);
  uint64_t v24 = *(void *)(a2 + 144);
  int v22 = *(unsigned __int8 *)(a2 + 152);
  long long v16 = *(_OWORD *)(a1 + 16);
  v36[0] = *(_OWORD *)a1;
  v36[1] = v16;
  v36[2] = *(_OWORD *)(a1 + 32);
  char v37 = v2;
  long long v38 = *(_OWORD *)(a1 + 56);
  uint64_t v39 = v3;
  long long v17 = *(_OWORD *)(a2 + 16);
  v32[0] = *(_OWORD *)a2;
  v32[1] = v17;
  v32[2] = *(_OWORD *)(a2 + 32);
  char v33 = v9;
  long long v34 = *(_OWORD *)(a2 + 56);
  uint64_t v35 = v10;
  if ((specialized static AccessibilityAppIntentAction.== infix(_:_:)((uint64_t *)v36, (uint64_t *)v32) & 1) == 0) {
    return 0;
  }
  if (v7 == 2)
  {
    if (v14 == 2) {
      goto LABEL_4;
    }
LABEL_10:
    outlined copy of AccessibilityActionCategory?(v11, v13, v12, v14);
    outlined consume of AccessibilityActionCategory?(v4, v5, v6, v7);
    outlined consume of AccessibilityActionCategory?(v11, v13, v12, v14);
    return 0;
  }
  if (v14 == 2)
  {
    outlined copy of AccessibilityActionCategory.Category(v4, v5, v6, v7);
    outlined copy of AccessibilityActionCategory.Category(v4, v5, v6, v7);
    outlined consume of AccessibilityActionCategory.Category(v4, v5, v6, v7);
    goto LABEL_10;
  }
  if (v7)
  {
    if (v7 == 1)
    {
      outlined copy of AccessibilityActionCategory.Category(v4, v5, v6, 1uLL);
      if (v14 != 1) {
        return 0;
      }
    }
    else
    {
      if (v14 < 2)
      {
        outlined copy of AccessibilityActionCategory?(v4, v5, v6, v7);
        outlined consume of AccessibilityActionCategory.Category(v4, v5, v6, v7);
        return 0;
      }
      outlined copy of AccessibilityActionCategory?(v4, v5, v6, v7);
      outlined copy of AccessibilityActionCategory?(v4, v5, v6, v7);
      outlined copy of AccessibilityActionCategory?(v11, v13, v12, v14);
      outlined copy of AccessibilityActionCategory.Category(v4, v5, v6, v7);
      LOBYTE(v36[0]) = v12 & 1;
      char v21 = static Text.== infix(_:_:)();
      outlined consume of AccessibilityActionCategory.Category(v4, v5, v6, v7);
      outlined consume of AccessibilityActionCategory?(v11, v13, v12, v14);
      outlined consume of AccessibilityActionCategory.Category(v4, v5, v6, v7);
      outlined consume of AccessibilityActionCategory?(v4, v5, v6, v7);
      if ((v21 & 1) == 0) {
        return 0;
      }
    }
  }
  else
  {
    outlined copy of AccessibilityActionCategory.Category(v4, v5, v6, 0);
    if (v14) {
      return 0;
    }
  }
LABEL_4:
  if (v8)
  {
    if (!v15) {
      return 0;
    }
    outlined copy of Text?(v31, v30, v29, v8);
    outlined copy of Text?(v31, v30, v29, v8);
    outlined copy of Text?(v28, v27, v26, v15);
    LOBYTE(v36[0]) = v26 & 1;
    char v18 = static Text.== infix(_:_:)();
    outlined consume of Text.Storage(v28, v27, v26 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v31, v30, v29 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text?(v31, v30, v29, v8);
    if ((v18 & 1) == 0) {
      return 0;
    }
  }
  else if (v15)
  {
    return 0;
  }
  if (v25)
  {
    if (v24)
    {
      swift_retain();
      swift_retain();
      char v20 = static Image.== infix(_:_:)();
      swift_release();
      swift_release();
      if (v20) {
        return v23 ^ v22 ^ 1u;
      }
    }
    return 0;
  }
  if (v24) {
    return 0;
  }
  return v23 ^ v22 ^ 1u;
}

double _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI26CodableAccessibilityActionVG_AF03AnygH0Vs5NeverOTg503_s7d4UI30fgh36ListV7actionsSayAA03AnydE0VGvgAfA0cdR6VXEfU_AF0fghM0VTf1cn_nTf4ngX_n(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)&long long v34 = a2;
  *((void *)&v34 + 1) = a3;
  int64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v47 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v47;
    unint64_t v7 = (long long *)(a1 + 32);
    do
    {
      uint64_t v35 = v6;
      int64_t v36 = v5;
      long long v8 = v7[3];
      long long v41 = v7[2];
      long long v42 = v8;
      uint64_t v43 = *((void *)v7 + 8);
      long long v9 = v7[1];
      long long v39 = *v7;
      long long v40 = v9;
      if (a4)
      {
        long long v37 = v34;
        outlined retain of CodableAccessibilityAction((uint64_t)&v39);
        outlined retain of CodableAccessibilityAction((uint64_t)&v39);
        outlined copy of Environment<AppIntentExecutor?>.Content(v34, *((uint64_t *)&v34 + 1), 1);
      }
      else
      {
        outlined retain of CodableAccessibilityAction((uint64_t)&v39);
        outlined copy of Environment<AppIntentExecutor?>.Content(v34, *((uint64_t *)&v34 + 1), 0);
        outlined retain of CodableAccessibilityAction((uint64_t)&v39);
        outlined copy of Environment<AppIntentExecutor?>.Content(v34, *((uint64_t *)&v34 + 1), 0);
        os_log_type_t v10 = static os_log_type_t.fault.getter();
        uint64_t v11 = static Log.runtimeIssuesLog.getter();
        if (os_log_type_enabled(v11, v10))
        {
          uint64_t v12 = swift_slowAlloc();
          uint64_t v13 = swift_slowAlloc();
          *(void *)&long long v37 = v13;
          *(_DWORD *)uint64_t v12 = 136315138;
          *(void *)(v12 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x8000000188327E20, (uint64_t *)&v37);
          _os_log_impl(&dword_1872C6000, v11, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v12, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v13, -1, -1);
          MEMORY[0x18C119C60](v12, -1, -1);
        }

        EnvironmentValues.init()();
        swift_getAtKeyPath();
        outlined consume of Environment<AppIntentExecutor?>.Content(v34, *((uint64_t *)&v34 + 1), 0);
        swift_release();
        swift_release();
        outlined consume of Environment<AppIntentExecutor?>.Content(v34, *((uint64_t *)&v34 + 1), 0);
      }
      long long v14 = v37;
      outlined init with take of CodableAccessibilityAction.ActionKind((uint64_t)&v39, (uint64_t)v44);
      outlined init with take of CodableAccessibilityAction.ActionKind((uint64_t)v44, (uint64_t)&v45);
      if (v46 <= 0xFAu)
      {
        long long v37 = v45;
        __int16 v38 = v46;
        uint64_t v15 = AccessibilityText.text.getter();
        uint64_t v16 = v19;
        uint64_t v18 = v20;
        uint64_t v17 = v21 & 1;
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v18 = 4 - (v46 + 5);
      }
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = v14;
      long long v23 = v42;
      *(_OWORD *)(v22 + 64) = v41;
      *(_OWORD *)(v22 + 80) = v23;
      *(void *)(v22 + 96) = v43;
      long long v24 = v40;
      *(_OWORD *)(v22 + 32) = v39;
      *(_OWORD *)(v22 + 48) = v24;
      Swift::UInt32 v25 = AccessibilityActionHandlerSeed++;
      type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>();
      uint64_t v27 = v26;
      uint64_t v28 = swift_allocObject();
      outlined release of CodableAccessibilityAction((uint64_t)&v39);
      *(void *)(v28 + 16) = v15;
      *(void *)(v28 + 24) = v16;
      *(void *)(v28 + 32) = v17;
      *(void *)(v28 + 40) = v18;
      *(void *)(v28 + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(void *)(v28 + 64) = 0;
      *(void *)(v28 + 72) = 2;
      *(_OWORD *)(v28 + 80) = 0u;
      *(_OWORD *)(v28 + 96) = 0u;
      *(void *)(v28 + 112) = 0;
      *(void *)(v28 + 120) = partial apply for closure #1 in AnyAccessibilityAction.init(_:appIntentExecutor:);
      *(void *)(v28 + 128) = v22;
      *(_DWORD *)(v28 + 136) = v25;
      uint64_t v6 = v35;
      unint64_t v30 = *(void *)(v35 + 16);
      unint64_t v29 = *(void *)(v35 + 24);
      uint64_t v47 = v35;
      if (v30 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1);
        uint64_t v6 = v47;
      }
      *(void *)(v6 + 16) = v30 + 1;
      uint64_t v31 = v6 + 48 * v30;
      *(void *)(v31 + 32) = v28;
      double result = *(double *)&v37;
      *(_OWORD *)(v31 + 40) = v37;
      *(void *)(v31 + 56) = v27;
      *(void *)(v31 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
      *(unsigned char *)(v31 + 72) = 0;
      unint64_t v7 = (long long *)((char *)v7 + 72);
      int64_t v5 = v36 - 1;
    }
    while (v36 != 1);
  }
  return result;
}

uint64_t specialized CodableAccessibilityActionList.encode(to:)(void *a1, uint64_t a2)
{
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityActionList.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys, (uint64_t)&type metadata for CodableAccessibilityActionList.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  long long v8 = (char *)v10 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[1] = a2;
  type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(0, &lazy cache variable for type metadata for [CodableAccessibilityAction], (uint64_t)&type metadata for CodableAccessibilityAction, MEMORY[0x1E4FBB320]);
  _sSay7SwiftUI26CodableAccessibilityActionVGSayxGSesSeRzlWlTm_0(&lazy protocol witness table cache variable for type [CodableAccessibilityAction] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction and conformance CodableAccessibilityAction);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t specialized CodableAccessibilityActionList.init(from:)(void *a1)
{
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityActionList.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys, (uint64_t)&type metadata for CodableAccessibilityActionList.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v10 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v10 - v5;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys();
  swift_retain();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    swift_release_n();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v8 = v10;
    type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(0, &lazy cache variable for type metadata for [CodableAccessibilityAction], (uint64_t)&type metadata for CodableAccessibilityAction, MEMORY[0x1E4FBB320]);
    _sSay7SwiftUI26CodableAccessibilityActionVGSayxGSesSeRzlWlTm_0(&lazy protocol witness table cache variable for type [CodableAccessibilityAction] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction and conformance CodableAccessibilityAction);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v4);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_release();
  }
  return KeyPath;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys);
  }
  return result;
}

uint64_t _sSay7SwiftUI26CodableAccessibilityActionVGSayxGSesSeRzlWlTm_0(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(255, &lazy cache variable for type metadata for [CodableAccessibilityAction], (uint64_t)&type metadata for CodableAccessibilityAction, MEMORY[0x1E4FBB320]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for MutableBox<[AccessibilityAppIntentAction]>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(255, a3, a4, MEMORY[0x1E4FBB320]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<[AnyAccessibilityAction]> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[AnyAccessibilityAction]> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[AnyAccessibilityAction]> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for MutableBox<[AccessibilityAppIntentAction]>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>, (unint64_t *)&lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4F41090]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[AnyAccessibilityAction]> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

uint64_t sub_187EAEEFC()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  __int16 v1 = *(_WORD *)(v0 + 48);
  if (v1 != 251 && (v1 & 0xFC | 2) != 0xFE) {
    outlined consume of AccessibilityText.Storage(*(void **)(v0 + 32), *(void *)(v0 + 40), v1 & 1);
  }
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72));

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187EAEF84()
{
  if (*(void *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 72) >= 3uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 104))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 96));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for ArchivableDisplayList<ArchivableAccessibilityActionModifier>()
{
  if (!lazy cache variable for type metadata for ArchivableDisplayList<ArchivableAccessibilityActionModifier>)
  {
    lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
    lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
    lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
    unint64_t v0 = type metadata accessor for ArchivableDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArchivableDisplayList<ArchivableAccessibilityActionModifier>);
    }
  }
}

void *specialized ArchivableAccessibilityActionModifier.init(from:)(void *a1)
{
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivableAccessibilityActionModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys, (uint64_t)&unk_1ED462B60, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v11 - v6;
  uint64_t v8 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys();
  unint64_t v9 = v8;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type CodableAccessibilityActionList and conformance CodableAccessibilityActionList();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    unint64_t v9 = v11;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v9;
}

unint64_t lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityActionList and conformance CodableAccessibilityActionList()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityActionList and conformance CodableAccessibilityActionList;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityActionList and conformance CodableAccessibilityActionList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityActionList and conformance CodableAccessibilityActionList);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityActionList and conformance CodableAccessibilityActionList;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityActionList and conformance CodableAccessibilityActionList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityActionList and conformance CodableAccessibilityActionList);
  }
  return result;
}

uint64_t outlined release of (AccessibilityAppIntentAction?, AccessibilityAppIntentAction?)(uint64_t a1)
{
  uint64_t v10 = *(void *)(a1 + 80);
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 96);
  unint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 120);
  uint64_t v7 = *(void *)(a1 + 128);
  uint64_t v8 = *(void **)(a1 + 136);
  outlined consume of AccessibilityAppIntentAction?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void **)(a1 + 56));
  outlined consume of AccessibilityAppIntentAction?(v10, v2, v3, v4, v5, v6, v7, v8);
  return a1;
}

void outlined consume of AccessibilityAppIntentAction?(uint64_t a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5, uint64_t a6, char a7, void *a8)
{
  if (a8)
  {
    char v10 = a7 & 1;
    outlined consume of AccessibilityActionKind.ActionKind(a1, a2, a3, a4);
    outlined consume of Environment<AppIntentExecutor?>.Content(a5, a6, v10);
    swift_release();
  }
}

void *type metadata accessor for ArchivableAccessibilityActionModifier.CodingKeys()
{
  return &unk_1ED462B60;
}

void destroy for CodableAccessibilityAction.ActionKind(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 <= 1) {
    outlined consume of AccessibilityText.Storage(*(void **)a1, *(void *)(a1 + 8), v1 != 0);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for CodableAccessibilityAction.ActionKind(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 > 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  }
  else
  {
    BOOL v5 = v4 != 0;
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v7, v4 != 0);
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
  }
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityAction.ActionKind(uint64_t a1, long long *a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
  unsigned int v5 = *((unsigned __int8 *)a2 + 16);
  if (v4 > 1)
  {
    if (v5 <= 1)
    {
      BOOL v12 = v5 != 0;
      uint64_t v13 = *(void **)a2;
      uint64_t v14 = *((void *)a2 + 1);
      outlined copy of AccessibilityText.Storage(*(void **)a2, v14, v5 != 0);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v14;
      *(unsigned char *)(a1 + 16) = v12;
      goto LABEL_6;
    }
LABEL_8:
    long long v15 = *a2;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    *(_OWORD *)a1 = v15;
    return a1;
  }
  if (v5 > 1)
  {
    outlined consume of AccessibilityText.Storage(*(void **)a1, *(void *)(a1 + 8), v4 & 1);
    goto LABEL_8;
  }
  BOOL v6 = v5 != 0;
  uint64_t v7 = *(void **)a2;
  uint64_t v8 = *((void *)a2 + 1);
  outlined copy of AccessibilityText.Storage(*(void **)a2, v8, v5 != 0);
  unint64_t v9 = *(void **)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of AccessibilityText.Storage(v9, v10, v11);
LABEL_6:
  *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityAction.ActionKind(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 > 1) {
    goto LABEL_5;
  }
  unsigned int v5 = *(unsigned __int8 *)(a2 + 16);
  char v6 = v4 & 1;
  if (v5 > 1)
  {
    outlined consume of AccessibilityText.Storage(*(void **)a1, *(void *)(a1 + 8), v6);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    return a1;
  }
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v5 != 0;
  outlined consume of AccessibilityText.Storage(v7, v8, v6);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityAction.ActionKind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 > 1) {
    unsigned int v4 = (v3 ^ 0xFF) + 1;
  }
  else {
    unsigned int v4 = 0;
  }
  if (v4 >= 6) {
    return v4 - 5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityAction.ActionKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_DWORD *)unint64_t result = a2 - 250;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -5 - a2;
    }
  }
  return result;
}

uint64_t getEnumTag for CodableAccessibilityAction.ActionKind(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 > 1) {
    return (v1 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for CodableAccessibilityAction.ActionKind(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(unsigned char *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableAccessibilityAction.ActionKind()
{
  return &type metadata for CodableAccessibilityAction.ActionKind;
}

ValueMetadata *type metadata accessor for CodableAccessibilityActionList.CodingKeys()
{
  return &type metadata for CodableAccessibilityActionList.CodingKeys;
}

uint64_t destroy for CodableAccessibilityAction(uint64_t a1)
{
  __int16 v2 = *(_WORD *)(a1 + 16);
  if (v2 != 251 && (v2 & 0xFC | 2) != 0xFE) {
    outlined consume of AccessibilityText.Storage(*(void **)a1, *(void *)(a1 + 8), v2 & 1);
  }
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));

  return swift_release();
}

uint64_t initializeWithCopy for CodableAccessibilityAction(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *((unsigned __int16 *)a2 + 8);
  if (*((_WORD *)a2 + 8) == 251 || (v4 & 0xFC | 2) == 0xFE)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  }
  else
  {
    unsigned int v12 = v4 >> 8;
    uint64_t v13 = *a2;
    uint64_t v14 = a2[1];
    char v15 = v4 & 1;
    outlined copy of AccessibilityText.Storage((void *)*a2, v14, v4 & 1);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v14;
    *(unsigned char *)(a1 + 16) = v15;
    *(unsigned char *)(a1 + 17) = v12;
  }
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  char v7 = *((unsigned char *)a2 + 40);
  outlined copy of Environment<AppIntentExecutor?>.Content(v5, v6, v7);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  uint64_t v8 = a2[8];
  long long v9 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 48) = v9;
  *(void *)(a1 + 64) = v8;
  id v10 = (id)v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityAction(uint64_t a1, uint64_t *a2)
{
  __int16 v4 = *(_WORD *)(a1 + 16);
  if (v4 != 251 && (v4 & 0xFC | 2) != 0xFE)
  {
    __int16 v18 = *((_WORD *)a2 + 8);
    if (v18 == 251 || (v18 & 0xFC | 2) == 0xFE)
    {
      outlined destroy of AccessibilityText(a1);
      __int16 v19 = *((_WORD *)a2 + 8);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = v19;
      goto LABEL_6;
    }
    uint64_t v23 = *a2;
    uint64_t v24 = a2[1];
    char v25 = v18 & 1;
    outlined copy of AccessibilityText.Storage((void *)*a2, v24, v18 & 1);
    uint64_t v26 = *(void **)a1;
    uint64_t v27 = *(void *)(a1 + 8);
    char v28 = *(unsigned char *)(a1 + 16);
    *(void *)a1 = v23;
    *(void *)(a1 + 8) = v24;
    *(unsigned char *)(a1 + 16) = v25;
    outlined consume of AccessibilityText.Storage(v26, v27, v28);
LABEL_11:
    *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
    goto LABEL_6;
  }
  __int16 v5 = *((_WORD *)a2 + 8);
  if (v5 != 251 && (v5 & 0xFC | 2) != 0xFE)
  {
    uint64_t v20 = (void *)*a2;
    uint64_t v21 = a2[1];
    char v22 = v5 & 1;
    outlined copy of AccessibilityText.Storage((void *)*a2, v21, v5 & 1);
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = v21;
    *(unsigned char *)(a1 + 16) = v22;
    goto LABEL_11;
  }
  long long v6 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  *(_OWORD *)a1 = v6;
LABEL_6:
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  char v9 = *((unsigned char *)a2 + 40);
  outlined copy of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  char v12 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  outlined consume of Environment<AppIntentExecutor?>.Content(v10, v11, v12);
  uint64_t v13 = (void *)a2[6];
  uint64_t v14 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v13;
  id v15 = v13;

  uint64_t v16 = a2[8];
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = v16;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of AccessibilityText(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityAction(uint64_t a1, uint64_t a2)
{
  __int16 v4 = *(_WORD *)(a1 + 16);
  if (v4 != 251 && (v4 & 0xFC | 2) != 0xFE)
  {
    __int16 v5 = *(_WORD *)(a2 + 16);
    if (v5 != 251 && (v5 & 0xFC | 2) != 0xFE)
    {
      char v12 = *(void **)a1;
      uint64_t v13 = *(void *)(a1 + 8);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = v5 & 1;
      outlined consume of AccessibilityText.Storage(v12, v13, v4 & 1);
      *(unsigned char *)(a1 + 17) = HIBYTE(v5) & 1;
      goto LABEL_8;
    }
    outlined destroy of AccessibilityText(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
LABEL_8:
  char v6 = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  char v9 = *(unsigned char *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  uint64_t v10 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityAction(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableAccessibilityAction()
{
  return &type metadata for CodableAccessibilityAction;
}

uint64_t assignWithCopy for ArchivableAccessibilityActionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ArchivableAccessibilityActionModifier(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CodableAccessibilityActionList()
{
  return &type metadata for CodableAccessibilityActionList;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityActionModifier>, ArchivedAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityActionModifier>, ArchivedAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityActionModifier>, ArchivedAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityActionModifier>, ArchivedAttachmentModifier>();
    lazy protocol witness table accessor for type _ViewModifier_Content<ArchivableAccessibilityActionModifier> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityActionModifier>, ArchivedAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityActionModifier>, ArchivedAttachmentModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityActionModifier>, ArchivedAttachmentModifier>)
  {
    type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ArchivableAccessibilityActionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier, (uint64_t)&type metadata for ArchivableAccessibilityActionModifier, MEMORY[0x1E4F408E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityActionModifier>, ArchivedAttachmentModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ArchivableAccessibilityActionModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableAccessibilityActionModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableAccessibilityActionModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ArchivableAccessibilityActionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier, (uint64_t)&type metadata for ArchivableAccessibilityActionModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableAccessibilityActionModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind and conformance CodableAccessibilityAction.ActionKind()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind and conformance CodableAccessibilityAction.ActionKind;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind and conformance CodableAccessibilityAction.ActionKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind and conformance CodableAccessibilityAction.ActionKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind and conformance CodableAccessibilityAction.ActionKind;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind and conformance CodableAccessibilityAction.ActionKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind and conformance CodableAccessibilityAction.ActionKind);
  }
  return result;
}

void type metadata accessor for ArchivableDisplayList<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>()
{
  if (!lazy cache variable for type metadata for ArchivableDisplayList<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>)
  {
    lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
    lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
    lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
    unint64_t v0 = type metadata accessor for ArchivableDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArchivableDisplayList<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>);
    }
  }
}

void type metadata accessor for ArchivableDisplayList<ArchivableButtonAppIntentModifier>()
{
  if (!lazy cache variable for type metadata for ArchivableDisplayList<ArchivableButtonAppIntentModifier>)
  {
    lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
    lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
    lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
    unint64_t v0 = type metadata accessor for ArchivableDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArchivableDisplayList<ArchivableButtonAppIntentModifier>);
    }
  }
}

void type metadata accessor for ArchivableDisplayList<ArchivableToggleAppIntentModifier>()
{
  if (!lazy cache variable for type metadata for ArchivableDisplayList<ArchivableToggleAppIntentModifier>)
  {
    lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
    lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
    lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
    unint64_t v0 = type metadata accessor for ArchivableDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArchivableDisplayList<ArchivableToggleAppIntentModifier>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText;
  if (!lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText;
  if (!lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText);
  }
  return result;
}

void type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for CodableAccessibilityAction.ActionKind.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187EB07FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CodableAccessibilityAction.ActionKind.CodingKeys()
{
  return &unk_1ED44A660;
}

void *type metadata accessor for CodableAccessibilityAction.ActionKind.DefaultCodingKeys()
{
  return &unk_1ED44A7C0;
}

void *type metadata accessor for CodableAccessibilityAction.ActionKind.EscapeCodingKeys()
{
  return &unk_1ED44A7A0;
}

void *type metadata accessor for CodableAccessibilityAction.ActionKind.MagicTapCodingKeys()
{
  return &unk_1ED44A7E0;
}

void *type metadata accessor for CodableAccessibilityAction.ActionKind.DeleteCodingKeys()
{
  return &unk_1ED44A780;
}

void *type metadata accessor for CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys()
{
  return &unk_1ED44A800;
}

unsigned char *storeEnumTagSinglePayload for ArchivableAccessibilityActionModifier.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x187EB0920);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for CodableAccessibilityAction.ActionKind.CustomCodingKeys()
{
  return &unk_1ED44A6F0;
}

unsigned char *storeEnumTagSinglePayload for CodableAccessibilityAction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187EB0A24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CodableAccessibilityAction.CodingKeys()
{
  return &unk_1ED44A840;
}

void type metadata accessor for _ContiguousArrayStorage<AnyAccessibilityAction>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for ArchivableDisplayList<ArchivableAccessibilityViewModifier>()
{
  if (!lazy cache variable for type metadata for ArchivableDisplayList<ArchivableAccessibilityViewModifier>)
  {
    lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
    lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
    lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
    unint64_t v0 = type metadata accessor for ArchivableDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArchivableDisplayList<ArchivableAccessibilityViewModifier>);
    }
  }
}

uint64_t specialized CodableAccessibilityAction.ActionKind.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746C7561666564 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657061637365 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x706154636967616DLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6574656C6564 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x756E654D776F6873 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6D6F74737563 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t specialized CodableAccessibilityAction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684957547 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E65746E69 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t AccessoryLinearGauge.init(configuration:gradient:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  char v12 = *((unsigned char *)a1 + 9);
  char v13 = *((unsigned char *)a1 + 8);
  char v11 = *((unsigned char *)a1 + 10);
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:relativeTo:)();
  ScaledMetric.init(wrappedValue:relativeTo:)();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v9 = swift_getKeyPath();
  uint64_t v5 = swift_getKeyPath();
  uint64_t v6 = swift_getKeyPath();
  uint64_t v7 = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a3 = v15;
  *(unsigned char *)(a3 + 8) = v16;
  *(void *)(a3 + 16) = v17;
  *(unsigned char *)(a3 + 24) = v18;
  *(void *)(a3 + 32) = v19;
  *(unsigned char *)(a3 + 40) = v20;
  *(void *)(a3 + 48) = v15;
  *(unsigned char *)(a3 + 56) = v16;
  *(void *)(a3 + 64) = v17;
  *(unsigned char *)(a3 + 72) = v18;
  *(void *)(a3 + 80) = v19;
  *(unsigned char *)(a3 + 88) = v20;
  *(void *)(a3 + 96) = v4;
  *(unsigned char *)(a3 + 104) = v13;
  *(unsigned char *)(a3 + 105) = v12;
  *(unsigned char *)(a3 + 106) = v11;
  *(void *)(a3 + 112) = a2;
  *(void *)(a3 + 120) = KeyPath;
  *(unsigned char *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = v9;
  *(void *)(a3 + 144) = 0;
  *(unsigned char *)(a3 + 152) = 0;
  *(void *)(a3 + 160) = v5;
  *(unsigned char *)(a3 + 168) = 0;
  *(void *)(a3 + 176) = v6;
  *(unsigned char *)(a3 + 184) = 0;
  *(void *)(a3 + 192) = v7;
  *(unsigned char *)(a3 + 200) = 0;
  *(void *)(a3 + 208) = result;
  *(unsigned char *)(a3 + 216) = 0;
  return result;
}

uint64_t AccessoryLinearGauge.effectiveTint.getter()
{
  uint64_t v1 = *(void *)(v0 + 160);
  char v2 = *(unsigned char *)(v0 + 168);
  if (*(void *)(v0 + 112))
  {
    uint64_t v3 = *(void *)(v0 + 112);
LABEL_3:
    swift_bridgeObjectRetain();
    outlined copy of Environment<Bool>.Content(v1, v2);
    specialized Environment.wrappedValue.getter(v1, v2, v16);
    outlined consume of Environment<Bool>.Content(v1, v2);
    if (LOBYTE(v16[0]) == 1)
    {
      uint64_t v4 = Gradient.reversed.getter();
      swift_bridgeObjectRelease();
      uint64_t v3 = v4;
    }
    static UnitPoint.leading.getter();
    uint64_t v6 = v5;
    uint64_t v8 = v7;
    static UnitPoint.trailing.getter();
    v16[0] = v3;
    v16[1] = v6;
    v16[2] = v8;
    v16[3] = v9;
    v16[4] = v10;
    return AnyShapeStyle.init<A>(_:)();
  }
  uint64_t v13 = *(void *)(v0 + 120);
  uint64_t v14 = *(unsigned __int8 *)(v0 + 128);
  outlined copy of Environment<HoverEffect?>.Content(v13, v14);
  uint64_t v15 = specialized Environment.wrappedValue.getter(v13, v14);
  outlined consume of Environment<AnyShapeStyle?>.Content(v13, v14);
  if (v15)
  {
    AnyShapeStyle.as<A>(type:)();
    swift_release();
    uint64_t v3 = v16[0];
    if (v16[0]) {
      goto LABEL_3;
    }
  }
  outlined copy of Environment<HoverEffect?>.Content(v13, v14);
  uint64_t v11 = specialized Environment.wrappedValue.getter(v13, v14);
  outlined consume of Environment<AnyShapeStyle?>.Content(v13, v14);
  if (v11) {
    return v11;
  }
  v16[0] = static Color.primary.getter();
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t AccessoryLinearGauge.effectiveDotTint.getter()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v13 = *(void *)(v0 + 112);
  char v2 = *(unsigned char *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 144);
  char v5 = *(unsigned char *)(v0 + 152);
  uint64_t v6 = *(void *)(v0 + 176);
  char v7 = *(unsigned char *)(v0 + 184);
  outlined copy of Environment<HoverEffect?>.Content(v6, v7 & 1);
  uint64_t v8 = specialized Environment.wrappedValue.getter(v6, v7 & 1);
  outlined consume of Environment<AnyShapeStyle?>.Content(v6, v7 & 1);
  if (v8) {
    return AnyShapeStyle.init<A>(_:)();
  }
  char v9 = v5 & 1;
  outlined copy of Environment<(Color, Color)?>.Content(v3, v4, v9);
  uint64_t v10 = specialized Environment.wrappedValue.getter(v3, v4, v9);
  outlined consume of Environment<(Color, Color)?>.Content(v3, v4, v9);
  if (v10)
  {
    swift_release();
    return AnyShapeStyle.init<A>(_:)();
  }
  if (v13
    || (outlined copy of Environment<HoverEffect?>.Content(v1, v2 & 1),
        uint64_t v12 = specialized Environment.wrappedValue.getter(v1, v2 & 1),
        outlined consume of Environment<AnyShapeStyle?>.Content(v1, v2 & 1),
        v12)
    && (AnyShapeStyle.as<A>(type:)(), swift_release(), v14))
  {
    swift_bridgeObjectRetain();
    Gradient.color(at:)();
    swift_bridgeObjectRelease();
    return AnyShapeStyle.init<A>(_:)();
  }
  return AccessoryLinearGauge.effectiveTint.getter();
}

__n128 AccessoryLinearGauge.body.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v3 = v1[11];
  long long v49 = v1[10];
  long long v50 = v3;
  v51[0] = v1[12];
  *(_OWORD *)((char *)v51 + 9) = *(long long *)((char *)v1 + 201);
  long long v4 = v1[7];
  long long v45 = v1[6];
  long long v46 = v4;
  long long v5 = v1[9];
  long long v47 = v1[8];
  long long v48 = v5;
  long long v6 = v1[3];
  *(_OWORD *)&v41[16] = v1[2];
  long long v42 = v6;
  long long v7 = v1[5];
  long long v43 = v1[4];
  long long v44 = v7;
  long long v8 = v1[1];
  long long v40 = *v1;
  *(_OWORD *)long long v41 = v8;
  uint64_t v27 = static VerticalAlignment.center.getter();
  closure #1 in AccessoryLinearGauge.body.getter((uint64_t)&v40, (uint64_t)&v36);
  char v26 = v36;
  char v9 = BYTE1(v36);
  uint64_t v29 = *(void *)v37;
  uint64_t v30 = *((void *)&v36 + 1);
  char v28 = v37[8];
  uint64_t v33 = *(void *)&v37[16];
  int v10 = *(_DWORD *)&v37[24];
  char v31 = v37[29];
  char v32 = v37[28];
  char v11 = v39;
  type metadata accessor for ScaledMetric<CGFloat>();
  __n128 v25 = v38;
  long long v36 = v40;
  *(_OWORD *)long long v37 = *(_OWORD *)v41;
  *(_OWORD *)&v37[9] = *(_OWORD *)&v41[9];
  ScaledMetric.wrappedValue.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v21 = v36;
  uint64_t v22 = *(void *)v37;
  uint64_t v23 = *(void *)&v37[24];
  uint64_t v24 = *(void *)&v37[16];
  char v63 = 1;
  char v62 = v9;
  char v59 = v11;
  char v57 = BYTE8(v36);
  char v55 = v37[8];
  uint64_t v34 = v42;
  ScaledMetric.wrappedValue.getter();
  static Font.Weight.semibold.getter();
  LOBYTE(v34) = 2;
  uint64_t v20 = static Font.system(size:weight:design:)();
  uint64_t KeyPath = swift_getKeyPath();
  char v13 = v63;
  char v14 = v62;
  char v15 = v59;
  char v16 = v57;
  char v17 = v55;
  uint64_t v18 = static VerticalAlignment.center.getter();
  v52[0] = v45;
  *(_DWORD *)((char *)v52 + 7) = *(_DWORD *)((char *)&v45 + 7);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v52[1], (uint64_t)&v53, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v53, (uint64_t)&v64, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?);
  char v65 = 1;
  *(void *)a1 = v27;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = v13;
  *(_DWORD *)(a1 + 17) = v34;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)((char *)&v34 + 3);
  *(unsigned char *)(a1 + 24) = v26;
  *(unsigned char *)(a1 + 25) = v14;
  *(_DWORD *)(a1 + 26) = v60;
  *(_WORD *)(a1 + 30) = v61;
  *(void *)(a1 + 32) = v30;
  *(void *)(a1 + 40) = v29;
  *(unsigned char *)(a1 + 48) = v28;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)&v35[3];
  *(_DWORD *)(a1 + 49) = *(_DWORD *)v35;
  *(void *)(a1 + 56) = v33;
  *(_DWORD *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 68) = v32;
  *(unsigned char *)(a1 + 69) = v31;
  __n128 result = v25;
  *(__n128 *)(a1 + 72) = v25;
  *(unsigned char *)(a1 + 88) = v15;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)&v58[3];
  *(_DWORD *)(a1 + 89) = *(_DWORD *)v58;
  *(void *)(a1 + 96) = v21;
  *(unsigned char *)(a1 + 104) = v16;
  *(_DWORD *)(a1 + 105) = *(_DWORD *)v56;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)&v56[3];
  *(void *)(a1 + 112) = v22;
  *(unsigned char *)(a1 + 120) = v17;
  *(_DWORD *)(a1 + 121) = *(_DWORD *)v54;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)&v54[3];
  *(void *)(a1 + 128) = v24;
  *(void *)(a1 + 136) = v23;
  *(void *)(a1 + 144) = KeyPath;
  *(void *)(a1 + 152) = v20;
  *(void *)(a1 + 160) = v18;
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = v65;
  *(unsigned char *)(a1 + 177) = v64;
  return result;
}

float closure #1 in AccessoryLinearGauge.body.getter@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)uint64_t v22 = *(void *)(a1 + 96);
  *(_DWORD *)&v22[7] = *(_DWORD *)(a1 + 103);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v22[9], (uint64_t)&v23, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v23, (uint64_t)&v24, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?);
  char v4 = v24;
  char v5 = v24 & v22[8];
  uint64_t v6 = static Alignment.center.getter();
  uint64_t v8 = v7;
  closure #1 in closure #1 in AccessoryLinearGauge.body.getter(a1, (uint64_t)v16);
  char v9 = v16[0];
  uint64_t v10 = v17;
  float result = v18;
  char v12 = v19;
  char v13 = v20;
  long long v14 = v21;
  char v15 = v22[10];
  *(unsigned char *)a2 = v5;
  *(unsigned char *)(a2 + 1) = v4;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = v9;
  *(void *)(a2 + 32) = v10;
  *(float *)(a2 + 40) = result;
  *(unsigned char *)(a2 + 44) = v12;
  *(unsigned char *)(a2 + 45) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  *(unsigned char *)(a2 + 64) = v15;
  return result;
}

uint64_t closure #1 in closure #1 in AccessoryLinearGauge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v5 = *(void *)(a1 + 144);
  char v6 = *(unsigned char *)(a1 + 152);
  outlined retain of AccessoryLinearGauge(a1);
  outlined copy of Environment<(Color, Color)?>.Content(v4, v5, v6);
  uint64_t v7 = specialized Environment.wrappedValue.getter(v4, v5, v6);
  uint64_t v9 = v8;
  outlined consume of Environment<(Color, Color)?>.Content(v4, v5, v6);
  if (v7)
  {
    swift_release();
    *(void *)&v32[0] = v9;
    uint64_t v10 = AnyShapeStyle.init<A>(_:)();
  }
  else
  {
    long long v11 = *(_OWORD *)(a1 + 176);
    v32[10] = *(_OWORD *)(a1 + 160);
    v32[11] = v11;
    v33[0] = *(_OWORD *)(a1 + 192);
    *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)(a1 + 201);
    long long v12 = *(_OWORD *)(a1 + 112);
    v32[6] = *(_OWORD *)(a1 + 96);
    v32[7] = v12;
    long long v13 = *(_OWORD *)(a1 + 144);
    v32[8] = *(_OWORD *)(a1 + 128);
    v32[9] = v13;
    long long v14 = *(_OWORD *)(a1 + 48);
    v32[2] = *(_OWORD *)(a1 + 32);
    _OWORD v32[3] = v14;
    long long v15 = *(_OWORD *)(a1 + 80);
    v32[4] = *(_OWORD *)(a1 + 64);
    v32[5] = v15;
    long long v16 = *(_OWORD *)(a1 + 16);
    v32[0] = *(_OWORD *)a1;
    v32[1] = v16;
    uint64_t v10 = AccessoryLinearGauge.effectiveTint.getter();
  }
  uint64_t v17 = v10;
  uint64_t v18 = *(void *)(a1 + 192);
  char v19 = *(unsigned char *)(a1 + 200);
  outlined retain of AccessoryLinearGauge(a1);
  outlined copy of Environment<Bool>.Content(v18, v19);
  specialized Environment.wrappedValue.getter(v18, v19, (uint64_t *)v32);
  outlined consume of Environment<Bool>.Content(v18, v19);
  outlined release of AccessoryLinearGauge(a1);
  if ((v32[0] & 2) == 0)
  {
    outlined release of AccessoryLinearGauge(a1);
LABEL_8:
    float v23 = 1.0;
    goto LABEL_9;
  }
  uint64_t v20 = *(void *)(a1 + 208);
  char v21 = *(unsigned char *)(a1 + 216);
  outlined retain of AccessoryLinearGauge(a1);
  outlined copy of Environment<Bool>.Content(v20, v21);
  char v22 = specialized Environment.wrappedValue.getter(v20, v21);
  outlined consume of Environment<Bool>.Content(v20, v21);
  outlined release of AccessoryLinearGauge(a1);
  outlined release of AccessoryLinearGauge(a1);
  if ((v22 & 1) == 0) {
    goto LABEL_8;
  }
  float v23 = 0.3;
LABEL_9:
  char v24 = (_OWORD *)swift_allocObject();
  long long v25 = *(_OWORD *)(a1 + 176);
  v24[11] = *(_OWORD *)(a1 + 160);
  v24[12] = v25;
  v24[13] = *(_OWORD *)(a1 + 192);
  *(_OWORD *)((char *)v24 + 217) = *(_OWORD *)(a1 + 201);
  long long v26 = *(_OWORD *)(a1 + 112);
  v24[7] = *(_OWORD *)(a1 + 96);
  v24[8] = v26;
  long long v27 = *(_OWORD *)(a1 + 144);
  v24[9] = *(_OWORD *)(a1 + 128);
  v24[10] = v27;
  long long v28 = *(_OWORD *)(a1 + 48);
  v24[3] = *(_OWORD *)(a1 + 32);
  unsigned char v24[4] = v28;
  long long v29 = *(_OWORD *)(a1 + 80);
  v24[5] = *(_OWORD *)(a1 + 64);
  v24[6] = v29;
  long long v30 = *(_OWORD *)(a1 + 16);
  v24[1] = *(_OWORD *)a1;
  v24[2] = v30;
  *(unsigned char *)a2 = 1;
  *(void *)(a2 + 8) = v17;
  *(float *)(a2 + 16) = v23;
  *(_WORD *)(a2 + 20) = 256;
  *(void *)(a2 + 24) = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in AccessoryLinearGauge.body.getter;
  *(void *)(a2 + 32) = v24;
  return outlined retain of AccessoryLinearGauge(a1);
}

double implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in AccessoryLinearGauge.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 48);
  long long v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  v5[2] = *(_OWORD *)(a1 + 32);
  int v6 = v2;
  *(void *)&double result = AccessoryLinearGauge.content(_:)((uint64_t *)v5, a2).n128_u64[0];
  return result;
}

__n128 AccessoryLinearGauge.content(_:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  unsigned __int32 v10 = *((_DWORD *)a1 + 12);
  long long v11 = v2[11];
  long long v50 = v2[10];
  long long v51 = v11;
  *(_OWORD *)char v52 = v2[12];
  *(_OWORD *)&v52[9] = *(long long *)((char *)v2 + 201);
  long long v12 = v2[7];
  long long v46 = v2[6];
  long long v47 = v12;
  long long v13 = v2[9];
  long long v48 = v2[8];
  long long v49 = v13;
  long long v14 = v2[3];
  v45[1] = v2[2];
  v45[2] = v14;
  long long v15 = v2[5];
  v45[3] = v2[4];
  v45[4] = v15;
  long long v16 = v2[1];
  long long v44 = *v2;
  v45[0] = v16;
  uint64_t v17 = *(void *)v52;
  char v18 = v52[8];
  outlined retain of AccessoryLinearGauge((uint64_t)&v44);
  outlined retain of AccessoryLinearGauge((uint64_t)&v44);
  outlined copy of Environment<Bool>.Content(v17, v18);
  specialized Environment.wrappedValue.getter(v17, v18, (uint64_t *)&v34);
  outlined consume of Environment<Bool>.Content(v17, v18);
  if ((v34 & 2) == 0)
  {
    outlined release of AccessoryLinearGauge((uint64_t)&v44);
    outlined release of AccessoryLinearGauge((uint64_t)&v44);
LABEL_4:
    double v22 = *(double *)&v46;
    goto LABEL_5;
  }
  uint64_t v19 = *(void *)&v52[16];
  char v20 = v52[24];
  outlined retain of AccessoryLinearGauge((uint64_t)&v44);
  outlined copy of Environment<Bool>.Content(v19, v20);
  char v21 = specialized Environment.wrappedValue.getter(v19, v20);
  outlined consume of Environment<Bool>.Content(v19, v20);
  outlined release of AccessoryLinearGauge((uint64_t)&v44);
  outlined release of AccessoryLinearGauge((uint64_t)&v44);
  outlined release of AccessoryLinearGauge((uint64_t)&v44);
  double v22 = 0.0;
  if ((v21 & 1) == 0) {
    goto LABEL_4;
  }
LABEL_5:
  *(void *)&long long v34 = v4;
  *((void *)&v34 + 1) = v5;
  *(void *)uint64_t v35 = v6;
  *(void *)&v35[8] = v7;
  *(void *)&v35[16] = v8;
  *(void *)&v35[24] = v9;
  v36.n128_u32[0] = v10;
  GeometryProxy.size.getter();
  double v24 = v23;
  long long v34 = v44;
  *(_OWORD *)uint64_t v35 = v45[0];
  *(_OWORD *)&v35[9] = *(_OWORD *)((char *)v45 + 9);
  type metadata accessor for ScaledMetric<CGFloat>();
  ScaledMetric.wrappedValue.getter();
  uint64_t v25 = static Alignment.center.getter();
  uint64_t v27 = v26;
  closure #1 in AccessoryLinearGauge.content(_:)((uint64_t)&v44, (uint64_t)&v34, v22 * (v24 - v33));
  *(void *)a2 = v25;
  *(void *)(a2 + 8) = v27;
  long long v28 = v42;
  *(_OWORD *)(a2 + 144) = v41;
  *(_OWORD *)(a2 + 160) = v28;
  *(_OWORD *)(a2 + 176) = v43;
  long long v29 = v38;
  *(_OWORD *)(a2 + 80) = v37;
  *(_OWORD *)(a2 + 96) = v29;
  long long v30 = v40;
  *(_OWORD *)(a2 + 112) = v39;
  *(_OWORD *)(a2 + 128) = v30;
  long long v31 = *(_OWORD *)v35;
  *(_OWORD *)(a2 + 16) = v34;
  *(_OWORD *)(a2 + 32) = v31;
  __n128 result = v36;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)&v35[16];
  *(__n128 *)(a2 + 64) = result;
  return result;
}

double closure #1 in AccessoryLinearGauge.content(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  static Color.black.getter();
  uint64_t v6 = *(void *)(a1 + 192);
  char v7 = *(unsigned char *)(a1 + 200);
  outlined retain of AccessoryLinearGauge(a1);
  outlined copy of Environment<Bool>.Content(v6, v7);
  specialized Environment.wrappedValue.getter(v6, v7, (uint64_t *)&v44);
  outlined consume of Environment<Bool>.Content(v6, v7);
  if ((v44 & 2) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 208);
    char v9 = *(unsigned char *)(a1 + 216);
    outlined retain of AccessoryLinearGauge(a1);
    outlined copy of Environment<Bool>.Content(v8, v9);
    specialized Environment.wrappedValue.getter(v8, v9);
    outlined consume of Environment<Bool>.Content(v8, v9);
    outlined release of AccessoryLinearGauge(a1);
  }
  outlined release of AccessoryLinearGauge(a1);
  uint64_t v34 = Color.opacity(_:)();
  swift_release();
  long long v10 = *(_OWORD *)(a1 + 16);
  long long v62 = *(_OWORD *)a1;
  v63[0] = v10;
  *(_OWORD *)((char *)v63 + 9) = *(_OWORD *)(a1 + 25);
  long long v11 = *(_OWORD *)(a1 + 16);
  long long v44 = *(_OWORD *)a1;
  *(_OWORD *)long long v45 = v11;
  *(_OWORD *)&v45[9] = *(_OWORD *)(a1 + 25);
  type metadata accessor for ScaledMetric<CGFloat>();
  ScaledMetric.wrappedValue.getter();
  long long v44 = v62;
  *(_OWORD *)long long v45 = v63[0];
  *(_OWORD *)&v45[9] = *(_OWORD *)((char *)v63 + 9);
  ScaledMetric.wrappedValue.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  long long v12 = *(_OWORD *)(a1 + 160);
  long long v13 = *(_OWORD *)(a1 + 192);
  long long v54 = *(_OWORD *)(a1 + 176);
  v55[0] = v13;
  *(_OWORD *)((char *)v55 + 9) = *(_OWORD *)(a1 + 201);
  long long v14 = *(_OWORD *)(a1 + 96);
  long long v15 = *(_OWORD *)(a1 + 128);
  long long v16 = *(_OWORD *)(a1 + 144);
  long long v50 = *(_OWORD *)(a1 + 112);
  long long v51 = v15;
  long long v52 = v16;
  long long v53 = v12;
  long long v17 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v45[16] = *(_OWORD *)(a1 + 32);
  long long v46 = v17;
  long long v18 = *(_OWORD *)(a1 + 80);
  long long v47 = *(_OWORD *)(a1 + 64);
  char v19 = v57;
  uint64_t v30 = v56;
  uint64_t v31 = v58;
  char v20 = v59;
  uint64_t v32 = v60;
  uint64_t v33 = v61;
  long long v48 = v18;
  long long v49 = v14;
  long long v21 = *(_OWORD *)(a1 + 16);
  long long v44 = *(_OWORD *)a1;
  *(_OWORD *)long long v45 = v21;
  uint64_t v22 = AccessoryLinearGauge.effectiveDotTint.getter();
  outlined retain of AccessoryLinearGauge(a1);
  outlined copy of Environment<Bool>.Content(v6, v7);
  specialized Environment.wrappedValue.getter(v6, v7, (uint64_t *)&v44);
  outlined consume of Environment<Bool>.Content(v6, v7);
  if ((v44 & 2) == 0)
  {
    outlined release of AccessoryLinearGauge(a1);
LABEL_6:
    float v26 = 1.0;
    goto LABEL_7;
  }
  uint64_t v23 = *(void *)(a1 + 208);
  char v24 = *(unsigned char *)(a1 + 216);
  outlined retain of AccessoryLinearGauge(a1);
  outlined copy of Environment<Bool>.Content(v23, v24);
  char v25 = specialized Environment.wrappedValue.getter(v23, v24);
  outlined consume of Environment<Bool>.Content(v23, v24);
  outlined release of AccessoryLinearGauge(a1);
  outlined release of AccessoryLinearGauge(a1);
  float v26 = 0.0;
  if ((v25 & 1) == 0) {
    goto LABEL_6;
  }
LABEL_7:
  long long v44 = v62;
  *(_OWORD *)long long v45 = v63[0];
  *(_OWORD *)&v45[9] = *(_OWORD *)((char *)v63 + 9);
  ScaledMetric.wrappedValue.getter();
  long long v44 = v62;
  *(_OWORD *)long long v45 = v63[0];
  *(_OWORD *)&v45[9] = *(_OWORD *)((char *)v63 + 9);
  ScaledMetric.wrappedValue.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v27 = v44;
  uint64_t v28 = *(void *)v45;
  char v39 = BYTE8(v44);
  char v37 = v45[8];
  *(_DWORD *)(a2 + 18) = v42;
  *(_WORD *)(a2 + 22) = v43;
  *(_DWORD *)(a2 + 33) = *(_DWORD *)v35;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)&v35[3];
  *(_DWORD *)(a2 + 52) = *(_DWORD *)&v41[3];
  *(_DWORD *)(a2 + 49) = *(_DWORD *)v41;
  *(_DWORD *)(a2 + 92) = *(_DWORD *)&v40[3];
  *(_DWORD *)(a2 + 89) = *(_DWORD *)v40;
  *(_DWORD *)(a2 + 124) = *(_DWORD *)&v38[3];
  *(_DWORD *)(a2 + 121) = *(_DWORD *)v38;
  *(_DWORD *)(a2 + 137) = *(_DWORD *)v36;
  *(_DWORD *)(a2 + 140) = *(_DWORD *)&v36[3];
  *(void *)a2 = 0xC010000000000000;
  *(void *)(a2 + 8) = v34;
  *(_WORD *)(a2 + 16) = 256;
  *(void *)(a2 + 24) = v30;
  *(unsigned char *)(a2 + 32) = v19;
  *(void *)(a2 + 40) = v31;
  *(unsigned char *)(a2 + 48) = v20;
  *(void *)(a2 + 56) = v32;
  *(void *)(a2 + 64) = v33;
  *(double *)(a2 + 72) = a3;
  *(void *)(a2 + 80) = 0;
  *(unsigned char *)(a2 + 88) = 18;
  *(void *)(a2 + 96) = v22;
  *(float *)(a2 + 104) = v26;
  *(_WORD *)(a2 + 108) = 256;
  *(void *)(a2 + 112) = v27;
  *(unsigned char *)(a2 + 120) = v39;
  *(void *)(a2 + 128) = v28;
  *(unsigned char *)(a2 + 136) = v37;
  double result = *(double *)&v45[16];
  *(_OWORD *)(a2 + 144) = *(_OWORD *)&v45[16];
  *(double *)(a2 + 160) = a3;
  *(void *)(a2 + 168) = 0;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance AccessoryLinearGauge()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

double AccessoryLinearGaugeStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  char v3 = *(unsigned char *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 9);
  char v5 = *(unsigned char *)(a1 + 10);
  uint64_t v13 = *(void *)a1;
  char v14 = v3;
  char v15 = v4;
  char v16 = v5;
  AccessoryLinearGauge.init(configuration:gradient:)(&v13, 0, (uint64_t)v17);
  long long v6 = v17[11];
  a2[10] = v17[10];
  a2[11] = v6;
  a2[12] = v18[0];
  *(_OWORD *)((char *)a2 + 201) = *(_OWORD *)((char *)v18 + 9);
  long long v7 = v17[7];
  a2[6] = v17[6];
  a2[7] = v7;
  long long v8 = v17[9];
  a2[8] = v17[8];
  a2[9] = v8;
  long long v9 = v17[3];
  a2[2] = v17[2];
  a2[3] = v9;
  long long v10 = v17[5];
  a2[4] = v17[4];
  a2[5] = v10;
  double result = *(double *)v17;
  long long v12 = v17[1];
  *a2 = v17[0];
  a2[1] = v12;
  return result;
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in AccessoryLinearGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in LinearDashboardGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for AccessoryLinearGaugeStyle()
{
  return &type metadata for AccessoryLinearGaugeStyle;
}

ValueMetadata *type metadata accessor for LinearDashboardGaugeStyle()
{
  return &type metadata for LinearDashboardGaugeStyle;
}

unint64_t lazy protocol witness table accessor for type AccessoryLinearGauge and conformance AccessoryLinearGauge()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessoryLinearGauge and conformance AccessoryLinearGauge;
  if (!lazy protocol witness table cache variable for type AccessoryLinearGauge and conformance AccessoryLinearGauge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessoryLinearGauge and conformance AccessoryLinearGauge);
  }
  return result;
}

uint64_t destroy for AccessoryLinearGauge(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 64), *(unsigned char *)(a1 + 72));
  swift_bridgeObjectRelease();
  outlined consume of Environment<AnyShapeStyle?>.Content(*(void *)(a1 + 120), *(unsigned __int8 *)(a1 + 128));
  outlined consume of Environment<(Color, Color)?>.Content(*(void *)(a1 + 136), *(void *)(a1 + 144), *(unsigned char *)(a1 + 152));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 160), *(unsigned char *)(a1 + 168));
  outlined consume of Environment<AnyShapeStyle?>.Content(*(void *)(a1 + 176), *(unsigned __int8 *)(a1 + 184));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 192), *(unsigned char *)(a1 + 200));
  uint64_t v2 = *(void *)(a1 + 208);
  char v3 = *(unsigned char *)(a1 + 216);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

uint64_t initializeWithCopy for AccessoryLinearGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(v2 + 16);
  char v7 = *(unsigned char *)(v2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = *(void *)(v2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(v2 + 40);
  uint64_t v8 = *(void *)(v2 + 48);
  char v9 = *(unsigned char *)(v2 + 56);
  outlined copy of Environment<Bool>.Content(v8, v9);
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = v9;
  uint64_t v10 = *(void *)(v2 + 64);
  char v11 = *(unsigned char *)(v2 + 72);
  outlined copy of Environment<Bool>.Content(v10, v11);
  *(void *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = *(void *)(v2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(v2 + 88);
  *(void *)(a1 + 96) = *(void *)(v2 + 96);
  *(_DWORD *)(a1 + 103) = *(_DWORD *)(v2 + 103);
  uint64_t v12 = *(void *)(v2 + 120);
  *(void *)(a1 + 112) = *(void *)(v2 + 112);
  uint64_t v13 = *(unsigned __int8 *)(v2 + 128);
  swift_bridgeObjectRetain();
  outlined copy of Environment<HoverEffect?>.Content(v12, v13);
  *(void *)(a1 + 120) = v12;
  *(unsigned char *)(a1 + 128) = v13;
  uint64_t v14 = *(void *)(v2 + 136);
  uint64_t v15 = *(void *)(v2 + 144);
  char v16 = *(unsigned char *)(v2 + 152);
  outlined copy of Environment<(Color, Color)?>.Content(v14, v15, v16);
  *(void *)(a1 + 136) = v14;
  *(void *)(a1 + 144) = v15;
  *(unsigned char *)(a1 + 152) = v16;
  uint64_t v17 = *(void *)(v2 + 160);
  LOBYTE(v15) = *(unsigned char *)(v2 + 168);
  outlined copy of Environment<Bool>.Content(v17, v15);
  *(void *)(a1 + 160) = v17;
  *(unsigned char *)(a1 + 168) = v15;
  uint64_t v18 = *(void *)(v2 + 176);
  LOBYTE(v15) = *(unsigned char *)(v2 + 184);
  outlined copy of Environment<HoverEffect?>.Content(v18, v15);
  *(void *)(a1 + 176) = v18;
  *(unsigned char *)(a1 + 184) = v15;
  uint64_t v19 = *(void *)(v2 + 192);
  LOBYTE(v15) = *(unsigned char *)(v2 + 200);
  outlined copy of Environment<Bool>.Content(v19, v15);
  *(void *)(a1 + 192) = v19;
  *(unsigned char *)(a1 + 200) = v15;
  uint64_t v20 = *(void *)(v2 + 208);
  LOBYTE(v2) = *(unsigned char *)(v2 + 216);
  outlined copy of Environment<Bool>.Content(v20, v2);
  *(void *)(a1 + 208) = v20;
  *(unsigned char *)(a1 + 216) = v2;
  return a1;
}

uint64_t assignWithCopy for AccessoryLinearGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  uint64_t v8 = *(void *)(v2 + 16);
  char v9 = *(unsigned char *)(v2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  *(void *)(a1 + 32) = *(void *)(v2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(v2 + 40);
  uint64_t v12 = *(void *)(v2 + 48);
  char v13 = *(unsigned char *)(v2 + 56);
  outlined copy of Environment<Bool>.Content(v12, v13);
  uint64_t v14 = *(void *)(a1 + 48);
  char v15 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = v12;
  *(unsigned char *)(a1 + 56) = v13;
  outlined consume of Environment<Bool>.Content(v14, v15);
  uint64_t v16 = *(void *)(v2 + 64);
  char v17 = *(unsigned char *)(v2 + 72);
  outlined copy of Environment<Bool>.Content(v16, v17);
  uint64_t v18 = *(void *)(a1 + 64);
  char v19 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = v16;
  *(unsigned char *)(a1 + 72) = v17;
  outlined consume of Environment<Bool>.Content(v18, v19);
  *(void *)(a1 + 80) = *(void *)(v2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(v2 + 88);
  *(void *)(a1 + 96) = *(void *)(v2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(v2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(v2 + 105);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(v2 + 106);
  *(void *)(a1 + 112) = *(void *)(v2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(v2 + 120);
  unsigned __int8 v21 = *(unsigned char *)(v2 + 128);
  outlined copy of Environment<HoverEffect?>.Content(v20, v21);
  uint64_t v22 = *(void *)(a1 + 120);
  uint64_t v23 = *(unsigned __int8 *)(a1 + 128);
  *(void *)(a1 + 120) = v20;
  *(unsigned char *)(a1 + 128) = v21;
  outlined consume of Environment<AnyShapeStyle?>.Content(v22, v23);
  uint64_t v24 = *(void *)(v2 + 136);
  uint64_t v25 = *(void *)(v2 + 144);
  char v26 = *(unsigned char *)(v2 + 152);
  outlined copy of Environment<(Color, Color)?>.Content(v24, v25, v26);
  uint64_t v27 = *(void *)(a1 + 136);
  uint64_t v28 = *(void *)(a1 + 144);
  char v29 = *(unsigned char *)(a1 + 152);
  *(void *)(a1 + 136) = v24;
  *(void *)(a1 + 144) = v25;
  *(unsigned char *)(a1 + 152) = v26;
  outlined consume of Environment<(Color, Color)?>.Content(v27, v28, v29);
  uint64_t v30 = *(void *)(v2 + 160);
  LOBYTE(v25) = *(unsigned char *)(v2 + 168);
  outlined copy of Environment<Bool>.Content(v30, v25);
  uint64_t v31 = *(void *)(a1 + 160);
  char v32 = *(unsigned char *)(a1 + 168);
  *(void *)(a1 + 160) = v30;
  *(unsigned char *)(a1 + 168) = v25;
  outlined consume of Environment<Bool>.Content(v31, v32);
  uint64_t v33 = *(void *)(v2 + 176);
  LOBYTE(v25) = *(unsigned char *)(v2 + 184);
  outlined copy of Environment<HoverEffect?>.Content(v33, v25);
  uint64_t v34 = *(void *)(a1 + 176);
  uint64_t v35 = *(unsigned __int8 *)(a1 + 184);
  *(void *)(a1 + 176) = v33;
  *(unsigned char *)(a1 + 184) = v25;
  outlined consume of Environment<AnyShapeStyle?>.Content(v34, v35);
  uint64_t v36 = *(void *)(v2 + 192);
  LOBYTE(v25) = *(unsigned char *)(v2 + 200);
  outlined copy of Environment<Bool>.Content(v36, v25);
  uint64_t v37 = *(void *)(a1 + 192);
  char v38 = *(unsigned char *)(a1 + 200);
  *(void *)(a1 + 192) = v36;
  *(unsigned char *)(a1 + 200) = v25;
  outlined consume of Environment<Bool>.Content(v37, v38);
  uint64_t v39 = *(void *)(v2 + 208);
  LOBYTE(v2) = *(unsigned char *)(v2 + 216);
  outlined copy of Environment<Bool>.Content(v39, v2);
  uint64_t v40 = *(void *)(a1 + 208);
  char v41 = *(unsigned char *)(a1 + 216);
  *(void *)(a1 + 208) = v39;
  *(unsigned char *)(a1 + 216) = v2;
  outlined consume of Environment<Bool>.Content(v40, v41);
  return a1;
}

uint64_t assignWithTake for AccessoryLinearGauge(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  *(void *)(a1 + 32) = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  char v11 = *((unsigned char *)a2 + 56);
  uint64_t v12 = *(void *)(a1 + 48);
  char v13 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = a2[6];
  *(unsigned char *)(a1 + 56) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  char v14 = *((unsigned char *)a2 + 72);
  uint64_t v15 = *(void *)(a1 + 64);
  char v16 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = a2[8];
  *(unsigned char *)(a1 + 72) = v14;
  outlined consume of Environment<Bool>.Content(v15, v16);
  *(void *)(a1 + 80) = a2[10];
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
  *(void *)(a1 + 96) = a2[12];
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  *(_WORD *)(a1 + 105) = *(_WORD *)((char *)a2 + 105);
  *(void *)(a1 + 112) = a2[14];
  swift_bridgeObjectRelease();
  char v17 = *((unsigned char *)a2 + 128);
  uint64_t v18 = *(void *)(a1 + 120);
  uint64_t v19 = *(unsigned __int8 *)(a1 + 128);
  *(void *)(a1 + 120) = a2[15];
  *(unsigned char *)(a1 + 128) = v17;
  outlined consume of Environment<AnyShapeStyle?>.Content(v18, v19);
  char v20 = *((unsigned char *)a2 + 152);
  uint64_t v21 = *(void *)(a1 + 136);
  uint64_t v22 = *(void *)(a1 + 144);
  char v23 = *(unsigned char *)(a1 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  *(unsigned char *)(a1 + 152) = v20;
  outlined consume of Environment<(Color, Color)?>.Content(v21, v22, v23);
  char v24 = *((unsigned char *)a2 + 168);
  uint64_t v25 = *(void *)(a1 + 160);
  char v26 = *(unsigned char *)(a1 + 168);
  *(void *)(a1 + 160) = a2[20];
  *(unsigned char *)(a1 + 168) = v24;
  outlined consume of Environment<Bool>.Content(v25, v26);
  char v27 = *((unsigned char *)a2 + 184);
  uint64_t v28 = *(void *)(a1 + 176);
  uint64_t v29 = *(unsigned __int8 *)(a1 + 184);
  *(void *)(a1 + 176) = a2[22];
  *(unsigned char *)(a1 + 184) = v27;
  outlined consume of Environment<AnyShapeStyle?>.Content(v28, v29);
  char v30 = *((unsigned char *)a2 + 200);
  uint64_t v31 = *(void *)(a1 + 192);
  char v32 = *(unsigned char *)(a1 + 200);
  *(void *)(a1 + 192) = a2[24];
  *(unsigned char *)(a1 + 200) = v30;
  outlined consume of Environment<Bool>.Content(v31, v32);
  char v33 = *((unsigned char *)a2 + 216);
  uint64_t v34 = *(void *)(a1 + 208);
  char v35 = *(unsigned char *)(a1 + 216);
  *(void *)(a1 + 208) = a2[26];
  *(unsigned char *)(a1 + 216) = v33;
  outlined consume of Environment<Bool>.Content(v34, v35);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryLinearGauge(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 217)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 112);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryLinearGauge(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 216) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 217) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 217) = 0;
    }
    if (a2) {
      *(void *)(result + 112) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryLinearGauge()
{
  return &type metadata for AccessoryLinearGauge;
}

uint64_t associated type witness table accessor for View.Body : View in AccessoryLinearGauge()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined retain of AccessoryLinearGauge(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = *(unsigned char *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  char v7 = *(unsigned char *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 120);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 128);
  uint64_t v12 = *(void *)(a1 + 144);
  uint64_t v13 = *(void *)(a1 + 136);
  char v11 = *(unsigned char *)(a1 + 152);
  uint64_t v15 = *(void *)(a1 + 160);
  char v14 = *(unsigned char *)(a1 + 168);
  uint64_t v17 = *(void *)(a1 + 176);
  unsigned int v16 = *(unsigned __int8 *)(a1 + 184);
  uint64_t v19 = *(void *)(a1 + 192);
  char v18 = *(unsigned char *)(a1 + 200);
  uint64_t v21 = *(void *)(a1 + 208);
  char v20 = *(unsigned char *)(a1 + 216);
  outlined copy of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<Bool>.Content(v4, v5);
  outlined copy of Environment<Bool>.Content(v6, v7);
  swift_bridgeObjectRetain();
  outlined copy of Environment<HoverEffect?>.Content(v8, v9);
  outlined copy of Environment<(Color, Color)?>.Content(v13, v12, v11);
  outlined copy of Environment<Bool>.Content(v15, v14);
  outlined copy of Environment<HoverEffect?>.Content(v17, v16);
  outlined copy of Environment<Bool>.Content(v19, v18);
  outlined copy of Environment<Bool>.Content(v21, v20);
  return a1;
}

uint64_t outlined release of AccessoryLinearGauge(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = *(unsigned char *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  char v7 = *(unsigned char *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 120);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 128);
  uint64_t v12 = *(void *)(a1 + 144);
  uint64_t v13 = *(void *)(a1 + 136);
  char v11 = *(unsigned char *)(a1 + 152);
  uint64_t v15 = *(void *)(a1 + 160);
  char v14 = *(unsigned char *)(a1 + 168);
  uint64_t v17 = *(void *)(a1 + 176);
  unsigned int v16 = *(unsigned __int8 *)(a1 + 184);
  uint64_t v19 = *(void *)(a1 + 192);
  char v18 = *(unsigned char *)(a1 + 200);
  uint64_t v21 = *(void *)(a1 + 208);
  char v20 = *(unsigned char *)(a1 + 216);
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<Bool>.Content(v4, v5);
  outlined consume of Environment<Bool>.Content(v6, v7);
  swift_bridgeObjectRelease();
  outlined consume of Environment<AnyShapeStyle?>.Content(v8, v9);
  outlined consume of Environment<(Color, Color)?>.Content(v13, v12, v11);
  outlined consume of Environment<Bool>.Content(v15, v14);
  outlined consume of Environment<AnyShapeStyle?>.Content(v17, v16);
  outlined consume of Environment<Bool>.Content(v19, v18);
  outlined consume of Environment<Bool>.Content(v21, v20);
  return a1;
}

uint64_t sub_187EB33AC()
{
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 64), *(unsigned char *)(v0 + 72));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
  swift_bridgeObjectRelease();
  outlined consume of Environment<AnyShapeStyle?>.Content(*(void *)(v0 + 136), *(unsigned __int8 *)(v0 + 144));
  outlined consume of Environment<(Color, Color)?>.Content(*(void *)(v0 + 152), *(void *)(v0 + 160), *(unsigned char *)(v0 + 168));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 176), *(unsigned char *)(v0 + 184));
  outlined consume of Environment<AnyShapeStyle?>.Content(*(void *)(v0 + 192), *(unsigned __int8 *)(v0 + 200));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 208), *(unsigned char *)(v0 + 216));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 224), *(unsigned char *)(v0 + 232));

  return swift_deallocObject();
}

double partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in AccessoryLinearGauge.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in AccessoryLinearGauge.body.getter(a1, a2);
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, type metadata accessor for HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>);
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>(uint64_t a1)
{
}

void type metadata accessor for (_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)()
{
  if (!lazy cache variable for type metadata for (_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>))
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>();
    type metadata accessor for ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>);
    type metadata accessor for ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>(255, &lazy cache variable for type metadata for ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>));
    }
  }
}

void type metadata accessor for _ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>)
  {
    type metadata accessor for ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>(255, &lazy cache variable for type metadata for ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, (uint64_t)&type metadata for GaugeStyleConfiguration.MinimumValueLabel, MEMORY[0x1E4F41100], MEMORY[0x1E4F3FBA0]);
    type metadata accessor for ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>(255, &lazy cache variable for type metadata for ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?);
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for AccessibilityValueStorage?(255, a3);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>(uint64_t a1)
{
}

void type metadata accessor for TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for TupleView();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for (ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>))
  {
    type metadata accessor for ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>();
    type metadata accessor for GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>));
    }
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>)
  {
    type metadata accessor for _ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>(255, &lazy cache variable for type metadata for _ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, (void (*)(void))lazy protocol witness table accessor for type Capsule and conformance Capsule);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>()
{
  if (!lazy cache variable for type metadata for GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)
  {
    type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>(255, &lazy cache variable for type metadata for ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>), &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)> and conformance TupleView<A>);
    lazy protocol witness table accessor for type ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>> and conformance ZStack<A>();
    unint64_t v0 = type metadata accessor for GeometryReader();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>);
    }
  }
}

void type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), unint64_t *a5)
{
  if (!*a2)
  {
    type metadata accessor for TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>(255, a3, a4);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)> and conformance TupleView<A>(a5, a3, a4);
    unint64_t v9 = type metadata accessor for ZStack();
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>))
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>);
    type metadata accessor for ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>));
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>(uint64_t a1)
{
}

void type metadata accessor for _ShapeView<Circle._Inset, Color>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Circle._Inset, Color>)
  {
    lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Circle._Inset, Color>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>)
  {
    type metadata accessor for _ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>(255, &lazy cache variable for type metadata for _ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, (void (*)(void))lazy protocol witness table accessor for type Circle and conformance Circle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>);
    }
  }
}

void type metadata accessor for _ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>(255, &lazy cache variable for type metadata for _OpacityShapeStyle<AnyShapeStyle>, MEMORY[0x1E4F3F700], MEMORY[0x1E4F3F6F8], MEMORY[0x1E4F403C0]);
    a3();
    lazy protocol witness table accessor for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>();
    unint64_t v5 = type metadata accessor for _ShapeView();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>> and conformance ZStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>> and conformance ZStack<A>;
  if (!lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>> and conformance ZStack<A>)
  {
    type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>(255, &lazy cache variable for type metadata for ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>), &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)> and conformance TupleView<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>> and conformance ZStack<A>);
  }
  return result;
}

void type metadata accessor for HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), unint64_t *a5)
{
  if (!*a2)
  {
    type metadata accessor for TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>(255, a3, a4);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)> and conformance TupleView<A>(a5, a3, a4);
    unint64_t v9 = type metadata accessor for HStack();
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)> and conformance TupleView<A>(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Font?>>();
    lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, type metadata accessor for HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>);
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_6(&lazy protocol witness table cache variable for type HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>> and conformance HStack<A>, type metadata accessor for HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryLinearGauge.Metrics()
{
  return &type metadata for AccessoryLinearGauge.Metrics;
}

uint64_t WindowGroup.init<A, B>(id:for:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  char v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a6;
  v18[3] = a7;
  v18[4] = a8;
  v18[5] = a10;
  v18[6] = a11;
  v18[7] = a12;
  v18[8] = a4;
  v18[9] = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  uint64_t v40 = a8;
  uint64_t v41 = a10;
  uint64_t v42 = a11;
  uint64_t v43 = a12;
  type metadata accessor for PresentedWindowContent();
  WindowGroup.init(id:makeContent:)(a1, a2, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:), (uint64_t)v18, &v38);
  uint64_t v19 = v38;
  uint64_t v20 = v39;
  LOBYTE(a7) = v40;
  uint64_t v21 = v41;
  uint64_t v26 = v40;
  uint64_t v32 = v44;
  uint64_t v33 = v43;
  uint64_t v27 = v45;
  uint64_t v28 = v42;
  char v22 = v46;
  uint64_t v35 = v48;
  uint64_t v37 = v41;
  uint64_t v29 = v49;
  uint64_t v30 = v47;
  char v23 = (void *)swift_allocObject();
  void v23[2] = a6;
  v23[3] = a8;
  v23[4] = a10;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(void *)(v24 + 24) = v23;
  outlined copy of Text?(v19, v20, a7, v21);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v28, v33, v32, v27, v22, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v29);
  outlined copy of Text?(v19, v20, v26, v37);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v28, v33, v32, v27, v22, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable));
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v28, v33, v32, v27, v22, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v19, v20, v26, v37);
  *(void *)a9 = v19;
  *(void *)(a9 + 8) = v20;
  *(void *)(a9 + 16) = v26;
  *(void *)(a9 + 24) = v37;
  *(void *)(a9 + 32) = v28;
  *(void *)(a9 + 40) = v33;
  *(void *)(a9 + 48) = v32;
  *(void *)(a9 + 56) = v27;
  *(unsigned char *)(a9 + 64) = v22;
  *(void *)(a9 + 72) = v30;
  *(void *)(a9 + 80) = v35;
  *(void *)(a9 + 88) = a3;
  *(void *)(a9 + 96) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable);
  *(void *)(a9 + 104) = v24;
  outlined consume of Text?(v19, v20, v26, v37);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v28, v33, v32, v27, v22, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable));
}

uint64_t sub_187EB4410()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t type metadata accessor for PresentedWindowContent()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

double WindowGroup.init<A, B>(id:presenting:content:)@<D0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return WindowGroup.init<A, B>(id:presenting:content:)(a1, a2, a3, a4, (void (*)(_OWORD *__return_ptr))WindowGroup.init<A, B>(id:for:content:));
}

uint64_t WindowGroup.init<A, B>(_:id:for:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  char v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a11;
  v18[3] = a12;
  v18[4] = a13;
  v18[5] = a14;
  v18[6] = a15;
  v18[7] = a16;
  v18[8] = a8;
  v18[9] = a10;
  uint64_t v43 = a11;
  uint64_t v44 = a12;
  uint64_t v45 = a13;
  uint64_t v46 = a14;
  uint64_t v47 = a15;
  uint64_t v48 = a16;
  type metadata accessor for PresentedWindowContent();
  WindowGroup.init(_:id:makeContent:)(a1, a2, a3 & 1, a4, a5, a6, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:), (uint64_t)v18, &v43);
  uint64_t v19 = v43;
  uint64_t v20 = v44;
  char v21 = v45;
  uint64_t v22 = v46;
  uint64_t v27 = v45;
  uint64_t v36 = v49;
  uint64_t v38 = v48;
  uint64_t v28 = v50;
  uint64_t v29 = v47;
  char v23 = v51;
  uint64_t v40 = v53;
  uint64_t v42 = v46;
  uint64_t v31 = v54;
  uint64_t v33 = v52;
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = a11;
  v24[3] = a13;
  unsigned char v24[4] = a14;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(void *)(v25 + 24) = v24;
  outlined copy of Text?(v19, v20, v21, v22);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v29, v38, v36, v28, v23, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v31);
  outlined copy of Text?(v19, v20, v27, v42);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v29, v38, v36, v28, v23, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v29, v38, v36, v28, v23, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v19, v20, v27, v42);
  *(void *)a9 = v19;
  *(void *)(a9 + 8) = v20;
  *(void *)(a9 + 16) = v27;
  *(void *)(a9 + 24) = v42;
  *(void *)(a9 + 32) = v29;
  *(void *)(a9 + 40) = v38;
  *(void *)(a9 + 48) = v36;
  *(void *)(a9 + 56) = v28;
  *(unsigned char *)(a9 + 64) = v23;
  *(void *)(a9 + 72) = v33;
  *(void *)(a9 + 80) = v40;
  *(void *)(a9 + 88) = a7;
  *(void *)(a9 + 96) = thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply;
  *(void *)(a9 + 104) = v25;
  outlined consume of Text?(v19, v20, v27, v42);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v29, v38, v36, v28, v23, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
}

uint64_t partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:)()
{
  return closure #1 in WindowGroup.init<A, B>(id:for:content:)(v0[8], v0[9], v0[2], v0[3], v0[4], v0[5]);
}

double WindowGroup.init<A, B>(_:id:presenting:content:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return WindowGroup.init<A, B>(_:id:presenting:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, void))WindowGroup.init<A, B>(_:id:for:content:));
}

uint64_t WindowGroup.init<A, B>(_:id:for:content:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  char v14 = (void *)swift_allocObject();
  _OWORD v14[2] = a7;
  v14[3] = a8;
  void v14[4] = a9;
  v14[5] = a10;
  void v14[6] = a11;
  v14[7] = a12;
  v14[8] = a4;
  v14[9] = a6;
  uint64_t v34 = a7;
  uint64_t v35 = a8;
  uint64_t v36 = a9;
  uint64_t v37 = a10;
  uint64_t v38 = a11;
  uint64_t v39 = a12;
  type metadata accessor for PresentedWindowContent();
  WindowGroup.init(_:id:makeContent:)(a1, a2, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:), (uint64_t)v14, &v34);
  uint64_t v15 = v34;
  uint64_t v16 = v35;
  LOBYTE(a4) = v36;
  uint64_t v17 = v37;
  uint64_t v22 = v36;
  uint64_t v28 = v40;
  uint64_t v29 = v39;
  uint64_t v23 = v41;
  uint64_t v24 = v38;
  char v18 = v42;
  uint64_t v31 = v44;
  uint64_t v33 = v37;
  uint64_t v25 = v45;
  uint64_t v26 = v43;
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = a7;
  v19[3] = a9;
  v19[4] = a10;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(void *)(v20 + 24) = v19;
  outlined copy of Text?(v15, v16, a4, v17);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v24, v29, v28, v23, v18, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v25);
  outlined copy of Text?(v15, v16, v22, v33);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v24, v29, v28, v23, v18, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v24, v29, v28, v23, v18, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v15, v16, v22, v33);
  *(void *)a5 = v15;
  *(void *)(a5 + 8) = v16;
  *(void *)(a5 + 16) = v22;
  *(void *)(a5 + 24) = v33;
  *(void *)(a5 + 32) = v24;
  *(void *)(a5 + 40) = v29;
  *(void *)(a5 + 48) = v28;
  *(void *)(a5 + 56) = v23;
  *(unsigned char *)(a5 + 64) = v18;
  *(void *)(a5 + 72) = v26;
  *(void *)(a5 + 80) = v31;
  *(void *)(a5 + 88) = a3;
  *(void *)(a5 + 96) = thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply;
  *(void *)(a5 + 104) = v20;
  outlined consume of Text?(v15, v16, v22, v33);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v24, v29, v28, v23, v18, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
}

double WindowGroup.init<A, B>(_:id:presenting:content:)@<D0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return WindowGroup.init<A, B>(_:id:presenting:content:)(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(_OWORD *__return_ptr))WindowGroup.init<A, B>(_:id:for:content:));
}

uint64_t WindowGroup.init<A, B, C>(_:id:for:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)()@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void), uint64_t a14, uint64_t a15)
{
  char v65 = a8;
  uint64_t v59 = a5;
  uint64_t v60 = a6;
  uint64_t v58 = a4;
  uint64_t v62 = a2;
  uint64_t v63 = a3;
  uint64_t v61 = a1;
  char v64 = a13;
  uint64_t v17 = *(void *)(a7 - 8);
  double v18 = MEMORY[0x1F4188790](a1);
  uint64_t v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v17 + 16))(v20, v18);
  char v21 = (void *)swift_allocObject();
  uint64_t v23 = v64;
  uint64_t v22 = v65;
  v21[2] = a7;
  v21[3] = v22;
  uint64_t v21[4] = a10;
  v21[5] = a11;
  v21[6] = a12;
  v21[7] = v23;
  v21[8] = a14;
  v21[9] = a15;
  uint64_t v24 = v60;
  v21[10] = v59;
  v21[11] = v24;
  uint64_t v66 = (uint64_t)v22;
  uint64_t v67 = a10;
  uint64_t v68 = a12;
  long long v69 = v23;
  uint64_t v70 = a14;
  uint64_t v71 = a15;
  type metadata accessor for PresentedWindowContent();
  WindowGroup.init<A>(_:id:makeContent:)((uint64_t)v20, v62, v63, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:), (uint64_t)v21, a7, &v66);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v61, a7);
  uint64_t v25 = v66;
  uint64_t v26 = v67;
  uint64_t v27 = (uint64_t)v69;
  uint64_t v60 = v67;
  uint64_t v61 = v68;
  uint64_t v54 = v70;
  uint64_t v28 = v73;
  uint64_t v62 = v72;
  uint64_t v63 = v71;
  LOBYTE(v21) = v74;
  LODWORD(v59) = v74;
  uint64_t v57 = v75;
  uint64_t v51 = v76;
  uint64_t v56 = v77;
  uint64_t v55 = v78;
  uint64_t v29 = (void *)swift_allocObject();
  v29[2] = v65;
  v29[3] = a12;
  v29[4] = v64;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(void *)(v30 + 24) = v29;
  uint64_t v53 = v25;
  char v31 = v61;
  uint64_t v52 = v27;
  outlined copy of Text?(v25, v26, v61, v27);
  uint64_t v32 = v54;
  uint64_t v50 = v28;
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v54, v63, v62, v28, (char)v21, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v56);
  outlined copy of Text?(v25, v60, v31, v27);
  uint64_t v34 = v62;
  uint64_t v33 = v63;
  LOBYTE(v25) = v59;
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v32, v63, v62, v28, v59, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  char v65 = thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply;
  outlined copy of AppIntentExecutor?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  char v64 = (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?;
  uint64_t v35 = v32;
  uint64_t v36 = v50;
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v32, v33, v34, v50, v25, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  uint64_t v37 = v53;
  uint64_t v39 = v60;
  uint64_t v38 = v61;
  uint64_t v40 = v52;
  outlined consume of Text?(v53, v60, v61, v52);
  uint64_t v41 = v37;
  *(void *)a9 = v37;
  *(void *)(a9 + 8) = v39;
  uint64_t v42 = v39;
  *(void *)(a9 + 16) = v38;
  *(void *)(a9 + 24) = v40;
  uint64_t v43 = v40;
  *(void *)(a9 + 32) = v35;
  *(void *)(a9 + 40) = v33;
  uint64_t v44 = v34;
  *(void *)(a9 + 48) = v34;
  *(void *)(a9 + 56) = v36;
  uint64_t v45 = v36;
  LOBYTE(v37) = v59;
  *(unsigned char *)(a9 + 64) = v59;
  uint64_t v46 = v51;
  *(void *)(a9 + 72) = v57;
  *(void *)(a9 + 80) = v46;
  uint64_t v47 = (uint64_t)v65;
  *(void *)(a9 + 88) = v58;
  *(void *)(a9 + 96) = v47;
  *(void *)(a9 + 104) = v30;
  outlined consume of Text?(v41, v42, v38, v43);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v35, v33, v44, v45, v37, v64);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v47);
}

uint64_t sub_187EB5024()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void))
{
  if ((a5 & 1) == 0) {
    a6();
  }

  return swift_retain();
}

uint64_t outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void))
{
  if ((a5 & 1) == 0) {
    a6();
  }

  return swift_release();
}

double WindowGroup.init<A, B, C>(_:id:presenting:content:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, long long a11, uint64_t a12, uint64_t a13)
{
  return WindowGroup.init<A, B, C>(_:id:presenting:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))WindowGroup.init<A, B, C>(_:id:for:content:));
}

uint64_t WindowGroup.init<A, B>(for:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  double v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a4;
  v18[3] = a5;
  v18[4] = a6;
  v18[5] = a7;
  v18[6] = a8;
  v18[7] = a10;
  v18[8] = a2;
  v18[9] = a3;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  uint64_t v40 = a8;
  uint64_t v41 = a10;
  type metadata accessor for PresentedWindowContent();
  WindowGroup.init(makeContent:)((uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:), (uint64_t)v18, &v36);
  uint64_t v19 = v36;
  uint64_t v20 = v37;
  LOBYTE(a8) = v38;
  uint64_t v21 = v39;
  uint64_t v26 = v38;
  uint64_t v32 = v42;
  uint64_t v33 = v41;
  uint64_t v27 = v43;
  uint64_t v28 = v40;
  char v22 = v44;
  uint64_t v34 = v46;
  uint64_t v35 = v39;
  uint64_t v29 = v47;
  uint64_t v30 = v45;
  uint64_t v23 = (void *)swift_allocObject();
  void v23[2] = a4;
  v23[3] = a6;
  v23[4] = a7;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(void *)(v24 + 24) = v23;
  outlined copy of Text?(v19, v20, a8, v21);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v28, v33, v32, v27, v22, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v29);
  outlined copy of Text?(v19, v20, v26, v35);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v28, v33, v32, v27, v22, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v28, v33, v32, v27, v22, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v19, v20, v26, v35);
  *(void *)a9 = v19;
  *(void *)(a9 + 8) = v20;
  *(void *)(a9 + 16) = v26;
  *(void *)(a9 + 24) = v35;
  *(void *)(a9 + 32) = v28;
  *(void *)(a9 + 40) = v33;
  *(void *)(a9 + 48) = v32;
  *(void *)(a9 + 56) = v27;
  *(unsigned char *)(a9 + 64) = v22;
  *(void *)(a9 + 72) = v30;
  *(void *)(a9 + 80) = v34;
  *(void *)(a9 + 88) = a1;
  *(void *)(a9 + 96) = thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply;
  *(void *)(a9 + 104) = v24;
  outlined consume of Text?(v19, v20, v26, v35);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v28, v33, v32, v27, v22, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
}

double WindowGroup.init<A, B>(presenting:content:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  WindowGroup.init<A, B>(for:content:)(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v19, a10);
  char v11 = v20;
  uint64_t v12 = v23;
  double result = *(double *)v19;
  long long v14 = v19[1];
  long long v15 = v19[2];
  long long v16 = v19[3];
  long long v17 = v21;
  long long v18 = v22;
  *(_OWORD *)a9 = v19[0];
  *(_OWORD *)(a9 + 16) = v14;
  *(_OWORD *)(a9 + 32) = v15;
  *(_OWORD *)(a9 + 48) = v16;
  *(unsigned char *)(a9 + 64) = v11;
  *(_OWORD *)(a9 + 72) = v17;
  *(_OWORD *)(a9 + 88) = v18;
  *(void *)(a9 + 104) = v12;
  return result;
}

uint64_t WindowGroup.init<A, B>(_:for:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  long long v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a8;
  v18[3] = a10;
  v18[4] = a11;
  v18[5] = a12;
  v18[6] = a13;
  v18[7] = a14;
  v18[8] = a6;
  v18[9] = a7;
  uint64_t v41 = a8;
  uint64_t v42 = a10;
  uint64_t v43 = a11;
  uint64_t v44 = a12;
  uint64_t v45 = a13;
  uint64_t v46 = a14;
  type metadata accessor for PresentedWindowContent();
  WindowGroup.init(_:makeContent:)(a1, a2, a3 & 1, a4, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:), (uint64_t)v18, &v41);
  uint64_t v19 = v41;
  uint64_t v20 = v42;
  uint64_t v22 = v43;
  uint64_t v21 = v44;
  uint64_t v23 = v45;
  uint64_t v27 = v45;
  uint64_t v30 = v47;
  uint64_t v31 = v46;
  uint64_t v29 = v48;
  char v28 = v49;
  uint64_t v38 = v51;
  uint64_t v40 = v42;
  uint64_t v33 = v52;
  uint64_t v35 = v50;
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = a8;
  v24[3] = a11;
  unsigned char v24[4] = a12;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(void *)(v25 + 24) = v24;
  outlined copy of Text?(v19, v20, v22, v21);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v23, v31, v30, v29, v28, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v33);
  outlined copy of Text?(v19, v40, v22, v21);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v27, v31, v30, v29, v28, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v27, v31, v30, v29, v28, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v19, v40, v22, v21);
  *(void *)a9 = v19;
  *(void *)(a9 + 8) = v40;
  *(void *)(a9 + 16) = v22;
  *(void *)(a9 + 24) = v21;
  *(void *)(a9 + 32) = v27;
  *(void *)(a9 + 40) = v31;
  *(void *)(a9 + 48) = v30;
  *(void *)(a9 + 56) = v29;
  *(unsigned char *)(a9 + 64) = v28;
  *(void *)(a9 + 72) = v35;
  *(void *)(a9 + 80) = v38;
  *(void *)(a9 + 88) = a5;
  *(void *)(a9 + 96) = thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply;
  *(void *)(a9 + 104) = v25;
  outlined consume of Text?(v19, v40, v22, v21);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v27, v31, v30, v29, v28, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
}

double WindowGroup.init<A, B>(_:presenting:content:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  WindowGroup.init<A, B>(_:for:content:)(a1, a2, a3 & 1, a4, a5, a6, a7, a8, (uint64_t)v23, a10, a11, a12, a13, a14);
  char v15 = v24;
  uint64_t v16 = v27;
  double result = *(double *)v23;
  long long v18 = v23[1];
  long long v19 = v23[2];
  long long v20 = v23[3];
  long long v21 = v25;
  long long v22 = v26;
  *(_OWORD *)a9 = v23[0];
  *(_OWORD *)(a9 + 16) = v18;
  *(_OWORD *)(a9 + 32) = v19;
  *(_OWORD *)(a9 + 48) = v20;
  *(unsigned char *)(a9 + 64) = v15;
  *(_OWORD *)(a9 + 72) = v21;
  *(_OWORD *)(a9 + 88) = v22;
  *(void *)(a9 + 104) = v16;
  return result;
}

uint64_t WindowGroup.init<A, B>(_:for:content:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  long long v14 = (void *)swift_allocObject();
  uint64_t v28 = a4;
  _OWORD v14[2] = a4;
  v14[3] = a6;
  void v14[4] = a7;
  v14[5] = a8;
  void v14[6] = a9;
  v14[7] = a10;
  v14[8] = a2;
  v14[9] = a3;
  uint64_t v34 = a4;
  uint64_t v35 = a6;
  uint64_t v36 = a7;
  uint64_t v37 = a8;
  uint64_t v38 = a9;
  uint64_t v39 = a10;
  type metadata accessor for PresentedWindowContent();
  WindowGroup.init(_:makeContent:)((uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:), (uint64_t)v14, &v34);
  uint64_t v16 = v34;
  uint64_t v15 = v35;
  uint64_t v18 = v36;
  uint64_t v17 = v37;
  uint64_t v19 = v38;
  uint64_t v23 = v38;
  uint64_t v26 = v40;
  uint64_t v27 = v39;
  uint64_t v25 = v41;
  char v24 = v42;
  uint64_t v32 = v44;
  uint64_t v33 = v35;
  uint64_t v29 = v45;
  uint64_t v30 = v43;
  long long v20 = (void *)swift_allocObject();
  v20[2] = v28;
  v20[3] = a7;
  v20[4] = a8;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(void *)(v21 + 24) = v20;
  outlined copy of Text?(v16, v15, v18, v17);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v19, v27, v26, v25, v24, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v29);
  outlined copy of Text?(v16, v33, v18, v17);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v23, v27, v26, v25, v24, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v23, v27, v26, v25, v24, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v16, v33, v18, v17);
  *(void *)a5 = v16;
  *(void *)(a5 + 8) = v33;
  *(void *)(a5 + 16) = v18;
  *(void *)(a5 + 24) = v17;
  *(void *)(a5 + 32) = v23;
  *(void *)(a5 + 40) = v27;
  *(void *)(a5 + 48) = v26;
  *(void *)(a5 + 56) = v25;
  *(unsigned char *)(a5 + 64) = v24;
  *(void *)(a5 + 72) = v30;
  *(void *)(a5 + 80) = v32;
  *(void *)(a5 + 88) = a1;
  *(void *)(a5 + 96) = thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply;
  *(void *)(a5 + 104) = v21;
  outlined consume of Text?(v16, v33, v18, v17);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v23, v27, v26, v25, v24, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
}

uint64_t closure #1 in WindowGroup.init<A, B>(id:for:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  type metadata accessor for PresentedWindowContent();
  static ViewBuilder.buildExpression<A>(_:)(&v11);
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
  swift_release();
  uint64_t v11 = a3;
  uint64_t v12 = a4;
  uint64_t v13 = a5;
  uint64_t v14 = a6;
  static ViewBuilder.buildExpression<A>(_:)(&v11);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);
  return swift_release();
}

double WindowGroup.init<A, B>(_:presenting:content:)@<D0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  WindowGroup.init<A, B>(_:for:content:)(a1, a2, a3, a4, (uint64_t)v19, a6, a7, a8, a9, a10);
  char v11 = v20;
  uint64_t v12 = v23;
  double result = *(double *)v19;
  long long v14 = v19[1];
  long long v15 = v19[2];
  long long v16 = v19[3];
  long long v17 = v21;
  long long v18 = v22;
  *(_OWORD *)a5 = v19[0];
  *(_OWORD *)(a5 + 16) = v14;
  *(_OWORD *)(a5 + 32) = v15;
  *(_OWORD *)(a5 + 48) = v16;
  *(unsigned char *)(a5 + 64) = v11;
  *(_OWORD *)(a5 + 72) = v17;
  *(_OWORD *)(a5 + 88) = v18;
  *(void *)(a5 + 104) = v12;
  return result;
}

uint64_t WindowGroup.init<A, B, C>(_:for:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void (*a10)(void), uint64_t (*a11)(), uint64_t a12, uint64_t a13)
{
  uint64_t v62 = a3;
  uint64_t v63 = a4;
  uint64_t v59 = a2;
  uint64_t v64 = a1;
  uint64_t v18 = *(void *)(a5 - 8);
  char v65 = a10;
  uint64_t v66 = a11;
  double v19 = MEMORY[0x1F4188790](a1);
  long long v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v18 + 16))(v21, v19);
  long long v22 = (void *)swift_allocObject();
  uint64_t v22[2] = a5;
  v22[3] = a6;
  uint64_t v57 = a6;
  void v22[4] = a7;
  v22[5] = a8;
  char v24 = v65;
  uint64_t v23 = v66;
  v22[6] = v65;
  v22[7] = v23;
  v22[8] = a12;
  v22[9] = a13;
  uint64_t v25 = v63;
  v22[10] = v62;
  unsigned char v22[11] = v25;
  uint64_t v67 = a6;
  uint64_t v68 = a7;
  long long v69 = v24;
  uint64_t v70 = (uint64_t)v23;
  uint64_t v71 = a12;
  uint64_t v72 = a13;
  type metadata accessor for PresentedWindowContent();
  WindowGroup.init<A>(_:makeContent:)((uint64_t)v21, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:), (uint64_t)v22, a5, &v67);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v64, a5);
  uint64_t v26 = v67;
  uint64_t v27 = v68;
  uint64_t v28 = v70;
  uint64_t v61 = v68;
  uint64_t v62 = v69;
  uint64_t v54 = v71;
  uint64_t v29 = v74;
  uint64_t v63 = v73;
  uint64_t v64 = v72;
  LOBYTE(v22) = v75;
  int v60 = v75;
  uint64_t v58 = v76;
  uint64_t v51 = v77;
  uint64_t v56 = v78;
  uint64_t v55 = v79;
  uint64_t v30 = (void *)swift_allocObject();
  uint64_t v31 = v65;
  v30[2] = v57;
  v30[3] = v31;
  v30[4] = v66;
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(void *)(v32 + 24) = v30;
  uint64_t v53 = v26;
  LOBYTE(v18) = (_BYTE)v62;
  uint64_t v52 = v28;
  outlined copy of Text?(v26, v27, (char)v62, v28);
  uint64_t v33 = v54;
  uint64_t v50 = v29;
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v54, v64, v63, v29, (char)v22, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v56);
  outlined copy of Text?(v26, v61, v18, v28);
  uint64_t v35 = v63;
  uint64_t v34 = v64;
  LOBYTE(v26) = v60;
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v33, v64, v63, v29, v60, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  uint64_t v66 = thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply;
  outlined copy of AppIntentExecutor?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  char v65 = (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?;
  uint64_t v36 = v33;
  uint64_t v37 = v50;
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v33, v34, v35, v50, v26, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  uint64_t v38 = v53;
  uint64_t v40 = v61;
  uint64_t v39 = v62;
  uint64_t v41 = v52;
  outlined consume of Text?(v53, v61, (char)v62, v52);
  uint64_t v42 = v38;
  *(void *)a9 = v38;
  *(void *)(a9 + 8) = v40;
  uint64_t v43 = v40;
  *(void *)(a9 + 16) = v39;
  *(void *)(a9 + 24) = v41;
  uint64_t v44 = v41;
  *(void *)(a9 + 32) = v36;
  *(void *)(a9 + 40) = v34;
  uint64_t v45 = v35;
  *(void *)(a9 + 48) = v35;
  *(void *)(a9 + 56) = v37;
  uint64_t v46 = v37;
  LOBYTE(v38) = v60;
  *(unsigned char *)(a9 + 64) = v60;
  uint64_t v47 = v51;
  *(void *)(a9 + 72) = v58;
  *(void *)(a9 + 80) = v47;
  uint64_t v48 = (uint64_t)v66;
  *(void *)(a9 + 88) = v59;
  *(void *)(a9 + 96) = v48;
  *(void *)(a9 + 104) = v32;
  outlined consume of Text?(v42, v43, (char)v39, v44);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v36, v34, v45, v46, v38, v65);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v48);
}

uint64_t closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  type metadata accessor for PresentedWindowContent();
  static ViewBuilder.buildExpression<A>(_:)(&v13);
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
  swift_release();
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v15 = a7;
  uint64_t v16 = a8;
  static ViewBuilder.buildExpression<A>(_:)(&v13);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a4);
  return swift_release();
}

uint64_t partial apply for closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:)()
{
  return closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:)(v0[10], v0[11], v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

double WindowGroup.init<A, B, C>(_:presenting:content:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, uint64_t a11, uint64_t a12)
{
  uint64_t v33 = a7;
  uint64_t v34 = a8;
  uint64_t v32 = a6;
  long long v31 = a10;
  uint64_t v18 = *(void *)(a5 - 8);
  double v19 = MEMORY[0x1F4188790](a1);
  long long v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v21, a1, v22, v19);
  WindowGroup.init<A, B, C>(_:for:content:)((uint64_t)v21, a2, a3, a4, a5, v32, v33, v34, (uint64_t)v35, (void (*)(void))v31, *((uint64_t (**)())&v31 + 1), a11, a12);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, a5);
  char v23 = v36;
  uint64_t v24 = v39;
  double result = *(double *)v35;
  long long v26 = v35[1];
  long long v27 = v35[2];
  long long v28 = v35[3];
  long long v29 = v37;
  long long v30 = v38;
  *(_OWORD *)a9 = v35[0];
  *(_OWORD *)(a9 + 16) = v26;
  *(_OWORD *)(a9 + 32) = v27;
  *(_OWORD *)(a9 + 48) = v28;
  *(unsigned char *)(a9 + 64) = v23;
  *(_OWORD *)(a9 + 72) = v29;
  *(_OWORD *)(a9 + 88) = v30;
  *(void *)(a9 + 104) = v24;
  return result;
}

uint64_t WindowGroup.init<A, B>(id:for:content:defaultValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v18 = (void *)swift_allocObject();
  uint64_t v30 = a8;
  _OWORD v18[2] = a8;
  v18[3] = a10;
  v18[4] = a11;
  v18[5] = a12;
  v18[6] = a13;
  v18[7] = a14;
  v18[8] = a4;
  v18[9] = a5;
  v18[10] = a6;
  v18[11] = a7;
  uint64_t v42 = a8;
  uint64_t v43 = a10;
  uint64_t v44 = a11;
  uint64_t v45 = a12;
  uint64_t v46 = a13;
  uint64_t v47 = a14;
  type metadata accessor for PresentedWindowContent();
  WindowGroup.init(id:makeContent:)(a1, a2, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:defaultValue:), (uint64_t)v18, &v42);
  uint64_t v19 = v42;
  uint64_t v20 = v43;
  char v21 = v44;
  uint64_t v22 = v45;
  uint64_t v28 = v44;
  uint64_t v29 = v46;
  uint64_t v23 = v49;
  uint64_t v35 = v48;
  uint64_t v37 = v47;
  char v24 = v50;
  uint64_t v39 = v52;
  uint64_t v41 = v45;
  uint64_t v31 = v53;
  uint64_t v32 = v51;
  uint64_t v25 = (void *)swift_allocObject();
  v25[2] = v30;
  v25[3] = a11;
  v25[4] = a12;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(void *)(v26 + 24) = v25;
  outlined copy of Text?(v19, v20, v21, v22);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v29, v37, v35, v23, v24, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v31);
  outlined copy of Text?(v19, v20, v28, v41);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v29, v37, v35, v23, v24, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v29, v37, v35, v23, v24, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v19, v20, v28, v41);
  *(void *)a9 = v19;
  *(void *)(a9 + 8) = v20;
  *(void *)(a9 + 16) = v28;
  *(void *)(a9 + 24) = v41;
  *(void *)(a9 + 32) = v29;
  *(void *)(a9 + 40) = v37;
  *(void *)(a9 + 48) = v35;
  *(void *)(a9 + 56) = v23;
  *(unsigned char *)(a9 + 64) = v24;
  *(void *)(a9 + 72) = v32;
  *(void *)(a9 + 80) = v39;
  *(void *)(a9 + 88) = a3;
  *(void *)(a9 + 96) = thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply;
  *(void *)(a9 + 104) = v26;
  outlined consume of Text?(v19, v20, v28, v41);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v29, v37, v35, v23, v24, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
}

double WindowGroup.init<A, B>(id:presenting:content:defaultValue:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  WindowGroup.init<A, B>(id:for:content:defaultValue:)(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v23, a10, a11, a12, a13, a14);
  char v15 = v24;
  uint64_t v16 = v27;
  double result = *(double *)v23;
  long long v18 = v23[1];
  long long v19 = v23[2];
  long long v20 = v23[3];
  long long v21 = v25;
  long long v22 = v26;
  *(_OWORD *)a9 = v23[0];
  *(_OWORD *)(a9 + 16) = v18;
  *(_OWORD *)(a9 + 32) = v19;
  *(_OWORD *)(a9 + 48) = v20;
  *(unsigned char *)(a9 + 64) = v15;
  *(_OWORD *)(a9 + 72) = v21;
  *(_OWORD *)(a9 + 88) = v22;
  *(void *)(a9 + 104) = v16;
  return result;
}

uint64_t WindowGroup.init<A, B>(_:id:for:content:defaultValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a12;
  *(void *)(v19 + 24) = a13;
  *(void *)(v19 + 32) = a14;
  *(void *)(v19 + 40) = a15;
  *(void *)(v19 + 48) = a16;
  *(void *)(v19 + 56) = a17;
  *(void *)(v19 + 64) = a8;
  *(_OWORD *)(v19 + 72) = a10;
  *(void *)(v19 + 88) = a11;
  uint64_t v43 = a12;
  uint64_t v44 = a13;
  uint64_t v45 = a14;
  uint64_t v46 = a15;
  uint64_t v47 = a16;
  uint64_t v48 = a17;
  type metadata accessor for PresentedWindowContent();
  WindowGroup.init(_:id:makeContent:)(a1, a2, a3 & 1, a4, a5, a6, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:defaultValue:), v19, &v43);
  uint64_t v20 = v43;
  LOBYTE(v19) = v45;
  uint64_t v21 = v46;
  uint64_t v42 = v45;
  uint64_t v22 = v47;
  uint64_t v26 = v47;
  uint64_t v29 = v49;
  uint64_t v30 = v48;
  uint64_t v28 = v50;
  char v27 = v51;
  uint64_t v38 = v44;
  uint64_t v40 = v53;
  uint64_t v33 = v54;
  uint64_t v35 = v52;
  uint64_t v23 = (void *)swift_allocObject();
  void v23[2] = a12;
  v23[3] = a14;
  _OWORD v23[4] = a15;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(void *)(v24 + 24) = v23;
  outlined copy of Text?(v20, v38, v19, v21);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v22, v30, v29, v28, v27, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v33);
  outlined copy of Text?(v20, v38, v42, v21);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v26, v30, v29, v28, v27, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v26, v30, v29, v28, v27, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v20, v38, v42, v21);
  *(void *)a9 = v20;
  *(void *)(a9 + 8) = v38;
  *(void *)(a9 + 16) = v42;
  *(void *)(a9 + 24) = v21;
  *(void *)(a9 + 32) = v26;
  *(void *)(a9 + 40) = v30;
  *(void *)(a9 + 48) = v29;
  *(void *)(a9 + 56) = v28;
  *(unsigned char *)(a9 + 64) = v27;
  *(void *)(a9 + 72) = v35;
  *(void *)(a9 + 80) = v40;
  *(void *)(a9 + 88) = a7;
  *(void *)(a9 + 96) = thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply;
  *(void *)(a9 + 104) = v24;
  outlined consume of Text?(v20, v38, v42, v21);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v26, v30, v29, v28, v27, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
}

uint64_t partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:defaultValue:)()
{
  return closure #1 in WindowGroup.init<A, B>(id:for:content:defaultValue:)(*(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(uint64_t))(v0 + 32), *(void **)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

double WindowGroup.init<A, B>(_:id:presenting:content:defaultValue:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  WindowGroup.init<A, B>(_:id:for:content:defaultValue:)(a1, a2, a3 & 1, a4, a5, a6, a7, a8, (uint64_t)v26, a10, a11, a12, a13, a14, a15, a16, a17);
  char v18 = v27;
  uint64_t v19 = v30;
  double result = *(double *)v26;
  long long v21 = v26[1];
  long long v22 = v26[2];
  long long v23 = v26[3];
  long long v24 = v28;
  long long v25 = v29;
  *(_OWORD *)a9 = v26[0];
  *(_OWORD *)(a9 + 16) = v21;
  *(_OWORD *)(a9 + 32) = v22;
  *(_OWORD *)(a9 + 48) = v23;
  *(unsigned char *)(a9 + 64) = v18;
  *(_OWORD *)(a9 + 72) = v24;
  *(_OWORD *)(a9 + 88) = v25;
  *(void *)(a9 + 104) = v19;
  return result;
}

uint64_t WindowGroup.init<A, B>(_:id:for:content:defaultValue:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, long long a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a8;
  *(void *)(v15 + 24) = a9;
  *(void *)(v15 + 32) = a10;
  *(void *)(v15 + 40) = a11;
  *(void *)(v15 + 48) = a12;
  *(void *)(v15 + 56) = a13;
  *(void *)(v15 + 64) = a4;
  *(_OWORD *)(v15 + 72) = a6;
  *(void *)(v15 + 88) = a7;
  uint64_t v36 = a8;
  uint64_t v37 = a9;
  uint64_t v38 = a10;
  uint64_t v39 = a11;
  uint64_t v40 = a12;
  uint64_t v41 = a13;
  type metadata accessor for PresentedWindowContent();
  WindowGroup.init(_:id:makeContent:)(a1, a2, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:defaultValue:), v15, &v36);
  uint64_t v16 = v36;
  uint64_t v17 = v37;
  char v18 = v38;
  uint64_t v19 = v39;
  uint64_t v24 = v38;
  uint64_t v30 = v42;
  uint64_t v31 = v41;
  uint64_t v25 = v43;
  uint64_t v26 = v40;
  char v20 = v44;
  uint64_t v33 = v46;
  uint64_t v35 = v39;
  uint64_t v27 = v47;
  uint64_t v28 = v45;
  long long v21 = (void *)swift_allocObject();
  v21[2] = a8;
  v21[3] = a10;
  uint64_t v21[4] = a11;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(void *)(v22 + 24) = v21;
  outlined copy of Text?(v16, v17, v18, v19);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v26, v31, v30, v25, v20, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v27);
  outlined copy of Text?(v16, v17, v24, v35);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v26, v31, v30, v25, v20, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v26, v31, v30, v25, v20, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v16, v17, v24, v35);
  *(void *)a5 = v16;
  *(void *)(a5 + 8) = v17;
  *(void *)(a5 + 16) = v24;
  *(void *)(a5 + 24) = v35;
  *(void *)(a5 + 32) = v26;
  *(void *)(a5 + 40) = v31;
  *(void *)(a5 + 48) = v30;
  *(void *)(a5 + 56) = v25;
  *(unsigned char *)(a5 + 64) = v20;
  *(void *)(a5 + 72) = v28;
  *(void *)(a5 + 80) = v33;
  *(void *)(a5 + 88) = a3;
  *(void *)(a5 + 96) = thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply;
  *(void *)(a5 + 104) = v22;
  outlined consume of Text?(v16, v17, v24, v35);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v26, v31, v30, v25, v20, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
}

double WindowGroup.init<A, B>(_:id:presenting:content:defaultValue:)@<D0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, long long a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  WindowGroup.init<A, B>(_:id:for:content:defaultValue:)(a1, a2, a3, a4, (uint64_t)v22, a6, a7, a8, a9, a10, a11, a12, a13);
  char v14 = v23;
  uint64_t v15 = v26;
  double result = *(double *)v22;
  long long v17 = v22[1];
  long long v18 = v22[2];
  long long v19 = v22[3];
  long long v20 = v24;
  long long v21 = v25;
  *(_OWORD *)a5 = v22[0];
  *(_OWORD *)(a5 + 16) = v17;
  *(_OWORD *)(a5 + 32) = v18;
  *(_OWORD *)(a5 + 48) = v19;
  *(unsigned char *)(a5 + 64) = v14;
  *(_OWORD *)(a5 + 72) = v20;
  *(_OWORD *)(a5 + 88) = v21;
  *(void *)(a5 + 104) = v15;
  return result;
}

uint64_t WindowGroup.init<A, B, C>(_:id:for:content:defaultValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void), void (*a15)(void), uint64_t a16, uint64_t a17)
{
  uint64_t v63 = a8;
  uint64_t v61 = a7;
  uint64_t v60 = a6;
  uint64_t v59 = a5;
  uint64_t v64 = a4;
  uint64_t v65 = a2;
  uint64_t v62 = a1;
  uint64_t v68 = a15;
  uint64_t v66 = a3;
  uint64_t v67 = a14;
  uint64_t v18 = *(void *)(a10 - 8);
  double v19 = MEMORY[0x1F4188790](a1);
  long long v21 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v18 + 16))(v21, v19);
  uint64_t v22 = (void *)swift_allocObject();
  uint64_t v22[2] = a10;
  v22[3] = a11;
  _OWORD v22[4] = a12;
  v22[5] = a13;
  long long v24 = v67;
  char v23 = v68;
  v22[6] = v67;
  v22[7] = v23;
  v22[8] = a16;
  v22[9] = a17;
  uint64_t v25 = v60;
  v22[10] = v59;
  unsigned char v22[11] = v25;
  uint64_t v26 = v63;
  v22[12] = v61;
  v22[13] = v26;
  uint64_t v69 = a11;
  uint64_t v70 = a12;
  uint64_t v71 = v24;
  uint64_t v72 = v23;
  uint64_t v73 = a16;
  uint64_t v74 = a17;
  type metadata accessor for PresentedWindowContent();
  WindowGroup.init<A>(_:id:makeContent:)((uint64_t)v21, v65, v66, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:defaultValue:), (uint64_t)v22, a10, &v69);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v62, a10);
  uint64_t v28 = v69;
  uint64_t v27 = v70;
  uint64_t v66 = v70;
  uint64_t v30 = v71;
  uint64_t v29 = (uint64_t)v72;
  uint64_t v31 = v73;
  uint64_t v52 = v73;
  uint64_t v60 = v74;
  uint64_t v59 = v75;
  uint64_t v58 = v76;
  int v57 = v77;
  uint64_t v65 = v79;
  uint64_t v62 = v80;
  uint64_t v63 = v78;
  uint64_t v61 = v81;
  uint64_t v32 = (void *)swift_allocObject();
  uint64_t v33 = v67;
  v32[2] = a11;
  _OWORD v32[3] = v33;
  v32[4] = v68;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(void *)(v34 + 24) = v32;
  uint64_t v55 = v28;
  uint64_t v35 = v27;
  LOBYTE(v27) = (_BYTE)v30;
  uint64_t v56 = v30;
  uint64_t v36 = v29;
  uint64_t v54 = v29;
  outlined copy of Text?(v28, v35, (char)v30, v29);
  uint64_t v68 = (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?;
  uint64_t v37 = v31;
  uint64_t v38 = v60;
  uint64_t v39 = v59;
  uint64_t v40 = v58;
  char v41 = v57;
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v37, v60, v59, v58, v57, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v62);
  outlined copy of Text?(v28, v66, v27, v36);
  uint64_t v42 = v52;
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v52, v38, v39, v40, v41, v68);
  swift_bridgeObjectRetain();
  uint64_t v68 = (void (*)(void))thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply;
  uint64_t v53 = v34;
  outlined copy of AppIntentExecutor?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v67 = (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?;
  LOBYTE(v28) = v41;
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v42, v38, v39, v40, v41, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  uint64_t v43 = v55;
  uint64_t v44 = v66;
  uint64_t v45 = v56;
  uint64_t v46 = v54;
  outlined consume of Text?(v55, v66, (char)v56, v54);
  *(void *)a9 = v43;
  *(void *)(a9 + 8) = v44;
  *(void *)(a9 + 16) = v45;
  *(void *)(a9 + 24) = v46;
  char v47 = (char)v45;
  uint64_t v48 = v46;
  *(void *)(a9 + 32) = v42;
  *(void *)(a9 + 40) = v38;
  *(void *)(a9 + 48) = v39;
  *(void *)(a9 + 56) = v40;
  *(unsigned char *)(a9 + 64) = v28;
  uint64_t v49 = v65;
  *(void *)(a9 + 72) = v63;
  *(void *)(a9 + 80) = v49;
  uint64_t v50 = v68;
  *(void *)(a9 + 88) = v64;
  *(void *)(a9 + 96) = v50;
  *(void *)(a9 + 104) = v53;
  outlined consume of Text?(v43, v44, v47, v48);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v42, v38, v39, v40, v28, v67);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v50);
}

double WindowGroup.init<A, B, C>(_:id:presenting:content:defaultValue:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, long long a11, long long a12, long long a13, uint64_t a14)
{
  uint64_t v36 = a7;
  uint64_t v37 = a8;
  uint64_t v35 = a6;
  long long v34 = a11;
  long long v33 = a12;
  long long v32 = a13;
  uint64_t v20 = *(void *)(a10 - 8);
  double v21 = MEMORY[0x1F4188790](a1);
  char v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v23, a1, a10, v21);
  WindowGroup.init<A, B, C>(_:id:for:content:defaultValue:)((uint64_t)v23, a2, a3, a4, a5, v35, v36, v37, (uint64_t)v38, a10, v34, *((uint64_t *)&v34 + 1), v33, *((void (**)(void))&v33 + 1), (void (*)(void))v32, *((uint64_t *)&v32 + 1), a14);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, a10);
  char v24 = v39;
  uint64_t v25 = v42;
  double result = *(double *)v38;
  long long v27 = v38[1];
  long long v28 = v38[2];
  long long v29 = v38[3];
  long long v30 = v40;
  long long v31 = v41;
  *(_OWORD *)a9 = v38[0];
  *(_OWORD *)(a9 + 16) = v27;
  *(_OWORD *)(a9 + 32) = v28;
  *(_OWORD *)(a9 + 48) = v29;
  *(unsigned char *)(a9 + 64) = v24;
  *(_OWORD *)(a9 + 72) = v30;
  *(_OWORD *)(a9 + 88) = v31;
  *(void *)(a9 + 104) = v25;
  return result;
}

uint64_t WindowGroup.init<A, B>(for:content:defaultValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18 = (void *)swift_allocObject();
  uint64_t v29 = a6;
  _OWORD v18[2] = a6;
  v18[3] = a7;
  v18[4] = a8;
  v18[5] = a10;
  v18[6] = a11;
  v18[7] = a12;
  v18[8] = a2;
  v18[9] = a3;
  v18[10] = a4;
  v18[11] = a5;
  uint64_t v39 = a6;
  uint64_t v40 = a7;
  uint64_t v41 = a8;
  uint64_t v42 = a10;
  uint64_t v43 = a11;
  uint64_t v44 = a12;
  type metadata accessor for PresentedWindowContent();
  WindowGroup.init(makeContent:)((uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:defaultValue:), (uint64_t)v18, &v39);
  uint64_t v19 = v39;
  uint64_t v20 = v40;
  LOBYTE(a7) = v41;
  uint64_t v21 = v42;
  uint64_t v26 = v41;
  uint64_t v33 = v45;
  uint64_t v34 = v44;
  uint64_t v27 = v46;
  uint64_t v28 = v43;
  char v22 = v47;
  uint64_t v36 = v49;
  uint64_t v38 = v42;
  uint64_t v30 = v50;
  uint64_t v31 = v48;
  char v23 = (void *)swift_allocObject();
  void v23[2] = v29;
  v23[3] = a8;
  _OWORD v23[4] = a10;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(void *)(v24 + 24) = v23;
  outlined copy of Text?(v19, v20, a7, v21);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v28, v34, v33, v27, v22, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v30);
  outlined copy of Text?(v19, v20, v26, v38);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v28, v34, v33, v27, v22, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v28, v34, v33, v27, v22, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v19, v20, v26, v38);
  *(void *)a9 = v19;
  *(void *)(a9 + 8) = v20;
  *(void *)(a9 + 16) = v26;
  *(void *)(a9 + 24) = v38;
  *(void *)(a9 + 32) = v28;
  *(void *)(a9 + 40) = v34;
  *(void *)(a9 + 48) = v33;
  *(void *)(a9 + 56) = v27;
  *(unsigned char *)(a9 + 64) = v22;
  *(void *)(a9 + 72) = v31;
  *(void *)(a9 + 80) = v36;
  *(void *)(a9 + 88) = a1;
  *(void *)(a9 + 96) = thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply;
  *(void *)(a9 + 104) = v24;
  outlined consume of Text?(v19, v20, v26, v38);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v28, v34, v33, v27, v22, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
}

double WindowGroup.init<A, B>(presenting:content:defaultValue:)@<D0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return WindowGroup.init<A, B>(id:presenting:content:)(a1, a2, a3, a4, (void (*)(_OWORD *__return_ptr))WindowGroup.init<A, B>(for:content:defaultValue:));
}

double WindowGroup.init<A, B>(id:presenting:content:)@<D0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_OWORD *__return_ptr))
{
  a5(v14);
  char v6 = v15;
  uint64_t v7 = v18;
  double result = *(double *)v14;
  long long v9 = v14[1];
  long long v10 = v14[2];
  long long v11 = v14[3];
  long long v12 = v16;
  long long v13 = v17;
  *(_OWORD *)a1 = v14[0];
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v11;
  *(unsigned char *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 72) = v12;
  *(_OWORD *)(a1 + 88) = v13;
  *(void *)(a1 + 104) = v7;
  return result;
}

uint64_t WindowGroup.init<A, B>(_:for:content:defaultValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a11;
  v18[3] = a12;
  v18[4] = a13;
  v18[5] = a14;
  v18[6] = a15;
  v18[7] = a16;
  v18[8] = a6;
  v18[9] = a7;
  v18[10] = a8;
  v18[11] = a10;
  uint64_t v43 = a11;
  uint64_t v44 = a12;
  uint64_t v45 = a13;
  uint64_t v46 = a14;
  uint64_t v47 = a15;
  uint64_t v48 = a16;
  type metadata accessor for PresentedWindowContent();
  WindowGroup.init(_:makeContent:)(a1, a2, a3 & 1, a4, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:defaultValue:), (uint64_t)v18, &v43);
  uint64_t v19 = v43;
  uint64_t v20 = v44;
  char v21 = v45;
  uint64_t v22 = v46;
  uint64_t v27 = v45;
  uint64_t v36 = v49;
  uint64_t v38 = v48;
  uint64_t v28 = v50;
  uint64_t v29 = v47;
  char v23 = v51;
  uint64_t v40 = v53;
  uint64_t v42 = v46;
  uint64_t v31 = v54;
  uint64_t v33 = v52;
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = a11;
  v24[3] = a13;
  unsigned char v24[4] = a14;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(void *)(v25 + 24) = v24;
  outlined copy of Text?(v19, v20, v21, v22);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v29, v38, v36, v28, v23, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v31);
  outlined copy of Text?(v19, v20, v27, v42);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v29, v38, v36, v28, v23, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v29, v38, v36, v28, v23, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v19, v20, v27, v42);
  *(void *)a9 = v19;
  *(void *)(a9 + 8) = v20;
  *(void *)(a9 + 16) = v27;
  *(void *)(a9 + 24) = v42;
  *(void *)(a9 + 32) = v29;
  *(void *)(a9 + 40) = v38;
  *(void *)(a9 + 48) = v36;
  *(void *)(a9 + 56) = v28;
  *(unsigned char *)(a9 + 64) = v23;
  *(void *)(a9 + 72) = v33;
  *(void *)(a9 + 80) = v40;
  *(void *)(a9 + 88) = a5;
  *(void *)(a9 + 96) = thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply;
  *(void *)(a9 + 104) = v25;
  outlined consume of Text?(v19, v20, v27, v42);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v29, v38, v36, v28, v23, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
}

double WindowGroup.init<A, B>(_:presenting:content:defaultValue:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return WindowGroup.init<A, B>(_:id:presenting:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, void))WindowGroup.init<A, B>(_:for:content:defaultValue:));
}

double WindowGroup.init<A, B>(_:id:presenting:content:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(_OWORD *__return_ptr, uint64_t, uint64_t, void))
{
  a12(v21, a1, a2, a3 & 1);
  char v13 = v22;
  uint64_t v14 = v25;
  double result = *(double *)v21;
  long long v16 = v21[1];
  long long v17 = v21[2];
  long long v18 = v21[3];
  long long v19 = v23;
  long long v20 = v24;
  *(_OWORD *)a4 = v21[0];
  *(_OWORD *)(a4 + 16) = v16;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v18;
  *(unsigned char *)(a4 + 64) = v13;
  *(_OWORD *)(a4 + 72) = v19;
  *(_OWORD *)(a4 + 88) = v20;
  *(void *)(a4 + 104) = v14;
  return result;
}

uint64_t WindowGroup.init<A, B>(_:for:content:defaultValue:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = (void *)swift_allocObject();
  _OWORD v14[2] = a7;
  v14[3] = a8;
  _OWORD v14[4] = a9;
  v14[5] = a10;
  void v14[6] = a11;
  v14[7] = a12;
  v14[8] = a2;
  v14[9] = a3;
  v14[10] = a4;
  v14[11] = a6;
  uint64_t v35 = a7;
  uint64_t v36 = a8;
  uint64_t v37 = a9;
  uint64_t v38 = a10;
  uint64_t v39 = a11;
  uint64_t v40 = a12;
  type metadata accessor for PresentedWindowContent();
  WindowGroup.init(_:makeContent:)((uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:defaultValue:), (uint64_t)v14, &v35);
  uint64_t v15 = v35;
  uint64_t v16 = v36;
  char v17 = v37;
  uint64_t v18 = v38;
  uint64_t v23 = v37;
  uint64_t v31 = v41;
  uint64_t v32 = v40;
  uint64_t v24 = v42;
  uint64_t v25 = v39;
  char v19 = v43;
  uint64_t v33 = v45;
  uint64_t v34 = v38;
  uint64_t v27 = v46;
  uint64_t v29 = v44;
  long long v20 = (void *)swift_allocObject();
  v20[2] = a7;
  v20[3] = a9;
  v20[4] = a10;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(void *)(v21 + 24) = v20;
  outlined copy of Text?(v15, v16, v17, v18);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v25, v32, v31, v24, v19, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v27);
  outlined copy of Text?(v15, v16, v23, v34);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v25, v32, v31, v24, v19, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v25, v32, v31, v24, v19, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v15, v16, v23, v34);
  *(void *)a5 = v15;
  *(void *)(a5 + 8) = v16;
  *(void *)(a5 + 16) = v23;
  *(void *)(a5 + 24) = v34;
  *(void *)(a5 + 32) = v25;
  *(void *)(a5 + 40) = v32;
  *(void *)(a5 + 48) = v31;
  *(void *)(a5 + 56) = v24;
  *(unsigned char *)(a5 + 64) = v19;
  *(void *)(a5 + 72) = v29;
  *(void *)(a5 + 80) = v33;
  *(void *)(a5 + 88) = a1;
  *(void *)(a5 + 96) = thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply;
  *(void *)(a5 + 104) = v21;
  outlined consume of Text?(v15, v16, v23, v34);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v25, v32, v31, v24, v19, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
}

uint64_t closure #1 in WindowGroup.init<A, B>(id:for:content:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t a1), void *a8, uint64_t a9, uint64_t a10)
{
  char v17 = (void *)swift_allocObject();
  void v17[2] = a5;
  v17[3] = a6;
  v17[4] = a7;
  v17[5] = a8;
  v17[6] = a9;
  v17[7] = a10;
  v17[8] = a1;
  v17[9] = a2;
  swift_retain();
  swift_retain();
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  char v22 = partial apply for implicit closure #1 in PresentedWindowContent.init(content:defaultValue:);
  uint64_t v23 = v17;
  type metadata accessor for PresentedWindowContent();
  static ViewBuilder.buildExpression<A>(_:)(&v20);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);
  swift_release();
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  char v22 = a7;
  uint64_t v23 = a8;
  static ViewBuilder.buildExpression<A>(_:)(&v20);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a5);
  return swift_release();
}

double WindowGroup.init<A, B>(_:presenting:content:defaultValue:)@<D0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return WindowGroup.init<A, B>(_:id:presenting:content:)(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(_OWORD *__return_ptr))WindowGroup.init<A, B>(_:for:content:defaultValue:));
}

double WindowGroup.init<A, B>(_:id:presenting:content:)@<D0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(_OWORD *__return_ptr))
{
  a9(v18);
  char v10 = v19;
  uint64_t v11 = v22;
  double result = *(double *)v18;
  long long v13 = v18[1];
  long long v14 = v18[2];
  long long v15 = v18[3];
  long long v16 = v20;
  long long v17 = v21;
  *(_OWORD *)a1 = v18[0];
  *(_OWORD *)(a1 + 16) = v13;
  *(_OWORD *)(a1 + 32) = v14;
  *(_OWORD *)(a1 + 48) = v15;
  *(unsigned char *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 72) = v16;
  *(_OWORD *)(a1 + 88) = v17;
  *(void *)(a1 + 104) = v11;
  return result;
}

uint64_t WindowGroup.init<A, B, C>(_:for:content:defaultValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)()@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void), uint64_t a14, uint64_t a15)
{
  uint64_t v65 = a8;
  uint64_t v63 = a6;
  uint64_t v60 = a4;
  uint64_t v61 = a5;
  uint64_t v59 = a3;
  uint64_t v58 = a2;
  uint64_t v62 = a1;
  uint64_t v64 = a13;
  uint64_t v17 = *(void *)(a7 - 8);
  double v18 = MEMORY[0x1F4188790](a1);
  long long v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v17 + 16))(v20, v18);
  long long v21 = (void *)swift_allocObject();
  uint64_t v23 = v64;
  uint64_t v22 = v65;
  v21[2] = a7;
  v21[3] = v22;
  _OWORD v21[4] = a10;
  v21[5] = a11;
  v21[6] = a12;
  v21[7] = v23;
  v21[8] = a14;
  v21[9] = a15;
  uint64_t v24 = v60;
  v21[10] = v59;
  v21[11] = v24;
  uint64_t v25 = v63;
  v21[12] = v61;
  v21[13] = v25;
  uint64_t v66 = (uint64_t)v22;
  uint64_t v67 = a10;
  uint64_t v68 = a12;
  uint64_t v69 = v23;
  uint64_t v70 = a14;
  uint64_t v71 = a15;
  type metadata accessor for PresentedWindowContent();
  WindowGroup.init<A>(_:makeContent:)((uint64_t)v20, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:defaultValue:), (uint64_t)v21, a7, &v66);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v62, a7);
  uint64_t v26 = v66;
  uint64_t v27 = v67;
  uint64_t v28 = (uint64_t)v69;
  uint64_t v60 = v67;
  uint64_t v61 = v68;
  uint64_t v54 = v70;
  uint64_t v29 = v73;
  uint64_t v62 = v72;
  uint64_t v63 = v71;
  LOBYTE(v20) = v74;
  LODWORD(v59) = v74;
  uint64_t v57 = v75;
  uint64_t v51 = v76;
  uint64_t v56 = v77;
  uint64_t v55 = v78;
  uint64_t v30 = (void *)swift_allocObject();
  v30[2] = v65;
  v30[3] = a12;
  v30[4] = v64;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(void *)(v31 + 24) = v30;
  uint64_t v53 = v26;
  LOBYTE(v17) = v61;
  uint64_t v52 = v28;
  outlined copy of Text?(v26, v27, v61, v28);
  uint64_t v32 = v54;
  uint64_t v50 = v29;
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v54, v63, v62, v29, (char)v20, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v56);
  outlined copy of Text?(v26, v60, v17, v28);
  uint64_t v34 = v62;
  uint64_t v33 = v63;
  LOBYTE(v26) = v59;
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v32, v63, v62, v29, v59, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  uint64_t v65 = thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply;
  outlined copy of AppIntentExecutor?((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (@out AnyHashable)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v64 = (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?;
  uint64_t v35 = v32;
  uint64_t v36 = v50;
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v32, v33, v34, v50, v26, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  uint64_t v37 = v53;
  uint64_t v39 = v60;
  uint64_t v38 = v61;
  uint64_t v40 = v52;
  outlined consume of Text?(v53, v60, v61, v52);
  uint64_t v41 = v37;
  *(void *)a9 = v37;
  *(void *)(a9 + 8) = v39;
  uint64_t v42 = v39;
  *(void *)(a9 + 16) = v38;
  *(void *)(a9 + 24) = v40;
  uint64_t v43 = v40;
  *(void *)(a9 + 32) = v35;
  *(void *)(a9 + 40) = v33;
  uint64_t v44 = v34;
  *(void *)(a9 + 48) = v34;
  *(void *)(a9 + 56) = v36;
  uint64_t v45 = v36;
  LOBYTE(v37) = v59;
  *(unsigned char *)(a9 + 64) = v59;
  uint64_t v46 = v51;
  *(void *)(a9 + 72) = v57;
  *(void *)(a9 + 80) = v46;
  uint64_t v47 = (uint64_t)v65;
  *(void *)(a9 + 88) = v58;
  *(void *)(a9 + 96) = v47;
  *(void *)(a9 + 104) = v31;
  outlined consume of Text?(v41, v42, v38, v43);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v35, v33, v44, v45, v37, v64);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v47);
}

uint64_t closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t a1), void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a6;
  v17[3] = a7;
  v17[4] = a9;
  v17[5] = a10;
  v17[6] = a11;
  v17[7] = a12;
  v17[8] = a1;
  v17[9] = a2;
  swift_retain();
  swift_retain();
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = partial apply for implicit closure #1 in PresentedWindowContent.init(content:defaultValue:);
  uint64_t v23 = v17;
  type metadata accessor for PresentedWindowContent();
  static ViewBuilder.buildExpression<A>(_:)(&v20);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);
  swift_release();
  uint64_t v20 = a6;
  uint64_t v21 = a7;
  uint64_t v22 = a9;
  uint64_t v23 = a10;
  static ViewBuilder.buildExpression<A>(_:)(&v20);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a6);
  return swift_release();
}

uint64_t objectdestroy_75Tm()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:defaultValue:)()
{
  return closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:defaultValue:)(*(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(uint64_t (**)(uint64_t))(v0 + 48), *(void **)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72));
}

uint64_t sub_187EB8880()
{
  swift_release();

  return swift_deallocObject();
}

double WindowGroup.init<A, B, C>(_:presenting:content:defaultValue:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, long long a11, uint64_t a12, uint64_t a13)
{
  return WindowGroup.init<A, B, C>(_:id:presenting:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))WindowGroup.init<A, B, C>(_:for:content:defaultValue:));
}

double WindowGroup.init<A, B, C>(_:id:presenting:content:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, long long a11, uint64_t a12, uint64_t a13, void (*a14)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))
{
  void (*v35)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[4];
  char v40;
  long long v41;
  long long v42;
  uint64_t v43;

  uint64_t v37 = a6;
  uint64_t v38 = a8;
  uint64_t v35 = a14;
  uint64_t v36 = a5;
  long long v34 = a10;
  long long v33 = a11;
  uint64_t v20 = *(void *)(a7 - 8);
  double v21 = MEMORY[0x1F4188790](a1);
  uint64_t v23 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v23, a1, v24, v21);
  v35(v39, v23, a2, a3, a4, v36, v37, a7, v38, v34, *((void *)&v34 + 1), v33, *((void *)&v33 + 1), a12, a13);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, a7);
  char v25 = v40;
  uint64_t v26 = v43;
  double result = *(double *)v39;
  long long v28 = v39[1];
  long long v29 = v39[2];
  long long v30 = v39[3];
  long long v31 = v41;
  long long v32 = v42;
  *(_OWORD *)a9 = v39[0];
  *(_OWORD *)(a9 + 16) = v28;
  *(_OWORD *)(a9 + 32) = v29;
  *(_OWORD *)(a9 + 48) = v30;
  *(unsigned char *)(a9 + 64) = v25;
  *(_OWORD *)(a9 + 72) = v31;
  *(_OWORD *)(a9 + 88) = v32;
  *(void *)(a9 + 104) = v26;
  return result;
}

uint64_t implicit closure #1 in PresentedWindowContent.init(content:defaultValue:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v20[2] = a7;
  v20[3] = a8;
  v20[0] = a5;
  v20[1] = a6;
  type metadata accessor for Optional();
  uint64_t v10 = type metadata accessor for Binding();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  long long v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v20 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v20 - v16, a1, v10, v15);
  type metadata accessor for Optional();
  uint64_t v18 = type metadata accessor for Binding();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v13, v17, v18);
  closure #1 in implicit closure #1 in PresentedWindowContent.init(content:defaultValue:)((uint64_t)v13, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t closure #1 in implicit closure #1 in PresentedWindowContent.init(content:defaultValue:)(uint64_t a1, void (*a2)(char *))
{
  uint64_t v12 = a2;
  type metadata accessor for Optional();
  uint64_t v2 = type metadata accessor for Binding();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unint64_t v5 = (char *)&v11 - v4;
  uint64_t v6 = type metadata accessor for Binding();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  long long v9 = (char *)&v11 - v8;
  Binding.projectedValue.getter();
  type metadata accessor for BindingOperations.ForceUnwrapping();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v12(v9);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t static PresentedWindowContent._makeViewList(view:inputs:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v46 = a9;
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v38 = &v33[-v18];
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  uint64_t v56 = a5;
  uint64_t v57 = a6;
  uint64_t v58 = a7;
  uint64_t v59 = a8;
  uint64_t Child = type metadata accessor for PresentedWindowContent.MakeChild();
  uint64_t v40 = *(void *)(Child - 8);
  MEMORY[0x1F4188790](Child);
  uint64_t v37 = &v33[-v19];
  LODWORD(v19) = *a1;
  uint64_t v20 = *a2;
  int v41 = *((_DWORD *)a2 + 2);
  uint64_t v21 = a2[2];
  uint64_t v47 = a2[5];
  uint64_t v45 = a2[6];
  uint64_t v44 = a2[7];
  int v43 = *((_DWORD *)a2 + 16);
  uint64_t v48 = a2[9];
  int v42 = *((unsigned __int8 *)a2 + 80);
  int v49 = v19;
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  uint64_t v56 = a5;
  uint64_t v57 = a6;
  uint64_t v58 = a7;
  uint64_t v59 = a8;
  uint64_t v35 = a8;
  type metadata accessor for PresentedWindowContent();
  type metadata accessor for _GraphValue();
  uint64_t v22 = a2[3];
  uint64_t v23 = a2[4];
  _GraphValue.value.getter();
  closure #1 in static PresentedWindowContent._makeViewList(view:inputs:)(1, a3, a4, a5, a6, a7, a8);
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type PresentedSceneValueInput and conformance PresentedSceneValueInput();
  swift_retain();
  uint64_t v36 = v21;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v24 = v20;
  swift_release();
  LODWORD(a1) = v54;
  uint64_t v25 = (uint64_t)v38;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v38, 1, 1, a3);
  uint64_t v26 = v35;
  uint64_t v27 = v37;
  PresentedWindowContent.MakeChild.init(windowContentProvider:presentedValue:defaultValue:)(OffsetAttribute2, (int)a1, v25, v37);
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  uint64_t v56 = a5;
  uint64_t v57 = a6;
  uint64_t v58 = a7;
  uint64_t v59 = v26;
  uint64_t v28 = type metadata accessor for PresentedWindowContent.Child();
  uint64_t v29 = Child;
  uint64_t v51 = v28;
  uint64_t v52 = Child;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v30 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v27, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v50, v29, MEMORY[0x1E4FBC248], v30, MEMORY[0x1E4FBC278], v31);
  (*(void (**)(_DWORD *, uint64_t))(v40 + 8))(v27, v29);
  _GraphValue.init(_:)();
  uint64_t v54 = v24;
  LODWORD(v55) = v41;
  uint64_t v56 = v36;
  uint64_t v57 = v22;
  uint64_t v58 = v23;
  uint64_t v59 = v47;
  uint64_t v60 = v45;
  uint64_t v61 = v44;
  int v62 = v43;
  uint64_t v63 = v48;
  char v64 = v42;
  swift_getWitnessTable();
  return static View.makeDebuggableViewList(view:inputs:)();
}

uint64_t type metadata accessor for PresentedWindowContent.MakeChild()
{
  return swift_getGenericMetadata();
}

uint64_t closure #1 in static PresentedWindowContent._makeViewList(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v17[2] = type metadata accessor for PresentedWindowContent();
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v24 = a7;
  uint64_t v18 = type metadata accessor for PresentedWindowContent.WindowContentProvider();
  uint64_t v14 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v17, v18, MEMORY[0x1E4FBC248], v14, MEMORY[0x1E4FBC278], v15);
  return v19;
}

uint64_t PresentedWindowContent.MakeChild.init(windowContentProvider:presentedValue:defaultValue:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  unint64_t v5 = (char *)a4 + *(int *)(type metadata accessor for PresentedWindowContent.MakeChild() + 72);
  uint64_t v6 = type metadata accessor for Optional();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v5, a3, v6);
}

uint64_t PresentedWindowContent.MakeChild.windowContentProvider.getter()
{
  type metadata accessor for PresentedWindowContent.WindowContentProvider();
  uint64_t v0 = *(void *)AGGraphGetValue();
  outlined copy of AppIntentExecutor?(v0);
  swift_retain();
  return v0;
}

uint64_t PresentedWindowContent.MakeChild.updateValue()(uint64_t a1)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  *(void *)uint64_t v91 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)v91;
  *(void *)&v91[8] = v4;
  *(void *)&v91[16] = v6;
  *(void *)&v91[24] = v5;
  *(void *)&v91[32] = v8;
  *(void *)&v91[40] = v7;
  uint64_t v85 = type metadata accessor for PresentedWindowContent.Child();
  uint64_t v79 = *(void *)(v85 - 8);
  MEMORY[0x1F4188790](v85);
  uint64_t v78 = (void *)((char *)v66 - v9);
  uint64_t v71 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)v91 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v67 = (char *)v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for Optional();
  uint64_t v82 = *(void *)(v83 - 8);
  MEMORY[0x1F4188790](v83);
  uint64_t v80 = (char *)v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v70 = (char *)v66 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v69 = (char *)v66 - v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v72 = (char *)v66 - v18;
  *(void *)uint64_t v91 = v3;
  *(void *)&v91[8] = v4;
  uint64_t v77 = v4;
  uint64_t v76 = v6;
  *(void *)&v91[16] = v6;
  *(void *)&v91[24] = v5;
  uint64_t v75 = v5;
  uint64_t v74 = v8;
  *(void *)&v91[32] = v8;
  *(void *)&v91[40] = v7;
  uint64_t v73 = v7;
  uint64_t v19 = v1;
  type metadata accessor for PresentedWindowContent.WindowContentProvider();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  char v22 = v21;
  uint64_t v24 = *Value;
  uint64_t v23 = Value[1];
  uint64_t v25 = Value[3];
  uint64_t v81 = v19;
  if (*(_DWORD *)(v19 + 4) == *MEMORY[0x1E4F4E7A0])
  {
    memset(v91, 0, 41);
  }
  else
  {
    type metadata accessor for PlatformItem.SelectionContent.AuxiliaryContent?(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
    uint64_t v26 = AGGraphGetValue();
    char v28 = v27;
    outlined init with copy of AnyHashable?(v26, (uint64_t)v89);
    char v90 = v28 & 1;
    outlined init with take of AnyHashable?((uint64_t)v89, (uint64_t)v91);
    v91[40] = v90;
  }
  uint64_t v84 = v23;
  outlined copy of AppIntentExecutor?(v24);
  swift_retain();
  int v29 = v91[40];
  outlined init with take of AnyHashable?((uint64_t)v91, (uint64_t)v89);
  Outputuint64_t Value = AGGraphGetOutputValue();
  uint64_t v31 = v83;
  if (OutputValue && (v22 & 1) == 0 && !v29)
  {
    outlined destroy of AnyHashable?((uint64_t)v89);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v24);
    return swift_release();
  }
  uint64_t v68 = (void (*)(uint64_t))v24;
  outlined init with copy of AnyHashable?((uint64_t)v89, (uint64_t)&v86);
  v66[1] = v25;
  if (!*((void *)&v87 + 1))
  {
    outlined destroy of AnyHashable?((uint64_t)&v86);
    uint64_t v37 = v82;
    uint64_t v35 = v71;
    goto LABEL_13;
  }
  *(_OWORD *)uint64_t v91 = v86;
  *(_OWORD *)&v91[16] = v87;
  *(void *)&v91[32] = v88;
  AnyHashable.base.getter();
  outlined destroy of AnyHashable((uint64_t)v91);
  long long v33 = v69;
  char v34 = swift_dynamicCast();
  uint64_t v35 = v71;
  uint64_t v36 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v71 + 7);
  uint64_t v37 = v82;
  if ((v34 & 1) == 0)
  {
    v36(v33, 1, 1, v3);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v33, v31);
LABEL_13:
    uint64_t v40 = v31;
    uint64_t v43 = v3;
    uint64_t v44 = v81 + *(int *)(a1 + 72);
    uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
    uint64_t v46 = v70;
    v45(v70, v44, v31);
    uint64_t v47 = (uint64_t (*)(char *, uint64_t, uint64_t))*((void *)v35 + 6);
    uint64_t v83 = v43;
    LODWORD(v43) = v47(v46, 1, v43);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v46, v31);
    if (v43 == 1)
    {
      uint64_t v71 = v45;
      uint64_t v48 = v68;
      if (v68)
      {
        uint64_t v49 = swift_retain();
        uint64_t v50 = v80;
        v48(v49);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v48);
        uint64_t v3 = v83;
        (*((void (**)(char *, void, uint64_t, uint64_t))v35 + 7))(v50, 0, 1, v83);
        uint64_t v51 = v82;
        (*(void (**)(uint64_t, char *, uint64_t))(v82 + 40))(v44, v50, v31);
        uint64_t v52 = v72;
        int v42 = (void (*)(char *, char *, uint64_t))v71;
        v71(v72, v44, v31);
        int v41 = v52;
        uint64_t v37 = v51;
      }
      else
      {
        int v41 = v72;
        uint64_t v3 = v83;
        (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v35 + 7))(v72, 1, 1, v83);
        uint64_t v37 = v82;
        int v42 = (void (*)(char *, char *, uint64_t))v71;
      }
    }
    else
    {
      uint64_t v53 = v72;
      v45(v72, v44, v31);
      int v41 = v53;
      uint64_t v37 = v82;
      int v42 = (void (*)(char *, char *, uint64_t))v45;
      uint64_t v3 = v83;
    }
    goto LABEL_18;
  }
  v66[0] = *((void *)v71 + 7);
  v36(v33, 0, 1, v3);
  uint64_t v38 = (void (*)(char *, char *, uint64_t))*((void *)v35 + 4);
  uint64_t v39 = v67;
  v38(v67, v33, v3);
  uint64_t v40 = v31;
  int v41 = v72;
  v38(v72, v39, v3);
  ((void (*)(char *, void, uint64_t, uint64_t))v66[0])(v41, 0, 1, v3);
  int v42 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
LABEL_18:
  uint64_t v54 = (uint64_t)v80;
  v42(v80, v41, v40);
  uint64_t v55 = PresentedWindowContent.MakeChild.windowContentProvider.getter();
  uint64_t v57 = v56;
  uint64_t v59 = v58;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v55);
  uint64_t v60 = v78;
  uint64_t v61 = PresentedWindowContent.Child.init(presentedValue:content:)(v54, v57, v59, v3, v77, v76, v75, v74, v78, v73);
  MEMORY[0x1F4188790](v61);
  uint64_t v64 = a1;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v62 = v85;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v60, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v66[-4], v85, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v63);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v68);
  swift_release();
  (*(void (**)(void *, uint64_t))(v79 + 8))(v60, v62);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v41, v40);
  return outlined destroy of AnyHashable?((uint64_t)v89);
}

uint64_t PresentedWindowContent.Child.init(presentedValue:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v17 = type metadata accessor for Optional();
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v25 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 32))((char *)&v25 - v19, a1, v17, v18);
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v33 = a8;
  uint64_t v34 = a10;
  char v22 = (char *)a9 + *(int *)(type metadata accessor for PresentedWindowContent.Child() + 68);
  uint64_t v28 = a6;
  swift_getWitnessTable();
  uint64_t v27 = a7;
  swift_getWitnessTable();
  uint64_t result = SceneStorage<A>.init(wrappedValue:_:)((uint64_t)v20, 0xD000000000000025, 0x800000018833B880, v17, v22);
  uint64_t v24 = v26;
  *a9 = v25;
  a9[1] = v24;
  return result;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance PresentedWindowContent<A, B>.MakeChild@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for PresentedWindowContent.Child();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t PresentedWindowContent.Child.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v34 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v37 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v32 = (uint64_t)&v27 - v5;
  uint64_t v28 = v4;
  uint64_t v31 = type metadata accessor for Binding();
  uint64_t v30 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  uint64_t v7 = (char *)&v27 - v6;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v35 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _PreferenceWritingModifier<PresentedSceneValueKey>();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v36 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v29 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v33 = (char *)&v27 - v15;
  uint64_t v16 = *v2;
  uint64_t v17 = type metadata accessor for SceneStorage();
  SceneStorage.projectedValue.getter(v17);
  v16(v7);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v31);
  uint64_t v18 = v32;
  SceneStorage.wrappedValue.getter(v17, v32);
  uint64_t v40 = v34;
  uint64_t v41 = v8;
  long long v42 = *(_OWORD *)(a1 + 32);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v43 = *(void *)(a1 + 48);
  uint64_t v44 = v19;
  uint64_t v20 = v28;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PresentedWindowContent.Child.body.getter, (uint64_t)v39, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB960], v21, (uint64_t)v47);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v18, v20);
  char v22 = v29;
  View.preference<A>(key:value:)();
  outlined destroy of AnyHashable?((uint64_t)v47);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v8);
  unint64_t v23 = lazy protocol witness table accessor for type _PreferenceWritingModifier<PresentedSceneValueKey> and conformance _PreferenceWritingModifier<A>();
  uint64_t v45 = v19;
  unint64_t v46 = v23;
  swift_getWitnessTable();
  uint64_t v24 = v33;
  static ViewBuilder.buildExpression<A>(_:)(v22);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v36 + 8);
  v25(v22, v12);
  static ViewBuilder.buildExpression<A>(_:)(v24);
  return ((uint64_t (*)(char *, uint64_t))v25)(v24, v12);
}

uint64_t closure #1 in PresentedWindowContent.Child.body.getter(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return AnyHashable.init<A>(_:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PresentedWindowContent<A, B>()
{
  swift_getWitnessTable();

  return static MultiView._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PresentedWindowContent<A, B>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return static PresentedWindowContent._makeViewList(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a4);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PresentedWindowContent<A, B>()
{
  return static MultiView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance PresentedWindowContent<A, B>()
{
}

uint64_t closure #1 in standardDecoder<A>(forType:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v4 = 0;
    memset(v3, 0, sizeof(v3));
  }
  outlined init with copy of AnyHashable?((uint64_t)v3, (uint64_t)v2);
  type metadata accessor for PlatformItem.SelectionContent.AuxiliaryContent?(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
  lazy protocol witness table accessor for type AnyHashable? and conformance <A> A?();
  AnyHashable.init<A>(_:)();
  swift_release();
  return outlined destroy of AnyHashable?((uint64_t)v3);
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance PresentedSceneValueInputModifier()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PresentedSceneValueInputModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type PresentedSceneValueInputModifier and conformance PresentedSceneValueInputModifier();

  return MEMORY[0x1F40FF7D0](a1, a2, a3, a4, a5, v10);
}

void protocol witness for ViewModifier.body(content:) in conformance PresentedSceneValueInputModifier()
{
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance PresentedSceneValueKey(uint64_t a1, void (*a2)(_OWORD *__return_ptr, uint64_t))
{
  uint64_t v4 = outlined init with take of AnyHashable?(a1, (uint64_t)&v6);
  if (*((void *)&v7 + 1))
  {
    v9[0] = v6;
    v9[1] = v7;
    uint64_t v10 = v8;
  }
  else
  {
    a2(v9, v4);
    outlined destroy of AnyHashable?((uint64_t)&v6);
  }
  return outlined init with take of AnyHashable?((uint64_t)v9, a1);
}

uint64_t type metadata accessor for PresentedWindowContent.Child()
{
  return swift_getGenericMetadata();
}

_UNKNOWN **base witness table accessor for View in PresentedWindowContent<A, B>()
{
  return &protocol witness table for PresentedWindowContent<A, B>;
}

ValueMetadata *type metadata accessor for PresentedSceneValueKey()
{
  return &type metadata for PresentedSceneValueKey;
}

uint64_t type metadata accessor for PresentedWindowContent.WindowContentProvider()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for PresentedWindowContent.Child()
{
  type metadata accessor for Optional();
  uint64_t result = type metadata accessor for SceneStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PresentedWindowContent.Child(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  unint64_t v9 = v7 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = v7 + 16;
  unint64_t v11 = v9 & v10;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v12 = *(void *)(v5 + 64);
  }
  else {
    size_t v12 = *(void *)(v5 + 64) + 1;
  }
  size_t v13 = v12 + 7;
  unint64_t v14 = v11
      + ((((v12 + 7 + ((v7 + 32) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  int v15 = v7 & 0x100000;
  uint64_t v16 = *a2;
  if (v8 > 7 || v15 != 0 || v14 > 0x18)
  {
    *a1 = v16;
    uint64_t v3 = (void *)(v16 + v11);
  }
  else
  {
    uint64_t v19 = ~v8;
    uint64_t v20 = a2[1];
    *uint64_t v3 = v16;
    v3[1] = v20;
    uint64_t v21 = (void *)(v9 & ((unint64_t)v3 + 23));
    char v22 = (void *)(v9 & ((unint64_t)a2 + 23));
    *uint64_t v21 = *v22;
    v21[1] = v22[1];
    unint64_t v23 = (void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = (void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v23 = *v24;
    v23[1] = v24[1];
    __dst = (void *)(((unint64_t)v23 + v10) & v19);
    uint64_t v25 = (const void *)(((unint64_t)v24 + v10) & v19);
    uint64_t v26 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v26(v25, 1, v4))
    {
      memcpy(__dst, v25, v12);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(__dst, v25, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(__dst, 0, 1, v4);
    }
    uint64_t v28 = (void *)(((unint64_t)__dst + v13) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = (void *)(((unint64_t)v25 + v13) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v28 = *v29;
    *(void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
  }
  swift_retain();
  return v3;
}

uint64_t destroy for PresentedWindowContent.Child(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v7 = (v6 + ((((a1 + (v6 | 7) + 16) & ~(v6 | 7)) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v6;
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4)) {
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v7, v4);
  }
  swift_release();

  return swift_release();
}

void *initializeWithCopy for PresentedWindowContent.Child(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 | 7) + 16;
  uint64_t v10 = (void *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  unint64_t v11 = (void *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  *uint64_t v10 = *v11;
  v10[1] = v11[1];
  size_t v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  size_t v13 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  *size_t v12 = *v13;
  v12[1] = v13[1];
  unint64_t v14 = (void *)(((unint64_t)v12 + v8 + 16) & ~v8);
  int v15 = (const void *)(((unint64_t)v13 + v8 + 16) & ~v8);
  uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v16(v15, 1, v5))
  {
    int v17 = *(_DWORD *)(v7 + 84);
    uint64_t v18 = *(void *)(v7 + 64);
    if (v17) {
      size_t v19 = *(void *)(v7 + 64);
    }
    else {
      size_t v19 = v18 + 1;
    }
    memcpy(v14, v15, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v14, v15, v5);
    uint64_t v21 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v20 = v7 + 56;
    v21(v14, 0, 1, v5);
    int v17 = *(_DWORD *)(v20 + 28);
    uint64_t v18 = *(void *)(v20 + 8);
  }
  if (v17) {
    uint64_t v22 = v18;
  }
  else {
    uint64_t v22 = v18 + 1;
  }
  unint64_t v23 = (void *)(((unint64_t)v14 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = (void *)(((unint64_t)v15 + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v23 = *v24;
  *(void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for PresentedWindowContent.Child(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + 16;
  unint64_t v11 = (void *)(((unint64_t)a1 + v10) & ~(v9 | 7));
  size_t v12 = (void *)(((unint64_t)a2 + v10) & ~(v9 | 7));
  *unint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  size_t v13 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v15 = (void *)(((unint64_t)v13 + v9 + 16) & ~v9);
  uint64_t v16 = (void *)(((unint64_t)v14 + v9 + 16) & ~v9);
  int v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v13) = v17(v15, 1, v7);
  int v18 = v17(v16, 1, v7);
  if (v13)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v15, v16, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v15, 0, 1, v7);
      goto LABEL_12;
    }
    int v19 = *(_DWORD *)(v8 + 84);
    size_t v20 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v15, v16, v7);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v15, v7);
    int v19 = *(_DWORD *)(v8 + 84);
    size_t v20 = *(void *)(v8 + 64);
  }
  if (v19) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = v20 + 1;
  }
  memcpy(v15, v16, v21);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v22 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v22 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v23 = (uint64_t)v15 + v22 + 7;
  uint64_t v24 = (uint64_t)v16 + v22 + 7;
  unint64_t v25 = (v24 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v23 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v24 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_retain();
  swift_release();
  *(void *)(v26 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v25 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for PresentedWindowContent.Child(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 | 7) + 16;
  uint64_t v9 = (_OWORD *)(((unint64_t)a1 + v8) & ~(v7 | 7));
  uint64_t v10 = (_OWORD *)(((unint64_t)a2 + v8) & ~(v7 | 7));
  *uint64_t v9 = *v10;
  unint64_t v11 = (_OWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  size_t v12 = (_OWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v11 = *v12;
  size_t v13 = (void *)(((unint64_t)v11 + v7 + 16) & ~v7);
  unint64_t v14 = (const void *)(((unint64_t)v12 + v7 + 16) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4))
  {
    int v15 = *(_DWORD *)(v6 + 84);
    size_t v16 = *(void *)(v6 + 64);
    if (v15) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v16 + 1;
    }
    memcpy(v13, v14, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v13, v14, v4);
    int v19 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v18 = v6 + 56;
    v19(v13, 0, 1, v4);
    int v15 = *(_DWORD *)(v18 + 28);
    size_t v16 = *(void *)(v18 + 8);
  }
  if (v15) {
    size_t v20 = v16;
  }
  else {
    size_t v20 = v16 + 1;
  }
  size_t v21 = (void *)(((unint64_t)v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (void *)(((unint64_t)v14 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  *size_t v21 = *v22;
  *(void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_OWORD *assignWithTake for PresentedWindowContent.Child(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + 16;
  uint64_t v10 = (void *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  unint64_t v11 = (void *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  *uint64_t v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRelease();
  size_t v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  size_t v13 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  *size_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRelease();
  unint64_t v14 = (void *)(((unint64_t)v12 + v8 + 16) & ~v8);
  int v15 = (void *)(((unint64_t)v13 + v8 + 16) & ~v8);
  size_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v12) = v16(v14, 1, v6);
  int v17 = v16(v15, 1, v6);
  if (v12)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v14, v15, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
      goto LABEL_12;
    }
    int v18 = *(_DWORD *)(v7 + 84);
    size_t v19 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v14, v15, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v14, v6);
    int v18 = *(_DWORD *)(v7 + 84);
    size_t v19 = *(void *)(v7 + 64);
  }
  if (v18) {
    size_t v20 = v19;
  }
  else {
    size_t v20 = v19 + 1;
  }
  memcpy(v14, v15, v20);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v21 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v21 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v22 = (uint64_t)v14 + v21 + 7;
  uint64_t v23 = (void *)(((unint64_t)v15 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(void *)(v22 & 0xFFFFFFFFFFFFFFF8) = *v23;
  unint64_t v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release();
  *(void *)(v24 & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentedWindowContent.Child(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  int v7 = v6 - 1;
  if (!v6) {
    int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFF) {
    int v8 = 0x7FFFFFFF;
  }
  else {
    int v8 = v7;
  }
  if (v7 >= 0) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v8;
  }
  uint64_t v10 = *(unsigned __int8 *)(v4 + 80);
  if (v6) {
    uint64_t v11 = 7;
  }
  else {
    uint64_t v11 = 8;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = v10 | 7;
  uint64_t v13 = v10 + 16;
  if (v9 < a2)
  {
    unint64_t v14 = (v13 & ~v12)
        + ((((v11 + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v10 + 32) & ~v10)) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    unsigned int v15 = a2 - v9;
    uint64_t v16 = v14 & 0xFFFFFFF8;
    if ((v14 & 0xFFFFFFF8) != 0) {
      unsigned int v17 = 2;
    }
    else {
      unsigned int v17 = v15 + 1;
    }
    if (v17 >= 0x10000) {
      LODWORD(v18) = 4;
    }
    else {
      LODWORD(v18) = 2;
    }
    if (v17 < 0x100) {
      LODWORD(v18) = 1;
    }
    if (v17 >= 2) {
      uint64_t v18 = v18;
    }
    else {
      uint64_t v18 = 0;
    }
    switch(v18)
    {
      case 1:
        int v19 = *((unsigned __int8 *)a1 + v14);
        if (!v19) {
          break;
        }
        goto LABEL_30;
      case 2:
        int v19 = *(unsigned __int16 *)((char *)a1 + v14);
        if (v19) {
          goto LABEL_30;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187EBB830);
      case 4:
        int v19 = *(_DWORD *)((char *)a1 + v14);
        if (!v19) {
          break;
        }
LABEL_30:
        int v21 = v19 - 1;
        if (v16)
        {
          int v21 = 0;
          LODWORD(v16) = *a1;
        }
        return v9 + (v16 | v21) + 1;
      default:
        break;
    }
  }
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v22 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v22) = -1;
    }
    return (v22 + 1);
  }
  else
  {
    unsigned int v23 = (*(uint64_t (**)(unint64_t))(v5 + 48))((v13
                                                                 + (((((unint64_t)a1 + v12 + 16) & ~v12) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v10);
    if (v23 >= 2) {
      return v23 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for PresentedWindowContent.Child(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  int v9 = v8 - 1;
  if (!v8) {
    int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    int v10 = 0x7FFFFFFF;
  }
  else {
    int v10 = v9;
  }
  if (v9 >= 0) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v10;
  }
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  size_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v13;
  }
  size_t v14 = ((v12 + 16) & ~(v12 | 7))
      + ((((((v12 + 32) & ~v12) + v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v11 < a3)
  {
    unsigned int v15 = a3 - v11;
    if (((v12 + 16) & ~(v12 | 7))
       + ((((((v12 + 32) & ~v12) + v13 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == -8)
      unsigned int v16 = v15 + 1;
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      int v17 = 4;
    }
    else {
      int v17 = 2;
    }
    if (v16 < 0x100) {
      int v17 = 1;
    }
    if (v16 >= 2) {
      int v6 = v17;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v11)
  {
    if (((v12 + 16) & ~(v12 | 7))
       + ((((((v12 + 32) & ~v12) + v13 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == -8)
      int v18 = a2 - v11;
    else {
      int v18 = 1;
    }
    if (((v12 + 16) & ~(v12 | 7))
       + ((((((v12 + 32) & ~v12) + v13 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != -8)
    {
      unsigned int v19 = ~v11 + a2;
      bzero(a1, v14);
      *(_DWORD *)a1 = v19;
    }
    switch(v6)
    {
      case 1:
        a1[v14] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v18;
        return;
      case 3:
        goto LABEL_62;
      case 4:
        *(_DWORD *)&a1[v14] = v18;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_38;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_38;
    case 3:
LABEL_62:
      __break(1u);
      JUMPOUT(0x187EBBB14);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_37;
    default:
LABEL_37:
      if (a2)
      {
LABEL_38:
        if (v11 == 0x7FFFFFFF)
        {
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v20 = a2 ^ 0x80000000;
            *((void *)a1 + 1) = 0;
          }
          else
          {
            uint64_t v20 = a2 - 1;
          }
          *(void *)a1 = v20;
        }
        else
        {
          int v21 = (unsigned char *)((v12
                         + 16
                         + ((((unint64_t)&a1[(v12 | 7) + 16] & ~(v12 | 7)) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v12);
          if (v9 >= a2)
          {
            uint64_t v25 = a2 + 1;
            unint64_t v26 = *(void (**)(unsigned char *, uint64_t))(v7 + 56);
            v26(v21, v25);
          }
          else
          {
            if (v13 <= 3) {
              int v22 = ~(-1 << (8 * v13));
            }
            else {
              int v22 = -1;
            }
            if (v13)
            {
              int v23 = v22 & (~v9 + a2);
              if (v13 <= 3) {
                int v24 = v13;
              }
              else {
                int v24 = 4;
              }
              bzero(v21, v13);
              switch(v24)
              {
                case 2:
                  *(_WORD *)int v21 = v23;
                  break;
                case 3:
                  *(_WORD *)int v21 = v23;
                  v21[2] = BYTE2(v23);
                  break;
                case 4:
                  *(_DWORD *)int v21 = v23;
                  break;
                default:
                  *int v21 = v23;
                  break;
              }
            }
          }
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for PresentedSceneValueInput()
{
  return &type metadata for PresentedSceneValueInput;
}

uint64_t type metadata completion function for PresentedWindowContent.MakeChild()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PresentedWindowContent.MakeChild(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v8;
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v10 = v8 + ((v7 + 8) & ~v7);
    char v11 = 8 * v10;
    if (v10 > 3) {
      goto LABEL_8;
    }
    unsigned int v13 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (v12) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v13 <= 0xFF)
      {
        if (v13 < 2) {
          goto LABEL_23;
        }
LABEL_8:
        int v12 = *((unsigned __int8 *)a1 + v10);
        if (!*((unsigned char *)a1 + v10)) {
          goto LABEL_23;
        }
LABEL_15:
        int v14 = (v12 - 1) << v11;
        if (v10 > 3) {
          int v14 = 0;
        }
        if (v10)
        {
          if (v10 > 3) {
            LODWORD(v10) = 4;
          }
          switch((int)v10)
          {
            case 2:
              LODWORD(v10) = *a1;
              break;
            case 3:
              LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              LODWORD(v10) = *(_DWORD *)a1;
              break;
            default:
              LODWORD(v10) = *(unsigned __int8 *)a1;
              break;
          }
        }
        return v6 + (v10 | v14) + 1;
      }
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_15;
      }
    }
  }
LABEL_23:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                               + v7
                                                               + 4) & ~v7);
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for PresentedWindowContent.MakeChild(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v11;
  }
  size_t v12 = v11 + ((v10 + 8) & ~v10);
  BOOL v13 = a3 >= v9;
  unsigned int v14 = a3 - v9;
  if (v14 == 0 || !v13)
  {
LABEL_15:
    if (v9 < a2) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  if (v12 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  unsigned int v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
  if (!HIWORD(v15))
  {
    if (v15 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v15 > 1;
    }
    goto LABEL_15;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_16:
    unsigned int v16 = ~v9 + a2;
    if (v12 < 4)
    {
      int v17 = (v16 >> (8 * v12)) + 1;
      if (v12)
      {
        int v18 = v16 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if (v12 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v12 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v12] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v17;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v12] = v17;
        return;
      default:
        return;
    }
  }
LABEL_23:
  switch(v6)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187EBC01CLL);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_27;
    default:
LABEL_27:
      if (a2)
      {
LABEL_28:
        if (v8 >= 2)
        {
          unint64_t v19 = (((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v10 + 4) & ~v10;
          uint64_t v20 = a2 + 1;
          int v21 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
          v21(v19, v20);
        }
      }
      return;
  }
}

uint64_t associated type witness table accessor for View.Body : View in PresentedWindowContent<A, B>.Child()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in PresentedWindowContent<A, B>.MakeChild()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _PreferenceWritingModifier<PresentedSceneValueKey>()
{
  if (!lazy cache variable for type metadata for _PreferenceWritingModifier<PresentedSceneValueKey>)
  {
    unint64_t v0 = type metadata accessor for _PreferenceWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceWritingModifier<PresentedSceneValueKey>);
    }
  }
}

uint64_t partial apply for closure #1 in PresentedWindowContent.Child.body.getter(uint64_t a1)
{
  return closure #1 in PresentedWindowContent.Child.body.getter(a1);
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<PresentedSceneValueKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<PresentedSceneValueKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<PresentedSceneValueKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<PresentedSceneValueKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<PresentedSceneValueKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in PresentedWindowContent.init(content:defaultValue:)(uint64_t a1)
{
  return implicit closure #1 in PresentedWindowContent.init(content:defaultValue:)(a1, *(void (**)(char *))(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_187EBC21C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in standardDecoder<A>(forType:)(uint64_t a1)
{
  return closure #1 in standardDecoder<A>(forType:)(a1);
}

unint64_t lazy protocol witness table accessor for type AnyHashable? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyHashable? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AnyHashable? and conformance <A> A?)
  {
    type metadata accessor for PlatformItem.SelectionContent.AuxiliaryContent?(255, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyHashable? and conformance <A> A?);
  }
  return result;
}

uint64_t assignWithTake for PresentedSceneValueInputModifier(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    if (*(void *)(a2 + 24)) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else {
      outlined destroy of AnyHashable(a1);
    }
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t sub_187EBC320()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in PresentedSceneValueInputModifier()
{
  return &protocol witness table for PresentedSceneValueInputModifier;
}

unint64_t lazy protocol witness table accessor for type PresentedSceneValueInputModifier and conformance PresentedSceneValueInputModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentedSceneValueInputModifier and conformance PresentedSceneValueInputModifier;
  if (!lazy protocol witness table cache variable for type PresentedSceneValueInputModifier and conformance PresentedSceneValueInputModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentedSceneValueInputModifier and conformance PresentedSceneValueInputModifier);
  }
  return result;
}

uint64_t DefaultMenuStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v8 = swift_getKeyPath();
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = KeyPath;
  *(unsigned char *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = v8;
  *(unsigned char *)(a2 + 72) = 0;
  outlined copy of AppIntentExecutor?(v3);

  return outlined copy of AppIntentExecutor?(v5);
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in DefaultMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for MenuStyle.makeBody(configuration:) in conformance DefaultMenuStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return DefaultMenuStyle.makeBody(configuration:)(a1, a2);
}

ValueMetadata *type metadata accessor for DefaultMenuStyle()
{
  return &type metadata for DefaultMenuStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, MenuStyleModifier<PlatformFallbackMenuStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, MenuStyleModifier<PlatformFallbackMenuStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, MenuStyleModifier<PlatformFallbackMenuStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, MenuStyleModifier<PlatformFallbackMenuStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, MenuStyleModifier<PlatformFallbackMenuStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, MenuStyleModifier<PlatformFallbackMenuStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, MenuStyleModifier<PlatformFallbackMenuStyle>>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>);
    type metadata accessor for MenuStyleModifier<ToolbarMenuStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<PlatformFallbackMenuStyle>, (void (*)(void))lazy protocol witness table accessor for type PlatformFallbackMenuStyle and conformance PlatformFallbackMenuStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, MenuStyleModifier<PlatformFallbackMenuStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    type metadata accessor for MenuStyleModifier<ToolbarMenuStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<ToolbarMenuStyle>, (void (*)(void))lazy protocol witness table accessor for type ToolbarMenuStyle and conformance ToolbarMenuStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ToolbarMenuStyle and conformance ToolbarMenuStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarMenuStyle and conformance ToolbarMenuStyle;
  if (!lazy protocol witness table cache variable for type ToolbarMenuStyle and conformance ToolbarMenuStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarMenuStyle and conformance ToolbarMenuStyle);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SwipeActionsStyleContext>);
    type metadata accessor for MenuStyleModifier<ToolbarMenuStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<PlatformItemListMenuStyle>, (void (*)(void))lazy protocol witness table accessor for type PlatformItemListMenuStyle and conformance PlatformItemListMenuStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SwipeActionsStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SwipeActionsStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformFallbackMenuStyle and conformance PlatformFallbackMenuStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformFallbackMenuStyle and conformance PlatformFallbackMenuStyle;
  if (!lazy protocol witness table cache variable for type PlatformFallbackMenuStyle and conformance PlatformFallbackMenuStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformFallbackMenuStyle and conformance PlatformFallbackMenuStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>);
    lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, &lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>);
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformFallbackMenuStyle()
{
  return &type metadata for PlatformFallbackMenuStyle;
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in PlatformFallbackMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t PlatformFallbackMenuStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v8 = swift_getKeyPath();
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(unsigned char *)(a2 + 32) = 2;
  *(void *)(a2 + 40) = KeyPath;
  *(unsigned char *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = v8;
  *(unsigned char *)(a2 + 64) = 0;
  outlined copy of AppIntentExecutor?(v3);

  return outlined copy of AppIntentExecutor?(v5);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<BorderlessButtonMenuStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>, &lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<BorderlessButtonMenuStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<BorderlessButtonMenuStyle>>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>(255);
    type metadata accessor for MenuStyleModifier<ToolbarMenuStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<BorderlessButtonMenuStyle>, (void (*)(void))lazy protocol witness table accessor for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<BorderlessButtonMenuStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for MenuStyleModifier<ToolbarMenuStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<ButtonMenuStyle>, (void (*)(void))lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for MenuStyleModifier<ToolbarMenuStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for MenuStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    lazy protocol witness table accessor for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void EnvironmentValues.stepperFieldWidth.getter()
{
}

void EnvironmentValues.stepperFieldWidth.setter()
{
}

void EnvironmentValues.stepperFieldWidth.modify()
{
}

void sub_187EBCF08()
{
}

void sub_187EBCF30()
{
}

uint64_t UISceneAdaptor.init(id:role:content:)@<X0>(uint64_t a1@<X6>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  uint64_t v6 = StaticString.description.getter();
  uint64_t v8 = v7;
  uint64_t v9 = StaticString.description.getter();
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v8;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = v9;
  *(void *)(a3 + 32) = v10;
  uint64_t v11 = a3 + *(int *)(type metadata accessor for UISceneAdaptor() + 40);
  size_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v12(v11, a1, a2);
}

uint64_t UISceneAdaptor.init(id:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = a1;
  *(void *)(a7 + 8) = a2;
  *(unsigned char *)(a7 + 16) = 0;
  *(void *)(a7 + 24) = a3;
  *(void *)(a7 + 32) = a4;
  uint64_t v9 = a7 + *(int *)(type metadata accessor for UISceneAdaptor() + 40);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32);

  return v10(v9, a5, a6);
}

uint64_t type metadata accessor for UISceneAdaptor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t UISceneAdaptor.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  unint64_t v7 = *(void *)(v1 + 32);
  outlined copy of SceneID(*(void *)v1, v4, v5);
  outlined copy of UISceneAdaptorConfiguration.Kind(v6, v7);
  specialized ResolvedUISceneAdaptor.init(id:kind:content:)(v3, v4, v5, v6, v7, (uint64_t)&v21);
  v25[0] = v22;
  v25[1] = v23;
  long long v24 = v21;
  uint64_t v28 = *((void *)&v23 + 1);
  outlined init with take of UISceneAdaptorConfiguration.Kind((uint64_t)v25 + 8, (uint64_t)v27);
  outlined init with take of SceneID((uint64_t)&v24, (uint64_t)v26);
  long long v14 = v21;
  long long v15 = v22;
  long long v16 = v23;
  uint64_t v8 = type metadata accessor for ResolvedUISceneAdaptor();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)((uint64_t)&v14, v8, (uint64_t)&v17);
  outlined release of SceneID((uint64_t)v26);
  outlined release of UISceneAdaptorConfiguration.Kind((uint64_t)v27);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v28);
  long long v9 = v17;
  char v10 = v18;
  uint64_t v11 = v19;
  unint64_t v12 = v20;
  long long v14 = v17;
  LOBYTE(v15) = v18;
  *((void *)&v15 + 1) = v19;
  long long v16 = v20;
  static SceneBuilder.buildBlock<A>(_:)((uint64_t)&v14, v8, a1);
  outlined consume of SceneID(v9, *((uint64_t *)&v9 + 1), v10);
  outlined consume of UISceneAdaptorConfiguration.Kind(v11, v12);
  return swift_release();
}

uint64_t ResolvedUISceneAdaptor.body.getter@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[1];
  long long v30 = *v1;
  long long v31 = v3;
  long long v32 = v1[2];
  long long v4 = v30;
  uint64_t v5 = *((void *)&v3 + 1);
  long long v6 = v32;
  char v7 = v3 & 1;
  char v22 = v3 & 1;
  long long v23 = v30;
  char v24 = v3 & 1;
  uint64_t v25 = *((void *)&v3 + 1);
  long long v26 = v32;
  uint64_t v29 = *((void *)&v32 + 1);
  outlined init with take of UISceneAdaptorConfiguration.Kind((uint64_t)&v25, (uint64_t)v28);
  outlined init with take of SceneID((uint64_t)&v23, (uint64_t)v27);
  long long v14 = v4;
  char v15 = v7;
  uint64_t v16 = v5;
  long long v17 = v6;
  uint64_t v8 = type metadata accessor for ResolvedUISceneAdaptor.RootViewScene();
  static ViewBuilder.buildExpression<A>(_:)((uint64_t)&v14, v8, (uint64_t)&v18);
  outlined init with take of SceneID((uint64_t)&v30, (uint64_t)v33);
  outlined init with take of UISceneAdaptorConfiguration.Kind((uint64_t)&v31 + 8, (uint64_t)v34);
  v35[0] = *((void *)&v32 + 1);
  outlined retain of SceneID((uint64_t)v33);
  outlined retain of UISceneAdaptorConfiguration.Kind((uint64_t)v34);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v35);
  outlined release of SceneID((uint64_t)v27);
  outlined release of UISceneAdaptorConfiguration.Kind((uint64_t)v28);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v29);
  long long v9 = v18;
  char v10 = v19;
  uint64_t v11 = v20;
  unint64_t v12 = v21;
  long long v14 = v18;
  char v15 = v19;
  uint64_t v16 = v20;
  long long v17 = v21;
  static SceneBuilder.buildBlock<A>(_:)((uint64_t)&v14, v8, a1);
  outlined consume of SceneID(v9, *((uint64_t *)&v9 + 1), v10);
  outlined consume of UISceneAdaptorConfiguration.Kind(v11, v12);
  return swift_release();
}

uint64_t static ResolvedUISceneAdaptor.RootViewScene._makeScene(scene:inputs:)@<X0>(uint64_t a1@<X8>)
{
  PreferencesOutputs.init()();
  type metadata accessor for ResolvedUISceneAdaptor.RootViewScene();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<UISceneAdaptorConfiguration>(0, &lazy cache variable for type metadata for _GraphValue<UISceneAdaptorConfiguration>, (uint64_t)&type metadata for UISceneAdaptorConfiguration, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  _GraphInputs.environment.getter();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t closure #1 in static ResolvedUISceneAdaptor.RootViewScene._makeScene(scene:inputs:)(uint64_t a1)
{
  v5[2] = type metadata accessor for ResolvedUISceneAdaptor.RootViewScene();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_15, (uint64_t)v5, (uint64_t)&type metadata for UISceneAdaptorConfiguration, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v5[5];
}

uint64_t implicit closure #1 in static ResolvedUISceneAdaptor.RootViewScene._makeScene(scene:inputs:)(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  uint64_t List = type metadata accessor for ResolvedUISceneAdaptor.RootViewScene.MakeList();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for _GraphValue<UISceneAdaptorConfiguration>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<SceneList>, (uint64_t)&type metadata for SceneList, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v5, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v6, List, MEMORY[0x1E4FBC248], v1, MEMORY[0x1E4FBC278], v2);
  return v4;
}

uint64_t ResolvedUISceneAdaptor.RootViewScene.MakeList.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = *(void *)Value;
  uint64_t v4 = *(void *)(Value + 8);
  char v5 = *(unsigned char *)(Value + 16);
  uint64_t v6 = *(void *)(Value + 24);
  unint64_t v7 = *(void *)(Value + 32);
  uint64_t v8 = *(void *)(Value + 40);
  outlined copy of SceneID(*(void *)Value, v4, v5);
  outlined copy of UISceneAdaptorConfiguration.Kind(v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;

  return swift_retain();
}

uint64_t ResolvedUISceneAdaptor.RootViewScene.MakeList.value.getter()
{
  ResolvedUISceneAdaptor.RootViewScene.MakeList.configuration.getter((uint64_t)__src);
  LOBYTE(__src[16]) = 5;
  ResolvedUISceneAdaptor.RootViewScene.MakeList.configuration.getter((uint64_t)v9);
  outlined init with take of SceneID((uint64_t)v9, (uint64_t)v13);
  outlined init with take of UISceneAdaptorConfiguration.Kind((uint64_t)v10, (uint64_t)v12);
  outlined release of UISceneAdaptorConfiguration.Kind((uint64_t)v12);
  uint64_t v11 = v10[2];
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v11);
  DisplayList.Version.init(forUpdate:)();
  uint64_t v0 = v7[2];
  _DiscreteSymbolEffectModifier.EffectEnvironment.environment.getter(v7);
  uint64_t v1 = v7[0];
  uint64_t v2 = v7[1];
  uint64_t v3 = MEMORY[0x1E4FBC860];
  unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  outlined init with take of SceneID((uint64_t)v13, (uint64_t)&__src[17]);
  __src[20] = v0;
  __src[21] = v1;
  __src[22] = v2;
  LOBYTE(__src[23]) = 0;
  memset(&__src[24], 0, 17);
  __src[27] = 0;
  __src[28] = 0;
  LOBYTE(__src[29]) = 1;
  __src[30] = 0;
  __src[31] = 0;
  LOBYTE(__src[32]) = 1;
  *(_WORD *)((char *)&__src[32] + 1) = 0;
  __src[33] = v3;
  __src[34] = v4;
  type metadata accessor for _GraphValue<UISceneAdaptorConfiguration>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SceneList.Item>, (uint64_t)&type metadata for SceneList.Item, MEMORY[0x1E4FBBE00]);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18834BB80;
  memcpy((void *)(v5 + 32), __src, 0x118uLL);
  return v5;
}

uint64_t protocol witness for Rule.value.getter in conformance ResolvedUISceneAdaptor<A>.RootViewScene.MakeList@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ResolvedUISceneAdaptor.RootViewScene.MakeList.value.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Scene._makeScene(scene:inputs:) in conformance ResolvedUISceneAdaptor<A>.RootViewScene@<X0>(uint64_t a1@<X8>)
{
  return static ResolvedUISceneAdaptor.RootViewScene._makeScene(scene:inputs:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UISceneAdaptorConfiguration.Kind(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = a2[1];
  switch(v3)
  {
    case 0:
      return !v4;
    case 1:
      return v4 == 1;
    case 2:
      return v4 == 2;
  }
  if (v4 < 3) {
    return 0;
  }
  if (*a1 == *a2 && v3 == v4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t Scene.safeAreaDisabled()(uint64_t a1, uint64_t a2)
{
  return Scene.modifier<A>(_:)(a1, a1, &unk_1ED456B30, a2);
}

uint64_t static SceneSafeAreaDisabledModifier._makeScene(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[5];
  uint64_t v8 = a2[6];
  int v9 = *((_DWORD *)a2 + 14);
  uint64_t v12 = *a2;
  int v13 = v5;
  uint64_t v14 = v6;
  long long v15 = *(_OWORD *)(a2 + 3);
  uint64_t v16 = v7;
  uint64_t v17 = v8;
  int v18 = v9;
  a3(&v19, a1, &v12);
  uint64_t v12 = v8;
  int v13 = v9;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  uint64_t result = swift_bridgeObjectRelease();
  int v11 = v20;
  *(void *)a4 = v19;
  *(_DWORD *)(a4 + 8) = v11;
  return result;
}

uint64_t closure #1 in static SceneSafeAreaDisabledModifier._makeScene(modifier:inputs:body:)(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(void *)(*(void *)result + 16);
  if (v2)
  {
    uint64_t v3 = (void *)result;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_11:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      uint64_t v1 = result;
    }
    unint64_t v4 = 0;
    unint64_t v5 = *(void *)(v1 + 16);
    uint64_t v6 = 216;
    do
    {
      if (v4 >= v5)
      {
        __break(1u);
        goto LABEL_11;
      }
      if ((*(unsigned char *)(v1 + v6) & 2) == 0) {
        *(unsigned char *)(v1 + v6) |= 2u;
      }
      ++v4;
      v6 += 280;
    }
    while (v2 != v4);
    *uint64_t v3 = v1;
  }
  return result;
}

uint64_t implicit closure #1 in static SceneSafeAreaDisabledModifier._makeScene(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  type metadata accessor for (_:)();
  type metadata accessor for External<(_:)>();
  lazy protocol witness table accessor for type External<(_:)> and conformance External<A>();
  swift_retain();
  uint64_t v5 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  return v5;
}

uint64_t specialized ResolvedUISceneAdaptor.init(id:kind:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  double v12 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v15, v16, v12);
  uint64_t result = AnyView.init<A>(_:)();
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3 & 1;
  *(void *)(a6 + 24) = a4;
  *(void *)(a6 + 32) = a5;
  *(void *)(a6 + 40) = result;
  return result;
}

uint64_t outlined copy of UISceneAdaptorConfiguration.Kind(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t type metadata accessor for ResolvedUISceneAdaptor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for Scene.Body : Scene in UISceneAdaptor<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for UISceneAdaptor()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for UISceneAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 40) & (unint64_t)~v7) + *(void *)(v6 + 64) > 0x18)
  {
    uint64_t v10 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v11 = *(void *)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    char v13 = *(unsigned char *)(a2 + 16);
    outlined copy of SceneID(*(void *)a2, v12, v13);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    *(unsigned char *)(a1 + 16) = v13;
    uint64_t v14 = (_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
    unint64_t v15 = a2 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v16 = (_OWORD *)(v15 + 24);
    if (*(void *)(v15 + 32) < 0xFFFFFFFFuLL)
    {
      *uint64_t v14 = *v16;
    }
    else
    {
      *(void *)uint64_t v14 = *(void *)v16;
      *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = *(void *)(v15 + 32);
      swift_bridgeObjectRetain();
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((a1 & 0xFFFFFFFFFFFFFFF8) + v7 + 40) & ~v7, (v15 + v7 + 40) & ~v7, v5);
  }
  return a1;
}

uint64_t destroy for UISceneAdaptor(uint64_t a1, uint64_t a2)
{
  outlined consume of SceneID(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v4 + 32) >= 0xFFFFFFFFuLL) {
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t initializeWithCopy for UISceneAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  outlined copy of SceneID(*(void *)a2, v7, v8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  int v9 = (_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  unint64_t v10 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = (_OWORD *)(v10 + 24);
  if (*(void *)(v10 + 32) < 0xFFFFFFFFuLL)
  {
    *int v9 = *v11;
  }
  else
  {
    *(void *)int v9 = *(void *)v11;
    *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = *(void *)(v10 + 32);
    swift_bridgeObjectRetain();
  }
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 16))(((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (v10 + *(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t assignWithCopy for UISceneAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  outlined copy of SceneID(*(void *)a2, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  outlined consume of SceneID(v9, v10, v11);
  uint64_t v12 = (void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  char v13 = (void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  unint64_t v14 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      *uint64_t v12 = *v13;
      *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    goto LABEL_8;
  }
  if (v14 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *uint64_t v12 = *v13;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 24))(((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v15 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), ((a2 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v15 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

uint64_t initializeWithTake for UISceneAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((a2 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for UISceneAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of SceneID(v7, v8, v9);
  uint64_t v10 = (_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  unint64_t v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = (_OWORD *)(v11 + 24);
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)(v11 + 32) < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *uint64_t v10 = *v12;
    goto LABEL_6;
  }
  *(void *)uint64_t v10 = *(void *)v12;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = *(void *)(v11 + 32);
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 40))(((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v13 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (v11 + *(unsigned __int8 *)(v13 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for UISceneAdaptor(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFC) {
    unsigned int v7 = 2147483644;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 40) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)(a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      unint64_t v15 = a1 & 0xFFFFFFFFFFFFFFF8;
      if (v5 > 0x7FFFFFFC) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((v15 + v6 + 40) & ~v6);
      }
      unint64_t v16 = *(void *)(v15 + 32);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      unsigned int v17 = v16 + 1;
      unsigned int v18 = v16 - 2;
      if (v17 >= 4) {
        return v18;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(unsigned char *)(a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v9) = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for UISceneAdaptor(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFC) {
    unsigned int v8 = 2147483644;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 40) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero((void *)a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          *(unsigned char *)(a1 + 2) = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *(unsigned char *)a1 = v17;
        }
      }
    }
    else
    {
      bzero((void *)a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        *(unsigned char *)(a1 + v10) = v15;
        return;
      case 2:
        *(_WORD *)(a1 + v10) = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)(a1 + v10) = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      *(unsigned char *)(a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)(a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187EBE888);
    case 4:
      *(_DWORD *)(a1 + v10) = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        unint64_t v18 = a1 & 0xFFFFFFFFFFFFFFF8;
        if (v7 >= 0x7FFFFFFD)
        {
          int v20 = *(void (**)(unint64_t))(v6 + 56);
          v20((v18 + v9 + 40) & ~v9);
        }
        else
        {
          uint64_t v19 = (void *)(v18 + 24);
          if (a2 >= 0x7FFFFFFD)
          {
            void *v19 = 0;
            *(void *)(v18 + 32) = 0;
            *(_DWORD *)uint64_t v19 = a2 - 2147483645;
          }
          else
          {
            *(void *)(v18 + 32) = a2 + 2;
          }
        }
      }
      return;
  }
}

uint64_t sub_187EBE8B0()
{
  return swift_getWitnessTable();
}

uint64_t outlined destroy of String(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for UISceneAdaptorConfiguration()
{
  return &type metadata for UISceneAdaptorConfiguration;
}

void *type metadata accessor for SceneSafeAreaDisabledModifier()
{
  return &unk_1ED456B30;
}

uint64_t getEnumTagSinglePayload for UISceneAdaptorConfiguration.Kind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for UISceneAdaptorConfiguration.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UISceneAdaptorConfiguration.Kind()
{
  return &type metadata for UISceneAdaptorConfiguration.Kind;
}

uint64_t associated type witness table accessor for Scene.Body : Scene in ResolvedUISceneAdaptor<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for ResolvedUISceneAdaptor.RootViewScene()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined retain of SceneID(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of UISceneAdaptorConfiguration.Kind(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for implicit closure #1 in static SceneSafeAreaDisabledModifier._makeScene(modifier:inputs:body:)()
{
  return implicit closure #1 in static SceneSafeAreaDisabledModifier._makeScene(modifier:inputs:body:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_187EBEB24()
{
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for External<(_:)>()
{
  if (!lazy cache variable for type metadata for External<(_:)>)
  {
    type metadata accessor for (_:)();
    unint64_t v0 = type metadata accessor for External();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<(_:)>);
    }
  }
}

uint64_t destroy for UISceneAdaptorConfiguration(uint64_t a1)
{
  outlined consume of SceneID(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  if (*(void *)(a1 + 32) >= 3uLL) {
    swift_bridgeObjectRelease();
  }

  return swift_release();
}

uint64_t initializeWithCopy for UISceneAdaptorConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of SceneID(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  unsigned int v7 = (void *)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  if (v8 >= 3)
  {
    *(void *)(a1 + 24) = *v7;
    *(void *)(a1 + 32) = v8;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v7;
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for UISceneAdaptorConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of SceneID(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of SceneID(v7, v8, v9);
  unint64_t v10 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) >= 3uLL)
  {
    if (v10 >= 3)
    {
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of String(a1 + 24);
    goto LABEL_6;
  }
  if (v10 < 3)
  {
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_8;
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
LABEL_8:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for UISceneAdaptorConfiguration(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of SceneID(v5, v6, v7);
  uint64_t v8 = (void *)(a2 + 24);
  if (*(void *)(a1 + 32) >= 3uLL)
  {
    unint64_t v9 = *(void *)(a2 + 32);
    if (v9 >= 3)
    {
      *(void *)(a1 + 24) = *v8;
      *(void *)(a1 + 32) = v9;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of String(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v8;
LABEL_6:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UISceneAdaptorConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UISceneAdaptorConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

_UNKNOWN **sub_187EBEF78()
{
  return &protocol witness table for ResolvedUISceneAdaptor<A>.RootViewScene;
}

uint64_t partial apply for closure #1 in static ResolvedUISceneAdaptor.RootViewScene._makeScene(scene:inputs:)(uint64_t a1)
{
  return closure #1 in static ResolvedUISceneAdaptor.RootViewScene._makeScene(scene:inputs:)(a1);
}

uint64_t partial apply for implicit closure #1 in static ResolvedUISceneAdaptor.RootViewScene._makeScene(scene:inputs:)()
{
  return implicit closure #1 in static ResolvedUISceneAdaptor.RootViewScene._makeScene(scene:inputs:)(*(void *)(v0 + 32));
}

uint64_t type metadata accessor for ResolvedUISceneAdaptor.RootViewScene.MakeList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in ResolvedUISceneAdaptor<A>.RootViewScene.MakeList()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _GraphValue<UISceneAdaptorConfiguration>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t View.listLabeledContentPrefersHorizontalLayout()(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout();

  return View.input<A>(_:)((uint64_t)&type metadata for ListLabeledContentPrefersHorizontalLayout, a1, (uint64_t)&type metadata for ListLabeledContentPrefersHorizontalLayout, a2, v4);
}

uint64_t sub_187EBF078()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LeadingTrailingLabeledContentStyle_Phone._Body(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = a1[3];
  type metadata accessor for <<opaque return type of GroupElementsOfContent.body>>.0();
  uint64_t v6 = v5;
  v10[0] = v1;
  v10[1] = v2;
  int v11 = v3;
  uint64_t v12 = v4;
  char v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F414E8];
  type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>(255, &lazy cache variable for type metadata for Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>, MEMORY[0x1E4F414E8]);
  type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>(255, &lazy cache variable for type metadata for Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>, (uint64_t (*)(uint64_t))type metadata accessor for GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>, v7);
  lazy protocol witness table accessor for type Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>> and conformance <A> Group<A>();
  lazy protocol witness table accessor for type Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>> and conformance <A> Group<A>();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(OpaqueTypeConformance2 + 40))(v10, v6, OpaqueTypeConformance2);
}

uint64_t associated type witness table accessor for LabeledContentStyle.Body : View in LeadingTrailingLabeledContentStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t LeadingTrailingLabeledContentStyle.makeBody(configuration:)(uint64_t a1, unint64_t a2, char a3)
{
  char v4 = a3 & 1;
  uint64_t v5 = static VerticalAlignment.center.getter();
  closure #1 in LeadingTrailingLabeledContentStyle.makeBody(configuration:)(a2, v4, &v15);
  char v6 = v16;
  unint64_t v7 = v17.n128_u64[0];
  unsigned __int8 v8 = v17.n128_u8[8];
  uint64_t v9 = v18;
  char v10 = v20;
  long long v11 = v21;
  __n128 v12 = v15;
  long long v13 = v19;
  __n128 v15 = (__n128)(unint64_t)v5;
  char v16 = 1;
  __n128 v17 = v12;
  LOBYTE(v18) = v6;
  *(void *)&long long v19 = v7;
  BYTE8(v19) = v8;
  uint64_t v20 = v9;
  long long v21 = v13;
  char v22 = v10;
  long long v23 = v11;
  Spacing.init()();
  type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>();
  lazy protocol witness table accessor for type GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>> and conformance GroupElementsOfContent<A, B>(&lazy protocol witness table cache variable for type HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>);
  View.spacing(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

__n128 closure #1 in LeadingTrailingLabeledContentStyle.makeBody(configuration:)@<Q0>(unint64_t a1@<X0>, char a2@<W1>, __n128 *a3@<X8>)
{
  uint64_t v6 = static HorizontalAlignment.leading.getter();
  static VerticalAlignment.center.getter();
  static Color.secondary.getter();
  type metadata accessor for LabelGroup<LabeledContentStyleConfiguration.Label>(0, &lazy cache variable for type metadata for HStack<LabeledContentStyleConfiguration.Content>, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Content, (uint64_t)&protocol witness table for LabeledContentStyleConfiguration.Content, MEMORY[0x1E4F415B8]);
  lazy protocol witness table accessor for type HStack<LabeledContentStyleConfiguration.Content> and conformance HStack<A>();
  View.defaultForegroundColor(_:)();
  swift_release();
  __n128 result = v8;
  a3->n128_u64[0] = v6;
  a3->n128_u64[1] = a1;
  a3[1].n128_u8[0] = a2 & 1;
  a3[1].n128_u64[1] = 0;
  a3[2].n128_u8[0] = 1;
  a3[2].n128_u64[1] = 0xBFF0000000000000;
  a3[3] = v8;
  a3[4].n128_u8[0] = v9;
  a3[4].n128_u64[1] = v10;
  a3[5].n128_u64[0] = v11;
  return result;
}

uint64_t protocol witness for LabeledContentStyle.makeBody(configuration:) in conformance LeadingTrailingLabeledContentStyle(uint64_t a1)
{
  return LeadingTrailingLabeledContentStyle.makeBody(configuration:)(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

uint64_t AdaptiveLeadingTrailingLabeledContentStyle.Body.body.getter()
{
  char v1 = *v0;
  char v2 = v0[1];
  static HorizontalAlignment.leading.getter();
  uint64_t v3 = swift_allocObject();
  *(unsigned char *)(v3 + 16) = v1;
  *(unsigned char *)(v3 + 17) = v2;
  static VerticalAlignment.center.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v6 = swift_getKeyPath();
  Spacing.init()();
  type metadata accessor for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>();
  lazy protocol witness table accessor for type GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>> and conformance GroupElementsOfContent<A, B>(&lazy protocol witness table cache variable for type AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance AccessibilityAdaptiveStack<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>);
  View.spacing(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Environment<Bool>.Content(KeyPath, 0);
  return outlined consume of Environment<Bool>.Content(v6, 0);
}

uint64_t closure #1 in AdaptiveLeadingTrailingLabeledContentStyle.Body.body.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  BOOL v3 = (a1 & 1) == 0;
  char v4 = a1 & 1;
  if (a1) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = 0xBFF0000000000000;
  }
  static Color.secondary.getter();
  View.defaultForegroundColor(_:)();
  uint64_t result = swift_release();
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v8;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance AdaptiveLeadingTrailingLabeledContentStyle.Body(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = a1[3];
  type metadata accessor for <<opaque return type of View.spacing(_:)>>.0();
  uint64_t v6 = v5;
  v9[0] = v1;
  v9[1] = v2;
  int v10 = v3;
  uint64_t v11 = v4;
  type metadata accessor for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>();
  lazy protocol witness table accessor for type GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>> and conformance GroupElementsOfContent<A, B>(&lazy protocol witness table cache variable for type AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance AccessibilityAdaptiveStack<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>);
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(OpaqueTypeConformance2 + 40))(v9, v6, OpaqueTypeConformance2);
}

unsigned char *protocol witness for LabeledContentStyle.makeBody(configuration:) in conformance AdaptiveLeadingTrailingLabeledContentStyle@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *v2;
  *a2 = *result;
  a2[1] = v3;
  return result;
}

unsigned __int8 *sub_187EBF834@<X0>(unsigned __int8 *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result - 7 < 5;
  return result;
}

void type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>)
  {
    type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>(255);
    lazy protocol witness table accessor for type GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>> and conformance GroupElementsOfContent<A, B>(&lazy protocol witness table cache variable for type TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)> and conformance TupleView<A>, type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>);
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>);
    }
  }
}

void type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>(uint64_t a1)
{
}

void type metadata accessor for (StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)()
{
  if (!lazy cache variable for type metadata for (StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>))
  {
    type metadata accessor for StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>();
    type metadata accessor for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>();
    type metadata accessor for ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>, &lazy cache variable for type metadata for HStack<LabeledContentStyleConfiguration.Content>, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Content, (uint64_t)&protocol witness table for LabeledContentStyleConfiguration.Content);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>));
    }
  }
}

void type metadata accessor for StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>)
  {
    type metadata accessor for VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>);
    }
  }
}

void type metadata accessor for VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>()
{
  if (!lazy cache variable for type metadata for VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>)
  {
    type metadata accessor for LabelGroup<LabeledContentStyleConfiguration.Label>(255, &lazy cache variable for type metadata for LabelGroup<LabeledContentStyleConfiguration.Label>, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, (uint64_t)&protocol witness table for LabeledContentStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LabelGroup);
    lazy protocol witness table accessor for type LabelGroup<LabeledContentStyleConfiguration.Label> and conformance LabelGroup<A>();
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type LabelGroup<LabeledContentStyleConfiguration.Label> and conformance LabelGroup<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabelGroup<LabeledContentStyleConfiguration.Label> and conformance LabelGroup<A>;
  if (!lazy protocol witness table cache variable for type LabelGroup<LabeledContentStyleConfiguration.Label> and conformance LabelGroup<A>)
  {
    type metadata accessor for LabelGroup<LabeledContentStyleConfiguration.Label>(255, &lazy cache variable for type metadata for LabelGroup<LabeledContentStyleConfiguration.Label>, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, (uint64_t)&protocol witness table for LabeledContentStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LabelGroup);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelGroup<LabeledContentStyleConfiguration.Label> and conformance LabelGroup<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<LabeledContentStyleConfiguration.Content> and conformance HStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HStack<LabeledContentStyleConfiguration.Content> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<LabeledContentStyleConfiguration.Content> and conformance HStack<A>)
  {
    type metadata accessor for LabelGroup<LabeledContentStyleConfiguration.Label>(255, &lazy cache variable for type metadata for HStack<LabeledContentStyleConfiguration.Content>, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Content, (uint64_t)&protocol witness table for LabeledContentStyleConfiguration.Content, MEMORY[0x1E4F415B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<LabeledContentStyleConfiguration.Content> and conformance HStack<A>);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AdaptiveLeadingTrailingLabeledContentStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187EBFCA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AdaptiveLeadingTrailingLabeledContentStyle()
{
  return &type metadata for AdaptiveLeadingTrailingLabeledContentStyle;
}

uint64_t assignWithCopy for LeadingTrailingLabeledContentStyle_Phone._Body(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  uint64_t v8 = *(void *)(v2 + 24);
  char v9 = *(unsigned char *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 24);
  char v11 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  *(void *)(a1 + 40) = *(void *)(v2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(v2 + 48);
  uint64_t v12 = *(void *)(v2 + 56);
  char v13 = *(unsigned char *)(v2 + 65);
  unsigned __int8 v14 = *(unsigned char *)(v2 + 64);
  outlined copy of Environment<CGFloat?>.Content(v12, v14, v13);
  uint64_t v15 = *(void *)(a1 + 56);
  char v16 = *(unsigned char *)(a1 + 65);
  *(void *)(a1 + 56) = v12;
  uint64_t v17 = *(unsigned __int8 *)(a1 + 64);
  *(unsigned char *)(a1 + 64) = v14;
  *(unsigned char *)(a1 + 65) = v13;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  uint64_t v18 = *(void *)(v2 + 72);
  char v19 = *(unsigned char *)(v2 + 81);
  unsigned __int8 v20 = *(unsigned char *)(v2 + 80);
  outlined copy of Environment<ListItemTint?>.Content(v18, v20, v19);
  uint64_t v21 = *(void *)(a1 + 72);
  char v22 = *(unsigned char *)(a1 + 81);
  *(void *)(a1 + 72) = v18;
  uint64_t v23 = *(unsigned __int8 *)(a1 + 80);
  *(unsigned char *)(a1 + 80) = v20;
  *(unsigned char *)(a1 + 81) = v19;
  outlined consume of Environment<ListItemTint?>.Content(v21, v23, v22);
  uint64_t v24 = *(void *)(v2 + 88);
  char v25 = *(unsigned char *)(v2 + 96);
  outlined copy of Environment<Bool>.Content(v24, v25);
  uint64_t v26 = *(void *)(a1 + 88);
  char v27 = *(unsigned char *)(a1 + 96);
  *(void *)(a1 + 88) = v24;
  *(unsigned char *)(a1 + 96) = v25;
  outlined consume of Environment<Bool>.Content(v26, v27);
  uint64_t v28 = *(void *)(v2 + 104);
  LOBYTE(v2) = *(unsigned char *)(v2 + 112);
  outlined copy of Environment<Bool>.Content(v28, v2);
  uint64_t v29 = *(void *)(a1 + 104);
  char v30 = *(unsigned char *)(a1 + 112);
  *(void *)(a1 + 104) = v28;
  *(unsigned char *)(a1 + 112) = v2;
  outlined consume of Environment<Bool>.Content(v29, v30);
  return a1;
}

uint64_t assignWithTake for LeadingTrailingLabeledContentStyle_Phone._Body(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  char v8 = *(unsigned char *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 24);
  char v10 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  char v11 = *(unsigned char *)(a2 + 64);
  char v12 = *(unsigned char *)(a2 + 65);
  uint64_t v13 = *(void *)(a1 + 56);
  char v14 = *(unsigned char *)(a1 + 65);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v15 = *(unsigned __int8 *)(a1 + 64);
  *(unsigned char *)(a1 + 64) = v11;
  *(unsigned char *)(a1 + 65) = v12;
  outlined consume of Environment<CGFloat?>.Content(v13, v15, v14);
  char v16 = *(unsigned char *)(a2 + 80);
  char v17 = *(unsigned char *)(a2 + 81);
  uint64_t v18 = *(void *)(a1 + 72);
  char v19 = *(unsigned char *)(a1 + 81);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v20 = *(unsigned __int8 *)(a1 + 80);
  *(unsigned char *)(a1 + 80) = v16;
  *(unsigned char *)(a1 + 81) = v17;
  outlined consume of Environment<ListItemTint?>.Content(v18, v20, v19);
  char v21 = *(unsigned char *)(a2 + 96);
  uint64_t v22 = *(void *)(a1 + 88);
  char v23 = *(unsigned char *)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = v21;
  outlined consume of Environment<Bool>.Content(v22, v23);
  char v24 = *(unsigned char *)(a2 + 112);
  uint64_t v25 = *(void *)(a1 + 104);
  char v26 = *(unsigned char *)(a1 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = v24;
  outlined consume of Environment<Bool>.Content(v25, v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for LeadingTrailingLabeledContentStyle_Phone._Body(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 113)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 1);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LeadingTrailingLabeledContentStyle_Phone._Body(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 112) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 113) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 1) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_187EC0008()
{
  return lazy protocol witness table accessor for type GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>> and conformance GroupElementsOfContent<A, B>(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body>> and conformance _UnaryViewAdaptor<A>, type metadata accessor for _UnaryViewAdaptor<StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body>>);
}

uint64_t sub_187EC0050(uint64_t a1)
{
  return get_witness_table_qd__7SwiftUI4ViewHD2_AaBPAAE7spacingyQrAA7SpacingVFQOyAA6HStackVyAA05TupleC0VyAA8StaticIfVyAA19_SemanticFeature_v4VAA6VStackVyAA10LabelGroupVyAA32LabeledContentStyleConfigurationV0N0VGGAVG_AA08ModifiedQ0VyAA6SpacerVAA21_TraitWritingModifierVyAA014LayoutPriorityV3KeyVGGA_yAHyAT0Q0VGAA015_EnvironmentKeywX0VyAA5ColorVSgGGtGG_Qo_HOTm(a1, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>, &lazy protocol witness table cache variable for type HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>);
}

unint64_t lazy protocol witness table accessor for type AdaptiveLeadingTrailingLabeledContentStyle.Body and conformance AdaptiveLeadingTrailingLabeledContentStyle.Body()
{
  unint64_t result = lazy protocol witness table cache variable for type AdaptiveLeadingTrailingLabeledContentStyle.Body and conformance AdaptiveLeadingTrailingLabeledContentStyle.Body;
  if (!lazy protocol witness table cache variable for type AdaptiveLeadingTrailingLabeledContentStyle.Body and conformance AdaptiveLeadingTrailingLabeledContentStyle.Body)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdaptiveLeadingTrailingLabeledContentStyle.Body and conformance AdaptiveLeadingTrailingLabeledContentStyle.Body);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in AdaptiveLeadingTrailingLabeledContentStyle.Body()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187EC010C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AdaptiveLeadingTrailingLabeledContentStyle.Body.body.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return closure #1 in AdaptiveLeadingTrailingLabeledContentStyle.Body.body.getter(a1, a2);
}

void type metadata accessor for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>()
{
  if (!lazy cache variable for type metadata for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>)
  {
    type metadata accessor for TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>(255);
    lazy protocol witness table accessor for type GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>> and conformance GroupElementsOfContent<A, B>(&lazy protocol witness table cache variable for type TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)> and conformance TupleView<A>, type metadata accessor for TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>);
    unint64_t v0 = type metadata accessor for AccessibilityAdaptiveStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>);
    }
  }
}

void type metadata accessor for TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>(uint64_t a1)
{
}

void type metadata accessor for (LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)()
{
  if (!lazy cache variable for type metadata for (LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>))
  {
    type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>(255, &lazy cache variable for type metadata for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, MEMORY[0x1E4FBB718]);
    type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>));
    }
  }
}

void type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>);
    }
  }
}

uint64_t sub_187EC03B0()
{
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  outlined consume of Environment<CGFloat?>.Content(*(void *)(v0 + 72), *(unsigned __int8 *)(v0 + 80), *(unsigned char *)(v0 + 81));
  outlined consume of Environment<ListItemTint?>.Content(*(void *)(v0 + 88), *(unsigned __int8 *)(v0 + 96), *(unsigned char *)(v0 + 97));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 104), *(unsigned char *)(v0 + 112));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 120), *(unsigned char *)(v0 + 128));

  return swift_deallocObject();
}

uint64_t sub_187EC0430()
{
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
  outlined consume of Environment<CGFloat?>.Content(*(void *)(v0 + 80), *(unsigned __int8 *)(v0 + 88), *(unsigned char *)(v0 + 89));
  outlined consume of Environment<ListItemTint?>.Content(*(void *)(v0 + 96), *(unsigned __int8 *)(v0 + 104), *(unsigned char *)(v0 + 105));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 112), *(unsigned char *)(v0 + 120));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 128), *(unsigned char *)(v0 + 136));
  __swift_destroy_boxed_opaque_existential_1(v0 + 160);

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 232);

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void type metadata accessor for <<opaque return type of GroupElementsOfContent.body>>.0()
{
  if (!lazy cache variable for type metadata for <<opaque return type of GroupElementsOfContent.body>>.0)
  {
    uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F414E8];
    type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>(255, &lazy cache variable for type metadata for Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>, MEMORY[0x1E4F414E8]);
    type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>(255, &lazy cache variable for type metadata for Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>, (uint64_t (*)(uint64_t))type metadata accessor for GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>, v0);
    lazy protocol witness table accessor for type Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>> and conformance <A> Group<A>();
    lazy protocol witness table accessor for type Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>> and conformance <A> Group<A>();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v2) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of GroupElementsOfContent.body>>.0);
    }
  }
}

ValueMetadata *type metadata accessor for LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout()
{
  return &type metadata for LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout;
}

uint64_t storeEnumTagSinglePayload for AdaptiveLeadingTrailingLabeledContentStyle.Body(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65282 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 254;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187EC06BCLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AdaptiveLeadingTrailingLabeledContentStyle.Body()
{
  return &type metadata for AdaptiveLeadingTrailingLabeledContentStyle.Body;
}

uint64_t sub_187EC06F4(uint64_t a1)
{
  return get_witness_table_qd__7SwiftUI4ViewHD2_AaBPAAE7spacingyQrAA7SpacingVFQOyAA6HStackVyAA05TupleC0VyAA8StaticIfVyAA19_SemanticFeature_v4VAA6VStackVyAA10LabelGroupVyAA32LabeledContentStyleConfigurationV0N0VGGAVG_AA08ModifiedQ0VyAA6SpacerVAA21_TraitWritingModifierVyAA014LayoutPriorityV3KeyVGGA_yAHyAT0Q0VGAA015_EnvironmentKeywX0VyAA5ColorVSgGGtGG_Qo_HOTm(a1, (void (*)(uint64_t))type metadata accessor for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>, &lazy protocol witness table cache variable for type AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance AccessibilityAdaptiveStack<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>);
}

uint64_t get_witness_table_qd__7SwiftUI4ViewHD2_AaBPAAE7spacingyQrAA7SpacingVFQOyAA6HStackVyAA05TupleC0VyAA8StaticIfVyAA19_SemanticFeature_v4VAA6VStackVyAA10LabelGroupVyAA32LabeledContentStyleConfigurationV0N0VGGAVG_AA08ModifiedQ0VyAA6SpacerVAA21_TraitWritingModifierVyAA014LayoutPriorityV3KeyVGGA_yAHyAT0Q0VGAA015_EnvironmentKeywX0VyAA5ColorVSgGGtGG_Qo_HOTm(uint64_t a1, void (*a2)(uint64_t), unint64_t *a3, void (*a4)(uint64_t))
{
  return swift_getOpaqueTypeConformance2();
}

id static UIAlertAction.makeAction<A>(_:title:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a4 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](a1);
  char v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v13 + 8);
  swift_bridgeObjectRetain();
  uint64_t v15 = v14(a4, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a4);
  unint64_t v16 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a4;
  *(void *)(v17 + 24) = a5;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v17 + v16, v12, a4);
  if (a3)
  {
    uint64_t v18 = (void *)MEMORY[0x18C115780](a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = 0;
  }
  aBlock[4] = partial apply for closure #1 in static UIAlertAction.makeAction<A>(_:title:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  aBlock[3] = &block_descriptor_56;
  char v19 = _Block_copy(aBlock);
  swift_release();
  id v20 = objc_msgSend(self, sel_actionWithTitle_style_handler_, v18, v15, v19);
  _Block_release(v19);

  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
  uint64_t v22 = v21;
  if (v21) {
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v21);
  }
  objc_msgSend(v20, sel_setEnabled_, v22 != 0);
  return v20;
}

uint64_t PlatformAlertController.update<A>(for:with:environmentChanged:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v6 = v5;
  LODWORD(v106) = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v107 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v108 = AssociatedTypeWitness;
  uint64_t v92 = *(void *)(v107 + 64);
  double v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v93 = (char *)&v91 - v13;
  uint64_t v15 = *a2;
  uint64_t v14 = a2[1];
  uint64_t v94 = v6;
  id v16 = objc_msgSend(v6, sel_popoverPresentationController, v12);
  if (v16)
  {
    uint64_t v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(a5 + 88))(a4, a5);
    objc_msgSend(v17, sel_setSourceRect_);
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 40))(a4, a5);
  uint64_t v20 = v19;
  uint64_t v113 = v15;
  uint64_t v114 = v14;
  char v22 = v21 & 1;
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  uint64_t v110 = 0;
  uint64_t v23 = Text.resolveString(in:with:idiom:)();
  uint64_t v97 = a5;
  uint64_t v25 = v24;
  outlined consume of Text.Storage(v18, v20, v22);
  swift_bridgeObjectRelease();
  char v26 = (void *)MEMORY[0x18C115780](v23, v25);
  uint64_t v27 = v97;
  swift_bridgeObjectRelease();
  id v28 = v94;
  objc_msgSend(v94, sel_setTitle_, v26);

  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 48);
  uint64_t v95 = a1;
  uint64_t v96 = a4;
  uint64_t v30 = v29(a4, v27);
  uint64_t v34 = v33;
  if (v33)
  {
    uint64_t v35 = v30;
    uint64_t v36 = v31;
    char v37 = v32 & 1;
    uint64_t v113 = v15;
    uint64_t v114 = v14;
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    uint64_t v110 = 0;
    LOBYTE(v109) = v32 & 1;
    uint64_t v38 = Text.resolveString(in:with:idiom:)();
    uint64_t v40 = v39;
    outlined consume of Text.Storage(v35, v36, v37);
    swift_bridgeObjectRelease();
    uint64_t v34 = (void *)MEMORY[0x18C115780](v38, v40);
    uint64_t v27 = v97;
    swift_bridgeObjectRelease();
  }
  char v41 = v106;
  objc_msgSend(v28, sel_setMessage_, v34);

  uint64_t v42 = v96;
  long long v104 = *(void (***)(uint64_t, uint64_t *, uint64_t))(v27 + 56);
  uint64_t v113 = ((uint64_t (*)(uint64_t, uint64_t))v104)(v96, v27);
  MEMORY[0x1F4188790](v113);
  *(&v91 - 4) = v42;
  *(&v91 - 3) = v27;
  uint64_t v105 = v14;
  uint64_t v106 = v15;
  *(&v91 - 2) = v15;
  *(&v91 - 1) = v14;
  uint64_t v43 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v46 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PlatformAlertController.update<A>(for:with:environmentChanged:), (uint64_t)(&v91 - 6), v43, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v45);
  swift_bridgeObjectRelease();
  uint64_t v47 = MEMORY[0x1E4FBC860];
  if (v41)
  {
    uint64_t AssociatedConformanceWitness = v27 + 56;
    id v48 = objc_msgSend(v28, sel_actions);
    type metadata accessor for UIAlertAction();
    unint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v49 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v50) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v50 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v50)
      {
LABEL_8:
        uint64_t v113 = v47;
        uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50 & ~(v50 >> 63), 0);
        if (v50 < 0)
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t v102 = v46;
        uint64_t v52 = 0;
        uint64_t v53 = v113;
        do
        {
          if ((v49 & 0xC000000000000001) != 0) {
            id v54 = (id)MEMORY[0x18C117680](v52, v49);
          }
          else {
            id v54 = *(id *)(v49 + 8 * v52 + 32);
          }
          uint64_t v55 = v54;
          id v56 = objc_msgSend(v54, sel_title);
          if (v56)
          {
            uint64_t v57 = v56;
            uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v60 = v59;
          }
          else
          {

            uint64_t v58 = 0;
            uint64_t v60 = 0;
          }
          uint64_t v113 = v53;
          unint64_t v62 = *(void *)(v53 + 16);
          unint64_t v61 = *(void *)(v53 + 24);
          if (v62 >= v61 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v61 > 1), v62 + 1, 1);
            uint64_t v53 = v113;
          }
          ++v52;
          *(void *)(v53 + 16) = v62 + 1;
          uint64_t v63 = v53 + 16 * v62;
          *(void *)(v63 + 32) = v58;
          *(void *)(v63 + 40) = v60;
        }
        while (v50 != v52);
        swift_bridgeObjectRelease();
        uint64_t v47 = MEMORY[0x1E4FBC860];
        uint64_t v46 = v102;
        goto LABEL_23;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v53 = MEMORY[0x1E4FBC860];
LABEL_23:
    uint64_t v64 = specialized _arrayForceCast<A, B>(_:)(v46);
    swift_bridgeObjectRelease();
    char v65 = specialized static Array<A>.== infix(_:_:)(v53, v64);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v27 = v97;
    if (v65) {
      return result;
    }
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
LABEL_24:
  uint64_t v110 = v47;
  uint64_t v66 = ((uint64_t (*)(uint64_t, uint64_t))v104)(v96, v27);
  uint64_t v67 = v108;
  uint64_t v68 = MEMORY[0x18C115CB0](v66, v108);
  uint64_t v69 = (uint64_t)v93;
  if (v68)
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    long long v100 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
    uint64_t v101 = AssociatedConformanceWitness + 16;
    unint64_t v70 = type metadata accessor for UIAlertAction();
    uint64_t v71 = 0;
    long long v104 = (void (**)(uint64_t, uint64_t *, uint64_t))(v107 + 16);
    uint64_t v98 = (void (**)(uint64_t, uint64_t))(v107 + 8);
    unint64_t v99 = v70;
    uint64_t v102 = v66;
    do
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v107 + 16))(v69, v66+ ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80))+ *(void *)(v107 + 72) * v71, v67);
        uint64_t v73 = v71 + 1;
        if (__OFADD__(v71, 1)) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v92 != 8) {
          goto LABEL_40;
        }
        uint64_t v113 = result;
        (*v104)(v69, &v113, v67);
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v73 = v71 + 1;
        if (__OFADD__(v71, 1))
        {
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
      }
      uint64_t v74 = AssociatedConformanceWitness;
      uint64_t v75 = v100(v67, AssociatedConformanceWitness);
      uint64_t v77 = v76;
      uint64_t v113 = v106;
      uint64_t v114 = v105;
      char v79 = v78 & 1;
      uint64_t v111 = 0;
      uint64_t v112 = 0;
      uint64_t v109 = 0;
      uint64_t v80 = Text.resolveString(in:with:idiom:)();
      uint64_t v82 = v81;
      outlined consume of Text.Storage(v75, v77, v79);
      swift_bridgeObjectRelease();
      uint64_t v83 = v80;
      uint64_t v67 = v108;
      static UIAlertAction.makeAction<A>(_:title:)(v69, v83, v82, v108, v74);
      uint64_t v84 = swift_bridgeObjectRelease();
      MEMORY[0x18C115B40](v84);
      if (*(void *)((v110 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v110 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      (*v98)(v69, v67);
      uint64_t v66 = v102;
      ++v71;
    }
    while (v73 != MEMORY[0x18C115CB0](v102, v67));
  }
  swift_bridgeObjectRelease();
  uint64_t v85 = (*(uint64_t (**)(uint64_t))(v97 + 72))(v96);
  id v86 = v94;
  long long v87 = (uint64_t *)&v94[OBJC_IVAR____TtC7SwiftUI23PlatformAlertController_onDismissAction];
  uint64_t v88 = *(void *)&v94[OBJC_IVAR____TtC7SwiftUI23PlatformAlertController_onDismissAction];
  *long long v87 = v85;
  v87[1] = v89;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v88);
  type metadata accessor for UIAlertAction();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v86, sel__setActions_, isa);

  return specialized AccessibilityCoreNotification.post()(0);
}

uint64_t closure #1 in PlatformAlertController.update<A>(for:with:environmentChanged:)@<X0>(uint64_t *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t v5 = v3(v4, AssociatedConformanceWitness);
  uint64_t v7 = v6;
  char v9 = v8 & 1;
  uint64_t v10 = Text.resolveString(in:with:idiom:)();
  uint64_t v12 = v11;
  outlined consume of Text.Storage(v5, v7, v9);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v10;
  a1[1] = v12;
  return result;
}

uint64_t partial apply for closure #1 in PlatformAlertController.update<A>(for:with:environmentChanged:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in PlatformAlertController.update<A>(for:with:environmentChanged:)(a1);
}

unint64_t type metadata accessor for UIAlertAction()
{
  unint64_t result = lazy cache variable for type metadata for UIAlertAction;
  if (!lazy cache variable for type metadata for UIAlertAction)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIAlertAction);
  }
  return result;
}

uint64_t sub_187EC1480()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

void (*partial apply for closure #1 in static UIAlertAction.makeAction<A>(_:title:)())(void)
{
  unint64_t result = (void (*)(void))(*(uint64_t (**)(void))(*(void *)(v0 + 24) + 24))();
  if (result)
  {
    uint64_t v2 = (uint64_t)result;
    result();
    return (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  }
  return result;
}

uint64_t static _AnimatableView._makeView(view:inputs:)()
{
  return static View.makeView(view:inputs:)();
}

uint64_t static _AnimatableView._makeViewList(view:inputs:)()
{
  return static View.makeViewList(view:inputs:)();
}

uint64_t static AnimatableModifier._makeView(modifier:inputs:body:)()
{
  return static ViewModifier.makeView(modifier:inputs:body:)();
}

uint64_t static AnimatableModifier._makeViewList(modifier:inputs:body:)()
{
  return static ViewModifier.makeViewList(modifier:inputs:body:)();
}

uint64_t type metadata completion function for ModifiedTabContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ModifiedTabContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for ModifiedTabContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187EC1F90);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ModifiedTabContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for <> ModifiedTabContent<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> ModifiedTabContent<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for TabContent.TabValue : Hashable in <> ModifiedTabContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> ModifiedTabContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ModifiedTabContent.init(content:modifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = a5 + *(int *)(type metadata accessor for ModifiedTabContent() + 36);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32);

  return v9(v8, a2, a4);
}

uint64_t ModifiedTabContent<>._identifiedView.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  double v8 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  unsigned int v10 = (char *)&v15 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 56))(v5, a2, v8);
  uint64_t v11 = v2 + *(int *)(a1 + 36);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x18C113660](v11, AssociatedTypeWitness, v12, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <> ModifiedTabContent<A, B>(uint64_t a1, uint64_t a2)
{
  return ModifiedTabContent<>._identifiedView.getter(a1, *(void *)(a2 - 8));
}

uint64_t sub_187EC22F0()
{
  return swift_getWitnessTable();
}

uint64_t View.accessibilityRotor<A>(_:entries:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void (*a5)(void)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>, uint64_t a8)
{
  uint64_t v21 = a6;
  unsigned int v18 = a5;
  uint64_t v19 = a7;
  uint64_t v20 = a8;
  uint64_t v12 = type metadata accessor for AccessibilityRotorModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v17 - v14;
  v22[0] = a1;
  v22[1] = a2;
  uint64_t v22[2] = a3 & 1;
  v22[3] = a4;
  _OWORD v22[4] = 0;
  char v23 = 1;
  uint64_t v24 = 0;
  char v25 = 1;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  AccessibilityRotorModifier.init(info:entries:)((uint64_t)v22, v18, (uint64_t)v15);
  MEMORY[0x18C113660](v15, v21, v12, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t type metadata accessor for AccessibilityRotorModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AccessibilityRotorModifier.init(info:entries:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 32);
  char v6 = *(unsigned char *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  char v8 = *(unsigned char *)(a1 + 56);
  long long v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v9;
  *(void *)(a3 + 32) = v5;
  *(unsigned char *)(a3 + 40) = v6;
  *(void *)(a3 + 48) = v7;
  *(unsigned char *)(a3 + 56) = v8;
  type metadata accessor for AccessibilityRotorModifier();
  a2();

  return swift_release();
}

uint64_t View.accessibilityRotor<A>(_:entries:)(unsigned __int8 *a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = a6;
  uint64_t v9 = type metadata accessor for AccessibilityRotorModifier();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v14 - v11;
  uint64_t v15 = *a1;
  long long v16 = xmmword_188354B20;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v19 = 1;
  uint64_t v20 = 0;
  char v21 = 1;
  swift_retain();
  AccessibilityRotorModifier.init(info:entries:)((uint64_t)&v15, a2, (uint64_t)v12);
  MEMORY[0x18C113660](v12, a4, v9, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t View.accessibilityRotor<A>(_:entries:entryLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v14 = (void *)swift_allocObject();
  _OWORD v14[2] = a7;
  v14[3] = a8;
  _OWORD v14[4] = a10;
  v14[5] = a5;
  void v14[6] = a6;
  type metadata accessor for Array();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for AccessibilityRotorEntry();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_getWitnessTable();
  type metadata accessor for ForEach();
  swift_getWitnessTable();
  View.accessibilityRotor<A>(_:entries:)(a1, a2, a3 & 1, a4, (void (*)(void))partial apply for closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:), a7, a9, a8);
  return swift_release();
}

uint64_t sub_187EC2900()
{
  return objectdestroyTm_24(MEMORY[0x1E4FBC898]);
}

uint64_t partial apply for closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:)()
{
  return partial apply for closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:)((uint64_t)&unk_1ED48A468, (uint64_t)partial apply for closure #1 in closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:));
}

{
  return partial apply for closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:)((uint64_t)&unk_1ED48A418, (uint64_t)partial apply for closure #1 in closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:));
}

uint64_t View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15 = (void *)swift_allocObject();
  uint64_t v15[2] = a8;
  v15[3] = a10;
  v15[4] = a11;
  v15[5] = a5;
  v15[6] = a6;
  v15[7] = a7;
  type metadata accessor for Array();
  type metadata accessor for AccessibilityRotorEntry();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_getWitnessTable();
  type metadata accessor for ForEach();
  swift_getWitnessTable();
  View.accessibilityRotor<A>(_:entries:)(a1, a2, a3 & 1, a4, (void (*)(void))partial apply for closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:), a8, a9, a10);
  return swift_release();
}

uint64_t partial apply for closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)()
{
  return partial apply for closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)((uint64_t)&unk_1ED48A440, (uint64_t)partial apply for closure #1 in closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:));
}

{
  return partial apply for closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)((uint64_t)&unk_1ED48A3F0, (uint64_t)partial apply for closure #1 in closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:));
}

uint64_t View.accessibilityRotor<A>(_:entries:entryLabel:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v14 = *a1;
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = a4;
  uint64_t v11[3] = a5;
  unsigned char v11[4] = a6;
  v11[5] = a2;
  v11[6] = a3;
  type metadata accessor for Array();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for AccessibilityRotorEntry();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for ForEach();
  swift_getWitnessTable();
  View.accessibilityRotor<A>(_:entries:)(&v14, (void (*)(void))partial apply for closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:), (uint64_t)v11, a4, v12, a5);
  return swift_release();
}

uint64_t closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v27 = a1;
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a2;
  uint64_t v13 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v16 = type metadata accessor for AccessibilityRotorEntry();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  ForEach<>.init(_:content:)((uint64_t)&v27, a7, (uint64_t)v12, v13, AssociatedTypeWitness, v16, WitnessTable, (uint64_t)&protocol witness table for AccessibilityRotorEntry<A>, a5);
  long long v19 = v23;
  uint64_t v20 = v24;
  uint64_t v21 = v25;
  long long v22 = v26;
  *(void *)&long long v27 = v13;
  *((void *)&v27 + 1) = AssociatedTypeWitness;
  uint64_t v28 = v16;
  uint64_t v29 = WitnessTable;
  *(void *)&long long v30 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v19);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  long long v23 = v27;
  uint64_t v24 = v28;
  uint64_t v25 = v29;
  long long v26 = v30;
  static ViewBuilder.buildExpression<A>(_:)(&v23);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_187EC2F68()
{
  return objectdestroyTm_24(MEMORY[0x1E4FBC898]);
}

uint64_t partial apply for closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:)(v2[5], v2[6], v2[2], v2[3], v2[4], a1, a2);
}

uint64_t closure #1 in closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:)@<X0>(void *a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  void v17[2] = a3;
  v17[0] = *(void *)(*a1 + *MEMORY[0x1E4FBC5F0]);
  v17[1] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v5 = (char *)v17 - v4;
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for AccessibilityRotorEntry();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v17 - v11;
  swift_getAtKeyPath();
  uint64_t v14 = v17[4];
  uint64_t v13 = v17[5];
  dispatch thunk of Identifiable.id.getter();
  AccessibilityRotorEntry.init(_:id:textRange:prepare:)(v14, v13, 0, MEMORY[0x1E4FBC860], (uint64_t)v5, 0, 0, 1, (uint64_t)v9, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v15)(v12, v6);
}

uint64_t View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 v16 = *a1;
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a5;
  void v13[3] = a6;
  v13[4] = a7;
  v13[5] = a2;
  v13[6] = a3;
  v13[7] = a4;
  type metadata accessor for Array();
  type metadata accessor for AccessibilityRotorEntry();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_getWitnessTable();
  uint64_t v14 = type metadata accessor for ForEach();
  swift_getWitnessTable();
  View.accessibilityRotor<A>(_:entries:)(&v16, (void (*)(void))partial apply for closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:), (uint64_t)v13, a5, v14, a6);
  return swift_release();
}

uint64_t closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *a2;
  *(void *)&long long v30 = a1;
  uint64_t v15 = (void *)swift_allocObject();
  uint64_t v15[2] = a4;
  v15[3] = a5;
  v15[4] = a6;
  v15[5] = a3;
  v15[6] = a2;
  uint64_t v16 = v14 + *MEMORY[0x1E4FBC5F0];
  uint64_t v17 = type metadata accessor for Array();
  uint64_t v18 = *(void *)(v16 + 8);
  uint64_t v19 = type metadata accessor for AccessibilityRotorEntry();
  swift_retain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  ForEach<>.init(_:id:content:)((uint64_t)&v30, (uint64_t)a2, a8, (uint64_t)v15, v17, v19, WitnessTable);
  long long v22 = v26;
  uint64_t v23 = v27;
  uint64_t v24 = v28;
  long long v25 = v29;
  *(void *)&long long v30 = v17;
  *((void *)&v30 + 1) = v18;
  uint64_t v31 = v19;
  uint64_t v32 = WitnessTable;
  *(void *)&long long v33 = a6;
  type metadata accessor for ForEach();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v22);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  long long v26 = v30;
  uint64_t v27 = v31;
  uint64_t v28 = v32;
  long long v29 = v33;
  static ViewBuilder.buildExpression<A>(_:)(&v26);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t objectdestroy_2Tm_1()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)(*(void *)(v2 + 40), *(uint64_t **)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), a1, a2);
}

uint64_t closure #1 in closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)@<X0>(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  v18[1] = a3;
  _OWORD v18[2] = a4;
  uint64_t v4 = *(void *)(*MEMORY[0x1E4FBC5F0] + *a2 + 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v18 - v5;
  uint64_t v7 = type metadata accessor for AccessibilityRotorEntry();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v18 - v12;
  swift_getAtKeyPath();
  uint64_t v15 = v18[4];
  uint64_t v14 = v18[5];
  swift_getAtKeyPath();
  AccessibilityRotorEntry.init(_:id:textRange:prepare:)(v15, v14, 0, MEMORY[0x1E4FBC860], (uint64_t)v6, 0, 0, 1, (uint64_t)v10, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, v4);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v16)(v13, v7);
}

uint64_t View.accessibilityRotor(_:textRanges:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)(swift_allocObject() + 16) = a5;
  type metadata accessor for ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>();
  lazy protocol witness table accessor for type ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>> and conformance <> ForEach<A, B, C>();
  swift_bridgeObjectRetain();
  View.accessibilityRotor<A>(_:entries:)(a1, a2, a3 & 1, a4, (void (*)(void))partial apply for closure #1 in View.accessibilityRotor(_:textRanges:), a6, a8, a7);

  return swift_release();
}

__n128 closure #1 in View.accessibilityRotor(_:textRanges:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getKeyPath();
  *(void *)(swift_allocObject() + 16) = a1;
  _sSnySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
  _sSnySiGMaTm_0(0, &lazy cache variable for type metadata for AccessibilityRotorEntry<Never>, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC258], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityRotorEntry);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  swift_bridgeObjectRetain();
  ForEach.init(_:idGenerator:content:)();
  __n128 result = v6;
  *(_OWORD *)a2 = v5;
  *(__n128 *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  *(void *)(a2 + 48) = v8;
  return result;
}

{
  __n128 result;
  long long v5;
  __n128 v6;
  long long v7;
  uint64_t v8;

  swift_getKeyPath();
  *(void *)(swift_allocObject() + 16) = a1;
  _sSnySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
  _sSnySiGMaTm_0(0, &lazy cache variable for type metadata for AccessibilityRotorEntry<Never>, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC258], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityRotorEntry);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  swift_bridgeObjectRetain();
  ForEach.init(_:idGenerator:content:)();
  __n128 result = v6;
  *(_OWORD *)a2 = v5;
  *(__n128 *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  *(void *)(a2 + 48) = v8;
  return result;
}

uint64_t sub_187EC3B54()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

double partial apply for closure #1 in View.accessibilityRotor(_:textRanges:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = closure #1 in View.accessibilityRotor(_:textRanges:)(*(void *)(v1 + 16), a1).n128_u64[0];
  return result;
}

{
  uint64_t v1;
  double result;

  *(void *)&double result = closure #1 in View.accessibilityRotor(_:textRanges:)(*(void *)(v1 + 16), a1).n128_u64[0];
  return result;
}

void type metadata accessor for ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>()
{
  if (!lazy cache variable for type metadata for ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>)
  {
    _sSnySiGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
    _sSnySiGMaTm_0(255, &lazy cache variable for type metadata for AccessibilityRotorEntry<Never>, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC258], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityRotorEntry);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>);
    }
  }
}

void _sSnySiGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

uint64_t View.accessibilityRotor(_:textRanges:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v11 = *a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  type metadata accessor for ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>();
  uint64_t v9 = v8;
  lazy protocol witness table accessor for type ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>> and conformance <> ForEach<A, B, C>();
  swift_bridgeObjectRetain();
  View.accessibilityRotor<A>(_:entries:)(&v11, (void (*)(void))partial apply for closure #1 in View.accessibilityRotor(_:textRanges:), v7, a3, v9, a4);

  return swift_release();
}

unint64_t *closure #1 in closure #1 in View.accessibilityRotor(_:textRanges:)@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(void *)(a2 + 16))
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 16 * v3 + 32);
    *(unsigned char *)(a3 + 48) = 1;
    *(void *)(a3 + 56) = 0;
    *(unsigned char *)(a3 + 64) = 2;
    *(void *)(a3 + 72) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    *(void *)(a3 + 80) = 0;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t View.accessibilityRotor<A>(_:entries:)@<X0>(void (*a1)(void)@<X4>, uint64_t a2@<X6>, uint64_t a3@<X8>, uint64_t a4)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v9 = v8;
  char v11 = v10 & 1;
  View.accessibilityRotor<A>(_:entries:)(v7, v8, v10 & 1, v12, a1, a2, a3, a4);
  outlined consume of Text.Storage(v7, v9, v11);

  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityRotor<A, B>(_:entries:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  v20[1] = a4;
  double v10 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v12 + 16))((char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  uint64_t v13 = Text.init<A>(_:)();
  uint64_t v15 = v14;
  char v17 = v16 & 1;
  View.accessibilityRotor<A>(_:entries:)(v13, v14, v16 & 1, v18, a2, a3, a6, a5);
  outlined consume of Text.Storage(v13, v15, v17);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityRotor<A>(_:entries:entryLabel:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  View.accessibilityRotor<A>(_:entries:entryLabel:)(v11, v12, v14 & 1, v16, a1, a2, a3, a4, a5, a6);
  outlined consume of Text.Storage(v11, v13, v15);

  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityRotor<A, B>(_:entries:entryLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  double v13 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v15 + 16))((char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  uint64_t v16 = Text.init<A>(_:)();
  uint64_t v18 = v17;
  char v20 = v19 & 1;
  View.accessibilityRotor<A>(_:entries:entryLabel:)(v16, v17, v19 & 1, v21, a2, a3, a4, a5, a7, a6);
  outlined consume of Text.Storage(v16, v18, v20);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)(v11, v12, v14 & 1, v16, a1, a2, a3, a4, a5, a6, a7);
  outlined consume of Text.Storage(v11, v13, v15);

  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityRotor<A, B, C>(_:entries:entryID:entryLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>, uint64_t a8)
{
  uint64_t v24 = a5;
  double v13 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v15 + 16))((char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  uint64_t v16 = Text.init<A>(_:)();
  uint64_t v18 = v17;
  char v20 = v19 & 1;
  View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)(v16, v17, v19 & 1, v21, a2, a3, a4, v24, a7, a6, a8);
  outlined consume of Text.Storage(v16, v18, v20);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityRotor(_:textRanges:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  View.accessibilityRotor(_:textRanges:)(v8, v9, v11 & 1, v13, a1, a2, a3, a4);
  outlined consume of Text.Storage(v8, v10, v12);

  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityRotor<A>(_:textRanges:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  double v9 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v11 + 16))((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  uint64_t v12 = Text.init<A>(_:)();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  View.accessibilityRotor(_:textRanges:)(v12, v13, v15 & 1, v17, a2, a3, a4, a5);
  outlined consume of Text.Storage(v12, v14, v16);
  return swift_bridgeObjectRelease();
}

uint64_t AccessibilityRotorInfo.Designation.uniqueID(in:)()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[2];
  if (v2 < 0)
  {
    uint64_t v8 = 0;
    v6._countAndFlagsBits = 0x5F6D6574737973;
    v6._object = (void *)0xE700000000000000;
    String.append(_:)(v6);
    _print_unlocked<A, B>(_:_:)();
  }
  else
  {
    uint64_t v3 = v0[1];
    char v4 = v2 & 1;
    outlined copy of Text.Storage(v1, v3, v2 & 1);
    swift_bridgeObjectRetain();
    v5._countAndFlagsBits = Text.resolveString(in:with:idiom:)();
    uint64_t v8 = 0x5F72657375;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v1, v3, v4);
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t AccessibilityRotorModifier.initialAttachment(for:)()
{
  _s14AttributeGraph0A0Vy7SwiftUI21AccessibilityNodeListVGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityRotorInfo>, (uint64_t)&type metadata for AccessibilityRotorInfo, MEMORY[0x1E4FBBE00]);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_18834BB80;
  uint64_t v2 = *(void *)v0;
  uint64_t v3 = *(void *)(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 16);
  char v5 = *(unsigned char *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  char v7 = *(unsigned char *)(v0 + 56);
  *(void *)(v1 + 32) = *(void *)v0;
  *(void *)(v1 + 40) = v3;
  *(void *)(v1 + 48) = v4;
  *(_OWORD *)(v1 + 56) = *(_OWORD *)(v0 + 24);
  *(unsigned char *)(v1 + 72) = v5;
  *(void *)(v1 + 80) = v6;
  *(unsigned char *)(v1 + 88) = v7;
  outlined copy of Text.Suffix.Storage(v2, v3, v4);
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  uint64_t v11 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<[AccessibilityRotorInfo]>();
  void v10[3] = v8;
  v10[4] = _s7SwiftUI30AccessibilityRelationshipScopeCAcA11PropertyKeyAAWlTm_0(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[AccessibilityRotorInfo]> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<[AccessibilityRotorInfo]>);
  v10[0] = v1;
  specialized Dictionary.subscript.setter((uint64_t)v10, (uint64_t)&type metadata for AccessibilityProperties.RotorInfoKey);
  v10[0] = v11;
  static AccessibilityAttachment.properties(_:)();

  return swift_bridgeObjectRelease();
}

uint64_t static AccessibilityRotorModifier.makeAccessibilityViewModifier(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, long long *a7@<X8>)
{
  uint64_t v46 = a5;
  uint64_t v47 = a6;
  uint64_t v43 = a4;
  uint64_t v44 = a3;
  id v48 = a7;
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  int v45 = *a1;
  char v7 = *(uint64_t (**)(void))a2;
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  unsigned int v10 = *(_DWORD *)(a2 + 24);
  unsigned int v11 = *(_DWORD *)(a2 + 28);
  unsigned int v13 = *(_DWORD *)(a2 + 32);
  unsigned int v12 = *(_DWORD *)(a2 + 36);
  uint64_t v14 = *(void *)(a2 + 48);
  uint64_t v42 = *(void *)(a2 + 40);
  unsigned int v16 = *(_DWORD *)(a2 + 56);
  unsigned int v15 = *(_DWORD *)(a2 + 60);
  unsigned int v38 = v12;
  unsigned int v39 = v15;
  int v17 = *(_DWORD *)(a2 + 68);
  LODWORD(v40) = *(_DWORD *)(a2 + 64);
  DWORD1(v40) = v17;
  int v18 = *(_DWORD *)(a2 + 76);
  DWORD2(v40) = *(_DWORD *)(a2 + 72);
  HIDWORD(v40) = v18;
  unsigned int v41 = *(_DWORD *)(a2 + 80);
  *(void *)&long long v63 = v14;
  DWORD2(v63) = v16;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    *(void *)&long long v57 = v7;
    DWORD2(v57) = v8;
    *(void *)&long long v58 = v9;
    *((void *)&v58 + 1) = __PAIR64__(v11, v10);
    *(void *)&long long v59 = __PAIR64__(v38, v13);
    *((void *)&v59 + 1) = v42;
    *(void *)&long long v60 = v14;
    *((void *)&v60 + 1) = __PAIR64__(v39, v16);
    long long v61 = v40;
    unsigned int v62 = v41;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.setter();
    long long v63 = v57;
    long long v64 = v58;
    long long v65 = v59;
    long long v66 = v60;
    long long v67 = v40;
    long long v53 = v59;
    long long v54 = v60;
    long long v55 = v40;
    unsigned int v68 = v41;
    unsigned int v41 = v16;
    unsigned int v56 = v62;
    long long v51 = v57;
    long long v52 = v58;
    uint64_t v19 = outlined retain of _ViewInputs((uint64_t)&v63);
    ((void (*)(long long *__return_ptr, uint64_t, long long *))v44)(&v50, v19, &v51);
    outlined release of _ViewInputs((uint64_t)&v63);
    LODWORD(v51) = v45;
    type metadata accessor for AccessibilityRotorModifier();
    type metadata accessor for _GraphValue();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _GraphValue.value.getter();
    AGGraphCreateOffsetAttribute2();
    _GraphValue.init(_:)();
    uint64_t v43 = v9;
    uint64_t v44 = v7;
    *(void *)&long long v51 = v7;
    DWORD2(v51) = v8;
    *(void *)&long long v52 = v9;
    *((void *)&v52 + 1) = __PAIR64__(v11, v10);
    *(void *)&long long v53 = __PAIR64__(v38, v13);
    *((void *)&v53 + 1) = v42;
    *(void *)&long long v54 = v14;
    uint64_t v20 = v14;
    DWORD2(v54) = v16;
    (*(void (**)(char *__return_ptr, uint64_t *, long long *, uint64_t, uint64_t))(v47 + 24))((char *)&v49 + 4, &v49, &v51, v46, v47);
    int v21 = HIDWORD(v49);
    uint64_t v22 = AGMakeUniqueID();
    LODWORD(v51) = v45;
    _GraphValue.value.getter();
    LODWORD(v51) = AGGraphCreateOffsetAttribute2();
    *((void *)&v51 + 1) = v22;
    LODWORD(v52) = v21;
    type metadata accessor for AccessibilityRotorModifier.Attachment();
    swift_getWitnessTable();
    _GraphValue.init<A>(_:)();
    int v23 = HIDWORD(v49);
    long long v24 = v50;
    *(void *)&long long v51 = v20;
    DWORD2(v51) = v16;
    outlined retain of _ViewInputs((uint64_t)&v63);
    swift_bridgeObjectRetain();
    char v25 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (v25) {
      specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v23, &v63, v24, *((unint64_t *)&v24 + 1), 0);
    }
    swift_bridgeObjectRelease();
    outlined release of _ViewInputs((uint64_t)&v63);
    LOBYTE(v51) = (v25 & 1) == 0;
    _ViewOutputs.subscript.setter();
    long long v53 = v65;
    long long v54 = v66;
    long long v55 = v67;
    unsigned int v56 = v68;
    long long v51 = v63;
    long long v52 = v64;
    swift_getKeyPath();
    outlined retain of _ViewInputs((uint64_t)&v63);
    unsigned int v27 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    long long v51 = v50;
    uint64_t v28 = _ViewOutputs.subscript.getter();
    if ((v28 & 0x100000000) != 0) {
      unsigned int v29 = *MEMORY[0x1E4F4E7A0];
    }
    else {
      unsigned int v29 = v28;
    }
    type metadata accessor for AccessibilityRelationshipScope();
    _s7SwiftUI30AccessibilityRelationshipScopeCAcA11PropertyKeyAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope, (void (*)(uint64_t))type metadata accessor for AccessibilityRelationshipScope);
    uint64_t v30 = PropertyList.subscript.getter();
    uint64_t v31 = v51;
    *(void *)&long long v51 = __PAIR64__(v29, v27);
    *((void *)&v51 + 1) = v31;
    MEMORY[0x1F4188790](v30);
    uint64_t v36 = type metadata accessor for AccessibilityRotorModifier.RelationshipScope();
    uint64_t WitnessTable = swift_getWitnessTable();
    _s14AttributeGraph0A0Vy7SwiftUI21AccessibilityNodeListVGMaTm_0(0, &lazy cache variable for type metadata for Attribute<AccessibilityNodeList>, (uint64_t)&type metadata for AccessibilityNodeList, MEMORY[0x1E4F4E740]);
    uint64_t v33 = v32;
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v51, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_28, (uint64_t)&v35, v36, MEMORY[0x1E4FBC248], v33, MEMORY[0x1E4FBC278], v34);
    swift_release();
    LOBYTE(v51) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    *id v48 = v50;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    *(void *)&long long v63 = v7;
    DWORD2(v63) = v8;
    *(void *)&long long v64 = v9;
    *((void *)&v64 + 1) = __PAIR64__(v11, v10);
    *(void *)&long long v65 = __PAIR64__(v38, v13);
    *((void *)&v65 + 1) = v42;
    *(void *)&long long v66 = v14;
    *((void *)&v66 + 1) = __PAIR64__(v39, v16);
    long long v67 = v40;
    unsigned int v68 = v41;
    return v44();
  }
}

unsigned char *AccessibilityRotorModifier.RelationshipScope.value.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t result = (unsigned char *)AGGraphGetValue();
  if (*result != 1
    || (unint64_t result = (unsigned char *)AccessibilityFocusStoreListModifier.ItemFilter.accessibilityNodeList.getter(a1, v14),
        (uint64_t v7 = v14[0]) == 0))
  {
    uint64_t v8 = 0;
    uint64_t v7 = MEMORY[0x1E4FBC860];
LABEL_14:
    *a3 = v7;
    a3[1] = v8;
    return result;
  }
  uint64_t v8 = v14[1];
  if (!(v14[0] >> 62))
  {
    uint64_t v9 = *(void *)((v14[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t result = (unsigned char *)swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_5;
    }
LABEL_13:
    unint64_t result = (unsigned char *)swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  unint64_t result = (unsigned char *)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v9 = (uint64_t)result;
  if (!result) {
    goto LABEL_13;
  }
LABEL_5:
  if (v9 >= 1)
  {
    if ((v7 & 0xC000000000000001) != 0)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = MEMORY[0x18C117680](v10++, v7);
        *(void *)(v11 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope) = a2;
        swift_retain();
        swift_unknownObjectRelease();
        swift_release();
      }
      while (v9 != v10);
    }
    else
    {
      unsigned int v12 = (uint64_t *)(v7 + 32);
      do
      {
        uint64_t v13 = *v12++;
        *(void *)(v13 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope) = a2;
        swift_retain();
        swift_release();
        --v9;
      }
      while (v9);
    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityRotorModifier.Attachment.rotorInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(void *)Value;
  uint64_t v3 = *(void *)(Value + 8);
  uint64_t v5 = *(void *)(Value + 16);
  char v6 = *(unsigned char *)(Value + 40);
  uint64_t v7 = *(void *)(Value + 48);
  char v8 = *(unsigned char *)(Value + 56);
  *(void *)a1 = *(void *)Value;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);
  *(unsigned char *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = v8;

  return outlined copy of Text.Suffix.Storage(v4, v3, v5);
}

unsigned char *protocol witness for Rule.value.getter in conformance AccessibilityRotorModifier<A>.RelationshipScope@<X0>(void *a1@<X8>)
{
  return AccessibilityRotorModifier.RelationshipScope.value.getter(*(void *)v1, *(void *)(v1 + 8), a1);
}

uint64_t AccessibilityRotorModifier.Attachment.value.getter@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  AccessibilityRotorModifier.Attachment.rotorInfo.getter((uint64_t)v15);
  uint64_t v4 = AGCreateWeakAttribute();
  _s14AttributeGraph0A0Vy7SwiftUI21AccessibilityNodeListVGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityRotorInfo>, (uint64_t)&type metadata for AccessibilityRotorInfo, MEMORY[0x1E4FBBE00]);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18834BB80;
  uint64_t v6 = v15[0];
  uint64_t v7 = v15[1];
  uint64_t v8 = v15[2];
  uint64_t v9 = v15[3];
  *(void *)(v5 + 32) = v15[0];
  *(void *)(v5 + 40) = v7;
  *(void *)(v5 + 48) = v8;
  *(void *)(v5 + 56) = v9;
  *(void *)(v5 + 64) = v4;
  *(unsigned char *)(v5 + 72) = 0;
  *(void *)(v5 + 80) = a1;
  *(unsigned char *)(v5 + 88) = 0;
  outlined copy of Text.Suffix.Storage(v6, v7, v8);
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  v14[5] = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<[AccessibilityRotorInfo]>();
  v14[3] = v10;
  _OWORD v14[4] = _s7SwiftUI30AccessibilityRelationshipScopeCAcA11PropertyKeyAAWlTm_0(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[AccessibilityRotorInfo]> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<[AccessibilityRotorInfo]>);
  v14[0] = v5;
  specialized Dictionary.subscript.setter((uint64_t)v14, (uint64_t)&type metadata for AccessibilityProperties.RotorInfoKey);
  static AccessibilityAttachment.properties(_:)();
  outlined consume of Text.Suffix.Storage(v6, v7, v8);
  swift_bridgeObjectRelease();
  uint64_t v11 = v14[0];
  uint64_t v12 = v14[1];
  _s14AttributeGraph0A0Vy7SwiftUI21AccessibilityNodeListVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v11;
  *(void *)(result + 24) = v12;
  *a2 = result;
  a2[1] = 0;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityRotorModifier<A>.Attachment@<X0>(uint64_t *a1@<X8>)
{
  return AccessibilityRotorModifier.Attachment.value.getter(*(void *)(v1 + 8), a1);
}

BOOL protocol witness for AccessibilityViewModifier.willCreateNode(for:) in conformance AccessibilityRotorModifier<A>(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v1 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  return v1 == 0;
}

uint64_t protocol witness for static AccessibilityViewModifier.makeAccessibilityViewModifier(modifier:inputs:body:) in conformance AccessibilityRotorModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, long long *a6@<X8>)
{
  return static AccessibilityRotorModifier.makeAccessibilityViewModifier(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityRotorModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t static AccessibilitySystemRotor.links(visited:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static AccessibilitySystemRotor.links.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static AccessibilitySystemRotor.headings(level:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result + 2;
  return result;
}

void static AccessibilitySystemRotor.headings.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static AccessibilitySystemRotor.boldText.getter(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

void static AccessibilitySystemRotor.italicText.getter(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

void static AccessibilitySystemRotor.underlineText.getter(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

void static AccessibilitySystemRotor.misspelledWords.getter(unsigned char *a1@<X8>)
{
  *a1 = 12;
}

void static AccessibilitySystemRotor.images.getter(unsigned char *a1@<X8>)
{
  *a1 = 13;
}

void static AccessibilitySystemRotor.textFields.getter(unsigned char *a1@<X8>)
{
  *a1 = 14;
}

void static AccessibilitySystemRotor.tables.getter(unsigned char *a1@<X8>)
{
  *a1 = 15;
}

void static AccessibilitySystemRotor.lists.getter(unsigned char *a1@<X8>)
{
  *a1 = 16;
}

void static AccessibilitySystemRotor.landmarks.getter(unsigned char *a1@<X8>)
{
  *a1 = 17;
}

ValueMetadata *type metadata accessor for AccessibilitySystemRotor()
{
  return &type metadata for AccessibilitySystemRotor;
}

uint64_t sub_187EC5848()
{
  return swift_getWitnessTable();
}

uint64_t sub_187EC58B8()
{
  return swift_getWitnessTable();
}

uint64_t sub_187EC5A18()
{
  return swift_getWitnessTable();
}

uint64_t sub_187EC5B28()
{
  return swift_getWitnessTable();
}

void type metadata accessor for AccessibilityRotorModifier<ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>>()
{
  if (!lazy cache variable for type metadata for AccessibilityRotorModifier<ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>>)
  {
    type metadata accessor for ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>();
    lazy protocol witness table accessor for type ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>> and conformance <> ForEach<A, B, C>();
    unint64_t v0 = type metadata accessor for AccessibilityRotorModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityRotorModifier<ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>>);
    }
  }
}

uint64_t sub_187EC5BF8()
{
  return swift_getWitnessTable();
}

uint64_t sub_187EC5C6C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187EC5DD0()
{
  return swift_getWitnessTable();
}

uint64_t sub_187EC5EE4()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for AccessibilitySystemRotor(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEF) {
    goto LABEL_17;
  }
  if (a2 + 17 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 17) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 17;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v8 = v6 - 18;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AccessibilitySystemRotor(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *uint64_t result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187EC60B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 17;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilitySystemRotor.RawValue()
{
  return &type metadata for AccessibilitySystemRotor.RawValue;
}

uint64_t type metadata completion function for AccessibilityRotorModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AccessibilityRotorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 57) & (unint64_t)~v7) + *(void *)(v6 + 64) > 0x18)
  {
    uint64_t v10 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v11 = *(void *)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    uint64_t v13 = *(void *)(a2 + 16);
    uint64_t v14 = *(void *)(a2 + 24);
    outlined copy of Text.Suffix.Storage(*(void *)a2, v12, v13);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v13;
    *(void *)(a1 + 24) = v14;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))((a1 + v7 + 57) & ~v7, (a2 + v7 + 57) & ~v7, v5);
  }
  return a1;
}

uint64_t destroy for AccessibilityRotorModifier(uint64_t *a1, uint64_t a2)
{
  outlined consume of Text.Suffix.Storage(*a1, a1[1], a1[2]);
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = ((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t initializeWithCopy for AccessibilityRotorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  outlined copy of Text.Suffix.Storage(*(void *)a2, v7, v8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 16))((*(unsigned __int8 *)(v10 + 80) + 57 + a1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 57 + a2) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t assignWithCopy for AccessibilityRotorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  outlined copy of Text.Suffix.Storage(*(void *)a2, v7, v8);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  outlined consume of Text.Suffix.Storage(v10, v11, v12);
  uint64_t v13 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v13;
  uint64_t v14 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v14;
  uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 24))((*(unsigned __int8 *)(v15 + 80) + 57 + a1) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(unsigned __int8 *)(v15 + 80) + 57 + a2) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

_OWORD *initializeWithTake for AccessibilityRotorModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t assignWithTake for AccessibilityRotorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  outlined consume of Text.Suffix.Storage(v6, v7, v8);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))((*(unsigned __int8 *)(v10 + 80) + 57 + a1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 57 + a2) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityRotorModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 57) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 57) & ~v6);
      }
      if ((*((void *)a1 + 2) >> 1) > 0x80000000) {
        return -(*((void *)a1 + 2) >> 1);
      }
      return 0;
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for AccessibilityRotorModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 57) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187EC6A40);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 57] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(_OWORD *)(a1 + 40) = 0u;
          *(_OWORD *)(a1 + 24) = 0u;
          *(_OWORD *)(a1 + 8) = 0u;
          a1[56] = 0;
          *(void *)a1 = a2 ^ 0x80000000;
        }
        else
        {
          *(void *)a1 = 0;
          *((void *)a1 + 1) = 0;
          *((void *)a1 + 2) = 2 * -a2;
          *((void *)a1 + 3) = 0;
        }
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityRotorModifier<A>()
{
  return &protocol witness table for AccessibilityRotorModifier<A>;
}

uint64_t instantiation function for generic protocol witness table for AccessibilityRotorModifier<A>(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilitySystemRotor.RawValue@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized AccessibilitySystemRotor.RawValue.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilitySystemRotor.RawValue and conformance AccessibilitySystemRotor.RawValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilitySystemRotor.RawValue and conformance AccessibilitySystemRotor.RawValue;
  if (!lazy protocol witness table cache variable for type AccessibilitySystemRotor.RawValue and conformance AccessibilitySystemRotor.RawValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySystemRotor.RawValue and conformance AccessibilitySystemRotor.RawValue);
  }
  return result;
}

unint64_t specialized AccessibilitySystemRotor.RawValue.init(rawValue:)(unint64_t result)
{
  if (result >= 0x12) {
    return 18;
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityRotorModifier.Attachment()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityRotorModifier.RelationshipScope()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for AccessibilityPropertiesEntry<[AccessibilityRotorInfo]>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<[AccessibilityRotorInfo]>)
  {
    _s14AttributeGraph0A0Vy7SwiftUI21AccessibilityNodeListVGMaTm_0(255, &lazy cache variable for type metadata for [AccessibilityRotorInfo], (uint64_t)&type metadata for AccessibilityRotorInfo, MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<[AccessibilityRotorInfo]>);
    }
  }
}

unint64_t *partial apply for closure #1 in closure #1 in View.accessibilityRotor(_:textRanges:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in View.accessibilityRotor(_:textRanges:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_187EC6C38()
{
  return objectdestroyTm_24(MEMORY[0x1E4FBC8D0]);
}

uint64_t sub_187EC6C54()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:)(*(void **)(v1 + 40), *(void *)(v1 + 32), a1);
}

uint64_t sub_187EC6CAC()
{
  return objectdestroyTm_24(MEMORY[0x1E4FBC8D0]);
}

uint64_t partial apply for closure #1 in closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)(a1, *(void **)(v2 + 48), *(void *)(v2 + 32), a2);
}

uint64_t initializeWithCopy for AccessibilityRotorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  outlined copy of Text.Suffix.Storage(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for AccessibilityRotorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  outlined copy of Text.Suffix.Storage(*(void *)a2, v5, v6);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  outlined consume of Text.Suffix.Storage(v8, v9, v10);
  uint64_t v11 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v11;
  uint64_t v12 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v12;
  return a1;
}

uint64_t assignWithTake for AccessibilityRotorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  outlined consume of Text.Suffix.Storage(v4, v5, v6);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityRotorInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 16) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityRotorInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 2 * -a2;
      *(void *)(result + 24) = 0;
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityRotorInfo()
{
  return &type metadata for AccessibilityRotorInfo;
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityRotorModifier<A>.RelationshipScope()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityRotorModifier<A>.Attachment()
{
  return swift_getWitnessTable();
}

uint64_t destroy for AccessibilityRotorInfo.Designation(uint64_t *a1)
{
  return outlined consume of Text.Suffix.Storage(*a1, a1[1], a1[2]);
}

uint64_t *initializeWithCopy for AccessibilityRotorInfo.Designation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of Text.Suffix.Storage(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for AccessibilityRotorInfo.Designation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of Text.Suffix.Storage(*a2, v4, v5);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of Text.Suffix.Storage(v7, v8, v9);
  return a1;
}

uint64_t *assignWithTake for AccessibilityRotorInfo.Designation(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  long long v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v6;
  outlined consume of Text.Suffix.Storage(v3, v5, v4);
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityRotorInfo.Designation()
{
  return &type metadata for AccessibilityRotorInfo.Designation;
}

uint64_t closure #1 in FocusBridge.acceptsFirstResponder.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, unsigned char *a4@<X8>)
{
  (*(void (**)(void *__return_ptr, void))(a2 + 16))(v10, *a1);
  if (v12) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v13 == 1;
  }
  if (v6)
  {
    uint64_t result = outlined destroy of FocusItem?((uint64_t)v10);
  }
  else
  {
    outlined init with take of FocusItem((uint64_t)v10, (uint64_t)v14);
    outlined init with copy of FocusItem.Base((uint64_t)v14, (uint64_t)v10);
    int v7 = v11;
    outlined destroy of FocusItem.Base((uint64_t)v10);
    if (v7)
    {
      uint64_t result = outlined destroy of FocusItem((uint64_t)v14);
    }
    else
    {
      int v9 = FocusItem.isFocusable.getter();
      uint64_t result = outlined destroy of FocusItem((uint64_t)v14);
      if (v9)
      {
        *a3 = 1;
        *a4 = 2;
        return result;
      }
    }
  }
  *a4 = 0;
  return result;
}

uint64_t __designTimeBoolean<A>(_:fallback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return __designTimeBoolean<A>(_:fallback:)(a1, a2, a3, a4, (void (*)(char *, char *))partial apply for implicit closure #1 in __designTimeBoolean<A>(_:fallback:), a5);
}

uint64_t __designTimeFloat<A>(_:fallback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return __designTimeBoolean<A>(_:fallback:)(a1, a2, a3, a4, (void (*)(char *, char *))partial apply for implicit closure #1 in __designTimeFloat<A>(_:fallback:), a5);
}

uint64_t __designTimeBoolean<A>(_:fallback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(char *, char *)@<X7>, uint64_t a6@<X8>)
{
  uint64_t v33 = a5;
  uint64_t v34 = a3;
  uint64_t v31 = a1;
  uint64_t v35 = a6;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  unsigned int v16 = (char *)&v29 - v15;
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v29 = *(void *)(v17 - 8);
  uint64_t v30 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v29 - v18;
  if (one-time initialization token for __designTimeValues != -1) {
    swift_once();
  }
  swift_beginAccess();
  rawuint64_t Value = __designTimeValues._rawValue;
  if (*((void *)__designTimeValues._rawValue + 2))
  {
    swift_bridgeObjectRetain();
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v31, a2);
    if (v22)
    {
      outlined init with copy of Any(rawValue[7] + 32 * v21, (uint64_t)&v36);
    }
    else
    {
      long long v36 = 0u;
      long long v37 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v36 = 0u;
    long long v37 = 0u;
  }
  swift_endAccess();
  _sypSgMaTm_7(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  int v23 = swift_dynamicCast();
  uint64_t v24 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v16, v23 ^ 1u, 1, AssociatedTypeWitness);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = v32;
  char v25 = v33;
  *(&v29 - 4) = a4;
  *(&v29 - 3) = v26;
  *(&v29 - 2) = a4;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(v25, (uint64_t)(&v29 - 6), MEMORY[0x1E4FBC248], a4, v27, (uint64_t)v19);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v34, a4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v19, 1, a4) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v35, v10, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v19, v30);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a4);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v35, v19, a4);
  }
}

uint64_t __designTimeInteger<A>(_:fallback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return __designTimeBoolean<A>(_:fallback:)(a1, a2, a3, a4, (void (*)(char *, char *))partial apply for implicit closure #1 in __designTimeInteger<A>(_:fallback:), a5);
}

__n128 __designTimeString(_:fallback:)@<Q0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  outlined retain of OSLogMessage(a1);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  return result;
}

uint64_t __designTimeString<A>(_:fallback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return __designTimeBoolean<A>(_:fallback:)(a1, a2, a3, a4, (void (*)(char *, char *))partial apply for implicit closure #1 in __designTimeString<A>(_:fallback:), a5);
}

{
  return __designTimeBoolean<A>(_:fallback:)(a1, a2, a3, a4, (void (*)(char *, char *))partial apply for implicit closure #1 in __designTimeString<A>(_:fallback:), a5);
}

uint64_t implicit closure #1 in __designTimeBoolean<A>(_:fallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v13 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, double))(v16 + 16))((char *)&v18 - v14, a1, v13);
  return a8(v15, a3, a4);
}

Swift::Void __swiftcall __designTimeApplyIncrementalValues(_:)(Swift::OpaquePointer a1)
{
  uint64_t v34 = *((void *)a1._rawValue + 2);
  if (!v34) {
    return;
  }
  uint64_t v33 = (char *)a1._rawValue + 32;
  swift_bridgeObjectRetain();
  uint64_t v1 = 0;
  while (2)
  {
    uint64_t v2 = *(void *)&v33[8 * v1];
    uint64_t v35 = v1 + 1;
    uint64_t v36 = v2 + 64;
    uint64_t v3 = 1 << *(unsigned char *)(v2 + 32);
    if (v3 < 64) {
      uint64_t v4 = ~(-1 << v3);
    }
    else {
      uint64_t v4 = -1;
    }
    unint64_t v5 = v4 & *(void *)(v2 + 64);
    int64_t v37 = (unint64_t)(v3 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v6 = 0;
    while (1)
    {
      if (v5)
      {
        unint64_t v8 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
        unint64_t v9 = v8 | (v6 << 6);
LABEL_12:
        uint64_t v10 = *(void *)(v2 + 56);
        uint64_t v11 = (void *)(*(void *)(v2 + 48) + 16 * v9);
        uint64_t v12 = v11[1];
        *(void *)&long long v40 = *v11;
        *((void *)&v40 + 1) = v12;
        outlined init with copy of Any(v10 + 32 * v9, (uint64_t)v41);
        swift_bridgeObjectRetain();
        goto LABEL_31;
      }
      int64_t v13 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_49;
      }
      if (v13 < v37)
      {
        unint64_t v14 = *(void *)(v36 + 8 * v13);
        if (v14) {
          goto LABEL_16;
        }
        int64_t v15 = v6 + 2;
        ++v6;
        if (v13 + 1 < v37)
        {
          unint64_t v14 = *(void *)(v36 + 8 * v15);
          if (v14) {
            goto LABEL_19;
          }
          int64_t v6 = v13 + 1;
          if (v13 + 2 < v37)
          {
            unint64_t v14 = *(void *)(v36 + 8 * (v13 + 2));
            if (v14)
            {
              v13 += 2;
LABEL_16:
              unint64_t v5 = (v14 - 1) & v14;
              unint64_t v9 = __clz(__rbit64(v14)) + (v13 << 6);
              int64_t v6 = v13;
              goto LABEL_12;
            }
            int64_t v15 = v13 + 3;
            int64_t v6 = v13 + 2;
            if (v13 + 3 < v37)
            {
              unint64_t v14 = *(void *)(v36 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  int64_t v13 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_50;
                  }
                  if (v13 >= v37)
                  {
                    int64_t v6 = v37 - 1;
                    goto LABEL_30;
                  }
                  unint64_t v14 = *(void *)(v36 + 8 * v13);
                  ++v15;
                  if (v14) {
                    goto LABEL_16;
                  }
                }
              }
LABEL_19:
              int64_t v13 = v15;
              goto LABEL_16;
            }
          }
        }
      }
LABEL_30:
      unint64_t v5 = 0;
      memset(v41, 0, sizeof(v41));
      long long v40 = 0u;
LABEL_31:
      outlined init with take of (key: String, value: Any)?((uint64_t)&v40, (uint64_t)&v42, (uint64_t (*)(void))type metadata accessor for (key: String, value: Any)?);
      uint64_t v16 = v43;
      if (!v43) {
        break;
      }
      uint64_t v17 = v42;
      outlined init with take of Any(&v44, &v40);
      if (one-time initialization token for __designTimeValues != -1) {
        swift_once();
      }
      swift_beginAccess();
      outlined init with copy of Any((uint64_t)&v40, (uint64_t)v39);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      rawuint64_t Value = __designTimeValues._rawValue;
      unsigned int v38 = __designTimeValues._rawValue;
      __designTimeValues._rawuint64_t Value = (void *)0x8000000000000000;
      unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
      uint64_t v22 = rawValue[2];
      BOOL v23 = (v20 & 1) == 0;
      uint64_t v24 = v22 + v23;
      if (__OFADD__(v22, v23))
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return;
      }
      char v25 = v20;
      if (rawValue[3] >= v24)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v28 = v38;
          if (v20) {
            goto LABEL_8;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          uint64_t v28 = v38;
          if (v25) {
            goto LABEL_8;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
        unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
        if ((v25 & 1) != (v27 & 1)) {
          goto LABEL_51;
        }
        unint64_t v21 = v26;
        uint64_t v28 = v38;
        if (v25)
        {
LABEL_8:
          int v7 = (_OWORD *)(v28[7] + 32 * v21);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
          outlined init with take of Any(v39, v7);
          goto LABEL_9;
        }
      }
      v28[(v21 >> 6) + 8] |= 1 << v21;
      uint64_t v29 = (uint64_t *)(v28[6] + 16 * v21);
      *uint64_t v29 = v17;
      v29[1] = v16;
      outlined init with take of Any(v39, (_OWORD *)(v28[7] + 32 * v21));
      uint64_t v30 = v28[2];
      BOOL v31 = __OFADD__(v30, 1);
      uint64_t v32 = v30 + 1;
      if (v31) {
        goto LABEL_48;
      }
      v28[2] = v32;
      swift_bridgeObjectRetain();
LABEL_9:
      __designTimeValues._rawuint64_t Value = v28;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
    }
    swift_release();
    uint64_t v1 = v35;
    if (v35 != v34) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
}

void one-time initialization function for __designTimeValues()
{
  __designTimeValues._rawuint64_t Value = (void *)MEMORY[0x1E4FBC868];
}

__n128 specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, uint64_t a2, void *a3)
{
  Swift::UInt v7 = *(void *)a1;
  Swift::UInt v6 = *(void *)(a1 + 8);
  Swift::UInt v8 = *(unsigned __int8 *)(a1 + 16);
  Swift::UInt v9 = *(void *)(a1 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v7);
  if (v8 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(v8);
    Hasher._combine(_:)(v9);
  }
  Hasher._combine(_:)(*(unsigned char *)(a1 + 32) & 1);
  Hasher._finalize()();
  unint64_t v10 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v10;
  uint64_t v11 = a3[6] + 48 * v10;
  long long v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a1;
  *(_OWORD *)(v11 + 16) = v12;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v11 + 32) = result;
  *(void *)(a3[7] + 8 * v10) = a2;
  ++a3[2];
  return result;
}

{
  Swift::UInt v6;
  Swift::UInt v7;
  Swift::UInt v8;
  Swift::UInt v9;
  unint64_t v10;
  _OWORD *v11;
  long long v12;
  uint64_t v13;
  __n128 result;

  Swift::UInt v7 = *(void *)a1;
  Swift::UInt v6 = *(void *)(a1 + 8);
  Swift::UInt v8 = *(unsigned __int8 *)(a1 + 16);
  Swift::UInt v9 = *(void *)(a1 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v7);
  if (v8 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(v8);
    Hasher._combine(_:)(v9);
  }
  Hasher._combine(_:)(*(unsigned char *)(a1 + 32) & 1);
  Hasher._finalize()();
  unint64_t v10 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v10;
  uint64_t v11 = (_OWORD *)(a3[6] + 48 * v10);
  long long v12 = *(_OWORD *)(a1 + 16);
  *uint64_t v11 = *(_OWORD *)a1;
  v11[1] = v12;
  v11[2] = *(_OWORD *)(a1 + 32);
  int64_t v13 = a3[7] + 40 * v10;
  *(void *)(v13 + 32) = *(void *)(a2 + 32);
  __n128 result = *(__n128 *)(a2 + 16);
  *(_OWORD *)int64_t v13 = *(_OWORD *)a2;
  *(__n128 *)(v13 + 16) = result;
  ++a3[2];
  return result;
}

{
  Swift::UInt v6;
  Swift::UInt v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  long long v11;
  __n128 result;

  Hasher.init(_seed:)();
  Swift::UInt v6 = *(void *)(a1 + 16);
  Swift::UInt v7 = *(void *)(a1 + 24);
  Swift::UInt v8 = *(void *)(a1 + 40);
  _ViewList_ID.hash(into:)();
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  if (v8)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._finalize()();
  Swift::UInt v9 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v9;
  unint64_t v10 = a3[6] + 48 * v9;
  uint64_t v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)a1;
  *(_OWORD *)(v10 + 16) = v11;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v10 + 32) = result;
  *(void *)(a3[7] + 8 * v9) = a2;
  ++a3[2];
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  long long v8;
  __n128 result;
  long long v10;
  long long v11;
  unsigned char v12[48];
  unsigned char v13[48];

  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  _s7SwiftUI7WeakBoxVyyXlGWOcTm_0(a1 + 40, (uint64_t)v13, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
  if (v13[40] == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v13, (uint64_t)v12);
    Hasher._combine(_:)(1u);
    ToolbarItemPlacement.Role.hash(into:)();
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v12);
  }
  Hasher._finalize()();
  Swift::UInt v6 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v6;
  Swift::UInt v7 = a3[6] + 88 * v6;
  Swift::UInt v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)Swift::UInt v7 = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 16) = v8;
  __n128 result = *(__n128 *)(a1 + 32);
  unint64_t v10 = *(_OWORD *)(a1 + 48);
  uint64_t v11 = *(_OWORD *)(a1 + 64);
  *(unsigned char *)(v7 + 80) = *(unsigned char *)(a1 + 80);
  *(_OWORD *)(v7 + 48) = v10;
  *(_OWORD *)(v7 + 64) = v11;
  *(__n128 *)(v7 + 32) = result;
  *(void *)(a3[7] + 8 * v6) = a2;
  ++a3[2];
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  long long v10;
  long long v11;
  __n128 result;
  long long v13;

  Hasher.init(_seed:)();
  Swift::UInt v7 = *(void *)(a1 + 104);
  Swift::UInt v6 = *(void *)(a1 + 112);
  if (*(unsigned char *)(a1 + 120))
  {
    Hasher._combine(_:)(*(void *)(a1 + 104));
    Hasher._combine(_:)(v6);
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of SceneID(v7, v6, 0);
  }
  Hasher._finalize()();
  Swift::UInt v8 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
  Swift::UInt v9 = a3[6] + (v8 << 7);
  unint64_t v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v9 + 80) = v10;
  *(_OWORD *)(v9 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v9 + 105) = *(_OWORD *)(a1 + 105);
  uint64_t v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)Swift::UInt v9 = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 16) = v11;
  __n128 result = *(__n128 *)(a1 + 32);
  int64_t v13 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v9 + 32) = result;
  *(_OWORD *)(v9 + 48) = v13;
  *(void *)(a3[7] + 8 * v8) = a2;
  ++a3[2];
  return result;
}

__n128 specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, char a2, void *a3)
{
  Swift::UInt v7 = *(void *)a1;
  Swift::UInt v6 = *(void *)(a1 + 8);
  Swift::UInt v8 = *(unsigned __int8 *)(a1 + 16);
  Swift::UInt v9 = *(void *)(a1 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v7);
  if (v8 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(v8);
    Hasher._combine(_:)(v9);
  }
  Hasher._combine(_:)(*(unsigned char *)(a1 + 32) & 1);
  Hasher._finalize()();
  unint64_t v10 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v10;
  uint64_t v11 = a3[6] + 48 * v10;
  long long v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a1;
  *(_OWORD *)(v11 + 16) = v12;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v11 + 32) = result;
  *(unsigned char *)(a3[7] + v10) = a2 & 1;
  ++a3[2];
  return result;
}

__n128 specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, uint64_t a2, __int16 a3, void *a4)
{
  Hasher.init(_seed:)();
  if (*(unsigned char *)(a1 + 32))
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  String.hash(into:)();
  outlined release of TableColumnCustomizationID(a1);
  Hasher._finalize()();
  unint64_t v8 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
  uint64_t v9 = a4[6] + 40 * v8;
  char v10 = *(unsigned char *)(a1 + 32);
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a1;
  *(__n128 *)(v9 + 16) = result;
  *(unsigned char *)(v9 + 32) = v10;
  uint64_t v12 = a4[7] + 16 * v8;
  *(void *)uint64_t v12 = a2;
  *(unsigned char *)(v12 + 8) = a3 & 1;
  *(unsigned char *)(v12 + 9) = HIBYTE(a3);
  ++a4[2];
  return result;
}

__n128 specialized _NativeDictionary._unsafeInsertNew(key:value:)(Swift::UInt32 *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UUID?(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*a1);
  Hasher._combine(_:)(a1[1]);
  uint64_t v13 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])((uint64_t)a1 + *(int *)(v13 + 24), (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type UIMenuIdentifier and conformance UIMenuIdentifier((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  Hasher._finalize()();
  unint64_t v14 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v14;
  outlined init with take of (key: String, value: Any)?((uint64_t)a1, a3[6] + *(void *)(*(void *)(v13 - 8) + 72) * v14, type metadata accessor for DisplayList.HostedViewState.Key);
  uint64_t v15 = a3[7] + 176 * v14;
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)a2;
  *(_OWORD *)(v15 + 16) = v16;
  long long v17 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v15 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v15 + 80) = v17;
  long long v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v15 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v15 + 48) = v18;
  long long v19 = *(_OWORD *)(a2 + 160);
  long long v20 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v15 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v15 + 160) = v19;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v22 = *(_OWORD *)(a2 + 112);
  *(__n128 *)(v15 + 96) = result;
  *(_OWORD *)(v15 + 112) = v22;
  *(_OWORD *)(v15 + 128) = v20;
  ++a3[2];
  return result;
}

uint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, uint64_t a2, void *a3)
{
  Hasher.init(_seed:)();
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v6 = *(void *)(a1 + 112);
  if (*(unsigned char *)(a1 + 120))
  {
    Hasher._combine(_:)(*(void *)(a1 + 104));
    Hasher._combine(_:)(v6);
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of SceneID(v7, v6, 0);
  }
  Hasher._finalize()();
  unint64_t v8 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
  uint64_t v9 = (_OWORD *)(a3[6] + (v8 << 7));
  long long v10 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v10;
  v9[6] = *(_OWORD *)(a1 + 96);
  *(_OWORD *)((char *)v9 + 105) = *(_OWORD *)(a1 + 105);
  long long v11 = *(_OWORD *)(a1 + 16);
  *uint64_t v9 = *(_OWORD *)a1;
  v9[1] = v11;
  long long v12 = *(_OWORD *)(a1 + 48);
  void v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v12;
  uint64_t result = outlined init with take of (key: String, value: Any)?(a2, a3[7] + 8 * v8, (uint64_t (*)(void))type metadata accessor for WeakBox<PlatformDocument>);
  ++a3[2];
  return result;
}

{
  Swift::UInt v6;
  unint64_t v7;
  uint64_t result;
  _OWORD v9[2];
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  char v13;

  Hasher.init(_seed:)();
  outlined init with copy of TableRowID(a1, (uint64_t)v11);
  if (v13)
  {
    v9[0] = v11[0];
    v9[1] = v11[1];
    long long v10 = v12;
    Hasher._combine(_:)(1uLL);
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v9);
  }
  else
  {
    uint64_t v6 = *(void *)&v11[0];
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v6);
  }
  Hasher._finalize()();
  uint64_t v7 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
  uint64_t result = outlined init with take of TableRowID(a1, a3[6] + 48 * v7);
  *(void *)(a3[7] + 8 * v7) = a2;
  ++a3[2];
  return result;
}

uint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[5];
  char v15 = *((unsigned char *)a2 + 48);
  Hasher.init(_seed:)();
  outlined init with copy of TableRowID(a1, (uint64_t)v18);
  if (v20)
  {
    v16[0] = v18[0];
    v16[1] = v18[1];
    uint64_t v17 = v19;
    Hasher._combine(_:)(1uLL);
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v16);
  }
  else
  {
    Swift::UInt v11 = *(void *)&v18[0];
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v11);
  }
  Hasher._finalize()();
  unint64_t v12 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v12;
  uint64_t result = outlined init with take of TableRowID(a1, a3[6] + 48 * v12);
  uint64_t v14 = a3[7] + 56 * v12;
  *(void *)uint64_t v14 = v5;
  *(void *)(v14 + 8) = v6;
  *(void *)(v14 + 16) = v7;
  *(unsigned char *)(v14 + 24) = v8;
  *(void *)(v14 + 32) = v9;
  *(void *)(v14 + 40) = v10;
  *(unsigned char *)(v14 + 48) = v15;
  ++a3[2];
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, _OWORD *a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a4[6] + 4 * result) = a2;
  uint64_t v4 = (_OWORD *)(a4[7] + (result << 6));
  long long v5 = a3[1];
  *uint64_t v4 = *a3;
  v4[1] = v5;
  long long v6 = a3[3];
  v4[2] = a3[2];
  v4[3] = v6;
  uint64_t v7 = a4[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a4[2] = v9;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, char a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t result = outlined init with take of HashableWeakBox<UIViewController>(a2, a4[6] + 16 * a1);
  *(unsigned char *)(a4[7] + a1) = a3;
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, _OWORD *a2, char a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = (_OWORD *)(a4[6] + 48 * result);
  long long v5 = a2[1];
  *uint64_t v4 = *a2;
  v4[1] = v5;
  v4[2] = a2[2];
  *(unsigned char *)(a4[7] + result) = a3;
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1 << result;
  BOOL v7 = (void *)(a7[6] + 32 * result);
  *BOOL v7 = a2;
  v7[1] = a3;
  v7[2] = a4;
  void v7[3] = a5;
  *(void *)(a7[7] + 8 * result) = a6;
  uint64_t v8 = a7[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a7[2] = v10;
  }
  return result;
}

{
  void *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a7[(result >> 6) + 8] |= 1 << result;
  *(void *)(a7[6] + 8 * result) = a2;
  BOOL v7 = (void *)(a7[7] + 32 * result);
  *BOOL v7 = a3;
  v7[1] = a4;
  v7[2] = a5;
  void v7[3] = a6;
  uint64_t v8 = a7[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a7[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, int a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_DWORD *)(a4[6] + 4 * a1) = a2;
  uint64_t result = outlined init with take of ConfirmationDialog(a3, a4[7] + 184 * a1);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_DWORD *)(a4[6] + 4 * a1) = a2;
  uint64_t result = outlined init with take of ScrollViewCommitInfo(a3, a4[7] + 80 * a1);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  a8[(result >> 6) + 8] |= 1 << result;
  uint64_t v8 = (void *)(a8[6] + 16 * result);
  *uint64_t v8 = a2;
  v8[1] = a3;
  BOOL v9 = (void *)(a8[7] + 32 * result);
  *BOOL v9 = a4;
  v9[1] = a5;
  void v9[2] = a6;
  v9[3] = a7;
  uint64_t v10 = a8[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a8[2] = v12;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, __int16 a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = a6[6] + 24 * result;
  *(void *)uint64_t v6 = a2;
  *(void *)(v6 + 8) = a3;
  *(unsigned char *)(v6 + 16) = a4 & 1;
  *(_WORD *)(a6[7] + 2 * result) = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, void *a3, double a4, double a5)
{
  a3[(result >> 6) + 8] |= 1 << result;
  *(void *)(a3[6] + 8 * result) = a2;
  long long v5 = (double *)(a3[7] + 16 * result);
  *long long v5 = a4;
  v5[1] = a5;
  uint64_t v6 = a3[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a3[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  uint64_t v4 = (_OWORD *)(a4[7] + 48 * result);
  long long v5 = a3[1];
  *uint64_t v4 = *a3;
  v4[1] = v5;
  v4[2] = a3[2];
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

{
  _OWORD *v4;
  long long v5;
  long long v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  uint64_t v4 = (_OWORD *)(a4[7] + 80 * result);
  *(_OWORD *)((char *)v4 + 57) = *(_OWORD *)((char *)a3 + 57);
  long long v5 = a3[3];
  v4[2] = a3[2];
  v4[3] = v5;
  uint64_t v6 = a3[1];
  *uint64_t v4 = *a3;
  v4[1] = v6;
  BOOL v7 = a4[2];
  uint64_t v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a4[2] = v9;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, char a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2;
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  BOOL v7 = (void *)(a6[7] + 16 * result);
  *BOOL v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

{
  void *v6;
  void *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  BOOL v7 = (void *)(a6[7] + 16 * result);
  *BOOL v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  *(void *)(a6[6] + 8 * result) = a2;
  uint64_t v6 = a6[7] + 24 * result;
  *(void *)uint64_t v6 = a3;
  *(void *)(v6 + 8) = a4;
  *(_WORD *)(v6 + 20) = WORD2(a5);
  *(_DWORD *)(v6 + 16) = a5;
  BOOL v7 = a6[2];
  uint64_t v8 = __OFADD__(v7, 1);
  BOOL v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, char a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = a5[6] + 12 * result;
  *(void *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = a3 & 1;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a5[6] + 4 * result) = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  *uint64_t v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, char a2, long long *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2;
  uint64_t result = outlined init with take of NavigationSplitViewColumnWidth(a3, a4[7] + 40 * a1);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, __int16 a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = a5[6] + 40 * result;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(unsigned char *)(v5 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = a5[7] + 16 * result;
  *(void *)uint64_t v7 = a3;
  *(unsigned char *)(v7 + 8) = a4 & 1;
  *(unsigned char *)(v7 + 9) = HIBYTE(a4);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, void *a3, double a4, double a5, double a6, double a7)
{
  a3[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a3[6] + result) = a2 & 1;
  uint64_t v7 = (double *)(a3[7] + 32 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  v7[2] = a6;
  void v7[3] = a7;
  uint64_t v8 = a3[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a3[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, char a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2;
  *(unsigned char *)(a4[7] + result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, int a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a5[6] + 4 * result) = a2;
  uint64_t v5 = a5[7] + 16 * result;
  *(void *)uint64_t v5 = a3;
  *(_WORD *)(v5 + 8) = a4;
  *(unsigned char *)(v5 + 10) = BYTE2(a4);
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a7[6] + 32 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a5;
  uint64_t result = outlined init with take of UpdateViewDestinationRequest(a6, a7[7] + 160 * a1);
  uint64_t v10 = a7[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a7[2] = v12;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t result = outlined init with take of Toolbar.BarLocation(a2, a6[6] + 40 * a1);
  uint64_t v12 = (void *)(a6[7] + 24 * a1);
  *uint64_t v12 = a3;
  v12[1] = a4;
  v12[2] = a5;
  uint64_t v13 = a6[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a6[2] = v15;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = outlined init with take of OptionalBinaryInteger(a3, a4[7] + 40 * a1);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  long long v16;

  long long v16 = *a3;
  uint64_t v6 = *((void *)a3 + 2);
  BOOL v7 = *((unsigned char *)a3 + 24);
  uint64_t v8 = *((void *)a3 + 4);
  BOOL v9 = *((void *)a3 + 5);
  uint64_t v10 = *((unsigned char *)a3 + 48);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t result = outlined init with take of TableRowID(a2, a4[6] + 48 * a1);
  uint64_t v12 = a4[7] + 56 * a1;
  *(_OWORD *)uint64_t v12 = v16;
  *(void *)(v12 + 16) = v6;
  *(unsigned char *)(v12 + 24) = v7;
  *(void *)(v12 + 32) = v8;
  *(void *)(v12 + 40) = v9;
  *(unsigned char *)(v12 + 48) = v10;
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  a9[(result >> 6) + 8] |= 1 << result;
  uint64_t v9 = a9[6] + 32 * result;
  *(void *)uint64_t v9 = a2;
  *(void *)(v9 + 8) = a3;
  *(void *)(v9 + 16) = a4;
  *(unsigned char *)(v9 + 24) = a5;
  uint64_t v10 = (void *)(a9[7] + 24 * result);
  *uint64_t v10 = a6;
  v10[1] = a7;
  void v10[2] = a8;
  uint64_t v11 = a9[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a9[2] = v13;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, _OWORD *a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = (_OWORD *)(a4[6] + (a1 << 7));
  long long v6 = a2[5];
  v5[4] = a2[4];
  v5[5] = v6;
  void v5[6] = a2[6];
  *(_OWORD *)((char *)v5 + 105) = *(_OWORD *)((char *)a2 + 105);
  long long v7 = a2[1];
  *uint64_t v5 = *a2;
  v5[1] = v7;
  long long v8 = a2[3];
  v5[2] = a2[2];
  _OWORD v5[3] = v8;
  uint64_t result = outlined init with take of (key: String, value: Any)?(a3, a4[7] + 8 * a1, (uint64_t (*)(void))type metadata accessor for WeakBox<PlatformDocument>);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1 << result;
  *(void *)(a7[6] + 8 * result) = a2;
  uint64_t v7 = a7[7] + 32 * result;
  *(void *)uint64_t v7 = a3;
  *(void *)(v7 + 8) = a4;
  *(void *)(v7 + 16) = a5;
  *(unsigned char *)(v7 + 24) = a6 & 1;
  uint64_t v8 = a7[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a7[2] = v10;
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in __designTimeBoolean<A>(_:fallback:)(uint64_t a1, uint64_t a2)
{
  return implicit closure #1 in __designTimeBoolean<A>(_:fallback:)(a1, v2[4], v2[2], v2[3], a2, MEMORY[0x1E4FBBF00], MEMORY[0x1E4FBACD0], MEMORY[0x1E4FBBEF8]);
}

uint64_t partial apply for implicit closure #1 in __designTimeFloat<A>(_:fallback:)(uint64_t a1, uint64_t a2)
{
  return implicit closure #1 in __designTimeBoolean<A>(_:fallback:)(a1, v2[4], v2[2], v2[3], a2, MEMORY[0x1E4FBBE80], MEMORY[0x1E4FBACB8], MEMORY[0x1E4FBBE70]);
}

uint64_t partial apply for implicit closure #1 in __designTimeInteger<A>(_:fallback:)(uint64_t a1, uint64_t a2)
{
  return implicit closure #1 in __designTimeBoolean<A>(_:fallback:)(a1, v2[4], v2[2], v2[3], a2, MEMORY[0x1E4FBBF18], MEMORY[0x1E4FBACD8], MEMORY[0x1E4FBBF08]);
}

uint64_t outlined retain of OSLogMessage(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for implicit closure #1 in __designTimeString<A>(_:fallback:)(uint64_t a1, uint64_t a2)
{
  return implicit closure #1 in __designTimeBoolean<A>(_:fallback:)(a1, v2[4], v2[2], v2[3], a2, MEMORY[0x1E4FBBEF0], MEMORY[0x1E4FBACC0], MEMORY[0x1E4FBBEE8]);
}

{
  uint64_t *v2;

  return implicit closure #1 in __designTimeBoolean<A>(_:fallback:)(a1, v2[4], v2[2], v2[3], a2, MEMORY[0x1E4FBC090], MEMORY[0x1E4FBACF0], MEMORY[0x1E4FBC088]);
}

void type metadata accessor for (key: String, value: Any)?(uint64_t a1)
{
}

void type metadata accessor for (key: String, value: Any)()
{
  if (!lazy cache variable for type metadata for (key: String, value: Any))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: String, value: Any));
    }
  }
}

void _ss14PartialKeyPathCySo21UISplitViewControllerCGMaTm_0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for NSObject(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = a6;
  uint64_t v21 = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(boxed_opaque_existential_1, a4, a6);
  a5[(a1 >> 6) + 8] |= 1 << a1;
  BOOL v14 = (void *)(a5[6] + 16 * a1);
  *BOOL v14 = a2;
  v14[1] = a3;
  uint64_t result = outlined init with take of OptionalBinaryInteger(&v19, a5[7] + 40 * a1);
  uint64_t v16 = a5[2];
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    a5[2] = v18;
  }
  return result;
}

void type metadata accessor for UUID?(uint64_t a1)
{
}

uint64_t _s7SwiftUI7WeakBoxVyyXlGWOcTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  _sypSgMaTm_7(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

void type metadata accessor for [WeakBox<DocumentViewController>](uint64_t a1)
{
}

uint64_t outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of (key: String, value: Any)?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of ScrollViewCommitInfo(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for (key: String, value: Any)?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type UIMenuIdentifier and conformance UIMenuIdentifier(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedFormStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedFormStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedFormStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t View.formStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for FormStyleWritingModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for FormStyleWritingModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t instantiation function for generic protocol witness table for FormStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in FormStyleConfiguration.Content()
{
  return &protocol witness table for FormStyleConfiguration.Content;
}

unint64_t instantiation function for generic protocol witness table for FormStyleConfiguration.Footer(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in FormStyleConfiguration.Footer()
{
  return &protocol witness table for FormStyleConfiguration.Footer;
}

uint64_t dispatch thunk of FormStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for FormStyleConfiguration()
{
  return &type metadata for FormStyleConfiguration;
}

ValueMetadata *type metadata accessor for FormStyleConfiguration.Content()
{
  return &type metadata for FormStyleConfiguration.Content;
}

ValueMetadata *type metadata accessor for FormStyleConfiguration.Footer()
{
  return &type metadata for FormStyleConfiguration.Footer;
}

uint64_t sub_187EDC094()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for ResolvedFormStyle()
{
  return &type metadata for ResolvedFormStyle;
}

unint64_t lazy protocol witness table accessor for type FormStyleModifier<AutomaticFormStyle> and conformance FormStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type FormStyleModifier<AutomaticFormStyle> and conformance FormStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type FormStyleModifier<AutomaticFormStyle> and conformance FormStyleModifier<A>)
  {
    type metadata accessor for FormStyleModifier<AutomaticFormStyle>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormStyleModifier<AutomaticFormStyle> and conformance FormStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for FormStyleModifier<AutomaticFormStyle>()
{
  if (!lazy cache variable for type metadata for FormStyleModifier<AutomaticFormStyle>)
  {
    lazy protocol witness table accessor for type AutomaticFormStyle and conformance AutomaticFormStyle();
    unint64_t v0 = type metadata accessor for FormStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FormStyleModifier<AutomaticFormStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticFormStyle and conformance AutomaticFormStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomaticFormStyle and conformance AutomaticFormStyle;
  if (!lazy protocol witness table cache variable for type AutomaticFormStyle and conformance AutomaticFormStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticFormStyle and conformance AutomaticFormStyle);
  }
  return result;
}

uint64_t type metadata accessor for FormStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for MultiViewModifier in FormStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in FormStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in FormStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t FormStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(double))(v2 + 24))(v8);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v6);
  uint64_t v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v6, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, AssociatedTypeWitness);
}

_UNKNOWN **base witness table accessor for ViewModifier in FormStyleModifier<A>()
{
  return &protocol witness table for FormStyleModifier<A>;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance FormStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance FormStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance FormStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in FormStyleWritingModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance AnyFormStyleContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static AnyFormStyleContext.accepts<A>(_:at:)(a3);
}

uint64_t protocol witness for static StyleContext.acceptsAny<A>(_:) in conformance AnyFormStyleContext(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1);
  if (a2) {
    memcpy((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v4);
  }
  return static StyleContext.acceptsAny<A>(_:)() & 1;
}

uint64_t FormStyleWritingModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = a3;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for FormStyleModifier();
  uint64_t v23 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v22 - v8;
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for _ViewModifier_Content();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v22 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v6, v24, v3, v16);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v6, v3);
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](v9, v10, v7, WitnessTable);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
  uint64_t v26 = WitnessTable;
  char v27 = &protocol witness table for FormStyleModifier<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v14);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v14, v11);
  static ViewBuilder.buildExpression<A>(_:)(v18);
  return ((uint64_t (*)(char *, uint64_t))v20)(v18, v11);
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedFormStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetFormEnvironmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance ResetFormEnvironmentModifier()
{
}

BOOL specialized static FormStyleContext.accepts<A>(_:at:)(ValueMetadata *a1, ValueMetadata *a2)
{
  return a2 == &type metadata for AnyFormStyleContext || a2 == a1;
}

ValueMetadata *type metadata accessor for AnyFormStyleContext()
{
  return &type metadata for AnyFormStyleContext;
}

uint64_t getEnumTagSinglePayload for FormStyleWritingModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for FormStyleWritingModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187EDCF04);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        double v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

unint64_t lazy protocol witness table accessor for type Form<FormStyleConfiguration.Content> and conformance Form<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Form<FormStyleConfiguration.Content> and conformance Form<A>;
  if (!lazy protocol witness table cache variable for type Form<FormStyleConfiguration.Content> and conformance Form<A>)
  {
    type metadata accessor for Form<FormStyleConfiguration.Content>(255, (unint64_t *)&lazy cache variable for type metadata for Form<FormStyleConfiguration.Content>, (uint64_t)&type metadata for FormStyleConfiguration.Content, (uint64_t)&protocol witness table for FormStyleConfiguration.Content, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Form);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Form<FormStyleConfiguration.Content> and conformance Form<A>);
  }
  return result;
}

uint64_t sub_187EDCFB4()
{
  return swift_getWitnessTable();
}

uint64_t sub_187EDD094()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

unint64_t instantiation function for generic protocol witness table for AnyFormStyleContext(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AnyFormStyleContext and conformance AnyFormStyleContext();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyFormStyleContext and conformance AnyFormStyleContext()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyFormStyleContext and conformance AnyFormStyleContext;
  if (!lazy protocol witness table cache variable for type AnyFormStyleContext and conformance AnyFormStyleContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyFormStyleContext and conformance AnyFormStyleContext);
  }
  return result;
}

BOOL specialized static AnyFormStyleContext.accepts<A>(_:at:)(uint64_t a1)
{
  if (swift_conformsToProtocol2()) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = 0;
  }
  return v2 != 0;
}

_UNKNOWN **base witness table accessor for ViewModifier in ResetFormEnvironmentModifier()
{
  return &protocol witness table for ResetFormEnvironmentModifier;
}

uint64_t TabContent.swipeActions<A>(edge:allowsFullSwipe:content:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X4>, uint64_t a4@<X5>, unsigned char *a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 - 8);
  char v11 = a1 & 1;
  MEMORY[0x1F4188790](a1);
  int v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18(v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v5, a3);
  return SwipeActionTabs.init(edge:allowsFullSwipe:content:base:)(v11, a2, (uint64_t)v17, (uint64_t)v13, a3, a4, a5);
}

uint64_t SwipeActionTabs.init(edge:allowsFullSwipe:content:base:)@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X8>)
{
  *a7 = a1 & 1;
  a7[1] = a2;
  uint64_t v12 = type metadata accessor for SwipeActionTabs();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(&a7[*(int *)(v12 + 40)], a3, a6);
  int v13 = &a7[*(int *)(v12 + 44)];
  uint64_t v14 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32);

  return v14(v13, a4, a5);
}

uint64_t SwipeActionTabs<>._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v33 = a3;
  uint64_t v8 = a1;
  uint64_t v36 = a4;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v35 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)v32 - v11;
  uint64_t v13 = *(void *)(v8 + 24);
  type metadata accessor for _EnvironmentKeyTransformModifier<SymbolVariants>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>, MEMORY[0x1E4F3FA20], MEMORY[0x1E4F41280]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StyleContextWriter<SwipeActionsStyleContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<SwipeActionsStyleContext>, MEMORY[0x1E4F40DE0], MEMORY[0x1E4F40DD8], MEMORY[0x1E4F40318]);
  type metadata accessor for ModifiedContent();
  unint64_t v14 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>();
  uint64_t v51 = a3;
  unint64_t v52 = v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v16 = lazy protocol witness table accessor for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v49 = WitnessTable;
  unint64_t v50 = v16;
  swift_getWitnessTable();
  type metadata accessor for SwipeActionsModifier();
  v32[0] = type metadata accessor for ModifiedContent();
  type metadata accessor for StyleContextWriter<SwipeActionsStyleContext>(255, &lazy cache variable for type metadata for _TraitWritingModifier<SwipeActionsArePresent>, (uint64_t)&type metadata for SwipeActionsArePresent, (uint64_t)&protocol witness table for SwipeActionsArePresent, MEMORY[0x1E4F408B8]);
  v32[1] = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v34 = *(void *)(v17 - 8);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)v32 - v19;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 56))(v9, a2, v18);
  uint64_t v21 = v5;
  LOBYTE(v8) = *v5;
  uint64_t v22 = v5[1];
  uint64_t v38 = v9;
  uint64_t v39 = v13;
  uint64_t v23 = v33;
  uint64_t v40 = a2;
  uint64_t v41 = v33;
  uint64_t v42 = v21;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  View.swipeActions<A>(edge:allowsFullSwipe:content:)(v8, v22, (void (*)(double))partial apply for closure #1 in SwipeActionTabs<>._identifiedView.getter, (uint64_t)v37, AssociatedTypeWitness, v13, AssociatedConformanceWitness, v23, (uint64_t)v20);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v12, AssociatedTypeWitness);
  uint64_t v47 = AssociatedConformanceWitness;
  id v48 = &protocol witness table for SwipeActionsModifier<A>;
  uint64_t v25 = swift_getWitnessTable();
  unint64_t v26 = lazy protocol witness table accessor for type _TraitWritingModifier<SwipeActionsArePresent> and conformance _TraitWritingModifier<A>();
  uint64_t v45 = v25;
  unint64_t v46 = v26;
  uint64_t v27 = swift_getWitnessTable();
  unint64_t IsSharingPicker = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v43 = v27;
  unint64_t v44 = IsSharingPicker;
  uint64_t v29 = swift_getWitnessTable();
  unint64_t v30 = lazy protocol witness table accessor for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput();
  View.input<A>(_:)((uint64_t)&type metadata for SwipeActionsUseTraitKeyInput, v17, (uint64_t)&type metadata for SwipeActionsUseTraitKeyInput, v29, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v20, v17);
}

uint64_t closure #1 in SwipeActionTabs<>._identifiedView.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SwipeActionTabs();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v8 + 40));
  static ViewBuilder.buildExpression<A>(_:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a3);
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <> SwipeActionTabs<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SwipeActionTabs<>._identifiedView.getter(a1, *(void *)(a2 - 8), *(void *)(a2 - 16), a3);
}

uint64_t TabContent.contextMenu<A>(menuItems:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x1F4188790](v11);
  unint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a2);
  return ContextMenuTabs.init(menu:base:)((uint64_t)v14, (uint64_t)v10, a3, a2, a4);
}

uint64_t ContextMenuTabs.init(menu:base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = a5 + *(int *)(type metadata accessor for ContextMenuTabs() + 36);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32);

  return v9(v8, a2, a4);
}

uint64_t sub_187EDDB18()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for SwipeActionTabs()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187EDDB8C()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for ContextMenuTabs()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for ContextMenuTabs(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for ContextMenuTabs(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187EDE0C8);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata completion function for SwipeActionTabs()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for SwipeActionTabs(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  if ((v9 | v5) > 7
    || ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) != 0
    || ((v6 + v9 + ((v5 + 2) & ~v5)) & ~v9) + *(void *)(v8 + 64) > 0x18)
  {
    uint64_t v13 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v13 + (((v9 | v5) + 16) & ~(v9 | v5)));
    swift_retain();
  }
  else
  {
    uint64_t v14 = ~v9;
    *a1 = *(unsigned char *)a2;
    a1[1] = *((unsigned char *)a2 + 1);
    uint64_t v15 = (unint64_t)&a1[v5 + 2] & ~v5;
    uint64_t v16 = ((unint64_t)a2 + v5 + 2) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v15, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))((v15 + v10) & v14, (v16 + v10) & v14, v7);
  }
  return v3;
}

uint64_t destroy for SwipeActionTabs(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v4 = v3 + 8;
  unint64_t v5 = (a1 + *(unsigned __int8 *)(v3 + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t))(v3 + 8))(v5);
  uint64_t v6 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t))(v6 + 8);
  unint64_t v8 = (v5 + *(void *)(v4 + 56) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v8);
}

unsigned char *initializeWithCopy for SwipeActionTabs(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = v5 + 16;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 2] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 2] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 16))((*(void *)(v6 + 48) + *(unsigned __int8 *)(v10 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(void *)(v6 + 48) + *(unsigned __int8 *)(v10 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

unsigned char *assignWithCopy for SwipeActionTabs(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = v5 + 24;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 2] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 2] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 24))((*(void *)(v6 + 40) + *(unsigned __int8 *)(v10 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(void *)(v6 + 40) + *(unsigned __int8 *)(v10 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

unsigned char *initializeWithTake for SwipeActionTabs(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 2] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 2] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 32))((*(void *)(v6 + 32) + *(unsigned __int8 *)(v10 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(void *)(v6 + 32) + *(unsigned __int8 *)(v10 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

unsigned char *assignWithTake for SwipeActionTabs(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = v5 + 40;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 2] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 2] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))((*(void *)(v6 + 24) + *(unsigned __int8 *)(v10 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(void *)(v6 + 24) + *(unsigned __int8 *)(v10 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for SwipeActionTabs(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  if (v5 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v4 + 84);
  }
  if (v12 <= 0xFE) {
    unsigned int v13 = 254;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  int v14 = a2 - v13;
  if (a2 <= v13) {
    goto LABEL_28;
  }
  uint64_t v15 = ((v10 + v11 + ((v9 + 2) & ~v9)) & ~v11) + *(void *)(*(void *)(v6 - 8) + 64);
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v19 = ((v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)&a1[v15];
      if (!v17) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)&a1[v15];
      if (!*(_WORD *)&a1[v15]) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 < 2)
    {
LABEL_28:
      if (v12 > 0xFE)
      {
        uint64_t v24 = (unint64_t)&a1[v9 + 2] & ~v9;
        if (v5 == v13) {
          return (*(uint64_t (**)(uint64_t))(v4 + 48))(v24);
        }
        else {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))((v24 + v10 + v11) & ~v11, v8, v6);
        }
      }
      else
      {
        unsigned int v23 = *a1;
        if (v23 >= 2) {
          return v23 - 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v17 = a1[v15];
  if (!a1[v15]) {
    goto LABEL_28;
  }
LABEL_18:
  int v20 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v20 = 0;
  }
  if (v15)
  {
    if (v15 <= 3) {
      int v21 = v15;
    }
    else {
      int v21 = 4;
    }
    switch(v21)
    {
      case 2:
        int v22 = *(unsigned __int16 *)a1;
        break;
      case 3:
        int v22 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        break;
      case 4:
        int v22 = *(_DWORD *)a1;
        break;
      default:
        int v22 = *a1;
        break;
    }
  }
  else
  {
    int v22 = 0;
  }
  return v13 + (v22 | v20) + 1;
}

void storeEnumTagSinglePayload for SwipeActionTabs(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13 <= 0xFE) {
    unsigned int v14 = 254;
  }
  else {
    unsigned int v14 = v13;
  }
  size_t v15 = ((v11 + v12 + ((v10 + 2) & ~v10)) & ~v12) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v16 = a3 >= v14;
  unsigned int v17 = a3 - v14;
  if (v17 != 0 && v16)
  {
    if (v15 <= 3)
    {
      unsigned int v21 = ((v17 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
      if (HIWORD(v21))
      {
        int v18 = 4;
      }
      else if (v21 >= 0x100)
      {
        int v18 = 2;
      }
      else
      {
        int v18 = v21 > 1;
      }
    }
    else
    {
      int v18 = 1;
    }
  }
  else
  {
    int v18 = 0;
  }
  if (v14 < a2)
  {
    unsigned int v19 = ~v14 + a2;
    if (v15 < 4)
    {
      int v20 = (v19 >> (8 * v15)) + 1;
      if (v15)
      {
        int v22 = v19 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if (v15 == 3)
        {
          *(_WORD *)a1 = v22;
          a1[2] = BYTE2(v22);
        }
        else if (v15 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        a1[v15] = v20;
        return;
      case 2:
        *(_WORD *)&a1[v15] = v20;
        return;
      case 3:
        goto LABEL_46;
      case 4:
        *(_DWORD *)&a1[v15] = v20;
        return;
      default:
        return;
    }
  }
  switch(v18)
  {
    case 1:
      a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x187EDECD8);
    case 4:
      *(_DWORD *)&a1[v15] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v13 > 0xFE)
        {
          unint64_t v23 = (unint64_t)&a1[v10 + 2] & ~v10;
          if (v7 == v14)
          {
            uint64_t v24 = *(void (**)(unint64_t))(v6 + 56);
            v24(v23);
          }
          else
          {
            unint64_t v25 = (v23 + v11 + v12) & ~v12;
            unint64_t v26 = *(void (**)(unint64_t))(v9 + 56);
            v26(v25);
          }
        }
        else
        {
          *a1 = a2 + 1;
        }
      }
      return;
  }
}

uint64_t instantiation function for generic protocol witness table for <> ContextMenuTabs<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> ContextMenuTabs<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> ContextMenuTabs<A, B>()
{
  return associated type witness table accessor for TabContent._IdentifiedView : View in <> ContextMenuTabs<A, B>();
}

{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ContextMenuTabs<>._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v41 = a4;
  uint64_t v36 = *(void *)(a1 + 16);
  uint64_t v30 = a1;
  type metadata accessor for StyleContextWriter<SwipeActionsStyleContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F3FCE8], MEMORY[0x1E4F40318]);
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v47 = a2;
  unint64_t v48 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = v7;
  uint64_t v31 = v7;
  uint64_t v33 = type metadata accessor for ZStack();
  uint64_t v39 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33);
  uint64_t v35 = (char *)&v30 - v9;
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for PlatformItemContextMenuModifier();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v37 = v10;
  uint64_t v38 = v11;
  MEMORY[0x1F4188790](v10);
  unsigned int v13 = (char *)&v30 - v12;
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int v18 = (char *)&v30 - v17;
  uint64_t v19 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v20);
  int v22 = (char *)&v30 - v21;
  uint64_t v23 = v36;
  uint64_t v24 = v34;
  View.styleContext<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v15 + 56))(v14, v15);
  uint64_t v42 = v23;
  uint64_t v43 = v14;
  uint64_t v44 = v24;
  uint64_t v45 = v15;
  unint64_t v46 = v22;
  static Alignment.center.getter();
  unint64_t v25 = v35;
  uint64_t v26 = v31;
  ZStack.init(alignment:content:)();
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v13, v25, v33);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v28 = v37;
  MEMORY[0x18C113660](v13, AssociatedTypeWitness, v37, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v28);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v18, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, v26);
}

uint64_t closure #1 in ContextMenuTabs<>._identifiedView.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for StyleContextWriter<SwipeActionsStyleContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F3FCE8], MEMORY[0x1E4F40318]);
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v12 - v8;
  unint64_t v10 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v12[0] = a4;
  v12[1] = v10;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(a1);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <> ContextMenuTabs<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ContextMenuTabs<>._identifiedView.getter(a1, *(void *)(a2 - 8), *(void *)(a2 - 16), a3);
}

uint64_t instantiation function for generic protocol witness table for <> SwipeActionTabs<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> SwipeActionTabs<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> SwipeActionTabs<A, B>()
{
  return associated type witness table accessor for TabContent._IdentifiedView : View in <> ContextMenuTabs<A, B>();
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for StyleContextWriter<SwipeActionsStyleContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<SwipeActionsStyleContext>, MEMORY[0x1E4F40DE0], MEMORY[0x1E4F40DD8], MEMORY[0x1E4F40318]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in SwipeActionTabs<>._identifiedView.getter()
{
  return partial apply for closure #1 in SwipeActionTabs<>._identifiedView.getter((uint64_t (*)(void, void, void, void, void))closure #1 in SwipeActionTabs<>._identifiedView.getter);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<SwipeActionsArePresent> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<SwipeActionsArePresent> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<SwipeActionsArePresent> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for StyleContextWriter<SwipeActionsStyleContext>(255, &lazy cache variable for type metadata for _TraitWritingModifier<SwipeActionsArePresent>, (uint64_t)&type metadata for SwipeActionsArePresent, (uint64_t)&protocol witness table for SwipeActionsArePresent, MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<SwipeActionsArePresent> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput()
{
  unint64_t result = lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput;
  if (!lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput;
  if (!lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput;
  if (!lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput;
  if (!lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput;
  if (!lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput);
  }
  return result;
}

void type metadata accessor for StyleContextWriter<SwipeActionsStyleContext>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata accessor for PlatformItemContextMenuModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in ContextMenuTabs<>._identifiedView.getter()
{
  return partial apply for closure #1 in SwipeActionTabs<>._identifiedView.getter((uint64_t (*)(void, void, void, void, void))closure #1 in ContextMenuTabs<>._identifiedView.getter);
}

uint64_t partial apply for closure #1 in SwipeActionTabs<>._identifiedView.getter(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t type metadata accessor for TabContextMenuKey.Storage(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TabContextMenuKey.Storage);
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance TabContextMenuKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  type metadata accessor for TabContextMenuKey.Storage?(0, &lazy cache variable for type metadata for TabContextMenuKey.Storage?, (void (*)(uint64_t))type metadata accessor for TabContextMenuKey.Storage);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static TabContextMenuKey.defaultValue);

  return outlined init with copy of TabContextMenuKey.Storage?(v3, a1);
}

uint64_t outlined init with copy of TabContextMenuKey.Storage?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TabContextMenuKey.Storage?(0, &lazy cache variable for type metadata for TabContextMenuKey.Storage?, (void (*)(uint64_t))type metadata accessor for TabContextMenuKey.Storage);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for TabContextMenuKey()
{
  return &type metadata for TabContextMenuKey;
}

void *initializeBufferWithCopyOfBuffer for TabContextMenuKey.Storage(void *a1, void *a2)
{
  int v4 = *(_DWORD *)(*(void *)(type metadata accessor for TabContextMenuKey.Storage.Guts(0) - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_retain();
LABEL_51:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    uint64_t v6 = type metadata accessor for PlatformItemList.Item();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      type metadata accessor for TabContextMenuKey.Storage?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      goto LABEL_51;
    }
    uint64_t v95 = v7;
    unint64_t v99 = (int *)v6;
    uint64_t v9 = (void *)*a2;
    unint64_t v10 = (void *)a2[1];
    *a1 = *a2;
    a1[1] = v10;
    uint64_t v11 = a2[3];
    a1[2] = a2[2];
    a1[3] = v11;
    *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
    uint64_t v12 = a2[6];
    a1[5] = a2[5];
    a1[6] = v12;
    *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
    unsigned int v13 = a1 + 8;
    uint64_t v14 = a2 + 8;
    unint64_t v15 = a2[23];
    id v16 = v9;
    id v17 = v10;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v15 >> 1 == 4294967294)
    {
      long long v18 = *((_OWORD *)a2 + 13);
      *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
      *((_OWORD *)a1 + 13) = v18;
      *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
      *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
      long long v19 = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 9) = v19;
      long long v20 = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 11) = v20;
      long long v21 = *((_OWORD *)a2 + 5);
      _OWORD *v13 = *v14;
      *((_OWORD *)a1 + 5) = v21;
      long long v22 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v22;
      uint64_t v23 = a2[32];
      if (v23)
      {
LABEL_9:
        a1[31] = a2[31];
        a1[32] = v23;
        uint64_t v24 = (void *)a2[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v24 >= 2) {
          id v25 = v24;
        }
        a1[33] = v24;
        *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
        *((unsigned char *)a1 + 276) = *((unsigned char *)a2 + 276);
        *(_WORD *)((char *)a1 + 277) = *(_WORD *)((char *)a2 + 277);
        uint64_t v26 = a2[36];
        a1[35] = a2[35];
        a1[36] = v26;
        swift_retain();
        swift_retain();
LABEL_20:
        unint64_t v38 = a2[41];
        if (v38 >> 2 == 0xFFFFFFFF)
        {
          long long v39 = *(_OWORD *)(a2 + 47);
          *(_OWORD *)(a1 + 45) = *(_OWORD *)(a2 + 45);
          *(_OWORD *)(a1 + 47) = v39;
          a1[49] = a2[49];
          long long v40 = *(_OWORD *)(a2 + 39);
          *(_OWORD *)(a1 + 37) = *(_OWORD *)(a2 + 37);
          *(_OWORD *)(a1 + 39) = v40;
          long long v41 = *(_OWORD *)(a2 + 43);
          *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
          *(_OWORD *)(a1 + 43) = v41;
        }
        else
        {
          uint64_t v42 = (void *)a2[37];
          uint64_t v43 = a2[38];
          uint64_t v44 = a2[39];
          uint64_t v45 = a2[42];
          uint64_t v46 = a2[43];
          uint64_t v47 = a2[44];
          uint64_t v88 = a2[40];
          uint64_t v89 = a2[45];
          uint64_t v90 = a2[46];
          uint64_t v91 = a2[47];
          unint64_t __dsta = (void *)a2[48];
          uint64_t v96 = a2[49];
          outlined copy of PlatformItemList.Item.SystemItem(v42, v43, v44, v88, v38, v45, v46, v47, v89, v90, v91, (char)__dsta, v96);
          a1[37] = v42;
          a1[38] = v43;
          a1[39] = v44;
          a1[40] = v88;
          a1[41] = v38;
          a1[42] = v45;
          a1[43] = v46;
          a1[44] = v47;
          a1[45] = v89;
          a1[46] = v90;
          a1[47] = v91;
          a1[48] = __dsta;
          a1[49] = v96;
        }
        uint64_t v48 = a2[51];
        if (v48 == 1)
        {
          long long v49 = *((_OWORD *)a2 + 28);
          *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
          *((_OWORD *)a1 + 28) = v49;
          *((unsigned char *)a1 + 464) = *((unsigned char *)a2 + 464);
          long long v50 = *((_OWORD *)a2 + 26);
          *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
          *((_OWORD *)a1 + 26) = v50;
LABEL_33:
          uint64_t v56 = a2[60];
          a1[59] = a2[59];
          a1[60] = v56;
          a1[61] = a2[61];
          *((unsigned char *)a1 + 496) = *((unsigned char *)a2 + 496);
          uint64_t v57 = a2[63];
          swift_bridgeObjectRetain();
          if (v57)
          {
            uint64_t v58 = a2[64];
            a1[63] = v57;
            a1[64] = v58;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(a1 + 63) = *(_OWORD *)(a2 + 63);
          }
          *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
          uint64_t v59 = a2[66];
          if (v59)
          {
            a1[66] = v59;
            a1[67] = a2[67];
            a1[68] = a2[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
            a1[68] = a2[68];
          }
          uint64_t v60 = a2[69];
          if (v60 == 1)
          {
            *(_OWORD *)(a1 + 69) = *(_OWORD *)(a2 + 69);
            a1[71] = a2[71];
          }
          else
          {
            a1[69] = v60;
            uint64_t v61 = a2[70];
            swift_retain();
            if (v61)
            {
              uint64_t v62 = a2[71];
              a1[70] = v61;
              a1[71] = v62;
              swift_retain();
            }
            else
            {
              *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
            }
          }
          long long v63 = (void *)a2[72];
          a1[72] = v63;
          a1[73] = a2[73];
          a1[74] = a2[74];
          a1[75] = a2[75];
          a1[76] = a2[76];
          a1[77] = a2[77];
          a1[78] = a2[78];
          *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
          *((unsigned char *)a1 + 634) = *((unsigned char *)a2 + 634);
          uint64_t v64 = v99[28];
          __dst = (char *)a1 + v64;
          long long v65 = (char *)a2 + v64;
          uint64_t v66 = type metadata accessor for CommandOperation();
          uint64_t v92 = *(void *)(v66 - 8);
          uint64_t v97 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v92 + 48);
          id v67 = v63;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v97(v65, 1, v66))
          {
            type metadata accessor for TabContextMenuKey.Storage?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
            memcpy(__dst, v65, *(void *)(*(void *)(v68 - 8) + 64));
            uint64_t v69 = v99;
            uint64_t v70 = v95;
          }
          else
          {
            unsigned char *__dst = *v65;
            uint64_t v71 = *(int *)(v66 + 20);
            uint64_t v72 = &__dst[v71];
            uint64_t v73 = &v65[v71];
            uint64_t v98 = v66;
            uint64_t v74 = *(void *)&v65[v71];
            uint64_t v75 = *(void *)&v65[v71 + 8];
            char v76 = v65[v71 + 16];
            outlined copy of Text.Storage(v74, v75, v76);
            *(void *)uint64_t v72 = v74;
            *((void *)v72 + 1) = v75;
            v72[16] = v76;
            *((void *)v72 + 3) = *((void *)v73 + 3);
            uint64_t v77 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            char v78 = &v72[v77];
            char v79 = &v73[v77];
            uint64_t v80 = type metadata accessor for UUID();
            uint64_t v81 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v80 - 8) + 16);
            swift_bridgeObjectRetain();
            v81(v78, v79, v80);
            uint64_t v82 = *(int *)(v98 + 24);
            uint64_t v83 = &__dst[v82];
            uint64_t v84 = &v65[v82];
            if (*v84)
            {
              uint64_t v85 = v84[1];
              *uint64_t v83 = *v84;
              v83[1] = v85;
              swift_retain();
            }
            else
            {
              *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
            }
            uint64_t v69 = v99;
            uint64_t v70 = v95;
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v92 + 56))(__dst, 0, 1, v98);
          }
          *((unsigned char *)a1 + v69[29]) = *((unsigned char *)a2 + v69[29]);
          *((unsigned char *)a1 + v69[30]) = *((unsigned char *)a2 + v69[30]);
          *((unsigned char *)a1 + v69[31]) = *((unsigned char *)a2 + v69[31]);
          *((unsigned char *)a1 + v69[32]) = *((unsigned char *)a2 + v69[32]);
          *(void *)((char *)a1 + v69[33]) = *(void *)((char *)a2 + v69[33]);
          id v86 = *(void (**)(void *, void, uint64_t, int *))(v70 + 56);
          swift_retain();
          v86(a1, 0, 1, v69);
          goto LABEL_51;
        }
        *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
        *((unsigned char *)a1 + 404) = *((unsigned char *)a2 + 404);
        if (v48)
        {
          uint64_t v51 = a2[52];
          a1[51] = v48;
          a1[52] = v51;
          swift_retain();
          uint64_t v52 = a2[53];
          if (v52) {
            goto LABEL_27;
          }
        }
        else
        {
          *(_OWORD *)(a1 + 51) = *(_OWORD *)(a2 + 51);
          uint64_t v52 = a2[53];
          if (v52)
          {
LABEL_27:
            uint64_t v53 = a2[54];
            a1[53] = v52;
            a1[54] = v53;
            swift_retain();
            uint64_t v54 = a2[55];
            if (v54)
            {
LABEL_28:
              uint64_t v55 = a2[56];
              a1[55] = v54;
              a1[56] = v55;
              swift_retain();
LABEL_32:
              a1[57] = a2[57];
              *((unsigned char *)a1 + 464) = *((unsigned char *)a2 + 464);
              goto LABEL_33;
            }
LABEL_31:
            *(_OWORD *)(a1 + 55) = *(_OWORD *)(a2 + 55);
            goto LABEL_32;
          }
        }
        *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
        uint64_t v54 = a2[55];
        if (v54) {
          goto LABEL_28;
        }
        goto LABEL_31;
      }
    }
    else
    {
      int v27 = *((unsigned __int8 *)a2 + 72);
      if (v27 == 255)
      {
        *(void *)unsigned int v13 = *(void *)v14;
        *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
      }
      else
      {
        uint64_t v28 = (void *)a2[8];
        outlined copy of GraphicsImage.Contents(v28, *((unsigned char *)a2 + 72));
        a1[8] = v28;
        *((unsigned char *)a1 + 72) = v27;
        unint64_t v15 = a2[23];
      }
      a1[10] = a2[10];
      *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
      *((unsigned char *)a1 + 104) = *((unsigned char *)a2 + 104);
      *(_OWORD *)((char *)a1 + 108) = *(_OWORD *)((char *)a2 + 108);
      *((unsigned char *)a1 + 124) = *((unsigned char *)a2 + 124);
      long long v29 = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 9) = v29;
      *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
      *((unsigned char *)a1 + 162) = *((unsigned char *)a2 + 162);
      *((unsigned char *)a1 + 163) = *((unsigned char *)a2 + 163);
      if (v15 >> 1 == 0xFFFFFFFF)
      {
        long long v30 = *(_OWORD *)(a2 + 23);
        *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
        *(_OWORD *)(a1 + 23) = v30;
      }
      else
      {
        uint64_t v31 = a2[21];
        uint64_t v32 = a2[22];
        uint64_t v33 = a2[24];
        outlined copy of AccessibilityImageLabel(v31, v32, v15);
        a1[21] = v31;
        a1[22] = v32;
        a1[23] = v15;
        a1[24] = v33;
      }
      uint64_t v34 = a2[26];
      a1[25] = a2[25];
      a1[26] = v34;
      *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
      *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
      *((unsigned char *)a1 + 224) = *((unsigned char *)a2 + 224);
      uint64_t v35 = (void *)a2[29];
      a1[29] = v35;
      *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
      *((unsigned char *)a1 + 242) = *((unsigned char *)a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v36 = v35;
      uint64_t v23 = a2[32];
      if (v23) {
        goto LABEL_9;
      }
    }
    long long v37 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 31) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 33) = v37;
    *(_OWORD *)(a1 + 35) = *(_OWORD *)(a2 + 35);
    goto LABEL_20;
  }
  uint64_t v5 = *a2;
  *a1 = *a2;
  a1 = (void *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for TabContextMenuKey.Storage.Guts(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TabContextMenuKey.Storage.Guts);
}

void type metadata accessor for TabContextMenuKey.Storage?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t destroy for TabContextMenuKey.Storage(uint64_t a1)
{
  type metadata accessor for TabContextMenuKey.Storage.Guts(0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v2 = type metadata accessor for PlatformItemList.Item();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
    if (result) {
      return result;
    }

    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v4 = *(void *)(a1 + 184);
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v6 = *(unsigned __int8 *)(a1 + 72);
      if (v6 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(a1 + 64), v6);
        uint64_t v4 = *(void *)(a1 + 184);
        unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v5 != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(a1 + 168), *(void *)(a1 + 176), v4);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    if (*(void *)(a1 + 256))
    {
      swift_bridgeObjectRelease();
      uint64_t v7 = *(void **)(a1 + 264);
      if ((unint64_t)v7 >= 2) {

      }
      swift_release();
      swift_release();
    }
    unint64_t v8 = *(void *)(a1 + 328);
    if (v8 >> 2 != 0xFFFFFFFF) {
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(a1 + 296), *(void *)(a1 + 304), *(void *)(a1 + 312), *(void *)(a1 + 320), v8, *(void *)(a1 + 336), *(void *)(a1 + 344), *(void *)(a1 + 352), *(void *)(a1 + 360), *(void *)(a1 + 368), *(void *)(a1 + 376), *(void *)(a1 + 384), *(void *)(a1 + 392));
    }
    uint64_t v9 = *(void *)(a1 + 408);
    if (v9)
    {
      if (v9 == 1)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        if (*(void *)(a1 + 504)) {
          swift_release();
        }
        if (*(void *)(a1 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(void *)(a1 + 552) != 1)
        {
          swift_release();
          if (*(void *)(a1 + 560)) {
            swift_release();
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v10 = a1 + *(int *)(v2 + 112);
        uint64_t v11 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
        {
          uint64_t v12 = v10 + *(int *)(v11 + 20);
          outlined consume of Text.Storage(*(void *)v12, *(void *)(v12 + 8), *(unsigned char *)(v12 + 16));
          swift_bridgeObjectRelease();
          uint64_t v13 = v12 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          uint64_t v14 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
          if (*(void *)(v10 + *(int *)(v11 + 24))) {
            swift_release();
          }
        }
        goto LABEL_32;
      }
      swift_release();
    }
    if (*(void *)(a1 + 424)) {
      swift_release();
    }
    if (*(void *)(a1 + 440)) {
      swift_release();
    }
    goto LABEL_22;
  }
LABEL_32:

  return swift_release();
}

void *initializeWithCopy for TabContextMenuKey.Storage(void *a1, void *a2)
{
  type metadata accessor for TabContextMenuKey.Storage.Guts(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    swift_retain();
    goto LABEL_49;
  }
  uint64_t v4 = type metadata accessor for PlatformItemList.Item();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    type metadata accessor for TabContextMenuKey.Storage?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    goto LABEL_49;
  }
  uint64_t v92 = v5;
  uint64_t v7 = (void *)*a2;
  unint64_t v8 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v8;
  uint64_t v9 = a2[3];
  a1[2] = a2[2];
  a1[3] = v9;
  *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
  uint64_t v10 = a2[6];
  a1[5] = a2[5];
  a1[6] = v10;
  *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
  uint64_t v11 = a1 + 8;
  uint64_t v12 = a2 + 8;
  unint64_t v13 = a2[23];
  id v14 = v7;
  id v15 = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v13 >> 1 != 4294967294)
  {
    int v25 = *((unsigned __int8 *)a2 + 72);
    if (v25 == 255)
    {
      *uint64_t v11 = *v12;
      *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
    }
    else
    {
      uint64_t v26 = (void *)a2[8];
      outlined copy of GraphicsImage.Contents(v26, *((unsigned char *)a2 + 72));
      a1[8] = v26;
      *((unsigned char *)a1 + 72) = v25;
      unint64_t v13 = a2[23];
    }
    a1[10] = a2[10];
    *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
    *((unsigned char *)a1 + 104) = *((unsigned char *)a2 + 104);
    *(_OWORD *)((char *)a1 + 108) = *(_OWORD *)((char *)a2 + 108);
    *((unsigned char *)a1 + 124) = *((unsigned char *)a2 + 124);
    long long v27 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v27;
    *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
    *((unsigned char *)a1 + 162) = *((unsigned char *)a2 + 162);
    *((unsigned char *)a1 + 163) = *((unsigned char *)a2 + 163);
    if (v13 >> 1 == 0xFFFFFFFF)
    {
      long long v28 = *(_OWORD *)(a2 + 23);
      *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
      *(_OWORD *)(a1 + 23) = v28;
    }
    else
    {
      uint64_t v29 = a2[21];
      uint64_t v30 = a2[22];
      uint64_t v31 = a2[24];
      outlined copy of AccessibilityImageLabel(v29, v30, v13);
      a1[21] = v29;
      a1[22] = v30;
      a1[23] = v13;
      a1[24] = v31;
    }
    uint64_t v32 = a2[26];
    a1[25] = a2[25];
    a1[26] = v32;
    *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
    *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
    *((unsigned char *)a1 + 224) = *((unsigned char *)a2 + 224);
    uint64_t v33 = (void *)a2[29];
    a1[29] = v33;
    *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
    *((unsigned char *)a1 + 242) = *((unsigned char *)a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    id v34 = v33;
    uint64_t v21 = a2[32];
    if (v21) {
      goto LABEL_7;
    }
LABEL_17:
    long long v35 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 31) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 33) = v35;
    *(_OWORD *)(a1 + 35) = *(_OWORD *)(a2 + 35);
    goto LABEL_18;
  }
  long long v16 = *((_OWORD *)a2 + 13);
  *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
  *((_OWORD *)a1 + 13) = v16;
  *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
  *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
  long long v17 = *((_OWORD *)a2 + 9);
  *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)a1 + 9) = v17;
  long long v18 = *((_OWORD *)a2 + 11);
  *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
  *((_OWORD *)a1 + 11) = v18;
  long long v19 = *((_OWORD *)a2 + 5);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *((_OWORD *)a1 + 5) = v19;
  long long v20 = *((_OWORD *)a2 + 7);
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  *((_OWORD *)a1 + 7) = v20;
  uint64_t v21 = a2[32];
  if (!v21) {
    goto LABEL_17;
  }
LABEL_7:
  a1[31] = a2[31];
  a1[32] = v21;
  long long v22 = (void *)a2[33];
  swift_bridgeObjectRetain();
  if ((unint64_t)v22 >= 2) {
    id v23 = v22;
  }
  a1[33] = v22;
  *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
  *((unsigned char *)a1 + 276) = *((unsigned char *)a2 + 276);
  *(_WORD *)((char *)a1 + 277) = *(_WORD *)((char *)a2 + 277);
  uint64_t v24 = a2[36];
  a1[35] = a2[35];
  a1[36] = v24;
  swift_retain();
  swift_retain();
LABEL_18:
  unint64_t v36 = a2[41];
  uint64_t v98 = (int *)v4;
  if (v36 >> 2 == 0xFFFFFFFF)
  {
    long long v37 = *(_OWORD *)(a2 + 47);
    *(_OWORD *)(a1 + 45) = *(_OWORD *)(a2 + 45);
    *(_OWORD *)(a1 + 47) = v37;
    a1[49] = a2[49];
    long long v38 = *(_OWORD *)(a2 + 39);
    *(_OWORD *)(a1 + 37) = *(_OWORD *)(a2 + 37);
    *(_OWORD *)(a1 + 39) = v38;
    long long v39 = *(_OWORD *)(a2 + 43);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(a1 + 43) = v39;
  }
  else
  {
    long long v40 = (void *)a2[37];
    uint64_t v41 = a2[38];
    uint64_t v42 = a2[39];
    uint64_t v43 = a2[40];
    uint64_t v45 = a2[42];
    uint64_t v44 = a2[43];
    uint64_t v46 = a2[44];
    uint64_t v88 = a2[45];
    uint64_t v89 = a2[46];
    uint64_t v90 = a2[47];
    unint64_t __dsta = (void *)a2[48];
    uint64_t v95 = a2[49];
    outlined copy of PlatformItemList.Item.SystemItem(v40, v41, v42, v43, v36, v45, v44, v46, v88, v89, v90, (char)__dsta, v95);
    a1[37] = v40;
    a1[38] = v41;
    a1[39] = v42;
    a1[40] = v43;
    a1[41] = v36;
    a1[42] = v45;
    uint64_t v4 = (uint64_t)v98;
    a1[43] = v44;
    a1[44] = v46;
    a1[45] = v88;
    a1[46] = v89;
    a1[47] = v90;
    a1[48] = __dsta;
    a1[49] = v95;
  }
  uint64_t v47 = a2[51];
  if (v47 != 1)
  {
    *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
    *((unsigned char *)a1 + 404) = *((unsigned char *)a2 + 404);
    if (v47)
    {
      uint64_t v50 = a2[52];
      a1[51] = v47;
      a1[52] = v50;
      swift_retain();
      uint64_t v51 = a2[53];
      if (v51) {
        goto LABEL_25;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 51) = *(_OWORD *)(a2 + 51);
      uint64_t v51 = a2[53];
      if (v51)
      {
LABEL_25:
        uint64_t v52 = a2[54];
        a1[53] = v51;
        a1[54] = v52;
        swift_retain();
        uint64_t v53 = a2[55];
        if (v53)
        {
LABEL_26:
          uint64_t v54 = a2[56];
          a1[55] = v53;
          a1[56] = v54;
          swift_retain();
LABEL_30:
          a1[57] = a2[57];
          *((unsigned char *)a1 + 464) = *((unsigned char *)a2 + 464);
          goto LABEL_31;
        }
LABEL_29:
        *(_OWORD *)(a1 + 55) = *(_OWORD *)(a2 + 55);
        goto LABEL_30;
      }
    }
    *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
    uint64_t v53 = a2[55];
    if (v53) {
      goto LABEL_26;
    }
    goto LABEL_29;
  }
  long long v48 = *((_OWORD *)a2 + 28);
  *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
  *((_OWORD *)a1 + 28) = v48;
  *((unsigned char *)a1 + 464) = *((unsigned char *)a2 + 464);
  long long v49 = *((_OWORD *)a2 + 26);
  *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
  *((_OWORD *)a1 + 26) = v49;
LABEL_31:
  uint64_t v55 = a2[60];
  a1[59] = a2[59];
  a1[60] = v55;
  a1[61] = a2[61];
  *((unsigned char *)a1 + 496) = *((unsigned char *)a2 + 496);
  uint64_t v56 = a2[63];
  swift_bridgeObjectRetain();
  if (v56)
  {
    uint64_t v57 = a2[64];
    a1[63] = v56;
    a1[64] = v57;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 63) = *(_OWORD *)(a2 + 63);
  }
  *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
  uint64_t v58 = a2[66];
  if (v58)
  {
    a1[66] = v58;
    a1[67] = a2[67];
    a1[68] = a2[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
    a1[68] = a2[68];
  }
  uint64_t v59 = a2[69];
  if (v59 == 1)
  {
    *(_OWORD *)(a1 + 69) = *(_OWORD *)(a2 + 69);
    a1[71] = a2[71];
  }
  else
  {
    a1[69] = v59;
    uint64_t v60 = a2[70];
    swift_retain();
    if (v60)
    {
      uint64_t v61 = a2[71];
      a1[70] = v60;
      a1[71] = v61;
      swift_retain();
    }
    else
    {
      *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
    }
  }
  uint64_t v62 = (void *)a2[72];
  a1[72] = v62;
  a1[73] = a2[73];
  a1[74] = a2[74];
  a1[75] = a2[75];
  a1[76] = a2[76];
  a1[77] = a2[77];
  a1[78] = a2[78];
  *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
  *((unsigned char *)a1 + 634) = *((unsigned char *)a2 + 634);
  uint64_t v63 = *(int *)(v4 + 112);
  __dst = (char *)a1 + v63;
  uint64_t v64 = (char *)a2 + v63;
  uint64_t v65 = type metadata accessor for CommandOperation();
  uint64_t v91 = *(void *)(v65 - 8);
  uint64_t v96 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v91 + 48);
  id v66 = v62;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v96(v64, 1, v65))
  {
    type metadata accessor for TabContextMenuKey.Storage?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
    memcpy(__dst, v64, *(void *)(*(void *)(v67 - 8) + 64));
    uint64_t v68 = v92;
    uint64_t v69 = v98;
  }
  else
  {
    unsigned char *__dst = *v64;
    uint64_t v70 = *(int *)(v65 + 20);
    uint64_t v71 = &__dst[v70];
    uint64_t v72 = &v64[v70];
    uint64_t v97 = v64;
    uint64_t v73 = *(void *)&v64[v70];
    uint64_t v74 = *(void *)&v64[v70 + 8];
    uint64_t v75 = v65;
    char v76 = v72[16];
    outlined copy of Text.Storage(v73, v74, v76);
    *(void *)uint64_t v71 = v73;
    *((void *)v71 + 1) = v74;
    v71[16] = v76;
    *((void *)v71 + 3) = *((void *)v72 + 3);
    uint64_t v77 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    char v78 = &v71[v77];
    char v79 = &v72[v77];
    uint64_t v80 = type metadata accessor for UUID();
    uint64_t v81 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v80 - 8) + 16);
    swift_bridgeObjectRetain();
    v81(v78, v79, v80);
    uint64_t v82 = *(int *)(v75 + 24);
    uint64_t v83 = &__dst[v82];
    uint64_t v84 = &v97[v82];
    if (*v84)
    {
      uint64_t v85 = v84[1];
      *uint64_t v83 = *v84;
      v83[1] = v85;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
    }
    uint64_t v68 = v92;
    uint64_t v69 = v98;
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v91 + 56))(__dst, 0, 1, v75);
  }
  *((unsigned char *)a1 + v69[29]) = *((unsigned char *)a2 + v69[29]);
  *((unsigned char *)a1 + v69[30]) = *((unsigned char *)a2 + v69[30]);
  *((unsigned char *)a1 + v69[31]) = *((unsigned char *)a2 + v69[31]);
  *((unsigned char *)a1 + v69[32]) = *((unsigned char *)a2 + v69[32]);
  *(void *)((char *)a1 + v69[33]) = *(void *)((char *)a2 + v69[33]);
  id v86 = *(void (**)(void *, void, uint64_t, int *))(v68 + 56);
  swift_retain();
  v86(a1, 0, 1, v69);
LABEL_49:
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for TabContextMenuKey.Storage(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of TabContextMenuKey.Storage.Guts((uint64_t)a1, type metadata accessor for TabContextMenuKey.Storage.Guts);
    type metadata accessor for TabContextMenuKey.Storage.Guts(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_retain();
LABEL_51:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    uint64_t v4 = type metadata accessor for PlatformItemList.Item();
    uint64_t v5 = *(void *)(v4 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
    {
      type metadata accessor for TabContextMenuKey.Storage?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      goto LABEL_51;
    }
    uint64_t v108 = v5;
    uint64_t v7 = (void *)*a2;
    *a1 = *a2;
    unint64_t v8 = (void *)a2[1];
    a1[1] = v8;
    a1[2] = a2[2];
    a1[3] = a2[3];
    *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
    a1[5] = a2[5];
    a1[6] = a2[6];
    *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v9 = a1 + 8;
    uint64_t v10 = (id *)(a2 + 8);
    unint64_t v11 = a2[23];
    id v12 = v7;
    id v13 = v8;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v11 >> 1 == 4294967294)
    {
      long long v14 = *(_OWORD *)v10;
      long long v15 = *((_OWORD *)a2 + 5);
      long long v16 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v16;
      *uint64_t v9 = v14;
      *((_OWORD *)a1 + 5) = v15;
      long long v17 = *((_OWORD *)a2 + 8);
      long long v18 = *((_OWORD *)a2 + 9);
      long long v19 = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 11) = v19;
      *((_OWORD *)a1 + 8) = v17;
      *((_OWORD *)a1 + 9) = v18;
      long long v20 = *((_OWORD *)a2 + 12);
      long long v21 = *((_OWORD *)a2 + 13);
      long long v22 = *((_OWORD *)a2 + 14);
      *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
      *((_OWORD *)a1 + 13) = v21;
      *((_OWORD *)a1 + 14) = v22;
      *((_OWORD *)a1 + 12) = v20;
      if (a2[32])
      {
LABEL_8:
        a1[31] = a2[31];
        a1[32] = a2[32];
        id v23 = (void *)a2[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v23 >= 2) {
          id v24 = v23;
        }
        a1[33] = v23;
        int v25 = *((_DWORD *)a2 + 68);
        *((unsigned char *)a1 + 276) = *((unsigned char *)a2 + 276);
        *((_DWORD *)a1 + 68) = v25;
        *((unsigned char *)a1 + 277) = *((unsigned char *)a2 + 277);
        *((unsigned char *)a1 + 278) = *((unsigned char *)a2 + 278);
        a1[35] = a2[35];
        a1[36] = a2[36];
        swift_retain();
        swift_retain();
LABEL_19:
        unint64_t v42 = a2[41];
        uint64_t v109 = (int *)v4;
        if (v42 >> 2 == 0xFFFFFFFF)
        {
          long long v43 = *(_OWORD *)(a2 + 37);
          long long v44 = *(_OWORD *)(a2 + 41);
          *(_OWORD *)(a1 + 39) = *(_OWORD *)(a2 + 39);
          *(_OWORD *)(a1 + 41) = v44;
          *(_OWORD *)(a1 + 37) = v43;
          long long v45 = *(_OWORD *)(a2 + 43);
          long long v46 = *(_OWORD *)(a2 + 45);
          long long v47 = *(_OWORD *)(a2 + 47);
          a1[49] = a2[49];
          *(_OWORD *)(a1 + 45) = v46;
          *(_OWORD *)(a1 + 47) = v47;
          *(_OWORD *)(a1 + 43) = v45;
        }
        else
        {
          long long v48 = (void *)a2[37];
          uint64_t v49 = a2[38];
          uint64_t v50 = a2[39];
          uint64_t v51 = a2[40];
          uint64_t v53 = a2[42];
          uint64_t v52 = a2[43];
          uint64_t v54 = a2[44];
          uint64_t v99 = a2[45];
          uint64_t v100 = a2[46];
          uint64_t v101 = a2[47];
          uint64_t v103 = a2[48];
          unint64_t __dsta = (void *)a2[49];
          outlined copy of PlatformItemList.Item.SystemItem(v48, v49, v50, v51, v42, v53, v52, v54, v99, v100, v101, v103, (uint64_t)__dsta);
          a1[37] = v48;
          a1[38] = v49;
          a1[39] = v50;
          a1[40] = v51;
          a1[41] = v42;
          a1[42] = v53;
          uint64_t v4 = (uint64_t)v109;
          a1[43] = v52;
          a1[44] = v54;
          a1[45] = v99;
          a1[46] = v100;
          a1[47] = v101;
          a1[48] = v103;
          a1[49] = __dsta;
        }
        if (a2[51] == 1)
        {
          *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
          long long v55 = *((_OWORD *)a2 + 26);
          long long v56 = *((_OWORD *)a2 + 27);
          long long v57 = *((_OWORD *)a2 + 28);
          *((unsigned char *)a1 + 464) = *((unsigned char *)a2 + 464);
          *((_OWORD *)a1 + 27) = v56;
          *((_OWORD *)a1 + 28) = v57;
          *((_OWORD *)a1 + 26) = v55;
          goto LABEL_32;
        }
        *((unsigned char *)a1 + 400) = *((unsigned char *)a2 + 400);
        *((unsigned char *)a1 + 401) = *((unsigned char *)a2 + 401);
        *((unsigned char *)a1 + 402) = *((unsigned char *)a2 + 402);
        *((unsigned char *)a1 + 403) = *((unsigned char *)a2 + 403);
        *((unsigned char *)a1 + 404) = *((unsigned char *)a2 + 404);
        uint64_t v58 = a2[51];
        if (v58)
        {
          uint64_t v59 = a2[52];
          a1[51] = v58;
          a1[52] = v59;
          swift_retain();
          uint64_t v60 = a2[53];
          if (v60) {
            goto LABEL_26;
          }
        }
        else
        {
          *(_OWORD *)(a1 + 51) = *(_OWORD *)(a2 + 51);
          uint64_t v60 = a2[53];
          if (v60)
          {
LABEL_26:
            uint64_t v61 = a2[54];
            a1[53] = v60;
            a1[54] = v61;
            swift_retain();
            uint64_t v62 = a2[55];
            if (v62)
            {
LABEL_27:
              uint64_t v63 = a2[56];
              a1[55] = v62;
              a1[56] = v63;
              swift_retain();
LABEL_31:
              a1[57] = a2[57];
              *((unsigned char *)a1 + 464) = *((unsigned char *)a2 + 464);
LABEL_32:
              a1[59] = a2[59];
              a1[60] = a2[60];
              a1[61] = a2[61];
              *((unsigned char *)a1 + 496) = *((unsigned char *)a2 + 496);
              uint64_t v64 = a2[63];
              swift_bridgeObjectRetain();
              if (v64)
              {
                uint64_t v65 = a2[64];
                a1[63] = v64;
                a1[64] = v65;
                swift_retain();
              }
              else
              {
                *(_OWORD *)(a1 + 63) = *(_OWORD *)(a2 + 63);
              }
              *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
              uint64_t v66 = a2[66];
              if (v66)
              {
                a1[66] = v66;
                a1[67] = a2[67];
                a1[68] = a2[68];
                swift_bridgeObjectRetain();
                swift_retain();
                swift_retain();
              }
              else
              {
                long long v67 = *((_OWORD *)a2 + 33);
                a1[68] = a2[68];
                *((_OWORD *)a1 + 33) = v67;
              }
              uint64_t v68 = a2[69];
              if (v68 == 1)
              {
                uint64_t v69 = a1 + 69;
                long long v70 = *(_OWORD *)(a2 + 69);
                a1[71] = a2[71];
              }
              else
              {
                a1[69] = v68;
                uint64_t v71 = a2[70];
                swift_retain();
                if (v71)
                {
                  uint64_t v72 = a2[71];
                  a1[70] = v71;
                  a1[71] = v72;
                  swift_retain();
LABEL_44:
                  uint64_t v73 = (void *)a2[72];
                  a1[72] = v73;
                  a1[73] = a2[73];
                  a1[74] = a2[74];
                  a1[75] = a2[75];
                  a1[76] = a2[76];
                  a1[77] = a2[77];
                  a1[78] = a2[78];
                  *((unsigned char *)a1 + 632) = *((unsigned char *)a2 + 632);
                  *((unsigned char *)a1 + 633) = *((unsigned char *)a2 + 633);
                  *((unsigned char *)a1 + 634) = *((unsigned char *)a2 + 634);
                  uint64_t v74 = *(int *)(v4 + 112);
                  __dst = (char *)a1 + v74;
                  uint64_t v75 = (char *)a2 + v74;
                  uint64_t v76 = type metadata accessor for CommandOperation();
                  uint64_t v102 = *(void *)(v76 - 8);
                  long long v104 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v102 + 48);
                  id v77 = v73;
                  char v78 = v75;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v104(v75, 1, v76))
                  {
                    type metadata accessor for TabContextMenuKey.Storage?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
                    memcpy(__dst, v75, *(void *)(*(void *)(v79 - 8) + 64));
                    uint64_t v80 = v109;
                  }
                  else
                  {
                    unsigned char *__dst = *v75;
                    uint64_t v81 = *(int *)(v76 + 20);
                    uint64_t v82 = v76;
                    uint64_t v83 = &__dst[v81];
                    uint64_t v84 = &v78[v81];
                    uint64_t v105 = v78;
                    uint64_t v85 = *(void *)&v78[v81];
                    uint64_t v86 = *((void *)v84 + 1);
                    char v87 = v84[16];
                    outlined copy of Text.Storage(v85, v86, v87);
                    *(void *)uint64_t v83 = v85;
                    *((void *)v83 + 1) = v86;
                    v83[16] = v87;
                    *((void *)v83 + 3) = *((void *)v84 + 3);
                    uint64_t v88 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    uint64_t v89 = &v83[v88];
                    uint64_t v90 = &v84[v88];
                    uint64_t v91 = type metadata accessor for UUID();
                    uint64_t v92 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v91 - 8) + 16);
                    swift_bridgeObjectRetain();
                    v92(v89, v90, v91);
                    uint64_t v93 = *(int *)(v82 + 24);
                    uint64_t v94 = &__dst[v93];
                    uint64_t v95 = &v105[v93];
                    if (*v95)
                    {
                      uint64_t v96 = v95[1];
                      *uint64_t v94 = *v95;
                      v94[1] = v96;
                      swift_retain();
                    }
                    else
                    {
                      *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
                    }
                    uint64_t v80 = v109;
                    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v102 + 56))(__dst, 0, 1, v82);
                  }
                  *((unsigned char *)a1 + v80[29]) = *((unsigned char *)a2 + v80[29]);
                  *((unsigned char *)a1 + v80[30]) = *((unsigned char *)a2 + v80[30]);
                  *((unsigned char *)a1 + v80[31]) = *((unsigned char *)a2 + v80[31]);
                  *((unsigned char *)a1 + v80[32]) = *((unsigned char *)a2 + v80[32]);
                  *(void *)((char *)a1 + v80[33]) = *(void *)((char *)a2 + v80[33]);
                  uint64_t v97 = *(void (**)(void *, void, uint64_t, int *))(v108 + 56);
                  swift_retain();
                  v97(a1, 0, 1, v80);
                  goto LABEL_51;
                }
                uint64_t v69 = a1 + 70;
                long long v70 = *((_OWORD *)a2 + 35);
              }
              _OWORD *v69 = v70;
              goto LABEL_44;
            }
LABEL_30:
            *(_OWORD *)(a1 + 55) = *(_OWORD *)(a2 + 55);
            goto LABEL_31;
          }
        }
        *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
        uint64_t v62 = a2[55];
        if (v62) {
          goto LABEL_27;
        }
        goto LABEL_30;
      }
    }
    else
    {
      int v26 = *((unsigned __int8 *)a2 + 72);
      if (v26 == 255)
      {
        id v28 = *v10;
        *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
        *(void *)uint64_t v9 = v28;
      }
      else
      {
        id v27 = *v10;
        outlined copy of GraphicsImage.Contents(*v10, *((unsigned char *)a2 + 72));
        a1[8] = v27;
        *((unsigned char *)a1 + 72) = v26;
      }
      a1[10] = a2[10];
      *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
      *((unsigned char *)a1 + 104) = *((unsigned char *)a2 + 104);
      long long v29 = *(_OWORD *)((char *)a2 + 108);
      *((unsigned char *)a1 + 124) = *((unsigned char *)a2 + 124);
      *(_OWORD *)((char *)a1 + 108) = v29;
      long long v30 = *((_OWORD *)a2 + 8);
      long long v31 = *((_OWORD *)a2 + 9);
      *((unsigned char *)a1 + 160) = *((unsigned char *)a2 + 160);
      *((_OWORD *)a1 + 8) = v30;
      *((_OWORD *)a1 + 9) = v31;
      *((unsigned char *)a1 + 161) = *((unsigned char *)a2 + 161);
      *((unsigned char *)a1 + 162) = *((unsigned char *)a2 + 162);
      *((unsigned char *)a1 + 163) = *((unsigned char *)a2 + 163);
      unint64_t v32 = a2[23];
      if (v32 >> 1 == 0xFFFFFFFF)
      {
        long long v33 = *(_OWORD *)(a2 + 23);
        *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
        *(_OWORD *)(a1 + 23) = v33;
      }
      else
      {
        uint64_t v34 = a2[21];
        uint64_t v35 = a2[22];
        uint64_t v36 = a2[24];
        outlined copy of AccessibilityImageLabel(v34, v35, a2[23]);
        a1[21] = v34;
        a1[22] = v35;
        a1[23] = v32;
        a1[24] = v36;
      }
      a1[25] = a2[25];
      a1[26] = a2[26];
      *((unsigned char *)a1 + 216) = *((unsigned char *)a2 + 216);
      *((unsigned char *)a1 + 217) = *((unsigned char *)a2 + 217);
      int v37 = *((_DWORD *)a2 + 55);
      *((unsigned char *)a1 + 224) = *((unsigned char *)a2 + 224);
      *((_DWORD *)a1 + 55) = v37;
      long long v38 = (void *)a2[29];
      a1[29] = v38;
      *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
      *((unsigned char *)a1 + 242) = *((unsigned char *)a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v39 = v38;
      if (a2[32]) {
        goto LABEL_8;
      }
    }
    long long v40 = *(_OWORD *)(a2 + 31);
    long long v41 = *(_OWORD *)(a2 + 35);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 35) = v41;
    *(_OWORD *)(a1 + 31) = v40;
    goto LABEL_19;
  }
  return a1;
}

_OWORD *initializeWithTake for TabContextMenuKey.Storage(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4 = type metadata accessor for TabContextMenuKey.Storage.Guts(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  else
  {
    uint64_t v5 = (int *)type metadata accessor for PlatformItemList.Item();
    uint64_t v6 = *((void *)v5 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v6 + 48))(a2, 1, v5))
    {
      type metadata accessor for TabContextMenuKey.Storage?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      long long v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
      uint64_t v9 = *((void *)a2 + 6);
      *((void *)a1 + 5) = *((void *)a2 + 5);
      *((void *)a1 + 6) = v9;
      *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
      long long v10 = a2[13];
      a1[12] = a2[12];
      a1[13] = v10;
      a1[14] = a2[14];
      *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
      long long v11 = a2[9];
      a1[8] = a2[8];
      a1[9] = v11;
      long long v12 = a2[11];
      a1[10] = a2[10];
      a1[11] = v12;
      long long v13 = a2[5];
      a1[4] = a2[4];
      a1[5] = v13;
      long long v14 = a2[7];
      a1[6] = a2[6];
      a1[7] = v14;
      *(_OWORD *)((char *)a1 + 248) = *(_OWORD *)((char *)a2 + 248);
      long long v15 = *(_OWORD *)((char *)a2 + 280);
      *(_OWORD *)((char *)a1 + 264) = *(_OWORD *)((char *)a2 + 264);
      *(_OWORD *)((char *)a1 + 280) = v15;
      long long v16 = *(_OWORD *)((char *)a2 + 376);
      *(_OWORD *)((char *)a1 + 360) = *(_OWORD *)((char *)a2 + 360);
      *(_OWORD *)((char *)a1 + 376) = v16;
      *((void *)a1 + 49) = *((void *)a2 + 49);
      long long v17 = *(_OWORD *)((char *)a2 + 312);
      *(_OWORD *)((char *)a1 + 296) = *(_OWORD *)((char *)a2 + 296);
      *(_OWORD *)((char *)a1 + 312) = v17;
      long long v18 = *(_OWORD *)((char *)a2 + 344);
      *(_OWORD *)((char *)a1 + 328) = *(_OWORD *)((char *)a2 + 328);
      *(_OWORD *)((char *)a1 + 344) = v18;
      long long v19 = a2[28];
      a1[27] = a2[27];
      a1[28] = v19;
      *((unsigned char *)a1 + 464) = *((unsigned char *)a2 + 464);
      long long v20 = a2[26];
      a1[25] = a2[25];
      a1[26] = v20;
      *(_OWORD *)((char *)a1 + 472) = *(_OWORD *)((char *)a2 + 472);
      *(_OWORD *)((char *)a1 + 481) = *(_OWORD *)((char *)a2 + 481);
      uint64_t v21 = *((void *)a2 + 63);
      if (v21)
      {
        uint64_t v22 = *((void *)a2 + 64);
        *((void *)a1 + 63) = v21;
        *((void *)a1 + 64) = v22;
      }
      else
      {
        *(_OWORD *)((char *)a1 + 504) = *(_OWORD *)((char *)a2 + 504);
      }
      *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
      a1[33] = a2[33];
      *((void *)a1 + 68) = *((void *)a2 + 68);
      *((void *)a1 + 71) = *((void *)a2 + 71);
      *(_OWORD *)((char *)a1 + 552) = *(_OWORD *)((char *)a2 + 552);
      *((void *)a1 + 72) = *((void *)a2 + 72);
      *(_OWORD *)((char *)a1 + 584) = *(_OWORD *)((char *)a2 + 584);
      *(_OWORD *)((char *)a1 + 600) = *(_OWORD *)((char *)a2 + 600);
      *((void *)a1 + 77) = *((void *)a2 + 77);
      *((void *)a1 + 78) = *((void *)a2 + 78);
      *((unsigned char *)a1 + 632) = *((unsigned char *)a2 + 632);
      *(_WORD *)((char *)a1 + 633) = *(_WORD *)((char *)a2 + 633);
      uint64_t v23 = v5[28];
      id v24 = (char *)a1 + v23;
      int v25 = (char *)a2 + v23;
      uint64_t v26 = type metadata accessor for CommandOperation();
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        type metadata accessor for TabContextMenuKey.Storage?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
        memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        uint64_t v43 = v6;
        *id v24 = *v25;
        uint64_t v29 = *(int *)(v26 + 20);
        long long v30 = &v24[v29];
        long long v31 = &v25[v29];
        long long v32 = *(_OWORD *)&v25[v29 + 16];
        *long long v30 = *(_OWORD *)&v25[v29];
        v30[1] = v32;
        uint64_t v33 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        uint64_t v34 = (char *)v30 + v33;
        uint64_t v35 = &v31[v33];
        uint64_t v36 = type metadata accessor for UUID();
        (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v36 - 8) + 32))(v34, v35, v36);
        uint64_t v37 = *(int *)(v26 + 24);
        long long v38 = &v24[v37];
        id v39 = (uint64_t *)&v25[v37];
        uint64_t v40 = *v39;
        if (*v39)
        {
          uint64_t v41 = v39[1];
          void *v38 = v40;
          v38[1] = v41;
        }
        else
        {
          *(_OWORD *)long long v38 = *(_OWORD *)v39;
        }
        uint64_t v6 = v43;
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      *((unsigned char *)a1 + v5[29]) = *((unsigned char *)a2 + v5[29]);
      *((unsigned char *)a1 + v5[30]) = *((unsigned char *)a2 + v5[30]);
      *((unsigned char *)a1 + v5[31]) = *((unsigned char *)a2 + v5[31]);
      *((unsigned char *)a1 + v5[32]) = *((unsigned char *)a2 + v5[32]);
      *(void *)((char *)a1 + v5[33]) = *(void *)((char *)a2 + v5[33]);
      (*(void (**)(_OWORD *, void, uint64_t, int *))(v6 + 56))(a1, 0, 1, v5);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *assignWithTake for TabContextMenuKey.Storage(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of TabContextMenuKey.Storage.Guts((uint64_t)a1, type metadata accessor for TabContextMenuKey.Storage.Guts);
    uint64_t v4 = type metadata accessor for TabContextMenuKey.Storage.Guts(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
    else
    {
      uint64_t v5 = (int *)type metadata accessor for PlatformItemList.Item();
      uint64_t v6 = *((void *)v5 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v6 + 48))(a2, 1, v5))
      {
        type metadata accessor for TabContextMenuKey.Storage?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        long long v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
        uint64_t v9 = *((void *)a2 + 6);
        *((void *)a1 + 5) = *((void *)a2 + 5);
        *((void *)a1 + 6) = v9;
        *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
        long long v10 = a2[13];
        a1[12] = a2[12];
        a1[13] = v10;
        a1[14] = a2[14];
        *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
        long long v11 = a2[9];
        a1[8] = a2[8];
        a1[9] = v11;
        long long v12 = a2[11];
        a1[10] = a2[10];
        a1[11] = v12;
        long long v13 = a2[5];
        a1[4] = a2[4];
        a1[5] = v13;
        long long v14 = a2[7];
        a1[6] = a2[6];
        a1[7] = v14;
        *(_OWORD *)((char *)a1 + 248) = *(_OWORD *)((char *)a2 + 248);
        long long v15 = *(_OWORD *)((char *)a2 + 280);
        *(_OWORD *)((char *)a1 + 264) = *(_OWORD *)((char *)a2 + 264);
        *(_OWORD *)((char *)a1 + 280) = v15;
        long long v16 = *(_OWORD *)((char *)a2 + 376);
        *(_OWORD *)((char *)a1 + 360) = *(_OWORD *)((char *)a2 + 360);
        *(_OWORD *)((char *)a1 + 376) = v16;
        *((void *)a1 + 49) = *((void *)a2 + 49);
        long long v17 = *(_OWORD *)((char *)a2 + 312);
        *(_OWORD *)((char *)a1 + 296) = *(_OWORD *)((char *)a2 + 296);
        *(_OWORD *)((char *)a1 + 312) = v17;
        long long v18 = *(_OWORD *)((char *)a2 + 344);
        *(_OWORD *)((char *)a1 + 328) = *(_OWORD *)((char *)a2 + 328);
        *(_OWORD *)((char *)a1 + 344) = v18;
        long long v19 = a2[28];
        a1[27] = a2[27];
        a1[28] = v19;
        *((unsigned char *)a1 + 464) = *((unsigned char *)a2 + 464);
        long long v20 = a2[26];
        a1[25] = a2[25];
        a1[26] = v20;
        *(_OWORD *)((char *)a1 + 472) = *(_OWORD *)((char *)a2 + 472);
        *(_OWORD *)((char *)a1 + 481) = *(_OWORD *)((char *)a2 + 481);
        uint64_t v21 = *((void *)a2 + 63);
        if (v21)
        {
          uint64_t v22 = *((void *)a2 + 64);
          *((void *)a1 + 63) = v21;
          *((void *)a1 + 64) = v22;
        }
        else
        {
          *(_OWORD *)((char *)a1 + 504) = *(_OWORD *)((char *)a2 + 504);
        }
        *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
        a1[33] = a2[33];
        *((void *)a1 + 68) = *((void *)a2 + 68);
        *((void *)a1 + 71) = *((void *)a2 + 71);
        *(_OWORD *)((char *)a1 + 552) = *(_OWORD *)((char *)a2 + 552);
        *((void *)a1 + 72) = *((void *)a2 + 72);
        *(_OWORD *)((char *)a1 + 584) = *(_OWORD *)((char *)a2 + 584);
        *(_OWORD *)((char *)a1 + 600) = *(_OWORD *)((char *)a2 + 600);
        *((void *)a1 + 77) = *((void *)a2 + 77);
        *((void *)a1 + 78) = *((void *)a2 + 78);
        *((unsigned char *)a1 + 632) = *((unsigned char *)a2 + 632);
        *(_WORD *)((char *)a1 + 633) = *(_WORD *)((char *)a2 + 633);
        uint64_t v23 = v5[28];
        id v24 = (char *)a1 + v23;
        int v25 = (char *)a2 + v23;
        uint64_t v26 = type metadata accessor for CommandOperation();
        uint64_t v27 = *(void *)(v26 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          type metadata accessor for TabContextMenuKey.Storage?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
          memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          uint64_t v43 = v6;
          *id v24 = *v25;
          uint64_t v29 = *(int *)(v26 + 20);
          long long v30 = &v24[v29];
          long long v31 = &v25[v29];
          long long v32 = *(_OWORD *)&v25[v29 + 16];
          *long long v30 = *(_OWORD *)&v25[v29];
          v30[1] = v32;
          uint64_t v33 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          uint64_t v34 = (char *)v30 + v33;
          uint64_t v35 = &v31[v33];
          uint64_t v36 = type metadata accessor for UUID();
          (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v36 - 8) + 32))(v34, v35, v36);
          uint64_t v37 = *(int *)(v26 + 24);
          long long v38 = &v24[v37];
          id v39 = (uint64_t *)&v25[v37];
          uint64_t v40 = *v39;
          if (*v39)
          {
            uint64_t v41 = v39[1];
            void *v38 = v40;
            v38[1] = v41;
          }
          else
          {
            *(_OWORD *)long long v38 = *(_OWORD *)v39;
          }
          uint64_t v6 = v43;
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        }
        *((unsigned char *)a1 + v5[29]) = *((unsigned char *)a2 + v5[29]);
        *((unsigned char *)a1 + v5[30]) = *((unsigned char *)a2 + v5[30]);
        *((unsigned char *)a1 + v5[31]) = *((unsigned char *)a2 + v5[31]);
        *((unsigned char *)a1 + v5[32]) = *((unsigned char *)a2 + v5[32]);
        *(void *)((char *)a1 + v5[33]) = *(void *)((char *)a2 + v5[33]);
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v6 + 56))(a1, 0, 1, v5);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TabContextMenuKey.Storage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187EE1FF4);
}

uint64_t sub_187EE1FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TabContextMenuKey.Storage.Guts(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TabContextMenuKey.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187EE2074);
}

uint64_t sub_187EE2074(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TabContextMenuKey.Storage.Guts(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for TabContextMenuKey.Storage()
{
  uint64_t result = type metadata accessor for TabContextMenuKey.Storage.Guts(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for TabContextMenuKey.Storage.Guts(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_retain();
LABEL_51:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    uint64_t v7 = type metadata accessor for PlatformItemList.Item();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      type metadata accessor for TabContextMenuKey.Storage?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      goto LABEL_51;
    }
    uint64_t v96 = v8;
    uint64_t v100 = (int *)v7;
    long long v10 = (void *)*a2;
    long long v11 = (void *)a2[1];
    *a1 = *a2;
    a1[1] = v11;
    uint64_t v12 = a2[3];
    a1[2] = a2[2];
    a1[3] = v12;
    *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
    uint64_t v13 = a2[6];
    a1[5] = a2[5];
    a1[6] = v13;
    *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
    long long v14 = a1 + 8;
    long long v15 = a2 + 8;
    unint64_t v16 = a2[23];
    id v17 = v10;
    id v18 = v11;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v16 >> 1 == 4294967294)
    {
      long long v19 = *((_OWORD *)a2 + 13);
      *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
      *((_OWORD *)a1 + 13) = v19;
      *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
      *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
      long long v20 = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 9) = v20;
      long long v21 = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 11) = v21;
      long long v22 = *((_OWORD *)a2 + 5);
      *long long v14 = *v15;
      *((_OWORD *)a1 + 5) = v22;
      long long v23 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v23;
      uint64_t v24 = a2[32];
      if (v24)
      {
LABEL_9:
        a1[31] = a2[31];
        a1[32] = v24;
        int v25 = (void *)a2[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v25 >= 2) {
          id v26 = v25;
        }
        a1[33] = v25;
        *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
        *((unsigned char *)a1 + 276) = *((unsigned char *)a2 + 276);
        *(_WORD *)((char *)a1 + 277) = *(_WORD *)((char *)a2 + 277);
        uint64_t v27 = a2[36];
        a1[35] = a2[35];
        a1[36] = v27;
        swift_retain();
        swift_retain();
LABEL_20:
        unint64_t v39 = a2[41];
        if (v39 >> 2 == 0xFFFFFFFF)
        {
          long long v40 = *(_OWORD *)(a2 + 47);
          *(_OWORD *)(a1 + 45) = *(_OWORD *)(a2 + 45);
          *(_OWORD *)(a1 + 47) = v40;
          a1[49] = a2[49];
          long long v41 = *(_OWORD *)(a2 + 39);
          *(_OWORD *)(a1 + 37) = *(_OWORD *)(a2 + 37);
          *(_OWORD *)(a1 + 39) = v41;
          long long v42 = *(_OWORD *)(a2 + 43);
          *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
          *(_OWORD *)(a1 + 43) = v42;
        }
        else
        {
          uint64_t v43 = (void *)a2[37];
          uint64_t v44 = a2[38];
          uint64_t v45 = a2[39];
          uint64_t v46 = a2[42];
          uint64_t v47 = a2[43];
          uint64_t v48 = a2[44];
          uint64_t v89 = a2[40];
          uint64_t v90 = a2[45];
          uint64_t v91 = a2[46];
          uint64_t v92 = a2[47];
          unint64_t __dsta = (void *)a2[48];
          uint64_t v97 = a2[49];
          outlined copy of PlatformItemList.Item.SystemItem(v43, v44, v45, v89, v39, v46, v47, v48, v90, v91, v92, (char)__dsta, v97);
          a1[37] = v43;
          a1[38] = v44;
          a1[39] = v45;
          a1[40] = v89;
          a1[41] = v39;
          a1[42] = v46;
          a1[43] = v47;
          a1[44] = v48;
          a1[45] = v90;
          a1[46] = v91;
          a1[47] = v92;
          a1[48] = __dsta;
          a1[49] = v97;
        }
        uint64_t v49 = a2[51];
        if (v49 == 1)
        {
          long long v50 = *((_OWORD *)a2 + 28);
          *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
          *((_OWORD *)a1 + 28) = v50;
          *((unsigned char *)a1 + 464) = *((unsigned char *)a2 + 464);
          long long v51 = *((_OWORD *)a2 + 26);
          *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
          *((_OWORD *)a1 + 26) = v51;
LABEL_33:
          uint64_t v57 = a2[60];
          a1[59] = a2[59];
          a1[60] = v57;
          a1[61] = a2[61];
          *((unsigned char *)a1 + 496) = *((unsigned char *)a2 + 496);
          uint64_t v58 = a2[63];
          swift_bridgeObjectRetain();
          if (v58)
          {
            uint64_t v59 = a2[64];
            a1[63] = v58;
            a1[64] = v59;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(a1 + 63) = *(_OWORD *)(a2 + 63);
          }
          *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
          uint64_t v60 = a2[66];
          if (v60)
          {
            a1[66] = v60;
            a1[67] = a2[67];
            a1[68] = a2[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
            a1[68] = a2[68];
          }
          uint64_t v61 = a2[69];
          if (v61 == 1)
          {
            *(_OWORD *)(a1 + 69) = *(_OWORD *)(a2 + 69);
            a1[71] = a2[71];
          }
          else
          {
            a1[69] = v61;
            uint64_t v62 = a2[70];
            swift_retain();
            if (v62)
            {
              uint64_t v63 = a2[71];
              a1[70] = v62;
              a1[71] = v63;
              swift_retain();
            }
            else
            {
              *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
            }
          }
          uint64_t v64 = (void *)a2[72];
          a1[72] = v64;
          a1[73] = a2[73];
          a1[74] = a2[74];
          a1[75] = a2[75];
          a1[76] = a2[76];
          a1[77] = a2[77];
          a1[78] = a2[78];
          *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
          *((unsigned char *)a1 + 634) = *((unsigned char *)a2 + 634);
          uint64_t v65 = v100[28];
          __dst = (char *)a1 + v65;
          uint64_t v66 = (char *)a2 + v65;
          uint64_t v67 = type metadata accessor for CommandOperation();
          uint64_t v93 = *(void *)(v67 - 8);
          uint64_t v98 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v93 + 48);
          id v68 = v64;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v98(v66, 1, v67))
          {
            type metadata accessor for TabContextMenuKey.Storage?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
            memcpy(__dst, v66, *(void *)(*(void *)(v69 - 8) + 64));
            long long v70 = v100;
            uint64_t v71 = v96;
          }
          else
          {
            unsigned char *__dst = *v66;
            uint64_t v72 = *(int *)(v67 + 20);
            uint64_t v73 = &__dst[v72];
            uint64_t v74 = &v66[v72];
            uint64_t v99 = v67;
            uint64_t v75 = *(void *)&v66[v72];
            uint64_t v76 = *(void *)&v66[v72 + 8];
            char v77 = v66[v72 + 16];
            outlined copy of Text.Storage(v75, v76, v77);
            *(void *)uint64_t v73 = v75;
            *((void *)v73 + 1) = v76;
            v73[16] = v77;
            *((void *)v73 + 3) = *((void *)v74 + 3);
            uint64_t v78 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            uint64_t v79 = &v73[v78];
            uint64_t v80 = &v74[v78];
            uint64_t v81 = type metadata accessor for UUID();
            uint64_t v82 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v81 - 8) + 16);
            swift_bridgeObjectRetain();
            v82(v79, v80, v81);
            uint64_t v83 = *(int *)(v99 + 24);
            uint64_t v84 = &__dst[v83];
            uint64_t v85 = &v66[v83];
            if (*v85)
            {
              uint64_t v86 = v85[1];
              void *v84 = *v85;
              v84[1] = v86;
              swift_retain();
            }
            else
            {
              *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
            }
            long long v70 = v100;
            uint64_t v71 = v96;
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v93 + 56))(__dst, 0, 1, v99);
          }
          *((unsigned char *)a1 + v70[29]) = *((unsigned char *)a2 + v70[29]);
          *((unsigned char *)a1 + v70[30]) = *((unsigned char *)a2 + v70[30]);
          *((unsigned char *)a1 + v70[31]) = *((unsigned char *)a2 + v70[31]);
          *((unsigned char *)a1 + v70[32]) = *((unsigned char *)a2 + v70[32]);
          *(void *)((char *)a1 + v70[33]) = *(void *)((char *)a2 + v70[33]);
          char v87 = *(void (**)(void *, void, uint64_t, int *))(v71 + 56);
          swift_retain();
          v87(a1, 0, 1, v70);
          goto LABEL_51;
        }
        *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
        *((unsigned char *)a1 + 404) = *((unsigned char *)a2 + 404);
        if (v49)
        {
          uint64_t v52 = a2[52];
          a1[51] = v49;
          a1[52] = v52;
          swift_retain();
          uint64_t v53 = a2[53];
          if (v53) {
            goto LABEL_27;
          }
        }
        else
        {
          *(_OWORD *)(a1 + 51) = *(_OWORD *)(a2 + 51);
          uint64_t v53 = a2[53];
          if (v53)
          {
LABEL_27:
            uint64_t v54 = a2[54];
            a1[53] = v53;
            a1[54] = v54;
            swift_retain();
            uint64_t v55 = a2[55];
            if (v55)
            {
LABEL_28:
              uint64_t v56 = a2[56];
              a1[55] = v55;
              a1[56] = v56;
              swift_retain();
LABEL_32:
              a1[57] = a2[57];
              *((unsigned char *)a1 + 464) = *((unsigned char *)a2 + 464);
              goto LABEL_33;
            }
LABEL_31:
            *(_OWORD *)(a1 + 55) = *(_OWORD *)(a2 + 55);
            goto LABEL_32;
          }
        }
        *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
        uint64_t v55 = a2[55];
        if (v55) {
          goto LABEL_28;
        }
        goto LABEL_31;
      }
    }
    else
    {
      int v28 = *((unsigned __int8 *)a2 + 72);
      if (v28 == 255)
      {
        *(void *)long long v14 = *(void *)v15;
        *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
      }
      else
      {
        uint64_t v29 = (void *)a2[8];
        outlined copy of GraphicsImage.Contents(v29, *((unsigned char *)a2 + 72));
        a1[8] = v29;
        *((unsigned char *)a1 + 72) = v28;
        unint64_t v16 = a2[23];
      }
      a1[10] = a2[10];
      *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
      *((unsigned char *)a1 + 104) = *((unsigned char *)a2 + 104);
      *(_OWORD *)((char *)a1 + 108) = *(_OWORD *)((char *)a2 + 108);
      *((unsigned char *)a1 + 124) = *((unsigned char *)a2 + 124);
      long long v30 = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 9) = v30;
      *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
      *((unsigned char *)a1 + 162) = *((unsigned char *)a2 + 162);
      *((unsigned char *)a1 + 163) = *((unsigned char *)a2 + 163);
      if (v16 >> 1 == 0xFFFFFFFF)
      {
        long long v31 = *(_OWORD *)(a2 + 23);
        *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
        *(_OWORD *)(a1 + 23) = v31;
      }
      else
      {
        uint64_t v32 = a2[21];
        uint64_t v33 = a2[22];
        uint64_t v34 = a2[24];
        outlined copy of AccessibilityImageLabel(v32, v33, v16);
        a1[21] = v32;
        a1[22] = v33;
        a1[23] = v16;
        a1[24] = v34;
      }
      uint64_t v35 = a2[26];
      a1[25] = a2[25];
      a1[26] = v35;
      *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
      *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
      *((unsigned char *)a1 + 224) = *((unsigned char *)a2 + 224);
      uint64_t v36 = (void *)a2[29];
      a1[29] = v36;
      *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
      *((unsigned char *)a1 + 242) = *((unsigned char *)a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v37 = v36;
      uint64_t v24 = a2[32];
      if (v24) {
        goto LABEL_9;
      }
    }
    long long v38 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 31) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 33) = v38;
    *(_OWORD *)(a1 + 35) = *(_OWORD *)(a2 + 35);
    goto LABEL_20;
  }
  uint64_t v6 = *a2;
  *a1 = *a2;
  a1 = (void *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t destroy for TabContextMenuKey.Storage.Guts(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v2 = type metadata accessor for PlatformItemList.Item();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
    if (result) {
      return result;
    }

    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v4 = *(void *)(a1 + 184);
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v6 = *(unsigned __int8 *)(a1 + 72);
      if (v6 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(a1 + 64), v6);
        uint64_t v4 = *(void *)(a1 + 184);
        unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v5 != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(a1 + 168), *(void *)(a1 + 176), v4);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    if (*(void *)(a1 + 256))
    {
      swift_bridgeObjectRelease();
      uint64_t v7 = *(void **)(a1 + 264);
      if ((unint64_t)v7 >= 2) {

      }
      swift_release();
      swift_release();
    }
    unint64_t v8 = *(void *)(a1 + 328);
    if (v8 >> 2 != 0xFFFFFFFF) {
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(a1 + 296), *(void *)(a1 + 304), *(void *)(a1 + 312), *(void *)(a1 + 320), v8, *(void *)(a1 + 336), *(void *)(a1 + 344), *(void *)(a1 + 352), *(void *)(a1 + 360), *(void *)(a1 + 368), *(void *)(a1 + 376), *(void *)(a1 + 384), *(void *)(a1 + 392));
    }
    uint64_t v9 = *(void *)(a1 + 408);
    if (v9)
    {
      if (v9 == 1)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        if (*(void *)(a1 + 504)) {
          swift_release();
        }
        if (*(void *)(a1 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(void *)(a1 + 552) != 1)
        {
          swift_release();
          if (*(void *)(a1 + 560)) {
            swift_release();
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v10 = a1 + *(int *)(v2 + 112);
        uint64_t v11 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
        {
          uint64_t v12 = v10 + *(int *)(v11 + 20);
          outlined consume of Text.Storage(*(void *)v12, *(void *)(v12 + 8), *(unsigned char *)(v12 + 16));
          swift_bridgeObjectRelease();
          uint64_t v13 = v12 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          uint64_t v14 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
          if (*(void *)(v10 + *(int *)(v11 + 24))) {
            swift_release();
          }
        }
        goto LABEL_32;
      }
      swift_release();
    }
    if (*(void *)(a1 + 424)) {
      swift_release();
    }
    if (*(void *)(a1 + 440)) {
      swift_release();
    }
    goto LABEL_22;
  }
LABEL_32:

  return swift_release();
}

void *initializeWithCopy for TabContextMenuKey.Storage.Guts(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    swift_retain();
    goto LABEL_49;
  }
  uint64_t v4 = type metadata accessor for PlatformItemList.Item();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    type metadata accessor for TabContextMenuKey.Storage?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    goto LABEL_49;
  }
  uint64_t v92 = v5;
  uint64_t v7 = (void *)*a2;
  unint64_t v8 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v8;
  uint64_t v9 = a2[3];
  a1[2] = a2[2];
  a1[3] = v9;
  *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
  uint64_t v10 = a2[6];
  a1[5] = a2[5];
  a1[6] = v10;
  *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
  uint64_t v11 = a1 + 8;
  uint64_t v12 = a2 + 8;
  unint64_t v13 = a2[23];
  id v14 = v7;
  id v15 = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v13 >> 1 != 4294967294)
  {
    int v25 = *((unsigned __int8 *)a2 + 72);
    if (v25 == 255)
    {
      *uint64_t v11 = *v12;
      *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
    }
    else
    {
      id v26 = (void *)a2[8];
      outlined copy of GraphicsImage.Contents(v26, *((unsigned char *)a2 + 72));
      a1[8] = v26;
      *((unsigned char *)a1 + 72) = v25;
      unint64_t v13 = a2[23];
    }
    a1[10] = a2[10];
    *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
    *((unsigned char *)a1 + 104) = *((unsigned char *)a2 + 104);
    *(_OWORD *)((char *)a1 + 108) = *(_OWORD *)((char *)a2 + 108);
    *((unsigned char *)a1 + 124) = *((unsigned char *)a2 + 124);
    long long v27 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v27;
    *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
    *((unsigned char *)a1 + 162) = *((unsigned char *)a2 + 162);
    *((unsigned char *)a1 + 163) = *((unsigned char *)a2 + 163);
    if (v13 >> 1 == 0xFFFFFFFF)
    {
      long long v28 = *(_OWORD *)(a2 + 23);
      *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
      *(_OWORD *)(a1 + 23) = v28;
    }
    else
    {
      uint64_t v29 = a2[21];
      uint64_t v30 = a2[22];
      uint64_t v31 = a2[24];
      outlined copy of AccessibilityImageLabel(v29, v30, v13);
      a1[21] = v29;
      a1[22] = v30;
      a1[23] = v13;
      a1[24] = v31;
    }
    uint64_t v32 = a2[26];
    a1[25] = a2[25];
    a1[26] = v32;
    *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
    *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
    *((unsigned char *)a1 + 224) = *((unsigned char *)a2 + 224);
    uint64_t v33 = (void *)a2[29];
    a1[29] = v33;
    *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
    *((unsigned char *)a1 + 242) = *((unsigned char *)a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    id v34 = v33;
    uint64_t v21 = a2[32];
    if (v21) {
      goto LABEL_7;
    }
LABEL_17:
    long long v35 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 31) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 33) = v35;
    *(_OWORD *)(a1 + 35) = *(_OWORD *)(a2 + 35);
    goto LABEL_18;
  }
  long long v16 = *((_OWORD *)a2 + 13);
  *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
  *((_OWORD *)a1 + 13) = v16;
  *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
  *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
  long long v17 = *((_OWORD *)a2 + 9);
  *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)a1 + 9) = v17;
  long long v18 = *((_OWORD *)a2 + 11);
  *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
  *((_OWORD *)a1 + 11) = v18;
  long long v19 = *((_OWORD *)a2 + 5);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *((_OWORD *)a1 + 5) = v19;
  long long v20 = *((_OWORD *)a2 + 7);
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  *((_OWORD *)a1 + 7) = v20;
  uint64_t v21 = a2[32];
  if (!v21) {
    goto LABEL_17;
  }
LABEL_7:
  a1[31] = a2[31];
  a1[32] = v21;
  long long v22 = (void *)a2[33];
  swift_bridgeObjectRetain();
  if ((unint64_t)v22 >= 2) {
    id v23 = v22;
  }
  a1[33] = v22;
  *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
  *((unsigned char *)a1 + 276) = *((unsigned char *)a2 + 276);
  *(_WORD *)((char *)a1 + 277) = *(_WORD *)((char *)a2 + 277);
  uint64_t v24 = a2[36];
  a1[35] = a2[35];
  a1[36] = v24;
  swift_retain();
  swift_retain();
LABEL_18:
  unint64_t v36 = a2[41];
  uint64_t v98 = (int *)v4;
  if (v36 >> 2 == 0xFFFFFFFF)
  {
    long long v37 = *(_OWORD *)(a2 + 47);
    *(_OWORD *)(a1 + 45) = *(_OWORD *)(a2 + 45);
    *(_OWORD *)(a1 + 47) = v37;
    a1[49] = a2[49];
    long long v38 = *(_OWORD *)(a2 + 39);
    *(_OWORD *)(a1 + 37) = *(_OWORD *)(a2 + 37);
    *(_OWORD *)(a1 + 39) = v38;
    long long v39 = *(_OWORD *)(a2 + 43);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(a1 + 43) = v39;
  }
  else
  {
    long long v40 = (void *)a2[37];
    uint64_t v41 = a2[38];
    uint64_t v42 = a2[39];
    uint64_t v43 = a2[40];
    uint64_t v45 = a2[42];
    uint64_t v44 = a2[43];
    uint64_t v46 = a2[44];
    uint64_t v88 = a2[45];
    uint64_t v89 = a2[46];
    uint64_t v90 = a2[47];
    unint64_t __dsta = (void *)a2[48];
    uint64_t v95 = a2[49];
    outlined copy of PlatformItemList.Item.SystemItem(v40, v41, v42, v43, v36, v45, v44, v46, v88, v89, v90, (char)__dsta, v95);
    a1[37] = v40;
    a1[38] = v41;
    a1[39] = v42;
    a1[40] = v43;
    a1[41] = v36;
    a1[42] = v45;
    uint64_t v4 = (uint64_t)v98;
    a1[43] = v44;
    a1[44] = v46;
    a1[45] = v88;
    a1[46] = v89;
    a1[47] = v90;
    a1[48] = __dsta;
    a1[49] = v95;
  }
  uint64_t v47 = a2[51];
  if (v47 != 1)
  {
    *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
    *((unsigned char *)a1 + 404) = *((unsigned char *)a2 + 404);
    if (v47)
    {
      uint64_t v50 = a2[52];
      a1[51] = v47;
      a1[52] = v50;
      swift_retain();
      uint64_t v51 = a2[53];
      if (v51) {
        goto LABEL_25;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 51) = *(_OWORD *)(a2 + 51);
      uint64_t v51 = a2[53];
      if (v51)
      {
LABEL_25:
        uint64_t v52 = a2[54];
        a1[53] = v51;
        a1[54] = v52;
        swift_retain();
        uint64_t v53 = a2[55];
        if (v53)
        {
LABEL_26:
          uint64_t v54 = a2[56];
          a1[55] = v53;
          a1[56] = v54;
          swift_retain();
LABEL_30:
          a1[57] = a2[57];
          *((unsigned char *)a1 + 464) = *((unsigned char *)a2 + 464);
          goto LABEL_31;
        }
LABEL_29:
        *(_OWORD *)(a1 + 55) = *(_OWORD *)(a2 + 55);
        goto LABEL_30;
      }
    }
    *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
    uint64_t v53 = a2[55];
    if (v53) {
      goto LABEL_26;
    }
    goto LABEL_29;
  }
  long long v48 = *((_OWORD *)a2 + 28);
  *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
  *((_OWORD *)a1 + 28) = v48;
  *((unsigned char *)a1 + 464) = *((unsigned char *)a2 + 464);
  long long v49 = *((_OWORD *)a2 + 26);
  *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
  *((_OWORD *)a1 + 26) = v49;
LABEL_31:
  uint64_t v55 = a2[60];
  a1[59] = a2[59];
  a1[60] = v55;
  a1[61] = a2[61];
  *((unsigned char *)a1 + 496) = *((unsigned char *)a2 + 496);
  uint64_t v56 = a2[63];
  swift_bridgeObjectRetain();
  if (v56)
  {
    uint64_t v57 = a2[64];
    a1[63] = v56;
    a1[64] = v57;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 63) = *(_OWORD *)(a2 + 63);
  }
  *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
  uint64_t v58 = a2[66];
  if (v58)
  {
    a1[66] = v58;
    a1[67] = a2[67];
    a1[68] = a2[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
    a1[68] = a2[68];
  }
  uint64_t v59 = a2[69];
  if (v59 == 1)
  {
    *(_OWORD *)(a1 + 69) = *(_OWORD *)(a2 + 69);
    a1[71] = a2[71];
  }
  else
  {
    a1[69] = v59;
    uint64_t v60 = a2[70];
    swift_retain();
    if (v60)
    {
      uint64_t v61 = a2[71];
      a1[70] = v60;
      a1[71] = v61;
      swift_retain();
    }
    else
    {
      *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
    }
  }
  uint64_t v62 = (void *)a2[72];
  a1[72] = v62;
  a1[73] = a2[73];
  a1[74] = a2[74];
  a1[75] = a2[75];
  a1[76] = a2[76];
  a1[77] = a2[77];
  a1[78] = a2[78];
  *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
  *((unsigned char *)a1 + 634) = *((unsigned char *)a2 + 634);
  uint64_t v63 = *(int *)(v4 + 112);
  __dst = (char *)a1 + v63;
  uint64_t v64 = (char *)a2 + v63;
  uint64_t v65 = type metadata accessor for CommandOperation();
  uint64_t v91 = *(void *)(v65 - 8);
  uint64_t v96 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v91 + 48);
  id v66 = v62;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v96(v64, 1, v65))
  {
    type metadata accessor for TabContextMenuKey.Storage?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
    memcpy(__dst, v64, *(void *)(*(void *)(v67 - 8) + 64));
    uint64_t v68 = v92;
    uint64_t v69 = v98;
  }
  else
  {
    unsigned char *__dst = *v64;
    uint64_t v70 = *(int *)(v65 + 20);
    uint64_t v71 = &__dst[v70];
    uint64_t v72 = &v64[v70];
    uint64_t v97 = v64;
    uint64_t v73 = *(void *)&v64[v70];
    uint64_t v74 = *(void *)&v64[v70 + 8];
    uint64_t v75 = v65;
    char v76 = v72[16];
    outlined copy of Text.Storage(v73, v74, v76);
    *(void *)uint64_t v71 = v73;
    *((void *)v71 + 1) = v74;
    v71[16] = v76;
    *((void *)v71 + 3) = *((void *)v72 + 3);
    uint64_t v77 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v78 = &v71[v77];
    uint64_t v79 = &v72[v77];
    uint64_t v80 = type metadata accessor for UUID();
    uint64_t v81 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v80 - 8) + 16);
    swift_bridgeObjectRetain();
    v81(v78, v79, v80);
    uint64_t v82 = *(int *)(v75 + 24);
    uint64_t v83 = &__dst[v82];
    uint64_t v84 = &v97[v82];
    if (*v84)
    {
      uint64_t v85 = v84[1];
      *uint64_t v83 = *v84;
      v83[1] = v85;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
    }
    uint64_t v68 = v92;
    uint64_t v69 = v98;
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v91 + 56))(__dst, 0, 1, v75);
  }
  *((unsigned char *)a1 + v69[29]) = *((unsigned char *)a2 + v69[29]);
  *((unsigned char *)a1 + v69[30]) = *((unsigned char *)a2 + v69[30]);
  *((unsigned char *)a1 + v69[31]) = *((unsigned char *)a2 + v69[31]);
  *((unsigned char *)a1 + v69[32]) = *((unsigned char *)a2 + v69[32]);
  *(void *)((char *)a1 + v69[33]) = *(void *)((char *)a2 + v69[33]);
  uint64_t v86 = *(void (**)(void *, void, uint64_t, int *))(v68 + 56);
  swift_retain();
  v86(a1, 0, 1, v69);
LABEL_49:
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for TabContextMenuKey.Storage.Guts(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of TabContextMenuKey.Storage.Guts((uint64_t)a1, type metadata accessor for TabContextMenuKey.Storage.Guts);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_retain();
LABEL_51:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    uint64_t v4 = type metadata accessor for PlatformItemList.Item();
    uint64_t v5 = *(void *)(v4 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
    {
      type metadata accessor for TabContextMenuKey.Storage?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      goto LABEL_51;
    }
    uint64_t v108 = v5;
    uint64_t v7 = (void *)*a2;
    *a1 = *a2;
    unint64_t v8 = (void *)a2[1];
    a1[1] = v8;
    a1[2] = a2[2];
    a1[3] = a2[3];
    *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
    a1[5] = a2[5];
    a1[6] = a2[6];
    *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v9 = a1 + 8;
    uint64_t v10 = (id *)(a2 + 8);
    unint64_t v11 = a2[23];
    id v12 = v7;
    id v13 = v8;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v11 >> 1 == 4294967294)
    {
      long long v14 = *(_OWORD *)v10;
      long long v15 = *((_OWORD *)a2 + 5);
      long long v16 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v16;
      *uint64_t v9 = v14;
      *((_OWORD *)a1 + 5) = v15;
      long long v17 = *((_OWORD *)a2 + 8);
      long long v18 = *((_OWORD *)a2 + 9);
      long long v19 = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 11) = v19;
      *((_OWORD *)a1 + 8) = v17;
      *((_OWORD *)a1 + 9) = v18;
      long long v20 = *((_OWORD *)a2 + 12);
      long long v21 = *((_OWORD *)a2 + 13);
      long long v22 = *((_OWORD *)a2 + 14);
      *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
      *((_OWORD *)a1 + 13) = v21;
      *((_OWORD *)a1 + 14) = v22;
      *((_OWORD *)a1 + 12) = v20;
      if (a2[32])
      {
LABEL_8:
        a1[31] = a2[31];
        a1[32] = a2[32];
        id v23 = (void *)a2[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v23 >= 2) {
          id v24 = v23;
        }
        a1[33] = v23;
        int v25 = *((_DWORD *)a2 + 68);
        *((unsigned char *)a1 + 276) = *((unsigned char *)a2 + 276);
        *((_DWORD *)a1 + 68) = v25;
        *((unsigned char *)a1 + 277) = *((unsigned char *)a2 + 277);
        *((unsigned char *)a1 + 278) = *((unsigned char *)a2 + 278);
        a1[35] = a2[35];
        a1[36] = a2[36];
        swift_retain();
        swift_retain();
LABEL_19:
        unint64_t v42 = a2[41];
        uint64_t v109 = (int *)v4;
        if (v42 >> 2 == 0xFFFFFFFF)
        {
          long long v43 = *(_OWORD *)(a2 + 37);
          long long v44 = *(_OWORD *)(a2 + 41);
          *(_OWORD *)(a1 + 39) = *(_OWORD *)(a2 + 39);
          *(_OWORD *)(a1 + 41) = v44;
          *(_OWORD *)(a1 + 37) = v43;
          long long v45 = *(_OWORD *)(a2 + 43);
          long long v46 = *(_OWORD *)(a2 + 45);
          long long v47 = *(_OWORD *)(a2 + 47);
          a1[49] = a2[49];
          *(_OWORD *)(a1 + 45) = v46;
          *(_OWORD *)(a1 + 47) = v47;
          *(_OWORD *)(a1 + 43) = v45;
        }
        else
        {
          long long v48 = (void *)a2[37];
          uint64_t v49 = a2[38];
          uint64_t v50 = a2[39];
          uint64_t v51 = a2[40];
          uint64_t v53 = a2[42];
          uint64_t v52 = a2[43];
          uint64_t v54 = a2[44];
          uint64_t v99 = a2[45];
          uint64_t v100 = a2[46];
          uint64_t v101 = a2[47];
          uint64_t v103 = a2[48];
          unint64_t __dsta = (void *)a2[49];
          outlined copy of PlatformItemList.Item.SystemItem(v48, v49, v50, v51, v42, v53, v52, v54, v99, v100, v101, v103, (uint64_t)__dsta);
          a1[37] = v48;
          a1[38] = v49;
          a1[39] = v50;
          a1[40] = v51;
          a1[41] = v42;
          a1[42] = v53;
          uint64_t v4 = (uint64_t)v109;
          a1[43] = v52;
          a1[44] = v54;
          a1[45] = v99;
          a1[46] = v100;
          a1[47] = v101;
          a1[48] = v103;
          a1[49] = __dsta;
        }
        if (a2[51] == 1)
        {
          *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
          long long v55 = *((_OWORD *)a2 + 26);
          long long v56 = *((_OWORD *)a2 + 27);
          long long v57 = *((_OWORD *)a2 + 28);
          *((unsigned char *)a1 + 464) = *((unsigned char *)a2 + 464);
          *((_OWORD *)a1 + 27) = v56;
          *((_OWORD *)a1 + 28) = v57;
          *((_OWORD *)a1 + 26) = v55;
          goto LABEL_32;
        }
        *((unsigned char *)a1 + 400) = *((unsigned char *)a2 + 400);
        *((unsigned char *)a1 + 401) = *((unsigned char *)a2 + 401);
        *((unsigned char *)a1 + 402) = *((unsigned char *)a2 + 402);
        *((unsigned char *)a1 + 403) = *((unsigned char *)a2 + 403);
        *((unsigned char *)a1 + 404) = *((unsigned char *)a2 + 404);
        uint64_t v58 = a2[51];
        if (v58)
        {
          uint64_t v59 = a2[52];
          a1[51] = v58;
          a1[52] = v59;
          swift_retain();
          uint64_t v60 = a2[53];
          if (v60) {
            goto LABEL_26;
          }
        }
        else
        {
          *(_OWORD *)(a1 + 51) = *(_OWORD *)(a2 + 51);
          uint64_t v60 = a2[53];
          if (v60)
          {
LABEL_26:
            uint64_t v61 = a2[54];
            a1[53] = v60;
            a1[54] = v61;
            swift_retain();
            uint64_t v62 = a2[55];
            if (v62)
            {
LABEL_27:
              uint64_t v63 = a2[56];
              a1[55] = v62;
              a1[56] = v63;
              swift_retain();
LABEL_31:
              a1[57] = a2[57];
              *((unsigned char *)a1 + 464) = *((unsigned char *)a2 + 464);
LABEL_32:
              a1[59] = a2[59];
              a1[60] = a2[60];
              a1[61] = a2[61];
              *((unsigned char *)a1 + 496) = *((unsigned char *)a2 + 496);
              uint64_t v64 = a2[63];
              swift_bridgeObjectRetain();
              if (v64)
              {
                uint64_t v65 = a2[64];
                a1[63] = v64;
                a1[64] = v65;
                swift_retain();
              }
              else
              {
                *(_OWORD *)(a1 + 63) = *(_OWORD *)(a2 + 63);
              }
              *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
              uint64_t v66 = a2[66];
              if (v66)
              {
                a1[66] = v66;
                a1[67] = a2[67];
                a1[68] = a2[68];
                swift_bridgeObjectRetain();
                swift_retain();
                swift_retain();
              }
              else
              {
                long long v67 = *((_OWORD *)a2 + 33);
                a1[68] = a2[68];
                *((_OWORD *)a1 + 33) = v67;
              }
              uint64_t v68 = a2[69];
              if (v68 == 1)
              {
                uint64_t v69 = a1 + 69;
                long long v70 = *(_OWORD *)(a2 + 69);
                a1[71] = a2[71];
              }
              else
              {
                a1[69] = v68;
                uint64_t v71 = a2[70];
                swift_retain();
                if (v71)
                {
                  uint64_t v72 = a2[71];
                  a1[70] = v71;
                  a1[71] = v72;
                  swift_retain();
LABEL_44:
                  uint64_t v73 = (void *)a2[72];
                  a1[72] = v73;
                  a1[73] = a2[73];
                  a1[74] = a2[74];
                  a1[75] = a2[75];
                  a1[76] = a2[76];
                  a1[77] = a2[77];
                  a1[78] = a2[78];
                  *((unsigned char *)a1 + 632) = *((unsigned char *)a2 + 632);
                  *((unsigned char *)a1 + 633) = *((unsigned char *)a2 + 633);
                  *((unsigned char *)a1 + 634) = *((unsigned char *)a2 + 634);
                  uint64_t v74 = *(int *)(v4 + 112);
                  __dst = (char *)a1 + v74;
                  uint64_t v75 = (char *)a2 + v74;
                  uint64_t v76 = type metadata accessor for CommandOperation();
                  uint64_t v102 = *(void *)(v76 - 8);
                  long long v104 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v102 + 48);
                  id v77 = v73;
                  uint64_t v78 = v75;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v104(v75, 1, v76))
                  {
                    type metadata accessor for TabContextMenuKey.Storage?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
                    memcpy(__dst, v75, *(void *)(*(void *)(v79 - 8) + 64));
                    uint64_t v80 = v109;
                  }
                  else
                  {
                    unsigned char *__dst = *v75;
                    uint64_t v81 = *(int *)(v76 + 20);
                    uint64_t v82 = v76;
                    uint64_t v83 = &__dst[v81];
                    uint64_t v84 = &v78[v81];
                    uint64_t v105 = v78;
                    uint64_t v85 = *(void *)&v78[v81];
                    uint64_t v86 = *((void *)v84 + 1);
                    char v87 = v84[16];
                    outlined copy of Text.Storage(v85, v86, v87);
                    *(void *)uint64_t v83 = v85;
                    *((void *)v83 + 1) = v86;
                    v83[16] = v87;
                    *((void *)v83 + 3) = *((void *)v84 + 3);
                    uint64_t v88 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    uint64_t v89 = &v83[v88];
                    uint64_t v90 = &v84[v88];
                    uint64_t v91 = type metadata accessor for UUID();
                    uint64_t v92 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v91 - 8) + 16);
                    swift_bridgeObjectRetain();
                    v92(v89, v90, v91);
                    uint64_t v93 = *(int *)(v82 + 24);
                    uint64_t v94 = &__dst[v93];
                    uint64_t v95 = &v105[v93];
                    if (*v95)
                    {
                      uint64_t v96 = v95[1];
                      *uint64_t v94 = *v95;
                      v94[1] = v96;
                      swift_retain();
                    }
                    else
                    {
                      *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
                    }
                    uint64_t v80 = v109;
                    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v102 + 56))(__dst, 0, 1, v82);
                  }
                  *((unsigned char *)a1 + v80[29]) = *((unsigned char *)a2 + v80[29]);
                  *((unsigned char *)a1 + v80[30]) = *((unsigned char *)a2 + v80[30]);
                  *((unsigned char *)a1 + v80[31]) = *((unsigned char *)a2 + v80[31]);
                  *((unsigned char *)a1 + v80[32]) = *((unsigned char *)a2 + v80[32]);
                  *(void *)((char *)a1 + v80[33]) = *(void *)((char *)a2 + v80[33]);
                  uint64_t v97 = *(void (**)(void *, void, uint64_t, int *))(v108 + 56);
                  swift_retain();
                  v97(a1, 0, 1, v80);
                  goto LABEL_51;
                }
                uint64_t v69 = a1 + 70;
                long long v70 = *((_OWORD *)a2 + 35);
              }
              _OWORD *v69 = v70;
              goto LABEL_44;
            }
LABEL_30:
            *(_OWORD *)(a1 + 55) = *(_OWORD *)(a2 + 55);
            goto LABEL_31;
          }
        }
        *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
        uint64_t v62 = a2[55];
        if (v62) {
          goto LABEL_27;
        }
        goto LABEL_30;
      }
    }
    else
    {
      int v26 = *((unsigned __int8 *)a2 + 72);
      if (v26 == 255)
      {
        id v28 = *v10;
        *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
        *(void *)uint64_t v9 = v28;
      }
      else
      {
        id v27 = *v10;
        outlined copy of GraphicsImage.Contents(*v10, *((unsigned char *)a2 + 72));
        a1[8] = v27;
        *((unsigned char *)a1 + 72) = v26;
      }
      a1[10] = a2[10];
      *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
      *((unsigned char *)a1 + 104) = *((unsigned char *)a2 + 104);
      long long v29 = *(_OWORD *)((char *)a2 + 108);
      *((unsigned char *)a1 + 124) = *((unsigned char *)a2 + 124);
      *(_OWORD *)((char *)a1 + 108) = v29;
      long long v30 = *((_OWORD *)a2 + 8);
      long long v31 = *((_OWORD *)a2 + 9);
      *((unsigned char *)a1 + 160) = *((unsigned char *)a2 + 160);
      *((_OWORD *)a1 + 8) = v30;
      *((_OWORD *)a1 + 9) = v31;
      *((unsigned char *)a1 + 161) = *((unsigned char *)a2 + 161);
      *((unsigned char *)a1 + 162) = *((unsigned char *)a2 + 162);
      *((unsigned char *)a1 + 163) = *((unsigned char *)a2 + 163);
      unint64_t v32 = a2[23];
      if (v32 >> 1 == 0xFFFFFFFF)
      {
        long long v33 = *(_OWORD *)(a2 + 23);
        *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
        *(_OWORD *)(a1 + 23) = v33;
      }
      else
      {
        uint64_t v34 = a2[21];
        uint64_t v35 = a2[22];
        uint64_t v36 = a2[24];
        outlined copy of AccessibilityImageLabel(v34, v35, a2[23]);
        a1[21] = v34;
        a1[22] = v35;
        a1[23] = v32;
        a1[24] = v36;
      }
      a1[25] = a2[25];
      a1[26] = a2[26];
      *((unsigned char *)a1 + 216) = *((unsigned char *)a2 + 216);
      *((unsigned char *)a1 + 217) = *((unsigned char *)a2 + 217);
      int v37 = *((_DWORD *)a2 + 55);
      *((unsigned char *)a1 + 224) = *((unsigned char *)a2 + 224);
      *((_DWORD *)a1 + 55) = v37;
      long long v38 = (void *)a2[29];
      a1[29] = v38;
      *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
      *((unsigned char *)a1 + 242) = *((unsigned char *)a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v39 = v38;
      if (a2[32]) {
        goto LABEL_8;
      }
    }
    long long v40 = *(_OWORD *)(a2 + 31);
    long long v41 = *(_OWORD *)(a2 + 35);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 35) = v41;
    *(_OWORD *)(a1 + 31) = v40;
    goto LABEL_19;
  }
  return a1;
}

_OWORD *initializeWithTake for TabContextMenuKey.Storage.Guts(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = (int *)type metadata accessor for PlatformItemList.Item();
    uint64_t v7 = *((void *)v6 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
    {
      type metadata accessor for TabContextMenuKey.Storage?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      long long v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
      uint64_t v10 = *((void *)a2 + 6);
      *((void *)a1 + 5) = *((void *)a2 + 5);
      *((void *)a1 + 6) = v10;
      *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
      long long v11 = a2[13];
      a1[12] = a2[12];
      a1[13] = v11;
      a1[14] = a2[14];
      *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
      long long v12 = a2[9];
      a1[8] = a2[8];
      a1[9] = v12;
      long long v13 = a2[11];
      a1[10] = a2[10];
      a1[11] = v13;
      long long v14 = a2[5];
      a1[4] = a2[4];
      a1[5] = v14;
      long long v15 = a2[7];
      a1[6] = a2[6];
      a1[7] = v15;
      *(_OWORD *)((char *)a1 + 248) = *(_OWORD *)((char *)a2 + 248);
      long long v16 = *(_OWORD *)((char *)a2 + 280);
      *(_OWORD *)((char *)a1 + 264) = *(_OWORD *)((char *)a2 + 264);
      *(_OWORD *)((char *)a1 + 280) = v16;
      long long v17 = *(_OWORD *)((char *)a2 + 376);
      *(_OWORD *)((char *)a1 + 360) = *(_OWORD *)((char *)a2 + 360);
      *(_OWORD *)((char *)a1 + 376) = v17;
      *((void *)a1 + 49) = *((void *)a2 + 49);
      long long v18 = *(_OWORD *)((char *)a2 + 312);
      *(_OWORD *)((char *)a1 + 296) = *(_OWORD *)((char *)a2 + 296);
      *(_OWORD *)((char *)a1 + 312) = v18;
      long long v19 = *(_OWORD *)((char *)a2 + 344);
      *(_OWORD *)((char *)a1 + 328) = *(_OWORD *)((char *)a2 + 328);
      *(_OWORD *)((char *)a1 + 344) = v19;
      long long v20 = a2[28];
      a1[27] = a2[27];
      a1[28] = v20;
      *((unsigned char *)a1 + 464) = *((unsigned char *)a2 + 464);
      long long v21 = a2[26];
      a1[25] = a2[25];
      a1[26] = v21;
      *(_OWORD *)((char *)a1 + 472) = *(_OWORD *)((char *)a2 + 472);
      *(_OWORD *)((char *)a1 + 481) = *(_OWORD *)((char *)a2 + 481);
      uint64_t v22 = *((void *)a2 + 63);
      if (v22)
      {
        uint64_t v23 = *((void *)a2 + 64);
        *((void *)a1 + 63) = v22;
        *((void *)a1 + 64) = v23;
      }
      else
      {
        *(_OWORD *)((char *)a1 + 504) = *(_OWORD *)((char *)a2 + 504);
      }
      *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
      a1[33] = a2[33];
      *((void *)a1 + 68) = *((void *)a2 + 68);
      *((void *)a1 + 71) = *((void *)a2 + 71);
      *(_OWORD *)((char *)a1 + 552) = *(_OWORD *)((char *)a2 + 552);
      *((void *)a1 + 72) = *((void *)a2 + 72);
      *(_OWORD *)((char *)a1 + 584) = *(_OWORD *)((char *)a2 + 584);
      *(_OWORD *)((char *)a1 + 600) = *(_OWORD *)((char *)a2 + 600);
      *((void *)a1 + 77) = *((void *)a2 + 77);
      *((void *)a1 + 78) = *((void *)a2 + 78);
      *((unsigned char *)a1 + 632) = *((unsigned char *)a2 + 632);
      *(_WORD *)((char *)a1 + 633) = *(_WORD *)((char *)a2 + 633);
      uint64_t v24 = v6[28];
      int v25 = (char *)a1 + v24;
      int v26 = (char *)a2 + v24;
      uint64_t v27 = type metadata accessor for CommandOperation();
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        type metadata accessor for TabContextMenuKey.Storage?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        uint64_t v44 = v7;
        *int v25 = *v26;
        uint64_t v30 = *(int *)(v27 + 20);
        long long v31 = &v25[v30];
        unint64_t v32 = &v26[v30];
        long long v33 = *(_OWORD *)&v26[v30 + 16];
        *long long v31 = *(_OWORD *)&v26[v30];
        v31[1] = v33;
        uint64_t v34 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        uint64_t v35 = (char *)v31 + v34;
        uint64_t v36 = &v32[v34];
        uint64_t v37 = type metadata accessor for UUID();
        (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
        uint64_t v38 = *(int *)(v27 + 24);
        id v39 = &v25[v38];
        long long v40 = (uint64_t *)&v26[v38];
        uint64_t v41 = *v40;
        if (*v40)
        {
          uint64_t v42 = v40[1];
          *id v39 = v41;
          v39[1] = v42;
        }
        else
        {
          *(_OWORD *)id v39 = *(_OWORD *)v40;
        }
        uint64_t v7 = v44;
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      *((unsigned char *)a1 + v6[29]) = *((unsigned char *)a2 + v6[29]);
      *((unsigned char *)a1 + v6[30]) = *((unsigned char *)a2 + v6[30]);
      *((unsigned char *)a1 + v6[31]) = *((unsigned char *)a2 + v6[31]);
      *((unsigned char *)a1 + v6[32]) = *((unsigned char *)a2 + v6[32]);
      *(void *)((char *)a1 + v6[33]) = *(void *)((char *)a2 + v6[33]);
      (*(void (**)(_OWORD *, void, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *assignWithTake for TabContextMenuKey.Storage.Guts(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of TabContextMenuKey.Storage.Guts((uint64_t)a1, type metadata accessor for TabContextMenuKey.Storage.Guts);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = (int *)type metadata accessor for PlatformItemList.Item();
      uint64_t v7 = *((void *)v6 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
      {
        type metadata accessor for TabContextMenuKey.Storage?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        long long v9 = a2[1];
        *a1 = *a2;
        a1[1] = v9;
        *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
        uint64_t v10 = *((void *)a2 + 6);
        *((void *)a1 + 5) = *((void *)a2 + 5);
        *((void *)a1 + 6) = v10;
        *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
        long long v11 = a2[13];
        a1[12] = a2[12];
        a1[13] = v11;
        a1[14] = a2[14];
        *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
        long long v12 = a2[9];
        a1[8] = a2[8];
        a1[9] = v12;
        long long v13 = a2[11];
        a1[10] = a2[10];
        a1[11] = v13;
        long long v14 = a2[5];
        a1[4] = a2[4];
        a1[5] = v14;
        long long v15 = a2[7];
        a1[6] = a2[6];
        a1[7] = v15;
        *(_OWORD *)((char *)a1 + 248) = *(_OWORD *)((char *)a2 + 248);
        long long v16 = *(_OWORD *)((char *)a2 + 280);
        *(_OWORD *)((char *)a1 + 264) = *(_OWORD *)((char *)a2 + 264);
        *(_OWORD *)((char *)a1 + 280) = v16;
        long long v17 = *(_OWORD *)((char *)a2 + 376);
        *(_OWORD *)((char *)a1 + 360) = *(_OWORD *)((char *)a2 + 360);
        *(_OWORD *)((char *)a1 + 376) = v17;
        *((void *)a1 + 49) = *((void *)a2 + 49);
        long long v18 = *(_OWORD *)((char *)a2 + 312);
        *(_OWORD *)((char *)a1 + 296) = *(_OWORD *)((char *)a2 + 296);
        *(_OWORD *)((char *)a1 + 312) = v18;
        long long v19 = *(_OWORD *)((char *)a2 + 344);
        *(_OWORD *)((char *)a1 + 328) = *(_OWORD *)((char *)a2 + 328);
        *(_OWORD *)((char *)a1 + 344) = v19;
        long long v20 = a2[28];
        a1[27] = a2[27];
        a1[28] = v20;
        *((unsigned char *)a1 + 464) = *((unsigned char *)a2 + 464);
        long long v21 = a2[26];
        a1[25] = a2[25];
        a1[26] = v21;
        *(_OWORD *)((char *)a1 + 472) = *(_OWORD *)((char *)a2 + 472);
        *(_OWORD *)((char *)a1 + 481) = *(_OWORD *)((char *)a2 + 481);
        uint64_t v22 = *((void *)a2 + 63);
        if (v22)
        {
          uint64_t v23 = *((void *)a2 + 64);
          *((void *)a1 + 63) = v22;
          *((void *)a1 + 64) = v23;
        }
        else
        {
          *(_OWORD *)((char *)a1 + 504) = *(_OWORD *)((char *)a2 + 504);
        }
        *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
        a1[33] = a2[33];
        *((void *)a1 + 68) = *((void *)a2 + 68);
        *((void *)a1 + 71) = *((void *)a2 + 71);
        *(_OWORD *)((char *)a1 + 552) = *(_OWORD *)((char *)a2 + 552);
        *((void *)a1 + 72) = *((void *)a2 + 72);
        *(_OWORD *)((char *)a1 + 584) = *(_OWORD *)((char *)a2 + 584);
        *(_OWORD *)((char *)a1 + 600) = *(_OWORD *)((char *)a2 + 600);
        *((void *)a1 + 77) = *((void *)a2 + 77);
        *((void *)a1 + 78) = *((void *)a2 + 78);
        *((unsigned char *)a1 + 632) = *((unsigned char *)a2 + 632);
        *(_WORD *)((char *)a1 + 633) = *(_WORD *)((char *)a2 + 633);
        uint64_t v24 = v6[28];
        int v25 = (char *)a1 + v24;
        int v26 = (char *)a2 + v24;
        uint64_t v27 = type metadata accessor for CommandOperation();
        uint64_t v28 = *(void *)(v27 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
        {
          type metadata accessor for TabContextMenuKey.Storage?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
          memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          uint64_t v44 = v7;
          *int v25 = *v26;
          uint64_t v30 = *(int *)(v27 + 20);
          long long v31 = &v25[v30];
          unint64_t v32 = &v26[v30];
          long long v33 = *(_OWORD *)&v26[v30 + 16];
          *long long v31 = *(_OWORD *)&v26[v30];
          v31[1] = v33;
          uint64_t v34 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          uint64_t v35 = (char *)v31 + v34;
          uint64_t v36 = &v32[v34];
          uint64_t v37 = type metadata accessor for UUID();
          (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
          uint64_t v38 = *(int *)(v27 + 24);
          id v39 = &v25[v38];
          long long v40 = (uint64_t *)&v26[v38];
          uint64_t v41 = *v40;
          if (*v40)
          {
            uint64_t v42 = v40[1];
            *id v39 = v41;
            v39[1] = v42;
          }
          else
          {
            *(_OWORD *)id v39 = *(_OWORD *)v40;
          }
          uint64_t v7 = v44;
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        }
        *((unsigned char *)a1 + v6[29]) = *((unsigned char *)a2 + v6[29]);
        *((unsigned char *)a1 + v6[30]) = *((unsigned char *)a2 + v6[30]);
        *((unsigned char *)a1 + v6[31]) = *((unsigned char *)a2 + v6[31]);
        *((unsigned char *)a1 + v6[32]) = *((unsigned char *)a2 + v6[32]);
        *(void *)((char *)a1 + v6[33]) = *(void *)((char *)a2 + v6[33]);
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void type metadata completion function for TabContextMenuKey.Storage.Guts()
{
  type metadata accessor for TabContextMenuKey.Storage?(319, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t getEnumTagSinglePayload for PlatformItemContextMenuModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for PlatformItemContextMenuModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187EE4C84);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_187EE4CAC()
{
  return swift_getWitnessTable();
}

void type metadata accessor for InvertedViewInputPredicate<IsSharingPickerHost>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_187EE4FC0()
{
  return swift_getWitnessTable();
}

uint64_t static PlatformItemContextMenuModifier._makeViewList(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, ValueMetadata **)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v43 = a4;
  uint64_t v44 = a3;
  uint64_t v42 = a7;
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  int v9 = *a1;
  unint64_t v10 = *(ValueMetadata **)a2;
  int v11 = *(_DWORD *)(a2 + 8);
  unsigned int v12 = *(_UNKNOWN ***)(a2 + 16);
  unsigned int v51 = *(_DWORD *)(a2 + 24);
  int v52 = v11;
  unsigned int v13 = *(_DWORD *)(a2 + 32);
  unsigned int v53 = *(_DWORD *)(a2 + 28);
  unsigned int v50 = *(_DWORD *)(a2 + 36);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 48);
  uint64_t v47 = *(void *)(a2 + 56);
  uint64_t v48 = v14;
  int v46 = *(_DWORD *)(a2 + 64);
  long long v45 = *(ValueMetadata **)(a2 + 72);
  int v16 = *(unsigned __int8 *)(a2 + 80);
  LODWORD(v72) = v9;
  type metadata accessor for PlatformItemContextMenuModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  uint64_t v17 = *(void *)(*(void *)(a5 - 8) + 64);
  int v49 = v16;
  if (v17) {
    closure #1 in static PlatformItemContextMenuModifier._makeViewList(modifier:inputs:body:)(1, a5);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v72 = v10;
  int v73 = v52;
  uint64_t v74 = v12;
  *(void *)&long long v75 = __PAIR64__(v53, v51);
  *((void *)&v75 + 1) = __PAIR64__(v50, v13);
  *(void *)uint64_t v76 = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewInputs.init(withoutGeometry:)();
  uint64_t v64 = v54;
  LODWORD(v65) = v55;
  uint64_t v66 = v56;
  long long v67 = v57;
  long long v68 = v58[0];
  long long v69 = v58[1];
  uint64_t v70 = v59;
  int v71 = DWORD2(v59);
  id v19 = PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v64, 1, (uint64_t)&v72);
  uint64_t v38 = &v36;
  v58[0] = *(_OWORD *)v76;
  v58[1] = *(_OWORD *)&v76[16];
  uint64_t v54 = v72;
  int v55 = v73;
  long long v56 = v74;
  LODWORD(v57) = v75;
  *((void *)&v57 + 1) = *((void *)&v75 + 1);
  long long v59 = v77;
  uint64_t v60 = v78;
  int v61 = v79;
  char v62 = v80;
  int v63 = v81;
  MEMORY[0x1F4188790](v19);
  uint64_t v64 = &type metadata for AllPlatformItemListFlags;
  uint64_t v65 = a5;
  uint64_t v40 = a5;
  uint64_t v66 = &protocol witness table for AllPlatformItemListFlags;
  *(void *)&long long v67 = a6;
  uint64_t v41 = a6;
  uint64_t v34 = type metadata accessor for PlatformItemListGenerator();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for _EnvironmentKeyTransformModifier<SymbolVariants>(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v54, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v33, v34, MEMORY[0x1E4FBC248], v20, MEMORY[0x1E4FBC278], v21);
  uint64_t v39 = 0;
  uint64_t v22 = v54;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  LODWORD(v38) = v64;
  uint64_t v72 = v10;
  int v73 = v52;
  uint64_t v74 = v12;
  *(void *)&long long v75 = __PAIR64__(v53, v51);
  *((void *)&v75 + 1) = __PAIR64__(v50, v13);
  *(void *)uint64_t v76 = v15;
  *(void *)&v76[8] = v48;
  *(void *)&v76[16] = v47;
  *(_DWORD *)&v76[24] = v46;
  *(void *)&long long v77 = v45;
  BYTE8(v77) = v49;
  if (v45)
  {
    uint64_t v54 = v45;
    LOBYTE(v55) = v49 & 1;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)((uint64_t *)&v64, (uint64_t)&type metadata for TabContextMenuKey);
    *(void *)&long long v77 = v54;
    BYTE8(v77) = v55;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  uint64_t v54 = v10;
  unsigned int v24 = v51;
  int v23 = v52;
  int v55 = v52;
  long long v56 = v12;
  *(void *)&long long v57 = __PAIR64__(v53, v51);
  unsigned int v25 = v50;
  *((void *)&v57 + 1) = __PAIR64__(v50, v13);
  *(void *)&v58[0] = v15;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  unsigned int v37 = _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v54 = v10;
  int v55 = v23;
  long long v56 = v12;
  *(void *)&long long v57 = __PAIR64__(v53, v24);
  *((void *)&v57 + 1) = __PAIR64__(v25, v13);
  *(void *)&v58[0] = v15;
  *((void *)&v58[0] + 1) = v48;
  *(void *)&v58[1] = v47;
  DWORD2(v58[1]) = v46;
  *(void *)&long long v59 = v45;
  BYTE8(v59) = v49;
  uint64_t v26 = _ViewListInputs.traits.getter();
  int v27 = *MEMORY[0x1E4F4E7A0];
  if ((v26 & 0x100000000) == 0) {
    int v27 = v26;
  }
  uint64_t v54 = (ValueMetadata *)__PAIR64__(v37, v38);
  int v55 = v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = type metadata accessor for PlatformItemContextMenuModifier.WriteTrait();
  *(void *)&v33[-16] = v28;
  *(void *)&v33[-8] = swift_getWitnessTable();
  type metadata accessor for _EnvironmentKeyTransformModifier<SymbolVariants>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTraitCollection>, MEMORY[0x1E4F40530], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v54, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_22, (uint64_t)&v33[-32], v28, MEMORY[0x1E4FBC248], v29, MEMORY[0x1E4FBC278], v30);
  LOBYTE(v54) = 0;
  _ViewListInputs.traits.setter();
  uint64_t v54 = v72;
  int v55 = v73;
  long long v56 = v74;
  long long v57 = v75;
  *(void *)&v58[0] = *(void *)v76;
  *(_OWORD *)((char *)v58 + 8) = *(_OWORD *)&v76[8];
  DWORD2(v58[1]) = *(_DWORD *)&v76[24];
  *(void *)&long long v59 = v77;
  BYTE8(v59) = BYTE8(v77);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v31 = swift_bridgeObjectRetain();
  v44(v31, &v54);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t closure #1 in static PlatformItemContextMenuModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for PlatformItemContextMenuModifier();
  void v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t PlatformItemContextMenuModifier.WriteTrait.value.getter@<X0>(int a1@<W1>, void *a2@<X8>)
{
  type metadata accessor for TabContextMenuKey.Storage?(0, &lazy cache variable for type metadata for TabContextMenuKey.Storage?, (void (*)(uint64_t))type metadata accessor for TabContextMenuKey.Storage);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v15 - v5;
  uint64_t v7 = type metadata accessor for PlatformItemList.Item();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)AGGraphGetValue();
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v21);
  outlined init with take of Image.Resolved?((uint64_t)v21, (uint64_t)v20);
  v18[0] = xmmword_18834BB90;
  memset(&v18[1], 0, 48);
  char v19 = 0;
  __n128 v16 = 0uLL;
  uint64_t v17 = 0;
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v20, v18, &v16, 0, 0, (uint64_t)v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v10 + 77) = v11;
  v10[632] = 0;
  outlined consume of PlatformItemList.Item.SystemItem?(*((void **)v10 + 37), *((void *)v10 + 38), *((void *)v10 + 39), *((void *)v10 + 40), *((void *)v10 + 41), *((void *)v10 + 42), *((void *)v10 + 43), *((void *)v10 + 44), *((void *)v10 + 45), *((void *)v10 + 46), *((void *)v10 + 47), *((void *)v10 + 48), *((void *)v10 + 49));
  *(_OWORD *)(v10 + 296) = 0u;
  *(_OWORD *)(v10 + 312) = 0u;
  *((void *)v10 + 41) = 0x3FFFFFFFCLL;
  *((_OWORD *)v10 + 21) = 0u;
  *((_OWORD *)v10 + 22) = 0u;
  *((_OWORD *)v10 + 23) = 0u;
  *((_OWORD *)v10 + 24) = 0u;
  v10[*(int *)(v7 + 128)] = *(unsigned char *)AGGraphGetValue();
  if (*MEMORY[0x1E4F4E7A0] == a1 || (AGGraphGetValue(), (uint64_t v12 = swift_bridgeObjectRetain()) == 0)) {
    ViewTraitCollection.init()();
  }
  else {
    v20[0] = v12;
  }
  outlined init with copy of PlatformItemList.Item((uint64_t)v10, (uint64_t)v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  type metadata accessor for TabContextMenuKey.Storage.Guts(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = type metadata accessor for TabContextMenuKey.Storage(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v6, 0, 1, v13);
  ViewTraitCollection.subscript.setter();
  uint64_t result = outlined destroy of TabContextMenuKey.Storage.Guts((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  *a2 = v20[0];
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemContextMenuModifier<A>.WriteTrait@<X0>(void *a1@<X8>)
{
  return PlatformItemContextMenuModifier.WriteTrait.value.getter(*(_DWORD *)(v1 + 8), a1);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PlatformItemContextMenuModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, ValueMetadata **)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static PlatformItemContextMenuModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

_UNKNOWN **base witness table accessor for ViewModifier in PlatformItemContextMenuModifier<A>()
{
  return &protocol witness table for PlatformItemContextMenuModifier<A>;
}

uint64_t type metadata accessor for PlatformItemContextMenuModifier.WriteTrait()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in PlatformItemContextMenuModifier<A>.WriteTrait()
{
  return swift_getWitnessTable();
}

uint64_t outlined destroy of TabContextMenuKey.Storage.Guts(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void protocol witness for TableColumnContent.tableColumnBody.getter in conformance <> _ConditionalContent<A, B>()
{
}

void protocol witness for TableColumnContent.tableColumnBody.getter in conformance <A> A?()
{
}

void protocol witness for TableColumnContent.tableColumnBody.getter in conformance EmptyTableColumnContent<A>()
{
}

uint64_t EnvironmentValues.tableColumnConfiguration.getter()
{
  return EnvironmentValues.subscript.getter();
}

uint64_t TableColumnList.visitColumns<A>(applying:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 16))(a1, &v7, a4, a6, a3, a5);
}

uint64_t static TableColumnContent._tableColumnCount(inputs:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  int v5 = *((_DWORD *)a1 + 20);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = v2;
  int v11 = v3;
  uint64_t v12 = v4;
  long long v7 = *(_OWORD *)(a1 + 5);
  long long v13 = *(_OWORD *)(a1 + 3);
  long long v14 = v7;
  long long v15 = *(_OWORD *)(a1 + 7);
  uint64_t v16 = a1[9];
  int v17 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(&v10, AssociatedTypeWitness, AssociatedConformanceWitness);
}

{
  return static TableColumnContent._tableColumnCount(inputs:)(a1);
}

uint64_t specialized static TableColumnContent<>._makeContent(content:inputs:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _GraphValue<Never>();
  unsigned int v3 = _GraphValue.value.getter();
  uint64_t v4 = MEMORY[0x1E4FBC248];
  swift_getKeyPath();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  _sSnySiGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Focus<Never, Never>, v4, v4, MEMORY[0x1E4F4E760]);
  lazy protocol witness table accessor for type Focus<Never, Never> and conformance Focus<A, B>();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _GraphValue.init(_:)();
  return specialized static TableColumnContent<>._makeContent(content:inputs:)(v3, a2);
}

uint64_t static TableColumnContent<>._makeContent(content:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int v7 = *a1;
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  int v21 = *((_DWORD *)a2 + 20);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  LODWORD(v29) = v7;
  type metadata accessor for _GraphValue();
  uint64_t v12 = a2[3];
  uint64_t v13 = a2[4];
  long long v19 = *(_OWORD *)(a2 + 7);
  long long v20 = *(_OWORD *)(a2 + 5);
  uint64_t v14 = a2[9];
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  LODWORD(v29) = _GraphValue.value.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v24 = AssociatedTypeWitness;
  uint64_t v25 = type metadata accessor for Focus();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v29, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v23, v25, MEMORY[0x1E4FBC248], v15, MEMORY[0x1E4FBC278], v16);
  swift_release();
  swift_release();
  _GraphValue.init(_:)();
  uint64_t v29 = v8;
  LODWORD(KeyPath) = v9;
  uint64_t v31 = v10;
  uint64_t v32 = v12;
  uint64_t v33 = v13;
  long long v34 = v20;
  long long v35 = v19;
  uint64_t v36 = v14;
  int v37 = v21;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(&v22, &v29, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t sub_187EE6270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 8) + 56))(*(void *)(a3 + a2 - 16));
}

uint64_t sub_187EE62B0()
{
  return 16;
}

__n128 sub_187EE62BC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t static Never._tableColumnCount(inputs:)()
{
  return 0;
}

uint64_t protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance Never(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static TableColumnContent<>._makeContent(content:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance TableColumnDescriptor()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance TableColumnDescriptor(uint64_t a1)
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  static TableColumnDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance TableColumnDescriptor())()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t TableColumnListKey.ConcatenatedTableColumnList.count.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
    while (1)
    {
      outlined init with copy of TableColumnList(v2, (uint64_t)v8);
      uint64_t v4 = v9;
      uint64_t v5 = v10;
      __swift_project_boxed_opaque_existential_1(v8, v9);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
      BOOL v7 = __OFADD__(v3, result);
      v3 += result;
      if (v7) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
      v2 += 40;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t TableColumnListKey.ConcatenatedTableColumnList.visitColumns<A>(applying:from:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return 1;
  }
  uint64_t v9 = a3 + 32;
  swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  while (1)
  {
    outlined init with copy of TableColumnList(v9, (uint64_t)v22);
    uint64_t v11 = v23;
    uint64_t v12 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
    uint64_t v14 = v10 + result;
    if (__OFADD__(v10, result)) {
      break;
    }
    uint64_t v15 = *a2;
    if (*a2 < v14)
    {
      BOOL v16 = __OFSUB__(v15, v10);
      uint64_t v17 = v15 - v10;
      if (v16) {
        goto LABEL_13;
      }
      uint64_t v21 = v17 & ~(v17 >> 63);
      uint64_t v18 = v23;
      uint64_t v19 = v24;
      __swift_project_boxed_opaque_existential_1(v22, v23);
      if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 16))(a1, &v21, a4, a5, v18, v19) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
        return 0;
      }
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v9 += 40;
    uint64_t v10 = v14;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t protocol witness for TableColumnList.count.getter in conformance TableColumnListKey.ConcatenatedTableColumnList()
{
  return TableColumnListKey.ConcatenatedTableColumnList.count.getter(*v0);
}

uint64_t protocol witness for TableColumnList.visitColumns<A>(applying:from:) in conformance TableColumnListKey.ConcatenatedTableColumnList(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return TableColumnListKey.ConcatenatedTableColumnList.visitColumns<A>(applying:from:)(a1, a2, *v4, a3, a4);
}

void protocol witness for static PreferenceKey.defaultValue.getter in conformance TableColumnListKey(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &unk_1ED429FD8;
  *(void *)(a1 + 32) = &protocol witness table for TableColumnListKey.EmptyTableColumnList;
}

void *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance TableColumnListKey(uint64_t a1, void (*a2)(void *__return_ptr, uint64_t))
{
  uint64_t v4 = outlined init with take of OptionalBinaryInteger((long long *)a1, (uint64_t)v7);
  a2(v6, v4);
  uint64_t result = specialized TableColumnListKey.ConcatenatedTableColumnList.init(_:_:)((uint64_t)v7, (uint64_t)v6);
  *(void *)(a1 + 24) = &unk_1ED429F90;
  *(void *)(a1 + 32) = &protocol witness table for TableColumnListKey.ConcatenatedTableColumnList;
  *(void *)a1 = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TableColumnID()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TableColumnID()
{
  return Hasher._finalize()();
}

void AnyTableColumnIDs.startIndex.getter()
{
}

void AnyTableColumnIDs.endIndex.getter()
{
}

void AnyTableColumnIDs.subscript.getter()
{
}

Swift::Int __swiftcall AnyTableColumnIDs.index(before:)(Swift::Int before)
{
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int __swiftcall AnyTableColumnIDs.index(after:)(Swift::Int after)
{
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance AnyTableColumnIDs@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v2 + 112))(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance AnyTableColumnIDs(uint64_t *a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(**(void **)v1 + 112))(*a1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance AnyTableColumnIDs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 88))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance AnyTableColumnIDs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 96))();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance AnyTableColumnIDs(void **a1, void *a2))(uint64_t *a1)
{
  *a1 = malloc(0x28uLL);
  (*(void (**)(void))(**(void **)v2 + 104))(*a2);
  return protocol witness for Collection.subscript.read in conformance AnyTableColumnIDs;
}

void protocol witness for Collection.subscript.read in conformance AnyTableColumnIDs(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  outlined destroy of AccessibilityRelationshipScope.Key(*a1);

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance AnyTableColumnIDs@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *v2;
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v6 + 88))();
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v6 + 96))();
  if (result < v7)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v4 < v7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (result < v5)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;

  return swift_retain();
}

uint64_t protocol witness for Collection.indices.getter in conformance AnyTableColumnIDs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v3 + 88))();
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v3 + 96))();
  if (result < v4)
  {
    __break(1u);
  }
  else
  {
    *a1 = v4;
    a1[1] = result;
  }
  return result;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance AnyTableColumnIDs@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = *v3;
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v6 + 88))();
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v6 + 96))();
    if (v5 >= v7 && (uint64_t)result >= v5)
    {
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance AnyTableColumnIDs@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance AnyTableColumnIDs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = *v2;
  char v6 = *(uint64_t (**)(void))(*(void *)v5 + 88);
  uint64_t v7 = v6();
  uint64_t v8 = *(uint64_t (**)(void))(*(void *)v5 + 96);
  uint64_t result = v8();
  if (v3 < v7 || result < v3)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v11 = ((uint64_t (*)(uint64_t))v6)(result);
  uint64_t result = v8();
  if (v4 < v11 || result < v4) {
    goto LABEL_12;
  }
  uint64_t result = v4 - v3;
  if (__OFSUB__(v4, v3)) {
LABEL_13:
  }
    __break(1u);
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance AnyTableColumnIDs@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v2 + 120))(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance AnyTableColumnIDs(uint64_t *a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(**(void **)v1 + 120))(*a1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AnyTableColumnIDs@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 88);
  uint64_t v5 = swift_retain();
  uint64_t v6 = v4(v5);
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v6;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AnyTableColumnIDs(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AnyTableColumnIDs()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AnyTableColumnIDs(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AnyTableColumnIDs()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t WrappedTableColumnIDs.startIndex.getter()
{
  return WrappedTableColumnIDs.startIndex.getter(MEMORY[0x1E4FBB620]);
}

uint64_t WrappedTableColumnIDs.endIndex.getter()
{
  return WrappedTableColumnIDs.startIndex.getter(MEMORY[0x1E4FBB648]);
}

uint64_t WrappedTableColumnIDs.startIndex.getter(void (*a1)(uint64_t *__return_ptr, uint64_t, void))
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 128);
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v10 - v7, (uint64_t)v1 + *(void *)(v3 + 144), v4, v6);
  a1(&v11, v4, *(void *)(*(void *)(*(void *)(v3 + 136) + 8) + 8));
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v11;
}

uint64_t WrappedTableColumnIDs.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 128);
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = &v15[-v9 - 8];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v7 + 16))(&v15[-v9 - 8], (uint64_t)v2 + *(void *)(v5 + 144), v6, v8);
  uint64_t v16 = a1;
  uint64_t v11 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
  outlined init with copy of DropInfo(v12, a2);
  v11(v15, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

Swift::Int __swiftcall WrappedTableColumnIDs.index(before:)(Swift::Int before)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 128);
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x1F4188790](before);
  double v8 = (char *)v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)v10 - v7, (uint64_t)v1 + *(void *)(v3 + 144), v4, v6);
  v10[0] = before;
  dispatch thunk of BidirectionalCollection.index(before:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v10[1];
}

Swift::Int __swiftcall WrappedTableColumnIDs.index(after:)(Swift::Int after)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 128);
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x1F4188790](after);
  double v8 = (char *)v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)v10 - v7, (uint64_t)v1 + *(void *)(v3 + 144), v4, v6);
  v10[0] = after;
  dispatch thunk of Collection.index(after:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v10[1];
}

uint64_t TableColumnList.visitAll<A>(applying:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(a1, &v6, a3, a5, a2, a4);
}

uint64_t static TableColumnConfiguration.Key.value(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v3 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F40930];
    _sSnySiGMaTm_1(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnDefaultVisibilityKey>, (uint64_t)&type metadata for TableColumnDefaultVisibilityKey, (uint64_t)&protocol witness table for TableColumnDefaultVisibilityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableColumnDisabledCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnDefaultVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnDefaultVisibilityKey>, (uint64_t)&type metadata for TableColumnDefaultVisibilityKey, (uint64_t)&protocol witness table for TableColumnDefaultVisibilityKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
    swift_release();
    char v11 = v14;
    _sSnySiGMaTm_1(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnCustomizationIDKey>, (uint64_t)&type metadata for TableColumnCustomizationIDKey, (uint64_t)&protocol witness table for TableColumnCustomizationIDKey, v3);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableColumnDisabledCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnCustomizationIDKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnCustomizationIDKey>, (uint64_t)&type metadata for TableColumnCustomizationIDKey, (uint64_t)&protocol witness table for TableColumnCustomizationIDKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    uint64_t v4 = v16;
    uint64_t v9 = v15;
    uint64_t v10 = v14;
    uint64_t v5 = v17;
    char v6 = v18;
    _sSnySiGMaTm_1(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnDisabledCustomizationBehaviorKey>, (uint64_t)&type metadata for TableColumnDisabledCustomizationBehaviorKey, (uint64_t)&protocol witness table for TableColumnDisabledCustomizationBehaviorKey, v3);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableColumnDisabledCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnDisabledCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnDisabledCustomizationBehaviorKey>, (uint64_t)&type metadata for TableColumnDisabledCustomizationBehaviorKey, (uint64_t)&protocol witness table for TableColumnDisabledCustomizationBehaviorKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    uint64_t v7 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F40930];
    _sSnySiGMaTm_1(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnDefaultVisibilityKey>, (uint64_t)&type metadata for TableColumnDefaultVisibilityKey, (uint64_t)&protocol witness table for TableColumnDefaultVisibilityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableColumnDisabledCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnDefaultVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnDefaultVisibilityKey>, (uint64_t)&type metadata for TableColumnDefaultVisibilityKey, (uint64_t)&protocol witness table for TableColumnDefaultVisibilityKey);
    swift_retain_n();
    PropertyList.subscript.getter();
    swift_release();
    char v11 = v14;
    _sSnySiGMaTm_1(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnCustomizationIDKey>, (uint64_t)&type metadata for TableColumnCustomizationIDKey, (uint64_t)&protocol witness table for TableColumnCustomizationIDKey, v7);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableColumnDisabledCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnCustomizationIDKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnCustomizationIDKey>, (uint64_t)&type metadata for TableColumnCustomizationIDKey, (uint64_t)&protocol witness table for TableColumnCustomizationIDKey);
    swift_retain_n();
    PropertyList.subscript.getter();
    swift_release_n();
    uint64_t v4 = v16;
    uint64_t v9 = v15;
    uint64_t v10 = v14;
    uint64_t v5 = v17;
    char v6 = v18;
    _sSnySiGMaTm_1(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnDisabledCustomizationBehaviorKey>, (uint64_t)&type metadata for TableColumnDisabledCustomizationBehaviorKey, (uint64_t)&protocol witness table for TableColumnDisabledCustomizationBehaviorKey, v7);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableColumnDisabledCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnDisabledCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnDisabledCustomizationBehaviorKey>, (uint64_t)&type metadata for TableColumnDisabledCustomizationBehaviorKey, (uint64_t)&protocol witness table for TableColumnDisabledCustomizationBehaviorKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  lazy protocol witness table accessor for type TableColumnAlignment.Resolved.Key and conformance TableColumnAlignment.Resolved.Key();
  swift_retain();
  swift_retain();
  EnvironmentValues.subscript.getter();
  lazy protocol witness table accessor for type TableColumnAlignment.Resolved.TextAlignmentKey and conformance TableColumnAlignment.Resolved.TextAlignmentKey();
  EnvironmentValues.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *(unsigned char *)a2 = v11;
  *(void *)(a2 + 8) = v10;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v5;
  *(unsigned char *)(a2 + 40) = v6;
  *(void *)(a2 + 48) = v13;
  *(unsigned char *)(a2 + 56) = v12;
  *(unsigned char *)(a2 + 57) = v12;
  return result;
}

void protocol witness for TableColumnContent.tableColumnBody.getter in conformance TupleTableColumnContent<A, B, C>()
{
}

void protocol witness for TableColumnContent.tableColumnBody.getter in conformance <A> Group<A>()
{
}

_UNKNOWN **associated type witness table accessor for TableColumnContent.TableColumnBody : TableColumnContent in Never()
{
  return &protocol witness table for Never;
}

uint64_t associated type witness table accessor for TableColumnContent.TableColumnSortComparator : SortComparator in Never()
{
  return MEMORY[0x1E4F28138];
}

uint64_t associated type witness table accessor for TableColumnContent.TableRowValue : Identifiable in Never()
{
  return MEMORY[0x1E4FBC270];
}

uint64_t default associated conformance accessor for TableColumnContent.TableColumnContent.TableColumnSortComparator: SortComparator()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t default associated conformance accessor for TableColumnContent.TableColumnContent.TableRowValue: Identifiable()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t dispatch thunk of TableColumnContent.tableColumnBody.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of static TableColumnContent._makeContent(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of static TableColumnContent._tableColumnCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t initializeWithCopy for _TableColumnInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _TableColumnInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

__n128 __swift_memcpy84_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for _TableColumnInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for _TableColumnInputs(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 84)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _TableColumnInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 80) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 84) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 84) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _TableColumnInputs()
{
  return &type metadata for _TableColumnInputs;
}

ValueMetadata *type metadata accessor for _TableColumnOutputs()
{
  return &type metadata for _TableColumnOutputs;
}

uint64_t type metadata accessor for TableColumnBuilder()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AnyTableColumnIDs()
{
  return self;
}

uint64_t type metadata accessor for WrappedTableColumnIDs()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for TableColumnID()
{
  return &type metadata for TableColumnID;
}

ValueMetadata *type metadata accessor for TableColumnDescriptor()
{
  return &type metadata for TableColumnDescriptor;
}

ValueMetadata *type metadata accessor for TableColumnListKey()
{
  return &type metadata for TableColumnListKey;
}

unint64_t lazy protocol witness table accessor for type TableColumnID and conformance TableColumnID()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnID and conformance TableColumnID;
  if (!lazy protocol witness table cache variable for type TableColumnID and conformance TableColumnID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnID and conformance TableColumnID);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AnyTableColumnIDs()
{
  return lazy protocol witness table accessor for type IndexingIterator<AnyTableColumnIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<AnyTableColumnIDs> and conformance IndexingIterator<A>, 255, type metadata accessor for IndexingIterator<AnyTableColumnIDs>);
}

void type metadata accessor for IndexingIterator<AnyTableColumnIDs>(uint64_t a1)
{
}

uint64_t base witness table accessor for Sequence in AnyTableColumnIDs(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type IndexingIterator<AnyTableColumnIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type AnyTableColumnIDs and conformance AnyTableColumnIDs, a2, (void (*)(uint64_t))type metadata accessor for AnyTableColumnIDs);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AnyTableColumnIDs()
{
  return _sSnySiGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_0(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AnyTableColumnIDs()
{
  return lazy protocol witness table accessor for type IndexingIterator<AnyTableColumnIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<AnyTableColumnIDs> and conformance Slice<A>, 255, type metadata accessor for Slice<AnyTableColumnIDs>);
}

void type metadata accessor for Slice<AnyTableColumnIDs>(uint64_t a1)
{
}

void type metadata accessor for IndexingIterator<AnyTableColumnIDs>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for AnyTableColumnIDs();
    uint64_t v8 = lazy protocol witness table accessor for type IndexingIterator<AnyTableColumnIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type AnyTableColumnIDs and conformance AnyTableColumnIDs, v7, (void (*)(uint64_t))type metadata accessor for AnyTableColumnIDs);
    unint64_t v9 = a3(a1, v6, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t base witness table accessor for Collection in AnyTableColumnIDs(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type IndexingIterator<AnyTableColumnIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type AnyTableColumnIDs and conformance AnyTableColumnIDs, a2, (void (*)(uint64_t))type metadata accessor for AnyTableColumnIDs);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AnyTableColumnIDs()
{
  return _sSnySiGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_0(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t _sSnySiGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    _sSnySiGMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AnyTableColumnIDs()
{
  return lazy protocol witness table accessor for type Slice<AnyTableColumnIDs> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<AnyTableColumnIDs> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type AnyTableColumnIDs and conformance AnyTableColumnIDs);
}

uint64_t lazy protocol witness table accessor for type AnyTableColumnIDs and conformance AnyTableColumnIDs(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type IndexingIterator<AnyTableColumnIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type AnyTableColumnIDs and conformance AnyTableColumnIDs, a2, (void (*)(uint64_t))type metadata accessor for AnyTableColumnIDs);
}

{
  return lazy protocol witness table accessor for type IndexingIterator<AnyTableColumnIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type AnyTableColumnIDs and conformance AnyTableColumnIDs, a2, (void (*)(uint64_t))type metadata accessor for AnyTableColumnIDs);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in AnyTableColumnIDs()
{
  return _sSnySiGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in AnyTableColumnIDs()
{
  return lazy protocol witness table accessor for type Slice<AnyTableColumnIDs> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<AnyTableColumnIDs> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type AnyTableColumnIDs and conformance AnyTableColumnIDs);
}

uint64_t lazy protocol witness table accessor for type Slice<AnyTableColumnIDs> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<AnyTableColumnIDs>(255);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<AnyTableColumnIDs> and conformance IndexingIterator<A>(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnDescriptor and conformance TableColumnDescriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnDescriptor and conformance TableColumnDescriptor;
  if (!lazy protocol witness table cache variable for type TableColumnDescriptor and conformance TableColumnDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnDescriptor and conformance TableColumnDescriptor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnDescriptor and conformance TableColumnDescriptor;
  if (!lazy protocol witness table cache variable for type TableColumnDescriptor and conformance TableColumnDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnDescriptor and conformance TableColumnDescriptor);
  }
  return result;
}

BOOL specialized static TableColumnConfiguration.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v4 = *((void *)a1 + 3);
  uint64_t v5 = *((void *)a1 + 4);
  int v6 = a1[40];
  uint64_t v7 = *((void *)a1 + 6);
  int v8 = a1[56];
  int v9 = a1[57];
  uint64_t v11 = *((void *)a2 + 1);
  uint64_t v10 = *((void *)a2 + 2);
  uint64_t v12 = *((void *)a2 + 3);
  uint64_t v13 = *((void *)a2 + 4);
  int v14 = a2[40];
  uint64_t v15 = *((void *)a2 + 6);
  int v16 = a2[56];
  int v17 = a2[57];
  if (v6 == 255)
  {
    if (v14 == 255) {
      goto LABEL_22;
    }
LABEL_13:
    outlined copy of TableColumnCustomizationID?(*((void *)a1 + 1), v2, v4, v5, v6);
    outlined copy of TableColumnCustomizationID?(v11, v10, v12, v13, v14);
    outlined consume of TableColumnCustomizationID?(v3, v2, v4, v5, v6);
    outlined consume of TableColumnCustomizationID?(v11, v10, v12, v13, v14);
    return 0;
  }
  if (v14 == 255) {
    goto LABEL_13;
  }
  if ((v6 & 1) == 0)
  {
    if ((v14 & 1) == 0)
    {
      if (v3 != v11 || v2 != v10)
      {
        uint64_t v18 = *((void *)a2 + 6);
        int v19 = a2[56];
        uint64_t v20 = *((void *)a1 + 6);
        int v21 = a2[57];
        int v22 = a1[56];
        int v23 = a1[57];
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL result = 0;
        if ((v24 & 1) == 0) {
          return result;
        }
        if (v20 != v18) {
          return result;
        }
        int v9 = v23;
        int v17 = v21;
        if (v22 != v19) {
          return result;
        }
        return v9 == v17;
      }
      goto LABEL_22;
    }
    return 0;
  }
  if ((v14 & 1) == 0) {
    return 0;
  }
  if (v3 != v11 || v2 != v10)
  {
    int v26 = a1[57];
    int v27 = a1[56];
    int v28 = a2[57];
    uint64_t v29 = *((void *)a1 + 6);
    int v30 = a2[56];
    uint64_t v31 = *((void *)a2 + 6);
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v15 = v31;
    int v16 = v30;
    uint64_t v7 = v29;
    int v17 = v28;
    int v8 = v27;
    int v9 = v26;
    char v33 = v32;
    BOOL result = 0;
    if ((v33 & 1) == 0) {
      return result;
    }
  }
  if (v4 != v12 || v5 != v13)
  {
    uint64_t v34 = v15;
    int v35 = v16;
    uint64_t v36 = v7;
    int v37 = v17;
    int v38 = v8;
    int v39 = v9;
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL result = 0;
    if ((v40 & 1) != 0 && v36 == v34)
    {
      int v9 = v39;
      int v17 = v37;
      if (v38 == v35) {
        return v9 == v17;
      }
    }
    return result;
  }
LABEL_22:
  BOOL result = 0;
  if (v7 == v15 && v8 == v16) {
    return v9 == v17;
  }
  return result;
}

void *specialized TableColumnListKey.ConcatenatedTableColumnList.init(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of TableColumnList(a1, (uint64_t)v10);
  type metadata accessor for TableColumnList();
  if (swift_dynamicCast())
  {
    uint64_t v4 = (uint64_t)v11;
  }
  else
  {
    type metadata accessor for _ContiguousArrayStorage<TableColumnList>();
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_18834BB80;
    outlined init with copy of TableColumnList(a1, v4 + 32);
  }
  uint64_t v11 = (void *)v4;
  outlined init with copy of TableColumnList(a2, (uint64_t)v10);
  if (swift_dynamicCast())
  {
    specialized Array.append<A>(contentsOf:)(v9);
    __swift_destroy_boxed_opaque_existential_1(a2);
    __swift_destroy_boxed_opaque_existential_1(a1);
    return v11;
  }
  else
  {
    outlined init with copy of TableColumnList(a2, (uint64_t)v10);
    uint64_t v5 = v11;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    }
    unint64_t v7 = v5[2];
    unint64_t v6 = v5[3];
    if (v7 >= v6 >> 1) {
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
    }
    v5[2] = v7 + 1;
    outlined init with take of OptionalBinaryInteger(v10, (uint64_t)&v5[5 * v7 + 4]);
    __swift_destroy_boxed_opaque_existential_1(a2);
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return v5;
}

void type metadata accessor for _ContiguousArrayStorage<TableColumnList>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<TableColumnList>)
  {
    type metadata accessor for TableColumnList();
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<TableColumnList>);
    }
  }
}

void type metadata accessor for _GraphValue<Never>()
{
  if (!lazy cache variable for type metadata for _GraphValue<Never>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Never>);
    }
  }
}

ValueMetadata *type metadata accessor for TableColumnConfiguration.Key()
{
  return &type metadata for TableColumnConfiguration.Key;
}

uint64_t destroy for TableColumnConfiguration(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 40);
  if (v1 != 255) {
    return outlined consume of TableColumnCustomizationID.Base(*(void *)(result + 8), *(void *)(result + 16), *(void *)(result + 24), *(void *)(result + 32), v1 & 1);
  }
  return result;
}

uint64_t initializeWithCopy for TableColumnConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 40);
  if (v4 == 255)
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v5;
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  }
  else
  {
    char v6 = v4 & 1;
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = *(void *)(a2 + 16);
    uint64_t v9 = *(void *)(a2 + 24);
    uint64_t v10 = *(void *)(a2 + 32);
    outlined copy of TableColumnCustomizationID.Base(v7, v8, v9, v10, v4 & 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v10;
    *(unsigned char *)(a1 + 40) = v6;
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for TableColumnConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = a1 + 8;
  long long v5 = (long long *)(a2 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v6 == 255)
    {
      long long v9 = *v5;
      long long v10 = *(_OWORD *)(a2 + 24);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(_OWORD *)uint64_t v4 = v9;
      *(_OWORD *)(a1 + 24) = v10;
    }
    else
    {
      char v21 = v6 & 1;
      uint64_t v22 = *(void *)(a2 + 8);
      uint64_t v23 = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)(a2 + 24);
      uint64_t v25 = *(void *)(a2 + 32);
      outlined copy of TableColumnCustomizationID.Base(v22, v23, v24, v25, v6 & 1);
      *(void *)(a1 + 8) = v22;
      *(void *)(a1 + 16) = v23;
      *(void *)(a1 + 24) = v24;
      *(void *)(a1 + 32) = v25;
      *(unsigned char *)(a1 + 40) = v21;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of TableColumnCustomizationID(a1 + 8);
    char v7 = *((unsigned char *)v5 + 32);
    long long v8 = v5[1];
    *(_OWORD *)uint64_t v4 = *v5;
    *(_OWORD *)(v4 + 16) = v8;
    *(unsigned char *)(v4 + 32) = v7;
  }
  else
  {
    char v11 = v6 & 1;
    uint64_t v12 = *(void *)(a2 + 8);
    uint64_t v13 = *(void *)(a2 + 16);
    uint64_t v14 = *(void *)(a2 + 24);
    uint64_t v15 = *(void *)(a2 + 32);
    outlined copy of TableColumnCustomizationID.Base(v12, v13, v14, v15, v6 & 1);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = *(void *)(a1 + 16);
    uint64_t v18 = *(void *)(a1 + 24);
    uint64_t v19 = *(void *)(a1 + 32);
    char v20 = *(unsigned char *)(a1 + 40);
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v13;
    *(void *)(a1 + 24) = v14;
    *(void *)(a1 + 32) = v15;
    *(unsigned char *)(a1 + 40) = v11;
    outlined consume of TableColumnCustomizationID.Base(v16, v17, v18, v19, v20);
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

uint64_t assignWithTake for TableColumnConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  int v6 = *(unsigned __int8 *)(a1 + 40);
  if (v6 != 255)
  {
    int v7 = *(unsigned __int8 *)(a2 + 40);
    if (v7 != 255)
    {
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      uint64_t v12 = *(void *)(a1 + 32);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(unsigned char *)(a1 + 40) = v7 & 1;
      outlined consume of TableColumnCustomizationID.Base(v9, v10, v11, v12, v6 & 1);
      goto LABEL_6;
    }
    outlined destroy of TableColumnCustomizationID(a1 + 8);
  }
  long long v8 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
  *(_OWORD *)(v4 + 16) = v8;
  *(unsigned char *)(v4 + 32) = *(unsigned char *)(v5 + 32);
LABEL_6:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[58]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TableColumnConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(void *)BOOL result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 58) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 58) = 0;
    }
    if (a2) {
      *(unsigned char *)BOOL result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TableColumnConfiguration()
{
  return &type metadata for TableColumnConfiguration;
}

void *type metadata accessor for TableColumnListKey.EmptyTableColumnList()
{
  return &unk_1ED429FD8;
}

void *type metadata accessor for TableColumnListKey.ConcatenatedTableColumnList()
{
  return &unk_1ED429F90;
}

unint64_t lazy protocol witness table accessor for type TableColumnConfiguration and conformance TableColumnConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnConfiguration and conformance TableColumnConfiguration;
  if (!lazy protocol witness table cache variable for type TableColumnConfiguration and conformance TableColumnConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnConfiguration and conformance TableColumnConfiguration);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TableColumnDisabledCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    _sSnySiGMaTm_1(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void _sSnySiGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TableColumnAlignment.Resolved.Key and conformance TableColumnAlignment.Resolved.Key()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnAlignment.Resolved.Key and conformance TableColumnAlignment.Resolved.Key;
  if (!lazy protocol witness table cache variable for type TableColumnAlignment.Resolved.Key and conformance TableColumnAlignment.Resolved.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnAlignment.Resolved.Key and conformance TableColumnAlignment.Resolved.Key);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnAlignment.Resolved.TextAlignmentKey and conformance TableColumnAlignment.Resolved.TextAlignmentKey()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnAlignment.Resolved.TextAlignmentKey and conformance TableColumnAlignment.Resolved.TextAlignmentKey;
  if (!lazy protocol witness table cache variable for type TableColumnAlignment.Resolved.TextAlignmentKey and conformance TableColumnAlignment.Resolved.TextAlignmentKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnAlignment.Resolved.TextAlignmentKey and conformance TableColumnAlignment.Resolved.TextAlignmentKey);
  }
  return result;
}

uint64_t TabSection.init(header:content:footer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t v12 = type metadata accessor for TabSection();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a7 + *(int *)(v12 + 52), a2, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7 + *(int *)(v12 + 56), a3, a6);
}

uint64_t TabSection<>._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v6 = v5;
  v24[0] = a4;
  v24[1] = a3;
  v24[2] = a2;
  uint64_t v25 = a5;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v17 + 16);
  double v19 = MEMORY[0x1F4188790](v17);
  char v21 = (char *)v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))(v21, v6, v18, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v6 + *(int *)(a1 + 52), v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v6 + *(int *)(a1 + 56), v8);
  return TabSection<>.TabSectionView.init(namespace:header:content:footer:)(0, (uint64_t)v21, (uint64_t)v16, (uint64_t)v11, v18, v13, v8, v25);
}

uint64_t TabSection<>.TabSectionView.init(namespace:header:content:footer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  *(void *)a8 = a1;
  uint64_t v15 = (int *)type metadata accessor for TabSection<>.TabSectionView();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(&a8[v15[19]], a2, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(&a8[v15[20]], a3, a6);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(&a8[v15[21]], a4, a7);
}

uint64_t TabSection<>.TabSectionView.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v3 = a1[7];
  uint64_t v28 = a1[3];
  uint64_t v29 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v30 = a1[2];
  type metadata accessor for ModifiedContent();
  _s7SwiftUI21ViewInputFlagModifierVyAA27AccessibilityShowsLabelIconVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon, (uint64_t)&type metadata for AccessibilityShowsLabelIcon, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v4 = type metadata accessor for ModifiedContent();
  uint64_t v32 = a1[6];
  uint64_t v70 = v32;
  int v71 = &protocol witness table for UpdateDefaultTabFill;
  uint64_t v31 = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  long long v69 = &protocol witness table for ViewInputFlagModifier<A>;
  uint64_t v66 = swift_getWitnessTable();
  long long v67 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v64 = swift_getWitnessTable();
  uint64_t v65 = &protocol witness table for AccessibilityDetachedPropertyWriterModifier;
  uint64_t v58 = &type metadata for LabelPlatformItemsStrategy;
  long long v59 = (ValueMetadata *)v4;
  uint64_t v60 = &type metadata for TabItem.TraitKey;
  int v61 = &protocol witness table for LabelPlatformItemsStrategy;
  uint64_t v62 = swift_getWitnessTable();
  int v63 = &protocol witness table for TabItem.TraitKey;
  type metadata accessor for PlatformItemTraitWriter();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ContainerValueWritingModifier<TabItemLabel_v0?>();
  type metadata accessor for ModifiedContent();
  uint64_t v5 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F408B8];
  type metadata accessor for _TraitWritingModifier<IsSectionHeaderTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsSectionHeaderTraitKey>, MEMORY[0x1E4F40C88], MEMORY[0x1E4F40C80], MEMORY[0x1E4F408B8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _TraitWritingModifier<IsSectionHeaderTraitKey>(255, &lazy cache variable for type metadata for StyleContextWriter<SectionHeaderStyleContext>, MEMORY[0x1E4F40EC0], MEMORY[0x1E4F40EB8], MEMORY[0x1E4F40318]);
  type metadata accessor for ModifiedContent();
  int v26 = a1;
  uint64_t v6 = a1[5];
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v27 = v6;
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  type metadata accessor for _TraitWritingModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  uint64_t v57 = AssociatedConformanceWitness;
  swift_getWitnessTable();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  type metadata accessor for _TraitWritingModifier();
  type metadata accessor for ModifiedContent();
  uint64_t v25 = a1[4];
  type metadata accessor for ModifiedContent();
  type metadata accessor for _TraitWritingModifier<IsSectionHeaderTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsCompactTabRepresentationTraitKey>, (uint64_t)&type metadata for IsCompactTabRepresentationTraitKey, (uint64_t)&protocol witness table for IsCompactTabRepresentationTraitKey, v5);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  uint64_t v8 = type metadata accessor for Group();
  uint64_t v56 = swift_getWitnessTable();
  uint64_t v9 = swift_getWitnessTable();
  v23[1] = MEMORY[0x1E4F41450];
  uint64_t v24 = (ValueMetadata *)v9;
  swift_getOpaqueTypeMetadata2();
  _s7SwiftUI21ViewInputFlagModifierVyAA27AccessibilityShowsLabelIconVGMaTm_0(255, &lazy cache variable for type metadata for StyleContextWriter<TabSectionStyleContext>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSectionStyleContext and conformance TabSectionStyleContext, (uint64_t)&type metadata for TabSectionStyleContext, MEMORY[0x1E4F40318]);
  uint64_t v58 = &type metadata for InAdaptableTabViewContext;
  long long v59 = (ValueMetadata *)type metadata accessor for ModifiedContent();
  uint64_t v60 = (ValueMetadata *)AssociatedTypeWitness;
  int v61 = (_UNKNOWN **)lazy protocol witness table accessor for type InAdaptableTabViewContext and conformance InAdaptableTabViewContext();
  uint64_t v10 = type metadata accessor for StaticIf();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v23 - v15;
  uint64_t v44 = v30;
  uint64_t v45 = v28;
  uint64_t v46 = v25;
  uint64_t v47 = v27;
  uint64_t v48 = v32;
  uint64_t v49 = v29;
  uint64_t v50 = v26[8];
  uint64_t v51 = v33;
  uint64_t v36 = v30;
  uint64_t v37 = v28;
  uint64_t v38 = v25;
  uint64_t v39 = v27;
  uint64_t v40 = v32;
  uint64_t v41 = v29;
  uint64_t v42 = v50;
  uint64_t v43 = v33;
  uint64_t v58 = (ValueMetadata *)v8;
  long long v59 = &type metadata for TabSectionIdentifiersTraitKey;
  uint64_t v60 = v24;
  int v61 = &protocol witness table for TabSectionIdentifiersTraitKey;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  unint64_t v18 = lazy protocol witness table accessor for type StyleContextWriter<TabSectionStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v54 = OpaqueTypeConformance2;
  unint64_t v55 = v18;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v22 = swift_getAssociatedConformanceWitness();
  StaticIf<>.init(_:then:else:)();
  uint64_t v52 = v21;
  uint64_t v53 = v22;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v13);
  double v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v16);
  return ((uint64_t (*)(char *, uint64_t))v19)(v16, v10);
}

uint64_t closure #1 in TabSection<>.TabSectionView.body.getter@<X0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, ValueMetadata *a3@<X2>, ValueMetadata *a4@<X3>, _UNKNOWN **a5@<X4>, uint64_t a6@<X5>, _UNKNOWN **a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v74 = a8;
  long long v68 = a4;
  uint64_t v73 = a1;
  uint64_t v78 = a9;
  uint64_t v99 = a2;
  uint64_t v100 = a3;
  uint64_t v101 = a4;
  uint64_t v102 = a5;
  uint64_t v103 = a6;
  long long v104 = a7;
  uint64_t v70 = a6;
  uint64_t v105 = a8;
  uint64_t v77 = type metadata accessor for TabSection<>.TabSectionView();
  uint64_t v75 = *(void *)(v77 - 8);
  uint64_t v76 = *(void *)(v75 + 64);
  MEMORY[0x1F4188790](v77);
  int v71 = (char *)&v53 - v14;
  uint64_t v65 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  long long v67 = a2;
  type metadata accessor for ModifiedContent();
  _s7SwiftUI21ViewInputFlagModifierVyAA27AccessibilityShowsLabelIconVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon, (uint64_t)&type metadata for AccessibilityShowsLabelIcon, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v97 = a6;
  uint64_t v98 = &protocol witness table for UpdateDefaultTabFill;
  uint64_t v72 = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v96 = &protocol witness table for ViewInputFlagModifier<A>;
  uint64_t v93 = swift_getWitnessTable();
  uint64_t v94 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v91 = swift_getWitnessTable();
  uint64_t v92 = &protocol witness table for AccessibilityDetachedPropertyWriterModifier;
  uint64_t v16 = swift_getWitnessTable();
  uint64_t v99 = &type metadata for LabelPlatformItemsStrategy;
  uint64_t v100 = (ValueMetadata *)v15;
  uint64_t v101 = &type metadata for TabItem.TraitKey;
  uint64_t v102 = &protocol witness table for LabelPlatformItemsStrategy;
  uint64_t v103 = v16;
  long long v104 = &protocol witness table for TabItem.TraitKey;
  type metadata accessor for PlatformItemTraitWriter();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ContainerValueWritingModifier<TabItemLabel_v0?>();
  type metadata accessor for ModifiedContent();
  uint64_t v17 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F408B8];
  type metadata accessor for _TraitWritingModifier<IsSectionHeaderTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsSectionHeaderTraitKey>, MEMORY[0x1E4F40C88], MEMORY[0x1E4F40C80], MEMORY[0x1E4F408B8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _TraitWritingModifier<IsSectionHeaderTraitKey>(255, &lazy cache variable for type metadata for StyleContextWriter<SectionHeaderStyleContext>, MEMORY[0x1E4F40EC0], MEMORY[0x1E4F40EB8], MEMORY[0x1E4F40318]);
  type metadata accessor for ModifiedContent();
  unint64_t v18 = a3;
  uint64_t v54 = a3;
  double v19 = a5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  type metadata accessor for _TraitWritingModifier();
  type metadata accessor for ModifiedContent();
  uint64_t v53 = v19;
  type metadata accessor for Optional();
  uint64_t v90 = AssociatedConformanceWitness;
  swift_getWitnessTable();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  type metadata accessor for _TraitWritingModifier();
  type metadata accessor for ModifiedContent();
  uint64_t v21 = v68;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _TraitWritingModifier<IsSectionHeaderTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsCompactTabRepresentationTraitKey>, (uint64_t)&type metadata for IsCompactTabRepresentationTraitKey, (uint64_t)&protocol witness table for IsCompactTabRepresentationTraitKey, v17);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  uint64_t v22 = type metadata accessor for Group();
  uint64_t v61 = v22;
  uint64_t AssociatedTypeWitness = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  unint64_t v55 = (char *)&v53 - v23;
  uint64_t v89 = swift_getWitnessTable();
  uint64_t v60 = swift_getWitnessTable();
  uint64_t v99 = (ValueMetadata *)v22;
  uint64_t v100 = &type metadata for TabSectionIdentifiersTraitKey;
  uint64_t v101 = (ValueMetadata *)v60;
  uint64_t v102 = &protocol witness table for TabSectionIdentifiersTraitKey;
  uint64_t v63 = MEMORY[0x1E4F41450];
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v66 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x1F4188790](OpaqueTypeMetadata2);
  uint64_t v56 = (char *)&v53 - v24;
  _s7SwiftUI21ViewInputFlagModifierVyAA27AccessibilityShowsLabelIconVGMaTm_0(255, &lazy cache variable for type metadata for StyleContextWriter<TabSectionStyleContext>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSectionStyleContext and conformance TabSectionStyleContext, (uint64_t)&type metadata for TabSectionStyleContext, MEMORY[0x1E4F40318]);
  uint64_t v62 = type metadata accessor for ModifiedContent();
  uint64_t v64 = *(void *)(v62 - 8);
  MEMORY[0x1F4188790](v62);
  uint64_t v57 = (char *)&v53 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  long long v59 = (char *)&v53 - v27;
  uint64_t v28 = v67;
  int v79 = v67;
  char v80 = v18;
  int v81 = v21;
  uint64_t v82 = v19;
  uint64_t v29 = v70;
  uint64_t v83 = v70;
  uint64_t v30 = v65;
  uint64_t v84 = v65;
  uint64_t v31 = v74;
  uint64_t v32 = v73;
  uint64_t v85 = v74;
  uint64_t v86 = v73;
  Group<A>.init(content:)();
  uint64_t v33 = v75;
  uint64_t v34 = v71;
  uint64_t v35 = v32;
  uint64_t v36 = v77;
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v71, v35, v77);
  unint64_t v37 = (*(unsigned __int8 *)(v33 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  uint64_t v38 = (char *)swift_allocObject();
  uint64_t v39 = v54;
  *((void *)v38 + 2) = v28;
  *((void *)v38 + 3) = v39;
  uint64_t v40 = v53;
  *((void *)v38 + 4) = v21;
  *((void *)v38 + 5) = v40;
  *((void *)v38 + 6) = v29;
  *((void *)v38 + 7) = v30;
  *((void *)v38 + 8) = v31;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(&v38[v37], v34, v36);
  uint64_t v41 = v56;
  uint64_t v42 = (ValueMetadata *)v61;
  uint64_t v43 = (ValueMetadata *)v60;
  uint64_t v44 = v55;
  View.transformTrait<A>(_:transform:)();
  swift_release();
  (*(void (**)(char *, ValueMetadata *))(AssociatedTypeWitness + 8))(v44, v42);
  uint64_t v99 = v42;
  uint64_t v100 = &type metadata for TabSectionIdentifiersTraitKey;
  uint64_t v101 = v43;
  uint64_t v102 = &protocol witness table for TabSectionIdentifiersTraitKey;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type TabSectionStyleContext and conformance TabSectionStyleContext();
  uint64_t v46 = v57;
  uint64_t v47 = OpaqueTypeMetadata2;
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v41, v47);
  unint64_t v48 = lazy protocol witness table accessor for type StyleContextWriter<TabSectionStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v87 = OpaqueTypeConformance2;
  unint64_t v88 = v48;
  uint64_t v49 = v62;
  swift_getWitnessTable();
  uint64_t v50 = v59;
  static ViewBuilder.buildExpression<A>(_:)(v46);
  uint64_t v51 = *(void (**)(char *, uint64_t))(v64 + 8);
  v51(v46, v49);
  static ViewBuilder.buildExpression<A>(_:)(v50);
  return ((uint64_t (*)(char *, uint64_t))v51)(v50, v49);
}

uint64_t closure #1 in closure #1 in TabSection<>.TabSectionView.body.getter@<X0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t (*a3)(void, uint64_t, uint64_t)@<X2>, ValueMetadata *a4@<X3>, _UNKNOWN **a5@<X4>, uint64_t a6@<X5>, _UNKNOWN **a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v142 = a8;
  uint64_t v139 = a7;
  uint64_t v131 = a9;
  uint64_t v132 = a6;
  v146 = a4;
  uint64_t v120 = a1;
  uint64_t v127 = type metadata accessor for ModifiedContent();
  uint64_t v130 = *(void *)(v127 - 8);
  MEMORY[0x1F4188790](v127);
  uint64_t v128 = (char *)&v97 - v13;
  uint64_t v145 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F408B8];
  type metadata accessor for _TraitWritingModifier<IsSectionHeaderTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsCompactTabRepresentationTraitKey>, (uint64_t)&type metadata for IsCompactTabRepresentationTraitKey, (uint64_t)&protocol witness table for IsCompactTabRepresentationTraitKey, MEMORY[0x1E4F408B8]);
  uint64_t v125 = type metadata accessor for ModifiedContent();
  uint64_t v129 = *(void *)(v125 - 8);
  MEMORY[0x1F4188790](v125);
  uint64_t v126 = (char *)&v97 - v14;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v136 = a5;
  uint64_t v16 = AssociatedConformanceWitness;
  uint64_t v144 = AssociatedConformanceWitness;
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  uint64_t v108 = type metadata accessor for _TraitWritingModifier();
  uint64_t v122 = type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  uint64_t v164 = v16;
  swift_getWitnessTable();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  uint64_t v111 = type metadata accessor for _TraitWritingModifier();
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v123 = v17;
  uint64_t v124 = v18;
  MEMORY[0x1F4188790](v17);
  v143 = (ValueMetadata *)((char *)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v20);
  uint64_t v121 = (char *)&v97 - v21;
  uint64_t Description = (uint64_t)a2[-1].Description;
  MEMORY[0x1F4188790](v22);
  uint64_t v115 = (char *)&v97 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent();
  _s7SwiftUI21ViewInputFlagModifierVyAA27AccessibilityShowsLabelIconVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon, (uint64_t)&type metadata for AccessibilityShowsLabelIcon, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v24 = type metadata accessor for ModifiedContent();
  uint64_t v162 = a6;
  uint64_t v163 = &protocol witness table for UpdateDefaultTabFill;
  uint64_t v114 = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  v161 = &protocol witness table for ViewInputFlagModifier<A>;
  uint64_t v158 = swift_getWitnessTable();
  uint64_t v159 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v156 = swift_getWitnessTable();
  uint64_t v157 = &protocol witness table for AccessibilityDetachedPropertyWriterModifier;
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v149 = &type metadata for LabelPlatformItemsStrategy;
  uint64_t v150 = (uint64_t (*)(void, uint64_t, uint64_t))v24;
  v151 = &type metadata for TabItem.TraitKey;
  uint64_t v152 = &protocol witness table for LabelPlatformItemsStrategy;
  uint64_t v153 = v25;
  uint64_t v154 = &protocol witness table for TabItem.TraitKey;
  type metadata accessor for PlatformItemTraitWriter();
  uint64_t v26 = a2;
  uint64_t v98 = (uint64_t)a2;
  uint64_t v106 = type metadata accessor for ModifiedContent();
  uint64_t v107 = type metadata accessor for ModifiedContent();
  type metadata accessor for _ContainerValueWritingModifier<TabItemLabel_v0?>();
  uint64_t v104 = type metadata accessor for ModifiedContent();
  uint64_t v113 = *(void *)(v104 - 8);
  MEMORY[0x1F4188790](v104);
  uint64_t v100 = (uint64_t)&v97 - v27;
  type metadata accessor for _TraitWritingModifier<IsSectionHeaderTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsSectionHeaderTraitKey>, MEMORY[0x1E4F40C88], MEMORY[0x1E4F40C80], v145);
  uint64_t v103 = type metadata accessor for ModifiedContent();
  uint64_t v112 = *(void *)(v103 - 8);
  MEMORY[0x1F4188790](v103);
  uint64_t v102 = (char *)&v97 - v28;
  type metadata accessor for _TraitWritingModifier<IsSectionHeaderTraitKey>(255, &lazy cache variable for type metadata for StyleContextWriter<SectionHeaderStyleContext>, MEMORY[0x1E4F40EC0], MEMORY[0x1E4F40EB8], MEMORY[0x1E4F40318]);
  uint64_t v105 = type metadata accessor for ModifiedContent();
  uint64_t v110 = *(void *)(v105 - 8);
  MEMORY[0x1F4188790](v105);
  uint64_t v101 = (char *)&v97 - v29;
  uint64_t v109 = type metadata accessor for ModifiedContent();
  uint64_t v133 = type metadata accessor for ModifiedContent();
  uint64_t v141 = *(void *)(v133 - 8);
  MEMORY[0x1F4188790](v133);
  uint64_t v145 = (uint64_t (*)(void, uint64_t, uint64_t))((char *)&v97 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v31);
  uint64_t v140 = (char *)&v97 - v32;
  uint64_t v33 = v139;
  uint64_t v34 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v137 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v36 = (ValueMetadata *)((char *)&v97 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v37);
  uint64_t v138 = (char *)&v97 - v38;
  uint64_t v149 = v26;
  uint64_t v150 = a3;
  uint64_t v39 = v136;
  v151 = v146;
  uint64_t v152 = v136;
  uint64_t v153 = v132;
  uint64_t v154 = v33;
  uint64_t v40 = v142;
  uint64_t v155 = v142;
  uint64_t v41 = type metadata accessor for TabSection<>.TabSectionView();
  uint64_t v99 = v41;
  uint64_t v42 = v120;
  uint64_t v43 = (void (*)(uint64_t (*)(void, uint64_t, uint64_t)))v33[7];
  uint64_t v44 = v36;
  v43(v34);
  uint64_t v45 = AssociatedTypeWitness;
  uint64_t v116 = swift_getAssociatedConformanceWitness();
  uint64_t v134 = v44;
  static ViewBuilder.buildExpression<A>(_:)(v44);
  uint64_t v46 = *(uint64_t (**)(ValueMetadata *, uint64_t))(v137 + 8);
  uint64_t v118 = v137 + 8;
  uint64_t v119 = v46;
  v46(v44, v45);
  uint64_t v47 = v42;
  uint64_t v48 = v42 + *(int *)(v41 + 76);
  uint64_t v49 = Description;
  uint64_t v50 = v115;
  uint64_t v51 = v98;
  (*(void (**)(char *, uint64_t, uint64_t))(Description + 16))(v115, v48, v98);
  v147[2] = v51;
  v147[3] = v34;
  uint64_t v52 = v51;
  v147[4] = v146;
  v147[5] = v39;
  v147[6] = v132;
  v147[7] = v139;
  v147[8] = v40;
  v147[9] = v47;
  uint64_t v53 = v100;
  uint64_t v54 = v52;
  uint64_t v55 = v132;
  View.tabItem<A>(_:)((void (*)(void))partial apply for closure #1 in closure #1 in closure #1 in TabSection<>.TabSectionView.body.getter, (uint64_t)v147, v52, v132, v132, v100);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v54);
  LOBYTE(v149) = 1;
  v148[23] = v55;
  v148[24] = &protocol witness table for PlatformItemTraitWriter<A, B, C>;
  uint64_t v56 = swift_getWitnessTable();
  unint64_t v57 = lazy protocol witness table accessor for type TabPlatformIdentified and conformance TabPlatformIdentified();
  v148[21] = v56;
  v148[22] = v57;
  uint64_t v58 = swift_getWitnessTable();
  unint64_t v59 = lazy protocol witness table accessor for type _ContainerValueWritingModifier<TabItemLabel_v0?> and conformance _ContainerValueWritingModifier<A>();
  v148[19] = v58;
  v148[20] = v59;
  uint64_t v60 = v104;
  uint64_t v61 = swift_getWitnessTable();
  uint64_t v62 = v102;
  View._trait<A>(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v53, v60);
  unint64_t IsSectionHeaderTrait = lazy protocol witness table accessor for type _TraitWritingModifier<IsSectionHeaderTraitKey> and conformance _TraitWritingModifier<A>();
  v148[17] = v61;
  v148[18] = IsSectionHeaderTrait;
  uint64_t v64 = v103;
  uint64_t v65 = swift_getWitnessTable();
  uint64_t v66 = v101;
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v112 + 8))(v62, v64);
  unint64_t v67 = lazy protocol witness table accessor for type StyleContextWriter<SectionHeaderStyleContext> and conformance StyleContextWriter<A>();
  v148[15] = v65;
  v148[16] = v67;
  uint64_t v68 = v105;
  uint64_t v69 = swift_getWitnessTable();
  uint64_t v70 = v145;
  View.removeTag<A>(_:)();
  (*(void (**)(char *, uint64_t))(v110 + 8))(v66, v68);
  uint64_t v71 = swift_getWitnessTable();
  v148[13] = v69;
  v148[14] = v71;
  uint64_t v72 = swift_getWitnessTable();
  uint64_t v73 = swift_getWitnessTable();
  v148[11] = v72;
  v148[12] = v73;
  uint64_t v74 = v133;
  uint64_t Description = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v70);
  uint64_t v75 = *(_UNKNOWN ***)(v141 + 8);
  uint64_t v132 = v141 + 8;
  uint64_t v139 = v75;
  ((void (*)(uint64_t (*)(void, uint64_t, uint64_t), uint64_t))v75)(v70, v74);
  uint64_t v76 = v128;
  uint64_t v77 = v142;
  View.tabPlatformIdentified()((uint64_t)v146, v142);
  LOBYTE(v149) = 1;
  v148[9] = v77;
  v148[10] = v57;
  uint64_t v78 = v127;
  uint64_t v79 = swift_getWitnessTable();
  char v80 = v126;
  View._trait<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v130 + 8))(v76, v78);
  unint64_t IsCompactTabRepresentationTrait = lazy protocol witness table accessor for type _TraitWritingModifier<IsCompactTabRepresentationTraitKey> and conformance _TraitWritingModifier<A>();
  v148[7] = v79;
  v148[8] = IsCompactTabRepresentationTrait;
  uint64_t v82 = v125;
  uint64_t v83 = swift_getWitnessTable();
  uint64_t v84 = v143;
  View.removeTag<A>(_:)();
  (*(void (**)(char *, uint64_t))(v129 + 8))(v80, v82);
  v148[5] = v83;
  v148[6] = v71;
  v148[3] = swift_getWitnessTable();
  v148[4] = v73;
  uint64_t v85 = v123;
  uint64_t v144 = swift_getWitnessTable();
  uint64_t v86 = v121;
  static ViewBuilder.buildExpression<A>(_:)(v84);
  uint64_t v87 = v124;
  v146 = *(ValueMetadata **)(v124 + 8);
  ((void (*)(ValueMetadata *, uint64_t))v146)(v84, v85);
  unint64_t v88 = v134;
  uint64_t v89 = AssociatedTypeWitness;
  (*(void (**)(ValueMetadata *, char *, uint64_t))(v137 + 16))(v134, v138, AssociatedTypeWitness);
  uint64_t v149 = v88;
  uint64_t v90 = v140;
  uint64_t v91 = v145;
  uint64_t v92 = v133;
  (*(void (**)(uint64_t (*)(void, uint64_t, uint64_t), char *, uint64_t))(v141 + 16))(v145, v140, v133);
  uint64_t v150 = v91;
  (*(void (**)(ValueMetadata *, char *, uint64_t))(v87 + 16))(v84, v86, v85);
  v151 = v84;
  v148[1] = v92;
  v148[2] = v85;
  v147[11] = v116;
  v147[12] = Description;
  v147[13] = v144;
  v148[0] = v89;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)&v149, 3uLL, (uint64_t)v148);
  uint64_t v93 = v146;
  ((void (*)(char *, uint64_t))v146)(v86, v85);
  uint64_t v94 = (void (*)(uint64_t (*)(void, uint64_t, uint64_t), uint64_t))v139;
  ((void (*)(char *, uint64_t))v139)(v90, v92);
  uint64_t v95 = v119;
  v119((ValueMetadata *)v138, v89);
  ((void (*)(ValueMetadata *, uint64_t))v93)(v143, v85);
  v94(v145, v92);
  return v95(v134, v89);
}

uint64_t closure #1 in closure #1 in closure #1 in TabSection<>.TabSectionView.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = v7;
  _OWORD v16[2] = v8;
  v16[3] = v9;
  v16[4] = v10;
  void v16[5] = v11;
  v16[6] = v12;
  v16[7] = v13;
  uint64_t v14 = type metadata accessor for TabSection<>.TabSectionView();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v14 + 76));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t closure #2 in closure #1 in TabSection<>.TabSectionView.body.getter(uint64_t *a1)
{
  type metadata accessor for TabSection<>.TabSectionView();
  uint64_t v2 = Namespace.wrappedValue.getter();
  uint64_t v3 = *a1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1, (char *)v3);
    uint64_t v3 = result;
  }
  unint64_t v6 = *(void *)(v3 + 16);
  unint64_t v5 = *(void *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1, (char *)v3);
    uint64_t v3 = result;
  }
  *(void *)(v3 + 16) = v6 + 1;
  *(void *)(v3 + 8 * v6 + 32) = v2;
  *a1 = v3;
  return result;
}

uint64_t closure #2 in TabSection<>.TabSectionView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  v24[0] = a8;
  v24[1] = a1;
  v24[2] = a9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)v24 - v20;
  void v24[3] = a2;
  unsigned char v24[4] = a3;
  v24[5] = a4;
  v24[6] = a5;
  v24[7] = a6;
  v24[8] = a7;
  v24[9] = v24[0];
  type metadata accessor for TabSection<>.TabSectionView();
  (*(void (**)(uint64_t, uint64_t))(a7 + 56))(a3, a7);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v18);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v16 + 8);
  v22(v18, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v21);
  return ((uint64_t (*)(char *, uint64_t))v22)(v21, AssociatedTypeWitness);
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <> TabSection<A, B, C, D>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return TabSection<>._identifiedView.getter(a1, *(void *)(a2 - 8), *(void *)(a2 - 16), *(void *)(a2 - 24), a3);
}

uint64_t TabSection<>.init<>(content:header:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v14(v11);
  a1(v15);
  return TabSection.init(header:content:footer:)((uint64_t)v13, (uint64_t)v9, v16, a2, a3, MEMORY[0x1E4F417F8], a4);
}

uint64_t TabSection<>.init<>(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  double v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v8(v5);
  return TabSection.init(header:content:footer:)(v9, (uint64_t)v7, v10, MEMORY[0x1E4F417F8], a2, MEMORY[0x1E4F417F8], a3);
}

uint64_t TabSection<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  v24[1] = a4;
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v18, v16);
  v25[0] = Text.init<A>(_:)();
  v25[1] = v19;
  char v26 = v20 & 1;
  uint64_t v27 = v21;
  a2();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, a5);
  return TabSection.init(header:content:footer:)((uint64_t)v25, (uint64_t)v12, v22, MEMORY[0x1E4F41420], a3, MEMORY[0x1E4F417F8], a6);
}

uint64_t TabSection<>.init<>(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X4>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v15[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = Text.init(_:tableName:bundle:comment:)();
  v15[1] = v9;
  char v16 = v10 & 1;
  uint64_t v17 = v11;
  a2();
  return TabSection.init(header:content:footer:)((uint64_t)v15, (uint64_t)v8, v12, MEMORY[0x1E4F41420], a3, MEMORY[0x1E4F417F8], a4);
}

uint64_t TabSection<>.init<A>(content:header:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  return TabSection<>.init<A>(content:header:)(a1, a2, a3, a4);
}

{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(double);
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v14(v11);
  a1(v15);
  type metadata accessor for Optional();
  return TabSection.init(header:content:footer:)((uint64_t)v13, (uint64_t)v9, v16, a2, a3, MEMORY[0x1E4F417F8], a4);
}

uint64_t TabSection<>.init<A, B>(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  return TabSection<>.init<A, B>(_:content:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  void v24[2];
  char v25;
  uint64_t v26;

  uint64_t v23 = a5;
  MEMORY[0x1F4188790](a1);
  char v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v16, v14);
  v24[0] = Text.init<A>(_:)();
  v24[1] = v17;
  uint64_t v25 = v18 & 1;
  char v26 = v19;
  a2();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a4);
  type metadata accessor for Optional();
  return TabSection.init(header:content:footer:)((uint64_t)v24, (uint64_t)v10, v20, MEMORY[0x1E4F41420], a3, MEMORY[0x1E4F417F8], v23);
}

uint64_t TabSection<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X4>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  return TabSection<>.init<A>(_:content:)(a1, a2, a3, a4);
}

{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void v15[2];
  char v16;
  uint64_t v17;

  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v15[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = Text.init(_:tableName:bundle:comment:)();
  v15[1] = v9;
  char v16 = v10 & 1;
  uint64_t v17 = v11;
  a2();
  type metadata accessor for Optional();
  return TabSection.init(header:content:footer:)((uint64_t)v15, (uint64_t)v8, v12, MEMORY[0x1E4F41420], a3, MEMORY[0x1E4F417F8], a4);
}

uint64_t TabSection<>.init<A>(liftedContent:header:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  return TabSection<>.init<A>(content:header:)(a1, a2, a3, a4);
}

uint64_t TabSection<>.init<A>(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  double v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8(v5);
  uint64_t v9 = type metadata accessor for Optional();
  return TabSection.init(header:content:footer:)(v9, (uint64_t)v7, v10, MEMORY[0x1E4F417F8], a2, MEMORY[0x1E4F417F8], a3);
}

uint64_t TabSection<>.init<A, B>(_:liftedContent:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  return TabSection<>.init<A, B>(_:content:)(a1, a2, a3, a4, a5);
}

uint64_t TabSection<>.init<A>(_:liftedContent:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X4>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  return TabSection<>.init<A>(_:content:)(a1, a2, a3, a4);
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> TabSection<A, B, C, D>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> TabSection<A, B, C, D>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for <> TabSection<A, B, C, D>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for TabSection()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TabSection(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = a3[4];
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v9) {
    unsigned int v16 = v9;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v11 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(void *)(*(void *)(a3[2] - 8) + 64) + v13;
  int v18 = a2 - v16;
  if (a2 <= v16) {
    goto LABEL_27;
  }
  uint64_t v19 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(void *)(*(void *)(v10 - 8) + 64);
  char v20 = 8 * v19;
  if (v19 <= 3)
  {
    unsigned int v22 = ((v18 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 < 2)
    {
LABEL_27:
      if (v16)
      {
        if (v6 == v16)
        {
          char v26 = *(uint64_t (**)(void))(v5 + 48);
          return v26();
        }
        else
        {
          unint64_t v28 = ((unint64_t)a1 + v17) & ~v13;
          if (v8 == v16)
          {
            uint64_t v29 = *(uint64_t (**)(unint64_t))(v7 + 48);
            return v29(v28);
          }
          else
          {
            unint64_t v30 = (v28 + v14 + v15) & ~v15;
            uint64_t v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48);
            return v31(v30, v12, v10);
          }
        }
      }
      return 0;
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_27;
  }
LABEL_17:
  int v23 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v23 = 0;
  }
  if (v19)
  {
    if (v19 <= 3) {
      int v24 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(_DWORD *)(*(void *)(v10 - 8) + 64);
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v16 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for TabSection(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  uint64_t v10 = *(void *)(v8 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(v9 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  if (*(_DWORD *)(v13 + 84) <= v12) {
    unsigned int v17 = v12;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v13 + 84);
  }
  uint64_t v18 = *(void *)(*(void *)(a4[2] - 8) + 64) + v14;
  size_t v19 = ((v15 + v16 + (v18 & ~v14)) & ~v16) + *(void *)(*(void *)(v9 - 8) + 64);
  BOOL v20 = a3 >= v17;
  unsigned int v21 = a3 - v17;
  if (v21 != 0 && v20)
  {
    if (v19 <= 3)
    {
      unsigned int v26 = ((v21 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
      if (HIWORD(v26))
      {
        int v22 = 4;
      }
      else if (v26 >= 0x100)
      {
        int v22 = 2;
      }
      else
      {
        int v22 = v26 > 1;
      }
    }
    else
    {
      int v22 = 1;
    }
  }
  else
  {
    int v22 = 0;
  }
  if (v17 < a2)
  {
    unsigned int v23 = ~v17 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> (8 * v19)) + 1;
      if (v19)
      {
        int v27 = v23 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        a1[v19] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v24;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)&a1[v19] = v24;
        return;
      default:
        return;
    }
  }
  uint64_t v25 = ~v14;
  switch(v22)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x187EECB38);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (!a2) {
        return;
      }
LABEL_27:
      if (v7 == v17)
      {
        unint64_t v28 = *(void (**)(char *))(v6 + 56);
        uint64_t v29 = a1;
LABEL_30:
        v28(v29);
        return;
      }
      unint64_t v30 = (unint64_t)&a1[v18] & v25;
      if (v11 != v17)
      {
        uint64_t v29 = (char *)((v30 + v15 + v16) & ~v16);
        unint64_t v28 = *(void (**)(char *))(v13 + 56);
        goto LABEL_30;
      }
      uint64_t v31 = *(void (**)(unint64_t))(v10 + 56);
      v31(v30);
      return;
  }
}

uint64_t type metadata accessor for TabSection()
{
  return swift_getGenericMetadata();
}

uint64_t sub_187EECB78()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for TabSection<>.TabSectionView()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for TabSection<>.TabSectionView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TabSection<>.TabSectionView(uint64_t *a1, uint64_t *a2, void *a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3[2] - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v8 = a3[3];
  uint64_t v7 = a3[4];
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + ((v5 + 8) & ~v5)) & ~v10;
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v14 = *(void *)(v7 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80);
  uint64_t v16 = v13 + v15;
  unint64_t v17 = ((v13 + v15 + v12) & ~v15) + *(void *)(v14 + 64);
  unint64_t v18 = v10 | v5 | v15;
  if (v18 > 7 || ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v14 + 80)) & 0x100000) != 0 || v17 > 0x18)
  {
    uint64_t v21 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v21 + ((v18 & 0xF8 ^ 0x1F8) & (v18 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v22 = ~v10;
    uint64_t v23 = ~v15;
    *a1 = *a2;
    uint64_t v24 = ((unint64_t)a1 + v5 + 8) & ~v5;
    uint64_t v25 = ((unint64_t)a2 + v5 + 8) & ~v5;
    uint64_t v29 = v7;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v24, v25);
    uint64_t v26 = (v24 + v11) & v22;
    uint64_t v27 = (v25 + v11) & v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v26, v27, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))((v26 + v16) & v23, (v27 + v16) & v23, v29);
  }
  return v3;
}

uint64_t destroy for TabSection<>.TabSectionView(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a2[2] - 8);
  uint64_t v4 = v3 + 8;
  unint64_t v5 = (a1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t))(v3 + 8))(v5);
  uint64_t v6 = *(void *)(v4 + 56);
  uint64_t v7 = *(void *)(a2[3] - 8);
  uint64_t v8 = v7 + 8;
  unint64_t v9 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t))(v7 + 8))(v9);
  uint64_t v10 = *(void *)(a2[4] - 8);
  uint64_t v11 = *(uint64_t (**)(unint64_t))(v10 + 8);
  unint64_t v12 = (v9 + *(void *)(v8 + 56) + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);

  return v11(v12);
}

void *initializeWithCopy for TabSection<>.TabSectionView(void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3[2] - 8);
  uint64_t v6 = v5 + 16;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 48);
  uint64_t v11 = *(void *)(a3[3] - 8);
  uint64_t v12 = v11 + 16;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = v10 + v13;
  uint64_t v15 = (v14 + v8) & ~v13;
  uint64_t v16 = (v14 + v9) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v15, v16);
  uint64_t v17 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 16))((*(void *)(v12 + 48) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(void *)(v12 + 48) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

void *assignWithCopy for TabSection<>.TabSectionView(void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3[2] - 8);
  uint64_t v6 = v5 + 24;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 40);
  uint64_t v11 = *(void *)(a3[3] - 8);
  uint64_t v12 = v11 + 24;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = v10 + v13;
  uint64_t v15 = (v14 + v8) & ~v13;
  uint64_t v16 = (v14 + v9) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 24))(v15, v16);
  uint64_t v17 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 24))((*(void *)(v12 + 40) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(void *)(v12 + 40) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

void *initializeWithTake for TabSection<>.TabSectionView(void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3[2] - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 32);
  uint64_t v11 = *(void *)(a3[3] - 8);
  uint64_t v12 = v11 + 32;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = v10 + v13;
  uint64_t v15 = (v14 + v8) & ~v13;
  uint64_t v16 = (v14 + v9) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v15, v16);
  uint64_t v17 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 32))((*(void *)(v12 + 32) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(void *)(v12 + 32) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

void *assignWithTake for TabSection<>.TabSectionView(void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3[2] - 8);
  uint64_t v6 = v5 + 40;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 24);
  uint64_t v11 = *(void *)(a3[3] - 8);
  uint64_t v12 = v11 + 40;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = v10 + v13;
  uint64_t v15 = (v14 + v8) & ~v13;
  uint64_t v16 = (v14 + v9) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v15, v16);
  uint64_t v17 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 40))((*(void *)(v12 + 24) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(void *)(v12 + 24) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for TabSection<>.TabSectionView(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = a3[4];
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  if (*(_DWORD *)(v11 + 84) <= v9) {
    unsigned int v16 = v9;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v11 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(void *)(*(void *)(a3[3] - 8) + 64) + v15;
  unsigned int v18 = a2 - v16;
  if (a2 <= v16) {
    goto LABEL_27;
  }
  uint64_t v19 = ((v17 + ((v13 + v14 + ((v12 + 8) & ~v12)) & ~v14)) & ~v15) + *(void *)(*(void *)(v10 - 8) + 64);
  char v20 = 8 * v19;
  if (v19 > 3) {
    goto LABEL_10;
  }
  unsigned int v22 = ((v18 + ~(-1 << v20)) >> v20) + 1;
  if (HIWORD(v22))
  {
    int v21 = *(_DWORD *)((char *)a1 + v19);
    if (!v21) {
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  if (v22 > 0xFF)
  {
    int v21 = *(unsigned __int16 *)((char *)a1 + v19);
    if (!*(unsigned __int16 *)((char *)a1 + v19)) {
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  if (v22 >= 2)
  {
LABEL_10:
    int v21 = *((unsigned __int8 *)a1 + v19);
    if (!*((unsigned char *)a1 + v19)) {
      goto LABEL_27;
    }
LABEL_17:
    int v23 = (v21 - 1) << v20;
    if (v19 > 3) {
      int v23 = 0;
    }
    if (v19)
    {
      if (v19 <= 3) {
        int v24 = ((v17 + ((v13 + v14 + ((v12 + 8) & ~v12)) & ~v14)) & ~v15)
      }
            + *(_DWORD *)(*(void *)(v10 - 8) + 64);
      else {
        int v24 = 4;
      }
      switch(v24)
      {
        case 2:
          int v25 = *a1;
          break;
        case 3:
          int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          int v25 = *(_DWORD *)a1;
          break;
        default:
          int v25 = *(unsigned __int8 *)a1;
          break;
      }
    }
    else
    {
      int v25 = 0;
    }
    return v16 + (v25 | v23) + 1;
  }
LABEL_27:
  if (!v16) {
    return 0;
  }
  uint64_t v26 = ((unint64_t)a1 + v12 + 8) & ~v12;
  if (v6 == v16)
  {
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    uint64_t v28 = *(unsigned int *)(v5 + 84);
    uint64_t v29 = a3[2];
    return v27(v26, v28, v29);
  }
  uint64_t v31 = (v26 + v13 + v14) & ~v14;
  if (v8 != v16)
  {
    uint64_t v26 = (v17 + v31) & ~v15;
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    uint64_t v28 = *(unsigned int *)(v11 + 84);
    uint64_t v29 = a3[4];
    return v27(v26, v28, v29);
  }
  uint64_t v32 = *(uint64_t (**)(uint64_t))(v7 + 48);
  return v32(v31);
}

void storeEnumTagSinglePayload for TabSection<>.TabSectionView(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  uint64_t v7 = a4[3];
  uint64_t v8 = a4[4];
  unsigned int v9 = *(_DWORD *)(v6 + 84);
  uint64_t v10 = *(void *)(v7 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v9) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(v8 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = *(void *)(*(void *)(a4[2] - 8) + 64);
  uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v17 = *(void *)(*(void *)(v7 - 8) + 64);
  uint64_t v18 = *(unsigned __int8 *)(v13 + 80);
  if (*(_DWORD *)(v13 + 84) <= v12) {
    unsigned int v19 = v12;
  }
  else {
    unsigned int v19 = *(_DWORD *)(v13 + 84);
  }
  uint64_t v20 = v17 + v18;
  size_t v21 = ((v17 + v18 + ((v15 + v16 + ((v14 + 8) & ~v14)) & ~v16)) & ~v18) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v22 = a3 >= v19;
  unsigned int v23 = a3 - v19;
  if (v23 != 0 && v22)
  {
    if (v21 <= 3)
    {
      unsigned int v27 = ((v23 + ~(-1 << (8 * v21))) >> (8 * v21)) + 1;
      if (HIWORD(v27))
      {
        int v24 = 4;
      }
      else if (v27 >= 0x100)
      {
        int v24 = 2;
      }
      else
      {
        int v24 = v27 > 1;
      }
    }
    else
    {
      int v24 = 1;
    }
  }
  else
  {
    int v24 = 0;
  }
  if (v19 < a2)
  {
    unsigned int v25 = ~v19 + a2;
    if (v21 < 4)
    {
      int v26 = (v25 >> (8 * v21)) + 1;
      if (v21)
      {
        int v28 = v25 & ~(-1 << (8 * v21));
        bzero(a1, v21);
        if (v21 == 3)
        {
          *(_WORD *)a1 = v28;
          a1[2] = BYTE2(v28);
        }
        else if (v21 == 2)
        {
          *(_WORD *)a1 = v28;
        }
        else
        {
          *a1 = v28;
        }
      }
    }
    else
    {
      bzero(a1, v21);
      *(_DWORD *)a1 = v25;
      int v26 = 1;
    }
    switch(v24)
    {
      case 1:
        a1[v21] = v26;
        return;
      case 2:
        *(_WORD *)&a1[v21] = v26;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)&a1[v21] = v26;
        return;
      default:
        return;
    }
  }
  switch(v24)
  {
    case 1:
      a1[v21] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v21] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x187EEDB74);
    case 4:
      *(_DWORD *)&a1[v21] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (!a2) {
        return;
      }
LABEL_27:
      unint64_t v29 = (unint64_t)&a1[v14 + 8] & ~v14;
      if (v9 == v19)
      {
        unint64_t v30 = *(void (**)(unint64_t))(v6 + 56);
LABEL_30:
        v30(v29);
        return;
      }
      unint64_t v31 = (v29 + v15 + v16) & ~v16;
      if (v11 != v19)
      {
        unint64_t v29 = (v20 + v31) & ~v18;
        unint64_t v30 = *(void (**)(unint64_t))(v13 + 56);
        goto LABEL_30;
      }
      uint64_t v32 = *(void (**)(unint64_t))(v10 + 56);
      v32(v31);
      return;
  }
}

uint64_t protocol witness for static StyleContext.acceptsAny<A>(_:) in conformance TabSectionStyleContext(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1);
  if (a2) {
    memcpy((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v4);
  }
  return static StyleContext.acceptsAny<A>(_:)() & 1;
}

uint64_t associated type witness table accessor for View.Body : View in TabSection<A, B, C, D><>.TabSectionView()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for _TraitWritingModifier<IsSectionHeaderTraitKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TabSectionStyleContext and conformance TabSectionStyleContext()
{
  unint64_t result = lazy protocol witness table cache variable for type TabSectionStyleContext and conformance TabSectionStyleContext;
  if (!lazy protocol witness table cache variable for type TabSectionStyleContext and conformance TabSectionStyleContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSectionStyleContext and conformance TabSectionStyleContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InAdaptableTabViewContext and conformance InAdaptableTabViewContext()
{
  unint64_t result = lazy protocol witness table cache variable for type InAdaptableTabViewContext and conformance InAdaptableTabViewContext;
  if (!lazy protocol witness table cache variable for type InAdaptableTabViewContext and conformance InAdaptableTabViewContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InAdaptableTabViewContext and conformance InAdaptableTabViewContext);
  }
  return result;
}

uint64_t partial apply for closure #1 in TabSection<>.TabSectionView.body.getter()
{
  return partial apply for closure #1 in TabSection<>.TabSectionView.body.getter((uint64_t (*)(void, void, void, void, void, void, void, void))closure #1 in TabSection<>.TabSectionView.body.getter);
}

uint64_t partial apply for closure #2 in TabSection<>.TabSectionView.body.getter()
{
  return partial apply for closure #1 in TabSection<>.TabSectionView.body.getter((uint64_t (*)(void, void, void, void, void, void, void, void))closure #2 in TabSection<>.TabSectionView.body.getter);
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<TabSectionStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<TabSectionStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<TabSectionStyleContext> and conformance StyleContextWriter<A>)
  {
    _s7SwiftUI21ViewInputFlagModifierVyAA27AccessibilityShowsLabelIconVGMaTm_0(255, &lazy cache variable for type metadata for StyleContextWriter<TabSectionStyleContext>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSectionStyleContext and conformance TabSectionStyleContext, (uint64_t)&type metadata for TabSectionStyleContext, MEMORY[0x1E4F40318]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<TabSectionStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in TabSection<>.TabSectionView.body.getter()
{
  return partial apply for closure #1 in TabSection<>.TabSectionView.body.getter((uint64_t (*)(void, void, void, void, void, void, void, void))closure #1 in closure #1 in TabSection<>.TabSectionView.body.getter);
}

uint64_t sub_187EEDE68()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  long long v7 = *(_OWORD *)(v0 + 32);
  uint64_t v3 = type metadata accessor for TabSection<>.TabSectionView();
  uint64_t v4 = v3 - 8;
  uint64_t v5 = v0
     + ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v5 + *(int *)(v3 + 76), v1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v5 + *(int *)(v4 + 88), v2);
  (*(void (**)(uint64_t))(*(void *)(v7 - 8) + 8))(v5 + *(int *)(v4 + 92));
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in TabSection<>.TabSectionView.body.getter(uint64_t *a1)
{
  return closure #2 in closure #1 in TabSection<>.TabSectionView.body.getter(a1);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in TabSection<>.TabSectionView.body.getter()
{
  return partial apply for closure #1 in TabSection<>.TabSectionView.body.getter((uint64_t (*)(void, void, void, void, void, void, void, void))closure #1 in closure #1 in closure #1 in TabSection<>.TabSectionView.body.getter);
}

uint64_t partial apply for closure #1 in TabSection<>.TabSectionView.body.getter(uint64_t (*a1)(void, void, void, void, void, void, void, void))
{
  return a1(v1[9], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<IsSectionHeaderTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<IsSectionHeaderTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<IsSectionHeaderTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<IsSectionHeaderTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsSectionHeaderTraitKey>, MEMORY[0x1E4F40C88], MEMORY[0x1E4F40C80], MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<IsSectionHeaderTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<SectionHeaderStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<SectionHeaderStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<SectionHeaderStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for _TraitWritingModifier<IsSectionHeaderTraitKey>(255, &lazy cache variable for type metadata for StyleContextWriter<SectionHeaderStyleContext>, MEMORY[0x1E4F40EC0], MEMORY[0x1E4F40EB8], MEMORY[0x1E4F40318]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<SectionHeaderStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<IsCompactTabRepresentationTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<IsCompactTabRepresentationTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<IsCompactTabRepresentationTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<IsSectionHeaderTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsCompactTabRepresentationTraitKey>, (uint64_t)&type metadata for IsCompactTabRepresentationTraitKey, (uint64_t)&protocol witness table for IsCompactTabRepresentationTraitKey, MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<IsCompactTabRepresentationTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for TabSectionIdentifiersTraitKey()
{
  return &type metadata for TabSectionIdentifiersTraitKey;
}

ValueMetadata *type metadata accessor for IsCompactTabRepresentationTraitKey()
{
  return &type metadata for IsCompactTabRepresentationTraitKey;
}

uint64_t sub_187EEE288()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for ModifiedContent();
  _s7SwiftUI21ViewInputFlagModifierVyAA27AccessibilityShowsLabelIconVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon, (uint64_t)&type metadata for AccessibilityShowsLabelIcon, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for PlatformItemTraitWriter();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ContainerValueWritingModifier<TabItemLabel_v0?>();
  type metadata accessor for ModifiedContent();
  uint64_t v0 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F408B8];
  type metadata accessor for _TraitWritingModifier<IsSectionHeaderTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsSectionHeaderTraitKey>, MEMORY[0x1E4F40C88], MEMORY[0x1E4F40C80], MEMORY[0x1E4F408B8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _TraitWritingModifier<IsSectionHeaderTraitKey>(255, &lazy cache variable for type metadata for StyleContextWriter<SectionHeaderStyleContext>, MEMORY[0x1E4F40EC0], MEMORY[0x1E4F40EB8], MEMORY[0x1E4F40318]);
  type metadata accessor for ModifiedContent();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  type metadata accessor for _TraitWritingModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  swift_getWitnessTable();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  type metadata accessor for _TraitWritingModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _TraitWritingModifier<IsSectionHeaderTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsCompactTabRepresentationTraitKey>, (uint64_t)&type metadata for IsCompactTabRepresentationTraitKey, (uint64_t)&protocol witness table for IsCompactTabRepresentationTraitKey, v0);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  type metadata accessor for Group();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  _s7SwiftUI21ViewInputFlagModifierVyAA27AccessibilityShowsLabelIconVGMaTm_0(255, &lazy cache variable for type metadata for StyleContextWriter<TabSectionStyleContext>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSectionStyleContext and conformance TabSectionStyleContext, (uint64_t)&type metadata for TabSectionStyleContext, MEMORY[0x1E4F40318]);
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type InAdaptableTabViewContext and conformance InAdaptableTabViewContext();
  type metadata accessor for StaticIf();
  swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type StyleContextWriter<TabSectionStyleContext> and conformance StyleContextWriter<A>();
  swift_getWitnessTable();
  swift_getAssociatedConformanceWitness();
  return swift_getWitnessTable();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton._StyleStorage.AutomaticCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton._StyleStorage.AutomaticCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton._StyleStorage.CircleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton._StyleStorage.CircleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PlaybackButton._StyleStorage.CodingKeys()
{
  uint64_t v1 = 0x656C63726963;
  if (*v0 != 1) {
    uint64_t v1 = 1819044208;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6974616D6F747561;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PlaybackButton._StyleStorage.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PlaybackButton._StyleStorage.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton._StyleStorage.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton._StyleStorage.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton._StyleStorage.PillCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton._StyleStorage.PillCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PlaybackButton._StyleStorage.encode(to:)(void *a1)
{
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDE0];
  type metadata accessor for KeyedEncodingContainer<PlaybackButton._StyleStorage.PillCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton._StyleStorage.PillCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys, (uint64_t)&unk_1ED417C08, MEMORY[0x1E4FBBDE0]);
  uint64_t v34 = v4;
  uint64_t v24 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v33 = (char *)&v24 - v5;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton._StyleStorage.PillCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton._StyleStorage.CircleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys, (uint64_t)&unk_1ED417C98, v3);
  uint64_t v31 = *(void *)(v6 - 8);
  uint64_t v32 = v6;
  MEMORY[0x1F4188790](v6);
  unint64_t v30 = (char *)&v24 - v7;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton._StyleStorage.PillCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton._StyleStorage.AutomaticCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys, (uint64_t)&unk_1ED417CB8, v3);
  uint64_t v28 = *(void *)(v8 - 8);
  uint64_t v29 = v8;
  MEMORY[0x1F4188790](v8);
  unsigned int v27 = (char *)&v24 - v9;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton._StyleStorage.PillCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton._StyleStorage.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys, (uint64_t)&unk_1ED417B78, v3);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v15 = *v1;
  uint64_t v25 = v1[1];
  uint64_t v26 = v15;
  int v16 = *((unsigned __int8 *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v16 == 4)
  {
    char v35 = 0;
    lazy protocol witness table accessor for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys();
    uint64_t v20 = v27;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v29);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    uint64_t v17 = v12;
    if (v16 == 5)
    {
      char v35 = 1;
      lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys();
      uint64_t v18 = v30;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v32);
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v14, v11);
    }
    else
    {
      char v35 = 2;
      lazy protocol witness table accessor for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys();
      size_t v21 = v33;
      uint64_t v22 = v11;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v35 = v26;
      uint64_t v36 = v25;
      char v37 = v16;
      lazy protocol witness table accessor for type Text.DateStyle and conformance Text.DateStyle();
      uint64_t v23 = v34;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v23);
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v14, v22);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.DateStyle and conformance Text.DateStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle;
  if (!lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle;
  if (!lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle);
  }
  return result;
}

uint64_t PlaybackButton._StyleStorage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDC0];
  type metadata accessor for KeyedEncodingContainer<PlaybackButton._StyleStorage.PillCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton._StyleStorage.PillCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys, (uint64_t)&unk_1ED417C08, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  uint64_t v40 = v5;
  MEMORY[0x1F4188790](v4);
  uint64_t v45 = (char *)&v35 - v6;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton._StyleStorage.PillCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton._StyleStorage.CircleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys, (uint64_t)&unk_1ED417C98, v3);
  uint64_t v37 = *(void *)(v7 - 8);
  uint64_t v38 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v35 - v8;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton._StyleStorage.PillCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton._StyleStorage.AutomaticCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys, (uint64_t)&unk_1ED417CB8, v3);
  uint64_t v10 = v9;
  uint64_t v43 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v35 - v11;
  type metadata accessor for KeyedEncodingContainer<PlaybackButton._StyleStorage.PillCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton._StyleStorage.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys, (uint64_t)&unk_1ED417B78, v3);
  uint64_t v14 = v13;
  uint64_t v42 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  int v16 = (char *)&v35 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys();
  uint64_t v17 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17) {
    goto LABEL_7;
  }
  uint64_t v36 = v10;
  uint64_t v18 = v43;
  unsigned int v19 = v44;
  uint64_t v20 = v45;
  uint64_t v49 = a1;
  uint64_t v21 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v21 + 16) != 1)
  {
    uint64_t v23 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v25 = v24;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v25 = &type metadata for PlaybackButton._StyleStorage;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v23 - 8) + 104))(v25, *MEMORY[0x1E4FBBA70], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v14);
    a1 = v49;
LABEL_7:
    uint64_t v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  int v22 = *(unsigned __int8 *)(v21 + 32);
  if (*(unsigned char *)(v21 + 32))
  {
    uint64_t v35 = v21;
    if (v22 == 1)
    {
      unsigned __int8 v46 = 1;
      lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v38);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v14);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      char v31 = 5;
      uint64_t v32 = v41;
    }
    else
    {
      unsigned __int8 v46 = 2;
      lazy protocol witness table accessor for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys();
      uint64_t v28 = v16;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v32 = v41;
      lazy protocol witness table accessor for type Text.DateStyle and conformance Text.DateStyle();
      uint64_t v33 = v39;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v34 = v42;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v20, v33);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v14);
      uint64_t v29 = v46;
      uint64_t v30 = v47;
      char v31 = v48;
    }
  }
  else
  {
    unsigned __int8 v46 = 0;
    lazy protocol witness table accessor for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v12, v36);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v14);
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    char v31 = 4;
    uint64_t v32 = v41;
  }
  *(void *)uint64_t v32 = v29;
  *(void *)(v32 + 8) = v30;
  *(unsigned char *)(v32 + 16) = v31;
  uint64_t v26 = (uint64_t)v49;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

void type metadata accessor for KeyedEncodingContainer<PlaybackButton._StyleStorage.PillCodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlaybackButton._StyleStorage@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PlaybackButton._StyleStorage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlaybackButton._StyleStorage(void *a1)
{
  return PlaybackButton._StyleStorage.encode(to:)(a1);
}

uint64_t View.playbackButtonStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getKeyPath();
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a5 + 8))(&v8, a3, a5);
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.playbackButtonStyle.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<PlaybackButton._StyleStorage> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<PlaybackButton._StyleStorage> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.playbackButtonStyle.setter()
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<PlaybackButton._StyleStorage> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.PlaybackButtonStyleKey(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 4;
}

void AutomaticPlaybackButtonStyle._storage.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 4;
}

uint64_t dispatch thunk of PlaybackButtonStyle._storage.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for PlaybackButton._StyleStorage()
{
  return &type metadata for PlaybackButton._StyleStorage;
}

ValueMetadata *type metadata accessor for AutomaticPlaybackButtonStyle()
{
  return &type metadata for AutomaticPlaybackButtonStyle;
}

uint64_t sub_187EEFBB8()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<PlaybackButton._StyleStorage>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<PlaybackButton._StyleStorage>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<PlaybackButton._StyleStorage>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for PlaybackButton._StyleStorage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187EEFD7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PlaybackButton._StyleStorage.CodingKeys()
{
  return &unk_1ED417B78;
}

void *type metadata accessor for PlaybackButton._StyleStorage.AutomaticCodingKeys()
{
  return &unk_1ED417CB8;
}

void *type metadata accessor for PlaybackButton._StyleStorage.CircleCodingKeys()
{
  return &unk_1ED417C98;
}

unsigned char *storeEnumTagSinglePayload for PlaybackButton._StyleStorage.PillCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x187EEFE70);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for PlaybackButton._StyleStorage.PillCodingKeys()
{
  return &unk_1ED417C08;
}

uint64_t specialized PlaybackButton._StyleStorage.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6974616D6F747561 && a2 == 0xE900000000000063;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C63726963 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1819044208 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<PlaybackButton._StyleStorage> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.PlaybackButtonStyleKey()
{
  return &type metadata for EnvironmentValues.PlaybackButtonStyleKey;
}

uint64_t sub_187EF041C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEagerNavigationTransitionEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187EF045C()
{
  return EnvironmentValues.isEagerNavigationTransitionEnabled.setter();
}

ValueMetadata *type metadata accessor for EnvironmentValues.IsEagerNavigationTransitionEnabled()
{
  return &type metadata for EnvironmentValues.IsEagerNavigationTransitionEnabled;
}

uint64_t DefaultTabLabel.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(v1 + 16) & 1;
    uint64_t v8 = *(void *)v1;
    uint64_t v9 = *(void *)(v1 + 8);
    uint64_t v10 = *(void *)(v1 + 24);
    uint64_t v11 = *(void *)(v1 + 32);
  }
  else
  {
    if (*(unsigned char *)(v1 + 40))
    {
      unint64_t v20 = 0xEC0000006B72616DLL;
      LocalizedStringKey.init(stringLiteral:)();
      uint64_t v8 = Text.init(_:tableName:bundle:comment:)();
      uint64_t v9 = v13;
      uint64_t v10 = v14;
      uint64_t v15 = 0x6E6F697473657571;
    }
    else
    {
      unint64_t v20 = 0xEF7373616C67676ELL;
      uint64_t v8 = static Text.System.search.getter();
      uint64_t v9 = v16;
      uint64_t v10 = v17;
      uint64_t v15 = 0x697966696E67616DLL;
    }
    char v19 = v12;
    type metadata accessor for ImageProviderBox<Image.NamedImageProvider>();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v15;
    *(void *)(v11 + 24) = v20;
    *(_DWORD *)(v11 + 32) = 0;
    *(unsigned char *)(v11 + 36) = 1;
    *(_OWORD *)(v11 + 40) = xmmword_18834C6B0;
    *(void *)(v11 + 56) = v15;
    *(void *)(v11 + 64) = v20;
    *(_OWORD *)(v11 + 72) = xmmword_18834C6D0;
    *(unsigned char *)(v11 + 88) = 0;
    uint64_t v7 = v19 & 1;
  }
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  *(unsigned char *)(a1 + 40) = v6 == 0;

  return outlined copy of Label<Text, Image>?(v3, v4, v5, v6);
}

uint64_t outlined copy of Label<Text, Image>?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in DefaultTabLabel()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DefaultTabLabel()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>>();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  uint64_t v0 = static ModifiedContent<>._viewListCount(inputs:)();
  if ((v1 & 1) == 0)
  {
    BOOL v2 = v0 != static ModifiedContent<>._viewListCount(inputs:)();
    if ((v3 | v2)) {
      return 0;
    }
  }
  return v0;
}

uint64_t destroy for DefaultTabLabel(uint64_t result)
{
  if (*(void *)(result + 24))
  {
    outlined consume of Text.Storage(*(void *)result, *(void *)(result + 8), *(unsigned char *)(result + 16));
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for DefaultTabLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    char v7 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v6, v7);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = v7;
    uint64_t v8 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v8;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for DefaultTabLabel(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)a2;
      uint64_t v6 = *((void *)a2 + 1);
      char v7 = *((unsigned char *)a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v6, v7);
      uint64_t v8 = *(void *)a1;
      uint64_t v9 = *(void *)(a1 + 8);
      char v10 = *(unsigned char *)(a1 + 16);
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v6;
      *(unsigned char *)(a1 + 16) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of Label<Text, Image>(a1);
      uint64_t v14 = *((void *)a2 + 4);
      long long v15 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v15;
      *(void *)(a1 + 32) = v14;
    }
  }
  else if (v4)
  {
    uint64_t v11 = *(void *)a2;
    uint64_t v12 = *((void *)a2 + 1);
    char v13 = *((unsigned char *)a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v12, v13);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    *(unsigned char *)(a1 + 16) = v13;
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    long long v16 = *a2;
    long long v17 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v16;
    *(_OWORD *)(a1 + 16) = v17;
  }
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  return a1;
}

uint64_t outlined destroy of Label<Text, Image>(uint64_t a1)
{
  type metadata accessor for Label<Text, Image>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t assignWithTake for DefaultTabLabel(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 24)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4)
  {
    outlined destroy of Label<Text, Image>(a1);
LABEL_5:
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    goto LABEL_6;
  }
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Text.Storage(v6, v7, v8);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
LABEL_6:
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultTabLabel(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultTabLabel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultTabLabel()
{
  return &type metadata for DefaultTabLabel;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<Label<Text, Image>, Label<Text, Image>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<Label<Text, Image>, Label<Text, Image>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<Label<Text, Image>, Label<Text, Image>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<Label<Text, Image>, Label<Text, Image>>();
    lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (void (*)(uint64_t))type metadata accessor for Label<Text, Image>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<Label<Text, Image>, Label<Text, Image>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<Label<Text, Image>, Label<Text, Image>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<Label<Text, Image>, Label<Text, Image>>)
  {
    type metadata accessor for Label<Text, Image>();
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<Label<Text, Image>, Label<Text, Image>>);
    }
  }
}

void SortedArrayDictionary.endIndex.getter()
{
  type metadata accessor for SortedArrayDictionary.Element();

  JUMPOUT(0x18C115CB0);
}

uint64_t static SortedArrayDictionary.Element<>.== infix(_:_:)()
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for SortedArrayDictionary.Element();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t SortedArrayDictionary<>.hash(into:)()
{
  return swift_bridgeObjectRelease();
}

Swift::Int SortedArrayDictionary<>.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t static SortedArrayDictionary<>.== infix(_:_:)()
{
  return static Array<A>.== infix(_:_:)() & 1;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance SortedArrayDictionary<A, B>()
{
  return MEMORY[0x1F41842A0]();
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance SortedArrayDictionary<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842B0](a1, a2, WitnessTable, v5);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance SortedArrayDictionary<A, B>(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance SortedArrayDictionary<A, B>(a1, a2, a3, MEMORY[0x1E4FBB618]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance SortedArrayDictionary<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842B8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance SortedArrayDictionary<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41842A0](a1, a2, a3, a4, WitnessTable);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance SortedArrayDictionary<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842C8](a1, a2, a3, WitnessTable, v7);
}

void protocol witness for Collection.endIndex.getter in conformance SortedArrayDictionary<A, B>(void *a1@<X8>)
{
  SortedArrayDictionary.endIndex.getter();
  *a1 = v2;
}

void (*protocol witness for Collection.subscript.read in conformance SortedArrayDictionary<A, B>(uint64_t **a1))(void *a1)
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)SortedArrayDictionary.subscript.read(v2);
  return protocol witness for Collection.subscript.read in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>;
}

void (*SortedArrayDictionary.subscript.read(uint64_t *a1))(void *a1)
{
  uint64_t v2 = type metadata accessor for SortedArrayDictionary.Element();
  *a1 = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  a1[1] = v3;
  a1[2] = (uint64_t)malloc(*(void *)(v3 + 64));
  Array.subscript.getter();
  return CoalescingAdjacentDuplicates.subscript.read;
}

uint64_t protocol witness for Collection.subscript.getter in conformance SortedArrayDictionary<A, B>()
{
  return MEMORY[0x1F4184430]();
}

uint64_t protocol witness for Collection.indices.getter in conformance SortedArrayDictionary<A, B>()
{
  swift_getWitnessTable();

  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.index(after:) in conformance SortedArrayDictionary<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842A8](a1, a2, WitnessTable, v5);
}

void *protocol witness for Collection.formIndex(after:) in conformance SortedArrayDictionary<A, B>(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance SortedArrayDictionary<A, B>(a1, a2, a3, MEMORY[0x1E4FBB610]);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance SortedArrayDictionary<A, B>(void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t result = a4(&v9, a1, a2, WitnessTable, MEMORY[0x1E4FBB590]);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance SortedArrayDictionary<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance SortedArrayDictionary<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> SortedArrayDictionary<A, B>.Element()
{
  return static SortedArrayDictionary.Element<>.== infix(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> SortedArrayDictionary<A, B>()
{
  return SortedArrayDictionary<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> SortedArrayDictionary<A, B>()
{
  return SortedArrayDictionary<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> SortedArrayDictionary<A, B>()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> SortedArrayDictionary<A, B>()
{
  return static SortedArrayDictionary<>.== infix(_:_:)();
}

uint64_t SortedArrayDictionary.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v19 = a1;
  type metadata accessor for SortedArrayDictionary.Element();
  uint64_t v7 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C115A70](&v16, v7, WitnessTable);
  uint64_t v18 = v16;
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = a2;
  v9[3] = a3;
  v9[4] = a4;
  type metadata accessor for LazySequence();
  swift_getWitnessTable();
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  long long v16 = v19;
  uint64_t v17 = v20;
  type metadata accessor for LazyMapSequence();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v10 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v12 = v11;
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)&long long v19 = 91;
  *((void *)&v19 + 1) = 0xE100000000000000;
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = 93;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t closure #1 in SortedArrayDictionary.debugDescription.getter@<X0>(void *a1@<X8>)
{
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v2._countAndFlagsBits = 8250;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  type metadata accessor for SortedArrayDictionary.Element();
  uint64_t result = DefaultStringInterpolation.appendInterpolation<A>(_:)();
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SortedArrayDictionary<A, B>(uint64_t *a1)
{
  return SortedArrayDictionary.debugDescription.getter(*v1, a1[2], a1[3], a1[4]);
}

uint64_t base witness table accessor for Equatable in <> SortedArrayDictionary<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in <> SortedArrayDictionary<A, B>.Element()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in SortedArrayDictionary<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in SortedArrayDictionary<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in SortedArrayDictionary<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for BidirectionalCollection in SortedArrayDictionary<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in SortedArrayDictionary<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for SortedArrayDictionary.Element()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187EF1A2C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SortedArrayDictionary.debugDescription.getter@<X0>(void *a1@<X8>)
{
  return closure #1 in SortedArrayDictionary.debugDescription.getter(a1);
}

uint64_t getEnumTagSinglePayload for SortedArrayDictionary.Element(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for SortedArrayDictionary.Element(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187EF1F0CLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for SortedArrayDictionary()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static NavigationDestination._makeDestinations(content:inputs:resolved:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static NavigationDestination._makeDestinations(content:inputs:resolved:)(a1, a2, a3, a4, a5);
}

{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedConformanceWitness;
  long long v20;
  long long v21;
  int v22;
  int v24;
  unsigned char v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t WitnessTable;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  long long v36;
  long long v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  uint64_t v9 = *a2;
  unsigned int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  unint64_t v22 = *((_DWORD *)a2 + 20);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  LODWORD(v31) = v8;
  type metadata accessor for _GraphValue();
  uint64_t v13 = a2[3];
  size_t v14 = a2[4];
  unsigned int v20 = *(_OWORD *)(a2 + 7);
  int v21 = *(_OWORD *)(a2 + 5);
  BOOL v15 = a2[9];
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  LODWORD(v31) = _GraphValue.value.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v26 = AssociatedTypeWitness;
  unsigned int v27 = type metadata accessor for Focus();
  uint64_t WitnessTable = swift_getWitnessTable();
  unsigned int v16 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v31, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v25, v27, MEMORY[0x1E4FBC248], v16, MEMORY[0x1E4FBC278], v17);
  swift_release();
  swift_release();
  _GraphValue.init(_:)();
  char v31 = v9;
  LODWORD(KeyPath) = v10;
  uint64_t v33 = v11;
  uint64_t v34 = v13;
  uint64_t v35 = v14;
  uint64_t v36 = v21;
  uint64_t v37 = v20;
  uint64_t v38 = v15;
  uint64_t v39 = v22;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v24, &v31, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t specialized static NavigationDestination._makeDestinations(content:inputs:resolved:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for _GraphValue<Never>();
  unsigned int v5 = _GraphValue.value.getter();
  swift_getKeyPath();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for Focus<Never, Never>();
  lazy protocol witness table accessor for type Focus<Never, Never> and conformance Focus<A, B>();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _GraphValue.init(_:)();
  return specialized static NavigationDestination._makeDestinations(content:inputs:resolved:)(v5, a2, a3);
}

uint64_t sub_187EF22D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 8) + 24))(*(void *)(a3 + a2 - 16));
}

uint64_t sub_187EF2318()
{
  return 16;
}

__n128 sub_187EF2324(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t protocol witness for static NavigationDestination._makeDestinations(content:inputs:resolved:) in conformance Never(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static NavigationDestination._makeDestinations(content:inputs:resolved:)(v3, (uint64_t)v7, a3);
}

uint64_t static Group<A>._makeDestinations(content:inputs:resolved:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a2;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  int v12 = *((_DWORD *)a2 + 20);
  LODWORD(v19) = *a1;
  type metadata accessor for Group();
  type metadata accessor for _GraphValue();
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  long long v17 = *(_OWORD *)(a2 + 7);
  long long v18 = *(_OWORD *)(a2 + 5);
  uint64_t v15 = a2[9];
  _GraphValue.subscript.getter();
  uint64_t v19 = v9;
  int v20 = v10;
  uint64_t v21 = v11;
  uint64_t v22 = v13;
  uint64_t v23 = v14;
  long long v24 = v18;
  long long v25 = v17;
  uint64_t v26 = v15;
  int v27 = v12;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t, uint64_t))(a5 + 32))(v28, &v19, a3, a4, a5);
}

void protocol witness for NavigationDestination.body.getter in conformance <A> Group<A>()
{
}

uint64_t protocol witness for static NavigationDestination._makeDestinations(content:inputs:resolved:) in conformance <A> Group<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static Group<A>._makeDestinations(content:inputs:resolved:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a5 - 8));
}

void TupleNavigationDestination.body.getter()
{
}

uint64_t TupleNavigationDestination.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t static TupleNavigationDestination._makeDestinations(content:inputs:resolved:)(int *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v4 = *a1;
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  int v10 = *((_DWORD *)a2 + 20);
  lazy protocol witness table accessor for type NavigationDestinationDescriptor and conformance NavigationDestinationDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  uint64_t v11 = v29;
  LODWORD(v29) = v4;
  uint64_t v30 = v5;
  int v31 = v6;
  uint64_t v12 = v11;
  uint64_t v32 = v7;
  long long v33 = *(_OWORD *)(a2 + 3);
  uint64_t v34 = v8;
  uint64_t v35 = v9;
  long long v36 = *(_OWORD *)(a2 + 7);
  uint64_t v37 = a2[9];
  int v38 = v10;
  uint64_t v39 = 0;
  uint64_t v40 = MEMORY[0x1E4FBC860];
  uint64_t v13 = *(void *)(v11 + 16);
  if (v13)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v14 = (uint64_t *)(v12 + 48);
    do
    {
      uint64_t v15 = *(v14 - 1);
      uint64_t v16 = *v14;
      v14 += 3;
      uint64_t v39 = AGTupleElementOffset();
      uint64_t v17 = type metadata accessor for TupleNavigationDestination.Collector();
      TupleNavigationDestination.Collector.visit<A>(type:)(v15, v17, v15, v16);
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v18 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI28NavigationDestinationOutputsVG_AF011PreferencesH0Vs5NeverOTg503_s7d9UI26Tuplefg69V17_makeDestinations7content6inputs8resolvedyAA11_GraphValueVyACyxGG_q40_ViewInputsVAA01_dE10CollectionVztFZAA18iH61VAA0deQ0Vcfu_33_52f1b6677f90efccc4a0b5c00fa35ed1AsQTf3nnnpk_nTf1cn_n(v18);
  swift_bridgeObjectRelease();
  PreferencesOutputs.init()();
  uint64_t v25 = v27;
  int v26 = v28;
  uint64_t v24 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    do
    {
      uint64_t v19 = (void (*)(uint64_t *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v19(&v27, 0);
      uint64_t v20 = v24;
      uint64_t v27 = v9;
      swift_bridgeObjectRetain();
      uint64_t v21 = PreferenceKeys.endIndex.getter();
      if (v24 < 0 || v24 >= v21) {
        __break(1u);
      }
      ++v24;
      swift_bridgeObjectRelease();
      static PreferenceKey.visitKey<A>(_:)();
    }
    while (v20 + 1 != PreferenceKeys.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)a3 = v25;
  *(_DWORD *)(a3 + 8) = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t TupleNavigationDestination.Collector.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  LODWORD(v19) = *(_DWORD *)v4;
  type metadata accessor for TupleNavigationDestination();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  PreferencesOutputs.init()();
  uint64_t v28 = v19;
  int v29 = v20;
  _GraphValue.init(_:)();
  long long v8 = *(_OWORD *)(v4 + 48);
  long long v22 = *(_OWORD *)(v4 + 32);
  long long v23 = v8;
  int v9 = *(_DWORD *)(v4 + 16);
  uint64_t v10 = *(void *)(v4 + 24);
  int v11 = *(_DWORD *)(v4 + 88);
  uint64_t v19 = *(void *)(v4 + 8);
  int v20 = v9;
  uint64_t v21 = v10;
  long long v24 = *(_OWORD *)(v4 + 64);
  uint64_t v25 = *(void *)(v4 + 80);
  int v26 = v11;
  (*(void (**)(char *, uint64_t *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(v27, &v19, &v28, a3, a4);
  uint64_t v12 = v28;
  int v13 = v29;
  uint64_t v14 = *(void *)(v4 + 104);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1, (char *)v14);
    uint64_t v14 = result;
  }
  unint64_t v17 = *(void *)(v14 + 16);
  unint64_t v16 = *(void *)(v14 + 24);
  if (v17 >= v16 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, (char *)v14);
    uint64_t v14 = result;
  }
  *(void *)(v14 + 16) = v17 + 1;
  unint64_t v18 = v14 + 16 * v17;
  *(void *)(v18 + 32) = v12;
  *(_DWORD *)(v18 + 40) = v13;
  *(void *)(v5 + 104) = v14;
  return result;
}

uint64_t protocol witness for NavigationDestinationTypeVisitor.visit<A>(type:) in conformance TupleNavigationDestination<A>.Collector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleNavigationDestination.Collector.visit<A>(type:)(a1, a4, a2, a3);
}

void protocol witness for NavigationDestination.body.getter in conformance TupleNavigationDestination<A>()
{
}

uint64_t protocol witness for static NavigationDestination._makeDestinations(content:inputs:resolved:) in conformance TupleNavigationDestination<A>(int *a1, uint64_t *a2, uint64_t a3)
{
  return static TupleNavigationDestination._makeDestinations(content:inputs:resolved:)(a1, a2, a3);
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance NavigationDestinationDescriptor()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance NavigationDestinationDescriptor(uint64_t a1)
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  static NavigationDestinationDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance NavigationDestinationDescriptor())()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

void protocol witness for NavigationDestination.body.getter in conformance PushDestination<A, B>()
{
}

void specialized NavigationDestination.bodyError()()
{
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x800000018832C960;
  v1._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized PrimitiveNavigationDestination.body.getter()
{
}

void specialized TupleNavigationDestination.body.getter()
{
}

unint64_t lazy protocol witness table accessor for type NavigationDestinationDescriptor and conformance NavigationDestinationDescriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationDestinationDescriptor and conformance NavigationDestinationDescriptor;
  if (!lazy protocol witness table cache variable for type NavigationDestinationDescriptor and conformance NavigationDestinationDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationDestinationDescriptor and conformance NavigationDestinationDescriptor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationDestinationDescriptor and conformance NavigationDestinationDescriptor;
  if (!lazy protocol witness table cache variable for type NavigationDestinationDescriptor and conformance NavigationDestinationDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationDestinationDescriptor and conformance NavigationDestinationDescriptor);
  }
  return result;
}

uint64_t type metadata accessor for TupleNavigationDestination.Collector()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **associated type witness table accessor for NavigationDestination.Body : NavigationDestination in Never()
{
  return &protocol witness table for Never;
}

uint64_t dispatch thunk of NavigationDestination.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static NavigationDestination._makeDestinations(content:inputs:resolved:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t getEnumTagSinglePayload for TupleNavigationDestination(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for TupleNavigationDestination(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187EF31F0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for TupleNavigationDestination()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for TupleNavigationDestination.Collector()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TupleNavigationDestination.Collector(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v4 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleNavigationDestination.Collector(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TupleNavigationDestination.Collector(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v4 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NavigationDestinationDescriptor()
{
  return &type metadata for NavigationDestinationDescriptor;
}

void type metadata accessor for Focus<Never, Never>()
{
  if (!lazy cache variable for type metadata for Focus<Never, Never>)
  {
    unint64_t v0 = type metadata accessor for Focus();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<Never, Never>);
    }
  }
}

void __swiftcall EllipticalListStyle.init()()
{
}

void static EllipticalListStyle._makeView<A>(value:inputs:)()
{
}

void static EllipticalListStyle._makeViewList<A>(value:inputs:)()
{
}

ValueMetadata *type metadata accessor for EllipticalListStyle()
{
  return &type metadata for EllipticalListStyle;
}

void NavigationControlGroupStyle.makeBody(configuration:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in NavigationControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for NavigationControlGroupStyle()
{
  return &type metadata for NavigationControlGroupStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<HorizontalStackControlGroupStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<HorizontalStackControlGroupStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<HorizontalStackControlGroupStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<HorizontalStackControlGroupStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<HorizontalStackControlGroupStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<HorizontalStackControlGroupStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<HorizontalStackControlGroupStyle>>)
  {
    type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>();
    _s7SwiftUI25ControlGroupStyleModifierVyAA04MenucdE0VGMaTm_0(255, &lazy cache variable for type metadata for ControlGroupStyleModifier<HorizontalStackControlGroupStyle>, (void (*)(void))lazy protocol witness table accessor for type HorizontalStackControlGroupStyle and conformance HorizontalStackControlGroupStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<HorizontalStackControlGroupStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>)
  {
    type metadata accessor for ControlGroup<ControlGroupStyleConfiguration.Content>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>);
    }
  }
}

void _s7SwiftUI25ControlGroupStyleModifierVyAA04MenucdE0VGMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for ControlGroupStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type HorizontalStackControlGroupStyle and conformance HorizontalStackControlGroupStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type HorizontalStackControlGroupStyle and conformance HorizontalStackControlGroupStyle;
  if (!lazy protocol witness table cache variable for type HorizontalStackControlGroupStyle and conformance HorizontalStackControlGroupStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalStackControlGroupStyle and conformance HorizontalStackControlGroupStyle);
  }
  return result;
}

void *specialized Sequence.reduce<A>(_:_:)(void *result, void *(*a2)(void **__return_ptr, void **, uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = result;
  if (a4 != a5)
  {
    uint64_t v7 = a4;
    if (a5 >= a4)
    {
      while (v7 < a5)
      {
        uint64_t v10 = v7;
        unint64_t result = a2(&v9, &v11, &v10);
        if (!v5)
        {
          ++v7;
          unint64_t result = v9;
          int v11 = v9;
          if (a5 != v7) {
            continue;
          }
        }
        return result;
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = a2;
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(void *)(a2 + 16) <= a1)
  {
LABEL_11:
    __break(1u);
    JUMPOUT(0x187EF3A68);
  }
  memcpy(v15, (const void *)(a2 + 304 * a1 + 32), 0x12BuLL);
  char v6 = 1;
  switch(LOBYTE(v15[3]))
  {
    case 1:
      outlined retain of NavigationColumnState(v15);
      uint64_t v7 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a3, (uint64_t)v15, a1, a2);
      if (v7)
      {
        outlined release of NavigationColumnState(v15);
        goto LABEL_4;
      }
      MEMORY[0x1F4188790](v7);
      v13[2] = &v14;
      void v13[3] = a3;
      char v11 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSi_s5NeverOSbTg5((void *(*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:), (uint64_t)v13, v9, v10);
      outlined release of NavigationColumnState(v15);
      char v6 = (v11 == 2) | v11;
      break;
    case 2:
      outlined retain of NavigationColumnState(v15);
      char v8 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a3, (uint64_t)v15, a1, a2);
      outlined release of NavigationColumnState(v15);
      char v6 = v8 ^ 1;
      break;
    case 5:
      return v6 & 1;
    default:
LABEL_4:
      char v6 = 0;
      break;
  }
  return v6 & 1;
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.index(before:)(unint64_t a1, char a2, uint64_t a3, char a4)
{
  outlined init with take of NavigationState.Base(v4, __src);
  outlined init with take of NavigationState.Base(__src, v88);
  int v10 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v88);
  if (!v10) {
    goto LABEL_6;
  }
  if (v10 != 1)
  {
    uint64_t v15 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v88);
    uint64_t v16 = *(void *)v15;
    uint64_t v18 = *(void *)(v15 + 16);
    uint64_t v17 = *(void *)(v15 + 24);
    uint64_t v20 = *(void *)(v15 + 32);
    uint64_t v19 = *(void *)(v15 + 40);
    uint64_t v22 = *(void *)(v15 + 48);
    uint64_t v21 = *(void *)(v15 + 56);
    uint64_t v23 = *(void *)(v15 + 64);
    unsigned __int16 v24 = *(_WORD *)(v15 + 72);
    v79[0] = *(void *)(v15 + 8);
    v79[1] = v18;
    v79[2] = v17;
    v79[3] = v20;
    v79[4] = v19;
    v79[5] = v22;
    v79[6] = v21;
    v79[7] = v23;
    unsigned __int16 v80 = v24;
    uint64_t v73 = v21;
    uint64_t v74 = v23;
    uint64_t v70 = v19;
    uint64_t v71 = v22;
    uint64_t v67 = v17;
    uint64_t v68 = v20;
    uint64_t v65 = v79[0];
    uint64_t v66 = v18;
    unsigned __int16 v64 = v24;
    uint64_t v62 = (uint64_t)v4;
    if (a2)
    {
      unint64_t v76 = *(void *)(v16 + 16);
      outlined init with take of NavigationState.Base(__src, v78);
      uint64_t v28 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v78);
      uint64_t v29 = *(void *)(v28 + 8);
      uint64_t v30 = *(void *)(v28 + 16);
      uint64_t v31 = *(void *)(v28 + 24);
      uint64_t v32 = *(void *)(v28 + 32);
      uint64_t v5 = *(void *)(v28 + 40);
      uint64_t v33 = v16;
      uint64_t v34 = *(void *)(v28 + 48);
      uint64_t v35 = *(void *)(v28 + 56);
      uint64_t v36 = *(void *)(v28 + 64);
      unsigned __int16 v37 = *(_WORD *)(v28 + 72);
      swift_bridgeObjectRetain();
      uint64_t v38 = v35;
      uint64_t v16 = v33;
      uint64_t v39 = v36;
      a1 = v76;
      outlined copy of NavigationSplitViewState?(v29, v30, v31, v32, v5, v34, v38, v39, v37, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
    }
    else
    {
      if ((a1 & 0x8000000000000000) != 0)
      {
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        outlined release of NavigationColumnState(v85);
LABEL_64:
        outlined release of NavigationColumnState(v84);
LABEL_65:
        outlined release of NavigationColumnState(v83);
LABEL_66:
        outlined release of NavigationColumnState(v82);
LABEL_67:
        outlined release of NavigationColumnState(v81);
LABEL_68:
        memcpy(v77, (const void *)a3, 0x12BuLL);
        uint64_t v48 = v77[21];
        if (v77[21] < 0)
        {
          outlined copy of NavigationSplitViewState?(v65, v66, v67, v68, v70, v71, v73, v74, v64, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        }
        else
        {
          uint64_t v49 = v77[22];
          uint64_t v50 = v77[19];
          uint64_t v63 = v77[20];
          uint64_t v52 = v77[17];
          uint64_t v51 = v77[18];
          uint64_t v53 = v77[15];
          uint64_t v54 = v77[16];
          uint64_t v55 = v77[14];
          outlined retain of NavigationColumnState(v77);
          outlined copy of NavigationColumnState.ColumnContent(v55, v53, v54, v52, v51, v50, v63, v48);
          outlined consume of NavigationColumnState.ReplacedRoot?(v55, v53, v54, v52);
          uint64_t v56 = *(void *)(v49 + 16);
          swift_bridgeObjectRelease();
          uint64_t v57 = swift_bridgeObjectRelease();
          if (v56)
          {
            swift_release();
            outlined release of NavigationColumnState(v77);
            outlined copy of NavigationSplitViewState?(v65, v66, v67, v68, v70, v71, v73, v74, v64, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
            swift_bridgeObjectRelease();
            return v5;
          }
          uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 80))(v57);
          if ((v58 & 1) == 0)
          {
            uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v48 + 88))(v58, v59);
            swift_release();
            outlined release of NavigationColumnState(v77);
            outlined copy of NavigationSplitViewState?(v65, v66, v67, v68, v70, v71, v73, v74, v64, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
            swift_bridgeObjectRelease();
            if (!__OFSUB__(v61, 1)) {
              return v5;
            }
            __break(1u);
            goto LABEL_79;
          }
          swift_release();
          outlined release of NavigationColumnState(v77);
          outlined copy of NavigationSplitViewState?(v65, v66, v67, v68, v70, v71, v73, v74, v64, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        }
        swift_bridgeObjectRelease();
        return v5;
      }
      if (*(void *)(v16 + 16) <= a1) {
        goto LABEL_62;
      }
      memcpy(v78, (const void *)(v16 + 304 * a1 + 32), 0x12BuLL);
      _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_0((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined retain of NavigationColumnState(v78);
      uint64_t v5 = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:for:)(a1, 0, a3, a4, (uint64_t)v78);
      int v26 = ~v25;
      outlined release of NavigationColumnState(v78);
      if (v26)
      {
        outlined copy of NavigationSplitViewState?(v65, v66, v67, v68, v70, v71, v73, v74, v64, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    if (!a1)
    {
LABEL_59:
      swift_bridgeObjectRelease();
      outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>(v62);
      uint64_t v5 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter();
      outlined copy of NavigationSplitViewState?(v65, v66, v67, v68, v70, v71, v73, v74, v64, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>(v62);
      return v5;
    }
    int64_t v40 = *(void *)(v16 + 16);
    int64_t v41 = a1 + 5;
    a3 = v16 + 304 * a1 - 272;
    while (1)
    {
      unint64_t v43 = v41 - 5;
      if (v41 - 5 > v40) {
        break;
      }
      uint64_t v5 = v41 - 6;
      memcpy(v81, (const void *)a3, 0x12BuLL);
      switch(LOBYTE(v81[3]))
      {
        case 1:
          outlined retain of NavigationColumnState(v81);
          if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v81, v41 - 6, v16))goto LABEL_67; {
          if ((uint64_t)v43 >= v40)
          }
            goto LABEL_48;
          memcpy(v82, (const void *)(a3 + 304), 0x12BuLL);
          switch(LOBYTE(v82[3]))
          {
            case 1:
              outlined retain of NavigationColumnState(v82);
              if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v82, v41 - 5, v16))goto LABEL_66; {
              if (v41 - 4 >= v40)
              }
                goto LABEL_47;
              memcpy(v83, (const void *)(a3 + 608), 0x12BuLL);
              switch(LOBYTE(v83[3]))
              {
                case 1:
                  outlined retain of NavigationColumnState(v83);
                  if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v83, v41 - 4, v16))goto LABEL_65; {
                  if (v41 - 3 >= v40)
                  }
                    goto LABEL_46;
                  memcpy(v84, (const void *)(a3 + 912), 0x12BuLL);
                  switch(LOBYTE(v84[3]))
                  {
                    case 1:
                      outlined retain of NavigationColumnState(v84);
                      if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v84, v41 - 3, v16))goto LABEL_64; {
                      if (v41 - 2 >= v40)
                      }
                        goto LABEL_45;
                      break;
                    case 2:
                      outlined retain of NavigationColumnState(v84);
                      char v45 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v84, v41 - 3, v16);
                      outlined release of NavigationColumnState(v84);
                      goto LABEL_41;
                    case 5:
                      goto LABEL_46;
                    default:
                      goto LABEL_65;
                  }
                  break;
                case 2:
                  outlined retain of NavigationColumnState(v83);
                  char v45 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v83, v41 - 4, v16);
LABEL_41:
                  outlined release of NavigationColumnState(v83);
                  goto LABEL_38;
                case 5:
                  goto LABEL_47;
                default:
                  goto LABEL_66;
              }
              break;
            case 2:
              outlined retain of NavigationColumnState(v82);
              char v45 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v82, v41 - 5, v16);
LABEL_38:
              outlined release of NavigationColumnState(v82);
              outlined release of NavigationColumnState(v81);
              if (v45) {
                goto LABEL_68;
              }
              goto LABEL_18;
            case 5:
              goto LABEL_48;
            default:
              goto LABEL_67;
          }
          break;
        case 2:
          outlined retain of NavigationColumnState(v81);
          char v42 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v81, v41 - 6, v16);
          outlined release of NavigationColumnState(v81);
          if ((v42 & 1) == 0) {
            goto LABEL_18;
          }
          goto LABEL_68;
        case 5:
          goto LABEL_18;
        default:
          goto LABEL_68;
      }
      memcpy(v85, (const void *)(a3 + 1216), 0x12BuLL);
      switch(LOBYTE(v85[3]))
      {
        case 1:
          outlined retain of NavigationColumnState(v85);
          if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v85, v41 - 2, v16))goto LABEL_63; {
          if (v41 - 1 >= v40)
          }
          {
            outlined release of NavigationColumnState(v85);
LABEL_45:
            outlined release of NavigationColumnState(v84);
LABEL_46:
            outlined release of NavigationColumnState(v83);
LABEL_47:
            outlined release of NavigationColumnState(v82);
LABEL_48:
            outlined release of NavigationColumnState(v81);
          }
          else
          {
            memcpy(__dst, (const void *)(a3 + 1520), 0x12BuLL);
            switch(LOBYTE(__dst[3]))
            {
              case 1:
                outlined retain of NavigationColumnState(__dst);
                if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)__dst, v41 - 1, v16))
                {
                  outlined release of NavigationColumnState(__dst);
                  outlined release of NavigationColumnState(v85);
                  outlined release of NavigationColumnState(v84);
                  char v44 = 0;
                }
                else if (v41 >= v40)
                {
                  outlined release of NavigationColumnState(__dst);
                  outlined release of NavigationColumnState(v85);
                  outlined release of NavigationColumnState(v84);
                  char v44 = 1;
                }
                else
                {
                  char v44 = specialized static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(v41, v16, (uint64_t)v79);
                  outlined release of NavigationColumnState(__dst);
                  outlined release of NavigationColumnState(v85);
                  outlined release of NavigationColumnState(v84);
                }
                break;
              case 2:
                outlined retain of NavigationColumnState(__dst);
                char v47 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)__dst, v41 - 1, v16);
                outlined release of NavigationColumnState(__dst);
                outlined release of NavigationColumnState(v85);
                outlined release of NavigationColumnState(v84);
                char v44 = v47 ^ 1;
                break;
              case 5:
                outlined release of NavigationColumnState(v85);
                outlined release of NavigationColumnState(v84);
                char v44 = 1;
                break;
              default:
                outlined release of NavigationColumnState(v85);
                outlined release of NavigationColumnState(v84);
                char v44 = 0;
                break;
            }
            outlined release of NavigationColumnState(v83);
LABEL_57:
            outlined release of NavigationColumnState(v82);
            outlined release of NavigationColumnState(v81);
            if ((v44 & 1) == 0) {
              goto LABEL_68;
            }
          }
LABEL_18:
          --v41;
          a3 -= 304;
          if (v43 < 2) {
            goto LABEL_59;
          }
          break;
        case 2:
          outlined retain of NavigationColumnState(v85);
          char v46 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v79, (uint64_t)v85, v41 - 2, v16);
          outlined release of NavigationColumnState(v85);
          outlined release of NavigationColumnState(v84);
          outlined release of NavigationColumnState(v83);
          char v44 = v46 ^ 1;
          goto LABEL_57;
        case 5:
          goto LABEL_45;
        default:
          goto LABEL_64;
      }
    }
    __break(1u);
    goto LABEL_61;
  }
  char v69 = a4;
  uint64_t v75 = a1;
  char v11 = (void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v88);
  outlined init with take of NavigationState.Base(__src, v78);
  uint64_t v72 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v78);
  memcpy(__dst, v11, 0x12BuLL);
  uint64_t v12 = v11[38];
  outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v72);
  outlined consume of ResolvedNavigationDestinations?(v12);
  if (a2)
  {
    uint64_t v13 = specialized NavigationState.StackContent.Views.ViewsSequence.lastIndex(for:stateIndex:)(__dst, 0);
    if (v27 != -1) {
      goto LABEL_13;
    }
LABEL_79:
    __break(1u);
    JUMPOUT(0x187EF4710);
  }
  uint64_t v13 = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:for:)(v75, 0, a3, v69, (uint64_t)__dst);
  if (v14 != -1)
  {
LABEL_13:
    uint64_t v5 = v13;
    outlined release of NavigationColumnState(v11);
    return v5;
  }
  __break(1u);
LABEL_6:
  _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v88);
  return specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter();
}

uint64_t _NavigationStackStyleConfiguration.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t closure #2 in _NavigationStackStyleConfiguration.init(authority:context:structureSeed:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  static Transaction.current.getter();
  static Transaction.current.getter();
  char v7 = Transaction.disablesAnimations.getter();
  swift_release();
  if (v7) {
    char v8 = 1;
  }
  else {
    char v8 = Transaction.disablesAnimations.getter();
  }
  static Transaction.current.getter();
  uint64_t v9 = Transaction.animation.getter();
  swift_release();
  if (!v9) {
    uint64_t v9 = Transaction.animation.getter();
  }
  swift_release();
  memset(&v13[8], 0, 48);
  uint64_t v12 = v9;
  *(void *)uint64_t v13 = 1;
  uint64_t v14 = 0;
  LOBYTE(v15) = 9;
  *((void *)&v15 + 1) = a2;
  *(void *)&long long v16 = a3;
  *((void *)&v16 + 1) = a4;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  *(void *)&long long v19 = 0;
  BYTE8(v19) = v8 & 1;
  uint64_t v20 = v9;
  v11[6] = 0u;
  v11[7] = v19;
  v11[2] = *(_OWORD *)&v13[32];
  uint64_t v11[3] = 0uLL;
  unsigned char v11[4] = v15;
  v11[5] = v16;
  v11[0] = *(_OWORD *)v13;
  v11[1] = *(_OWORD *)&v13[16];
  NavigationAuthority.enqueueRequest(_:)(v11);
  return outlined release of NavigationRequest((uint64_t)v13);
}

Swift::Void __swiftcall _NavigationStackStyleConfiguration.pop()()
{
  (*(void (**)(void))(v0 + 32))();
}

void protocol witness for View.body.getter in conformance _NavigationStackStyleConfiguration.Root()
{
}

uint64_t _NavigationStackStyleConfiguration.Item.id.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of _NavigationStackStyleConfiguration.Item.ID(v1 + 48, a1);
}

uint64_t outlined init with copy of _NavigationStackStyleConfiguration.Item.ID(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _NavigationStackStyleConfiguration.Item.id.setter(uint64_t a1)
{
  return outlined assign with take of _NavigationStackStyleConfiguration.Item.ID(a1, v1 + 48);
}

uint64_t outlined assign with take of _NavigationStackStyleConfiguration.Item.ID(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  if (a2 != a1)
  {
    outlined destroy of NavigationStackViewSource(a2 + 8);
    long long v4 = *(_OWORD *)(a1 + 33);
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a2 + 24) = v5;
    *(_OWORD *)(a2 + 33) = v4;
  }
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(unsigned char *)(a2 + 64) = *(unsigned char *)(a1 + 64);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  return a2;
}

uint64_t (*_NavigationStackStyleConfiguration.Item.id.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _NavigationStackStyleConfiguration.Item.depth.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t static _NavigationStackStyleConfiguration.Item._makeView(view:inputs:)()
{
  if (AGWeakAttributeGetAttribute() != *MEMORY[0x1E4F4E7A0]) {
    AGGraphCreateOffsetAttribute2();
  }
  AGCreateWeakAttribute();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Item.Child and conformance _NavigationStackStyleConfiguration.Item.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  return static AnyView._makeView(view:inputs:)();
}

void _NavigationStackStyleConfiguration.Item.ID.hash(into:)()
{
  void (*v2)(_OWORD *__return_ptr, uint64_t);
  uint64_t v3;
  Swift::UInt v4;
  Swift::UInt v5;
  _OWORD v6[2];
  uint64_t v7;
  long long v8;
  long long v9;
  uint64_t v10;
  char v11;

  Hasher._combine(_:)(*(void *)v0);
  outlined init with copy of NavigationStackViewSource(v0 + 8, (uint64_t)&v8);
  if (v11)
  {
    if (v11 == 1)
    {
      *(_OWORD *)uint64_t v1 = v8;
      *(_OWORD *)&v1[16] = v9;
      Hasher._combine(_:)(2uLL);
      if (*(void *)v1)
      {
        Hasher._combine(_:)(1u);
        Swift::String v2 = *(void (**)(_OWORD *__return_ptr, uint64_t))(**(void **)v1 + 96);
        uint64_t v3 = swift_retain();
        v2(v6, v3);
        AnyHashable.hash(into:)();
        outlined destroy of AnyHashable((uint64_t)v6);
        swift_release();
        if (*(void *)&v1[16] == 1)
        {
LABEL_5:
          Hasher._combine(_:)(0);
LABEL_10:
          Hasher._combine(_:)(*(Swift::UInt *)&v1[24]);
          swift_release();
          outlined consume of Text.LineStyle?(*(uint64_t *)&v1[8], *(uint64_t *)&v1[16]);
          goto LABEL_11;
        }
      }
      else
      {
        Hasher._combine(_:)(0);
        if (*(void *)&v1[16] == 1) {
          goto LABEL_5;
        }
      }
      v6[0] = *(_OWORD *)&v1[8];
      Hasher._combine(_:)(1u);
      _ViewList_ID.Canonical.hash(into:)();
      goto LABEL_10;
    }
    Hasher._combine(_:)(0);
  }
  else
  {
    v6[0] = v8;
    v6[1] = v9;
    char v7 = v10;
    Hasher._combine(_:)(1uLL);
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v6);
  }
LABEL_11:
  long long v4 = *(unsigned __int8 *)(v0 + 64);
  long long v5 = *(void *)(v0 + 72);
  Hasher._combine(_:)(*(void *)(v0 + 56));
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
}

Swift::Int _NavigationStackStyleConfiguration.Item.ID.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _NavigationStackStyleConfiguration.Item.ID()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _NavigationStackStyleConfiguration.Item.ID()
{
  return Hasher._finalize()();
}

uint64_t _NavigationStackStyleConfiguration.Item.Child.value.getter()
{
  if (AGWeakAttributeGetAttribute() != *MEMORY[0x1E4F4E7A0]) {
    AGGraphRegisterDependency();
  }
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of _NavigationStackStyleConfiguration.Item(Value, (uint64_t)v64);
  uint64_t Strong = swift_weakLoadStrong();
  outlined destroy of _NavigationStackStyleConfiguration.Item((uint64_t)v64);
  if (Strong
    && (swift_beginAccess(),
        _s7SwiftUI15NavigationStateVSgWObTm_0(Strong + 16, (uint64_t)v61, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), outlined retain of NavigationState?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?), swift_release(), _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)v61, (uint64_t)v62, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), getEnumTag for AccessibilityActionCategory.Category((uint64_t)v62) != 1))
  {
    _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)v61, (uint64_t)v59, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    uint64_t v43 = AGGraphGetValue();
    Swift::UInt v44 = *(void *)v43;
    Swift::UInt v45 = *(void *)(v43 + 16);
    unsigned __int8 v46 = *(unsigned char *)(v43 + 8);
    v66[6] = v59[6];
    v66[7] = v59[7];
    v66[8] = v59[8];
    __int16 v67 = v60;
    void v66[2] = v59[2];
    v66[3] = v59[3];
    v66[4] = v59[4];
    v66[5] = v59[5];
    v66[0] = v59[0];
    v66[1] = v59[1];
    NavigationState.stackContent(for:)(v44, v46, v45, (uint64_t)v50);
    outlined retain of NavigationState?((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
    _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)v50, (uint64_t)__src, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)__src, (uint64_t)__dst, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)__dst) != 1)
    {
      _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)__src, (uint64_t)v66, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
      goto LABEL_10;
    }
    Swift::String v2 = __src;
  }
  else
  {
    _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)__dst);
    Swift::String v2 = __dst;
  }
  _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)v2, (uint64_t)v65, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  uint64_t v3 = AGGraphGetValue();
  uint64_t v4 = *(void *)v3;
  int v5 = *(unsigned __int8 *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_0((uint64_t)v65, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.StackContent?);
  v50[0] = v4;
  if (v5 == 4) {
    char v7 = 0;
  }
  else {
    char v7 = v5;
  }
  LOBYTE(v50[1]) = v7;
  v50[2] = v6;
  _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(v50);
  outlined init with take of NavigationState.Base(v50, v66);
LABEL_10:
  outlined init with take of NavigationState.Base(v66, __src);
  __src[49] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  __src[50] = 0;
  __src[51] = &outlined read-only object #0 of _NavigationStackStyleConfiguration.Item.Child.value.getter;
  memcpy(__dst, __src, 0x1A0uLL);
  uint64_t v8 = AGGraphGetValue();
  outlined init with copy of _NavigationStackStyleConfiguration.Item(v8, (uint64_t)v62);
  uint64_t v9 = v63;
  _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_0((uint64_t)v66, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  outlined destroy of _NavigationStackStyleConfiguration.Item((uint64_t)v62);
  unint64_t v10 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter();
  uint64_t v12 = v11;
  unsigned int v14 = v13;
  int v16 = v15 & 1;
  if (v9 < 0)
  {
    uint64_t v20 = 0;
    do
    {
      --v20;
      unint64_t v10 = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:)(v10, v16 & 1, v12, v14);
      uint64_t v12 = v21;
      unsigned int v14 = v22;
      int v16 = v23 & 1;
    }
    while (v9 < v20);
  }
  else
  {
    for (; v9; --v9)
    {
      unint64_t v10 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v10, v16 & 1, v12, v14);
      uint64_t v12 = v17;
      unsigned int v14 = v18;
      int v16 = v19 & 1;
    }
  }
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
  unint64_t v24 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter();
  char v26 = v25;
  uint64_t v28 = v27;
  unsigned __int8 v30 = v29;
  char v31 = v25 & 1;
  outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
  memcpy(v50, __src, 0x1A0uLL);
  char v51 = v31;
  v50[52] = v24;
  uint64_t v52 = v28;
  unsigned __int8 v53 = v30;
  char v55 = 1;
  uint64_t v54 = 0;
  uint64_t v56 = 0;
  char v57 = 2;
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v50);
  if ((v26 & 1) == 0 || v30 <= 1u)
  {
    BOOL v33 = v14 == 2 && v12 == 0;
    BOOL v47 = v33;
    while (1)
    {
      unsigned __int8 v34 = v30;
      outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v50);
      uint64_t v35 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v24, v26 & 1, v28, v30);
      uint64_t v48 = v36;
      unint64_t v49 = v35;
      char v38 = v37;
      unsigned __int8 v30 = v39;
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
      if (v26)
      {
        if (!v16) {
          goto LABEL_40;
        }
      }
      else
      {
        if (v24 == v10) {
          char v40 = v16;
        }
        else {
          char v40 = 1;
        }
        if (v40) {
          goto LABEL_40;
        }
      }
      if (!v34) {
        break;
      }
      if (v34 == 1)
      {
        if (v14 != 1) {
          goto LABEL_40;
        }
        goto LABEL_37;
      }
      if (v47)
      {
LABEL_46:
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
        specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(v10, v16, v12, v14, (uint64_t (*)(void, void, void, void, void, void))specialized NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:), (void (*)(unint64_t, void, uint64_t, void, uint64_t *, uint64_t))specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:));
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
        _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_0((uint64_t)v66, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
        uint64_t v41 = v61[0];
        swift_retain();
        outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v61);
        return v41;
      }
LABEL_40:
      char v26 = v38 & 1;
      uint64_t v28 = v48;
      unint64_t v24 = v49;
      if ((v38 & 1) != 0 && v30 > 1u) {
        goto LABEL_42;
      }
    }
    if ((_BYTE)v14) {
      goto LABEL_40;
    }
LABEL_37:
    if (v28 == v12) {
      goto LABEL_46;
    }
    goto LABEL_40;
  }
LABEL_42:
  outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
  outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
  uint64_t v41 = AnyView.init<A>(_:)();
  _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_0((uint64_t)v66, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
  outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
  return v41;
}

uint64_t protocol witness for Rule.value.getter in conformance _NavigationStackStyleConfiguration.Item.Child@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _NavigationStackStyleConfiguration.Item.Child.value.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance _NavigationStackStyleConfiguration.Item@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of _NavigationStackStyleConfiguration.Item.ID(v1 + 48, a1);
}

void protocol witness for View.body.getter in conformance _NavigationStackStyleConfiguration.Item()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedNavigationStackStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedNavigationStackStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t View._navigationStackStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NavigationStackStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  char v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationStackStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance NavigationStackStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Item.Child and conformance _NavigationStackStyleConfiguration.Item.Child()
{
  unint64_t result = lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item.Child and conformance _NavigationStackStyleConfiguration.Item.Child;
  if (!lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item.Child and conformance _NavigationStackStyleConfiguration.Item.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item.Child and conformance _NavigationStackStyleConfiguration.Item.Child);
  }
  return result;
}

BOOL specialized static _NavigationStackStyleConfiguration.Item.ID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2 || (static NavigationStackViewSource.== infix(_:_:)(a1 + 8, a2 + 8) & 1) == 0) {
    return 0;
  }
  return *(void *)(a1 + 56) == *(void *)(a2 + 56)
      && *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64)
      && *(void *)(a1 + 72) == *(void *)(a2 + 72);
}

_UNKNOWN **base witness table accessor for View in _NavigationStackStyleConfiguration.Item()
{
  return &protocol witness table for _NavigationStackStyleConfiguration.Item;
}

uint64_t dispatch thunk of _NavigationStackStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t initializeWithCopy for _NavigationStackStyleConfiguration.Item(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_weakCopyInit();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  int v5 = *(unsigned __int8 *)(a2 + 96);
  swift_retain();
  swift_retain();
  if (v5 == 1)
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    uint64_t v9 = (_OWORD *)(a2 + 64);
    uint64_t v10 = *(void *)(a2 + 72);
    swift_retain();
    if (v10 == 1)
    {
      *(_OWORD *)(a1 + 64) = *v9;
    }
    else
    {
      *(void *)(a1 + 64) = *(void *)v9;
      *(void *)(a1 + 72) = v10;
      swift_retain();
    }
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(unsigned char *)(a1 + 96) = 1;
  }
  else
  {
    unint64_t v6 = (_OWORD *)(a1 + 56);
    char v7 = (_OWORD *)(a2 + 56);
    if (v5)
    {
      long long v11 = *(_OWORD *)(a2 + 72);
      *unint64_t v6 = *v7;
      *(_OWORD *)(a1 + 72) = v11;
      *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
    }
    else
    {
      long long v8 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 80) = v8;
      (**(void (***)(_OWORD *, _OWORD *))(v8 - 8))(v6, v7);
      *(unsigned char *)(a1 + 96) = 0;
    }
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

uint64_t assignWithCopy for _NavigationStackStyleConfiguration.Item(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_weakCopyAssign();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  if (a1 != a2)
  {
    outlined destroy of NavigationStackViewSource(a1 + 56);
    if (*(unsigned char *)(a2 + 96) == 1)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      uint64_t v6 = *(void *)(a2 + 72);
      swift_retain();
      if (v6 == 1)
      {
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      }
      else
      {
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
        *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        swift_retain();
      }
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(unsigned char *)(a1 + 96) = 1;
    }
    else
    {
      uint64_t v4 = (long long *)(a2 + 56);
      if (*(unsigned char *)(a2 + 96))
      {
        long long v7 = *v4;
        long long v8 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
        *(_OWORD *)(a1 + 56) = v7;
        *(_OWORD *)(a1 + 72) = v8;
      }
      else
      {
        uint64_t v5 = *(void *)(a2 + 80);
        *(void *)(a1 + 80) = v5;
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        (**(void (***)(uint64_t, long long *))(v5 - 8))(a1 + 56, v4);
        *(unsigned char *)(a1 + 96) = 0;
      }
    }
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

uint64_t initializeWithTake for _NavigationStackStyleConfiguration.Item(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_weakTakeInit();
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  long long v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  return a1;
}

uint64_t assignWithTake for _NavigationStackStyleConfiguration.Item(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_weakTakeAssign();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  if (a1 != a2)
  {
    outlined destroy of NavigationStackViewSource(a1 + 56);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for _NavigationStackStyleConfiguration.Item(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _NavigationStackStyleConfiguration.Item(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 128) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

uint64_t destroy for _NavigationStackStyleConfiguration.Item.ID(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 48) == 1)
  {
    swift_release();
    unint64_t result = *(void *)(v1 + 24);
    if (result != 1)
    {
      return swift_release();
    }
  }
  else if (!*(unsigned char *)(result + 48))
  {
    uint64_t v2 = result + 8;
    return __swift_destroy_boxed_opaque_existential_1(v2);
  }
  return result;
}

uint64_t initializeWithCopy for _NavigationStackStyleConfiguration.Item.ID(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v4 = (_OWORD *)(a1 + 8);
  int v5 = *(unsigned __int8 *)(a2 + 48);
  if (v5 == 1)
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    long long v8 = (_OWORD *)(a2 + 16);
    uint64_t v9 = *(void *)(a2 + 24);
    swift_retain();
    if (v9 == 1)
    {
      *(_OWORD *)(a1 + 16) = *v8;
    }
    else
    {
      *(void *)(a1 + 16) = *(void *)v8;
      *(void *)(a1 + 24) = v9;
      swift_retain();
    }
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 48) = 1;
  }
  else
  {
    long long v6 = (_OWORD *)(a2 + 8);
    if (v5)
    {
      long long v10 = *(_OWORD *)(a2 + 24);
      *int v4 = *v6;
      v4[1] = v10;
      *(_OWORD *)((char *)v4 + 25) = *(_OWORD *)(a2 + 33);
    }
    else
    {
      long long v7 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 32) = v7;
      (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v4, v6);
      *(unsigned char *)(a1 + 48) = 0;
    }
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t assignWithCopy for _NavigationStackStyleConfiguration.Item.ID(uint64_t a1, uint64_t a2)
{
  int v4 = (long long *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  int v5 = (_OWORD *)(a1 + 8);
  if (a1 != a2)
  {
    outlined destroy of NavigationStackViewSource(a1 + 8);
    if (*(unsigned char *)(a2 + 48) == 1)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      uint64_t v7 = *(void *)(a2 + 24);
      swift_retain();
      if (v7 == 1)
      {
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      }
      else
      {
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        swift_retain();
      }
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 48) = 1;
    }
    else if (*(unsigned char *)(a2 + 48))
    {
      long long v8 = *v4;
      long long v9 = v4[1];
      *(_OWORD *)((char *)v5 + 25) = *(long long *)((char *)v4 + 25);
      *int v5 = v8;
      v5[1] = v9;
    }
    else
    {
      uint64_t v6 = *(void *)(a2 + 32);
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      (**(void (***)(_OWORD *, long long *))(v6 - 8))(v5, v4);
      *(unsigned char *)(a1 + 48) = 0;
    }
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for _NavigationStackStyleConfiguration.Item.ID(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (a1 != a2)
  {
    outlined destroy of NavigationStackViewSource(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for _NavigationStackStyleConfiguration.Item.ID(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _NavigationStackStyleConfiguration.Item.ID(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _NavigationStackStyleConfiguration.Item.ID()
{
  return &type metadata for _NavigationStackStyleConfiguration.Item.ID;
}

uint64_t sub_187EF6EEC()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for NavigationStackStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for NavigationStackStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187EF72D0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

void *type metadata accessor for _NavigationStackStyleConfiguration.Item.Child()
{
  return &unk_1ED48A538;
}

uint64_t outlined destroy of _NavigationStackStyleConfiguration.Item(uint64_t a1)
{
  return a1;
}

uint64_t specialized static ResolvedNavigationDestinations.prepareToPresent<A, B>(view:at:shouldUpdateDestinations:applying:)(uint64_t a1, uint64_t *a2, void (*a3)(void *__return_ptr, uint64_t *))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  char v10 = a2[5] & 1;
  outlined init with copy of ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>);
  uint64_t v17 = v5;
  uint64_t v18 = v6;
  uint64_t v19 = v7;
  uint64_t v20 = v8;
  uint64_t v21 = v9;
  char v22 = v10;
  char v23 = 1;
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = 1;
  outlined init with copy of ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
  unsigned int v14 = closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply;
  uint64_t v15 = v11;
  outlined destroy of (offset: Int, element: NavigationState.StackContent.PositionedView)((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
  a3(__src, a2);
  outlined init with copy of ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
  memcpy(v24, __src, sizeof(v24));
  outlined destroy of (offset: Int, element: NavigationState.StackContent.PositionedView)((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier> and conformance <> ModifiedContent<A, B>();
  return AnyView.init<A>(_:)();
}

uint64_t partial apply for specialized closure #1 in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(*a1, **(void **)(v2 + 16), *(void *)(v2 + 24));
  *a2 = result & 1;
  return result;
}

uint64_t sub_187EF7848()
{
  return swift_deallocObject();
}

uint64_t outlined retain of ResolvedNavigationDestinations(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ResolvedNavigationDestinations(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<EmptyModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<EmptyModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<EmptyModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ReadDestinationsModifier<ResolvedNavigationDestinations>(255, &lazy cache variable for type metadata for ModifiedContent<EmptyModifier, ReplacedRootDismissModifier>, MEMORY[0x1E4F3F740], (uint64_t)&type metadata for ReplacedRootDismissModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<EmptyModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 432);
  char v4 = *(unsigned char *)(v1 + 440);
  uint64_t v5 = *(void *)(v1 + 448);
  uint64_t result = (*(uint64_t (**)(void))(v1 + 408))();
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  return result;
}

uint64_t sub_187EF7A58()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_187EF7ACC()
{
  swift_weakDestroy();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in _NavigationStackStyleConfiguration.init(authority:context:structureSeed:)()
{
  return closure #2 in _NavigationStackStyleConfiguration.init(authority:context:structureSeed:)(v0 + 16, *(void *)(v0 + 40), *(unsigned char *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_187EF7B28()
{
  return swift_deallocObject();
}

uint64_t sub_187EF7B38()
{
  return swift_deallocObject();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>, ReplacedRootDismissModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>);
    lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

double partial apply for specialized closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 432);
  char v4 = *(unsigned char *)(v1 + 440);
  uint64_t v5 = *(void *)(v1 + 448);
  (*(void (**)(uint64_t *__return_ptr))(v1 + 408))(&v7);
  *(unsigned char *)a1 = v7;
  *(_OWORD *)(a1 + 8) = v8;
  double result = *(double *)&v9;
  *(_OWORD *)(a1 + 24) = v9;
  *(void *)(a1 + 40) = v3;
  *(unsigned char *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v5;
  return result;
}

unint64_t lazy protocol witness table accessor for type StackItemModifier and conformance StackItemModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type StackItemModifier and conformance StackItemModifier;
  if (!lazy protocol witness table cache variable for type StackItemModifier and conformance StackItemModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackItemModifier and conformance StackItemModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<StackItemModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<StackItemModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<StackItemModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ReadDestinationsModifier<ResolvedNavigationDestinations>(255, &lazy cache variable for type metadata for ModifiedContent<StackItemModifier, ReplacedRootDismissModifier>, (uint64_t)&type metadata for StackItemModifier, (uint64_t)&type metadata for ReplacedRootDismissModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type StackItemModifier and conformance StackItemModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<StackItemModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void *partial apply for specialized closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 432);
  char v4 = *(unsigned char *)(v1 + 440);
  uint64_t v5 = *(void *)(v1 + 448);
  (*(void (**)(void *__return_ptr))(v1 + 408))(v7);
  unint64_t result = memcpy((void *)a1, v7, 0x120uLL);
  *(void *)(a1 + 288) = v3;
  *(unsigned char *)(a1 + 296) = v4;
  *(void *)(a1 + 304) = v5;
  return result;
}

void type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>)
  {
    type metadata accessor for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>(255, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>);
    }
  }
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>();
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>);
    }
  }
}

uint64_t sub_187EF7F18()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>)
  {
    type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>();
    type metadata accessor for ReadDestinationsModifier<ResolvedNavigationDestinations>(255, &lazy cache variable for type metadata for ReadDestinationsModifier<ResolvedNavigationDestinations>, (uint64_t)&type metadata for ResolvedNavigationDestinations, (uint64_t)&protocol witness table for ResolvedNavigationDestinations, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ReadDestinationsModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>();
    type metadata accessor for ReadDestinationsModifier<ResolvedNavigationDestinations>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationDestinationKey>, (uint64_t)&type metadata for NavigationDestinationKey, (uint64_t)&protocol witness table for NavigationDestinationKey, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>);
    lazy protocol witness table accessor for type StackItemModifier and conformance StackItemModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>();
    lazy protocol witness table accessor for type _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>> and conformance <> _VariadicView.Tree<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>> and conformance <> _VariadicView.Tree<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>> and conformance <> _VariadicView.Tree<A, B>;
  if (!lazy protocol witness table cache variable for type _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>> and conformance <> _VariadicView.Tree<A, B>)
  {
    type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>();
    lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>> and conformance <> _VariadicView.Tree<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>();
    lazy protocol witness table accessor for type _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root> and conformance <> _VariadicView.Tree<A, B>(&lazy protocol witness table cache variable for type _VariadicView.Tree<_VStackLayout, _VariadicView_Children> and conformance <> _VariadicView.Tree<A, B>, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
    lazy protocol witness table accessor for type RootItemModifier and conformance RootItemModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RootItemModifier and conformance RootItemModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type RootItemModifier and conformance RootItemModifier;
  if (!lazy protocol witness table cache variable for type RootItemModifier and conformance RootItemModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RootItemModifier and conformance RootItemModifier);
  }
  return result;
}

uint64_t View.listDisclosureGroupIndentation(base:step:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(double *)uint64_t v5 = a3;
  *(double *)&v5[1] = a4;
  return MEMORY[0x18C113660](v5, a1, &type metadata for ListDisclosureGroupIndentationModifier, a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IncrementListDisclosureGroupDepth(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance IncrementListDisclosureGroupDepth(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance IncrementListDisclosureGroupDepth()
{
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IncrementListDisclosureGroupDepth()
{
  lazy protocol witness table accessor for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput();
  uint64_t result = PropertyList.subscript.getter();
  if (!__OFADD__(v1, 1)) {
    return PropertyList.subscript.setter();
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for ListDisclosureGroupIndentationTraitKey()
{
  return &type metadata for ListDisclosureGroupIndentationTraitKey;
}

ValueMetadata *type metadata accessor for IncrementListDisclosureGroupDepth()
{
  return &type metadata for IncrementListDisclosureGroupDepth;
}

ValueMetadata *type metadata accessor for ListDisclosureGroupIndentationModifier()
{
  return &type metadata for ListDisclosureGroupIndentationModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ListDisclosureGroupIndentationModifier()
{
  return &protocol witness table for ListDisclosureGroupIndentationModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in IncrementListDisclosureGroupDepth()
{
  return &protocol witness table for IncrementListDisclosureGroupDepth;
}

uint64_t static ListDisclosureGroupIndentationModifier._makeViewList(modifier:inputs:body:)()
{
  return static _TraitWritingModifier._makeViewList(modifier:inputs:body:)();
}

void ListDisclosureGroupIndentationModifier.Child.value.getter(uint64_t a1@<X1>, double *a2@<X8>)
{
  uint64_t v2 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t Value = (double *)AGGraphGetValue();
    *a2 = *Value + Value[1] * (double)(v2 & ~(v2 >> 63));
  }
}

void protocol witness for Rule.value.getter in conformance ListDisclosureGroupIndentationModifier.Child(double *a1@<X8>)
{
  ListDisclosureGroupIndentationModifier.Child.value.getter(*(void *)(v1 + 8), a1);
}

void protocol witness for ViewModifier.body(content:) in conformance ListDisclosureGroupIndentationModifier()
{
}

void type metadata accessor for _GraphValue<ListDisclosureGroupIndentationModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<ListDisclosureGroupIndentationModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ListDisclosureGroupIndentationModifier>);
    }
  }
}

void type metadata accessor for _TraitWritingModifier<ListDisclosureGroupIndentationTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<ListDisclosureGroupIndentationTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<ListDisclosureGroupIndentationTraitKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ListDisclosureGroupIndentationModifier.Child and conformance ListDisclosureGroupIndentationModifier.Child()
{
  unint64_t result = lazy protocol witness table cache variable for type ListDisclosureGroupIndentationModifier.Child and conformance ListDisclosureGroupIndentationModifier.Child;
  if (!lazy protocol witness table cache variable for type ListDisclosureGroupIndentationModifier.Child and conformance ListDisclosureGroupIndentationModifier.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListDisclosureGroupIndentationModifier.Child and conformance ListDisclosureGroupIndentationModifier.Child);
  }
  return result;
}

void *type metadata accessor for ListDisclosureGroupIndentationModifier.Child()
{
  return &unk_1ED463E40;
}

ValueMetadata *type metadata accessor for ListDisclosureGroupDepthInput()
{
  return &type metadata for ListDisclosureGroupDepthInput;
}

uint64_t thunk for @escaping @callee_unowned @convention(block) () -> (@unowned Bool)(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void PlatformItem.applyAccessibilityProperties(on:item:)(void *a1)
{
  uint64_t v2 = *(void *)(v1 + 320);
  if (!v2) {
    return;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v4 = AGGraphClearUpdate();
  MEMORY[0x1F4188790](v4);
  static Update.ensure<A>(_:)();
  AGGraphSetUpdate();
  swift_bridgeObjectRelease();
  *(_OWORD *)char v55 = v57;
  char v5 = EnvironmentValues.accessibilityEnabled.getter();
  swift_release();
  swift_release();
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  id v6 = PlatformItem.accessibilityEffectiveText.getter();
  if (v6)
  {
    uint64_t v7 = v6;
    objc_msgSend(a1, sel_setAccessibilityAttributedLabel_, v6);
  }
  else
  {
    objc_msgSend(a1, sel_setAccessibilityAttributedLabel_, 0);
  }
  uint64_t v8 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v8, (uint64_t)&v57);
  swift_bridgeObjectRelease();
  if (!*((void *)&v57 + 1)) {
    goto LABEL_11;
  }
  if (v58 >= 2u)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t v10 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v10 != -1) {
      swift_once();
    }
    *(_WORD *)char v55 = static TabOptions.TraitKey.defaultValue;
    _OWORD v55[2] = byte_1E90FC582;
    *(_OWORD *)&v55[8] = *(_OWORD *)&qword_1E90FC588;
    *(_WORD *)&v55[24] = word_1E90FC598;
    v55[26] = byte_1E90FC59A;
    *(void *)&long long v56 = qword_1E90FC5A0;
    WORD4(v56) = word_1E90FC5A8;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    uint64_t v11 = *((void *)&v57 + 1);
    uint64_t v12 = v58;
    int v13 = BYTE8(v58);
    outlined copy of TabCustomizationID?(*((uint64_t *)&v57 + 1), v58, BYTE8(v58));
    outlined consume of TabCustomizationID?(v11, v12, v13);
    swift_bridgeObjectRelease();
    if (v13 == 255)
    {
      objc_msgSend(a1, sel_setAccessibilityIdentifier_, 0);
    }
    else
    {
      unsigned int v14 = (void *)MEMORY[0x18C115780](v11, v12);
      outlined consume of TabCustomizationID?(v11, v12, v13);
      objc_msgSend(a1, sel_setAccessibilityIdentifier_, v14);
    }
    goto LABEL_16;
  }
  long long v9 = (void *)MEMORY[0x18C115780](v57, *((void *)&v57 + 1));
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setAccessibilityIdentifier_, v9);

LABEL_16:
  uint64_t v15 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v15, v55);
  swift_bridgeObjectRelease();
  unsigned __int8 v53 = a1;
  if (*((void *)&v56 + 1))
  {
    long long v58 = *(_OWORD *)&v55[16];
    long long v59 = v56;
    long long v57 = *(_OWORD *)v55;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = AGGraphClearUpdate();
    MEMORY[0x1F4188790](v16);
    static Update.ensure<A>(_:)();
    AGGraphSetUpdate();
    swift_bridgeObjectRelease();
    uint64_t v17 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if (v19)
    {
      uint64_t v20 = (void *)MEMORY[0x18C115780](v17, v19);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v20 = 0;
    }
    objc_msgSend(a1, sel_setAccessibilityValue_, v20);

    outlined destroy of AccessibilityValueStorage((uint64_t)&v57);
  }
  else
  {
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_1((uint64_t)v55, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80]);
    objc_msgSend(a1, sel_setAccessibilityValue_, 0);
  }
  uint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v22 = specialized AccessibilityProperties.subscript.getter(v21);
  swift_bridgeObjectRelease();
  if (v22)
  {
    uint64_t v23 = *(void *)(v22 + 16);
    if (v23)
    {
      uint64_t v54 = v2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v24 = v22 + 56;
      char v25 = (char *)MEMORY[0x1E4FBC860];
      do
      {
        char v26 = *(unsigned char *)(v24 - 8);
        uint64_t v28 = *(void *)(v24 - 24);
        uint64_t v27 = *(void *)(v24 - 16);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v28, v27, v26);
        swift_bridgeObjectRetain();
        uint64_t v29 = AGGraphClearUpdate();
        MEMORY[0x1F4188790](v29);
        static Update.ensure<A>(_:)();
        AGGraphSetUpdate();
        swift_bridgeObjectRelease();
        *(_OWORD *)char v55 = v57;
        uint64_t v30 = static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)();
        uint64_t v32 = v31;
        swift_release();
        swift_release();
        outlined consume of Text.Storage(v28, v27, v26);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v25 + 2) + 1, 1, v25);
        }
        unint64_t v34 = *((void *)v25 + 2);
        unint64_t v33 = *((void *)v25 + 3);
        if (v34 >= v33 >> 1) {
          char v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v25);
        }
        *((void *)v25 + 2) = v34 + 1;
        uint64_t v35 = &v25[16 * v34];
        *((void *)v35 + 4) = v30;
        *((void *)v35 + 5) = v32;
        v24 += 32;
        --v23;
      }
      while (v23);
      uint64_t v2 = v54;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v53;
    }
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel_setAccessibilityUserInputLabels_, isa);
  }
  else
  {
    objc_msgSend(a1, sel_setAccessibilityUserInputLabels_, 0);
  }
  *(void *)char v55 = v2;
  AccessibilityProperties.traits.getter();
  unint64_t v37 = v57;
  uint64_t v38 = static AccessibilityTrait.allCases.getter();
  uint64_t v39 = 0;
  uint64_t v40 = *(void *)(v38 + 16);
  if (v40)
  {
    uint64_t v41 = (unsigned __int8 *)(v38 + 32);
    do
    {
      unsigned int v43 = *v41++;
      char v42 = v43;
      int v44 = (1 << v43) & 0x2844;
      if (v43 <= 0xD && v44 != 0 && ((v37 >> v42) & 1) != 0)
      {
        v55[0] = v42;
        uint64_t v46 = AccessibilityTrait.uiTrait.getter();
        if ((v47 & 1) == 0) {
          v39 |= v46;
        }
      }
      --v40;
    }
    while (v40);
  }
  swift_bridgeObjectRelease();
  objc_msgSend(v53, sel_setAccessibilityTraits_, v39);
  *(void *)&long long v57 = v2;
  AccessibilityProperties.hints.getter();
  swift_bridgeObjectRelease();
  uint64_t v48 = AGGraphClearUpdate();
  MEMORY[0x1F4188790](v48);
  static Update.ensure<A>(_:)();
  AGGraphSetUpdate();
  swift_bridgeObjectRelease();
  *(_OWORD *)char v55 = v57;
  uint64_t v49 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
  uint64_t v51 = v50;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v51)
  {
    uint64_t v52 = (void *)MEMORY[0x18C115780](v49, v51);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v52 = 0;
  }
  objc_msgSend(v53, sel_setAccessibilityHint_, v52);
}

void AccessibilityNode.rotorChildNodes.getter()
{
  unint64_t v1 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v112 = (char *)v100 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v111 = (char *)v100 - v5;
  type metadata accessor for _ContiguousArrayStorage<(String, Any)>(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v100 - v10;
  uint64_t v12 = (unint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
  swift_beginAccess();
  unint64_t v13 = *v12;
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain_n();
    unint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v14) {
      return;
    }
  }
  else
  {
    unint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v14) {
      return;
    }
  }
  swift_bridgeObjectRelease();
  AccessibilityNode.platformElement.getter();
  if (v15)
  {
    uint64_t v16 = v15;
    self;
    uint64_t v17 = (void *)swift_dynamicCastObjCClass();
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v112 = v16;
      uint64_t v113 = MEMORY[0x1E4FBC860];
      id v19 = objc_msgSend(v17, sel_visibleCells);
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITableViewCell);
      unint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v1 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v20) {
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v20 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v20) {
          goto LABEL_44;
        }
      }
      if (v20 < 1)
      {
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      uint64_t v21 = 0;
      unint64_t v14 = v1 & 0xC000000000000001;
      do
      {
        if (v14) {
          id v22 = (id)MEMORY[0x18C117680](v21, v1);
        }
        else {
          id v22 = *(id *)(v1 + 8 * v21 + 32);
        }
        uint64_t v23 = v22;
        swift_getObjectType();
        uint64_t v24 = swift_conformsToProtocol2();
        if (v24) {
          uint64_t v2 = v24;
        }
        else {
          uint64_t v2 = 0;
        }
        if (v24) {
          char v25 = v23;
        }
        else {
          char v25 = 0;
        }
        if (v25)
        {
          uint64_t ObjectType = swift_getObjectType();
          PlatformListViewBase.accessibilityNodes.getter(ObjectType, *(void *)(v2 + 8));
          specialized Array.append<A>(contentsOf:)(v27);
        }
        ++v21;
      }
      while (v20 != v21);
LABEL_44:
      swift_bridgeObjectRelease();
      unint64_t v42 = (unint64_t)objc_msgSend(v18, sel_numberOfSections);
      if ((v42 & 0x8000000000000000) == 0)
      {
        unint64_t v43 = v42;
        if (v42)
        {
          uint64_t v44 = 0;
          do
          {
            id v45 = objc_msgSend(v18, sel_headerViewForSection_, v44);
            if (v45)
            {
              uint64_t v46 = v45;
              swift_getObjectType();
              uint64_t v47 = swift_conformsToProtocol2();
              if (v47) {
                uint64_t v48 = v47;
              }
              else {
                uint64_t v48 = 0;
              }
              if (v47) {
                uint64_t v49 = v46;
              }
              else {
                uint64_t v49 = 0;
              }
              if (v49)
              {
                uint64_t v50 = swift_getObjectType();
                uint64_t v51 = *(void *)(v48 + 8);
                id v52 = v46;
                PlatformListViewBase.accessibilityNodes.getter(v50, v51);
                specialized Array.append<A>(contentsOf:)(v53);
              }
            }
            id v54 = objc_msgSend(v18, sel_footerViewForSection_, v44);
            if (v54)
            {
              char v55 = v54;
              swift_getObjectType();
              uint64_t v56 = swift_conformsToProtocol2();
              if (v56) {
                uint64_t v57 = v56;
              }
              else {
                uint64_t v57 = 0;
              }
              if (v56) {
                long long v58 = v55;
              }
              else {
                long long v58 = 0;
              }
              if (v58)
              {
                uint64_t v59 = swift_getObjectType();
                uint64_t v60 = *(void *)(v57 + 8);
                id v61 = v55;
                PlatformListViewBase.accessibilityNodes.getter(v59, v60);
                specialized Array.append<A>(contentsOf:)(v62);
              }
            }
            ++v44;
          }
          while (v43 != v44);
        }

        return;
      }
      __break(1u);
      goto LABEL_70;
    }
  }
  AccessibilityNode.platformElement.getter();
  uint64_t v29 = MEMORY[0x1E4FBC860];
  if (!v28) {
    return;
  }
  uint64_t v30 = v28;
  self;
  uint64_t v31 = (void *)swift_dynamicCastObjCClass();
  if (!v31)
  {

    return;
  }
  id v101 = v30;
  uint64_t v113 = v29;
  id v110 = v31;
  id v32 = objc_msgSend(v31, sel_visibleCells);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICollectionViewCell);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v109 = v8;
  if (v14 >> 62)
  {
LABEL_71:
    swift_bridgeObjectRetain();
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v33) {
      goto LABEL_72;
    }
LABEL_28:
    if (v33 < 1)
    {
      __break(1u);
      return;
    }
    for (uint64_t i = 0; i != v33; ++i)
    {
      if ((v14 & 0xC000000000000001) != 0) {
        id v35 = (id)MEMORY[0x18C117680](i, v14);
      }
      else {
        id v35 = *(id *)(v14 + 8 * i + 32);
      }
      uint64_t v36 = v35;
      swift_getObjectType();
      uint64_t v37 = swift_conformsToProtocol2();
      if (v37) {
        uint64_t v38 = v37;
      }
      else {
        uint64_t v38 = 0;
      }
      if (v37) {
        uint64_t v39 = v36;
      }
      else {
        uint64_t v39 = 0;
      }
      if (v39)
      {
        uint64_t v40 = swift_getObjectType();
        PlatformListViewBase.accessibilityNodes.getter(v40, *(void *)(v38 + 8));
        specialized Array.append<A>(contentsOf:)(v41);
      }
    }
    goto LABEL_72;
  }
  uint64_t v33 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v33) {
    goto LABEL_28;
  }
LABEL_72:
  swift_bridgeObjectRelease();
  uint64_t v63 = &selRef_setObscuresBackgroundDuringPresentation_;
  id v64 = v110;
  id v108 = (id)*MEMORY[0x1E4FB2770];
  id v65 = objc_msgSend(v110, sel_indexPathsForVisibleSupplementaryElementsOfKind_);
  uint64_t v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v67 = *(void *)(v66 + 16);
  uint64_t v102 = v2;
  if (v67)
  {
    uint64_t v68 = v2 + 16;
    char v69 = *(void (**)(char *, unint64_t, unint64_t))(v2 + 16);
    unint64_t v70 = v66 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v105 = *(void *)(v2 + 72);
    uint64_t v106 = v69;
    uint64_t v71 = v2 + 56;
    uint64_t v72 = (unsigned int (**)(char *, uint64_t, unint64_t))(v2 + 48);
    uint64_t v107 = (void (*)(char *, char *, unint64_t))v68;
    uint64_t v103 = (void (**)(char *, unint64_t))(v68 - 8);
    uint64_t v104 = (void (**)(char *, char *, unint64_t))(v68 + 16);
    v100[0] = v71 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v100[1] = v66;
    v69(v11, v70, v1);
    while (1)
    {
      uint64_t v73 = *(void (**)(char *, uint64_t, uint64_t, unint64_t))v71;
      (*(void (**)(char *, void, uint64_t, unint64_t))v71)(v11, 0, 1, v1);
      if ((*v72)(v11, 1, v1) == 1)
      {
        id v64 = v110;
        uint64_t v63 = &selRef_setObscuresBackgroundDuringPresentation_;
        goto LABEL_90;
      }
      (*v104)(v111, v11, v1);
      id v74 = v108;
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      id v76 = objc_msgSend(v110, sel_supplementaryViewForElementKind_atIndexPath_, v74, isa);

      if (v76)
      {
        swift_getObjectType();
        uint64_t v77 = swift_conformsToProtocol2();
        if (v77) {
          uint64_t v78 = v77;
        }
        else {
          uint64_t v78 = 0;
        }
        if (v77) {
          id v79 = v76;
        }
        else {
          id v79 = 0;
        }
        if (v79)
        {
          uint64_t v80 = swift_getObjectType();
          PlatformListViewBase.accessibilityNodes.getter(v80, *(void *)(v78 + 8));
          specialized Array.append<A>(contentsOf:)(v81);
        }
      }
      (*v103)(v111, v1);
      v70 += v105;
      if (!--v67) {
        break;
      }
      v106(v11, v70, v1);
    }
    id v64 = v110;
    uint64_t v63 = &selRef_setObscuresBackgroundDuringPresentation_;
    v73(v11, 1, 1, v1);
  }
  else
  {
    uint64_t v73 = *(void (**)(char *, uint64_t, uint64_t, unint64_t))(v2 + 56);
    v73(v11, 1, 1, v1);
  }
LABEL_90:
  swift_bridgeObjectRelease();
  uint64_t v82 = v63[292];
  uint64_t v111 = (char *)*MEMORY[0x1E4FB2760];
  id v83 = [v64 v82];
  uint64_t v84 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v104 = (void (**)(char *, char *, unint64_t))v84;
  uint64_t v85 = *(void *)(v84 + 16);
  if (v85)
  {
    uint64_t v86 = *(void (**)(char *, char *, unint64_t))(v102 + 16);
    uint64_t v87 = (char *)v104 + ((*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80));
    uint64_t v105 = *(void *)(v102 + 72);
    uint64_t v106 = (void (*)(char *, unint64_t, unint64_t))(v102 + 56);
    uint64_t v107 = v86;
    unint64_t v88 = (unsigned int (**)(char *, uint64_t, unint64_t))(v102 + 48);
    uint64_t v89 = (void (**)(char *, char *, unint64_t))(v102 + 32);
    id v108 = (id)(v102 + 16);
    uint64_t v90 = (void (**)(char *, unint64_t))(v102 + 8);
    while (1)
    {
      uint64_t v91 = v109;
      v107(v109, v87, v1);
      v73(v91, 0, 1, v1);
      if ((*v88)(v91, 1, v1) == 1) {
        break;
      }
      (*v89)(v112, v91, v1);
      uint64_t v92 = v111;
      Class v93 = IndexPath._bridgeToObjectiveC()().super.isa;
      id v94 = objc_msgSend(v110, sel_supplementaryViewForElementKind_atIndexPath_, v92, v93);

      if (v94)
      {
        swift_getObjectType();
        uint64_t v95 = swift_conformsToProtocol2();
        if (v95) {
          uint64_t v96 = v95;
        }
        else {
          uint64_t v96 = 0;
        }
        if (v95) {
          id v97 = v94;
        }
        else {
          id v97 = 0;
        }
        if (v97)
        {
          uint64_t v98 = swift_getObjectType();
          PlatformListViewBase.accessibilityNodes.getter(v98, *(void *)(v96 + 8));
          specialized Array.append<A>(contentsOf:)(v99);
        }
      }
      (*v90)(v112, v1);
      v87 += v105;
      if (!--v85) {
        goto LABEL_104;
      }
    }
  }
  else
  {
LABEL_104:
    v73(v109, 1, 1, v1);
  }

  swift_bridgeObjectRelease();
}

id UIAccessibilityLocationDescriptor.init(_:in:for:kind:resolveLabel:)(uint64_t a1, uint64_t *a2, char *a3, char a4, char a5)
{
  char v5 = *(unsigned char *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v37 = *(void *)(a1 + 8);
  uint64_t v38 = *(void *)a1;
  v41.i64[0] = *(void *)a1;
  v41.i64[1] = v37;
  char v36 = v5;
  char v42 = v5;
  uint64_t v43 = v7;
  uint64_t v44 = v6;
  char v45 = v8;
  uint64_t v46 = v9;
  *(void *)&long long v40 = v11;
  *((void *)&v40 + 1) = v10;
  uint64_t v12 = AccessibilityActivationPoint.resolvedDescription(for:in:kind:resolveLabel:)((uint64_t)a3, &v40, a4 & 1, a5);
  uint64_t v14 = v13;
  v41.i64[0] = v11;
  v41.i64[1] = v10;
  long long v40 = 0uLL;
  char v35 = v15;
  char v16 = v15 & 1;
  LOBYTE(v34) = 0;
  uint64_t v17 = (void *)static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)();
  swift_release();
  swift_release();
  if (!v17)
  {

    outlined consume of Text.Storage(v7, v6, v8);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v12, v14, v16);
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v18 = v12;
  outlined consume of Text.Storage(v7, v6, v8);
  swift_bridgeObjectRelease();
  v41.i64[0] = v38;
  v41.i64[1] = v37;
  char v42 = v36;
  *(double *)&uint64_t v19 = COERCE_DOUBLE(AccessibilityNode.resolvedDragDropPoint(for:)(&v41));
  if (v21 == -1)
  {

    outlined consume of Text.Storage(v12, v14, v35 & 1);
LABEL_13:

    goto LABEL_14;
  }
  double v22 = *(double *)&v19;
  double v23 = v20;
  if (!MEMORY[0x18C119DF0](&a3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost]))
  {
    outlined consume of Text.Storage(v12, v14, v35 & 1);
LABEL_12:

    goto LABEL_13;
  }
  self;
  uint64_t v24 = (void *)swift_dynamicCastObjCClass();
  if (!v24)
  {
    outlined consume of Text.Storage(v12, v14, v35 & 1);
    swift_unknownObjectRelease();
    goto LABEL_12;
  }
  char v25 = v24;
  double v26 = v22;
  double v27 = v23;
  id v28 = objc_msgSend(v24, sel_window, v34, &v40);
  if (v28)
  {
    uint64_t v29 = v28;
    objc_msgSend(v28, sel_convertPoint_fromWindow_, 0, v22, v27);
    objc_msgSend(v25, sel_convertPoint_fromCoordinateSpace_, v29);
    double v26 = v30;
    double v27 = v31;
  }
  id v32 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithAttributedName_point_inView_, v17, v25, v26, v27);
  swift_unknownObjectRelease();

  outlined consume of Text.Storage(v18, v14, v35 & 1);
  swift_bridgeObjectRelease();
  return v32;
}

id AccessibilityRotorInfo.resolve(in:for:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  long long v6 = v2[1];
  long long v42 = *v2;
  long long v43 = v6;
  v44[0] = v2[2];
  *(_OWORD *)((char *)v44 + 9) = *(long long *)((char *)v2 + 41);
  long long v7 = v42;
  uint64_t v8 = v6;
  long long aBlock = v42;
  long long v37 = v6;
  uint64_t v40 = v5;
  uint64_t v41 = v4;
  uint64_t v34 = AccessibilityRotorInfo.Designation.uniqueID(in:)();
  uint64_t v10 = v9;
  uint64_t v11 = (uint64_t *)(a2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformRotorStorage);
  swift_beginAccess();
  uint64_t v12 = *v11;
  if (*(void *)(*v11 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v10);
    if (v14)
    {
      id v15 = *(id *)(*(void *)(v12 + 56) + 8 * v13);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      return v15;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v8 < 0)
  {
    uint64_t v24 = AccessibilitySystemRotor.systemRotorType.getter();
    uint64_t v25 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v25;
    long long v27 = v43;
    *(_OWORD *)(v26 + 24) = v42;
    *(_OWORD *)(v26 + 40) = v27;
    *(_OWORD *)(v26 + 56) = v44[0];
    *(_OWORD *)(v26 + 65) = *(_OWORD *)((char *)v44 + 9);
    id v28 = objc_allocWithZone(MEMORY[0x1E4FB13C0]);
    uint64_t v38 = partial apply for closure #2 in AccessibilityRotorInfo.resolve(in:for:);
    uint64_t v39 = v26;
    *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v37 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
    *((void *)&v37 + 1) = &block_descriptor_75_1;
    uint64_t v29 = _Block_copy(&aBlock);
    outlined retain of AccessibilityRotorInfo((uint64_t *)&v42);
    swift_retain();
    id v23 = objc_msgSend(v28, sel_initWithSystemType_itemSearchBlock_, v24, v29);
    _Block_release(v29);
    swift_release();
    swift_release();
  }
  else
  {
    *(void *)&long long aBlock = v5;
    *((void *)&aBlock + 1) = v4;
    v35[0] = 0;
    v35[1] = 0;
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v42, *((uint64_t *)&v42 + 1), v8 & 1);
    LOBYTE(v32) = 0;
    id v16 = (id)static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)();
    if (!v16) {
      id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28B18]), sel_init, v32, v35);
    }
    uint64_t v17 = v16;
    char v33 = v8 & 1;
    uint64_t v18 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v18;
    long long v20 = v43;
    *(_OWORD *)(v19 + 24) = v42;
    *(_OWORD *)(v19 + 40) = v20;
    *(_OWORD *)(v19 + 56) = v44[0];
    *(_OWORD *)(v19 + 65) = *(_OWORD *)((char *)v44 + 9);
    id v21 = objc_allocWithZone(MEMORY[0x1E4FB13C0]);
    uint64_t v38 = partial apply for closure #2 in AccessibilityRotorInfo.resolve(in:for:);
    uint64_t v39 = v19;
    *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v37 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
    *((void *)&v37 + 1) = &block_descriptor_82;
    double v22 = _Block_copy(&aBlock);
    outlined retain of AccessibilityRotorInfo((uint64_t *)&v42);
    swift_retain();
    id v23 = objc_msgSend(v21, sel_initWithAttributedName_itemSearchBlock_, v17, v22);

    _Block_release(v22);
    swift_release();
    outlined consume of Text.Storage(v7, *((uint64_t *)&v7 + 1), v33);
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  id v15 = v23;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v35[0] = *v11;
  *uint64_t v11 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v15, v34, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v11 = v35[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v15;
}

uint64_t specialized AccessibilityLinkRotorBridge.search(parameters:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = v3 + OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_elements;
  uint64_t result = swift_beginAccess();
  unint64_t v8 = *(void *)(*(void *)v6 + 16);
  if (!v8) {
    return 0;
  }
  if (!a1) {
    return swift_unknownObjectRetain();
  }
  uint64_t v9 = 0;
  for (uint64_t i = (void *)(*(void *)v6 + 32); *i != a1; i += 2)
  {
    if (v8 == ++v9) {
      return swift_unknownObjectRetain();
    }
  }
  if ((a3 & 1) == 0)
  {
    unint64_t v11 = v9 - 1;
    goto LABEL_10;
  }
  unint64_t v11 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
LABEL_10:
    if (v11 >= v8) {
      return 0;
    }
    return swift_unknownObjectRetain();
  }
  __break(1u);
  return result;
}

void specialized AccessibilityLinkRotorBridge.update()()
{
  unint64_t v1 = v0;
  uint64_t v2 = MEMORY[0x18C119DF0](&v0[OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_node]);
  if (!v2) {
    goto LABEL_8;
  }
  uint64_t v3 = (void *)v2;
  uint64_t v4 = AccessibilityNode.resolvedAttributedLabel.getter();
  if (!v4)
  {

LABEL_8:
    uint64_t v6 = &v0[OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_elements];
    swift_beginAccess();
    *(void *)uint64_t v6 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRelease();
    return;
  }
  id v19 = (id)v4;
  uint64_t v5 = NSObject.hashValue.getter();
  if (v5 == *(void *)&v0[OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_paragraphHash])
  {
  }
  else
  {
    *(void *)&v0[OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_paragraphHash] = v5;
    long long v7 = &v0[OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_elements];
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *(void *)v7;
    if (isUniquelyReferenced_nonNull_native)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v9 + 16));
    }
    else
    {
      *(void *)long long v7 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v9 + 24) >> 1);
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    uint64_t v10 = (void *)static NSAttributedStringKey.coreAXLink.getter();
    uint64_t v11 = NSAttributedString.range.getter();
    uint64_t v13 = v12;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v1;
    *(void *)(v14 + 24) = v3;
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = partial apply for specialized closure #1 in AccessibilityLinkRotorBridge.update();
    *(void *)(v15 + 24) = v14;
    aBlock[4] = partial apply for thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    aBlock[5] = v15;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    aBlock[3] = &block_descriptor_57;
    id v16 = _Block_copy(aBlock);
    id v17 = v1;
    id v18 = v3;
    swift_retain();
    swift_release();
    objc_msgSend(v19, sel_enumerateAttribute_inRange_options_usingBlock_, v10, v11, v13, 0, v16);

    _Block_release(v16);
    LOBYTE(v18) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v18) {
      __break(1u);
    }
  }
}

uint64_t specialized closure #1 in AccessibilityLinkRotorBridge.update()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = MEMORY[0x1E4FBC840] + 8;
  _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_0(a1, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
  if (!v24) {
    return _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_1((uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for Any?, v10);
  }
  uint64_t result = swift_dynamicCast();
  if (result & 1) != 0 && (v22)
  {
    uint64_t v12 = (objc_class *)type metadata accessor for UIKitAccessibilityLinkRotorBridge.LinkElement();
    uint64_t v13 = (char *)objc_allocWithZone(v12);
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    uint64_t v14 = &v13[OBJC_IVAR____TtCC7SwiftUI33UIKitAccessibilityLinkRotorBridgeP33_1C25C4B203EEAC6A19839AC5BDB6A34511LinkElement_range];
    *(void *)uint64_t v14 = a2;
    *((void *)v14 + 1) = a3;
    v21.receiver = v13;
    v21.super_class = v12;
    id v15 = objc_msgSendSuper2(&v21, sel_initWithAccessibilityContainer_, a6);
    id v16 = (uint64_t *)(a5 + OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_elements);
    swift_beginAccess();
    id v17 = (void *)*v16;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *id v16 = (uint64_t)v17;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
      id v17 = (void *)result;
      *id v16 = result;
    }
    unint64_t v19 = v17[2];
    unint64_t v18 = v17[3];
    if (v19 >= v18 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v17);
      id v17 = (void *)result;
      *id v16 = result;
    }
    void v17[2] = v19 + 1;
    long long v20 = &v17[2 * v19];
    void v20[4] = v15;
    v20[5] = &protocol witness table for UIKitAccessibilityLinkRotorBridge.LinkElement;
  }
  return result;
}

uint64_t AccessibilityCore.Notification.ScreenChanged.info.getter@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = MEMORY[0x1E4FBC840];
  if (a1 && (a2 & 1) != 0)
  {
    type metadata accessor for _ContiguousArrayStorage<(String, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, Any), MEMORY[0x1E4FBBE00]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB70;
    id v7 = a1;
    id v8 = AXSwiftUIPerformElementUpdateImmediatelyToken();
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    *(void *)(inited + 32) = v9;
    *(void *)(inited + 40) = v11;
    *(void *)(inited + 72) = MEMORY[0x1E4FBB390];
    *(unsigned char *)(inited + 48) = 1;
    id v12 = AXSwiftUIMoveToElementNotificationKeyElement();
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    *(void *)(inited + 80) = v13;
    *(void *)(inited + 88) = v15;
    *(void *)(inited + 120) = swift_getObjectType();
    *(void *)(inited + 96) = v7;
    id v16 = v7;
    unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for [String : Any]();
    uint64_t ObjectType = v18;

    v21[0] = v17;
    _sypSgWObTm_2((uint64_t)v21, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for Any?, v5 + 8);
  }
  else
  {
    if (a1)
    {
      uint64_t ObjectType = swift_getObjectType();
    }
    else
    {
      v21[1] = 0;
      v21[2] = 0;
      uint64_t ObjectType = 0;
    }
    v21[0] = a1;
    _sypSgWObTm_2((uint64_t)v21, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for Any?, v5 + 8);
    id v19 = a1;
  }
  return _sypSgWObTm_2((uint64_t)v23, a3, (unint64_t *)&lazy cache variable for type metadata for Any?, v5 + 8);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityUIKitTraits(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL protocol witness for AccessibilityCombinable.merge(with:) in conformance AccessibilityUIKitTraits(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = (v4 | a1[1]) & ~*v1;
  BOOL result = v4 != v5;
  if (v4 != v5)
  {
    v1[1] = v5;
    uint64_t v4 = v5;
  }
  uint64_t v7 = (v3 | v2) & ~v4;
  if (v3 != v7)
  {
    *unint64_t v1 = v7;
    return 1;
  }
  return result;
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.UIKitTraitsKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return &type metadata for AccessibilityUIKitTraits;
}

uint64_t protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.UIKitBridgedInteractionKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return type metadata accessor for NSObject & PlatformAccessibilityElementProtocol(0, (unint64_t *)&lazy cache variable for type metadata for NSObject & UIInteraction);
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.UIKitBridgedInteractionKey(void *a1)
{
  return *a1 == 0;
}

uint64_t protocol witness for static AccessibilityPlatformPropertyApplicator.apply(_:to:) in conformance UIKitAccessibilityPropertyApplicator(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  int v2 = *(unsigned __int8 *)(a1 + 48);
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  if (v2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v1;
  }
  return specialized AccessibilityProperties.subscript.setter(v3, v4, v2);
}

uint64_t View.accessibilityAddTraits(uiTraits:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = 0;
  v6[1] = a1;
  char v7 = 0;
  lazy protocol witness table accessor for type AccessibilityProperties.UIKitTraitsKey and conformance AccessibilityProperties.UIKitTraitsKey();
  return View.accessibility<A>(_:_:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey, (uint64_t)v6, 1, a2, (uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey, a3);
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.UIKitTraitsKey and conformance AccessibilityProperties.UIKitTraitsKey()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProperties.UIKitTraitsKey and conformance AccessibilityProperties.UIKitTraitsKey;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.UIKitTraitsKey and conformance AccessibilityProperties.UIKitTraitsKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.UIKitTraitsKey and conformance AccessibilityProperties.UIKitTraitsKey);
  }
  return result;
}

uint64_t View.accessibilityRemoveTraits(uiTraits:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a1;
  v6[1] = 0;
  char v7 = 0;
  lazy protocol witness table accessor for type AccessibilityProperties.UIKitTraitsKey and conformance AccessibilityProperties.UIKitTraitsKey();
  return View.accessibility<A>(_:_:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey, (uint64_t)v6, 1, a2, (uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey, a3);
}

uint64_t ModifiedContent<>.accessibilityTraits(uiTraits:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = 0;
  v8[1] = a1;
  char v9 = 0;
  unint64_t v5 = lazy protocol witness table accessor for type AccessibilityProperties.UIKitTraitsKey and conformance AccessibilityProperties.UIKitTraitsKey();
  unint64_t v6 = lazy protocol witness table accessor for type AccessibilityUIKitTraits? and conformance <A> A?();
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey, (uint64_t)v8, 1, a2, (uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey, v5, v6, a3);
}

unint64_t lazy protocol witness table accessor for type AccessibilityUIKitTraits? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityUIKitTraits? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AccessibilityUIKitTraits? and conformance <A> A?)
  {
    type metadata accessor for AccessibilityUIKitTraits?(255, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type AccessibilityUIKitTraits and conformance AccessibilityUIKitTraits();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityUIKitTraits? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityUIKitTraits and conformance AccessibilityUIKitTraits()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityUIKitTraits and conformance AccessibilityUIKitTraits;
  if (!lazy protocol witness table cache variable for type AccessibilityUIKitTraits and conformance AccessibilityUIKitTraits)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityUIKitTraits and conformance AccessibilityUIKitTraits);
  }
  return result;
}

uint64_t ModifiedContent<>.accessibilityRemoveTraits(uiTraits:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = a1;
  v8[1] = 0;
  char v9 = 0;
  unint64_t v5 = lazy protocol witness table accessor for type AccessibilityProperties.UIKitTraitsKey and conformance AccessibilityProperties.UIKitTraitsKey();
  unint64_t v6 = lazy protocol witness table accessor for type AccessibilityUIKitTraits? and conformance <A> A?();
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey, (uint64_t)v8, 1, a2, (uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey, v5, v6, a3);
}

void *AccessibilityRole.update(traits:)(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result[1];
    if ((v2 & 1) == 0) {
      result[1] = v2 | 1;
    }
    if ((*result & 1) == 0) {
      *result |= 1uLL;
    }
  }
  if ((~a2 & 0x10000) == 0)
  {
    uint64_t v3 = result[1];
    if ((v3 & 2) == 0) {
      result[1] = v3 | 2;
    }
    if ((*result & 2) == 0) {
      *result |= 2uLL;
    }
  }
  return result;
}

uint64_t AccessibilityDisclosureValue.localizedDescription.getter()
{
  return 0;
}

uint64_t AccessibilityToggleValue.localizedDescription.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

id UILargeContentViewerInteractionBridge.enabledStatusDidChange()()
{
  id result = objc_msgSend(self, sel_isEnabled);
  int v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_showLargeContentViewer);
  *(unsigned char *)(v0 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_showLargeContentViewer) = (_BYTE)result;
  if (result != v2)
  {
    uint64_t v3 = v0 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host;
    id result = (id)MEMORY[0x18C119DF0](v0 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host);
    if (result)
    {
      uint64_t v4 = result;
      uint64_t v5 = *(void *)(v3 + 8);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
      MEMORY[0x1F4188790](v7);
      static Update.ensure<A>(_:)();

      return (id)swift_release();
    }
  }
  return result;
}

Swift::Bool __swiftcall UILargeContentViewerInteractionBridge.gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:)(UIGestureRecognizer *_, UIGestureRecognizer *shouldRecognizeSimultaneouslyWith)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_gesture;
  uint64_t v7 = MEMORY[0x18C119DF0](v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_gesture);
  if (v7)
  {
    id v8 = (void *)v7;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
    char v9 = _;
    id v10 = v8;
    LOBYTE(v8) = static NSObject.== infix(_:_:)();

    if (v8)
    {
      type metadata accessor for UIKitGestureRecognizer();
      uint64_t v11 = swift_dynamicCastClass();
      if (v11)
      {
        id v12 = *(void **)(v3 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_simultaneousGesture);
        *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_simultaneousGesture) = v11;
        uint64_t v13 = shouldRecognizeSimultaneouslyWith;

        return 1;
      }
    }
  }
  uint64_t v15 = MEMORY[0x18C119DF0](v6);
  if (!v15) {
    return 0;
  }
  id v16 = (void *)v15;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
  unint64_t v17 = _;
  id v18 = v16;
  LOBYTE(v16) = static NSObject.== infix(_:_:)();

  if ((v16 & 1) == 0) {
    return 0;
  }
  uint64_t ObjectType = swift_getObjectType();
  if (ObjectType != swift_getObjectType()) {
    return 0;
  }
  long long v20 = [(UIGestureRecognizer *)v17 view];
  if (!v20) {
    return 0;
  }
  objc_super v21 = v20;
  char v22 = [(UIGestureRecognizer *)shouldRecognizeSimultaneouslyWith view];
  if (!v22)
  {

    return 0;
  }
  id v23 = v22;
  unsigned __int8 v24 = [(UIView *)v22 isDescendantOfView:v21];

  return (v24 & 1) != 0;
}

void UILargeContentViewerInteractionBridge.hitTest(at:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v7 = v3 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host;
  id v8 = (void *)MEMORY[0x18C119DF0](v3 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host);
  if (!v8)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  char v9 = v8;
  id v10 = objc_msgSend(v8, sel__largeContentViewerItemAtPoint_, a2, a3);

  if (!v10)
  {
LABEL_7:
    objc_super v21 = (void *)MEMORY[0x18C119DF0](v7);
    if (v21)
    {
      char v22 = v21;
      objc_msgSend(v21, sel_convertPoint_toView_, 0, a2, a3);
      CGFloat v24 = v23;
      CGFloat v26 = v25;

      outlined init with take of AccessibilityLargeContentViewTree((long long *)(v3 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_largeContentViewTree), v35);
      outlined init with take of AccessibilityLargeContentViewTree(v35, v32);
      AccessibilityLargeContentViewTree.hitTest(at:)(v33, v24, v26);
      _sypSgWObTm_2((uint64_t)v33, (uint64_t)v36, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewItem?, (uint64_t)&type metadata for AccessibilityLargeContentViewItem);
      _sypSgWObTm_2((uint64_t)v36, (uint64_t)v37, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewItem?, (uint64_t)&type metadata for AccessibilityLargeContentViewItem);
      if (_s7SwiftUI33AccessibilityLargeContentViewItemVSgWOg((uint64_t)v37) == 1)
      {
        id v12 = 0;
        long long v19 = 0uLL;
        long long v20 = 0uLL;
      }
      else
      {
        unsigned char v33[12] = *(_OWORD *)v38;
        v34[0] = *(_OWORD *)&v38[16];
        *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)&v38[25];
        v33[8] = v37[8];
        v33[9] = v37[9];
        v33[10] = v37[10];
        v33[11] = v37[11];
        unsigned char v33[4] = v37[4];
        v33[5] = v37[5];
        v33[6] = v37[6];
        v33[7] = v37[7];
        v33[0] = v37[0];
        v33[1] = v37[1];
        _OWORD v33[2] = v37[2];
        uint64_t v33[3] = v37[3];
        id v27 = objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerItemBridge());
        id v12 = UILargeContentViewerItemBridge.init(_:)(v33);
        long long v19 = *(_OWORD *)&v38[8];
        long long v20 = *(_OWORD *)&v38[24];
      }
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  self;
  uint64_t v11 = swift_dynamicCastObjCClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    goto LABEL_7;
  }
  id v12 = (id)v11;
  uint64_t v13 = MEMORY[0x18C119DF0](v7);
  if (v13)
  {
    uint64_t v14 = (void *)v13;
    objc_msgSend(v12, sel_frame);
    objc_msgSend(v14, sel_convertRect_fromCoordinateSpace_, v12);
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    uint64_t v28 = v17;
    uint64_t v31 = v18;

    *(void *)&long long v20 = v28;
    *(void *)&long long v19 = v29;
    *((void *)&v19 + 1) = v30;
    *((void *)&v20 + 1) = v31;
LABEL_11:
    *(void *)a1 = v12;
    *(_OWORD *)(a1 + 8) = v19;
    *(_OWORD *)(a1 + 24) = v20;
    return;
  }
LABEL_14:
  __break(1u);
}

id UILargeContentViewerItemBridge.init(_:)(long long *a1)
{
  uint64_t v2 = v1;
  long long v3 = a1[13];
  unsigned char v22[11] = a1[12];
  v23[0] = v3;
  *(_OWORD *)((char *)v23 + 9) = *(long long *)((char *)a1 + 217);
  long long v4 = a1[9];
  v22[7] = a1[8];
  v22[8] = v4;
  long long v5 = a1[11];
  v22[9] = a1[10];
  v22[10] = v5;
  long long v6 = a1[5];
  void v22[3] = a1[4];
  _OWORD v22[4] = v6;
  long long v7 = a1[7];
  void v22[5] = a1[6];
  v22[6] = v7;
  long long v8 = a1[1];
  long long v21 = *a1;
  v22[0] = v8;
  long long v9 = a1[3];
  v22[1] = a1[2];
  uint64_t v22[2] = v9;
  *(_OWORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_1C25C4B203EEAC6A19839AC5BDB6A34530UILargeContentViewerItemBridge_largeContentTitle] = v21;
  _sypSgWObTm_2((uint64_t)v22, (uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v24) == 1)
  {
    swift_bridgeObjectRetain();
    id v10 = v1;
    outlined release of AccessibilityLargeContentViewItem((uint64_t)&v21);
    uint64_t v11 = 0;
  }
  else if (v25)
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    id v12 = v1;
    outlined release of AccessibilityLargeContentViewItem((uint64_t)&v21);
    self;
    uint64_t v11 = swift_dynamicCastObjCClassUnconditional();
  }
  else
  {
    _sypSgWObTm_2((uint64_t)v22, (uint64_t)&v18, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
    uint64_t v13 = v18;
    char v14 = v19;
    swift_bridgeObjectRetain();
    uint64_t v15 = v1;
    outlined copy of GraphicsImage.Contents?(v13, v14);
    uint64_t v11 = (uint64_t)GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(1, 0, 0);
    outlined release of AccessibilityLargeContentViewItem((uint64_t)&v21);
    outlined consume of GraphicsImage.Contents?(v13, v14);
  }
  *(void *)&v2[OBJC_IVAR____TtC7SwiftUIP33_1C25C4B203EEAC6A19839AC5BDB6A34530UILargeContentViewerItemBridge_largeContentImage] = v11;

  uint64_t v16 = (objc_class *)type metadata accessor for UILargeContentViewerItemBridge();
  v20.receiver = v2;
  v20.super_class = v16;
  return objc_msgSendSuper2(&v20, sel_init);
}

id UILargeContentViewerItemBridge.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UILargeContentViewerItemBridge();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in UIAccessibilityTraits()
{
  return MEMORY[0x1E4FBC568];
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Encodable in UIAccessibilityTraits()
{
  return MEMORY[0x1E4FBC540];
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in UIAccessibilityContainerType()
{
  return MEMORY[0x1E4FBB580];
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Encodable in UIAccessibilityContainerType()
{
  return MEMORY[0x1E4FBB558];
}

uint64_t type metadata accessor for UILargeContentViewerItemBridge()
{
  return self;
}

id AccessibilityNode.entry(for:going:from:)(uint64_t a1, uint64_t a2, id a3)
{
  long long v4 = v3;
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  char v11 = *(unsigned char *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  char v13 = *(unsigned char *)(a1 + 56);
  *(void *)&long long v31 = *(void *)a1;
  *((void *)&v31 + 1) = v7;
  *(void *)&long long v32 = v8;
  *((void *)&v32 + 1) = v9;
  *(void *)&long long v33 = v10;
  BYTE8(v33) = v11;
  *(void *)&long long v34 = v12;
  BYTE8(v34) = v13;
  uint64_t v25 = v12;
  char v24 = v13;
  if (a2 == 1)
  {
    char v26 = 1;
    goto LABEL_5;
  }
  if (!a2)
  {
    char v26 = 0;
LABEL_5:
    if (objc_msgSend(a3, sel_targetElement))
    {
      uint64_t v14 = swift_dynamicCastObjCProtocolConditional();
      if (v14)
      {
        uint64_t v15 = (void *)v14;
        swift_getObjectType();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        if (!swift_dynamicCastMetatype()) {
          uint64_t v15 = 0;
        }
        if (v15)
        {
LABEL_12:
          id v16 = objc_msgSend(a3, sel_targetRange);
          if (v16) {
            uint64_t v17 = 2;
          }
          else {
            uint64_t v17 = 0xFFFFFFFFLL;
          }
          AccessibilityRotorInfo.entry(for:going:from:range:)(v4, v26, v15, v16, 0, v17, (uint64_t)&v40);

          if (*((void *)&v45 + 1))
          {
            v49[4] = v44;
            v49[5] = v45;
            v49[6] = v46;
            char v50 = v47;
            v49[0] = v40;
            v49[1] = v41;
            v49[2] = v42;
            v49[3] = v43;
            v27[0] = v6;
            v27[1] = v7;
            v27[2] = v8;
            v27[3] = v9;
            char v27[4] = v10;
            char v28 = v11;
            uint64_t v29 = v25;
            char v30 = v24;
            AccessibilityListRotorEntry.resolveForNavigationOrClosestEntry(for:on:prepare:)(v27, (char *)v4, 1, (uint64_t)&v31);
            if (*((void *)&v36 + 1))
            {
              long long v46 = v37;
              long long v47 = v38;
              uint64_t v48 = v39;
              long long v42 = v33;
              long long v43 = v34;
              long long v44 = v35;
              long long v45 = v36;
              long long v40 = v31;
              long long v41 = v32;
              outlined init with copy of AccessibilityNavigationRotorEntry((uint64_t)&v40, (uint64_t)&v31);
              id v18 = objc_allocWithZone(MEMORY[0x1E4FB13C8]);
              id v19 = objc_msgSend(v18, sel_initWithTargetElement_targetRange_, *((void *)&v38 + 1), v39);
              outlined destroy of AccessibilityNavigationRotorEntry((uint64_t)&v31);
              outlined destroy of AccessibilityNavigationRotorEntry((uint64_t)&v40);
              outlined destroy of AccessibilityListRotorEntry((uint64_t)v49);
              return v19;
            }
            outlined destroy of AccessibilityListRotorEntry((uint64_t)v49);
            objc_super v20 = &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?;
            long long v21 = &type metadata for AccessibilityNavigationRotorEntry;
            char v22 = &v31;
          }
          else
          {
            objc_super v20 = &lazy cache variable for type metadata for AccessibilityListRotorEntry?;
            long long v21 = &type metadata for AccessibilityListRotorEntry;
            char v22 = &v40;
          }
          _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_1((uint64_t)v22, v20, (uint64_t)v21);
          return 0;
        }
      }
      swift_unknownObjectRelease();
    }
    uint64_t v15 = 0;
    goto LABEL_12;
  }
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id closure #1 in AccessibilityRotorInfo.resolve(in:for:)(void *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x18C119DF0](v5);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (void *)v6;
  long long v8 = a3[1];
  v13[0] = *a3;
  v13[1] = v8;
  v14[0] = a3[2];
  *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)((char *)a3 + 41);
  id v9 = objc_msgSend(a1, sel_searchDirection, v13[0], v8, v14[0], *(void *)&v14[1], *((void *)&v14[1] + 1));
  id v10 = objc_msgSend(a1, sel_currentItem);
  id v11 = AccessibilityNode.entry(for:going:from:)((uint64_t)v13, (uint64_t)v9, v10);

  return v11;
}

uint64_t AccessibilitySystemRotor.systemRotorType.getter()
{
  return *v0 + 1;
}

id closure #1 in UIKitAccessibilityLinkRotorBridge.init(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x18C119DF0](v2);
  if (!v3) {
    return 0;
  }
  long long v4 = (void *)v3;
  uint64_t v5 = (void *)AccessibilityNode.currentLinkRotor.getter();

  if (!v5) {
    return 0;
  }
  uint64_t v6 = UIAccessibilityCustomRotorSearchPredicate.linkRotorSearchParameters.getter();
  if (v6 == 1)
  {

    return 0;
  }
  uint64_t v9 = v6;
  uint64_t v10 = v7;
  char v11 = v8 & 1;
  specialized AccessibilityLinkRotorBridge.update()();
  if (!specialized AccessibilityLinkRotorBridge.search(parameters:)(v9, v10, v11))
  {

    outlined consume of AccessibilityLinkRotorSearchParameters?(v9);
    return 0;
  }
  type metadata accessor for UIKitAccessibilityLinkRotorBridge.LinkElement();
  id v12 = (id)swift_dynamicCastClass();
  if (v12) {
    id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB13C8]), sel_initWithTargetElement_targetRange_, v12, 0);
  }

  outlined consume of AccessibilityLinkRotorSearchParameters?(v9);
  swift_unknownObjectRelease();
  return v12;
}

uint64_t UIAccessibilityCustomRotorSearchPredicate.linkRotorSearchParameters.getter()
{
  id v1 = objc_msgSend(v0, sel_currentItem);
  id v2 = objc_msgSend(v1, sel_targetElement);

  if (v2)
  {
    swift_getObjectType();
    if (swift_conformsToProtocol2()) {
      id v3 = v2;
    }
    else {
      id v3 = 0;
    }
    if (!v3) {
      swift_unknownObjectRelease();
    }
  }
  else
  {
    id v3 = 0;
  }
  if ((unint64_t)objc_msgSend(v0, sel_searchDirection) <= 1) {
    return (uint64_t)v3;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for UIKitAccessibilityLinkRotorBridge()
{
  return self;
}

void *UIKitAccessibilityLinkRotorBridge.LinkElement.accessibilityLabel.getter()
{
  id v1 = (void *)MEMORY[0x18C119DF0](v0+ OBJC_IVAR____TtCC7SwiftUI33UIKitAccessibilityLinkRotorBridgeP33_1C25C4B203EEAC6A19839AC5BDB6A34511LinkElement_node);
  id v2 = v1;
  if (v1)
  {
    id v3 = objc_msgSend(v1, sel_accessibilityLabel);

    if (v3)
    {
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v6 = v5;

      uint64_t v7 = (void *)MEMORY[0x18C115780](v4, v6);
      swift_bridgeObjectRelease();
      id v8 = objc_msgSend(v7, sel_substringWithRange_, *(void *)(v0+ OBJC_IVAR____TtCC7SwiftUI33UIKitAccessibilityLinkRotorBridgeP33_1C25C4B203EEAC6A19839AC5BDB6A34511LinkElement_range), *(void *)(v0+ OBJC_IVAR____TtCC7SwiftUI33UIKitAccessibilityLinkRotorBridgeP33_1C25C4B203EEAC6A19839AC5BDB6A34511LinkElement_range+ 8));

      id v2 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

double UIKitAccessibilityLinkRotorBridge.LinkElement.accessibilityActivationPoint.getter()
{
  id v1 = (void *)MEMORY[0x18C119DF0](v0+ OBJC_IVAR____TtCC7SwiftUI33UIKitAccessibilityLinkRotorBridgeP33_1C25C4B203EEAC6A19839AC5BDB6A34511LinkElement_node);
  if (!v1) {
    return 0.0;
  }
  id v2 = v1;
  objc_msgSend(v1, sel__accessibilityBoundsForRange_, *(void *)(v0+ OBJC_IVAR____TtCC7SwiftUI33UIKitAccessibilityLinkRotorBridgeP33_1C25C4B203EEAC6A19839AC5BDB6A34511LinkElement_range), 1);
  double v4 = v3;
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  CGFloat v10 = v9;

  v13.origin.x = v4;
  v13.origin.y = v6;
  v13.size.width = v8;
  v13.size.height = v10;
  double v11 = v4 + CGRectGetWidth(v13) * 0.5;
  v14.origin.x = v4;
  v14.origin.y = v6;
  v14.size.width = v8;
  v14.size.height = v10;
  CGRectGetHeight(v14);
  return v11;
}

uint64_t type metadata accessor for UIKitAccessibilityLinkRotorBridge.LinkElement()
{
  return self;
}

void *type metadata accessor for UILargeContentViewerInteractionBridge.ActiveItem()
{
  return &unk_1ED463430;
}

ValueMetadata *type metadata accessor for AccessibilityUIKitTraits()
{
  return &type metadata for AccessibilityUIKitTraits;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.UIKitTraitsKey()
{
  return &type metadata for AccessibilityProperties.UIKitTraitsKey;
}

id PlatformAccessibilityElementProtocol<>.accessibilityResolvedUITextRange(from:)(uint64_t a1, uint64_t a2)
{
  id v4 = PlatformAccessibilityElementProtocol<>.elementResolvingNode.getter();
  if (!objc_msgSend(v4, sel_respondsToSelector_, sel__textRangeFromNSRange_))
  {
    if (objc_msgSend(v4, sel_respondsToSelector_, sel__textInputForReveal))
    {
      id v6 = objc_msgSend(v4, sel__textInputForReveal);
      if (v6)
      {
        double v7 = v6;
        if (objc_msgSend(v6, sel_respondsToSelector_, sel__textRangeFromNSRange_))
        {
          id v5 = objc_msgSend(v7, sel__textRangeFromNSRange_, a1, a2);

          swift_unknownObjectRelease();
          return v5;
        }
        swift_unknownObjectRelease();
      }
    }

    return 0;
  }
  id v5 = objc_msgSend(v4, sel__textRangeFromNSRange_, a1, a2);

  return v5;
}

id PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)(uint64_t a1)
{
  id v2 = PlatformAccessibilityElementProtocol<>.elementResolvingNode.getter();
  if (!objc_msgSend(v2, sel_respondsToSelector_, sel__nsrangeForTextRange_))
  {
    if (objc_msgSend(v2, sel_respondsToSelector_, sel__textInputForReveal))
    {
      id v4 = objc_msgSend(v2, sel__textInputForReveal);
      if (v4)
      {
        id v5 = v4;
        if (objc_msgSend(v4, sel_respondsToSelector_, sel__nsrangeForTextRange_))
        {
          id v3 = objc_msgSend(v5, sel__nsrangeForTextRange_, a1);

          swift_unknownObjectRelease();
          return v3;
        }
        swift_unknownObjectRelease();
      }
    }

    return 0;
  }
  id v3 = objc_msgSend(v2, sel__nsrangeForTextRange_, a1);

  return v3;
}

void PlatformAccessibilityElementProtocol<>.traverseAncestors(_:)(uint64_t (*a1)(void))
{
  id v8 = v1;
  if (a1())
  {
    uint64_t v3 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      if (objc_msgSend(v8, sel_respondsToSelector_, sel_accessibilityContainer))
      {
        if (objc_msgSend(v8, sel_accessibilityContainer))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v10, 0, sizeof(v10));
        }
        _sypSgWObTm_2((uint64_t)v10, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for Any?, v3);
        if (v12)
        {
          type metadata accessor for NSObject & PlatformAccessibilityElementProtocol(0, (unint64_t *)&lazy cache variable for type metadata for NSObject & PlatformAccessibilityElementProtocol);
          if (swift_dynamicCast())
          {

            id v4 = v9;
            goto LABEL_4;
          }
        }
        else
        {
          _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_1((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
        }
      }
      self;
      uint64_t v5 = swift_dynamicCastObjCClass();
      if (!v5)
      {
LABEL_19:

        return;
      }
      id v6 = (void *)v5;
      id v7 = v8;
      id v4 = objc_msgSend(v6, sel_superview);

      if (!v4) {
        return;
      }
LABEL_4:
      id v8 = v4;
      if ((a1() & 1) == 0) {
        goto LABEL_19;
      }
    }
  }
}

id PlatformAccessibilityElementProtocol<>.compareGeometry(to:)(uint64_t a1)
{
  if (!objc_msgSend(v1, sel_respondsToSelector_, sel_accessibilityCompareGeometry_)) {
    return 0;
  }

  return objc_msgSend(v1, sel_accessibilityCompareGeometry_, a1);
}

unint64_t one-time initialization function for lastFocus()
{
  uint64_t v0 = MEMORY[0x1E4FBC860];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRelease();
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(v0);
  static AccessibilityFocus.lastFocus = result;
  return result;
}

void PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  uint64_t v170 = Dictionary.init(minimumCapacity:)();
  uint64_t v150 = a1;
  id v151 = v2;
  if (_AXSwiftUIGetObjectFromSelectorAsAny(v2, sel_accessibilityAttributedLabel))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v162, &v160);
    __swift_project_boxed_opaque_existential_1(&v160, *((uint64_t *)&v161[0] + 1));
    uint64_t v5 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    BOOL v6 = _AXSwiftUIIsAnyStringEmpty(v5);
    swift_unknownObjectRelease();
    if (!v6)
    {
LABEL_6:
      type metadata accessor for AccessibilityUIKitTraits?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4FBBE00]);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_18834BB80;
      outlined init with copy of Any((uint64_t)&v160, (uint64_t)&v162);
      AccessibilityText.init(_:)();
      long long v10 = v167;
      char v11 = v168;
      long long v162 = v167;
      __int16 v163 = v168;
      uint64_t v12 = AccessibilityText.text.getter();
      uint64_t v14 = v13;
      char v16 = v15;
      uint64_t v18 = v17;
      outlined consume of AccessibilityText.Storage((void *)v10, *((uint64_t *)&v10 + 1), v11);
      *(void *)(v9 + 32) = v12;
      *(void *)(v9 + 40) = v14;
      *(unsigned char *)(v9 + 48) = v16 & 1;
      *(void *)(v9 + 56) = v18;
      uint64_t v3 = v151;
      uint64_t v19 = MEMORY[0x1E4F40E40];
      _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E4F40E40]);
      uint64_t v164 = v20;
      uint64_t v165 = (_UNKNOWN **)_s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, v19);
      *(void *)&long long v162 = v9;
      BYTE8(v162) = 2;
      specialized Dictionary.subscript.setter((uint64_t)&v162, MEMORY[0x1E4F40B88]);
      goto LABEL_7;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v160);
  }
  if (!_AXSwiftUIGetObjectFromSelectorAsAny(v3, sel_accessibilityLabel)) {
    goto LABEL_8;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(&v162, &v160);
  __swift_project_boxed_opaque_existential_1(&v160, *((uint64_t *)&v161[0] + 1));
  id v7 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  BOOL v8 = _AXSwiftUIIsAnyStringEmpty(v7);
  swift_unknownObjectRelease();
  if (!v8) {
    goto LABEL_6;
  }
LABEL_7:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v160);
LABEL_8:
  if (_AXSwiftUIGetObjectFromSelectorAsAny(v3, sel_accessibilityAttributedValue))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v162, &v167);
    __swift_project_boxed_opaque_existential_1(&v167, v169);
    long long v21 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    BOOL v22 = _AXSwiftUIIsAnyStringEmpty(v21);
    swift_unknownObjectRelease();
    if (!v22)
    {
LABEL_13:
      outlined init with copy of Any((uint64_t)&v167, (uint64_t)&v162);
      AccessibilityText.init(_:)();
      long long v25 = v160;
      char v26 = v161[0];
      long long v162 = v160;
      __int16 v163 = v161[0];
      AccessibilityText.text.getter();
      outlined consume of AccessibilityText.Storage((void *)v25, *((uint64_t *)&v25 + 1), v26);
      AccessibilityValueStorage.init(description:)();
      uint64_t v27 = MEMORY[0x1E4F40E80];
      _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_0((uint64_t)&v162, (uint64_t)&v160, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80]);
      specialized AccessibilityProperties.subscript.setter((uint64_t)&v160);
      _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_1((uint64_t)&v162, &lazy cache variable for type metadata for AccessibilityValueStorage?, v27);
      goto LABEL_14;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
  }
  if (!_AXSwiftUIGetObjectFromSelectorAsAny(v3, sel_accessibilityValue)) {
    goto LABEL_15;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(&v162, &v167);
  __swift_project_boxed_opaque_existential_1(&v167, v169);
  double v23 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  BOOL v24 = _AXSwiftUIIsAnyStringEmpty(v23);
  swift_unknownObjectRelease();
  if (!v24) {
    goto LABEL_13;
  }
LABEL_14:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
LABEL_15:
  if (_AXSwiftUIGetObjectFromSelectorAsAny(v3, sel_accessibilityAttributedHint))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v160, &v162);
    __swift_project_boxed_opaque_existential_1(&v162, v164);
    char v28 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    BOOL v29 = _AXSwiftUIIsAnyStringEmpty(v28);
    swift_unknownObjectRelease();
    if (!v29)
    {
LABEL_20:
      type metadata accessor for AccessibilityUIKitTraits?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4FBBE00]);
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_18834BB80;
      outlined init with copy of Any((uint64_t)&v162, (uint64_t)&v160);
      AccessibilityText.init(_:)();
      long long v33 = v167;
      char v34 = v168;
      long long v160 = v167;
      LOWORD(v161[0]) = v168;
      uint64_t v35 = AccessibilityText.text.getter();
      uint64_t v37 = v36;
      char v39 = v38;
      uint64_t v41 = v40;
      outlined consume of AccessibilityText.Storage((void *)v33, *((uint64_t *)&v33 + 1), v34);
      *(void *)(v32 + 32) = v35;
      *(void *)(v32 + 40) = v37;
      *(unsigned char *)(v32 + 48) = v39 & 1;
      *(void *)(v32 + 56) = v41;
      uint64_t v3 = v151;
      MEMORY[0x18C111DD0](v32);
      goto LABEL_21;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v162);
  }
  if (!_AXSwiftUIGetObjectFromSelectorAsAny(v3, sel_accessibilityHint)) {
    goto LABEL_22;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(&v160, &v162);
  __swift_project_boxed_opaque_existential_1(&v162, v164);
  char v30 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  BOOL v31 = _AXSwiftUIIsAnyStringEmpty(v30);
  swift_unknownObjectRelease();
  if (!v31) {
    goto LABEL_20;
  }
LABEL_21:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v162);
LABEL_22:
  id v42 = objc_msgSend(v3, sel_accessibilityAttributedUserInputLabels);
  if (!v42) {
    goto LABEL_41;
  }
  long long v43 = v42;
  uint64_t v157 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  unint64_t v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v44 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v45) {
      goto LABEL_25;
    }
    goto LABEL_40;
  }
  uint64_t v45 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v45)
  {
LABEL_40:
    swift_bridgeObjectRelease();
LABEL_41:
    id v65 = objc_msgSend(v3, sel_accessibilityUserInputLabels);
    if (v65)
    {
      uint64_t v66 = v65;
      uint64_t v67 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v68 = *(void *)(v67 + 16);
      if (v68)
      {
        swift_bridgeObjectRetain();
        char v69 = (uint64_t *)(v67 + 40);
        unint64_t v70 = (char *)MEMORY[0x1E4FBC860];
        do
        {
          uint64_t v71 = *(v69 - 1);
          uint64_t v72 = *v69;
          swift_bridgeObjectRetain();
          uint64_t v73 = (void *)MEMORY[0x18C115780](v71, v72);
          BOOL v74 = _AXSwiftUIIsAnyStringEmpty(v73);

          if (v74)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v164 = MEMORY[0x1E4FBB1A0];
            *(void *)&long long v162 = v71;
            *((void *)&v162 + 1) = v72;
            swift_bridgeObjectRetain();
            AccessibilityText.init(_:)();
            long long v75 = v160;
            char v76 = v161[0];
            long long v162 = v160;
            __int16 v163 = v161[0];
            uint64_t v77 = AccessibilityText.text.getter();
            uint64_t v79 = v78;
            char v81 = v80;
            uint64_t v158 = v82;
            outlined consume of AccessibilityText.Storage((void *)v75, *((uint64_t *)&v75 + 1), v76);
            swift_bridgeObjectRelease();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v70 + 2) + 1, 1, v70);
            }
            unint64_t v84 = *((void *)v70 + 2);
            unint64_t v83 = *((void *)v70 + 3);
            if (v84 >= v83 >> 1) {
              unint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v83 > 1), v84 + 1, 1, v70);
            }
            *((void *)v70 + 2) = v84 + 1;
            uint64_t v85 = &v70[32 * v84];
            *((void *)v85 + 4) = v77;
            *((void *)v85 + 5) = v79;
            v85[48] = v81 & 1;
            *((void *)v85 + 7) = v158;
            uint64_t v3 = v151;
          }
          v69 += 2;
          --v68;
        }
        while (v68);
        swift_bridgeObjectRelease_n();
        type metadata accessor for _ContiguousArrayStorage<(String, Any)>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Text]?>, (uint64_t (*)(uint64_t))type metadata accessor for [Text]?, MEMORY[0x1E4F41090]);
        uint64_t v164 = v86;
        uint64_t v165 = (_UNKNOWN **)lazy protocol witness table accessor for type AccessibilityPropertiesEntry<[Text]?> and conformance AccessibilityPropertiesEntry<A>();
        *(void *)&long long v162 = v70;
        specialized Dictionary.subscript.setter((uint64_t)&v162, MEMORY[0x1E4F40AB8]);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    goto LABEL_54;
  }
LABEL_25:
  if (v45 < 1)
  {
    __break(1u);
    goto LABEL_95;
  }
  unint64_t v46 = v44 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  uint64_t v47 = 0;
  uint64_t v48 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v153 = v45;
  unint64_t v155 = v44;
  unint64_t v152 = v44 & 0xC000000000000001;
  do
  {
    if (v46) {
      id v49 = (id)MEMORY[0x18C117680](v47, v44);
    }
    else {
      id v49 = *(id *)(v44 + 8 * v47 + 32);
    }
    char v50 = v49;
    if (_AXSwiftUIIsAnyStringEmpty(v49))
    {
    }
    else
    {
      uint64_t v164 = v157;
      *(void *)&long long v162 = v50;
      id v51 = v50;
      AccessibilityText.init(_:)();
      long long v52 = v160;
      char v53 = v161[0];
      long long v162 = v160;
      __int16 v163 = v161[0];
      uint64_t v54 = AccessibilityText.text.getter();
      uint64_t v56 = v55;
      char v58 = v57;
      uint64_t v60 = v59;
      outlined consume of AccessibilityText.Storage((void *)v52, *((uint64_t *)&v52 + 1), v53);

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v48 + 2) + 1, 1, v48);
      }
      unint64_t v62 = *((void *)v48 + 2);
      unint64_t v61 = *((void *)v48 + 3);
      if (v62 >= v61 >> 1) {
        uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v61 > 1), v62 + 1, 1, v48);
      }
      *((void *)v48 + 2) = v62 + 1;
      uint64_t v63 = &v48[32 * v62];
      *((void *)v63 + 4) = v54;
      *((void *)v63 + 5) = v56;
      v63[48] = v58 & 1;
      *((void *)v63 + 7) = v60;
      uint64_t v45 = v153;
      unint64_t v44 = v155;
      unint64_t v46 = v152;
    }
    ++v47;
  }
  while (v45 != v47);
  swift_bridgeObjectRelease_n();
  type metadata accessor for _ContiguousArrayStorage<(String, Any)>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Text]?>, (uint64_t (*)(uint64_t))type metadata accessor for [Text]?, MEMORY[0x1E4F41090]);
  uint64_t v164 = v64;
  uint64_t v165 = (_UNKNOWN **)lazy protocol witness table accessor for type AccessibilityPropertiesEntry<[Text]?> and conformance AccessibilityPropertiesEntry<A>();
  *(void *)&long long v162 = v48;
  specialized Dictionary.subscript.setter((uint64_t)&v162, MEMORY[0x1E4F40AB8]);
  uint64_t v3 = v151;
LABEL_54:
  id v87 = objc_msgSend(v3, sel_accessibilityIdentifier);
  if (v87)
  {
    unint64_t v88 = v87;
    uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v91 = v90;

    uint64_t v92 = HIBYTE(v91) & 0xF;
    if ((v91 & 0x2000000000000000) == 0) {
      uint64_t v92 = v89 & 0xFFFFFFFFFFFFLL;
    }
    if (v92)
    {
      uint64_t v93 = MEMORY[0x1E4F41168];
      _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityIdentifierStorage?, MEMORY[0x1E4F41168]);
      uint64_t v164 = v94;
      uint64_t v165 = (_UNKNOWN **)_s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityIdentifierStorage?, v93);
      *(void *)&long long v162 = v89;
      *((void *)&v162 + 1) = v91;
      LOBYTE(v163) = 0;
      specialized Dictionary.subscript.setter((uint64_t)&v162, MEMORY[0x1E4F40A98]);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  unint64_t v95 = (unint64_t)objc_msgSend(v3, sel_accessibilityTraits);
  if ((*MEMORY[0x1E4FB2530] & ~v95) != 0)
  {
    id v101 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v98 = v150;
  }
  else
  {
    uint64_t v96 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v97 = swift_allocObject();
    uint64_t v98 = v150;
    *(void *)(v97 + 16) = v150;
    *(void *)(v97 + 24) = v96;
    LODWORD(v96) = AccessibilityActionHandlerSeed++;
    type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityAdjustableAction>>();
    uint64_t v164 = v99;
    uint64_t v165 = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
    uint64_t v100 = swift_allocObject();
    *(void *)&long long v162 = v100;
    *(unsigned char *)(v100 + 16) = 2;
    *(void *)(v100 + 24) = 0;
    *(void *)(v100 + 32) = 0;
    *(void *)(v100 + 40) = 0;
    *(void *)(v100 + 48) = 2;
    *(_OWORD *)(v100 + 56) = 0u;
    *(_OWORD *)(v100 + 72) = 0u;
    *(void *)(v100 + 88) = 0;
    *(void *)(v100 + 96) = partial apply for closure #3 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter;
    *(void *)(v100 + 104) = v97;
    *(_DWORD *)(v100 + 112) = v96;
    char v166 = 1;
    outlined init with copy of AnyAccessibilityAction((uint64_t)&v162, (uint64_t)&v160);
    id v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v103 = *((void *)v101 + 2);
    unint64_t v102 = *((void *)v101 + 3);
    if (v103 >= v102 >> 1) {
      id v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v102 > 1), v103 + 1, 1, v101);
    }
    *((void *)v101 + 2) = v103 + 1;
    uint64_t v104 = &v101[48 * v103];
    long long v105 = v160;
    long long v106 = v161[0];
    *(_OWORD *)(v104 + 57) = *(_OWORD *)((char *)v161 + 9);
    *((_OWORD *)v104 + 2) = v105;
    *((_OWORD *)v104 + 3) = v106;
    outlined destroy of AnyAccessibilityAction((uint64_t)&v162);
  }
  id v107 = objc_msgSend(v3, sel_accessibilitySwiftUIDefaultActionStoredBlock);
  if (v107)
  {
    _Block_release(v107);
    uint64_t v108 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v109 = swift_allocObject();
    *(void *)(v109 + 16) = v98;
    *(void *)(v109 + 24) = v108;
    uint64_t v110 = swift_allocObject();
    *(void *)(v110 + 16) = partial apply for closure #4 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter;
    *(void *)(v110 + 24) = v109;
    LODWORD(v109) = AccessibilityActionHandlerSeed++;
    type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>();
    uint64_t v164 = v111;
    uint64_t v165 = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
    uint64_t v112 = swift_allocObject();
    *(void *)&long long v162 = v112;
    *(_OWORD *)(v112 + 16) = 0u;
    *(_OWORD *)(v112 + 32) = 0u;
    *(_OWORD *)(v112 + 48) = 0u;
    *(void *)(v112 + 64) = 0;
    *(void *)(v112 + 72) = 2;
    *(_OWORD *)(v112 + 80) = 0u;
    *(_OWORD *)(v112 + 96) = 0u;
    *(void *)(v112 + 112) = 0;
    *(void *)(v112 + 120) = thunk for @escaping @callee_guaranteed () -> (@out AccessibilityActionResult)partial apply;
    *(void *)(v112 + 128) = v110;
    *(_DWORD *)(v112 + 136) = v109;
    char v166 = 1;
    outlined init with copy of AnyAccessibilityAction((uint64_t)&v162, (uint64_t)&v160);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v101 + 2) + 1, 1, v101);
    }
    unint64_t v114 = *((void *)v101 + 2);
    unint64_t v113 = *((void *)v101 + 3);
    if (v114 >= v113 >> 1) {
      id v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v113 > 1), v114 + 1, 1, v101);
    }
    *((void *)v101 + 2) = v114 + 1;
    uint64_t v115 = &v101[48 * v114];
    long long v116 = v160;
    long long v117 = v161[0];
    *(_OWORD *)(v115 + 57) = *(_OWORD *)((char *)v161 + 9);
    *((_OWORD *)v115 + 2) = v116;
    *((_OWORD *)v115 + 3) = v117;
    outlined destroy of AnyAccessibilityAction((uint64_t)&v162);
  }
  id v118 = objc_msgSend(v3, sel_accessibilityCustomActions);
  if (!v118) {
    goto LABEL_90;
  }
  uint64_t v119 = v118;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
  unint64_t v120 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v120 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v121 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v121)
    {
LABEL_74:
      uint64_t v159 = v121 - 1;
      if (v121 >= 1)
      {
        uint64_t v122 = 0;
        unint64_t v154 = v120;
        unint64_t v156 = v120 & 0xC000000000000001;
        if ((v120 & 0xC000000000000001) == 0) {
          goto LABEL_77;
        }
LABEL_76:
        for (id i = (id)MEMORY[0x18C117680](v122, v120); ; id i = *(id *)(v120 + 8 * v122 + 32))
        {
          uint64_t v124 = i;
          id v125 = objc_msgSend(i, sel_attributedName);
          *((void *)&v161[0] + 1) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
          *(void *)&long long v160 = v125;
          AccessibilityText.init(_:)();
          long long v126 = v167;
          char v127 = v168;
          long long v160 = v167;
          LOWORD(v161[0]) = v168;
          uint64_t v128 = AccessibilityText.text.getter();
          uint64_t v130 = v129;
          char v132 = v131;
          uint64_t v134 = v133;
          outlined consume of AccessibilityText.Storage((void *)v126, *((uint64_t *)&v126 + 1), v127);
          id v135 = objc_msgSend(v124, sel_image);
          if (v135)
          {
            id v136 = v135;
            type metadata accessor for ImageProviderBox<UIImage>();
            uint64_t v137 = swift_allocObject();
            *(void *)(v137 + 16) = v136;
          }
          else
          {
            uint64_t v137 = 0;
          }
          uint64_t v138 = v132 & 1;
          uint64_t v139 = swift_allocObject();
          *(void *)(v139 + 16) = v124;
          uint64_t v140 = swift_allocObject();
          *(void *)(v140 + 16) = partial apply for closure #6 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter;
          *(void *)(v140 + 24) = v139;
          LODWORD(v139) = AccessibilityActionHandlerSeed++;
          type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>();
          uint64_t v164 = v141;
          uint64_t v165 = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
          uint64_t v142 = swift_allocObject();
          *(void *)&long long v162 = v142;
          *(void *)(v142 + 16) = v128;
          *(void *)(v142 + 24) = v130;
          *(void *)(v142 + 32) = v138;
          *(void *)(v142 + 40) = v134;
          *(void *)(v142 + 48) = 0;
          *(void *)(v142 + 56) = 0;
          *(void *)(v142 + 64) = 0;
          *(void *)(v142 + 72) = 2;
          *(_OWORD *)(v142 + 80) = 0u;
          *(_OWORD *)(v142 + 96) = 0u;
          *(void *)(v142 + 112) = v137;
          *(void *)(v142 + 120) = partial apply for thunk for @escaping @callee_guaranteed () -> (@out AccessibilityActionResult);
          *(void *)(v142 + 128) = v140;
          *(_DWORD *)(v142 + 136) = v139;
          char v166 = 1;
          outlined init with copy of AnyAccessibilityAction((uint64_t)&v162, (uint64_t)&v160);
          id v143 = v124;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v101 + 2) + 1, 1, v101);
          }
          unint64_t v120 = v154;
          unint64_t v145 = *((void *)v101 + 2);
          unint64_t v144 = *((void *)v101 + 3);
          if (v145 >= v144 >> 1) {
            id v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v144 > 1), v145 + 1, 1, v101);
          }
          *((void *)v101 + 2) = v145 + 1;
          v146 = &v101[48 * v145];
          long long v147 = v160;
          long long v148 = v161[0];
          *(_OWORD *)(v146 + 57) = *(_OWORD *)((char *)v161 + 9);
          *((_OWORD *)v146 + 2) = v147;
          *((_OWORD *)v146 + 3) = v148;

          outlined destroy of AnyAccessibilityAction((uint64_t)&v162);
          if (v159 == v122) {
            break;
          }
          ++v122;
          if (v156) {
            goto LABEL_76;
          }
LABEL_77:
          ;
        }
        goto LABEL_89;
      }
LABEL_95:
      __break(1u);
      return;
    }
  }
  else
  {
    uint64_t v121 = *(void *)((v120 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v121) {
      goto LABEL_74;
    }
  }
LABEL_89:
  swift_bridgeObjectRelease();
LABEL_90:
  if (*((void *)v101 + 2)) {
    specialized AccessibilityProperties.subscript.setter((uint64_t)v101);
  }
  else {
    swift_bridgeObjectRelease();
  }
  *a2 = v170;
}

void closure #3 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(unsigned char *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = a2 + 16;
  if (*a1)
  {
    swift_beginAccess();
    uint64_t v5 = MEMORY[0x18C119DF0](v4);
    if (v5)
    {
      BOOL v6 = (void *)v5;
      id v7 = &selRef_accessibilityDecrement;
LABEL_6:
      [v6 *v7];
    }
  }
  else
  {
    swift_beginAccess();
    uint64_t v8 = MEMORY[0x18C119DF0](v4);
    if (v8)
    {
      BOOL v6 = (void *)v8;
      id v7 = &selRef_accessibilityIncrement;
      goto LABEL_6;
    }
  }
  *a3 = 2;
}

void closure #4 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x18C119DF0](v3);
  if (v4
    && (uint64_t v5 = v4,
        BOOL v6 = (uint64_t (**)(void))objc_msgSend(v4, sel_accessibilitySwiftUIDefaultActionStoredBlock),
        v5,
        v6)
    && (char v7 = v6[2](v6), _Block_release(v6), (v7 & 1) != 0))
  {
    char v8 = 2;
  }
  else
  {
    char v8 = 1;
  }
  *a2 = v8;
}

void closure #6 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(void *a1@<X0>, char *a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_actionHandler);
  if (!v4)
  {
    if (objc_msgSend(a1, sel_target))
    {
      char v8 = (void *)swift_dynamicCastObjCProtocolConditional();
      if (v8)
      {
        uint64_t v9 = v8;
        if (objc_msgSend(v8, sel_respondsToSelector_, objc_msgSend(a1, sel_selector)))
        {
          objc_msgSend((id)swift_unknownObjectRetain(), sel_performSelector_withObject_, objc_msgSend(a1, sel_selector), a1);
          id v10 = v9;
          swift_unknownObjectRelease();
          char v7 = 2;
          goto LABEL_11;
        }
      }
      swift_unknownObjectRelease();
    }
    char v7 = 1;
    goto LABEL_11;
  }
  uint64_t v5 = v4;
  int v6 = (*((uint64_t (**)(id, void *))v4 + 2))(v4, a1);
  _Block_release(v5);
  if (v6) {
    char v7 = 2;
  }
  else {
    char v7 = 1;
  }
LABEL_11:
  *a2 = v7;
}

uint64_t protocol witness for static AccessibilityCoreNotification.name.getter in conformance AccessibilityCore.Notification.LabelChanged()
{
  return 1005;
}

id protocol witness for AccessibilityCoreNotification.info.getter in conformance AccessibilityCore.Notification.LabelChanged@<X0>(void *a1@<X8>)
{
  id v4 = *v1;
  a1[3] = swift_getObjectType();
  *a1 = v4;

  return v4;
}

uint64_t protocol witness for static AccessibilityCoreNotification.name.getter in conformance AccessibilityCore.Notification.LayoutChanged()
{
  return *MEMORY[0x1E4FB2470];
}

id protocol witness for AccessibilityCoreNotification.info.getter in conformance AccessibilityCore.Notification.LayoutChanged@<X0>(uint64_t a1@<X8>)
{
  id v4 = *v1;
  if (*v1)
  {
    *((void *)&v6 + 1) = swift_getObjectType();
    *(void *)&long long v5 = v4;
  }
  else
  {
    id v4 = 0;
    long long v5 = 0u;
    long long v6 = 0u;
  }
  _sypSgWObTm_2((uint64_t)&v5, a1, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);

  return v4;
}

uint64_t protocol witness for static AccessibilityCoreNotification.name.getter in conformance AccessibilityCore.Notification.ScreenChanged()
{
  return *MEMORY[0x1E4FB24B0];
}

uint64_t protocol witness for AccessibilityCoreNotification.info.getter in conformance AccessibilityCore.Notification.ScreenChanged@<X0>(uint64_t a1@<X8>)
{
  return AccessibilityCore.Notification.ScreenChanged.info.getter(*(void **)v1, *(unsigned char *)(v1 + 8), a1);
}

uint64_t sub_187EFE1B8()
{
  return swift_deallocObject();
}

void partial apply for closure #6 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(char *a1@<X8>)
{
  closure #6 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(*(void **)(v1 + 16), a1);
}

uint64_t sub_187EFE1F8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187EFE230()
{
  if (*(void *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 72) >= 3uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 104))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 96));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187EFE2CC()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void partial apply for closure #4 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(char *a1@<X8>)
{
  closure #4 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(*(void *)(v1 + 24), a1);
}

void partial apply for closure #3 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(unsigned char *a1@<X0>, unsigned char *a2@<X8>)
{
  closure #3 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(a1, *(void *)(v2 + 24), a2);
}

uint64_t sub_187EFE314()
{
  if (*(void *)(v0 + 48) >= 3uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 80))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<[Text]?> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[Text]?> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[Text]?> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for _ContiguousArrayStorage<(String, Any)>(255, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Text]?>, (uint64_t (*)(uint64_t))type metadata accessor for [Text]?, MEMORY[0x1E4F41090]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[Text]?> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

void specialized static AccessibilityFocus.move(to:for:)(void *a1, _WORD *a2)
{
  if ((*a2 & 1) == 0) {
    return;
  }
  type metadata accessor for AccessibilityNode();
  uint64_t v3 = swift_dynamicCastClass();
  if (v3)
  {
    char v11 = (char *)v3;
    id v4 = a1;
    long long v5 = v11;
  }
  else
  {
    long long v5 = (char *)objc_msgSend(a1, sel_accessibilityNodeForPlatformElement);
    if (!v5)
    {
LABEL_10:
      uint64_t v12 = a1;
      specialized AccessibilityCoreNotification.post()(a1);
      goto LABEL_11;
    }
  }
  uint64_t v12 = v5;
  long long v6 = (void *)MEMORY[0x18C119DF0](&v5[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);

  if (v6
    || (AccessibilityNode.visibility.getter(&v13), (v13 & 0x20) != 0)
    || (char v7 = &v12[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost],
        !MEMORY[0x18C119DF0](&v12[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost])))
  {

    goto LABEL_10;
  }
  uint64_t v8 = *((void *)v7 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v8 + 200))(ObjectType, v8);
  id v10 = a1;
  specialized AccessibilityCoreNotification.post()(a1, 1);

  swift_unknownObjectRelease();
LABEL_11:
}

void specialized PlatformAccessibilityElementProtocol<>.traverseAncestors(_:)(void *a1, void *a2, unsigned char *a3)
{
  id v14 = a1;
  AccessibilityNode.platformElement.getter();
  if (!v5) {
    id v5 = a2;
  }
  id v6 = v5;

  char v7 = v14;
  if (v6 != v14)
  {
    uint64_t v8 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      if (objc_msgSend(v7, sel_respondsToSelector_, sel_accessibilityContainer, v7))
      {
        if (objc_msgSend(v15, sel_accessibilityContainer))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v17, 0, sizeof(v17));
        }
        _sypSgWObTm_2((uint64_t)v17, (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for Any?, v8);
        if (v19)
        {
          type metadata accessor for NSObject & PlatformAccessibilityElementProtocol(0, (unint64_t *)&lazy cache variable for type metadata for NSObject & PlatformAccessibilityElementProtocol);
          if (swift_dynamicCast())
          {

            id v9 = v16;
            goto LABEL_6;
          }
        }
        else
        {
          _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_1((uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
        }
      }
      self;
      uint64_t v11 = swift_dynamicCastObjCClass();
      if (!v11)
      {
LABEL_18:

        return;
      }
      uint64_t v12 = (void *)v11;
      id v13 = v15;
      id v9 = objc_msgSend(v12, sel_superview);

      if (!v9) {
        return;
      }
LABEL_6:
      swift_getObjectType();
      id v15 = v9;
      BOOL v10 = specialized closure #1 in AccessibilityFocus.Target.match(focusStoreNode:)(v15, a2, a3);
      char v7 = v15;
      if (!v10) {
        goto LABEL_18;
      }
    }
  }
  *a3 = 1;
}

uint64_t specialized static AccessibilityFocus.resolvePlatformFocus()()
{
  if (one-time initialization token for focusSupportingTechnologies != -1) {
LABEL_38:
  }
    swift_once();
  uint64_t v0 = static AccessibilityTechnology.focusSupportingTechnologies;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)specialized Dictionary.init(dictionaryLiteral:)(v1);
  uint64_t v38 = *(void *)(v0 + 16);
  if (!v38)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
  char v34 = (void *)*MEMORY[0x1E4FB2478];
  uint64_t v37 = (void *)*MEMORY[0x1E4FB2480];
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  uint64_t v4 = MEMORY[0x1E4FBC840];
  uint64_t v36 = MEMORY[0x1E4FBC840] + 8;
  id v5 = (unint64_t *)&lazy cache variable for type metadata for AccessibilityFocus.Target?;
  id v6 = &type metadata for AccessibilityFocus.Target;
  uint64_t v33 = v0;
  while (1)
  {
    int v7 = *(unsigned __int8 *)(v0 + v3 + 32);
    uint64_t v8 = v37;
    if (*(unsigned char *)(v0 + v3 + 32))
    {
      if (v7 != 1) {
        goto LABEL_6;
      }
      uint64_t v8 = v34;
    }
    uint64_t v9 = (uint64_t)v6;
    BOOL v10 = v5;
    uint64_t v11 = v8;
    if (UIAccessibilityFocusedElement(v11))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v42, 0, sizeof(v42));
    }
    _sypSgWObTm_2((uint64_t)v42, (uint64_t)v43, (unint64_t *)&lazy cache variable for type metadata for Any?, v36);
    if (v44) {
      break;
    }
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_1((uint64_t)v43, (unint64_t *)&lazy cache variable for type metadata for Any?, v4 + 8);
LABEL_5:

    id v6 = (ValueMetadata *)v9;
LABEL_6:
    if (v38 == ++v3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
  }
  type metadata accessor for NSObject & PlatformAccessibilityElementProtocol(0, (unint64_t *)&lazy cache variable for type metadata for NSObject & PlatformAccessibilityElementProtocol);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v12 = v4;
  id v13 = v2;
  id v14 = v40;
  swift_unknownObjectWeakInit();
  uint64_t v35 = v14;
  swift_unknownObjectWeakAssign();
  outlined init with take of AccessibilityFocus.Target((uint64_t)v42, (uint64_t)v43);
  v43[8] = 0;
  _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_0((uint64_t)v43, (uint64_t)v42, v5, v9);
  if (BYTE8(v42[0]))
  {
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_1((uint64_t)v42, v5, v9);
    uint64_t v2 = v13;
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
    char v17 = v16;
    if (v16)
    {
      unint64_t v18 = v15;
      char v39 = v13;
      uint64_t v4 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v2 = v39;
      }
      outlined init with take of AccessibilityFocus.Target(v2[7] + 8 * v18, (uint64_t)&v40);
      specialized _NativeDictionary._delete(at:)(v18, (uint64_t)v2);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v40 = 0;
      uint64_t v4 = v12;
    }
    BOOL v41 = (v17 & 1) == 0;
    id v5 = v10;
    char v28 = v10;
    id v6 = (ValueMetadata *)v9;
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_1((uint64_t)&v40, v28, v9);
LABEL_33:
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_1((uint64_t)v43, v5, (uint64_t)v6);

    goto LABEL_6;
  }
  outlined init with take of AccessibilityFocus.Target((uint64_t)v42, (uint64_t)&v40);
  uint64_t v2 = v13;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  uint64_t v22 = v2[2];
  BOOL v23 = (v20 & 1) == 0;
  uint64_t v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  char v25 = v20;
  if (v2[3] >= v24)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
    goto LABEL_28;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  if ((v25 & 1) == (v27 & 1))
  {
    unint64_t v21 = v26;
LABEL_28:
    uint64_t v4 = v12;
    if (v25)
    {
      outlined assign with take of AccessibilityFocus.Target((uint64_t)&v40, v2[7] + 8 * v21);
    }
    else
    {
      v2[(v21 >> 6) + 8] |= 1 << v21;
      *(unsigned char *)(v2[6] + v21) = v7;
      outlined init with take of AccessibilityFocus.Target((uint64_t)&v40, v2[7] + 8 * v21);
      uint64_t v29 = v2[2];
      BOOL v30 = __OFADD__(v29, 1);
      uint64_t v31 = v29 + 1;
      if (v30) {
        goto LABEL_37;
      }
      v2[2] = v31;
    }
    swift_bridgeObjectRelease();
    uint64_t v0 = v33;
    id v5 = v10;
    id v6 = (ValueMetadata *)v9;
    goto LABEL_33;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized UILargeContentViewerInteractionBridge.largeContentViewerInteraction(_:didEndOn:at:)(uint64_t a1)
{
  type metadata accessor for _ContiguousArrayStorage<(String, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  id v6 = (char *)&v18 - v5;
  uint64_t v7 = v1 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_activeItem;
  *(void *)(v7 + 32) = 0;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  swift_unknownObjectRelease();
  uint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_simultaneousGesture);
  *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_simultaneousGesture) = 0;

  if (a1)
  {
    uint64_t v9 = (void *)MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host);
    if (v9)
    {
      id v19 = v9;
      type metadata accessor for AccessibilityActionStorage<AccessibilityVoidAction>(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
      BOOL v10 = (void *)swift_dynamicCastClass();
      if (v10)
      {
        uint64_t v11 = (uint64_t)v10 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v10) + 0x60);
        swift_beginAccess();
        outlined init with copy of BarItemView(v11, (uint64_t)v20);
        uint64_t v12 = (void *)MEMORY[0x18C119DF0](&v21);
        outlined destroy of BarItemView((uint64_t)v20);
        if (v12)
        {
          type metadata accessor for UIKitBarButtonItem(0);
          uint64_t v13 = swift_dynamicCastClass();
          if (v13)
          {
            uint64_t v14 = v13 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_platformItem;
            swift_beginAccess();
            outlined init with copy of PlatformItemList.Item?(v14, (uint64_t)v6);
            unint64_t v15 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
            uint64_t v16 = swift_allocObject();
            outlined init with take of PlatformItemList.Item?((uint64_t)v6, v16 + v15);
            static Update.enqueueAction(_:)();

            swift_release();
            return;
          }
        }
      }
      else
      {
        id v17 = v19;
      }
    }
  }
}

uint64_t specialized UILargeContentViewerInteractionBridge.largeContentViewerInteraction(_:itemAt:)(double a1, double a2)
{
  uint64_t v5 = (double *)(v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_activeItem);
  uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_activeItem);
  if (!v6) {
    goto LABEL_5;
  }
  CGFloat v8 = v5[3];
  CGFloat v7 = v5[4];
  CGFloat v10 = v5[1];
  CGFloat v9 = v5[2];
  uint64_t result = MEMORY[0x18C119DF0](v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host);
  if (result)
  {
    uint64_t v12 = (void *)result;
    swift_unknownObjectRetain();
    objc_msgSend(v12, sel_convertPoint_toView_, 0, a1, a2);
    CGFloat v14 = v13;
    CGFloat v16 = v15;

    v27.origin.x = v10;
    v27.origin.y = v9;
    v27.size.width = v8;
    v27.size.height = v7;
    v26.x = v14;
    v26.y = v16;
    if (CGRectContainsPoint(v27, v26)) {
      return v6;
    }
    swift_unknownObjectRelease();
LABEL_5:
    UILargeContentViewerInteractionBridge.hitTest(at:)((uint64_t)v22, a1, a2);
    _sypSgWObTm_2((uint64_t)v22, (uint64_t)&v23, &lazy cache variable for type metadata for UILargeContentViewerInteractionBridge.ActiveItem?, (uint64_t)&unk_1ED463430);
    uint64_t v6 = v23;
    if (v23)
    {
      long long v17 = v24;
      long long v18 = v25;
      if (*(void *)v5)
      {
        id v19 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_simultaneousGesture);
        if (v19)
        {
          long long v20 = v25;
          long long v21 = v24;
          objc_msgSend(v19, sel_reset);
          long long v18 = v20;
          long long v17 = v21;
        }
      }
      *(void *)uint64_t v5 = v6;
      *(_OWORD *)(v5 + 1) = v17;
      *(_OWORD *)(v5 + 3) = v18;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
    }
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t outlined release of AccessibilityLargeContentViewItem(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 24);
  long long v18 = *(void **)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  long long v15 = *(_OWORD *)(a1 + 96);
  long long v16 = *(_OWORD *)(a1 + 80);
  long long v14 = *(_OWORD *)(a1 + 112);
  long long v12 = *(_OWORD *)(a1 + 144);
  long long v13 = *(_OWORD *)(a1 + 128);
  long long v11 = *(_OWORD *)(a1 + 160);
  uint64_t v8 = *(void *)(a1 + 176);
  CGFloat v9 = *(void **)(a1 + 184);
  swift_bridgeObjectRelease();
  outlined consume of Image.Resolved?(v18, v17, v2, v3, v4, v5, v6, v7, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((unint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11,
    *((uint64_t *)&v11 + 1),
    v8,
    v9);
  return a1;
}

void type metadata accessor for AccessibilityActionStorage<AccessibilityVoidAction>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t outlined init with copy of PlatformItemList.Item?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ContiguousArrayStorage<(String, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_187EFF240()
{
  type metadata accessor for _ContiguousArrayStorage<(String, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  uint64_t v3 = type metadata accessor for PlatformItemList.Item();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3)) {
    goto LABEL_32;
  }

  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = *(void *)(v2 + 184);
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    int v6 = *(unsigned __int8 *)(v2 + 72);
    if (v6 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(v2 + 64), v6);
      uint64_t v4 = *(void *)(v2 + 184);
      unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v5 != 0x1FFFFFFFELL) {
      outlined consume of AccessibilityImageLabel(*(void *)(v2 + 168), *(void *)(v2 + 176), v4);
    }
    swift_unknownObjectRelease();
    swift_release();
  }
  if (*(void *)(v2 + 256))
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void **)(v2 + 264);
    if ((unint64_t)v7 >= 2) {

    }
    swift_release();
    swift_release();
  }
  unint64_t v8 = *(void *)(v2 + 328);
  if (v8 >> 2 != 0xFFFFFFFF) {
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v2 + 296), *(void *)(v2 + 304), *(void *)(v2 + 312), *(void *)(v2 + 320), v8, *(void *)(v2 + 336), *(void *)(v2 + 344), *(void *)(v2 + 352), *(void *)(v2 + 360), *(void *)(v2 + 368), *(void *)(v2 + 376), *(void *)(v2 + 384), *(void *)(v2 + 392));
  }
  uint64_t v9 = *(void *)(v2 + 408);
  if (!v9) {
    goto LABEL_17;
  }
  if (v9 != 1)
  {
    swift_release();
LABEL_17:
    if (*(void *)(v2 + 424)) {
      swift_release();
    }
    if (*(void *)(v2 + 440)) {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v2 + 504)) {
    swift_release();
  }
  if (*(void *)(v2 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(void *)(v2 + 552) != 1)
  {
    swift_release();
    if (*(void *)(v2 + 560)) {
      swift_release();
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v2 + *(int *)(v3 + 112);
  uint64_t v11 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    uint64_t v12 = v10 + *(int *)(v11 + 20);
    outlined consume of Text.Storage(*(void *)v12, *(void *)(v12 + 8), *(unsigned char *)(v12 + 16));
    swift_bridgeObjectRelease();
    uint64_t v13 = v12 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v14 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
    if (*(void *)(v10 + *(int *)(v11 + 24))) {
      swift_release();
    }
  }
  swift_release();
LABEL_32:

  return swift_deallocObject();
}

void partial apply for closure #1 in UIKitBarButtonItem.performAction(_:)()
{
  type metadata accessor for _ContiguousArrayStorage<(String, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));

  closure #1 in UIKitBarButtonItem.performAction(_:)(v2);
}

uint64_t outlined consume of AccessibilityLinkRotorSearchParameters?(uint64_t result)
{
  if (result != 1) {
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_187EFF678()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in AccessibilityLinkRotorBridge.update()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized closure #1 in AccessibilityLinkRotorBridge.update()(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t sub_187EFF6C0()
{
  return swift_deallocObject();
}

id partial apply for closure #2 in AccessibilityRotorInfo.resolve(in:for:)(void *a1)
{
  return closure #1 in AccessibilityRotorInfo.resolve(in:for:)(a1, *(void *)(v1 + 16), (_OWORD *)(v1 + 24));
}

uint64_t objectdestroy_71Tm()
{
  swift_release();
  outlined consume of Text.Suffix.Storage(v0[3], v0[4], v0[5]);

  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for AccessibilityProperties.UIKitBridgedInteractionKey()
{
  return &type metadata for AccessibilityProperties.UIKitBridgedInteractionKey;
}

ValueMetadata *type metadata accessor for UIKitAccessibilityPropertyApplicator()
{
  return &type metadata for UIKitAccessibilityPropertyApplicator;
}

uint64_t initializeWithCopy for AccessibilityCore.Notification.Info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    *(void *)(a1 + 24) = v3;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilityCore.Notification.Info(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      *(void *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t assignWithTake for AccessibilityCore.Notification.Info(uint64_t a1, _OWORD *a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  long long v4 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v4;
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityCore.Notification.Info()
{
  return &type metadata for AccessibilityCore.Notification.Info;
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.UIKitBridgedInteractionKey and conformance AccessibilityProperties.UIKitBridgedInteractionKey()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProperties.UIKitBridgedInteractionKey and conformance AccessibilityProperties.UIKitBridgedInteractionKey;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.UIKitBridgedInteractionKey and conformance AccessibilityProperties.UIKitBridgedInteractionKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.UIKitBridgedInteractionKey and conformance AccessibilityProperties.UIKitBridgedInteractionKey);
  }
  return result;
}

void type metadata accessor for AccessibilityUIKitTraits?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined assign with take of AccessibilityFocus.Target(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t type metadata accessor for NSObject & PlatformAccessibilityElementProtocol(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityRole.Resolved()
{
  return &type metadata for AccessibilityRole.Resolved;
}

uint64_t type metadata accessor for PencilEventsResponder()
{
  uint64_t result = type metadata singleton initialization cache for PencilEventsResponder;
  if (!type metadata singleton initialization cache for PencilEventsResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for PencilEventsResponder()
{
  return swift_initClassMetadata2();
}

Swift::Void __swiftcall PencilEventsResponder.extendPrintTree(string:)(Swift::String *string)
{
  v1._countAndFlagsBits = 0x76456C69636E6570;
  v1._object = (void *)0xEC00000073746E65;
  String.append(_:)(v1);
}

uint64_t PencilEventsResponder.__allocating_init(inputs:)()
{
  return PencilEventsResponder.init(inputs:)();
}

uint64_t PencilEventsResponder.init(inputs:)()
{
  *(void *)(v0 + 216) = 0;
  *(void *)(v0 + 224) = 0;
  swift_retain();
  static CGSize.invalidValue.getter();
  *(void *)(v0 + 232) = v1;
  *(void *)(v0 + 240) = v2;
  ViewTransform.init()();
  *(_OWORD *)(v0 + 288) = 0u;
  *(_OWORD *)(v0 + 304) = 0u;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t PencilEventsResponder.__allocating_init(inputs:viewSubgraph:)()
{
  return PencilEventsResponder.init(inputs:viewSubgraph:)();
}

uint64_t PencilEventsResponder.init(inputs:viewSubgraph:)()
{
  *(void *)(v0 + 216) = 0;
  *(void *)(v0 + 224) = 0;
  swift_retain();
  static CGSize.invalidValue.getter();
  *(void *)(v0 + 232) = v1;
  *(void *)(v0 + 240) = v2;
  ViewTransform.init()();
  *(_OWORD *)(v0 + 288) = 0u;
  *(_OWORD *)(v0 + 304) = 0u;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t PencilEventsResponder.__ivar_destroyer()
{
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)(v0 + 288));
  uint64_t v1 = *(void *)(v0 + 304);

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

uint64_t PencilEventsResponder.__deallocating_deinit()
{
  uint64_t v0 = DefaultLayoutViewResponder.deinit();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)(v0 + 288));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)(v0 + 304));

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PencilEventsResponder()
{
  return type metadata accessor for PencilEventsResponder();
}

uint64_t destroy for PencilDoubleTapEvent()
{
  return swift_release();
}

uint64_t initializeWithCopy for PencilDoubleTapEvent(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PencilDoubleTapEvent(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PencilDoubleTapEvent(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilDoubleTapEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 88);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilDoubleTapEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 88) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilDoubleTapEvent()
{
  return &type metadata for PencilDoubleTapEvent;
}

uint64_t destroy for PencilSqueezeEvent()
{
  return swift_release();
}

uint64_t initializeWithCopy for PencilSqueezeEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v3 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PencilSqueezeEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  long long v3 = *(_OWORD *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 40);
  long long v5 = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  uint64_t v6 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PencilSqueezeEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilSqueezeEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 104);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilSqueezeEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 0;
    }
    if (a2) {
      *(void *)(result + 104) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilSqueezeEvent()
{
  return &type metadata for PencilSqueezeEvent;
}

ValueMetadata *type metadata accessor for PencilSqueezeEventDispatcher()
{
  return &type metadata for PencilSqueezeEventDispatcher;
}

ValueMetadata *type metadata accessor for PencilDoubleTapEventDispatcher()
{
  return &type metadata for PencilDoubleTapEventDispatcher;
}

unint64_t instantiation function for generic protocol witness table for PencilDoubleTapEventDispatcher(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for PencilSqueezeEventDispatcher(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for PencilSqueezeEvent(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PencilSqueezeEvent and conformance PencilSqueezeEvent();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for PencilDoubleTapEvent(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t closure #1 in PencilEventsDispatcher.receiveEvents(_:manager:)@<X0>(void *a1@<X1>, unsigned char *a2@<X8>)
{
  type metadata accessor for PencilEventsResponder();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v5 = swift_retain();
    MEMORY[0x18C115B40](v5);
    if (*(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    uint64_t result = specialized Array._endMutation()();
  }
  *a2 = 0;
  return result;
}

void protocol witness for EventType.phase.getter in conformance PencilDoubleTapEvent(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 80);
}

double protocol witness for EventType.timestamp.getter in conformance PencilDoubleTapEvent@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 72);
  *a1 = result;
  return result;
}

uint64_t protocol witness for EventType.binding.getter in conformance PencilDoubleTapEvent@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 88);
  return swift_retain();
}

uint64_t protocol witness for EventType.binding.setter in conformance PencilDoubleTapEvent(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 88) = v2;
  return result;
}

uint64_t (*protocol witness for EventType.binding.modify in conformance PencilDoubleTapEvent())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double protocol witness for EventType.init(_:) in conformance PencilDoubleTapEvent@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
  if (swift_dynamicCast())
  {
    double result = v8;
    *(_OWORD *)a1 = v3;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v5;
    *(_OWORD *)(a1 + 48) = v6;
    *(unsigned char *)(a1 + 64) = v7 & 1;
    *(double *)(a1 + 72) = v8;
    *(unsigned char *)(a1 + 80) = v9;
    *(void *)(a1 + 88) = v10;
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 1;
  }
  return result;
}

double protocol witness for EventType.timestamp.getter in conformance PencilSqueezeEvent@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 96);
  *a1 = result;
  return result;
}

uint64_t protocol witness for EventType.binding.getter in conformance PencilSqueezeEvent@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 104);
  return swift_retain();
}

uint64_t protocol witness for EventType.binding.setter in conformance PencilSqueezeEvent(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 104) = v2;
  return result;
}

uint64_t (*protocol witness for EventType.binding.modify in conformance PencilSqueezeEvent())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double protocol witness for EventType.init(_:) in conformance PencilSqueezeEvent@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
  if (swift_dynamicCast())
  {
    double result = v11;
    *(unsigned char *)a1 = v3;
    *(_OWORD *)(a1 + 8) = v4;
    *(_OWORD *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 40) = v6;
    *(_OWORD *)(a1 + 56) = v7;
    *(unsigned char *)(a1 + 72) = v8 & 1;
    *(void *)(a1 + 80) = v9;
    *(unsigned char *)(a1 + 88) = v10 & 1;
    *(double *)(a1 + 96) = v11;
    *(void *)(a1 + 104) = v12;
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 1;
  }
  return result;
}

unsigned char *specialized PencilEventsDispatcher.receiveEvents(_:manager:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  if (!MEMORY[0x18C119DF0](v4)) {
    return (unsigned char *)MEMORY[0x1E4FBC870];
  }
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
  uint64_t v8 = swift_unknownObjectRelease();
  uint64_t v9 = (unsigned char *)MEMORY[0x1E4FBC870];
  if (v7)
  {
    unint64_t v120 = MEMORY[0x1E4FBC860];
    MEMORY[0x1F4188790](v8);
    dispatch thunk of ResponderNode.visit(applying:)();
    uint64_t v10 = v120;
    uint64_t v74 = a1;
    if (v120 >> 62)
    {
LABEL_78:
      swift_bridgeObjectRetain();
      uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v64)
      {
        uint64_t v119 = v9;
        swift_bridgeObjectRetain();
        uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
        if (!v65)
        {
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_75;
        }
        uint64_t v11 = v65;
        a1 = v74;
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v11 = *(void *)((v120 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v11)
      {
        uint64_t v119 = v9;
        swift_bridgeObjectRetain();
LABEL_6:
        uint64_t v76 = a1 + 64;
        unint64_t v69 = v10 & 0xC000000000000001;
        uint64_t v67 = v10 + 32;
        uint64_t v68 = v10 & 0xFFFFFFFFFFFFFF8;
        uint64_t v9 = v115;
        uint64_t v12 = v11;
        while (1)
        {
          BOOL v13 = __OFSUB__(v12, 1);
          unint64_t v14 = v12 - 1;
          if (v13)
          {
LABEL_73:
            __break(1u);
LABEL_74:
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v9 = v119;
LABEL_75:
            swift_bridgeObjectRelease();
            return v9;
          }
          uint64_t v70 = v14;
          if (v69)
          {
            uint64_t v75 = MEMORY[0x18C117680]();
          }
          else
          {
            if ((v14 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_77:
              __break(1u);
              goto LABEL_78;
            }
            if (v14 >= *(void *)(v68 + 16)) {
              goto LABEL_77;
            }
            uint64_t v75 = *(void *)(v67 + 8 * v14);
            swift_retain();
          }
          uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
          if (v15 < 64) {
            uint64_t v16 = ~(-1 << v15);
          }
          else {
            uint64_t v16 = -1;
          }
          unint64_t v17 = v16 & *(void *)(a1 + 64);
          int64_t v77 = (unint64_t)(v15 + 63) >> 6;
          swift_bridgeObjectRetain();
          int64_t v18 = 0;
          while (v17)
          {
            unint64_t v19 = __clz(__rbit64(v17));
            v17 &= v17 - 1;
            unint64_t v20 = v19 | (v18 << 6);
LABEL_38:
            uint64_t v24 = *(void *)(a1 + 56);
            long long v25 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v20);
            uint64_t v10 = v25[1];
            uint64_t v116 = *v25;
            uint64_t v26 = v116;
            uint64_t v117 = v10;
            outlined init with copy of TableColumnList(v24 + 40 * v20, (uint64_t)v118);
            uint64_t v113 = v26;
            uint64_t v114 = v10;
            outlined init with take of OptionalBinaryInteger(v118, (uint64_t)v115);
            type metadata accessor for (key: EventID, value: EventType)();
            type metadata accessor for (EventID, PencilDoubleTapEvent)(0, &lazy cache variable for type metadata for (EventID, PencilDoubleTapEvent));
            if (swift_dynamicCast())
            {
              Swift::UInt v78 = v103[6];
              Swift::UInt v79 = v103[5];
              long long v81 = v105;
              long long v84 = v104;
              long long v80 = v106;
              uint64_t v27 = v107;
              uint64_t v10 = v108;
              char v28 = v109;
              uint64_t v29 = v110;
              char v30 = v111;
              uint64_t v31 = v112;
              v103[3] = &type metadata for PencilDoubleTapEvent;
              v103[4] = lazy protocol witness table accessor for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent();
              uint64_t v32 = swift_allocObject();
              v103[0] = v32;
              *(_OWORD *)(v32 + 16) = v84;
              *(_OWORD *)(v32 + 32) = v81;
              *(_OWORD *)(v32 + 48) = v80;
              *(void *)(v32 + 64) = v27;
              *(void *)(v32 + 72) = v10;
              *(unsigned char *)(v32 + 80) = v28;
              *(void *)(v32 + 88) = v29;
              *(unsigned char *)(v32 + 96) = v30;
              *(void *)(v32 + 104) = v31;
              outlined init with copy of TableColumnList((uint64_t)v103, (uint64_t)&v87);
              type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for PencilEvent);
              swift_retain();
              if (swift_dynamicCast())
              {
                uint64_t v33 = v75;
                char v34 = *(void (**)(unsigned char *))(v75 + 288);
                if (v34)
                {
                  if (v97[64])
                  {
                    swift_retain();
                    long long v35 = 0uLL;
                    uint64_t v10 = 1;
                    uint64_t v36 = 0;
                    goto LABEL_59;
                  }
                  long long v83 = *(_OWORD *)&v97[48];
                  long long v86 = *(_OWORD *)&v97[32];
                  *(void *)uint64_t v97 = 0;
                  swift_retain();
                  uint64_t v10 = 1;
                  LOBYTE(v87) = 1;
                  uint64_t v36 = 0;
                  uint64_t v45 = ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)();
                  swift_release();
                  if (v45)
                  {
                    *(void *)uint64_t v97 = *(void *)(v75 + 248);
                    long long v46 = *(_OWORD *)(v75 + 272);
                    *(_OWORD *)&v97[8] = *(_OWORD *)(v75 + 256);
                    *(_OWORD *)&v97[24] = v46;
                    ViewTransform.withPosition(_:)();
                    uint64_t v91 = v94;
                    long long v92 = v95;
                    long long v93 = v96;
                    uint64_t v87 = 1;
                    long long v88 = 0u;
                    long long v89 = 0u;
                    char v90 = 2;
                    memset(v97, 0, 40);
                    v97[40] = 2;
                    outlined init with copy of CoordinateSpace((uint64_t)&v87, (uint64_t)&v97[48]);
                    char v101 = 4;
                    outlined destroy of CoordinateSpace((uint64_t)&v87);
                    ViewTransform.convert(_:point:)();
                    uint64_t v36 = v47;
                    uint64_t v49 = v48;
                    outlined destroy of ViewTransform.Conversion((uint64_t)v97);
                    swift_release();
                    UnitPoint.init(_:in:)();
                    uint64_t v10 = 0;
                    long long v52 = v83;
                    long long v35 = v86;
                  }
                  else
                  {
                    long long v35 = 0uLL;
LABEL_59:
                    uint64_t v49 = 0;
                    uint64_t v50 = 0;
                    uint64_t v51 = 0;
                    long long v52 = 0uLL;
                  }
                  *(void *)uint64_t v97 = v36;
                  *(void *)&v97[8] = v49;
                  *(void *)&v97[16] = v50;
                  *(void *)&v97[24] = v51;
                  *(_OWORD *)&v97[32] = v35;
                  *(_OWORD *)&v97[48] = v52;
                  v97[64] = v10;
                  v34(v97);
                  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v34);
                  goto LABEL_67;
                }
                swift_release();
              }
              else
              {
                uint64_t v33 = v75;
              }
              outlined init with copy of TableColumnList((uint64_t)v103, (uint64_t)&v87);
              if (swift_dynamicCast())
              {
                uint64_t v10 = v102;
                uint64_t v37 = *(void (**)(unsigned char *))(v33 + 304);
                if (!v37)
                {
                  swift_release();
                  goto LABEL_19;
                }
                if (v97[0] < 2u)
                {
                  char v82 = v100;
                  uint64_t v85 = v99;
                  if (v98)
                  {
                    swift_retain();
                    char v38 = 0;
                    long long v39 = 0uLL;
                    uint64_t v40 = 0;
                    uint64_t v41 = 0;
                    uint64_t v42 = 0;
                    uint64_t v43 = 0;
                    uint64_t v44 = 1;
                    goto LABEL_56;
                  }
                  long long v72 = *(_OWORD *)&v97[56];
                  long long v73 = *(_OWORD *)&v97[40];
                  uint64_t v71 = v102;
                  *(void *)uint64_t v97 = 0;
                  swift_retain();
                  LOBYTE(v87) = 1;
                  uint64_t v40 = 0;
                  uint64_t v53 = ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)();
                  swift_release();
                  if (v53)
                  {
                    *(void *)uint64_t v97 = *(void *)(v33 + 248);
                    long long v54 = *(_OWORD *)(v33 + 272);
                    *(_OWORD *)&v97[8] = *(_OWORD *)(v33 + 256);
                    *(_OWORD *)&v97[24] = v54;
                    ViewTransform.withPosition(_:)();
                    uint64_t v91 = v94;
                    long long v92 = v95;
                    long long v93 = v96;
                    uint64_t v87 = 1;
                    long long v88 = 0u;
                    long long v89 = 0u;
                    char v90 = 2;
                    memset(v97, 0, 40);
                    v97[40] = 2;
                    outlined init with copy of CoordinateSpace((uint64_t)&v87, (uint64_t)&v97[48]);
                    char v101 = 4;
                    outlined destroy of CoordinateSpace((uint64_t)&v87);
                    ViewTransform.convert(_:point:)();
                    uint64_t v40 = v55;
                    uint64_t v41 = v56;
                    outlined destroy of ViewTransform.Conversion((uint64_t)v97);
                    swift_release();
                    UnitPoint.init(_:in:)();
                    uint64_t v44 = 0;
                    char v38 = 0;
                    uint64_t v10 = v71;
LABEL_65:
                    uint64_t v57 = v85;
                    char v58 = v82;
                    long long v59 = v72;
                    long long v39 = v73;
                    goto LABEL_66;
                  }
                  char v38 = 0;
                  long long v39 = 0uLL;
                  uint64_t v41 = 0;
                  uint64_t v42 = 0;
                  uint64_t v43 = 0;
                  uint64_t v44 = 1;
                  long long v59 = 0uLL;
                  uint64_t v10 = v71;
LABEL_57:
                  uint64_t v57 = v85;
                  char v58 = v82;
                  goto LABEL_66;
                }
                if (v97[0] == 2)
                {
                  char v82 = v100;
                  uint64_t v85 = v99;
                  if (v98)
                  {
                    swift_retain();
                    long long v39 = 0uLL;
                    uint64_t v44 = 1;
                    uint64_t v40 = 0;
                    uint64_t v41 = 0;
                    uint64_t v42 = 0;
                    uint64_t v43 = 0;
                    char v38 = 1;
LABEL_56:
                    long long v59 = 0uLL;
                  }
                  else
                  {
                    long long v72 = *(_OWORD *)&v97[56];
                    long long v73 = *(_OWORD *)&v97[40];
                    *(void *)uint64_t v97 = 0;
                    swift_retain();
                    uint64_t v44 = 1;
                    LOBYTE(v87) = 1;
                    uint64_t v40 = 0;
                    uint64_t v60 = ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)();
                    swift_release();
                    if (v60)
                    {
                      *(void *)uint64_t v97 = *(void *)(v33 + 248);
                      long long v61 = *(_OWORD *)(v33 + 272);
                      *(_OWORD *)&v97[8] = *(_OWORD *)(v33 + 256);
                      *(_OWORD *)&v97[24] = v61;
                      ViewTransform.withPosition(_:)();
                      uint64_t v91 = v94;
                      long long v92 = v95;
                      long long v93 = v96;
                      char v38 = 1;
                      uint64_t v87 = 1;
                      long long v88 = 0u;
                      long long v89 = 0u;
                      char v90 = 2;
                      memset(v97, 0, 40);
                      v97[40] = 2;
                      outlined init with copy of CoordinateSpace((uint64_t)&v87, (uint64_t)&v97[48]);
                      char v101 = 4;
                      outlined destroy of CoordinateSpace((uint64_t)&v87);
                      ViewTransform.convert(_:point:)();
                      uint64_t v40 = v62;
                      uint64_t v41 = v63;
                      outlined destroy of ViewTransform.Conversion((uint64_t)v97);
                      swift_release();
                      UnitPoint.init(_:in:)();
                      uint64_t v44 = 0;
                      goto LABEL_65;
                    }
                    long long v39 = 0uLL;
                    uint64_t v41 = 0;
                    uint64_t v42 = 0;
                    uint64_t v43 = 0;
                    char v38 = 1;
                    long long v59 = 0uLL;
                  }
                  goto LABEL_57;
                }
                swift_retain();
                uint64_t v44 = 0;
                uint64_t v57 = 0;
                char v58 = 0;
                long long v39 = 0uLL;
                char v38 = 2;
                uint64_t v40 = 0;
                uint64_t v41 = 0;
                uint64_t v42 = 0;
                uint64_t v43 = 0;
                long long v59 = 0uLL;
LABEL_66:
                *(void *)uint64_t v97 = v40;
                *(void *)&v97[8] = v41;
                *(void *)&v97[16] = v42;
                *(void *)&v97[24] = v43;
                *(_OWORD *)&v97[32] = v39;
                *(_OWORD *)&v97[48] = v59;
                *(void *)&v97[64] = v44;
                uint64_t v98 = v57;
                LOBYTE(v99) = v58;
                BYTE1(v99) = v38;
                v37(v97);
                outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v37);
LABEL_67:
                swift_release();
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v103);
                swift_release();
                specialized Set._Variant.insert(_:)((Swift::UInt *)v97, v79, v78);
                a1 = v74;
                uint64_t v9 = v115;
              }
              else
              {
LABEL_19:
                uint64_t v9 = v115;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v103);
                swift_release();
              }
            }
          }
          int64_t v21 = v18 + 1;
          if (__OFADD__(v18, 1))
          {
            __break(1u);
LABEL_72:
            __break(1u);
            goto LABEL_73;
          }
          if (v21 >= v77) {
            goto LABEL_7;
          }
          unint64_t v22 = *(void *)(v76 + 8 * v21);
          ++v18;
          if (v22) {
            goto LABEL_37;
          }
          int64_t v18 = v21 + 1;
          if (v21 + 1 >= v77) {
            goto LABEL_7;
          }
          unint64_t v22 = *(void *)(v76 + 8 * v18);
          if (v22) {
            goto LABEL_37;
          }
          int64_t v18 = v21 + 2;
          if (v21 + 2 >= v77) {
            goto LABEL_7;
          }
          unint64_t v22 = *(void *)(v76 + 8 * v18);
          if (v22) {
            goto LABEL_37;
          }
          int64_t v18 = v21 + 3;
          if (v21 + 3 >= v77) {
            goto LABEL_7;
          }
          unint64_t v22 = *(void *)(v76 + 8 * v18);
          if (v22) {
            goto LABEL_37;
          }
          int64_t v23 = v21 + 4;
          if (v23 < v77) {
            break;
          }
LABEL_7:
          swift_release();
          swift_release();
          uint64_t v12 = v70;
          if (!v70) {
            goto LABEL_74;
          }
        }
        unint64_t v22 = *(void *)(v76 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            int64_t v18 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_72;
            }
            if (v18 >= v77) {
              goto LABEL_7;
            }
            unint64_t v22 = *(void *)(v76 + 8 * v18);
            ++v23;
            if (v22) {
              goto LABEL_37;
            }
          }
        }
        int64_t v18 = v23;
LABEL_37:
        unint64_t v17 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v18 << 6);
        goto LABEL_38;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v9;
}

uint64_t partial apply for closure #1 in PencilEventsDispatcher.receiveEvents(_:manager:)@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in PencilEventsDispatcher.receiveEvents(_:manager:)(*(void **)(v1 + 16), a1);
}

uint64_t sub_187F0128C()
{
  swift_release();

  return swift_deallocObject();
}

long long *specialized PencilEventsDispatcher.receiveEvents(_:manager:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  if (!MEMORY[0x18C119DF0](v4)) {
    return (long long *)MEMORY[0x1E4FBC870];
  }
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
  uint64_t v8 = swift_unknownObjectRelease();
  uint64_t v9 = (long long *)MEMORY[0x1E4FBC870];
  if (v7)
  {
    unint64_t v127 = MEMORY[0x1E4FBC860];
    MEMORY[0x1F4188790](v8);
    dispatch thunk of ResponderNode.visit(applying:)();
    unint64_t v75 = v127;
    if (v127 >> 62)
    {
LABEL_77:
      swift_bridgeObjectRetain();
      uint64_t v70 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v70)
      {
        long long v126 = v9;
        unint64_t v11 = v75;
        swift_bridgeObjectRetain();
        uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
        if (!v71)
        {
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_74;
        }
        uint64_t v10 = v71;
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v10 = *(void *)((v127 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v10)
      {
        long long v126 = v9;
        unint64_t v11 = v127;
        swift_bridgeObjectRetain();
LABEL_6:
        uint64_t v83 = a1 + 64;
        unint64_t v76 = v11 & 0xC000000000000001;
        unint64_t v73 = v11 + 32;
        uint64_t v74 = v11 & 0xFFFFFFFFFFFFFF8;
        uint64_t v9 = v125;
        unint64_t v12 = v11;
        while (1)
        {
          BOOL v13 = __OFSUB__(v10, 1);
          unint64_t v14 = v10 - 1;
          if (v13)
          {
LABEL_72:
            __break(1u);
LABEL_73:
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v9 = v126;
LABEL_74:
            swift_bridgeObjectRelease();
            return v9;
          }
          uint64_t v77 = v14;
          if (v76)
          {
            uint64_t v82 = MEMORY[0x18C117680](v14, v12);
          }
          else
          {
            if ((v14 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_76:
              __break(1u);
              goto LABEL_77;
            }
            if (v14 >= *(void *)(v74 + 16)) {
              goto LABEL_76;
            }
            uint64_t v82 = *(void *)(v73 + 8 * v14);
            swift_retain();
          }
          uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
          if (v15 < 64) {
            uint64_t v16 = ~(-1 << v15);
          }
          else {
            uint64_t v16 = -1;
          }
          unint64_t v17 = v16 & *(void *)(a1 + 64);
          int64_t v84 = (unint64_t)(v15 + 63) >> 6;
          swift_bridgeObjectRetain();
          int64_t v18 = 0;
          while (v17)
          {
            unint64_t v22 = __clz(__rbit64(v17));
            v17 &= v17 - 1;
            unint64_t v23 = v22 | (v18 << 6);
LABEL_38:
            uint64_t v27 = *(void *)(a1 + 56);
            char v28 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v23);
            uint64_t v30 = v28[1];
            uint64_t v123 = *v28;
            uint64_t v29 = v123;
            uint64_t v124 = v30;
            outlined init with copy of TableColumnList(v27 + 40 * v23, (uint64_t)v125);
            uint64_t v120 = v29;
            uint64_t v121 = v30;
            outlined init with take of OptionalBinaryInteger(v125, (uint64_t)&v122);
            type metadata accessor for (key: EventID, value: EventType)();
            type metadata accessor for (EventID, PencilDoubleTapEvent)(0, &lazy cache variable for type metadata for (EventID, PencilSqueezeEvent));
            if (swift_dynamicCast())
            {
              unint64_t v31 = v17;
              int64_t v92 = v18;
              uint64_t v32 = a1;
              Swift::UInt v85 = v108[6];
              Swift::UInt v86 = v108[5];
              char v33 = v109;
              long long v90 = v111;
              long long v91 = v110;
              long long v87 = v112;
              uint64_t v34 = v113;
              uint64_t v35 = v114;
              char v36 = v115;
              uint64_t v37 = v116;
              char v38 = v117;
              uint64_t v39 = v118;
              uint64_t v40 = v119;
              v108[3] = &type metadata for PencilSqueezeEvent;
              v108[4] = lazy protocol witness table accessor for type PencilSqueezeEvent and conformance PencilSqueezeEvent();
              uint64_t v41 = swift_allocObject();
              v108[0] = v41;
              *(unsigned char *)(v41 + 16) = v33;
              *(_OWORD *)(v41 + 24) = v91;
              *(_OWORD *)(v41 + 40) = v90;
              *(_OWORD *)(v41 + 56) = v87;
              *(void *)(v41 + 72) = v34;
              *(void *)(v41 + 80) = v35;
              *(unsigned char *)(v41 + 88) = v36;
              *(void *)(v41 + 96) = v37;
              *(unsigned char *)(v41 + 104) = v38;
              *(void *)(v41 + 112) = v39;
              *(void *)(v41 + 120) = v40;
              outlined init with copy of TableColumnList((uint64_t)v108, (uint64_t)&v93);
              type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for PencilEvent);
              swift_retain();
              if (!swift_dynamicCast()) {
                goto LABEL_44;
              }
              uint64_t v42 = *(void (**)(unsigned char *))(v82 + 288);
              if (v42)
              {
                a1 = v32;
                unint64_t v17 = v31;
                if (v103[64])
                {
                  swift_retain();
                  long long v43 = 0uLL;
                  char v44 = 1;
                  uint64_t v45 = 0;
                  uint64_t v46 = 0;
                  uint64_t v47 = 0;
                  uint64_t v48 = 0;
                  long long v49 = 0uLL;
                }
                else
                {
                  long long v89 = *(_OWORD *)&v103[32];
                  long long v81 = *(_OWORD *)&v103[48];
                  *(void *)unint64_t v103 = 0;
                  swift_retain();
                  char v44 = 1;
                  LOBYTE(v93) = 1;
                  uint64_t v45 = 0;
                  uint64_t v58 = ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)();
                  swift_release();
                  if (v58)
                  {
                    *(void *)unint64_t v103 = *(void *)(v82 + 248);
                    long long v59 = *(_OWORD *)(v82 + 272);
                    *(_OWORD *)&v103[8] = *(_OWORD *)(v82 + 256);
                    *(_OWORD *)&v103[24] = v59;
                    ViewTransform.withPosition(_:)();
                    uint64_t v97 = v100;
                    long long v98 = v101;
                    long long v99 = v102;
                    uint64_t v93 = 1;
                    long long v94 = 0u;
                    long long v95 = 0u;
                    char v96 = 2;
                    memset(v103, 0, 40);
                    v103[40] = 2;
                    outlined init with copy of CoordinateSpace((uint64_t)&v93, (uint64_t)&v103[48]);
                    char v107 = 4;
                    outlined destroy of CoordinateSpace((uint64_t)&v93);
                    ViewTransform.convert(_:point:)();
                    uint64_t v45 = v60;
                    uint64_t v46 = v61;
                    outlined destroy of ViewTransform.Conversion((uint64_t)v103);
                    swift_release();
                    UnitPoint.init(_:in:)();
                    char v44 = 0;
                    long long v43 = v89;
                    long long v49 = v81;
                  }
                  else
                  {
                    long long v43 = 0uLL;
                    uint64_t v46 = 0;
                    uint64_t v47 = 0;
                    uint64_t v48 = 0;
                    long long v49 = 0uLL;
                  }
                }
                *(void *)unint64_t v103 = v45;
                *(void *)&v103[8] = v46;
                *(void *)&v103[16] = v47;
                *(void *)&v103[24] = v48;
                *(_OWORD *)&v103[32] = v43;
                *(_OWORD *)&v103[48] = v49;
                v103[64] = v44;
                v42(v103);
                outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v42);
                swift_release();
LABEL_19:
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v108);
                swift_release();
                specialized Set._Variant.insert(_:)((Swift::UInt *)v103, v86, v85);
                uint64_t v9 = v125;
                int64_t v18 = v92;
              }
              else
              {
                swift_release();
LABEL_44:
                a1 = v32;
                unint64_t v17 = v31;
                outlined init with copy of TableColumnList((uint64_t)v108, (uint64_t)&v93);
                int64_t v18 = v92;
                if (swift_dynamicCast())
                {
                  uint64_t v50 = *(void (**)(unsigned char *))(v82 + 304);
                  if (v50)
                  {
                    if (v103[0] >= 2u)
                    {
                      if (v103[0] == 2)
                      {
                        char v80 = v106;
                        uint64_t v88 = v105;
                        if (v104)
                        {
                          swift_retain();
                          long long v52 = 0uLL;
                          uint64_t v57 = 1;
                          uint64_t v53 = 0;
                          uint64_t v54 = 0;
                          uint64_t v55 = 0;
                          uint64_t v56 = 0;
                          char v51 = 1;
LABEL_58:
                          long long v21 = 0uLL;
                          goto LABEL_59;
                        }
                        long long v78 = *(_OWORD *)&v103[56];
                        long long v79 = *(_OWORD *)&v103[40];
                        *(void *)unint64_t v103 = 0;
                        swift_retain();
                        uint64_t v57 = 1;
                        LOBYTE(v93) = 1;
                        uint64_t v53 = 0;
                        uint64_t v66 = ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)();
                        swift_release();
                        if (!v66)
                        {
                          long long v52 = 0uLL;
                          uint64_t v54 = 0;
                          uint64_t v55 = 0;
                          uint64_t v56 = 0;
                          char v51 = 1;
                          long long v21 = 0uLL;
                          goto LABEL_59;
                        }
                        *(void *)unint64_t v103 = *(void *)(v82 + 248);
                        long long v67 = *(_OWORD *)(v82 + 272);
                        *(_OWORD *)&v103[8] = *(_OWORD *)(v82 + 256);
                        *(_OWORD *)&v103[24] = v67;
                        ViewTransform.withPosition(_:)();
                        uint64_t v97 = v100;
                        long long v98 = v101;
                        long long v99 = v102;
                        char v51 = 1;
                        uint64_t v93 = 1;
                        long long v94 = 0u;
                        long long v95 = 0u;
                        char v96 = 2;
                        memset(v103, 0, 40);
                        v103[40] = 2;
                        outlined init with copy of CoordinateSpace((uint64_t)&v93, (uint64_t)&v103[48]);
                        char v107 = 4;
                        outlined destroy of CoordinateSpace((uint64_t)&v93);
                        ViewTransform.convert(_:point:)();
                        uint64_t v53 = v68;
                        uint64_t v54 = v69;
                        outlined destroy of ViewTransform.Conversion((uint64_t)v103);
                        swift_release();
                        UnitPoint.init(_:in:)();
                        uint64_t v57 = 0;
LABEL_66:
                        uint64_t v19 = v88;
                        char v20 = v80;
                        long long v21 = v78;
                        long long v52 = v79;
                      }
                      else
                      {
                        swift_retain();
                        uint64_t v57 = 0;
                        uint64_t v19 = 0;
                        char v20 = 0;
                        long long v52 = 0uLL;
                        char v51 = 2;
                        uint64_t v53 = 0;
                        uint64_t v54 = 0;
                        uint64_t v55 = 0;
                        uint64_t v56 = 0;
                        long long v21 = 0uLL;
                      }
                    }
                    else
                    {
                      char v80 = v106;
                      uint64_t v88 = v105;
                      if (v104)
                      {
                        swift_retain();
                        char v51 = 0;
                        long long v52 = 0uLL;
                        uint64_t v53 = 0;
                        uint64_t v54 = 0;
                        uint64_t v55 = 0;
                        uint64_t v56 = 0;
                        uint64_t v57 = 1;
                        goto LABEL_58;
                      }
                      long long v78 = *(_OWORD *)&v103[56];
                      long long v79 = *(_OWORD *)&v103[40];
                      *(void *)unint64_t v103 = 0;
                      swift_retain();
                      LOBYTE(v93) = 1;
                      uint64_t v53 = 0;
                      uint64_t v62 = ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)();
                      swift_release();
                      if (v62)
                      {
                        *(void *)unint64_t v103 = *(void *)(v82 + 248);
                        long long v63 = *(_OWORD *)(v82 + 272);
                        *(_OWORD *)&v103[8] = *(_OWORD *)(v82 + 256);
                        *(_OWORD *)&v103[24] = v63;
                        ViewTransform.withPosition(_:)();
                        uint64_t v97 = v100;
                        long long v98 = v101;
                        long long v99 = v102;
                        uint64_t v93 = 1;
                        long long v94 = 0u;
                        long long v95 = 0u;
                        char v96 = 2;
                        memset(v103, 0, 40);
                        v103[40] = 2;
                        outlined init with copy of CoordinateSpace((uint64_t)&v93, (uint64_t)&v103[48]);
                        char v107 = 4;
                        outlined destroy of CoordinateSpace((uint64_t)&v93);
                        ViewTransform.convert(_:point:)();
                        uint64_t v53 = v64;
                        uint64_t v54 = v65;
                        outlined destroy of ViewTransform.Conversion((uint64_t)v103);
                        swift_release();
                        UnitPoint.init(_:in:)();
                        uint64_t v57 = 0;
                        char v51 = 0;
                        goto LABEL_66;
                      }
                      char v51 = 0;
                      long long v52 = 0uLL;
                      uint64_t v54 = 0;
                      uint64_t v55 = 0;
                      uint64_t v56 = 0;
                      uint64_t v57 = 1;
                      long long v21 = 0uLL;
LABEL_59:
                      uint64_t v19 = v88;
                      char v20 = v80;
                    }
                    *(void *)unint64_t v103 = v53;
                    *(void *)&v103[8] = v54;
                    *(void *)&v103[16] = v55;
                    *(void *)&v103[24] = v56;
                    *(_OWORD *)&v103[32] = v52;
                    *(_OWORD *)&v103[48] = v21;
                    *(void *)&v103[64] = v57;
                    uint64_t v104 = v19;
                    LOBYTE(v105) = v20;
                    BYTE1(v105) = v51;
                    v50(v103);
                    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v50);
                    swift_release();
                    goto LABEL_19;
                  }
                  swift_release();
                  uint64_t v9 = v125;
                }
                else
                {
                  uint64_t v9 = v125;
                }
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v108);
                swift_release();
              }
            }
          }
          int64_t v24 = v18 + 1;
          if (__OFADD__(v18, 1))
          {
            __break(1u);
LABEL_71:
            __break(1u);
            goto LABEL_72;
          }
          if (v24 >= v84) {
            goto LABEL_7;
          }
          unint64_t v25 = *(void *)(v83 + 8 * v24);
          ++v18;
          if (v25) {
            goto LABEL_37;
          }
          int64_t v18 = v24 + 1;
          if (v24 + 1 >= v84) {
            goto LABEL_7;
          }
          unint64_t v25 = *(void *)(v83 + 8 * v18);
          if (v25) {
            goto LABEL_37;
          }
          int64_t v18 = v24 + 2;
          if (v24 + 2 >= v84) {
            goto LABEL_7;
          }
          unint64_t v25 = *(void *)(v83 + 8 * v18);
          if (v25) {
            goto LABEL_37;
          }
          int64_t v18 = v24 + 3;
          if (v24 + 3 >= v84) {
            goto LABEL_7;
          }
          unint64_t v25 = *(void *)(v83 + 8 * v18);
          if (v25) {
            goto LABEL_37;
          }
          int64_t v26 = v24 + 4;
          if (v26 < v84) {
            break;
          }
LABEL_7:
          swift_release();
          swift_release();
          unint64_t v12 = v75;
          uint64_t v10 = v77;
          if (!v77) {
            goto LABEL_73;
          }
        }
        unint64_t v25 = *(void *)(v83 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_71;
            }
            if (v18 >= v84) {
              goto LABEL_7;
            }
            unint64_t v25 = *(void *)(v83 + 8 * v18);
            ++v26;
            if (v25) {
              goto LABEL_37;
            }
          }
        }
        int64_t v18 = v26;
LABEL_37:
        unint64_t v17 = (v25 - 1) & v25;
        unint64_t v23 = __clz(__rbit64(v25)) + (v18 << 6);
        goto LABEL_38;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v9;
}

void type metadata accessor for (EventID, PencilDoubleTapEvent)(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t sub_187F01EFC()
{
  swift_release();

  return swift_deallocObject();
}

SwiftUI::VerticalPageTabViewStyle __swiftcall VerticalPageTabViewStyle.init()()
{
  result.transitionStyle.backing = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

SwiftUI::VerticalPageTabViewStyle __swiftcall VerticalPageTabViewStyle.init(transitionStyle:)(SwiftUI::VerticalPageTabViewStyle::TransitionStyle transitionStyle)
{
  result.transitionStyle.backing = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void static VerticalPageTabViewStyle.TransitionStyle.blur.getter()
{
}

void static VerticalPageTabViewStyle._makeView<A>(value:inputs:)()
{
}

void static VerticalPageTabViewStyle._makeViewList<A>(value:inputs:)()
{
}

ValueMetadata *type metadata accessor for VerticalPageTabViewStyle()
{
  return &type metadata for VerticalPageTabViewStyle;
}

ValueMetadata *type metadata accessor for VerticalPageTabViewStyle.TransitionStyle()
{
  return &type metadata for VerticalPageTabViewStyle.TransitionStyle;
}

unsigned char *storeEnumTagSinglePayload for VerticalPageTabViewStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *SwiftUI::VerticalPageTabViewStyle result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187F0208CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *SwiftUI::VerticalPageTabViewStyle result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerticalPageTabViewStyle.TransitionStyle.Backing()
{
  return &type metadata for VerticalPageTabViewStyle.TransitionStyle.Backing;
}

unint64_t lazy protocol witness table accessor for type VerticalPageTabViewStyle.TransitionStyle.Backing and conformance VerticalPageTabViewStyle.TransitionStyle.Backing()
{
  unint64_t result = lazy protocol witness table cache variable for type VerticalPageTabViewStyle.TransitionStyle.Backing and conformance VerticalPageTabViewStyle.TransitionStyle.Backing;
  if (!lazy protocol witness table cache variable for type VerticalPageTabViewStyle.TransitionStyle.Backing and conformance VerticalPageTabViewStyle.TransitionStyle.Backing)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalPageTabViewStyle.TransitionStyle.Backing and conformance VerticalPageTabViewStyle.TransitionStyle.Backing);
  }
  return result;
}

void static VerticalPageTabViewStyle.TransitionStyle.automatic.getter()
{
}

void static VerticalPageTabViewStyle.TransitionStyle.identity.getter()
{
}

uint64_t specialized FocusedValues.subscript.getter()
{
  return 3;
}

{
  uint64_t v0;
  _OWORD v2[2];
  long long v3;
  uint64_t v4[4];

  int v3 = 0u;
  memset(v4, 0, 26);
  _s7SwiftUI6ButtonVyAA4TextVGMaTm_0(0, &lazy cache variable for type metadata for FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented>, (uint64_t)&type metadata for FocusedValues.__Key_inspectorPresented, (uint64_t)&protocol witness table for FocusedValues.__Key_inspectorPresented, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FocusedValuePropertyKey);
  memset(v2, 0, 26);
  lazy protocol witness table accessor for type FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented> and conformance FocusedValuePropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented> and conformance FocusedValuePropertyKey<A>, &lazy cache variable for type metadata for FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented>, (uint64_t)&type metadata for FocusedValues.__Key_inspectorPresented, (uint64_t)&protocol witness table for FocusedValues.__Key_inspectorPresented);
  PropertyList.forEach<A>(keyType:_:)();
  if (*(void *)&v2[0])
  {
    uint64_t v0 = *((void *)&v2[0] + 1);
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v0 = 0;
  }
  outlined consume of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(0, 0, *(uint64_t *)&v2[0]);
  outlined consume of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(v3, *((uint64_t *)&v3 + 1), v4[0]);
  return v0;
}

uint64_t ToolbarCommands.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t InspectorCommands.inspectorPresented.getter()
{
  if (*(unsigned char *)(v0 + 17) != 1) {
    return 2;
  }
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v7 = *(void *)v0;
  uint64_t v8 = v2;
  char v9 = v3;
  if (!v2)
  {
    outlined consume of Environment<Binding<Visibility>?>.Content(v1, 0, v3, 1);
    return 2;
  }
  outlined copy of Environment<Binding<Visibility>?>.Content(v1, v2, v3, 1);
  outlined copy of Environment<Binding<Visibility>?>.Content(v1, v2, v3, 1);
  type metadata accessor for KeyboardShortcut?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v6);
  uint64_t v4 = v6;
  swift_release();
  swift_release();
  outlined consume of Environment<Binding<Visibility>?>.Content(v1, v2, v3, 1);
  return v4;
}

void (*InspectorCommands.inspectorPresented.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = (char *)malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = v3 + 17;
  uint64_t v5 = *(void *)v1;
  uint64_t v6 = *(void *)(v1 + 8);
  *((void *)v3 + 3) = *(void *)v1;
  *((void *)v3 + 4) = v6;
  uint64_t v7 = *(unsigned __int8 *)(v1 + 16);
  v3[19] = v7;
  int v8 = *(unsigned __int8 *)(v1 + 17);
  v3[20] = v8;
  if (v8 == 1)
  {
    char v9 = v3;
    *(void *)uint64_t v3 = v5;
    *((void *)v3 + 1) = v6;
    v3[16] = v7;
    if (v6)
    {
      outlined copy of Environment<Binding<Visibility>?>.Content(v5, v6, v7, 1);
      outlined copy of Environment<Binding<Visibility>?>.Content(v5, v6, v7, 1);
      type metadata accessor for KeyboardShortcut?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
      MEMORY[0x18C113DA0]();
      char v10 = v9[18];
      swift_release();
      swift_release();
    }
    else
    {
      char v10 = 2;
    }
    v9[17] = v10;
    return (void (*)(uint64_t *, char))InspectorCommands.inspectorPresented.modify;
  }
  else
  {
    outlined copy of Environment<Binding<Visibility>?>.Content(v5, v6, v7, 0);
    *uint64_t v4 = 2;
    return InspectorCommands.inspectorPresented.modify;
  }
}

void InspectorCommands.inspectorPresented.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    int v3 = *((unsigned __int8 *)v2 + 20);
    uint64_t v5 = v2[3];
    uint64_t v4 = v2[4];
    uint64_t v6 = *((unsigned __int8 *)v2 + 19);
    specialized FocusedBinding.wrappedValue.setter(*((unsigned __int8 *)v2 + 17), v5, v4, v6 | (v3 << 8));
    uint64_t v7 = v5;
    uint64_t v8 = v4;
    uint64_t v9 = v6;
    char v10 = v3;
  }
  else
  {
    int v11 = *((unsigned __int8 *)v2 + 17);
    if (v11 == 2)
    {
      uint64_t v7 = v2[3];
      uint64_t v8 = v2[4];
      uint64_t v9 = *((unsigned __int8 *)v2 + 19);
    }
    else
    {
      uint64_t v12 = v2[4];
      if (!v12) {
        goto LABEL_9;
      }
      uint64_t v13 = v2[3];
      *(unsigned char *)uint64_t v2 = v11 & 1;
      uint64_t v14 = *((unsigned __int8 *)v2 + 19);
      outlined copy of Environment<Binding<Visibility>?>.Content(v13, v12, v14, 1);
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_release();
      uint64_t v7 = v13;
      uint64_t v8 = v12;
      uint64_t v9 = v14;
    }
    char v10 = 1;
  }
  outlined consume of Environment<Binding<Visibility>?>.Content(v7, v8, v9, v10);
LABEL_9:

  free(v2);
}

void InspectorCommands.inspectorPresented.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    int v3 = *(unsigned __int8 *)(v2 + 20);
    uint64_t v5 = *(void *)(v2 + 24);
    uint64_t v4 = *(void *)(v2 + 32);
    uint64_t v6 = *(unsigned __int8 *)(v2 + 19);
    specialized FocusedBinding.wrappedValue.setter(*(unsigned __int8 *)(v2 + 17), v5, v4, v6 | (v3 << 8));
    uint64_t v7 = v5;
    uint64_t v8 = v4;
    uint64_t v9 = v6;
    char v10 = v3;
  }
  else
  {
    uint64_t v7 = *(void *)(v2 + 24);
    uint64_t v8 = *(void *)(v2 + 32);
    uint64_t v9 = *(unsigned __int8 *)(v2 + 19);
    char v10 = 0;
  }
  outlined consume of Environment<Binding<Visibility>?>.Content(v7, v8, v9, v10);

  free((void *)v2);
}

uint64_t InspectorCommands.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  return result;
}

uint64_t InspectorCommands.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CommandGroupPlacement(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)v1;
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v8 = *(unsigned __int8 *)(v1 + 16);
  int v9 = *(unsigned __int8 *)(v1 + 17);
  if (one-time initialization token for sidebar != -1) {
    swift_once();
  }
  uint64_t v10 = __swift_project_value_buffer(v3, (uint64_t)static CommandGroupPlacement.sidebar);
  outlined init with copy of CommandGroupPlacement(v10, (uint64_t)v5);
  outlined copy of Environment<Binding<Visibility>?>.Content(v6, v7, v8, v9);
  return specialized CommandGroup.init(after:addition:)((uint64_t)v5, v6, v7, v8 | (v9 << 8), a1);
}

uint64_t closure #1 in closure #1 in InspectorCommands.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v9 = a2;
  __int16 v10 = a3 & 0x1FF;
  outlined copy of Environment<Binding<Visibility>?>.Content(a1, a2, a3, BYTE1(a3) & 1);
  uint64_t v4 = InspectorCommands.inspectorPresented.modify(v7);
  int v5 = *v3;
  if (v5 != 2) {
    *uint64_t v3 = (v5 & 1) == 0;
  }
  v4(v7, 0);
  return outlined consume of Environment<Binding<Visibility>?>.Content(v8, v9, v10, SHIBYTE(v10));
}

uint64_t closure #2 in closure #1 in InspectorCommands.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = 2003789907;
  unsigned int v9 = (a3 >> 8) & 1;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v10);
  outlined copy of Environment<Binding<Visibility>?>.Content(a1, a2, a3, v9);
  char v11 = InspectorCommands.inspectorPresented.getter();
  if (v11 == 2)
  {
    outlined consume of Environment<Binding<Visibility>?>.Content(a1, a2, a3, v9);
  }
  else
  {
    char v12 = v11;
    outlined consume of Environment<Binding<Visibility>?>.Content(a1, a2, a3, v9);
    if (v12) {
      uint64_t v8 = 1701079368;
    }
  }
  v13._countAndFlagsBits = v8;
  v13._object = (void *)0xE400000000000000;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x74636570736E4920;
  v14._object = (void *)0xEA0000000000726FLL;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v14);
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v16 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v18;
  *(unsigned char *)(a4 + 16) = v19 & 1;
  *(void *)(a4 + 24) = v20;
  return result;
}

uint64_t protocol witness for Commands.body.getter in conformance InspectorCommands@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CommandGroupPlacement(0);
  MEMORY[0x1F4188790](v3);
  int v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)v1;
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v8 = *(unsigned __int8 *)(v1 + 16);
  int v9 = *(unsigned __int8 *)(v1 + 17);
  if (one-time initialization token for sidebar != -1) {
    swift_once();
  }
  uint64_t v10 = __swift_project_value_buffer(v3, (uint64_t)static CommandGroupPlacement.sidebar);
  outlined init with copy of CommandGroupPlacement(v10, (uint64_t)v5);
  outlined copy of Environment<Binding<Visibility>?>.Content(v6, v7, v8, v9);
  return specialized CommandGroup.init(after:addition:)((uint64_t)v5, v6, v7, v8 | (v9 << 8), a1);
}

void one-time initialization function for printing()
{
  uint64_t v0 = static CommandFlag.nextID++;
  static CommandFlag.printing = v0;
}

uint64_t PrintingCommands.body.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for printing != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static CommandFlag.printing;
  return result;
}

uint64_t protocol witness for Commands.body.getter in conformance PrintingCommands@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for printing != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static CommandFlag.printing;
  return result;
}

void __swiftcall ImportFromDevicesCommands.init()()
{
}

void ImportFromDevicesCommands.body.getter()
{
}

uint64_t specialized FocusedBinding.wrappedValue.setter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0x100) != 0 && result != 2)
  {
    if (a3)
    {
      outlined copy of Environment<Binding<Visibility>?>.Content(a2, a3, a4, 1);
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      return swift_release();
    }
    else
    {
      return outlined copy of Environment<Binding<Visibility>?>.Content(a2, 0, a4, 1);
    }
  }
  return result;
}

uint64_t specialized closure #1 in FocusedValues.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3)
  {
    uint64_t v11 = result;
    uint64_t v13 = one-time initialization token for scene;
    uint64_t result = swift_bridgeObjectRetain();
    if (v13 != -1) {
      uint64_t result = swift_once();
    }
    if (static FocusedValueScope.scene == v11 && !*(void *)(a6 + 16))
    {
      *(void *)a6 = v11;
      *(void *)(a6 + 8) = a2;
      *(void *)(a6 + 16) = a3;
      *(_WORD *)(a6 + 24) = a4;
    }
    else
    {
      if (one-time initialization token for view != -1) {
        swift_once();
      }
      if (static FocusedValueScope.view == v11 && (a4 & 0x100) != 0)
      {
        uint64_t result = swift_bridgeObjectRelease();
        *(void *)a7 = v11;
        *(void *)(a7 + 8) = a2;
        *(void *)(a7 + 16) = a3;
        *(_WORD *)(a7 + 24) = a4 | 0x100;
      }
      else
      {
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t specialized closure #1 in FocusedValues.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  outlined init with take of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(a1, (uint64_t)&v14);
  int v7 = v14;
  __int16 v8 = v15;
  uint64_t result = outlined init with take of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(a1, (uint64_t)v16);
  if (v17)
  {
    outlined retain of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(a1, (void (*)(void, void, void, void, void, void))outlined copy of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?);
    uint64_t v10 = one-time initialization token for scene;
    swift_bridgeObjectRetain();
    if (v10 != -1) {
      swift_once();
    }
    if (static FocusedValueScope.scene == v7 && !*(void *)(a3 + 16))
    {
      swift_bridgeObjectRelease();
      uint64_t v12 = a1;
      uint64_t v13 = a3;
    }
    else
    {
      if (one-time initialization token for view != -1) {
        swift_once();
      }
      int v11 = static FocusedValueScope.view;
      swift_bridgeObjectRelease();
      if (v11 != v7 || (v8 & 0x100) == 0) {
        return outlined retain of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(a1, (void (*)(void, void, void, void, void, void))outlined consume of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?);
      }
      uint64_t v12 = a1;
      uint64_t v13 = a4;
    }
    return outlined assign with take of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(v12, v13);
  }
  return result;
}

uint64_t key path getter for FocusedValues.toolbarVisibility : FocusedValues@<X0>(unsigned char *a1@<X8>)
{
  swift_retain();
  char v2 = specialized FocusedValues.subscript.getter();
  uint64_t result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t sub_187F0310C(unsigned __int8 *a1)
{
  return FocusedValues.toolbarVisibility.setter(*a1);
}

uint64_t associated type witness table accessor for Commands.Body : Commands in ToolbarCommands()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Commands.Body : Commands in SidebarCommands()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Commands.Body : Commands in InspectorCommands()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Commands.Body : Commands in PrintingCommands()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Commands.Body : Commands in ImportFromDevicesCommands()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ToolbarCommands()
{
  return &type metadata for ToolbarCommands;
}

ValueMetadata *type metadata accessor for SidebarCommands()
{
  return &type metadata for SidebarCommands;
}

uint64_t destroy for InspectorCommands(uint64_t a1)
{
  return outlined consume of Environment<Binding<Visibility>?>.Content(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(unsigned char *)(a1 + 17));
}

uint64_t initializeBufferWithCopyOfBuffer for InspectorCommands(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 17);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of Environment<Binding<Visibility>?>.Content(*(void *)a2, v4, v6, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 17) = v5;
  return a1;
}

uint64_t assignWithCopy for InspectorCommands(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 17);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of Environment<Binding<Visibility>?>.Content(*(void *)a2, v4, v6, v5);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 17);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  uint64_t v10 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 17) = v5;
  outlined consume of Environment<Binding<Visibility>?>.Content(v7, v8, v10, v9);
  return a1;
}

uint64_t assignWithTake for InspectorCommands(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 17);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 17);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v8 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 17) = v4;
  outlined consume of Environment<Binding<Visibility>?>.Content(v5, v6, v8, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for InspectorCommands(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 17);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InspectorCommands(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 17) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InspectorCommands()
{
  return &type metadata for InspectorCommands;
}

ValueMetadata *type metadata accessor for PrintingCommands()
{
  return &type metadata for PrintingCommands;
}

ValueMetadata *type metadata accessor for ImportFromDevicesCommands()
{
  return &type metadata for ImportFromDevicesCommands;
}

_UNKNOWN **sub_187F033E0()
{
  return &protocol witness table for EmptyCommands;
}

uint64_t sub_187F033EC()
{
  return lazy protocol witness table accessor for type CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>> and conformance CommandGroup<A>(&lazy protocol witness table cache variable for type CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>> and conformance CommandGroup<A>, (void (*)(uint64_t))type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>);
}

uint64_t lazy protocol witness table accessor for type CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>> and conformance CommandGroup<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

_UNKNOWN **sub_187F0347C()
{
  return &protocol witness table for WithCommandFlag<A>;
}

uint64_t partial apply for specialized closure #1 in FocusedValues.subscript.getter(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in FocusedValues.subscript.getter(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_WORD *)(a1 + 24), a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned char v7[48];

  uint64_t v5 = *(void *)(v2 + 16);
  int v4 = *(void *)(v2 + 24);
  outlined init with take of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(a1, (uint64_t)v7);
  return specialized closure #1 in FocusedValues.subscript.getter((uint64_t)v7, a2, v5, v4);
}

uint64_t lazy protocol witness table accessor for type FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented> and conformance FocusedValuePropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI6ButtonVyAA4TextVGMaTm_0(255, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FocusedValuePropertyKey);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined consume of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined init with take of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?()
{
  if (!lazy cache variable for type metadata for FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?)
  {
    _s7SwiftUI6ButtonVyAA4TextVGMaTm_0(255, &lazy cache variable for type metadata for FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>, (uint64_t)&type metadata for FocusedValues.__Key_inspectorPresented, (uint64_t)&protocol witness table for FocusedValues.__Key_inspectorPresented, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FocusedValues.Entry);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?);
    }
  }
}

uint64_t outlined copy of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_retain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t outlined assign with take of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t NavigationHostingControllerCache_UIKit.prerenderHostingController(configureExisting:makeNew:)(void (*a1)(void), uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void **)(v3 + 24);
  if (v5)
  {
    id v7 = v5;
    a1();
    return (uint64_t)v7;
  }
  uint64_t v9 = a3();
  uint64_t v10 = *(void **)(v3 + 24);
  *(void *)(v3 + 24) = v9;

  static Semantics.v6.getter();
  uint64_t result = isLinkedOnOrAfter(_:)();
  if (result)
  {
    uint64_t v11 = *(void *)(v3 + 24);
    if (!v11)
    {
LABEL_10:
      __break(1u);
      return result;
    }
    id v12 = *(id *)(v11 + direct field offset for UIHostingController.host);
    specialized _UIHostingView.base.getter();

    UIHostingViewBase.updateRemovedState(uiView:)(0);
    swift_release();
  }
  uint64_t result = *(void *)(v4 + 24);
  if (!result) {
    goto LABEL_10;
  }

  return (uint64_t)(id)result;
}

UIView *specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(UINavigationController *a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, uint64_t a5, unint64_t a6, void *a7, int a8, void *a9, char **a10, uint64_t a11, uint64_t a12)
{
  return specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(UIView *, void, uint64_t))specialized NavigationStackCoordinator.configureExtantHostingController(_:view:transaction:), (void (*)(BOOL, UINavigationController *, uint64_t))specialized NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:));
}

{
  return specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(UIView *, void, uint64_t))specialized NavigationStackCoordinator.configureExtantHostingController(_:view:transaction:), (void (*)(BOOL, UINavigationController *, uint64_t))specialized NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:));
}

{
  return specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(UIView *, void, uint64_t))specialized NavigationStackCoordinator.configureExtantHostingController(_:view:transaction:), (void (*)(BOOL, UINavigationController *, uint64_t))specialized NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:));
}

UIView *specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(UINavigationController *a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, uint64_t a5, unint64_t a6, void *a7, int a8, void *a9, char **a10, uint64_t a11, uint64_t a12, void (*a13)(UIView *, void, uint64_t), void (*a14)(BOOL, UINavigationController *, uint64_t))
{
  int v121 = a8;
  uint64_t v122 = a7;
  _s2os6LoggerVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v130 = (char *)v119 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (uint64_t)v119 - v21;
  MEMORY[0x1F4188790](v23);
  uint64_t v129 = (char *)v119 - v24;
  uint64_t v142 = 0;
  uint64_t v140 = a5;
  unint64_t v141 = MEMORY[0x1E4FBC860];
  uint64_t v134 = a1;
  swift_unknownObjectWeakInit();
  swift_retain();
  a3(&v140);
  unint64_t v25 = v141;
  if (v141 >> 62) {
    goto LABEL_109;
  }
  uint64_t v26 = *(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  while (1)
  {
    long long v126 = (UINavigationController *)a6;
    id v125 = (UIViewController *)v25;
    if (!v26) {
      break;
    }
    unint64_t v133 = v25 & 0xC000000000000001;
    uint64_t v28 = 4;
    *(void *)&long long v27 = 138412290;
    long long v127 = v27;
    *(void *)&long long v27 = 138412546;
    long long v120 = v27;
    v119[1] = MEMORY[0x1E4FBC840] + 8;
    uint64_t v128 = v22;
    uint64_t v131 = v26;
    while (1)
    {
      uint64_t v30 = v133
          ? (UIViewController *)MEMORY[0x18C117680](v28 - 4, v25)
          : (UIViewController *)*(id *)(v25 + 8 * v28);
      unint64_t v25 = (unint64_t)v30;
      unint64_t v31 = v134;
      uint64_t v29 = v28 - 3;
      if (__OFADD__(v28 - 4, 1)) {
        break;
      }
      uint64_t v32 = [(UIViewController *)v30 navigationController];
      char v33 = v32;
      if (!v32)
      {
        if (v31)
        {
LABEL_20:
          static Log.navigation.getter();
          uint64_t v38 = type metadata accessor for Logger();
          uint64_t v39 = *(void *)(v38 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v22, 1, v38) == 1)
          {

            uint64_t v40 = v22;
LABEL_28:
            outlined destroy of Logger?(v40);
            a6 = (unint64_t)v126;
            unint64_t v25 = (unint64_t)v125;
            uint64_t v26 = v131;
            goto LABEL_9;
          }
          char v132 = (char **)(v28 - 3);
          uint64_t v41 = (UIViewController *)(id)v25;
          uint64_t v42 = Logger.logObject.getter();
          os_log_type_t v43 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v42, v43))
          {
            uint64_t v44 = swift_slowAlloc();
            uint64_t v45 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v44 = v127;
            *(void *)(v44 + 4) = v41;
            *uint64_t v45 = v41;

            _os_log_impl(&dword_1872C6000, v42, v43, "[NavigationHostingControllerCache_UIKit] %@ containment skipped because sourceNavigationController or destination were nil", (uint8_t *)v44, 0xCu);
            _sSo16UIViewControllerCSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject);
            swift_arrayDestroy();
            uint64_t v46 = v45;
            uint64_t v22 = v128;
            MEMORY[0x18C119C60](v46, -1, -1);
            MEMORY[0x18C119C60](v44, -1, -1);
          }
          else
          {
          }
          (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v22, v38);
          a6 = (unint64_t)v126;
          unint64_t v25 = (unint64_t)v125;
        }
        else
        {
          uint64_t v50 = v130;
          static Log.navigation.getter();
          uint64_t v51 = type metadata accessor for Logger();
          uint64_t v52 = *(void *)(v51 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51) == 1)
          {

            uint64_t v40 = (uint64_t)v130;
            goto LABEL_28;
          }
          char v132 = (char **)(v28 - 3);
          uint64_t v66 = (UIViewController *)(id)v25;
          long long v67 = Logger.logObject.getter();
          os_log_type_t v68 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v67, v68))
          {
            uint64_t v69 = swift_slowAlloc();
            uint64_t v70 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v69 = v127;
            *(void *)(v69 + 4) = v66;
            *uint64_t v70 = v66;
            _sSo16UIViewControllerCSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject);
            swift_arrayDestroy();
            MEMORY[0x18C119C60](v70, -1, -1);
            MEMORY[0x18C119C60](v69, -1, -1);
            p_super = v67;
          }
          else
          {

            p_super = &v66->super.super;
            uint64_t v66 = (UIViewController *)v67;
          }
          a6 = (unint64_t)v126;
          unint64_t v25 = (unint64_t)v125;

          (*(void (**)(char *, uint64_t))(v52 + 8))(v130, v51);
        }
        uint64_t v26 = v131;
        goto LABEL_8;
      }
      if (!v31) {
        goto LABEL_20;
      }
      if (v32 != v31)
      {
        uint64_t v34 = v31;
        uint64_t v35 = v33;
        objc_msgSend((id)v25, sel_willMoveToParentViewController_, 0);
        uint64_t result = (UIView *)objc_msgSend((id)v25, sel_view);
        if (!result)
        {
          __break(1u);
          return result;
        }
        uint64_t v37 = result;
        [(UIView *)result removeFromSuperview];

        specialized mustRemove #1 <A>(_:from:) in NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)((void *)v25, v35, (uint64_t)&v142);
        a6 = (unint64_t)v126;
        unint64_t v25 = (unint64_t)v125;
        uint64_t v29 = v28 - 3;
        goto LABEL_9;
      }
      uint64_t v47 = v129;
      static Log.navigation.getter();
      uint64_t v48 = type metadata accessor for Logger();
      int64_t v49 = *(void *)(v48 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48) == 1)
      {

        outlined destroy of Logger?((uint64_t)v47);
        a6 = (unint64_t)v126;
        unint64_t v25 = (unint64_t)v125;
        goto LABEL_9;
      }
      char v132 = (char **)(v28 - 3);
      uint64_t v53 = v31;
      uint64_t v54 = (UIViewController *)(id)v25;
      uint64_t v55 = v53;
      uint64_t v56 = v54;
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = swift_slowAlloc();
        int64_t v124 = v49;
        uint64_t v60 = v59;
        uint64_t v61 = (void *)swift_slowAlloc();
        uint64_t v123 = swift_slowAlloc();
        v136[0] = v123;
        *(_DWORD *)uint64_t v60 = v120;
        *(void *)(v60 + 4) = v56;
        *uint64_t v61 = v56;

        *(_WORD *)(v60 + 12) = 2080;
        unint64_t v143 = (unint64_t)v33;
        _sSo16UIViewControllerCSgMaTm_0(0, &lazy cache variable for type metadata for UINavigationController?, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
        uint64_t v55 = v55;
        uint64_t v62 = String.init<A>(describing:)();
        *(void *)(v60 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, v136);

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1872C6000, v57, v58, "[NavigationHostingControllerCache_UIKit] %@ containment skipped because sourceNavigationController and destination were equal %s", (uint8_t *)v60, 0x16u);
        _sSo16UIViewControllerCSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v61, -1, -1);
        uint64_t v64 = v123;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v64, -1, -1);
        uint64_t v65 = v60;
        int64_t v49 = v124;
        MEMORY[0x18C119C60](v65, -1, -1);
      }
      else
      {
      }
      a6 = (unint64_t)v126;
      unint64_t v25 = (unint64_t)v125;
      uint64_t v22 = v128;
      (*(void (**)(char *, uint64_t))(v49 + 8))(v129, v48);
LABEL_8:
      uint64_t v29 = (uint64_t)v132;
LABEL_9:
      ++v28;
      if (v29 == v26) {
        goto LABEL_37;
      }
    }
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    swift_bridgeObjectRetain_n();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_37:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (!v142) {
    goto LABEL_95;
  }
  uint64_t v72 = *(void *)(v142 + 64);
  uint64_t v123 = v142 + 64;
  uint64_t v73 = 1 << *(unsigned char *)(v142 + 32);
  if (v73 < 64) {
    uint64_t v74 = ~(-1 << v73);
  }
  else {
    uint64_t v74 = -1;
  }
  unint64_t v75 = v74 & v72;
  int64_t v124 = (unint64_t)(v73 + 63) >> 6;
  uint64_t v76 = swift_bridgeObjectRetain();
  uint64_t v77 = 0;
  long long v78 = 0;
  unint64_t v133 = MEMORY[0x1E4FBC838] + 8;
  *(void *)&long long v127 = v76;
  while (2)
  {
    if (v75)
    {
      uint64_t v130 = (char *)((v75 - 1) & v75);
      uint64_t v131 = v77;
      unint64_t v79 = __clz(__rbit64(v75)) | (v77 << 6);
      goto LABEL_59;
    }
    BOOL v80 = __OFADD__(v77, 1);
    int64_t v81 = v77 + 1;
    if (v80) {
      goto LABEL_107;
    }
    if (v81 >= v124) {
      goto LABEL_94;
    }
    unint64_t v82 = *(void *)(v123 + 8 * v81);
    if (v82)
    {
LABEL_58:
      uint64_t v130 = (char *)((v82 - 1) & v82);
      uint64_t v131 = v81;
      unint64_t v79 = __clz(__rbit64(v82)) + (v81 << 6);
LABEL_59:
      uint64_t v84 = 8 * v79;
      unint64_t v85 = *(void *)(*(void *)(v76 + 56) + v84);
      Swift::UInt v86 = (char *)*(id *)(*(void *)(v76 + 48) + v84);
      swift_bridgeObjectRetain();
      id v87 = objc_msgSend(v86, sel_viewControllers);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      unint64_t v88 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_bridgeObjectRetain();
      specialized _ArrayProtocol.filter(_:)(v88, v85);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v86, sel_setViewControllers_, isa);

      char v132 = v78;
      uint64_t v129 = v86;
      if ((v85 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
        lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type NavigationStackHostingController<AnyView> and conformance NSObject, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
        Set.Iterator.init(_cocoa:)();
        unint64_t v85 = v143;
        unint64_t v90 = v144;
        uint64_t v91 = v145;
        uint64_t v92 = v146;
        a6 = (unint64_t)v147;
      }
      else
      {
        uint64_t v92 = 0;
        uint64_t v93 = -1 << *(unsigned char *)(v85 + 32);
        unint64_t v90 = v85 + 56;
        uint64_t v91 = ~v93;
        uint64_t v94 = -v93;
        if (v94 < 64) {
          uint64_t v95 = ~(-1 << v94);
        }
        else {
          uint64_t v95 = -1;
        }
        a6 = v95 & *(void *)(v85 + 56);
      }
      unint64_t v25 = v85 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v128 = v91;
      int64_t v96 = (unint64_t)(v91 + 64) >> 6;
      if ((v85 & 0x8000000000000000) == 0) {
        goto LABEL_69;
      }
LABEL_66:
      uint64_t v97 = __CocoaSet.Iterator.next()();
      if (!v97) {
        goto LABEL_43;
      }
      uint64_t v135 = v97;
      _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v98 = (id)v136[0];
      swift_unknownObjectRelease();
      uint64_t v22 = v92;
      uint64_t v99 = a6;
      if (!v98)
      {
LABEL_43:
        outlined consume of Set<UIPress>.Iterator._Variant();

        uint64_t v76 = v127;
        long long v78 = v132;
        uint64_t v77 = v131;
        unint64_t v75 = (unint64_t)v130;
        continue;
      }
      while (1)
      {
        objc_msgSend(v98, sel_removeFromParentViewController);
        objc_msgSend(v98, sel_willMoveToParentViewController_, v134);

        uint64_t v92 = v22;
        a6 = v99;
        if ((v85 & 0x8000000000000000) != 0) {
          goto LABEL_66;
        }
LABEL_69:
        if (a6)
        {
          uint64_t v99 = (a6 - 1) & a6;
          unint64_t v100 = __clz(__rbit64(a6)) | (v92 << 6);
          uint64_t v22 = v92;
        }
        else
        {
          int64_t v101 = v92 + 1;
          if (__OFADD__(v92, 1))
          {
            __break(1u);
            goto LABEL_106;
          }
          if (v101 >= v96) {
            goto LABEL_42;
          }
          unint64_t v102 = *(void *)(v90 + 8 * v101);
          uint64_t v22 = v92 + 1;
          if (!v102)
          {
            uint64_t v22 = v92 + 2;
            if (v92 + 2 >= v96) {
              goto LABEL_42;
            }
            unint64_t v102 = *(void *)(v90 + 8 * v22);
            if (!v102)
            {
              uint64_t v22 = v92 + 3;
              if (v92 + 3 >= v96) {
                goto LABEL_42;
              }
              unint64_t v102 = *(void *)(v90 + 8 * v22);
              if (!v102)
              {
                uint64_t v22 = v92 + 4;
                if (v92 + 4 >= v96) {
                  goto LABEL_42;
                }
                unint64_t v102 = *(void *)(v90 + 8 * v22);
                if (!v102)
                {
                  uint64_t v22 = v92 + 5;
                  if (v92 + 5 >= v96) {
                    goto LABEL_42;
                  }
                  unint64_t v102 = *(void *)(v90 + 8 * v22);
                  if (!v102)
                  {
                    uint64_t v103 = v92 + 6;
                    while (v96 != v103)
                    {
                      unint64_t v102 = *(void *)(v90 + 8 * v103++);
                      if (v102)
                      {
                        uint64_t v22 = v103 - 1;
                        goto LABEL_86;
                      }
                    }
LABEL_42:
                    a6 = 0;
                    goto LABEL_43;
                  }
                }
              }
            }
          }
LABEL_86:
          uint64_t v99 = (v102 - 1) & v102;
          unint64_t v100 = __clz(__rbit64(v102)) + (v22 << 6);
        }
        id v98 = *(id *)(*(void *)(v85 + 48) + 8 * v100);
        if (!v98) {
          goto LABEL_43;
        }
      }
    }
    break;
  }
  int64_t v83 = v81 + 1;
  if (v81 + 1 >= v124) {
    goto LABEL_94;
  }
  unint64_t v82 = *(void *)(v123 + 8 * v83);
  if (v82) {
    goto LABEL_57;
  }
  int64_t v83 = v81 + 2;
  if (v81 + 2 >= v124) {
    goto LABEL_94;
  }
  unint64_t v82 = *(void *)(v123 + 8 * v83);
  if (v82) {
    goto LABEL_57;
  }
  int64_t v83 = v81 + 3;
  if (v81 + 3 >= v124) {
    goto LABEL_94;
  }
  unint64_t v82 = *(void *)(v123 + 8 * v83);
  if (v82) {
    goto LABEL_57;
  }
  int64_t v83 = v81 + 4;
  if (v81 + 4 >= v124) {
    goto LABEL_94;
  }
  unint64_t v82 = *(void *)(v123 + 8 * v83);
  if (v82)
  {
LABEL_57:
    int64_t v81 = v83;
    goto LABEL_58;
  }
  while (1)
  {
    int64_t v81 = v83 + 1;
    if (__OFADD__(v83, 1)) {
      goto LABEL_108;
    }
    if (v81 >= v124) {
      break;
    }
    unint64_t v82 = *(void *)(v123 + 8 * v81);
    ++v83;
    if (v82) {
      goto LABEL_58;
    }
  }
LABEL_94:
  swift_release();
  a6 = (unint64_t)v126;
  unint64_t v25 = (unint64_t)v125;
LABEL_95:
  uint64_t v105 = (uint64_t)a9;
  uint64_t v104 = (uint64_t)a10;
  specialized closure #2 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)((UIViewController *)v25, (UINavigationController *)a6, v122, (UIView *)(v121 & 1), a9, a10, a11, a12, a13, a14);
  swift_bridgeObjectRelease();
  if (v142)
  {
    uint64_t v131 = (uint64_t)a9;
    char v132 = a10;
    unint64_t v133 = a11;
    uint64_t v106 = -1 << *(unsigned char *)(v142 + 32);
    uint64_t v107 = ~v106;
    uint64_t v108 = *(void *)(v142 + 64);
    uint64_t v109 = -v106;
    v136[0] = v142;
    v136[1] = v142 + 64;
    if (v109 < 64) {
      uint64_t v110 = ~(-1 << v109);
    }
    else {
      uint64_t v110 = -1;
    }
    v136[2] = v107;
    v136[3] = 0;
    v136[4] = v110 & v108;
    v136[5] = (uint64_t)closure #2 in NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:);
    v136[6] = 0;
    unint64_t v137 = 0xF000000000000007;
    long long v138 = 0u;
    long long v139 = 0u;
    specialized FlattenSequence.Iterator.next()();
    long long v112 = v134;
    if (v111)
    {
      uint64_t v113 = v111;
      uint64_t v114 = MEMORY[0x1E4F41618];
      uint64_t v115 = MEMORY[0x1E4F41610];
      do
      {
        objc_msgSend(v113, sel_didMoveToParentViewController_, v112);
        id v116 = *(id *)&v113[direct field offset for UIHostingController.host];
        static ViewRendererHostProperties.all.getter();
        _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, v114, v115, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

        specialized FlattenSequence.Iterator.next()();
        uint64_t v113 = v117;
      }
      while (v117);
    }
    uint64_t v118 = v137;
    outlined consume of Set<UIPress>.Iterator._Variant();
    swift_release();
    outlined consume of Set<NavigationStackHostingController<AnyView>>.Iterator?(v118);
    outlined destroy of NavigationHostingControllerCache_UIKit.Source((uint64_t)&v140);

    uint64_t v104 = (uint64_t)v132;
    uint64_t v105 = v131;
  }
  else
  {
    outlined destroy of NavigationHostingControllerCache_UIKit.Source((uint64_t)&v140);
  }
  outlined release of NavigationState.StackContent(v105);
  outlined release of NavigationState.StackContent(v104);
  return (UIView *)swift_release();
}

Swift::Void __swiftcall NavigationHostingControllerCache_UIKit.eject(at:)(SwiftUI::NavigationContentAbstractPosition at)
{
  uint64_t v2 = *(unsigned __int8 **)&at.column.value.tag;
  _s2os6LoggerVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v63 - v7;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v63 - v10;
  int v70 = *v2;
  int64_t v12 = *((void *)v2 + 1);
  static Log.navigation.getter();
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __int16 v15 = *(unsigned int (**)(void, void, void))(v14 + 48);
  if (v15(v11, 1, v13) == 1)
  {
    outlined destroy of Logger?((uint64_t)v11);
  }
  else
  {
    os_log_type_t v68 = v8;
    int64_t v69 = v12;
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v67 = v14;
      uint64_t v19 = (uint8_t *)v18;
      uint64_t v20 = swift_slowAlloc();
      uint64_t v66 = v5;
      uint64_t v21 = v20;
      uint64_t v71 = v20;
      uint64_t v64 = v15;
      uint64_t v65 = v13;
      *(_DWORD *)uint64_t v19 = 136315138;
      LOBYTE(v72) = v70;
      int64_t v73 = v69;
      uint64_t v22 = NavigationContentAbstractPosition.description.getter();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v71);
      __int16 v15 = v64;
      uint64_t v13 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1872C6000, v16, v17, "[NavigationHostingControllerCache_UIKit] Eject called for index: %s", v19, 0xCu);
      swift_arrayDestroy();
      uint64_t v24 = v21;
      uint64_t v5 = v66;
      MEMORY[0x18C119C60](v24, -1, -1);
      unint64_t v25 = v19;
      uint64_t v14 = v67;
      MEMORY[0x18C119C60](v25, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    uint64_t v8 = v68;
    int64_t v12 = v69;
  }
  uint64_t v26 = (uint64_t *)(v1 + 16);
  if (v12 < 1)
  {
    swift_beginAccess();
    uint64_t v40 = *v26;
    if (*(void *)(*v26 + 16) && (unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v12), (v42 & 1) != 0))
    {
      id v43 = *(id *)(*(void *)(v40 + 56) + 8 * v41);
      id v44 = v43;
    }
    else
    {
      id v43 = 0;
    }
    swift_endAccess();
    static Log.navigation.getter();
    if (v15(v5, 1, v13) != 1)
    {
      id v52 = v43;
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v66 = v5;
        uint64_t v67 = v14;
        uint64_t v55 = swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        uint64_t v71 = (uint64_t)v43;
        uint64_t v72 = v56;
        *(_DWORD *)uint64_t v55 = 136315394;
        type metadata accessor for NavigationStackHostingController<AnyView>?();
        id v57 = v52;
        uint64_t v58 = String.init<A>(describing:)();
        uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, &v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v55 + 12) = 2080;
        if (v43) {
          id v60 = objc_msgSend(v57, sel_parentViewController);
        }
        else {
          id v60 = 0;
        }
        uint64_t v71 = (uint64_t)v60;
        _sSo16UIViewControllerCSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController?, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
        uint64_t v61 = String.init<A>(describing:)();
        uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, &v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1872C6000, v53, v54, "[NavigationHostingControllerCache_UIKit] Controller %s with parent %s had eject called but was not ejected because cache depth was zero.", (uint8_t *)v55, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v56, -1, -1);
        MEMORY[0x18C119C60](v55, -1, -1);

        uint64_t v5 = v66;
        uint64_t v14 = v67;
      }
      else
      {
      }
      (*(void (**)(char *, uint64_t))(v14 + 8))(v5, v13);
      return;
    }

    uint64_t v39 = (uint64_t)v5;
LABEL_22:
    outlined destroy of Logger?(v39);
    return;
  }
  swift_beginAccess();
  uint64_t v27 = *v26;
  if (*(void *)(*v26 + 16))
  {
    unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v12);
    if (v29)
    {
      uint64_t v30 = *(void **)(*(void *)(v27 + 56) + 8 * v28);
      swift_endAccess();
      id v31 = v30;
      uint64_t v32 = AnyView.init<A>(_:)();
      specialized NavigationStackHostingController.replaceRootViewWhenSafe(view:transaction:)(v32);
      swift_release();
      swift_beginAccess();
      unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v12);
      if (v34)
      {
        unint64_t v35 = v33;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v37 = *v26;
        uint64_t v71 = *v26;
        uint64_t *v26 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v37 = v71;
        }
        uint64_t v38 = *(void **)(*(void *)(v37 + 56) + 8 * v35);
        specialized _NativeDictionary._delete(at:)(v35, v37);
        uint64_t *v26 = v37;

        swift_bridgeObjectRelease();
      }
      swift_endAccess();

      return;
    }
  }
  swift_endAccess();
  static Log.navigation.getter();
  if (v15(v8, 1, v13) == 1)
  {
    uint64_t v39 = (uint64_t)v8;
    goto LABEL_22;
  }
  int64_t v45 = v12;
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    uint64_t v71 = v49;
    uint64_t v67 = v14;
    *(_DWORD *)uint64_t v48 = 136315138;
    LOBYTE(v72) = v70;
    int64_t v73 = v45;
    uint64_t v50 = NavigationContentAbstractPosition.description.getter();
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v71);
    uint64_t v14 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1872C6000, v46, v47, "[NavigationHostingControllerCache_UIKit] Attempting to eject an un-cached view controller at index: %s", v48, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v49, -1, -1);
    MEMORY[0x18C119C60](v48, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v13);
}

uint64_t closure #1 in NavigationHostingControllerCache_UIKit.ejectDeferred(at:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = AnyView.init<A>(_:)();
    specialized NavigationStackHostingController.replaceRootViewWhenSafe(view:transaction:)(v1);
    swift_release();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall NavigationHostingControllerCache_UIKit.ejectAll(in:)(SwiftUI::NavigationSplitViewColumn_optional in)
{
  int v2 = *(unsigned __int8 *)in.value.tag;
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v3 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v9 << 6);
LABEL_26:
    uint64_t v16 = *(void *)(v3 + 48);
    int v17 = *(unsigned __int8 *)(v16 + 16 * v12);
    if (v17 == 3)
    {
      if (v2 == 3)
      {
        char v28 = 3;
        goto LABEL_30;
      }
    }
    else if (v2 != 3 && v17 == v2)
    {
      char v28 = v2;
LABEL_30:
      uint64_t v27 = *(void *)(v16 + 16 * v12 + 8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
      }
      unint64_t v19 = *((void *)v10 + 2);
      unint64_t v18 = *((void *)v10 + 3);
      if (v19 >= v18 >> 1) {
        uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, v10);
      }
      *((void *)v10 + 2) = v19 + 1;
      uint64_t v20 = &v10[16 * v19];
      v20[32] = v28;
      *((void *)v20 + 5) = v27;
    }
  }
  int64_t v13 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
LABEL_41:
    __break(1u);
    return;
  }
  if (v13 >= v8) {
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  ++v9;
  if (v14) {
    goto LABEL_25;
  }
  int64_t v9 = v13 + 1;
  if (v13 + 1 >= v8) {
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v9);
  if (v14) {
    goto LABEL_25;
  }
  int64_t v9 = v13 + 2;
  if (v13 + 2 >= v8) {
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v9);
  if (v14) {
    goto LABEL_25;
  }
  int64_t v9 = v13 + 3;
  if (v13 + 3 >= v8) {
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v9);
  if (v14) {
    goto LABEL_25;
  }
  int64_t v9 = v13 + 4;
  if (v13 + 4 >= v8) {
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v9);
  if (v14)
  {
LABEL_25:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v9 << 6);
    goto LABEL_26;
  }
  int64_t v15 = v13 + 5;
  if (v15 < v8)
  {
    unint64_t v14 = *(void *)(v4 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v9 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_41;
        }
        if (v9 >= v8) {
          goto LABEL_35;
        }
        unint64_t v14 = *(void *)(v4 + 8 * v9);
        ++v15;
        if (v14) {
          goto LABEL_25;
        }
      }
    }
    int64_t v9 = v15;
    goto LABEL_25;
  }
LABEL_35:
  swift_release();
  uint64_t v21 = *((void *)v10 + 2);
  if (v21)
  {
    swift_bridgeObjectRetain();
    unint64_t v23 = v10 + 40;
    do
    {
      char v24 = *((unsigned char *)v23 - 8);
      uint64_t v25 = *v23;
      v23 += 2;
      char v29 = v24;
      uint64_t v30 = v25;
      uint64_t v26 = &v29;
      NavigationHostingControllerCache_UIKit.eject(at:)(*(SwiftUI::NavigationContentAbstractPosition *)(&v22 - 1));
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
}

uint64_t NavigationHostingControllerCache_UIKit.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void specialized closure #2 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(UIViewController *a1, UINavigationController *a2, void *a3, UIView *a4, void *a5, char **a6, uint64_t a7, uint64_t a8, void (*a9)(UIView *, void, uint64_t), void (*a10)(BOOL, UINavigationController *, uint64_t))
{
  int v17 = a1;
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v18 = *(void *)(((unint64_t)a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v18) {
      goto LABEL_3;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_38;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_37;
  }
LABEL_3:
  __src = a5;
  unint64_t v41 = a6;
  char v43 = (char)a4;
  if (((unint64_t)v17 & 0xC000000000000001) != 0)
  {
LABEL_38:
    unint64_t v19 = (UIView *)MEMORY[0x18C117680](0, v17);
    goto LABEL_6;
  }
  if (!*(void *)(((unint64_t)v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_40;
  }
  unint64_t v19 = v17->_view;
LABEL_6:
  a4 = v19;
  swift_bridgeObjectRelease();
  int v17 = [(UINavigationController *)a2 topViewController];
  id v20 = [(UINavigationController *)a2 transitionCoordinator];
  uint64_t v42 = a7;
  if (!v20) {
    goto LABEL_21;
  }
  if (objc_msgSend(v20, sel_isCancelled)
    && [(UINavigationController *)a2 lastOperation] == (id)1)
  {
    a6 = &selRef_showsMenuAsPrimaryAction;
    uint64_t v21 = [(UINavigationController *)a2 viewControllers];
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v22 >> 62))
    {
      uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_11;
    }
LABEL_40:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRelease();
    if (v23 >= 2)
    {
      id v24 = [a2 a6[47]];
      unint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v25 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      unint64_t v27 = v26 - 2;
      if (__OFSUB__(v26, 2))
      {
        __break(1u);
      }
      else
      {
        id v28 = [a2 a6[47]];
        uint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v26 & 0xC000000000000001) == 0)
        {
          if ((v27 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v27 < *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            char v29 = (id *)*(id *)(v26 + 8 * v27 + 32);
LABEL_19:
            uint64_t v30 = v29;
            swift_bridgeObjectRelease();

            swift_unknownObjectRelease();
            int v17 = (UIViewController *)v30;
LABEL_22:
            id v31 = v17;
            specialized UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(v31, 0);

            goto LABEL_24;
          }
          __break(1u);
          goto LABEL_46;
        }
      }
      char v29 = (id *)MEMORY[0x18C117680](v27, v26);
      goto LABEL_19;
    }
  }
  swift_unknownObjectRelease();
LABEL_21:
  if (v17) {
    goto LABEL_22;
  }
  id v31 = 0;
LABEL_24:
  uint64_t v32 = (void *)MEMORY[0x1E4FBC8C8];
  unint64_t v33 = (char *)a3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a3) + 0x70);
  swift_beginAccess();
  if (!*((void *)v33 + 2))
  {
LABEL_46:
    __break(1u);
    return;
  }
  uint64_t v34 = *((void *)v33 + 1);
  swift_retain();
  uint64_t v35 = swift_retain();
  specialized UIHostingController.prepareNavigationBar(in:navigationController:isRoot:)(v35, v34, a2, 0);
  swift_release();
  swift_release();
  BOOL v36 = 0;
  *(void *)((char *)a3 + *(void *)((*v32 & *a3) + 0x88)) = a4;
  if (v43)
  {
    memcpy(__dst, __src, sizeof(__dst));
    NavigationState.StackContent.animationSeed.getter(&v46);
    int v37 = v46;
    memcpy(__dst, v41, sizeof(__dst));
    NavigationState.StackContent.animationSeed.getter(&v44);
    BOOL v36 = v37 != -1 && v44 != -1 && v37 == v44;
  }
  -[UINavigationController pushViewController:animated:](a2, sel_pushViewController_animated_, a4, v36, __src);
  a9(a4, 0, v42);
  a10(v36, a2, a8);
}

void specialized NavigationStackHostingController.replaceRootViewWhenSafe(view:transaction:)(uint64_t a1)
{
  int v2 = v1;
  id v4 = objc_msgSend(v1, sel_viewIfLoaded);
  id v5 = objc_msgSend(v4, sel_window);

  if (v5)
  {
    uint64_t v6 = (void *)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x3D8));
    swift_beginAccess();
    *uint64_t v6 = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v7 = direct field offset for UIHostingController.host;
    int64_t v8 = *(void **)((char *)v2 + direct field offset for UIHostingController.host);
    int64_t v9 = (void *)((char *)v8 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v8) + 0x60));
    swift_beginAccess();
    *int64_t v9 = a1;
    swift_retain_n();
    uint64_t v10 = v8;
    swift_release();
    _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_release_n();
    id v11 = *(id *)((char *)v2 + v7);
    ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
  }
}

uint64_t outlined release of NavigationState.StackContent(uint64_t a1)
{
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v3 = *(_OWORD *)(a1 + 224);
  long long v4 = *(_OWORD *)(a1 + 240);
  outlined consume of NavigationState.Base(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((unint64_t *)&v7 + 1),
    *(void *)(a1 + 304));
  return a1;
}

void _sSo16UIViewControllerCSgMaTm_0(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for NSObject(255, a3);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_187F05D88()
{
  return swift_deallocObject();
}

uint64_t sub_187F05DC0()
{
  return swift_deallocObject();
}

uint64_t sub_187F05DD0()
{
  return swift_deallocObject();
}

void type metadata accessor for NavigationStackHostingController<AnyView>?()
{
  if (!lazy cache variable for type metadata for NavigationStackHostingController<AnyView>?)
  {
    _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(255, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NavigationStackHostingController<AnyView>?);
    }
  }
}

void *initializeWithCopy for NavigationHostingControllerCache_UIKit.Source(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_unknownObjectWeakCopyInit();
  return a1;
}

void *assignWithCopy for NavigationHostingControllerCache_UIKit.Source(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

void *initializeWithTake for NavigationHostingControllerCache_UIKit.Source(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectWeakTakeInit();
  return a1;
}

void *assignWithTake for NavigationHostingControllerCache_UIKit.Source(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

ValueMetadata *type metadata accessor for NavigationHostingControllerCache_UIKit.Source()
{
  return &type metadata for NavigationHostingControllerCache_UIKit.Source;
}

void *initializeBufferWithCopyOfBuffer for SelectionManagerBox(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(void *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = v7 + 1;
  }
  if (v8 <= v7) {
    unint64_t v9 = *(void *)(v6 + 64);
  }
  else {
    unint64_t v9 = v8;
  }
  if (v9 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = v9;
  }
  int v11 = *(_DWORD *)(v6 + 80);
  if ((v11 & 0x1000F8) != 0 || (unint64_t)(v10 + 1) > 0x18)
  {
    uint64_t v13 = *(void *)a2;
    *unint64_t v4 = *(void *)a2;
    unint64_t v4 = (void *)(v13 + ((unsigned __int16)((v11 & 0xF8) + 23) & (unsigned __int16)~(v11 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    unsigned int v14 = a2[v10];
    unsigned int v15 = v14 - 3;
    if (v14 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v16 = v10;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          goto LABEL_25;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          goto LABEL_25;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_25;
        case 4:
          int v17 = *(_DWORD *)a2;
LABEL_25:
          int v18 = (v17 | (v15 << (8 * v10))) + 3;
          unsigned int v14 = v17 + 3;
          if (v10 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 2)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      char v19 = 2;
LABEL_35:
      *((unsigned char *)v4 + v10) = v19;
      return v4;
    }
    if (v14 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(v4, a2, v8);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(v4, a2, v5);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      }
      char v19 = 1;
      goto LABEL_35;
    }
    *a1 = *(void *)a2;
    *((unsigned char *)a1 + v10) = 0;
    swift_bridgeObjectRetain();
  }
  return v4;
}

void *initializeWithTake for SelectionManagerBox(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(void *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = v7 + 1;
  }
  if (v8 <= v7) {
    unint64_t v9 = *(void *)(v6 + 64);
  }
  else {
    unint64_t v9 = v8;
  }
  if (v9 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = v9;
  }
  unsigned int v11 = a2[v10];
  unsigned int v12 = v11 - 3;
  if (v11 >= 3)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a2;
        goto LABEL_19;
      case 2:
        int v14 = *(unsigned __int16 *)a2;
        goto LABEL_19;
      case 3:
        int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_19;
      case 4:
        int v14 = *(_DWORD *)a2;
LABEL_19:
        int v15 = (v14 | (v12 << (8 * v10))) + 3;
        unsigned int v11 = v14 + 3;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 2)
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
    char v16 = 2;
  }
  else if (v11 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
      char v16 = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v16 = 1;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
  }
  else
  {
    char v16 = 0;
    *a1 = *(void *)a2;
  }
  *((unsigned char *)a1 + v10) = v16;
  return a1;
}

uint64_t getEnumTagSinglePayload for SelectionManagerBox(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  if (*(_DWORD *)(v3 + 84)) {
    unint64_t v5 = *(void *)(v3 + 64);
  }
  else {
    unint64_t v5 = v4 + 1;
  }
  if (v5 <= v4) {
    unint64_t v5 = *(void *)(v3 + 64);
  }
  uint64_t v6 = 8;
  if (v5 > 8) {
    uint64_t v6 = v5;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_27;
  }
  uint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 253) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    if (v11 < 2)
    {
LABEL_27:
      unsigned int v13 = *((unsigned __int8 *)a1 + v6);
      if (v13 >= 3) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_27;
  }
LABEL_19:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 254;
}

void storeEnumTagSinglePayload for SelectionManagerBox(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84)) {
    unint64_t v7 = *(void *)(v5 + 64);
  }
  else {
    unint64_t v7 = v6 + 1;
  }
  if (v7 <= v6) {
    unint64_t v7 = *(void *)(v5 + 64);
  }
  if (v7 <= 8) {
    unint64_t v7 = 8;
  }
  size_t v8 = v7 + 1;
  if (a3 < 0xFE)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 253) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v10 = a2 - 254;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v7 != -1)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_39:
        __break(1u);
        JUMPOUT(0x187F067D4);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_28;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_27;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_28;
      default:
LABEL_27:
        if (a2) {
LABEL_28:
        }
          a1[v7] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for SelectionManagerBox(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  if (*(_DWORD *)(v2 + 84)) {
    unint64_t v4 = *(void *)(v2 + 64);
  }
  else {
    unint64_t v4 = v3 + 1;
  }
  if (v4 <= v3) {
    unint64_t v4 = *(void *)(v2 + 64);
  }
  uint64_t v5 = 8;
  if (v4 > 8) {
    uint64_t v5 = v4;
  }
  uint64_t v6 = a1[v5];
  int v7 = v6 - 3;
  if (v6 >= 3)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_17;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_17;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_17;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_17:
        unsigned int v10 = (v9 | (v7 << (8 * v5))) + 3;
        LODWORD(v6) = v9 + 3;
        if (v5 >= 4) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v10;
        }
        break;
      default:
        return v6;
    }
  }
  return v6;
}

void destructiveInjectEnumTag for SelectionManagerBox(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  size_t v5 = *(void *)(v4 + 64);
  if (*(_DWORD *)(v4 + 84)) {
    size_t v6 = *(void *)(v4 + 64);
  }
  else {
    size_t v6 = v5 + 1;
  }
  if (v6 <= v5) {
    size_t v6 = *(void *)(v4 + 64);
  }
  if (v6 <= 8) {
    size_t v6 = 8;
  }
  if (a2 > 2)
  {
    if (v6 <= 3) {
      char v7 = ((a2 - 3) >> (8 * v6)) + 3;
    }
    else {
      char v7 = 3;
    }
    if (v6 <= 3) {
      int v8 = (a2 - 3) & ~(-1 << (8 * v6));
    }
    else {
      int v8 = a2 - 3;
    }
    a1[v6] = v7;
    if (v6 >= 4) {
      int v9 = 4;
    }
    else {
      int v9 = v6;
    }
    bzero(a1, v6);
    switch(v9)
    {
      case 2:
        *(_WORD *)a1 = v8;
        break;
      case 3:
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
        break;
      case 4:
        *(_DWORD *)a1 = v8;
        break;
      default:
        *a1 = v8;
        break;
    }
  }
  else
  {
    a1[v6] = a2;
  }
}

uint64_t type metadata accessor for SetToAnySelectionManager()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for OptionalToAnySelectionManager()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SelectionManagerBox.deselect(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v58 = a1;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v56 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v53 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v54 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  id v60 = (char *)v49 - v8;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v55 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  int v14 = (char *)v49 - v13;
  MEMORY[0x1F4188790](v15);
  unint64_t v59 = (char *)v49 - v16;
  MEMORY[0x1F4188790](v17);
  char v19 = (char *)v49 - v18;
  uint64_t v20 = *(void *)(a2 - 8);
  double v22 = MEMORY[0x1F4188790](v21);
  id v24 = (void *)((char *)v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, void *, uint64_t, double))(v20 + 16))(v24, v3, a2, v22);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1) {
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v20 + 8))(v24, a2);
    }
    uint64_t v50 = v3;
    uint64_t v51 = a2;
    uint64_t v26 = v59;
    (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v59, v24, v7);
    uint64_t v27 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v14, v58, v5);
    v49[0] = *(void *)(v27 + 56);
    v49[1] = v27 + 56;
    ((void (*)(char *, void, uint64_t, uint64_t))v49[0])(v14, 0, 1, v5);
    uint64_t v28 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v58 = v5;
    char v29 = v60;
    uint64_t v30 = &v60[v28];
    id v31 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    uint64_t v32 = v26;
    unint64_t v33 = v14;
    v31(v60, v32, v7);
    id v52 = v30;
    v31(v30, v14, v7);
    uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
    uint64_t v35 = v29;
    uint64_t v36 = v58;
    if (v34(v35, 1, v58) == 1)
    {
      int v37 = *(void (**)(char *, uint64_t))(v9 + 8);
      v37(v33, v7);
      v37(v59, v7);
      if (v34(v52, 1, v36) == 1)
      {
        v37(v60, v7);
        uint64_t v38 = v51;
LABEL_12:
        uint64_t v48 = v50;
        (*(void (**)(void *, uint64_t))(v20 + 8))(v50, v38);
        ((void (*)(void *, uint64_t, uint64_t, uint64_t))v49[0])(v48, 1, 1, v36);
        return swift_storeEnumTagMultiPayload();
      }
    }
    else
    {
      v31(v55, v60, v7);
      uint64_t v40 = v52;
      unsigned int v41 = v34(v52, 1, v36);
      uint64_t v42 = v55;
      if (v41 != 1)
      {
        uint64_t v44 = v53;
        (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v53, v40, v36);
        uint64_t v38 = v51;
        int v45 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v36 = v58;
        LODWORD(TupleTypeMetadata2) = v45;
        uint64_t v46 = *(void (**)(char *, uint64_t))(v27 + 8);
        v46(v44, v58);
        os_log_type_t v47 = *(void (**)(char *, uint64_t))(v9 + 8);
        v47(v33, v7);
        v47(v59, v7);
        v46(v42, v36);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v47)(v60, v7);
        if ((TupleTypeMetadata2 & 1) == 0) {
          return result;
        }
        goto LABEL_12;
      }
      char v43 = *(void (**)(char *, uint64_t))(v9 + 8);
      v43(v33, v7);
      v43(v59, v7);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v42, v36);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v60, TupleTypeMetadata2);
  }
  (*(void (**)(void *, uint64_t))(v20 + 8))(v3, a2);
  uint64_t v61 = *v24;
  type metadata accessor for Set();
  Set.remove(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v19, v7);
  *unint64_t v3 = v61;
  return swift_storeEnumTagMultiPayload();
}

uint64_t SelectionManagerBox.select(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *(void *)(v13 - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (uint64_t *)((char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, void *, uint64_t, double))(v14 + 32))(v18, v3, a2, v16);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v3, a1, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v3, 0, 1, v6);
    }
    else
    {
      (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v3, a1, v6);
    }
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 8))(v18, a2);
  }
  else
  {
    uint64_t v22 = *v18;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
    type metadata accessor for Set();
    Set.insert(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    *unint64_t v3 = v22;
    return swift_storeEnumTagMultiPayload();
  }
}

Swift::Bool __swiftcall SelectionManagerBox.deselectAll()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)(v0 - 8);
  double v5 = ((double (*)())MEMORY[0x1F4188790])();
  uint64_t v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t *, uint64_t, double))(v4 + 16))(v7, v2, v3, v5);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = *(void (**)(uint64_t *, uint64_t))(v4 + 8);
      v9(v2, v3);
      Swift::Bool v10 = 1;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 16) - 8) + 56))(v2, 1, 1);
      swift_storeEnumTagMultiPayload();
      v9(v7, v3);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v7, v3);
      return 0;
    }
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v2, v3);
    uint64_t v13 = *v7;
    type metadata accessor for Set();
    Set.removeAll(keepingCapacity:)(0);
    *uint64_t v2 = v13;
    swift_storeEnumTagMultiPayload();
    return 1;
  }
  return v10;
}

uint64_t SelectionManagerBox.description.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v24 - v10;
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (void *)((char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, double))(v16 + 16))(v15, v2, a1, v13);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v18 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v11, v15, v8);
      MEMORY[0x1F4188790](v18);
      uint64_t v19 = *(void *)(a1 + 24);
      v24[-2] = v4;
      v24[-1] = v19;
      _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in SelectionManagerBox.description.getter, (uint64_t)&v24[-4], MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB1A0], v20, (uint64_t)&v25);
      if (v26) {
        uint64_t v21 = v25;
      }
      else {
        uint64_t v21 = 0x63656C6573206F4ELL;
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v7, v15, v4);
      uint64_t v25 = 0;
      unint64_t v26 = 0xE000000000000000;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      uint64_t v21 = v25;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  else
  {
    uint64_t v22 = *v15;
    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    v24[0] = v22;
    type metadata accessor for Set();
    swift_getWitnessTable();
    v24[0] = Array.init<A>(_:)();
    type metadata accessor for Array();
    swift_getWitnessTable();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    swift_bridgeObjectRelease();
    return v25;
  }
  return v21;
}

uint64_t closure #1 in SelectionManagerBox.description.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = String.init<A>(describing:)();
  *a2 = result;
  a2[1] = v7;
  return result;
}

uint64_t SetSelectionManagerProjection.get(base:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for SelectionManagerBox();
  swift_storeEnumTagMultiPayload();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Projection.get(base:) in conformance SetSelectionManagerProjection<A>@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return SetSelectionManagerProjection.get(base:)(*a1, a2);
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance SetSelectionManagerProjection<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized SetSelectionManagerProjection.set(base:newValue:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance OptionalSelectionManagerProjection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized OptionalSelectionManagerProjection.set(base:newValue:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t SetToAnySelectionManager.get(base:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = _setUpCast<A, B>(_:)();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 40) = 0;
  return result;
}

uint64_t closure #1 in SetSelectionManagerProjection.set(base:newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  getContiguousArrayStorageType<A>(for:)(a2, a2);
  uint64_t v6 = *(void *)(a2 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, a1, a2);
  _finalizeUninitializedArray<A>(_:)();
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t result = Set.init<A>(_:)();
  *a3 = result;
  return result;
}

uint64_t protocol witness for Projection.get(base:) in conformance SetToAnySelectionManager<A>@<X0>(uint64_t a1@<X8>)
{
  return SetToAnySelectionManager.get(base:)(a1);
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance SetToAnySelectionManager<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized SetToAnySelectionManager.set(base:newValue:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t OptionalToAnySelectionManager.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v16 - v8;
  uint64_t v10 = *(void *)(a2 - 8);
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, v6, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v17 = 0;
    memset(v16, 0, sizeof(v16));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v9, a2);
    _convertToAnyHashable<A>(_:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, a2);
  }
  uint64_t result = outlined init with take of AnyHashable?((uint64_t)v16, a3);
  *(unsigned char *)(a3 + 40) = 1;
  return result;
}

uint64_t protocol witness for Projection.get(base:) in conformance OptionalToAnySelectionManager<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return OptionalToAnySelectionManager.get(base:)(a1, *(void *)(a2 + 16), a3);
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance OptionalToAnySelectionManager<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized OptionalToAnySelectionManager.set(base:newValue:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t base witness table accessor for Equatable in OptionalToAnySelectionManager<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in SetToAnySelectionManager<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in SetToAnySelectionManager<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in OptionalToAnySelectionManager<A>()
{
  return swift_getWitnessTable();
}

void getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t a2)
{
  if (swift_isClassType()) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    type metadata accessor for Any?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  }
  else
  {
    type metadata accessor for _ContiguousArrayStorage();
  }
}

uint64_t specialized SetSelectionManagerProjection.set(base:newValue:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v30 = a4;
  uint64_t v15 = type metadata accessor for SelectionManagerBox();
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (uint64_t *)((char *)&v29 - v17);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v29 - v17, a2, v15, v16);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v12 + 32))(v14, v18, v11);
      MEMORY[0x1F4188790](v21);
      uint64_t v22 = v30;
      *(&v29 - 2) = a3;
      *(&v29 - 1) = v22;
      uint64_t v23 = type metadata accessor for Set();
      _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in SetToAnySelectionManager.set(base:newValue:), (uint64_t)(&v29 - 4), MEMORY[0x1E4FBC248], v23, v24, (uint64_t)&v31);
      swift_bridgeObjectRelease();
      uint64_t v25 = v31;
      if (!v31) {
        uint64_t v25 = Set.init()();
      }
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 32))(v10, v18, a3);
      getContiguousArrayStorageType<A>(for:)(a3, a3);
      swift_allocObject();
      uint64_t v27 = static Array._adoptStorage(_:count:)();
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v28, v10, a3);
      _finalizeUninitializedArray<A>(_:)();
      uint64_t v31 = v27;
      type metadata accessor for Array();
      swift_getWitnessTable();
      uint64_t v25 = Set.init<A>(_:)();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a3);
    }
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v25 = *v18;
  }
  *a1 = v25;
  return result;
}

uint64_t specialized OptionalSelectionManagerProjection.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SelectionManagerBox();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (void *)((char *)v15 - v8);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v11 + 32))(a1, v9, v10);
    }
    else
    {
      uint64_t v14 = *(void *)(a3 - 8);
      (*(void (**)(uint64_t, void *, uint64_t))(v14 + 32))(a1, v9, a3);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a1, 0, 1, a3);
    }
  }
  else
  {
    v15[1] = *v9;
    type metadata accessor for Set();
    swift_getWitnessTable();
    Collection.first.getter();
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized SetToAnySelectionManager.set(base:newValue:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v29[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = &v29[-v13];
  outlined init with copy of SelectionManagerBox<AnyHashable>(a2, (uint64_t)v34);
  if (v36)
  {
    if (v36 == 1)
    {
      outlined init with take of AnyHashable?((uint64_t)v34, (uint64_t)v32);
      outlined init with copy of AnyHashable?((uint64_t)v32, (uint64_t)v30);
      type metadata accessor for Any?(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
      int v15 = swift_dynamicCast();
      uint64_t v16 = (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v14, v15 ^ 1u, 1, a3);
      MEMORY[0x1F4188790](v16);
      *(void *)&v29[-16] = a3;
      *(void *)&v29[-8] = a4;
      uint64_t v17 = type metadata accessor for Set();
      _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in SetToAnySelectionManager.set(base:newValue:), (uint64_t)&v29[-32], MEMORY[0x1E4FBC248], v17, v18, (uint64_t)&v31);
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v14, v8);
      uint64_t v19 = v31;
      if (!v31)
      {
        uint64_t v20 = static Array._allocateUninitialized(_:)();
        if (MEMORY[0x18C115CC0](v20, a3))
        {
          uint64_t v19 = specialized Set.init(_nonEmptyArrayLiteral:)(v20, a3, a4);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v19 = MEMORY[0x1E4FBC870];
        }
      }
      uint64_t result = outlined destroy of AnyHashable?((uint64_t)v32);
    }
    else
    {
      v32[0] = v34[0];
      v32[1] = v34[1];
      uint64_t v33 = v35;
      outlined init with copy of AnyHashable((uint64_t)v32, (uint64_t)v30);
      int v24 = swift_dynamicCast();
      uint64_t v25 = (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v11, v24 ^ 1u, 1, a3);
      MEMORY[0x1F4188790](v25);
      *(void *)&v29[-16] = a3;
      *(void *)&v29[-8] = a4;
      uint64_t v26 = type metadata accessor for Set();
      _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in SetToAnySelectionManager.set(base:newValue:), (uint64_t)&v29[-32], MEMORY[0x1E4FBC248], v26, v27, (uint64_t)&v31);
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
      uint64_t v19 = v31;
      if (!v31)
      {
        uint64_t v28 = static Array._allocateUninitialized(_:)();
        if (MEMORY[0x18C115CC0](v28, a3))
        {
          uint64_t v19 = specialized Set.init(_nonEmptyArrayLiteral:)(v28, a3, a4);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v19 = MEMORY[0x1E4FBC870];
        }
      }
      uint64_t result = outlined destroy of AnyHashable((uint64_t)v32);
    }
    goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  uint64_t v19 = _setDownCastConditional<A, B>(_:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (v19)
  {
LABEL_17:
    *a1 = v19;
    return result;
  }
  uint64_t v22 = static Array._allocateUninitialized(_:)();
  if (MEMORY[0x18C115CC0](v22, a3))
  {
    uint64_t v23 = specialized Set.init(_nonEmptyArrayLiteral:)(v22, a3, a4);
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v23;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = MEMORY[0x1E4FBC870];
  }
  return result;
}

uint64_t specialized OptionalToAnySelectionManager.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v20 - v11;
  double v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v20 - v15;
  (*(void (**)(uint64_t, uint64_t, double))(v7 + 8))(a1, v6, v14);
  outlined init with copy of SelectionManagerBox<AnyHashable>(a2, (uint64_t)v22);
  if (v24)
  {
    if (v24 == 1)
    {
      outlined init with take of AnyHashable?((uint64_t)v22, (uint64_t)v20);
      type metadata accessor for Any?(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
      int v17 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v12, v17 ^ 1u, 1, a3);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v12, v6);
    }
    else
    {
      v20[0] = v22[0];
      v20[1] = v22[1];
      uint64_t v21 = v23;
      swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v9, 0, 1, a3);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v9, v6);
    }
  }
  else
  {
    specialized Collection.first.getter(*(uint64_t *)&v22[0], (uint64_t)v20);
    swift_bridgeObjectRelease();
    type metadata accessor for Any?(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
    int v19 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v16, v19 ^ 1u, 1, a3);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v16, v6);
  }
}

uint64_t outlined init with copy of SelectionManagerBox<AnyHashable>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SelectionManagerBox<AnyHashable>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in SetToAnySelectionManager.set(base:newValue:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in SetSelectionManagerProjection.set(base:newValue:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t partial apply for closure #1 in SelectionManagerBox.description.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in SelectionManagerBox.description.getter(a1, a2);
}

uint64_t type metadata accessor for SetSelectionManagerProjection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in SetSelectionManagerProjection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in SetSelectionManagerProjection<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in SetToAnySelectionManager.set(base:newValue:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for closure #2 in SetToAnySelectionManager.set(base:newValue:)(a1, a2);
}

ValueMetadata *type metadata accessor for CommandsList.Key()
{
  return &type metadata for CommandsList.Key;
}

void CommandsList.resolveOperations(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommandOperation();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CommandsList.Item.Value(0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (void *)((char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for CommandsList.Item(0) - 8;
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a2 + 16);
  if (v14)
  {
    uint64_t v15 = a2 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v16 = *(void *)(v11 + 72);
    v18[1] = a2;
    uint64_t v19 = a1;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of CommandsList.Item(v15, (uint64_t)v13, type metadata accessor for CommandsList.Item);
      outlined init with copy of CommandsList.Item((uint64_t)v13, (uint64_t)v9, type metadata accessor for CommandsList.Item.Value);
      outlined destroy of CommandsList.Item((uint64_t)v13, type metadata accessor for CommandsList.Item);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        specialized Set._Variant.insert(_:)(&v20, *v9);
      }
      else
      {
        outlined init with take of CommandOperation((uint64_t)v9, (uint64_t)v6);
        int v17 = *(void (**)(char *, uint64_t))&v6[*(int *)(v4 + 24)];
        if (v17) {
          v17(v6, v19);
        }
        outlined destroy of CommandsList.Item((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CommandOperation);
      }
      v15 += v16;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
  }
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance CommandsList.Key(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

void CommandsList.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CommandsList.Item(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    uint64_t v8 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v9 = *(void *)(v4 + 72);
    swift_bridgeObjectRetain();
    int64_t v10 = 0;
    do
    {
      outlined init with copy of CommandsList.Item(v8, (uint64_t)v6, type metadata accessor for CommandsList.Item);
      if (*(void *)&v6[*(int *)(v3 + 20)] > v10) {
        int64_t v10 = *(void *)&v6[*(int *)(v3 + 20)];
      }
      outlined destroy of CommandsList.Item((uint64_t)v6, type metadata accessor for CommandsList.Item);
      v8 += v9;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    int64_t v10 = 0;
  }
  Hasher._combine(_:)(v10);
}

Swift::Int CommandsList.hashValue.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CommandsList.Item(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v8 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
    do
    {
      outlined init with copy of CommandsList.Item(v7, (uint64_t)v5, type metadata accessor for CommandsList.Item);
      if (*(void *)&v5[*(int *)(v2 + 20)] > v9) {
        int64_t v9 = *(void *)&v5[*(int *)(v2 + 20)];
      }
      outlined destroy of CommandsList.Item((uint64_t)v5, type metadata accessor for CommandsList.Item);
      v7 += v8;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    int64_t v9 = 0;
  }
  Hasher._combine(_:)(v9);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommandsList()
{
  return CommandsList.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance CommandsList(uint64_t a1)
{
  CommandsList.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommandsList()
{
  uint64_t v1 = type metadata accessor for CommandsList.Item(0);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  Hasher.init(_seed:)();
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v8 = *(void *)(v2 + 72);
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
    do
    {
      outlined init with copy of CommandsList.Item(v7, (uint64_t)v4, type metadata accessor for CommandsList.Item);
      if (*(void *)&v4[*(int *)(v1 + 20)] > v9) {
        int64_t v9 = *(void *)&v4[*(int *)(v1 + 20)];
      }
      outlined destroy of CommandsList.Item((uint64_t)v4, type metadata accessor for CommandsList.Item);
      v7 += v8;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    int64_t v9 = 0;
  }
  Hasher._combine(_:)(v9);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommandsList(uint64_t *a1, uint64_t *a2)
{
  return specialized static CommandsList.== infix(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type CommandsList and conformance CommandsList()
{
  unint64_t result = lazy protocol witness table cache variable for type CommandsList and conformance CommandsList;
  if (!lazy protocol witness table cache variable for type CommandsList and conformance CommandsList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsList and conformance CommandsList);
  }
  return result;
}

uint64_t specialized static CommandsList.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommandsList.Item(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  int64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11)
  {
    uint64_t v16 = *(void *)(a2 + 16);
    if (!v16) {
      return 1;
    }
    uint64_t v15 = 0;
    unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    goto LABEL_11;
  }
  uint64_t v22 = a2;
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v5 + 72);
  swift_bridgeObjectRetain();
  uint64_t v15 = 0;
  do
  {
    outlined init with copy of CommandsList.Item(v13, (uint64_t)v10, type metadata accessor for CommandsList.Item);
    if (*(void *)&v10[*(int *)(v4 + 20)] > v15) {
      uint64_t v15 = *(void *)&v10[*(int *)(v4 + 20)];
    }
    outlined destroy of CommandsList.Item((uint64_t)v10, type metadata accessor for CommandsList.Item);
    v13 += v14;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  a2 = v22;
  uint64_t v16 = *(void *)(v22 + 16);
  if (v16)
  {
LABEL_11:
    uint64_t v17 = a2 + v12;
    uint64_t v18 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain();
    uint64_t v19 = 0;
    do
    {
      outlined init with copy of CommandsList.Item(v17, (uint64_t)v7, type metadata accessor for CommandsList.Item);
      if (*(void *)&v7[*(int *)(v4 + 20)] > v19) {
        uint64_t v19 = *(void *)&v7[*(int *)(v4 + 20)];
      }
      outlined destroy of CommandsList.Item((uint64_t)v7, type metadata accessor for CommandsList.Item);
      v17 += v18;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    return v15 == v19;
  }
  return !v15;
}

uint64_t type metadata accessor for CommandsList.Item(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for CommandsList.Item);
}

uint64_t type metadata accessor for CommandsList.Item.Value(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for CommandsList.Item.Value);
}

uint64_t outlined destroy of CommandsList.Item(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for CommandsList.Item.Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v8 = type metadata accessor for CommandOperation();
      uint64_t v9 = *(int *)(v8 + 20);
      int64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = *(uint64_t *)((char *)a2 + v9);
      uint64_t v13 = *(uint64_t *)((char *)a2 + v9 + 8);
      char v14 = *((unsigned char *)a2 + v9 + 16);
      outlined copy of Text.Storage(v12, v13, v14);
      *(void *)int64_t v10 = v12;
      *((void *)v10 + 1) = v13;
      v10[16] = v14;
      *((void *)v10 + 3) = *((void *)v11 + 3);
      uint64_t v15 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      uint64_t v16 = &v10[v15];
      uint64_t v17 = &v11[v15];
      uint64_t v18 = type metadata accessor for UUID();
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
      swift_bridgeObjectRetain();
      v19(v16, v17, v18);
      uint64_t v20 = *(int *)(v8 + 24);
      uint64_t v21 = (uint64_t *)((char *)a1 + v20);
      uint64_t v22 = (uint64_t *)((char *)a2 + v20);
      if (*v22)
      {
        uint64_t v23 = v22[1];
        *uint64_t v21 = *v22;
        v21[1] = v23;
        swift_retain();
      }
      else
      {
        *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for CommandsList.Item.Value(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (!result)
  {
    uint64_t v3 = type metadata accessor for CommandOperation();
    uint64_t v4 = a1 + *(int *)(v3 + 20);
    outlined consume of Text.Storage(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
    swift_bridgeObjectRelease();
    uint64_t v5 = v4 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v6 = type metadata accessor for UUID();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
    if (*(void *)(a1 + *(int *)(v3 + 24)))
    {
      return swift_release();
    }
  }
  return result;
}

unsigned char *initializeWithCopy for CommandsList.Item.Value(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v6 = type metadata accessor for CommandOperation();
    uint64_t v7 = *(int *)(v6 + 20);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = &a2[v7];
    uint64_t v10 = *(void *)&a2[v7];
    uint64_t v11 = *(void *)&a2[v7 + 8];
    char v12 = a2[v7 + 16];
    outlined copy of Text.Storage(v10, v11, v12);
    *(void *)uint64_t v8 = v10;
    *((void *)v8 + 1) = v11;
    v8[16] = v12;
    *((void *)v8 + 3) = *((void *)v9 + 3);
    uint64_t v13 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    char v14 = &v8[v13];
    uint64_t v15 = &v9[v13];
    uint64_t v16 = type metadata accessor for UUID();
    uint64_t v17 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
    uint64_t v18 = *(int *)(v6 + 24);
    uint64_t v19 = &a1[v18];
    uint64_t v20 = &a2[v18];
    if (*v20)
    {
      uint64_t v21 = v20[1];
      void *v19 = *v20;
      v19[1] = v21;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

unsigned char *assignWithCopy for CommandsList.Item.Value(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CommandsList.Item((uint64_t)a1, type metadata accessor for CommandsList.Item.Value);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      uint64_t v6 = type metadata accessor for CommandOperation();
      uint64_t v7 = *(int *)(v6 + 20);
      uint64_t v8 = &a1[v7];
      uint64_t v9 = &a2[v7];
      uint64_t v10 = *(void *)&a2[v7];
      uint64_t v11 = *(void *)&a2[v7 + 8];
      char v12 = a2[v7 + 16];
      outlined copy of Text.Storage(v10, v11, v12);
      *(void *)uint64_t v8 = v10;
      *((void *)v8 + 1) = v11;
      v8[16] = v12;
      *((void *)v8 + 3) = *((void *)v9 + 3);
      uint64_t v13 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      char v14 = &v8[v13];
      uint64_t v15 = &v9[v13];
      uint64_t v16 = type metadata accessor for UUID();
      uint64_t v17 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      v17(v14, v15, v16);
      uint64_t v18 = *(int *)(v6 + 24);
      uint64_t v19 = &a1[v18];
      uint64_t v20 = &a2[v18];
      if (*v20)
      {
        uint64_t v21 = v20[1];
        void *v19 = *v20;
        v19[1] = v21;
        swift_retain();
      }
      else
      {
        *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

unsigned char *initializeWithTake for CommandsList.Item.Value(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v6 = type metadata accessor for CommandOperation();
    uint64_t v7 = *(int *)(v6 + 20);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = &a2[v7];
    long long v10 = *(_OWORD *)&a2[v7 + 16];
    *uint64_t v8 = *(_OWORD *)&a2[v7];
    v8[1] = v10;
    uint64_t v11 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    char v12 = (char *)v8 + v11;
    uint64_t v13 = &v9[v11];
    uint64_t v14 = type metadata accessor for UUID();
    (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    uint64_t v15 = *(int *)(v6 + 24);
    uint64_t v16 = &a1[v15];
    uint64_t v17 = (uint64_t *)&a2[v15];
    uint64_t v18 = *v17;
    if (*v17)
    {
      uint64_t v19 = v17[1];
      *uint64_t v16 = v18;
      v16[1] = v19;
    }
    else
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

unsigned char *assignWithTake for CommandsList.Item.Value(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CommandsList.Item((uint64_t)a1, type metadata accessor for CommandsList.Item.Value);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      uint64_t v6 = type metadata accessor for CommandOperation();
      uint64_t v7 = *(int *)(v6 + 20);
      uint64_t v8 = &a1[v7];
      uint64_t v9 = &a2[v7];
      long long v10 = *(_OWORD *)&a2[v7 + 16];
      *uint64_t v8 = *(_OWORD *)&a2[v7];
      v8[1] = v10;
      uint64_t v11 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      char v12 = (char *)v8 + v11;
      uint64_t v13 = &v9[v11];
      uint64_t v14 = type metadata accessor for UUID();
      (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
      uint64_t v15 = *(int *)(v6 + 24);
      uint64_t v16 = &a1[v15];
      uint64_t v17 = (uint64_t *)&a2[v15];
      uint64_t v18 = *v17;
      if (*v17)
      {
        uint64_t v19 = v17[1];
        *uint64_t v16 = v18;
        v16[1] = v19;
      }
      else
      {
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for CommandsList.Item.Value()
{
  uint64_t result = type metadata accessor for CommandOperation();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CommandsList.Item(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for CommandsList.Item.Value(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v25 = type metadata accessor for CommandOperation();
      uint64_t v9 = *(int *)(v25 + 20);
      long long v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = *(uint64_t *)((char *)a2 + v9);
      uint64_t v13 = *(uint64_t *)((char *)a2 + v9 + 8);
      char v14 = *((unsigned char *)a2 + v9 + 16);
      outlined copy of Text.Storage(v12, v13, v14);
      *(void *)long long v10 = v12;
      *((void *)v10 + 1) = v13;
      v10[16] = v14;
      *((void *)v10 + 3) = *((void *)v11 + 3);
      uint64_t v15 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      uint64_t v16 = &v10[v15];
      uint64_t v17 = &v11[v15];
      uint64_t v18 = type metadata accessor for UUID();
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
      swift_bridgeObjectRetain();
      v19(v16, v17, v18);
      uint64_t v20 = *(int *)(v25 + 24);
      uint64_t v21 = (uint64_t *)((char *)a1 + v20);
      uint64_t v22 = (uint64_t *)((char *)a2 + v20);
      if (*v22)
      {
        uint64_t v23 = v22[1];
        *uint64_t v21 = *v22;
        v21[1] = v23;
        swift_retain();
      }
      else
      {
        *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
      }
      swift_storeEnumTagMultiPayload();
    }
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for CommandsList.Item(uint64_t a1)
{
  type metadata accessor for CommandsList.Item.Value(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (!result)
  {
    uint64_t v3 = type metadata accessor for CommandOperation();
    uint64_t v4 = a1 + *(int *)(v3 + 20);
    outlined consume of Text.Storage(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
    swift_bridgeObjectRelease();
    uint64_t v5 = v4 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v6 = type metadata accessor for UUID();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
    if (*(void *)(a1 + *(int *)(v3 + 24)))
    {
      return swift_release();
    }
  }
  return result;
}

unsigned char *initializeWithCopy for CommandsList.Item(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CommandsList.Item.Value(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = type metadata accessor for CommandOperation();
    uint64_t v8 = *(int *)(v7 + 20);
    uint64_t v9 = &a1[v8];
    long long v10 = &a2[v8];
    uint64_t v11 = *(void *)&a2[v8];
    uint64_t v12 = *(void *)&a2[v8 + 8];
    char v13 = a2[v8 + 16];
    outlined copy of Text.Storage(v11, v12, v13);
    *(void *)uint64_t v9 = v11;
    *((void *)v9 + 1) = v12;
    v9[16] = v13;
    *((void *)v9 + 3) = *((void *)v10 + 3);
    uint64_t v14 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    uint64_t v17 = type metadata accessor for UUID();
    uint64_t v18 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v17 - 8) + 16);
    swift_bridgeObjectRetain();
    v18(v15, v16, v17);
    uint64_t v19 = *(int *)(v7 + 24);
    uint64_t v20 = &a1[v19];
    uint64_t v21 = &a2[v19];
    if (*v21)
    {
      uint64_t v22 = v21[1];
      *uint64_t v20 = *v21;
      v20[1] = v22;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  return a1;
}

unsigned char *assignWithCopy for CommandsList.Item(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CommandsList.Item((uint64_t)a1, type metadata accessor for CommandsList.Item.Value);
    uint64_t v6 = type metadata accessor for CommandsList.Item.Value(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      uint64_t v23 = type metadata accessor for CommandOperation();
      uint64_t v7 = *(int *)(v23 + 20);
      uint64_t v8 = &a1[v7];
      uint64_t v9 = &a2[v7];
      uint64_t v10 = *(void *)&a2[v7];
      uint64_t v11 = *(void *)&a2[v7 + 8];
      char v12 = a2[v7 + 16];
      outlined copy of Text.Storage(v10, v11, v12);
      *(void *)uint64_t v8 = v10;
      *((void *)v8 + 1) = v11;
      v8[16] = v12;
      *((void *)v8 + 3) = *((void *)v9 + 3);
      uint64_t v13 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      uint64_t v14 = &v8[v13];
      uint64_t v15 = &v9[v13];
      uint64_t v16 = type metadata accessor for UUID();
      uint64_t v17 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      v17(v14, v15, v16);
      uint64_t v18 = *(int *)(v23 + 24);
      uint64_t v19 = &a1[v18];
      uint64_t v20 = &a2[v18];
      if (*v20)
      {
        uint64_t v21 = v20[1];
        void *v19 = *v20;
        v19[1] = v21;
        swift_retain();
      }
      else
      {
        *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  return a1;
}

unsigned char *initializeWithTake for CommandsList.Item(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CommandsList.Item.Value(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = type metadata accessor for CommandOperation();
    uint64_t v8 = *(int *)(v7 + 20);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    long long v11 = *(_OWORD *)&a2[v8 + 16];
    *uint64_t v9 = *(_OWORD *)&a2[v8];
    v9[1] = v11;
    uint64_t v12 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v13 = (char *)v9 + v12;
    uint64_t v14 = &v10[v12];
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    uint64_t v16 = *(int *)(v7 + 24);
    uint64_t v17 = &a1[v16];
    uint64_t v18 = (uint64_t *)&a2[v16];
    uint64_t v19 = *v18;
    if (*v18)
    {
      uint64_t v20 = v18[1];
      *uint64_t v17 = v19;
      v17[1] = v20;
    }
    else
    {
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  return a1;
}

unsigned char *assignWithTake for CommandsList.Item(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CommandsList.Item((uint64_t)a1, type metadata accessor for CommandsList.Item.Value);
    uint64_t v6 = type metadata accessor for CommandsList.Item.Value(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      uint64_t v7 = type metadata accessor for CommandOperation();
      uint64_t v8 = *(int *)(v7 + 20);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      long long v11 = *(_OWORD *)&a2[v8 + 16];
      *uint64_t v9 = *(_OWORD *)&a2[v8];
      v9[1] = v11;
      uint64_t v12 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      uint64_t v13 = (char *)v9 + v12;
      uint64_t v14 = &v10[v12];
      uint64_t v15 = type metadata accessor for UUID();
      (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      uint64_t v16 = *(int *)(v7 + 24);
      uint64_t v17 = &a1[v16];
      uint64_t v18 = (uint64_t *)&a2[v16];
      uint64_t v19 = *v18;
      if (*v18)
      {
        uint64_t v20 = v18[1];
        *uint64_t v17 = v19;
        v17[1] = v20;
      }
      else
      {
        *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandsList.Item(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187F0A8C4);
}

uint64_t sub_187F0A8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommandsList.Item.Value(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for CommandsList.Item(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187F0A944);
}

uint64_t sub_187F0A944(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommandsList.Item.Value(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for CommandsList.Item()
{
  uint64_t result = type metadata accessor for CommandsList.Item.Value(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void NavigationStackProxy.icon.getter()
{
}

void NavigationStackProxy.iconUTType.getter()
{
}

void NavigationStackProxy.hasPushedContent.getter()
{
}

void NavigationStackProxy.pathTokenV2.getter()
{
}

Swift::Void __swiftcall NavigationStackProxy.popLast()()
{
}

void static NavigationStackProxy.== infix(_:_:)()
{
}

void NavigationStackProxy.restorePath(from:)()
{
}

void NavigationStackProxy.restorePathV2(from:)()
{
}

void static NavigationStackProxy.Key.defaultValue.getter()
{
}

void static NavigationStackProxy.Key.reduce(value:nextValue:)()
{
}

void View.onNavigationProxyChange(perform:)()
{
}

uint64_t destroy for NavigationStackProxy(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 24);
  long long v9 = *(_OWORD *)(a1 + 312);
  long long v7 = *(_OWORD *)(a1 + 280);
  long long v8 = *(_OWORD *)(a1 + 296);
  long long v6 = *(_OWORD *)(a1 + 248);
  outlined consume of NavigationState.Base(*(void *)(a1 + 24), *(void *)(a1 + 32), v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], v2[10], v2[11], v2[12], v2[13], v2[14], v2[15], v2[16], v2[17], v2[18],
    v2[19],
    v2[20],
    v2[21],
    v2[22],
    v2[23],
    v2[24],
    v2[25],
    v2[26],
    v2[27],
    v6,
    *((uint64_t *)&v6 + 1),
    *(void *)(a1 + 264),
    *(void *)(a1 + 272),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((unint64_t *)&v9 + 1),
    *(void *)(a1 + 328));
  if (v2[50] != 1)
  {
    swift_weakDestroy();
    swift_release();
    swift_release();
  }
  uint64_t v3 = (char *)(v2 + 56);
  swift_release();
  uint64_t result = swift_release();
  uint64_t v5 = *(void *)(a1 + 480);
  if (v5)
  {
    if (v5 == 1) {
      goto LABEL_9;
    }
    outlined consume of Text.Storage(*(void *)(a1 + 456), *(void *)(a1 + 464), *v3);
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 488) != 1) {
    swift_release();
  }
  uint64_t result = swift_release();
LABEL_9:
  if (*(void *)(a1 + 544))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 520), *(void *)(a1 + 528), v3[64]);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for NavigationStackProxy(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v69 = *(void *)(a2 + 96);
  uint64_t v70 = *(void *)(a2 + 88);
  uint64_t v67 = *(void *)(a2 + 112);
  uint64_t v68 = *(void *)(a2 + 104);
  uint64_t v65 = *(void *)(a2 + 128);
  uint64_t v66 = *(void *)(a2 + 120);
  uint64_t v63 = *(void *)(a2 + 144);
  uint64_t v64 = *(void *)(a2 + 136);
  uint64_t v61 = *(void *)(a2 + 160);
  uint64_t v62 = *(void *)(a2 + 152);
  uint64_t v59 = *(void *)(a2 + 176);
  uint64_t v60 = *(void *)(a2 + 168);
  uint64_t v57 = *(void *)(a2 + 192);
  uint64_t v58 = *(void *)(a2 + 184);
  uint64_t v30 = *(void *)(a2 + 200);
  uint64_t v31 = *(void *)(a2 + 208);
  uint64_t v32 = *(void *)(a2 + 216);
  uint64_t v33 = *(void *)(a2 + 224);
  uint64_t v34 = *(void *)(a2 + 232);
  uint64_t v35 = *(void *)(a2 + 240);
  uint64_t v36 = *(void *)(a2 + 248);
  uint64_t v37 = *(void *)(a2 + 256);
  uint64_t v38 = *(void *)(a2 + 264);
  uint64_t v39 = *(void *)(a2 + 272);
  uint64_t v40 = *(void *)(a2 + 280);
  uint64_t v41 = *(void *)(a2 + 288);
  uint64_t v42 = *(void *)(a2 + 296);
  uint64_t v43 = *(void *)(a2 + 304);
  uint64_t v44 = *(void *)(a2 + 312);
  unint64_t v45 = *(void *)(a2 + 320);
  uint64_t v46 = *(void *)(a2 + 328);
  uint64_t v47 = *(void *)(a2 + 336);
  uint64_t v48 = *(void *)(a2 + 344);
  uint64_t v49 = *(void *)(a2 + 352);
  uint64_t v50 = *(void *)(a2 + 360);
  uint64_t v51 = *(void *)(a2 + 368);
  uint64_t v52 = *(void *)(a2 + 376);
  uint64_t v53 = *(void *)(a2 + 384);
  uint64_t v54 = *(void *)(a2 + 392);
  uint64_t v55 = *(void *)(a2 + 400);
  uint64_t v56 = *(void *)(a2 + 408);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  outlined copy of NavigationState.Base(v4, v6, v7, v8, v9, v10, v11, v12, v70, v69, v68, v67, v66, v65, v64, v63, v62, v61, v60,
    v59,
    v58,
    v57,
    v30,
    v31,
    v32,
    v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    v46);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 88) = v70;
  *(void *)(a1 + 96) = v69;
  *(void *)(a1 + 104) = v68;
  *(void *)(a1 + 112) = v67;
  *(void *)(a1 + 120) = v66;
  *(void *)(a1 + 128) = v65;
  *(void *)(a1 + 136) = v64;
  *(void *)(a1 + 144) = v63;
  *(void *)(a1 + 152) = v62;
  *(void *)(a1 + 160) = v61;
  *(void *)(a1 + 168) = v60;
  *(void *)(a1 + 176) = v59;
  *(void *)(a1 + 184) = v58;
  *(void *)(a1 + 192) = v57;
  *(void *)(a1 + 200) = v30;
  *(void *)(a1 + 208) = v31;
  *(void *)(a1 + 216) = v32;
  *(void *)(a1 + 224) = v33;
  *(void *)(a1 + 232) = v34;
  *(void *)(a1 + 240) = v35;
  *(void *)(a1 + 248) = v36;
  *(void *)(a1 + 256) = v37;
  *(void *)(a1 + 264) = v38;
  *(void *)(a1 + 272) = v39;
  *(void *)(a1 + 280) = v40;
  *(void *)(a1 + 288) = v41;
  *(void *)(a1 + 296) = v42;
  *(void *)(a1 + 304) = v43;
  *(void *)(a1 + 312) = v44;
  *(void *)(a1 + 320) = v45;
  *(void *)(a1 + 328) = v46;
  *(void *)(a1 + 336) = v47;
  *(void *)(a1 + 344) = v48;
  *(void *)(a1 + 352) = v49;
  *(void *)(a1 + 360) = v50;
  *(void *)(a1 + 368) = v51;
  *(void *)(a1 + 376) = v52;
  *(void *)(a1 + 384) = v53;
  *(void *)(a1 + 392) = v54;
  *(void *)(a1 + 400) = v55;
  *(void *)(a1 + 408) = v56;
  if (*(void *)(a2 + 424) == 1)
  {
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(void *)(a1 + 432) = *(void *)(a2 + 432);
  }
  else
  {
    swift_weakCopyInit();
    uint64_t v13 = *(void *)(a2 + 432);
    *(void *)(a1 + 424) = *(void *)(a2 + 424);
    *(void *)(a1 + 432) = v13;
    swift_retain();
    swift_retain();
  }
  uint64_t v14 = (char *)(a2 + 472);
  uint64_t v15 = *(void *)(a2 + 448);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a1 + 448) = v15;
  uint64_t v16 = (_OWORD *)(a1 + 456);
  uint64_t v17 = (_OWORD *)(a2 + 456);
  uint64_t v18 = *(void *)(a2 + 480);
  swift_retain();
  swift_retain();
  if (!v18)
  {
    long long v21 = *(_OWORD *)(a2 + 472);
    *uint64_t v16 = *v17;
    *(_OWORD *)(a1 + 472) = v21;
    goto LABEL_10;
  }
  if (v18 != 1)
  {
    uint64_t v22 = *(void *)(a2 + 456);
    uint64_t v23 = *(void *)(a2 + 464);
    char v24 = *v14;
    outlined copy of Text.Storage(v22, v23, *v14);
    *(void *)(a1 + 456) = v22;
    *(void *)(a1 + 464) = v23;
    *(unsigned char *)(a1 + 472) = v24;
    *(void *)(a1 + 480) = *(void *)(a2 + 480);
    swift_bridgeObjectRetain();
LABEL_10:
    uint64_t v25 = *(void *)(a2 + 488);
    if (v25 != 1) {
      uint64_t v25 = swift_retain();
    }
    *(void *)(a1 + 488) = v25;
    *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
    *(void *)(a1 + 504) = *(void *)(a2 + 504);
    *(unsigned char *)(a1 + 512) = *(unsigned char *)(a2 + 512);
    swift_retain();
    if (!*(void *)(a2 + 544)) {
      goto LABEL_7;
    }
LABEL_13:
    uint64_t v26 = *(void *)(a2 + 520);
    uint64_t v27 = *(void *)(a2 + 528);
    char v28 = *(unsigned char *)(a2 + 536);
    outlined copy of Text.Storage(v26, v27, v28);
    *(void *)(a1 + 520) = v26;
    *(void *)(a1 + 528) = v27;
    *(unsigned char *)(a1 + 536) = v28;
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
    swift_bridgeObjectRetain();
    return a1;
  }
  long long v19 = *(_OWORD *)(a2 + 472);
  *uint64_t v16 = *v17;
  *(_OWORD *)(a1 + 472) = v19;
  *(_OWORD *)(a1 + 488) = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 497) = *(_OWORD *)(a2 + 497);
  if (*(void *)(a2 + 544)) {
    goto LABEL_13;
  }
LABEL_7:
  long long v20 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 536) = v20;
  return a1;
}

uint64_t assignWithCopy for NavigationStackProxy(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  uint64_t v128 = *((void *)a2 + 4);
  uint64_t v129 = *((void *)a2 + 3);
  uint64_t v126 = *((void *)a2 + 6);
  uint64_t v127 = *((void *)a2 + 5);
  uint64_t v124 = *((void *)a2 + 8);
  uint64_t v125 = *((void *)a2 + 7);
  uint64_t v122 = *((void *)a2 + 10);
  uint64_t v123 = *((void *)a2 + 9);
  uint64_t v120 = *((void *)a2 + 12);
  uint64_t v121 = *((void *)a2 + 11);
  uint64_t v118 = *((void *)a2 + 14);
  uint64_t v119 = *((void *)a2 + 13);
  uint64_t v116 = *((void *)a2 + 16);
  uint64_t v117 = *((void *)a2 + 15);
  uint64_t v114 = *((void *)a2 + 18);
  uint64_t v115 = *((void *)a2 + 17);
  uint64_t v112 = *((void *)a2 + 20);
  uint64_t v113 = *((void *)a2 + 19);
  uint64_t v110 = *((void *)a2 + 22);
  uint64_t v111 = *((void *)a2 + 21);
  uint64_t v109 = *((void *)a2 + 23);
  uint64_t v5 = *((void *)a2 + 25);
  uint64_t v108 = *((void *)a2 + 24);
  uint64_t v6 = *((void *)a2 + 26);
  uint64_t v7 = *((void *)a2 + 27);
  uint64_t v9 = *((void *)a2 + 28);
  uint64_t v8 = *((void *)a2 + 29);
  uint64_t v10 = *((void *)a2 + 31);
  uint64_t v11 = *((void *)a2 + 32);
  uint64_t v88 = *((void *)a2 + 30);
  uint64_t v89 = *((void *)a2 + 33);
  uint64_t v90 = *((void *)a2 + 34);
  uint64_t v91 = *((void *)a2 + 35);
  uint64_t v92 = *((void *)a2 + 36);
  uint64_t v93 = *((void *)a2 + 37);
  uint64_t v94 = *((void *)a2 + 38);
  uint64_t v95 = *((void *)a2 + 39);
  unint64_t v96 = *((void *)a2 + 40);
  uint64_t v97 = *((void *)a2 + 41);
  uint64_t v98 = *((void *)a2 + 42);
  uint64_t v99 = *((void *)a2 + 43);
  uint64_t v100 = *((void *)a2 + 44);
  uint64_t v101 = *((void *)a2 + 45);
  uint64_t v102 = *((void *)a2 + 46);
  uint64_t v103 = *((void *)a2 + 47);
  uint64_t v104 = *((void *)a2 + 48);
  uint64_t v105 = *((void *)a2 + 49);
  uint64_t v106 = *((void *)a2 + 50);
  uint64_t v107 = *((void *)a2 + 51);
  outlined copy of NavigationState.Base(v129, v128, v127, v126, v125, v124, v123, v122, v121, v120, v119, v118, v117, v116, v115, v114, v113, v112, v111,
    v110,
    v109,
    v108,
    v5,
    v6,
    v7,
    v9,
    v8,
    v88,
    v10,
    v11,
    v89,
    v90,
    v91,
    v92,
    v93,
    v94,
    v95,
    v96,
    v97);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = v129;
  *(void *)(a1 + 32) = v128;
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 64);
  *(void *)(a1 + 40) = v127;
  *(void *)(a1 + 48) = v126;
  uint64_t v19 = *(void *)(a1 + 72);
  uint64_t v20 = *(void *)(a1 + 80);
  *(void *)(a1 + 56) = v125;
  *(void *)(a1 + 64) = v124;
  *(void *)(a1 + 72) = v123;
  *(void *)(a1 + 80) = v122;
  long long v21 = *(_OWORD *)(a1 + 88);
  long long v22 = *(_OWORD *)(a1 + 104);
  *(void *)(a1 + 88) = v121;
  *(void *)(a1 + 96) = v120;
  *(void *)(a1 + 104) = v119;
  *(void *)(a1 + 112) = v118;
  long long v23 = *(_OWORD *)(a1 + 120);
  long long v24 = *(_OWORD *)(a1 + 136);
  *(void *)(a1 + 120) = v117;
  *(void *)(a1 + 128) = v116;
  *(void *)(a1 + 136) = v115;
  *(void *)(a1 + 144) = v114;
  long long v25 = *(_OWORD *)(a1 + 152);
  long long v26 = *(_OWORD *)(a1 + 168);
  *(void *)(a1 + 152) = v113;
  *(void *)(a1 + 160) = v112;
  *(void *)(a1 + 168) = v111;
  *(void *)(a1 + 176) = v110;
  long long v27 = *(_OWORD *)(a1 + 184);
  long long v28 = *(_OWORD *)(a1 + 200);
  *(void *)(a1 + 184) = v109;
  *(void *)(a1 + 192) = v108;
  *(void *)(a1 + 200) = v5;
  long long v29 = *(_OWORD *)(a1 + 216);
  long long v30 = *(_OWORD *)(a1 + 232);
  *(void *)(a1 + 208) = v6;
  *(void *)(a1 + 216) = v7;
  *(void *)(a1 + 224) = v9;
  *(void *)(a1 + 232) = v8;
  long long v31 = *(_OWORD *)(a1 + 248);
  long long v32 = *(_OWORD *)(a1 + 264);
  long long v33 = *(_OWORD *)(a1 + 280);
  long long v34 = *(_OWORD *)(a1 + 296);
  long long v35 = *(_OWORD *)(a1 + 312);
  long long v36 = *(_OWORD *)(a1 + 328);
  *(void *)(a1 + 240) = v88;
  *(void *)(a1 + 248) = v10;
  *(void *)(a1 + 256) = v11;
  *(void *)(a1 + 264) = v89;
  *(void *)(a1 + 272) = v90;
  *(void *)(a1 + 280) = v91;
  *(void *)(a1 + 288) = v92;
  *(void *)(a1 + 296) = v93;
  *(void *)(a1 + 304) = v94;
  *(void *)(a1 + 312) = v95;
  *(void *)(a1 + 320) = v96;
  *(void *)(a1 + 328) = v97;
  *(void *)(a1 + 336) = v98;
  *(void *)(a1 + 344) = v99;
  *(void *)(a1 + 352) = v100;
  *(void *)(a1 + 360) = v101;
  *(void *)(a1 + 368) = v102;
  *(void *)(a1 + 376) = v103;
  *(void *)(a1 + 384) = v104;
  *(void *)(a1 + 392) = v105;
  *(void *)(a1 + 400) = v106;
  *(void *)(a1 + 408) = v107;
  outlined consume of NavigationState.Base(v13, v14, v15, v16, v17, v18, v19, v20, v21, WORD4(v21), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v35,
    *((unint64_t *)&v35 + 1),
    v36);
  uint64_t v37 = (long long *)(a1 + 416);
  uint64_t v38 = a2 + 26;
  uint64_t v39 = *((void *)a2 + 53);
  if (*(void *)(a1 + 424) == 1)
  {
    if (v39 == 1)
    {
      long long v40 = *v38;
      *(void *)(a1 + 432) = *((void *)a2 + 54);
      long long *v37 = v40;
    }
    else
    {
      swift_weakCopyInit();
      *(void *)(a1 + 424) = *((void *)a2 + 53);
      *(void *)(a1 + 432) = *((void *)a2 + 54);
      swift_retain();
      swift_retain();
    }
  }
  else if (v39 == 1)
  {
    outlined destroy of NavigationAuthority(a1 + 416);
    uint64_t v41 = *((void *)a2 + 54);
    long long *v37 = *v38;
    *(void *)(a1 + 432) = v41;
  }
  else
  {
    swift_weakCopyAssign();
    *(void *)(a1 + 424) = *((void *)a2 + 53);
    swift_retain();
    swift_release();
    *(void *)(a1 + 432) = *((void *)a2 + 54);
    swift_retain();
    swift_release();
  }
  uint64_t v42 = (char *)(a1 + 472);
  uint64_t v43 = (char *)a2 + 472;
  *(void *)(a1 + 440) = *((void *)a2 + 55);
  swift_retain();
  swift_release();
  *(void *)(a1 + 448) = *((void *)a2 + 56);
  swift_retain();
  swift_release();
  uint64_t v44 = (long long *)(a1 + 456);
  unint64_t v45 = (long long *)((char *)a2 + 456);
  uint64_t v46 = *(void *)(a1 + 480);
  uint64_t v47 = *((void *)a2 + 60);
  if (v46 != 1)
  {
    if (v47 == 1)
    {
      outlined destroy of NavigationTitleStorage(a1 + 456);
      long long v52 = *(long long *)((char *)a2 + 472);
      long long v51 = *(long long *)((char *)a2 + 488);
      long long v53 = *v45;
      *(_OWORD *)(a1 + 497) = *(long long *)((char *)a2 + 497);
      *(_OWORD *)(a1 + 472) = v52;
      *(_OWORD *)(a1 + 488) = v51;
      *uint64_t v44 = v53;
      goto LABEL_35;
    }
    if (v46)
    {
      if (v47)
      {
        uint64_t v54 = *((void *)a2 + 57);
        uint64_t v55 = *((void *)a2 + 58);
        char v56 = *v43;
        outlined copy of Text.Storage(v54, v55, *v43);
        uint64_t v57 = *(void *)(a1 + 456);
        uint64_t v58 = *(void *)(a1 + 464);
        char v59 = *v42;
        *(void *)(a1 + 456) = v54;
        *(void *)(a1 + 464) = v55;
        *uint64_t v42 = v56;
        outlined consume of Text.Storage(v57, v58, v59);
        *(void *)(a1 + 480) = *((void *)a2 + 60);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 456);
        long long v68 = *(long long *)((char *)a2 + 472);
        *uint64_t v44 = *v45;
        *(_OWORD *)(a1 + 472) = v68;
      }
    }
    else if (v47)
    {
      uint64_t v65 = *((void *)a2 + 57);
      uint64_t v66 = *((void *)a2 + 58);
      char v67 = *v43;
      outlined copy of Text.Storage(v65, v66, *v43);
      *(void *)(a1 + 456) = v65;
      *(void *)(a1 + 464) = v66;
      *uint64_t v42 = v67;
      *(void *)(a1 + 480) = *((void *)a2 + 60);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v69 = *(long long *)((char *)a2 + 472);
      *uint64_t v44 = *v45;
      *(_OWORD *)(a1 + 472) = v69;
    }
    uint64_t v70 = (uint64_t *)(a1 + 488);
    uint64_t v71 = *((void *)a2 + 61);
    if (*(void *)(a1 + 488) == 1)
    {
      if (v71 != 1)
      {
        *uint64_t v70 = v71;
        swift_retain();
        goto LABEL_34;
      }
      uint64_t v72 = 1;
    }
    else
    {
      if (v71 != 1)
      {
        *uint64_t v70 = v71;
        swift_retain();
        swift_release();
        goto LABEL_34;
      }
      outlined destroy of Transaction(a1 + 488);
      uint64_t v72 = *((void *)a2 + 61);
    }
    *uint64_t v70 = v72;
LABEL_34:
    *(unsigned char *)(a1 + 496) = *((unsigned char *)a2 + 496);
    *(void *)(a1 + 504) = *((void *)a2 + 63);
    swift_retain();
    swift_release();
    *(unsigned char *)(a1 + 512) = *((unsigned char *)a2 + 512);
    goto LABEL_35;
  }
  if (v47)
  {
    if (v47 == 1)
    {
      long long v48 = *v45;
      long long v49 = *(long long *)((char *)a2 + 472);
      long long v50 = *(long long *)((char *)a2 + 488);
      *(_OWORD *)(a1 + 497) = *(long long *)((char *)a2 + 497);
      *(_OWORD *)(a1 + 472) = v49;
      *(_OWORD *)(a1 + 488) = v50;
      *uint64_t v44 = v48;
      goto LABEL_35;
    }
    uint64_t v61 = *((void *)a2 + 57);
    uint64_t v62 = *((void *)a2 + 58);
    char v63 = *v43;
    outlined copy of Text.Storage(v61, v62, *v43);
    *(void *)(a1 + 456) = v61;
    *(void *)(a1 + 464) = v62;
    *uint64_t v42 = v63;
    *(void *)(a1 + 480) = *((void *)a2 + 60);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v60 = *(long long *)((char *)a2 + 472);
    *uint64_t v44 = *v45;
    *(_OWORD *)(a1 + 472) = v60;
  }
  uint64_t v64 = *((void *)a2 + 61);
  if (v64 != 1) {
    uint64_t v64 = swift_retain();
  }
  *(void *)(a1 + 488) = v64;
  *(unsigned char *)(a1 + 496) = *((unsigned char *)a2 + 496);
  *(void *)(a1 + 504) = *((void *)a2 + 63);
  *(unsigned char *)(a1 + 512) = *((unsigned char *)a2 + 512);
  swift_retain();
LABEL_35:
  int64_t v73 = (_OWORD *)(a1 + 520);
  uint64_t v74 = (long long *)((char *)a2 + 520);
  uint64_t v75 = *((void *)a2 + 68);
  if (*(void *)(a1 + 544))
  {
    if (v75)
    {
      uint64_t v76 = *((void *)a2 + 65);
      uint64_t v77 = *((void *)a2 + 66);
      char v78 = *((unsigned char *)a2 + 536);
      outlined copy of Text.Storage(v76, v77, v78);
      uint64_t v79 = *(void *)(a1 + 520);
      uint64_t v80 = *(void *)(a1 + 528);
      char v81 = *(unsigned char *)(a1 + 536);
      *(void *)(a1 + 520) = v76;
      *(void *)(a1 + 528) = v77;
      *(unsigned char *)(a1 + 536) = v78;
      outlined consume of Text.Storage(v79, v80, v81);
      *(void *)(a1 + 544) = *((void *)a2 + 68);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 520);
      long long v85 = *(long long *)((char *)a2 + 536);
      *int64_t v73 = *v74;
      *(_OWORD *)(a1 + 536) = v85;
    }
  }
  else if (v75)
  {
    uint64_t v82 = *((void *)a2 + 65);
    uint64_t v83 = *((void *)a2 + 66);
    char v84 = *((unsigned char *)a2 + 536);
    outlined copy of Text.Storage(v82, v83, v84);
    *(void *)(a1 + 520) = v82;
    *(void *)(a1 + 528) = v83;
    *(unsigned char *)(a1 + 536) = v84;
    *(void *)(a1 + 544) = *((void *)a2 + 68);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v86 = *(long long *)((char *)a2 + 536);
    *int64_t v73 = *v74;
    *(_OWORD *)(a1 + 536) = v86;
  }
  return a1;
}

uint64_t outlined destroy of Transaction(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of NavigationTitleStorage(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for NavigationStackProxy(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  memcpy((void *)(a1 + 24), (const void *)(a2 + 24), 0x188uLL);
  if (*(void *)(a2 + 424) == 1)
  {
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(void *)(a1 + 432) = *(void *)(a2 + 432);
  }
  else
  {
    swift_weakTakeInit();
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  }
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  long long v4 = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 472) = v4;
  *(_OWORD *)(a1 + 488) = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 497) = *(_OWORD *)(a2 + 497);
  long long v5 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 536) = v5;
  return a1;
}

uint64_t assignWithTake for NavigationStackProxy(uint64_t a1, uint64_t a2)
{
  long long v4 = (_OWORD *)(a1 + 264);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v5 = (_OWORD *)(a2 + 264);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 408);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 88);
  long long v16 = *(_OWORD *)(a1 + 104);
  long long v17 = *(_OWORD *)(a1 + 120);
  long long v18 = *(_OWORD *)(a1 + 136);
  long long v19 = *(_OWORD *)(a1 + 152);
  long long v20 = *(_OWORD *)(a1 + 168);
  long long v21 = *(_OWORD *)(a1 + 184);
  long long v22 = *(_OWORD *)(a1 + 200);
  long long v23 = *(_OWORD *)(a1 + 216);
  long long v24 = *(_OWORD *)(a1 + 232);
  long long v25 = *(_OWORD *)(a1 + 248);
  long long v26 = *v4;
  long long v27 = v4[1];
  long long v28 = v4[2];
  long long v29 = v4[3];
  long long v30 = v4[4];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  long long v31 = v5[1];
  long long v32 = v5[2];
  long long v33 = v5[3];
  long long v34 = v5[4];
  long long v35 = v5[5];
  long long v36 = v5[6];
  long long v37 = v5[7];
  long long v38 = v5[8];
  *long long v4 = *v5;
  v4[1] = v31;
  v4[2] = v32;
  v4[3] = v33;
  v4[4] = v34;
  v4[5] = v35;
  v4[6] = v36;
  v4[7] = v37;
  v4[8] = v38;
  *(void *)(a1 + 408) = v6;
  outlined consume of NavigationState.Base(v7, v8, v9, v10, v11, v12, v13, v14, v15, WORD4(v15), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((unint64_t *)&v29 + 1),
    v30);
  uint64_t v39 = *(void *)(a2 + 424);
  if (*(void *)(a1 + 424) == 1)
  {
    if (v39 != 1)
    {
      swift_weakTakeInit();
      *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v39 == 1)
  {
    outlined destroy of NavigationAuthority(a1 + 416);
LABEL_6:
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(void *)(a1 + 432) = *(void *)(a2 + 432);
    goto LABEL_8;
  }
  swift_weakTakeAssign();
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  swift_release();
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  swift_release();
LABEL_8:
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  swift_release();
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  swift_release();
  long long v40 = v4 + 12;
  uint64_t v41 = v5 + 12;
  uint64_t v42 = *(void *)(a1 + 480);
  if (v42 == 1)
  {
LABEL_11:
    long long v44 = v5[13];
    *long long v40 = *v41;
    v4[13] = v44;
    v4[14] = v5[14];
    *(_OWORD *)((char *)v4 + 233) = *(_OWORD *)((char *)v5 + 233);
    goto LABEL_23;
  }
  uint64_t v43 = *(void *)(a2 + 480);
  if (v43 == 1)
  {
    outlined destroy of NavigationTitleStorage((uint64_t)(v4 + 12));
    goto LABEL_11;
  }
  if (v42)
  {
    if (v43)
    {
      char v45 = *((unsigned char *)v5 + 208);
      uint64_t v46 = *(void *)(a1 + 456);
      uint64_t v47 = *(void *)(a1 + 464);
      char v48 = *((unsigned char *)v4 + 208);
      v4[12] = v5[12];
      *((unsigned char *)v4 + 208) = v45;
      outlined consume of Text.Storage(v46, v47, v48);
      *(void *)(a1 + 480) = *(void *)(a2 + 480);
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    outlined destroy of Text((uint64_t)(v4 + 12));
  }
  long long v49 = v5[13];
  *long long v40 = *v41;
  v4[13] = v49;
LABEL_17:
  long long v50 = (void *)(a1 + 488);
  uint64_t v51 = *(void *)(a2 + 488);
  if (*(void *)(a1 + 488) != 1)
  {
    if (v51 != 1)
    {
      *long long v50 = v51;
      swift_release();
      goto LABEL_22;
    }
    outlined destroy of Transaction(a1 + 488);
    uint64_t v51 = *(void *)(a2 + 488);
  }
  *long long v50 = v51;
LABEL_22:
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  swift_release();
  *(unsigned char *)(a1 + 512) = *(unsigned char *)(a2 + 512);
LABEL_23:
  if (!*(void *)(a1 + 544))
  {
LABEL_27:
    long long v56 = v5[17];
    unsigned char v4[16] = v5[16];
    v4[17] = v56;
    return a1;
  }
  if (!*(void *)(a2 + 544))
  {
    outlined destroy of Text((uint64_t)(v4 + 16));
    goto LABEL_27;
  }
  char v52 = *((unsigned char *)v5 + 272);
  uint64_t v53 = *(void *)(a1 + 520);
  uint64_t v54 = *(void *)(a1 + 528);
  char v55 = *((unsigned char *)v4 + 272);
  unsigned char v4[16] = v5[16];
  *((unsigned char *)v4 + 272) = v52;
  outlined consume of Text.Storage(v53, v54, v55);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationStackProxy(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 552)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(void *)(a1 + 192) >> 57) & 0x38 | *(void *)(a1 + 192) & 7 | (*(void *)(a1 + 272) >> 51) & 0x1E00 | ((*(void *)(a1 + 272) & 7) << 6) & 0x1FFF | (*(_DWORD *)(a1 + 288) >> 3 << 13);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationStackProxy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 552) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(_OWORD *)(result + 24) = 0u;
      result += 24;
      unint64_t v3 = -a2;
      *(_OWORD *)(result + 128) = 0u;
      *(_OWORD *)(result + 144) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(void *)(result + 160) = 0;
      *(void *)(result + 168) = (v3 | (v3 << 57)) & 0x7000000000000007;
      *(_OWORD *)(result + 176) = 0u;
      *(_OWORD *)(result + 192) = 0u;
      *(_OWORD *)(result + 208) = 0u;
      *(_OWORD *)(result + 224) = 0u;
      *(void *)(result + 240) = 0;
      *(void *)(result + 248) = ((v3 >> 6) | (v3 << 51)) & 0xF000000000000007;
      *(void *)(result + 256) = 0;
      *(void *)(result + 264) = (v3 >> 10) & 0x3FFFF8;
      *(_OWORD *)(result + 272) = 0u;
      *(_OWORD *)(result + 288) = 0u;
      *(_OWORD *)(result + 304) = 0u;
      *(_OWORD *)(result + 320) = 0u;
      *(_OWORD *)(result + 336) = 0u;
      *(_OWORD *)(result + 352) = 0u;
      *(_OWORD *)(result + 368) = 0u;
      *(void *)(result + 384) = 0;
      return result;
    }
    *(unsigned char *)(result + 552) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationStackProxy()
{
  return &type metadata for NavigationStackProxy;
}

ValueMetadata *type metadata accessor for NavigationStackProxy.Key()
{
  return &type metadata for NavigationStackProxy.Key;
}

void NavigationStackProxy.title.getter()
{
}

void NavigationStackProxy.subtitle.getter()
{
}

void NavigationStackProxy.pathToken.getter()
{
}

Swift::Void __swiftcall NavigationStackProxy.popToRoot()()
{
}

void static NavigationStackProxy.Key.defaultValue.setter()
{
}

uint64_t NestedDynamicProperties.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*NestedDynamicProperties.wrappedValue.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t getEnumTagSinglePayload for NestedDynamicProperties(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for NestedDynamicProperties(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187F0C3E4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t StepperStyleConfiguration.onIncrement.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  outlined copy of AppIntentExecutor?(v1);
  return v1;
}

uint64_t StepperStyleConfiguration.onDecrement.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  outlined copy of AppIntentExecutor?(v1);
  return v1;
}

uint64_t StepperStyleConfiguration.onEditingChanged.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_retain();
  return v1;
}

unint64_t instantiation function for generic protocol witness table for StepperStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in StepperStyleConfiguration.Label()
{
  return &protocol witness table for StepperStyleConfiguration.Label;
}

uint64_t dispatch thunk of StepperStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for StepperStyleConfiguration.Label()
{
  return &type metadata for StepperStyleConfiguration.Label;
}

ValueMetadata *type metadata accessor for StepperStyleConfiguration.CurrentValueField()
{
  return &type metadata for StepperStyleConfiguration.CurrentValueField;
}

ValueMetadata *type metadata accessor for StepperBody()
{
  return &type metadata for StepperBody;
}

unint64_t lazy protocol witness table accessor for type StepperBody and conformance StepperBody()
{
  unint64_t result = lazy protocol witness table cache variable for type StepperBody and conformance StepperBody;
  if (!lazy protocol witness table cache variable for type StepperBody and conformance StepperBody)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StepperBody and conformance StepperBody);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StepperBody and conformance StepperBody;
  if (!lazy protocol witness table cache variable for type StepperBody and conformance StepperBody)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StepperBody and conformance StepperBody);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StepperStyleModifier<DefaultStepperStyle> and conformance StepperStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StepperStyleModifier<DefaultStepperStyle> and conformance StepperStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type StepperStyleModifier<DefaultStepperStyle> and conformance StepperStyleModifier<A>)
  {
    type metadata accessor for StepperStyleModifier<DefaultStepperStyle>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StepperStyleModifier<DefaultStepperStyle> and conformance StepperStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for StepperStyleModifier<DefaultStepperStyle>()
{
  if (!lazy cache variable for type metadata for StepperStyleModifier<DefaultStepperStyle>)
  {
    lazy protocol witness table accessor for type DefaultStepperStyle and conformance DefaultStepperStyle();
    unint64_t v0 = type metadata accessor for StepperStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StepperStyleModifier<DefaultStepperStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DefaultStepperStyle and conformance DefaultStepperStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultStepperStyle and conformance DefaultStepperStyle;
  if (!lazy protocol witness table cache variable for type DefaultStepperStyle and conformance DefaultStepperStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultStepperStyle and conformance DefaultStepperStyle);
  }
  return result;
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance StepperBody@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = v1[6];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v7;
  a1[5] = v6;
  a1[6] = v8;
  swift_retain();
  outlined copy of AppIntentExecutor?(v3);
  outlined copy of AppIntentExecutor?(v5);

  return swift_retain();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in StepperStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance StepperBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type StepperBody and conformance StepperBody();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance StepperBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type StepperBody and conformance StepperBody();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance StepperBody()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t StepperStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  int v11 = (char *)v16 - v10;
  uint64_t v12 = *(void *)(a1 + 32);
  long long v13 = *(_OWORD *)(a1 + 16);
  v16[0] = *(_OWORD *)a1;
  v16[1] = v13;
  uint64_t v17 = v12;
  long long v18 = *(_OWORD *)(a1 + 40);
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(v3 + 24))(v16, v4, v3);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  unsigned int v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v14)(v11, AssociatedTypeWitness);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance StepperStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance StepperStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t associated type witness table accessor for View.Body : View in StepperStyleConfiguration.CurrentValueField()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for StyleModifier in <> StepperStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in StepperBody()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for StepperStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for StepperStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187F0CFCCLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_187F0CFF4()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t ViewRendererHost.platformItemList.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t *@<X8>), void, ValueMetadata *, uint64_t))(*(void *)(a2 + 8) + 24))(&v3, closure #1 in ViewRendererHost.platformItemList.getter, 0, &type metadata for PlatformItemList, a1);
  return v3;
}

ValueMetadata *type metadata accessor for PlatformItemListViewGraph()
{
  return &type metadata for PlatformItemListViewGraph;
}

char *PanGesture.init(allowedDirections:minimumDistance:)@<X0>(char *result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char v5 = *result;
  if (one-time initialization token for all != -1) {
    unint64_t result = (char *)swift_once();
  }
  *(double *)a2 = a3;
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

double PanGesture.Value.translation.getter()
{
  return *(double *)(v0 + 8);
}

void PanGesture.Value.translation.setter(double a1, double a2)
{
  *(double *)(v2 + 8) = a1;
  *(double *)(v2 + 16) = a2;
}

uint64_t (*PanGesture.Value.translation.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void PanGesture.Value.touchType.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 24);
}

unsigned char *PanGesture.Value.touchType.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 24) = *result;
  return result;
}

uint64_t (*PanGesture.Value.touchType.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

char *PanGesture.init(allowedDirections:minimumDistance:requiresTwoFingerTouch:)@<X0>(char *result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char v5 = *result;
  if (one-time initialization token for all != -1) {
    unint64_t result = (char *)swift_once();
  }
  *(double *)a2 = a3;
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t PanGesture.internalBody.getter()
{
  if (one-time initialization token for all != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type RawPanGesture and conformance RawPanGesture();
  return Gesture.dependency(_:)();
}

uint64_t protocol witness for PubliclyPrimitiveGesture.internalBody.getter in conformance PanGesture()
{
  if (one-time initialization token for all != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type RawPanGesture and conformance RawPanGesture();
  return Gesture.dependency(_:)();
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance PanGesture()
{
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

void protocol witness for Gesture.body.getter in conformance PanGesture()
{
}

double protocol witness for GestureStateProtocol.init() in conformance RawPanGesture.StateType@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_WORD *)(a1 + 8) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  return result;
}

uint64_t closure #1 in RawPanGesture.body.getter(uint64_t a1, uint64_t *a2, char a3, double a4)
{
  uint64_t v5 = *a2;
  char v6 = *((unsigned char *)a2 + 8);
  double v10 = a4;
  char v11 = a3;
  uint64_t v8 = v5;
  char v9 = v6;
  RawPanGesture.update(state:childPhase:)(a1, (uint64_t)&v8);
  LOWORD(v10) = *(_WORD *)(a1 + 8);
  type metadata accessor for GesturePhase<()>();
  return GesturePhase.withValue<A>(_:)();
}

uint64_t RawPanGesture.update(state:childPhase:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)a2;
  int v5 = *(unsigned __int8 *)(a2 + 8);
  uint64_t v136 = v4;
  if (v5 == 3 && v4 == 0)
  {
LABEL_87:
    *(_WORD *)(v3 + 8) = 768;
    return result;
  }
  double v132 = *(double *)v2;
  if ((v5 - 1) >= 2)
  {
    if (v5) {
      return result;
    }
    if (!v4)
    {
      return outlined consume of GesturePhase<[EventID : PanEvent]>(0, 0);
    }
  }
  int v123 = *(unsigned __int8 *)(v2 + 8);
  uint64_t v133 = v4 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(v4 + 64);
  outlined copy of GesturePhase<[EventID : PanEvent]>(v4, v5);
  char v126 = 0;
  int64_t v10 = 0;
  int64_t v135 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v129 = 0;
  uint64_t v130 = (void *)(v3 + 24);
  uint64_t v131 = (void *)(v3 + 48);
  double v127 = 0.0;
  double v128 = 0.0;
  double v124 = 0.0;
  double v125 = 0.0;
  double v11 = 0.0;
LABEL_11:
  double v134 = v11;
  while (v9)
  {
    unint64_t v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v13 = v12 | (v10 << 6);
LABEL_30:
    uint64_t v17 = (Swift::UInt *)(*(void *)(v136 + 48) + 16 * v13);
    Swift::UInt v18 = *v17;
    Swift::UInt v19 = v17[1];
    uint64_t v20 = *(void *)(v136 + 56) + 96 * v13;
    unsigned int v21 = *(unsigned __int8 *)(v20 + 32);
    double v141 = *(double *)(v20 + 40);
    uint64_t v22 = *(void *)(v20 + 48);
    if (v21 >= 2)
    {
      if (v21 == 3) {
        goto LABEL_13;
      }
      char v126 = 1;
      if (*(void *)(*(void *)v3 + 16))
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
        char v126 = 1;
        if (v65)
        {
          if (v141 >= v11) {
            double v11 = v141;
          }
          unint64_t v93 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
          char v126 = 1;
          if (v94)
          {
            unint64_t v95 = v93;
            swift_retain();
            int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v97 = *(void *)v3;
            uint64_t v142 = *(void **)v3;
            *(void *)uint64_t v3 = 0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v97 = (uint64_t)v142;
            }
            specialized _NativeDictionary._delete(at:)(v95, v97);
            *(void *)uint64_t v3 = v97;
            swift_release();
            swift_bridgeObjectRelease();
            char v126 = 1;
          }
          goto LABEL_11;
        }
      }
    }
    else
    {
      long long v23 = *(void **)v20;
      uint64_t v24 = *(void *)(v20 + 8);
      uint64_t v26 = *(void *)(v20 + 16);
      uint64_t v25 = *(void *)(v20 + 24);
      uint64_t v27 = *(void *)(v20 + 56);
      uint64_t v28 = *(void *)(v20 + 64);
      uint64_t v29 = *(void *)(v20 + 72);
      uint64_t v139 = *(void *)(v20 + 80);
      char v30 = *(unsigned char *)(v20 + 88);
      uint64_t v31 = *(void *)v3;
      if (*(void *)(*(void *)v3 + 16))
      {
        unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
        if (v33)
        {
          uint64_t v66 = (double *)(*(void *)(v31 + 56) + 32 * v32);
          double v114 = v66[1];
          double v120 = v66[2];
          double v121 = *v66;
          double v119 = v66[3];
          if (v141 >= v11) {
            double v11 = v141;
          }
          uint64_t v122 = v28;
          uint64_t v67 = v29;
          swift_retain();
          PanEvent.translation.getter();
          double v117 = v69;
          double v118 = v68;
          PanEvent.globalTranslation.getter();
          double v115 = v71;
          double v116 = v70;
          swift_retain();
          PanEvent.globalTranslation.getter();
          uint64_t v73 = v72;
          uint64_t v138 = v74;
          uint64_t v142 = v23;
          uint64_t v143 = v24;
          uint64_t v144 = v26;
          uint64_t v145 = v25;
          char v146 = v21;
          double v147 = v141;
          uint64_t v148 = v22;
          uint64_t v149 = v27;
          uint64_t v150 = v122;
          uint64_t v151 = v67;
          uint64_t v152 = v139;
          char v153 = v30;
          PanEvent.translation.getter();
          uint64_t v76 = v75;
          uint64_t v78 = v77;
          swift_release();
          char v79 = swift_isUniquelyReferenced_nonNull_native();
          Swift::UInt v80 = v19;
          char v81 = v79;
          uint64_t v142 = *(void **)v3;
          uint64_t v82 = v142;
          *(void *)uint64_t v3 = 0x8000000000000000;
          Swift::UInt v83 = v80;
          unint64_t v84 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v80);
          uint64_t v86 = v82[2];
          BOOL v87 = (v85 & 1) == 0;
          BOOL v63 = __OFADD__(v86, v87);
          uint64_t v88 = v86 + v87;
          if (v63)
          {
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
            goto LABEL_100;
          }
          char v89 = v85;
          if (v82[3] >= v88)
          {
            if ((v81 & 1) == 0)
            {
              unint64_t v98 = v84;
              specialized _NativeDictionary.copy()();
              unint64_t v84 = v98;
              uint64_t v91 = v142;
              if (v89) {
                goto LABEL_57;
              }
              goto LABEL_65;
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v88, v81);
            unint64_t v84 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v83);
            if ((v89 & 1) != (v90 & 1)) {
              goto LABEL_101;
            }
          }
          uint64_t v91 = v142;
          if (v89)
          {
LABEL_57:
            uint64_t v92 = (void *)(v91[7] + 32 * v84);
            *uint64_t v92 = v73;
            v92[1] = v138;
            v92[2] = v76;
            v92[3] = v78;
LABEL_67:
            double v124 = v124 + v117 - v119;
            double v125 = v125 + v118 - v120;
            double v127 = v127 + v115 - v114;
            double v128 = v128 + v116 - v121;
            *(void *)uint64_t v3 = v91;
            swift_release();
            swift_bridgeObjectRelease();
            BOOL v63 = __OFADD__(v129++, 1);
            if (!v63) {
              goto LABEL_11;
            }
            goto LABEL_99;
          }
LABEL_65:
          v91[(v84 >> 6) + 8] |= 1 << v84;
          uint64_t v99 = (Swift::UInt *)(v91[6] + 16 * v84);
          *uint64_t v99 = v18;
          v99[1] = v83;
          uint64_t v100 = (void *)(v91[7] + 32 * v84);
          *uint64_t v100 = v73;
          v100[1] = v138;
          void v100[2] = v76;
          v100[3] = v78;
          uint64_t v101 = v91[2];
          BOOL v63 = __OFADD__(v101, 1);
          uint64_t v102 = v101 + 1;
          if (v63)
          {
LABEL_100:
            __break(1u);
LABEL_101:
            double result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          v91[2] = v102;
          goto LABEL_67;
        }
      }
      unint64_t v34 = v9;
      int64_t v35 = v10;
      swift_retain_n();
      PanEvent.globalTranslation.getter();
      uint64_t v137 = v36;
      uint64_t v37 = v27;
      uint64_t v39 = v38;
      uint64_t v142 = v23;
      uint64_t v143 = v24;
      uint64_t v144 = v26;
      uint64_t v145 = v25;
      char v146 = v21;
      double v147 = v141;
      uint64_t v148 = v22;
      uint64_t v149 = v37;
      uint64_t v150 = v28;
      uint64_t v151 = v29;
      uint64_t v152 = v139;
      char v140 = v30;
      char v153 = v30;
      PanEvent.translation.getter();
      uint64_t v41 = v40;
      uint64_t v43 = v42;
      swift_release();
      char v44 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v142 = *(void **)v3;
      char v45 = v142;
      uint64_t v46 = v3;
      *(void *)uint64_t v3 = 0x8000000000000000;
      Swift::UInt v47 = v18;
      Swift::UInt v48 = v18;
      Swift::UInt v49 = v19;
      unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v19);
      uint64_t v52 = v45[2];
      BOOL v53 = (v50 & 1) == 0;
      uint64_t v54 = v52 + v53;
      if (__OFADD__(v52, v53))
      {
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
        goto LABEL_98;
      }
      char v55 = v50;
      if (v45[3] >= v54)
      {
        if ((v44 & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v54, v44);
        unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v49);
        if ((v55 & 1) != (v57 & 1)) {
          goto LABEL_101;
        }
        unint64_t v51 = v56;
      }
      int64_t v10 = v35;
      uint64_t v58 = v142;
      unint64_t v9 = v34;
      if (v55)
      {
        char v59 = (void *)(v142[7] + 32 * v51);
        void *v59 = v137;
        v59[1] = v39;
        v59[2] = v41;
        void v59[3] = v43;
      }
      else
      {
        v142[(v51 >> 6) + 8] |= 1 << v51;
        long long v60 = (Swift::UInt *)(v58[6] + 16 * v51);
        Swift::UInt *v60 = v47;
        v60[1] = v49;
        uint64_t v61 = (void *)(v58[7] + 32 * v51);
        *uint64_t v61 = v137;
        v61[1] = v39;
        v61[2] = v41;
        v61[3] = v43;
        uint64_t v62 = v58[2];
        BOOL v63 = __OFADD__(v62, 1);
        uint64_t v64 = v62 + 1;
        if (v63) {
          goto LABEL_96;
        }
        _OWORD v58[2] = v64;
      }
      uint64_t v3 = v46;
      *(void *)uint64_t v46 = v58;
      swift_release();
      swift_bridgeObjectRelease();
      double v11 = v134;
      if (!*(unsigned char *)(v46 + 9))
      {
        *(double *)(v46 + 16) = v141;
        *uint64_t v130 = 0;
        v130[1] = 0;
        *(unsigned char *)(v46 + 40) = v140;
        *uint64_t v131 = 0;
        v131[1] = 0;
        if (v132 == 0.0)
        {
          LOBYTE(v21) = 1;
LABEL_13:
          *(unsigned char *)(v3 + 8) = 0;
          *(unsigned char *)(v3 + 9) = v21;
        }
      }
    }
  }
  int64_t v14 = v10 + 1;
  if (__OFADD__(v10, 1)) {
    goto LABEL_95;
  }
  if (v14 < v135)
  {
    unint64_t v15 = *(void *)(v133 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v135) {
        goto LABEL_70;
      }
      unint64_t v15 = *(void *)(v133 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v135) {
          goto LABEL_70;
        }
        unint64_t v15 = *(void *)(v133 + 8 * v10);
        if (!v15)
        {
          int64_t v16 = v14 + 3;
          if (v16 >= v135) {
            goto LABEL_70;
          }
          unint64_t v15 = *(void *)(v133 + 8 * v16);
          if (!v15)
          {
            while (1)
            {
              int64_t v10 = v16 + 1;
              if (__OFADD__(v16, 1)) {
                goto LABEL_97;
              }
              if (v10 >= v135) {
                goto LABEL_70;
              }
              unint64_t v15 = *(void *)(v133 + 8 * v10);
              ++v16;
              if (v15) {
                goto LABEL_29;
              }
            }
          }
          int64_t v10 = v16;
        }
      }
    }
LABEL_29:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    goto LABEL_30;
  }
LABEL_70:
  double result = swift_release();
  if (v129)
  {
    double v103 = 1.0 / (double)v129;
    double v104 = v127 * v103 + *(double *)(v3 + 72);
    *(double *)(v3 + 64) = v128 * v103 + *(double *)(v3 + 64);
    *(double *)(v3 + 72) = v104;
    if (!*(unsigned char *)(v3 + 9))
    {
      if (!v123) {
        goto LABEL_87;
      }
      double result = CGSize.magnitude.getter();
      if (v132 <= v112)
      {
        LOBYTE(v142) = v123;
        double result = CGSize.withinRange(axes:rangeCosine:)((unsigned __int8 *)&v142, 0.5);
        *(unsigned char *)(v3 + 8) = 0;
        if (result) {
          char v113 = 1;
        }
        else {
          char v113 = 3;
        }
        *(unsigned char *)(v3 + 9) = v113;
      }
    }
    double v105 = v125 * v103;
    double v106 = v124 * v103;
    double v107 = v11 - *(double *)(v3 + 16);
    if (v107 > 0.0)
    {
      *(double *)(v3 + 16) = v11;
      double v108 = 1.0 / v107;
      *(double *)(v3 + 48) = v105 * v108;
      *(double *)(v3 + 56) = v106 * v108;
    }
    double v109 = v106 + *(double *)(v3 + 32);
    *(double *)(v3 + 24) = v105 + *(double *)(v3 + 24);
    *(double *)(v3 + 32) = v109;
  }
  if ((v126 & 1) != 0 && !*(void *)(*(void *)v3 + 16))
  {
    if (v11 - *(double *)(v3 + 16) > 0.2)
    {
      *(double *)(v3 + 16) = v11;
      *uint64_t v131 = 0;
      v131[1] = 0;
    }
    int v110 = *(unsigned __int8 *)(v3 + 9);
    *(unsigned char *)(v3 + 8) = 0;
    if (v110 == 1) {
      char v111 = 2;
    }
    else {
      char v111 = 3;
    }
    *(unsigned char *)(v3 + 9) = v111;
  }
  return result;
}

uint64_t protocol witness for Gesture.body.getter in conformance RawPanGesture@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  char v4 = *((unsigned char *)v1 + 8);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(unsigned char *)(result + 24) = v4;
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 8) = partial apply for closure #1 in RawPanGesture.body.getter;
  *(void *)(a1 + 16) = result;
  return result;
}

BOOL specialized static PanGesture.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2
    || *(double *)(a1 + 8) != *(double *)(a2 + 8)
    || *(double *)(a1 + 16) != *(double *)(a2 + 16)
    || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24))
  {
    return 0;
  }
  if (*(double *)(a1 + 40) == *(double *)(a2 + 40)) {
    return *(double *)(a1 + 32) == *(double *)(a2 + 32);
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type RawPanGesture and conformance RawPanGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type RawPanGesture and conformance RawPanGesture;
  if (!lazy protocol witness table cache variable for type RawPanGesture and conformance RawPanGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RawPanGesture and conformance RawPanGesture);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PanGesture and conformance PanGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type PanGesture and conformance PanGesture;
  if (!lazy protocol witness table cache variable for type PanGesture and conformance PanGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PanGesture and conformance PanGesture);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PanGesture and conformance PanGesture;
  if (!lazy protocol witness table cache variable for type PanGesture and conformance PanGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PanGesture and conformance PanGesture);
  }
  return result;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in PanGesture()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for Gesture in PanGesture()
{
  return &protocol witness table for PanGesture;
}

ValueMetadata *type metadata accessor for PanGesture()
{
  return &type metadata for PanGesture;
}

uint64_t getEnumTagSinglePayload for PanGesture.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PanGesture.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PanGesture.Value()
{
  return &type metadata for PanGesture.Value;
}

uint64_t sub_187F0E0F4()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for RawPanGesture()
{
  return &type metadata for RawPanGesture;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in RawPanGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187F0E16C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RawPanGesture.body.getter(uint64_t a1, uint64_t *a2)
{
  return closure #1 in RawPanGesture.body.getter(a1, a2, *(unsigned char *)(v2 + 24), *(double *)(v2 + 16));
}

__n128 partial apply for implicit closure #1 in closure #1 in RawPanGesture.body.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + 32);
  char v4 = *(unsigned char *)(v2 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v2 + 16);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  __n128 result = *(__n128 *)(v2 + 48);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

void type metadata accessor for GesturePhase<()>()
{
  if (!lazy cache variable for type metadata for GesturePhase<()>)
  {
    unint64_t v0 = type metadata accessor for GesturePhase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>);
    }
  }
}

ValueMetadata *type metadata accessor for RawPanGesture.StateType.EventInfo()
{
  return &type metadata for RawPanGesture.StateType.EventInfo;
}

uint64_t initializeWithCopy for RawPanGesture.StateType(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RawPanGesture.StateType(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for RawPanGesture.StateType(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for RawPanGesture.StateType(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RawPanGesture.StateType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RawPanGesture.StateType()
{
  return &type metadata for RawPanGesture.StateType;
}

uint64_t sub_187F0E47C()
{
  return lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<RawPanGesture.StateType, [EventID : PanEvent], PanGesture.Value>, MultiEventListener<PanEvent>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<RawPanGesture.StateType, [EventID : PanEvent], PanGesture.Value>, MultiEventListener<PanEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<RawPanGesture.StateType, [EventID : PanEvent], PanGesture.Value>, MultiEventListener<PanEvent>>);
}

unint64_t lazy protocol witness table accessor for type RawPanGesture.StateType and conformance RawPanGesture.StateType()
{
  unint64_t result = lazy protocol witness table cache variable for type RawPanGesture.StateType and conformance RawPanGesture.StateType;
  if (!lazy protocol witness table cache variable for type RawPanGesture.StateType and conformance RawPanGesture.StateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RawPanGesture.StateType and conformance RawPanGesture.StateType);
  }
  return result;
}

void type metadata accessor for MultiEventListener<PanEvent>()
{
  if (!lazy cache variable for type metadata for MultiEventListener<PanEvent>)
  {
    unint64_t v0 = type metadata accessor for MultiEventListener();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MultiEventListener<PanEvent>);
    }
  }
}

uint64_t View.equatableProxy<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  int64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x1F4188790](v11);
  int64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v14, v16, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  return EquatableProxyView.init(content:token:)((uint64_t)v14, (uint64_t)v10, a2, a3, a4);
}

uint64_t EquatableView.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t EquatableView.content.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*EquatableView.content.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t EquatableView.init(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t static EquatableView._makeView(view:inputs:)()
{
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t type metadata accessor for EquatableView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for EquatableView.Child()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t EquatableView.Child.view.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for EquatableView();
  uint64_t Value = AGGraphGetValue();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t EquatableView.Child.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for EquatableView();
  MEMORY[0x1F4188790](v4 - 8);
  char v6 = (char *)&v8 - v5;
  EquatableView.Child.view.getter((uint64_t)&v8 - v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a1 - 8) + 32))(a2, v6, a1);
}

uint64_t protocol witness for Rule.value.getter in conformance EquatableView<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return EquatableView.Child.value.getter(*(void *)(a1 + 16), a2);
}

uint64_t protocol witness for static _AttributeBody.comparisonMode.getter in conformance EquatableView<A>.Child()
{
  return protocol witness for static AccessibilityViewModifier.options.getter in conformance AccessibilityAttachmentModifier();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance EquatableView<A>.Child(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance EquatableView<A>()
{
  return static EquatableView._makeView(view:inputs:)();
}

uint64_t static EquatableProxyView._makeView(view:inputs:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v28 = a7;
  uint64_t v13 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  uint64_t v16 = type metadata accessor for EquatableProxyView.Child();
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (_DWORD *)((char *)&v24 - v17);
  LODWORD(v17) = *a1;
  uint64_t v19 = *a2;
  LODWORD(a1) = *((_DWORD *)a2 + 2);
  uint64_t v26 = a2[2];
  int v27 = *((_DWORD *)a2 + 20);
  int v38 = v17;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  type metadata accessor for EquatableProxyView();
  type metadata accessor for _GraphValue();
  long long v25 = *(_OWORD *)(a2 + 5);
  uint64_t v20 = a2[3];
  uint64_t v21 = a2[4];
  long long v24 = *(_OWORD *)(a2 + 7);
  uint64_t v22 = a2[9];
  LODWORD(a2) = _GraphValue.value.getter();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(v15, 1, 1, a4);
  EquatableProxyView.Child.init(view:lastToken:)((int)a2, (uint64_t)v15, v18);
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v29 = v19;
  LODWORD(v30) = a1;
  uint64_t v31 = v26;
  uint64_t v32 = v20;
  uint64_t v33 = v21;
  long long v34 = v25;
  long long v35 = v24;
  uint64_t v36 = v22;
  int v37 = v27;
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t EquatableProxyView.Child.init(view:lastToken:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  *a3 = a1;
  uint64_t v4 = (char *)a3 + *(int *)(type metadata accessor for EquatableProxyView.Child() + 52);
  uint64_t v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t EquatableProxyView.Child.view.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for EquatableProxyView();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t EquatableProxyView.Child.updateValue()(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v76 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v75 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v80 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v5);
  double v69 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v71 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v77 = (char *)&v60 - v10;
  uint64_t v11 = *(void *)(v2 + 32);
  uint64_t v12 = *(void *)(v2 + 40);
  uint64_t v83 = v3;
  uint64_t v84 = v6;
  uint64_t v79 = v6;
  uint64_t v85 = v11;
  uint64_t v86 = v12;
  uint64_t v68 = v12;
  uint64_t v13 = type metadata accessor for EquatableProxyView();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v74 = (uint64_t)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v60 - v17;
  uint64_t v82 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v73 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  double v70 = (char *)&v60 - v22;
  MEMORY[0x1F4188790](v23);
  long long v25 = (char *)&v60 - v24;
  MEMORY[0x1F4188790](v26);
  char v81 = (char *)&v60 - v27;
  Outputuint64_t Value = AGGraphGetOutputValue();
  uint64_t v78 = v1;
  if (!OutputValue) {
    goto LABEL_8;
  }
  uint64_t v66 = v3;
  uint64_t v29 = v13;
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 16);
  v30(v81, v1 + *(int *)(v2 + 52), v8);
  uint64_t v67 = v2;
  EquatableProxyView.Child.view.getter((uint64_t)v18);
  uint64_t v31 = TupleTypeMetadata2;
  uint64_t v32 = v8;
  uint64_t v33 = v79;
  uint64_t v34 = v80;
  (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v25, &v18[*(int *)(v29 + 52)], v79);
  uint64_t v64 = v14;
  long long v35 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v65 = v29;
  v35(v18, v29);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v25, 0, 1, v33);
  uint64_t v63 = v31;
  uint64_t v36 = v77;
  int v37 = &v77[*(int *)(v31 + 48)];
  v30(v77, (uint64_t)v81, v32);
  uint64_t v62 = (void (*)(char *, char *, uint64_t))v30;
  v30(v37, (uint64_t)v25, v32);
  uint64_t v38 = v34;
  uint64_t v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  if (v39(v36, 1, v33) == 1)
  {
    uint64_t v40 = *(void (**)(char *, uint64_t))(v82 + 8);
    v40(v25, v32);
    v40(v81, v32);
    int v41 = v39(v37, 1, v33);
    uint64_t v8 = v32;
    if (v41 == 1) {
      return ((uint64_t (*)(char *, uint64_t))v40)(v77, v32);
    }
    goto LABEL_7;
  }
  uint64_t v43 = v36;
  uint64_t v61 = v25;
  char v44 = v70;
  v62(v70, v43, v32);
  if (v39(v37, 1, v33) == 1)
  {
    char v45 = *(void (**)(char *, uint64_t))(v82 + 8);
    v45(v61, v32);
    v45(v81, v32);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v44, v33);
    uint64_t v8 = v32;
LABEL_7:
    (*(void (**)(char *, uint64_t))(v71 + 8))(v77, v63);
    uint64_t v2 = v67;
    uint64_t v3 = v66;
    uint64_t v13 = v65;
    uint64_t v14 = v64;
LABEL_8:
    uint64_t v72 = v8;
    uint64_t v46 = v74;
    EquatableProxyView.Child.view.getter(v74);
    uint64_t v48 = (uint64_t)v75;
    uint64_t v47 = v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v75, v46, v3);
    char v81 = *(char **)(v14 + 8);
    uint64_t v49 = ((uint64_t (*)(uint64_t, uint64_t))v81)(v46, v13);
    uint64_t v77 = (char *)&v60;
    MEMORY[0x1F4188790](v49);
    uint64_t v50 = v82;
    *(&v60 - 2) = v2;
    *(&v60 - 1) = swift_getWitnessTable();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v48, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v60 - 4), v3, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v51);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v3);
    uint64_t v52 = v78;
    EquatableProxyView.Child.view.getter(v46);
    uint64_t v54 = v79;
    uint64_t v53 = v80;
    char v55 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v73, v46 + *(int *)(v13 + 52), v79);
    ((void (*)(uint64_t, uint64_t))v81)(v46, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v55, 0, 1, v54);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v50 + 40))(v52 + *(int *)(v2 + 52), v55, v72);
  }
  uint64_t v56 = v80 + 32;
  char v57 = v69;
  (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v69, v37, v33);
  LODWORD(v71) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v58 = *(void (**)(char *, uint64_t))(v56 - 24);
  v58(v57, v33);
  char v59 = *(void (**)(char *, uint64_t))(v82 + 8);
  v59(v61, v32);
  v59(v81, v32);
  v58(v44, v33);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v59)(v43, v32);
  uint64_t v8 = v32;
  uint64_t v2 = v67;
  uint64_t v3 = v66;
  uint64_t v13 = v65;
  uint64_t v14 = v64;
  if ((v71 & 1) == 0) {
    goto LABEL_8;
  }
  return result;
}

uint64_t EquatableProxyView.init(content:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for EquatableProxyView();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance EquatableProxyView<A, B>.Child(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance EquatableProxyView<A, B>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return static EquatableProxyView._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance EquatableProxyView<A, B>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EquatableProxyView<A, B>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance EquatableProxyView<A, B>()
{
}

uint64_t View<>.equatable()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  double v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v4 + 16))(v7, v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v7, a1);
}

_UNKNOWN **base witness table accessor for View in EquatableView<A>()
{
  return &protocol witness table for EquatableView<A>;
}

uint64_t getEnumTagSinglePayload for EquatableView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for EquatableView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187F0FFF4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t base witness table accessor for _AttributeBody in EquatableView<A>.Child()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for EquatableProxyView()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for EquatableProxyView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for EquatableProxyView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187F10514);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for View in EquatableProxyView<A, B>()
{
  return &protocol witness table for EquatableProxyView<A, B>;
}

uint64_t type metadata accessor for EquatableProxyView.Child()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for EquatableProxyView.Child()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EquatableProxyView.Child(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v10 = ((v7 + 4) & ~(unint64_t)v7) + v9;
  int v11 = v7 & 0x100000;
  if ((v8 | 3uLL) > 7 || v11 != 0 || v10 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v14 + ((v8 + 16) & ~(v8 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    BOOL v15 = (void *)(((unint64_t)a1 + v8 + 4) & ~v8);
    unsigned int v16 = (const void *)(((unint64_t)a2 + v8 + 4) & ~v8);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a2 + v8 + 4) & ~v8, 1, v4))
    {
      memcpy(v15, v16, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v15, v16, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t destroy for EquatableProxyView.Child(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v3 = (a1 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v3, 1, v2);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
    return v5(v3, v2);
  }
  return result;
}

_DWORD *initializeWithCopy for EquatableProxyView.Child(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 4) & ~v6);
  uint64_t v8 = (const void *)(((unint64_t)a2 + v6 + 4) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84)) {
      size_t v9 = *(void *)(v5 + 64);
    }
    else {
      size_t v9 = *(void *)(v5 + 64) + 1;
    }
    memcpy(v7, v8, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

_DWORD *assignWithCopy for EquatableProxyView.Child(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 4) & ~v6);
  uint64_t v8 = (void *)(((unint64_t)a2 + v6 + 4) & ~v6);
  size_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v10 = v9(v7, 1, v4);
  int v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v7, v8, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      return a1;
    }
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v7, v8, v4);
      return a1;
    }
    BOOL v15 = *(void (**)(void *, uint64_t))(v5 + 8);
    uint64_t v14 = v5 + 8;
    v15(v7, v4);
    int v12 = *(_DWORD *)(v14 + 76);
    size_t v13 = *(void *)(v14 + 56);
  }
  if (v12) {
    size_t v16 = v13;
  }
  else {
    size_t v16 = v13 + 1;
  }
  memcpy(v7, v8, v16);
  return a1;
}

_DWORD *initializeWithTake for EquatableProxyView.Child(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 4) & ~v6);
  uint64_t v8 = (const void *)(((unint64_t)a2 + v6 + 4) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84)) {
      size_t v9 = *(void *)(v5 + 64);
    }
    else {
      size_t v9 = *(void *)(v5 + 64) + 1;
    }
    memcpy(v7, v8, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

_DWORD *assignWithTake for EquatableProxyView.Child(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 4) & ~v6);
  uint64_t v8 = (void *)(((unint64_t)a2 + v6 + 4) & ~v6);
  size_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v10 = v9(v7, 1, v4);
  int v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v7, v8, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      return a1;
    }
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v7, v8, v4);
      return a1;
    }
    BOOL v15 = *(void (**)(void *, uint64_t))(v5 + 8);
    uint64_t v14 = v5 + 8;
    v15(v7, v4);
    int v12 = *(_DWORD *)(v14 + 76);
    size_t v13 = *(void *)(v14 + 56);
  }
  if (v12) {
    size_t v16 = v13;
  }
  else {
    size_t v16 = v13 + 1;
  }
  memcpy(v7, v8, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for EquatableProxyView.Child(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (!v5) {
    ++v8;
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v10 = v8 + ((v7 + 4) & ~v7);
    char v11 = 8 * v10;
    if (v10 > 3) {
      goto LABEL_8;
    }
    unsigned int v13 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (v12) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v13 <= 0xFF)
      {
        if (v13 < 2) {
          goto LABEL_23;
        }
LABEL_8:
        int v12 = *((unsigned __int8 *)a1 + v10);
        if (!*((unsigned char *)a1 + v10)) {
          goto LABEL_23;
        }
LABEL_15:
        int v14 = (v12 - 1) << v11;
        if (v10 > 3) {
          int v14 = 0;
        }
        if (v10)
        {
          if (v10 > 3) {
            LODWORD(v10) = 4;
          }
          switch((int)v10)
          {
            case 2:
              LODWORD(v10) = *a1;
              break;
            case 3:
              LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              LODWORD(v10) = *(_DWORD *)a1;
              break;
            default:
              LODWORD(v10) = *(unsigned __int8 *)a1;
              break;
          }
        }
        return v6 + (v10 | v14) + 1;
      }
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_15;
      }
    }
  }
LABEL_23:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 4) & ~v7);
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for EquatableProxyView.Child(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  if (!v8) {
    ++v11;
  }
  size_t v12 = v11 + ((v10 + 4) & ~v10);
  BOOL v13 = a3 >= v9;
  unsigned int v14 = a3 - v9;
  if (v14 == 0 || !v13)
  {
LABEL_15:
    if (v9 < a2) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  if (v12 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  unsigned int v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
  if (!HIWORD(v15))
  {
    if (v15 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v15 > 1;
    }
    goto LABEL_15;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_16:
    unsigned int v16 = ~v9 + a2;
    if (v12 < 4)
    {
      int v17 = (v16 >> (8 * v12)) + 1;
      if (v12)
      {
        int v18 = v16 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if (v12 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v12 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v12] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v17;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v12] = v17;
        return;
      default:
        return;
    }
  }
LABEL_23:
  switch(v6)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187F111A0);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_27;
    default:
LABEL_27:
      if (a2)
      {
LABEL_28:
        if (v8 >= 2)
        {
          unint64_t v19 = (unint64_t)&a1[v10 + 4] & ~v10;
          uint64_t v20 = a2 + 1;
          int v21 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
          v21(v19, v20);
        }
      }
      return;
  }
}

uint64_t base witness table accessor for _AttributeBody in EquatableProxyView<A, B>.Child()
{
  return swift_getWitnessTable();
}

uint64_t destroy for ListTableCellModifier(uint64_t a1)
{
  if (*(void *)(a1 + 48) != 1) {
    swift_release();
  }
  int v2 = *(unsigned __int8 *)(a1 + 150);
  if (v2 == 2)
  {
LABEL_6:
    __swift_destroy_boxed_opaque_existential_1(a1 + 80);
    goto LABEL_7;
  }
  if (v2 != 1)
  {
    if (*(unsigned char *)(a1 + 150)) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
LABEL_7:
  swift_release();
LABEL_8:
  uint64_t v3 = *(void *)(a1 + 152);
  char v4 = *(unsigned char *)(a1 + 160);

  return outlined consume of Environment<Bool>.Content(v3, v4);
}

uint64_t initializeWithCopy for ListTableCellModifier(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  if (v5 == 1)
  {
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  }
  else
  {
    *(void *)(a1 + 48) = v5;
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    swift_retain();
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v6 = a1 + 80;
  uint64_t v7 = a2 + 80;
  int v8 = *(unsigned __int8 *)(a2 + 150);
  if (v8 == 2)
  {
    long long v9 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 104) = v9;
    (**(void (***)(uint64_t, uint64_t))(v9 - 8))(v6, v7);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
  }
  else if (v8 == 1)
  {
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 104) = v10;
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(v6, v7);
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
    *(_WORD *)(a1 + 148) = *(_WORD *)(a2 + 148);
  }
  *(unsigned char *)(a1 + 150) = v8;
  swift_retain();
  uint64_t v11 = *(void *)(a2 + 152);
  char v12 = *(unsigned char *)(a2 + 160);
  outlined copy of Environment<Bool>.Content(v11, v12);
  *(void *)(a1 + 152) = v11;
  *(unsigned char *)(a1 + 160) = v12;
  return a1;
}

uint64_t assignWithCopy for ListTableCellModifier(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  uint64_t v6 = a1 + 48;
  uint64_t v7 = *(void *)(a1 + 48);
  long long v9 = (uint64_t *)(a2 + 3);
  uint64_t v8 = *((void *)a2 + 6);
  if (v7 == 1)
  {
    if (v8 == 1)
    {
      uint64_t v10 = *v9;
      *(unsigned char *)(v6 + 8) = *((unsigned char *)a2 + 56);
      *(void *)uint64_t v6 = v10;
    }
    else
    {
      *(void *)(a1 + 48) = v8;
      *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
      swift_retain();
    }
  }
  else if (v8 == 1)
  {
    outlined destroy of ListItemTint(v6);
    char v11 = *((unsigned char *)v9 + 8);
    *(void *)uint64_t v6 = *v9;
    *(unsigned char *)(v6 + 8) = v11;
  }
  else
  {
    *(void *)(a1 + 48) = v8;
    swift_retain();
    swift_release();
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  }
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  if ((long long *)a1 != a2)
  {
    outlined destroy of AccessibilityScrollableContext(a1 + 80);
    int v12 = *((unsigned __int8 *)a2 + 150);
    if (v12 == 2)
    {
      uint64_t v13 = *((void *)a2 + 13);
      *(void *)(a1 + 104) = v13;
      *(void *)(a1 + 112) = *((void *)a2 + 14);
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 80, (uint64_t)(a2 + 5));
      *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 30);
      *(_DWORD *)(a1 + 124) = *((_DWORD *)a2 + 31);
      *(void *)(a1 + 128) = *((void *)a2 + 16);
    }
    else if (v12 == 1)
    {
      *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
      *(_DWORD *)(a1 + 84) = *((_DWORD *)a2 + 21);
      *(void *)(a1 + 88) = *((void *)a2 + 11);
    }
    else
    {
      uint64_t v14 = *((void *)a2 + 13);
      *(void *)(a1 + 104) = v14;
      *(void *)(a1 + 112) = *((void *)a2 + 14);
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 80, (uint64_t)(a2 + 5));
      *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
      *(_DWORD *)(a1 + 128) = *((_DWORD *)a2 + 32);
      *(_DWORD *)(a1 + 132) = *((_DWORD *)a2 + 33);
      *(void *)(a1 + 136) = *((void *)a2 + 17);
      int v15 = *((_DWORD *)a2 + 36);
      *(_WORD *)(a1 + 148) = *((_WORD *)a2 + 74);
      *(_DWORD *)(a1 + 144) = v15;
    }
    *(unsigned char *)(a1 + 150) = v12;
    swift_retain();
  }
  uint64_t v16 = *((void *)a2 + 19);
  char v17 = *((unsigned char *)a2 + 160);
  outlined copy of Environment<Bool>.Content(v16, v17);
  uint64_t v18 = *(void *)(a1 + 152);
  char v19 = *(unsigned char *)(a1 + 160);
  *(void *)(a1 + 152) = v16;
  *(unsigned char *)(a1 + 160) = v17;
  outlined consume of Environment<Bool>.Content(v18, v19);
  return a1;
}

uint64_t assignWithTake for ListTableCellModifier(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = a1 + 48;
  uint64_t v7 = a2 + 48;
  uint64_t v6 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48) == 1) {
    goto LABEL_4;
  }
  if (v6 == 1)
  {
    outlined destroy of ListItemTint(v5);
LABEL_4:
    *(void *)uint64_t v5 = *(void *)v7;
    *(unsigned char *)(v5 + 8) = *(unsigned char *)(v7 + 8);
    goto LABEL_6;
  }
  *(void *)(a1 + 48) = v6;
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
LABEL_6:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  if (a1 != a2)
  {
    outlined destroy of AccessibilityScrollableContext(a1 + 80);
    long long v8 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v8;
    *(void *)(a1 + 143) = *(void *)(a2 + 143);
    long long v9 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v9;
  }
  char v10 = *(unsigned char *)(a2 + 160);
  uint64_t v11 = *(void *)(a1 + 152);
  char v12 = *(unsigned char *)(a1 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = v10;
  outlined consume of Environment<Bool>.Content(v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListTableCellModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 161)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for ListTableCellModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 160) = 0;
    *(void *)uint64_t result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 161) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 161) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ListTableCellModifier()
{
  return &type metadata for ListTableCellModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ListTableCellModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ListTableCellModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v40 = a1;
  uint64_t v39 = type metadata accessor for LegacyModifier(0);
  MEMORY[0x1F4188790](v39);
  int v4 = (double *)((char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for IOSMultiColumnModifier(0);
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  long long v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>();
  uint64_t v37 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v38 = (uint64_t)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ListTableCellModifier>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>, MEMORY[0x1E4F3FBA0]);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v36 = (uint64_t)&v34 - v12;
  long long v34 = *(_OWORD *)v2;
  uint64_t v13 = *(void *)(v2 + 16);
  uint64_t v14 = *(void *)(v2 + 24);
  char v15 = *(unsigned char *)(v2 + 32);
  uint64_t v16 = *(void *)(v2 + 40);
  uint64_t v17 = *(void *)(v2 + 48);
  char v18 = *(unsigned char *)(v2 + 56);
  uint64_t v19 = *(void *)(v2 + 64);
  char v20 = *(unsigned char *)(v2 + 72);
  uint64_t v35 = v2 + 80;
  outlined init with copy of AccessibilityScrollableContext(v2 + 80, (uint64_t)(v8 + 80));
  *(_OWORD *)long long v8 = v34;
  *((void *)v8 + 2) = v13;
  *((void *)v8 + 3) = v14;
  v8[32] = v15;
  *((void *)v8 + 5) = v16;
  *((void *)v8 + 6) = v17;
  v8[56] = v18;
  *((void *)v8 + 8) = v19;
  v8[72] = v20;
  int v21 = (uint64_t *)&v8[*(int *)(v6 + 48)];
  *int v21 = swift_getKeyPath();
  type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4D8]);
  swift_storeEnumTagMultiPayload();
  unint64_t v22 = &v8[*(int *)(v6 + 52)];
  *(void *)unint64_t v22 = swift_getKeyPath();
  v22[8] = 0;
  double v24 = *(double *)v2;
  double v23 = *(double *)(v2 + 8);
  double v26 = *(double *)(v2 + 16);
  double v25 = *(double *)(v2 + 24);
  LOBYTE(v22) = *(unsigned char *)(v2 + 32);
  outlined init with copy of ListTableCellModifier(v2, (uint64_t)v41);
  if (v22)
  {
    uint64_t v27 = v42;
    char v28 = v43;
    outlined copy of Transaction?(v17);
    outlined copy of Environment<Bool>.Content(v27, v28);
    double v23 = specialized Environment.wrappedValue.getter(v27, v28);
    double v25 = specialized Environment.wrappedValue.getter(v27, v28);
    outlined consume of Environment<Bool>.Content(v27, v28);
    double v24 = 6.0;
    double v26 = 6.0;
  }
  else
  {
    outlined copy of Transaction?(v17);
  }
  outlined destroy of ListTableCellModifier((uint64_t)v41);
  uint64_t v29 = *(void *)(v2 + 64);
  outlined init with copy of AccessibilityScrollableContext(v35, (uint64_t)(v4 + 5));
  *int v4 = v24;
  v4[1] = v23;
  v4[2] = v26;
  v4[3] = v25;
  *((void *)v4 + 4) = v29;
  uint64_t v30 = (uint64_t *)((char *)v4 + *(int *)(v39 + 28));
  *uint64_t v30 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  uint64_t v31 = v38;
  outlined init with take of IOSMultiColumnModifier((uint64_t)v8, v38, type metadata accessor for IOSMultiColumnModifier);
  outlined init with take of IOSMultiColumnModifier((uint64_t)v4, v31 + *(int *)(v37 + 52), type metadata accessor for LegacyModifier);
  uint64_t v32 = v36;
  outlined init with copy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>(v31, v36, (uint64_t (*)(void))type metadata accessor for StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>);
  outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>(v31, (uint64_t (*)(void))type metadata accessor for StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>);
  return outlined init with take of ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>>(v32, v40);
}

uint64_t type metadata accessor for LegacyModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for LegacyModifier);
}

uint64_t type metadata accessor for IOSMultiColumnModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for IOSMultiColumnModifier);
}

void type metadata accessor for StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>)
  {
    type metadata accessor for IOSMultiColumnModifier(255);
    type metadata accessor for LegacyModifier(255);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<ListTableCellModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<ListTableCellModifier>)
  {
    lazy protocol witness table accessor for type ListTableCellModifier and conformance ListTableCellModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<ListTableCellModifier>);
    }
  }
}

void *LegacyModifier.body(content:)@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v35 = a1;
  uint64_t v3 = type metadata accessor for CellConfiguration();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  long long v8 = &v21[-v7];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v9 = *v1;
  uint64_t v10 = v1[1];
  uint64_t v11 = v1[2];
  uint64_t v12 = v1[3];
  int v33 = static Edge.Set.all.getter();
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v13 = v55[37];
  char v14 = v56;
  uint64_t v15 = v57;
  int v30 = v58;
  uint64_t v29 = v59;
  int v28 = v60;
  uint64_t v27 = v61;
  int v26 = v62;
  uint64_t v25 = v63;
  int v24 = v64;
  uint64_t v23 = v65;
  int v22 = v66;
  uint64_t v31 = v68;
  uint64_t v32 = v67;
  type metadata accessor for LegacyModifier(0);
  specialized Environment.wrappedValue.getter((uint64_t)v5);
  outlined init with copy of UICellConfigurationState?((uint64_t)v5, (uint64_t)v8);
  outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CellConfiguration);
  uint64_t v16 = type metadata accessor for UICellConfigurationState();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v17 + 48))(v8, 1, v16) == 1)
  {
    outlined destroy of Environment<CellConfiguration>.Content((uint64_t)v8, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
    char v18 = 0;
  }
  else
  {
    char v18 = UICellConfigurationState.isSelected.getter();
    (*(void (**)(unsigned char *, uint64_t))(v17 + 8))(v8, v16);
  }
  *(void *)&long long v40 = KeyPath;
  *((void *)&v40 + 1) = v9;
  *(void *)&long long v41 = v10;
  *((void *)&v41 + 1) = v11;
  *(void *)&long long v42 = v12;
  WORD4(v42) = 768;
  LOBYTE(v43) = v33;
  *((void *)&v43 + 1) = v9;
  *(void *)&long long v44 = v10;
  *((void *)&v44 + 1) = v11;
  *(void *)&long long v45 = v12;
  BYTE8(v45) = 0;
  *(void *)&long long v46 = v13;
  BYTE8(v46) = v14;
  *(void *)&long long v47 = v15;
  BYTE8(v47) = v30;
  *(void *)&long long v48 = v29;
  BYTE8(v48) = v28;
  *(void *)&long long v49 = v27;
  BYTE8(v49) = v26;
  *(void *)&long long v50 = v25;
  BYTE8(v50) = v24;
  *(void *)&long long v51 = v23;
  BYTE8(v51) = v22;
  *(void *)&long long v52 = v32;
  *((void *)&v52 + 1) = v31;
  outlined init with copy of AccessibilityScrollableContext((uint64_t)(v2 + 5), (uint64_t)v54);
  v53[0] = v18 & 1;
  outlined init with copy of AccessibilityScrollableContext((uint64_t)v54, (uint64_t)v55);
  outlined init with copy of AccessibilityScrollableContextModifier((uint64_t)v55, (uint64_t)&v39);
  v38[10] = v50;
  v38[11] = v51;
  v38[12] = v52;
  v38[6] = v46;
  unsigned char v38[7] = v47;
  v38[8] = v48;
  v38[9] = v49;
  v38[2] = v42;
  v38[3] = v43;
  _OWORD v38[4] = v44;
  v38[5] = v45;
  v38[0] = v40;
  v38[1] = v41;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v40);
  outlined destroy of AccessibilityScrollableContextModifier((uint64_t)v55);
  uint64_t v19 = 4;
  if (!v53[0]) {
    uint64_t v19 = 0;
  }
  v55[0] = v19;
  AccessibilityNullableOptionSet<>.init(adding:)();
  specialized View.accessibility<A>(_:_:isEnabled:)(v36, v37, 1, (uint64_t)v55);
  outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier>);
  outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v53, (uint64_t (*)(void))type metadata accessor for AccessibilityListCoreCellModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>>);
  swift_release();
  return memcpy(v35, v55, 0x128uLL);
}

uint64_t key path getter for EnvironmentValues.cellConfiguration : EnvironmentValues(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.cellConfiguration : EnvironmentValues(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CellConfiguration();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>(a1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CellConfiguration);
  return EnvironmentValues.cellConfiguration.setter((uint64_t)v4);
}

double IOSMultiColumnModifier.insets.getter()
{
  uint64_t v1 = type metadata accessor for CellConfiguration();
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for IOSMultiColumnModifier(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = *(double *)v0;
  char v8 = *(unsigned char *)(v0 + 32);
  outlined init with copy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>(v0, (uint64_t)v6, type metadata accessor for IOSMultiColumnModifier);
  if (v8)
  {
    specialized Environment.wrappedValue.getter((uint64_t)v3);
    uint64_t v9 = &v6[*(int *)(v4 + 44)];
    uint64_t v10 = *(void *)v9;
    char v11 = v9[8];
    outlined copy of Environment<Bool>.Content(*(void *)v9, v11);
    specialized Environment.wrappedValue.getter(v10, v11);
    outlined consume of Environment<Bool>.Content(v10, v11);
    outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v6, type metadata accessor for IOSMultiColumnModifier);
    if (v3[*(int *)(v1 + 20)] - 2 >= 2)
    {
      if (v3[*(int *)(v1 + 20)]) {
        double v7 = *(double *)&v3[*(int *)(v1 + 36) + 24] + -1.0;
      }
      else {
        double v7 = 6.0;
      }
    }
    else
    {
      double v7 = *(double *)&v3[*(int *)(v1 + 36) + 24];
    }
    uint64_t v12 = (uint64_t (*)(void))type metadata accessor for CellConfiguration;
    uint64_t v13 = (uint64_t)v3;
  }
  else
  {
    uint64_t v12 = type metadata accessor for IOSMultiColumnModifier;
    uint64_t v13 = (uint64_t)v6;
  }
  outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>(v13, v12);
  return v7;
}

uint64_t IOSMultiColumnModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v84 = a1;
  type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v55[-v4];
  uint64_t v6 = type metadata accessor for IOSMultiColumnModifier(0);
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6);
  uint64_t v71 = &v55[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for CellConfiguration();
  MEMORY[0x1F4188790](v9);
  double v70 = &v55[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = &v55[-v12];
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = &v55[-v15];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v17 = v2 + *(int *)(v7 + 48);
  specialized Environment.wrappedValue.getter((uint64_t)v16);
  uint64_t v75 = *(void *)&v16[*(int *)(v9 + 36) + 56];
  outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CellConfiguration);
  uint64_t v73 = swift_getKeyPath();
  double v18 = IOSMultiColumnModifier.insets.getter();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  EdgeInsets.init(_all:)();
  uint64_t v74 = v25;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  double v32 = IOSMultiColumnModifier.insets.getter();
  uint64_t v78 = v33;
  double v79 = v32;
  uint64_t v76 = v35;
  uint64_t v77 = v34;
  int v72 = static Edge.Set.all.getter();
  if (*(unsigned char *)(v2 + 72) == 1)
  {
    specialized Environment.wrappedValue.getter((uint64_t)v13);
    outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CellConfiguration);
  }
  char v81 = v5;
  uint64_t v86 = v17;
  static Alignment.center.getter();
  unsigned __int8 v112 = 0;
  unsigned __int8 v111 = 0;
  unsigned __int8 v110 = 0;
  int v85 = 1;
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v61 = v113[49];
  uint64_t v62 = v115;
  int v56 = v116;
  int v57 = v114;
  char v36 = v118;
  uint64_t v63 = v117;
  uint64_t v64 = v119;
  char v37 = v120;
  char v38 = v122;
  uint64_t v65 = v121;
  uint64_t v66 = v123;
  char v39 = v124;
  uint64_t v68 = v126;
  uint64_t v69 = v125;
  uint64_t v67 = swift_getKeyPath();
  specialized Environment.wrappedValue.getter((uint64_t)v16);
  uint64_t v40 = *(void *)&v16[*(int *)(v9 + 36) + 8];
  swift_retain();
  outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CellConfiguration);
  long long v41 = v71;
  outlined init with copy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>(v2, (uint64_t)v71, type metadata accessor for IOSMultiColumnModifier);
  uint64_t v82 = v2;
  uint64_t v83 = v9;
  if (!v40)
  {
    uint64_t v40 = *((void *)v41 + 6);
    int v85 = v41[56];
    outlined copy of Transaction?(v40);
  }
  int v58 = v112;
  int v59 = v111;
  int v60 = v110;
  char v103 = v57;
  char v101 = v56;
  char v99 = v36;
  char v97 = v37;
  char v95 = v38;
  char v93 = v39;
  outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v41, type metadata accessor for IOSMultiColumnModifier);
  long long v42 = v70;
  specialized Environment.wrappedValue.getter((uint64_t)v70);
  uint64_t v43 = (uint64_t)v81;
  outlined init with copy of UICellConfigurationState?((uint64_t)v42, (uint64_t)v81);
  outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for CellConfiguration);
  uint64_t v44 = type metadata accessor for UICellConfigurationState();
  uint64_t v45 = *(void *)(v44 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44) == 1)
  {
    outlined destroy of Environment<CellConfiguration>.Content(v43, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
    char v46 = 0;
  }
  else
  {
    char v46 = UICellConfigurationState.isSelected.getter();
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
  }
  v89[0] = KeyPath;
  v89[1] = v75;
  LOBYTE(v89[2]) = v58;
  *(_DWORD *)((char *)&v89[2] + 1) = *(_DWORD *)v109;
  HIDWORD(v89[2]) = *(_DWORD *)&v109[3];
  v89[3] = v73;
  *(double *)&v89[4] = v18;
  v89[5] = v20;
  v89[6] = v22;
  v89[7] = v24;
  LOWORD(v89[8]) = 768;
  *(_DWORD *)((char *)&v89[8] + 2) = *(_DWORD *)&v107[7];
  HIWORD(v89[8]) = v108;
  LOBYTE(v89[9]) = 2;
  *(_DWORD *)((char *)&v89[9] + 1) = *(_DWORD *)v107;
  HIDWORD(v89[9]) = *(_DWORD *)&v107[3];
  v89[10] = v74;
  v89[11] = v27;
  v89[12] = v29;
  v89[13] = v31;
  LOBYTE(v89[14]) = v59;
  *(_DWORD *)((char *)&v89[14] + 1) = *(_DWORD *)v106;
  HIDWORD(v89[14]) = *(_DWORD *)&v106[3];
  LOBYTE(v89[15]) = v72;
  HIDWORD(v89[15]) = *(_DWORD *)&v105[3];
  *(_DWORD *)((char *)&v89[15] + 1) = *(_DWORD *)v105;
  *(double *)&v89[16] = v79;
  v89[17] = v78;
  v89[18] = v77;
  v89[19] = v76;
  LOBYTE(v89[20]) = v60;
  HIDWORD(v89[20]) = *(_DWORD *)&v104[3];
  *(_DWORD *)((char *)&v89[20] + 1) = *(_DWORD *)v104;
  v89[21] = v61;
  LOBYTE(v89[22]) = v103;
  HIDWORD(v89[22]) = *(_DWORD *)&v102[3];
  *(_DWORD *)((char *)&v89[22] + 1) = *(_DWORD *)v102;
  v89[23] = v62;
  LOBYTE(v89[24]) = v101;
  HIDWORD(v89[24]) = *(_DWORD *)&v100[3];
  *(_DWORD *)((char *)&v89[24] + 1) = *(_DWORD *)v100;
  v89[25] = v63;
  LOBYTE(v89[26]) = v99;
  HIDWORD(v89[26]) = *(_DWORD *)&v98[3];
  *(_DWORD *)((char *)&v89[26] + 1) = *(_DWORD *)v98;
  v89[27] = v64;
  LOBYTE(v89[28]) = v97;
  HIDWORD(v89[28]) = *(_DWORD *)&v96[3];
  *(_DWORD *)((char *)&v89[28] + 1) = *(_DWORD *)v96;
  v89[29] = v65;
  LOBYTE(v89[30]) = v95;
  HIDWORD(v89[30]) = *(_DWORD *)&v94[3];
  *(_DWORD *)((char *)&v89[30] + 1) = *(_DWORD *)v94;
  v89[31] = v66;
  LOBYTE(v89[32]) = v93;
  *(_DWORD *)((char *)&v89[32] + 1) = *(_DWORD *)v92;
  HIDWORD(v89[32]) = *(_DWORD *)&v92[3];
  v89[33] = v69;
  v89[34] = v68;
  v89[35] = v67;
  v89[36] = v40;
  LOBYTE(v89[37]) = v85;
  outlined init with copy of AccessibilityScrollableContext(v82 + 80, (uint64_t)v91);
  v90[0] = v46 & 1;
  outlined init with copy of AccessibilityScrollableContext((uint64_t)v91, (uint64_t)v88);
  outlined init with copy of AccessibilityScrollableContextModifier((uint64_t)v88, (uint64_t)&v87[38]);
  memcpy(v87, v89, 0x129uLL);
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>((uint64_t)v89);
  outlined destroy of AccessibilityScrollableContextModifier((uint64_t)v88);
  uint64_t v47 = 4;
  if (!v90[0]) {
    uint64_t v47 = 0;
  }
  v88[0] = v47;
  AccessibilityNullableOptionSet<>.init(adding:)();
  specialized View.accessibility<A>(_:_:isEnabled:)(v113[0], v113[1], 1, (uint64_t)v88);
  outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v87, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>);
  memcpy(v113, v88, 0x188uLL);
  outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v90, (uint64_t (*)(void))type metadata accessor for AccessibilityListCoreCellModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>>);
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>((uint64_t)v89);
  specialized Environment.wrappedValue.getter((uint64_t)v16);
  uint64_t v48 = v83;
  int v49 = v16[*(int *)(v83 + 20)];
  outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CellConfiguration);
  if (v49)
  {
    specialized Environment.wrappedValue.getter((uint64_t)v16);
    swift_retain();
    outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CellConfiguration);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>(0);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>);
    View.defaultForegroundColor(_:)();
    swift_release();
    specialized Environment.wrappedValue.getter((uint64_t)v16);
    uint64_t v50 = *(void *)&v16[*(int *)(v48 + 36) + 16];
    swift_retain();
    outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CellConfiguration);
    uint64_t v51 = swift_getKeyPath();
    outlined init with copy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v88, (uint64_t)v87, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>);
    v87[51] = v51;
    v87[52] = v50;
    outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v88, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>);
    memcpy(v88, v87, sizeof(v88));
    uint64_t v52 = v84;
    outlined init with copy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v88, v84, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
    *(unsigned char *)(v52 + 424) = 1;
    outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v88, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
  }
  else
  {
    uint64_t v53 = v84;
    outlined init with copy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v113, v84, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>);
    *(unsigned char *)(v53 + 424) = 0;
  }
  return outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>((uint64_t)v113, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>);
}

void key path getter for EnvironmentValues.horizontalListMargin : EnvironmentValues(double *a1@<X8>)
{
  *a1 = EnvironmentValues.horizontalListMargin.getter();
}

void sub_187F130F0(double *a1@<X8>)
{
  *a1 = EnvironmentValues.horizontalListMargin.getter();
}

uint64_t key path setter for EnvironmentValues.horizontalListMargin : EnvironmentValues()
{
  return EnvironmentValues.horizontalListMargin.setter();
}

uint64_t sub_187F13154()
{
  return EnvironmentValues.horizontalListMargin.setter();
}

uint64_t outlined init with copy of ListTableCellModifier(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of ListTableCellModifier(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of IOSMultiColumnModifier(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ListTableCellModifier>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>, MEMORY[0x1E4F3FBA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for LegacyModifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 32) = a2[4];
    uint64_t v8 = a1 + 40;
    uint64_t v9 = a2 + 5;
    int v10 = *((unsigned __int8 *)a2 + 110);
    if (v10 == 2)
    {
      long long v12 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(v4 + 64) = v12;
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))(v8, (uint64_t)v9);
      *(void *)(v4 + 80) = a2[10];
      *(void *)(v4 + 88) = a2[11];
    }
    else if (v10 == 1)
    {
      *(void *)(v4 + 40) = a2[5];
      *(void *)(v4 + 48) = a2[6];
    }
    else
    {
      long long v13 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(v4 + 64) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(v8, (uint64_t)v9);
      *(unsigned char *)(v4 + 80) = *((unsigned char *)a2 + 80);
      *(void *)(v4 + 88) = a2[11];
      *(void *)(v4 + 96) = a2[12];
      *(_DWORD *)(v4 + 104) = *((_DWORD *)a2 + 26);
      *(_WORD *)(v4 + 108) = *((_WORD *)a2 + 54);
    }
    *(unsigned char *)(v4 + 110) = v10;
    swift_retain();
    uint64_t v14 = *(int *)(a3 + 28);
    uint64_t v15 = (void *)(v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4D8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = type metadata accessor for UICellConfigurationState();
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
        memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      uint64_t v20 = (int *)type metadata accessor for CellConfiguration();
      *((unsigned char *)v15 + v20[5]) = *((unsigned char *)v16 + v20[5]);
      *((unsigned char *)v15 + v20[6]) = *((unsigned char *)v16 + v20[6]);
      *((unsigned char *)v15 + v20[7]) = *((unsigned char *)v16 + v20[7]);
      *(void *)((char *)v15 + v20[8]) = *(void *)((char *)v16 + v20[8]);
      uint64_t v21 = v20[9];
      uint64_t v22 = (char *)v15 + v21;
      uint64_t v23 = (char *)v16 + v21;
      uint64_t v24 = *((void *)v23 + 1);
      *(void *)uint64_t v22 = *(void *)v23;
      *((void *)v22 + 1) = v24;
      *((void *)v22 + 2) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 24) = *(_OWORD *)(v23 + 24);
      *(_OWORD *)(v22 + 40) = *(_OWORD *)(v23 + 40);
      *((void *)v22 + 7) = *((void *)v23 + 7);
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *uint64_t v15 = *v16;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

void type metadata accessor for Environment<CellConfiguration>.Content(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t destroy for LegacyModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 40;
  int v5 = *(unsigned __int8 *)(a1 + 110);
  if (v5 == 2)
  {
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1(v4);
    goto LABEL_5;
  }
  if (v5 != 1)
  {
    if (*(unsigned char *)(a1 + 110)) {
      goto LABEL_6;
    }
    goto LABEL_4;
  }
LABEL_5:
  swift_release();
LABEL_6:
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for UICellConfigurationState();
    uint64_t v8 = *(void *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
    type metadata accessor for CellConfiguration();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t initializeWithCopy for LegacyModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = a1 + 40;
  uint64_t v8 = a2 + 40;
  int v9 = *(unsigned __int8 *)(a2 + 110);
  if (v9 == 2)
  {
    long long v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 64) = v10;
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(v7, v8);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
  }
  else if (v9 == 1)
  {
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 64) = v11;
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(v7, v8);
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
    *(_WORD *)(a1 + 108) = *(_WORD *)(a2 + 108);
  }
  *(unsigned char *)(a1 + 110) = v9;
  swift_retain();
  uint64_t v12 = *(int *)(a3 + 28);
  long long v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = type metadata accessor for UICellConfigurationState();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v18 = (int *)type metadata accessor for CellConfiguration();
    *((unsigned char *)v13 + v18[5]) = *((unsigned char *)v14 + v18[5]);
    *((unsigned char *)v13 + v18[6]) = *((unsigned char *)v14 + v18[6]);
    *((unsigned char *)v13 + v18[7]) = *((unsigned char *)v14 + v18[7]);
    *(void *)((char *)v13 + v18[8]) = *(void *)((char *)v14 + v18[8]);
    uint64_t v19 = v18[9];
    uint64_t v20 = (char *)v13 + v19;
    uint64_t v21 = (char *)v14 + v19;
    uint64_t v22 = *((void *)v21 + 1);
    *(void *)uint64_t v20 = *(void *)v21;
    *((void *)v20 + 1) = v22;
    *((void *)v20 + 2) = *((void *)v21 + 2);
    *(_OWORD *)(v20 + 24) = *(_OWORD *)(v21 + 24);
    *(_OWORD *)(v20 + 40) = *(_OWORD *)(v21 + 40);
    *((void *)v20 + 7) = *((void *)v21 + 7);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    void *v13 = *v14;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for LegacyModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (a1 != a2)
  {
    uint64_t v6 = a2 + 40;
    outlined destroy of AccessibilityScrollableContext(a1 + 40);
    int v7 = *(unsigned __int8 *)(a2 + 110);
    if (v7 == 2)
    {
      uint64_t v8 = *(void *)(a2 + 64);
      *(void *)(a1 + 64) = v8;
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 40, v6);
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
      *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
    }
    else if (v7 == 1)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
    }
    else
    {
      uint64_t v9 = *(void *)(a2 + 64);
      *(void *)(a1 + 64) = v9;
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 40, v6);
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
      *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      int v10 = *(_DWORD *)(a2 + 104);
      *(_WORD *)(a1 + 108) = *(_WORD *)(a2 + 108);
      *(_DWORD *)(a1 + 104) = v10;
    }
    *(unsigned char *)(a1 + 110) = v7;
    swift_retain();
    uint64_t v11 = *(int *)(a3 + 28);
    uint64_t v12 = (void *)(a1 + v11);
    long long v13 = (void *)(a2 + v11);
    uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    outlined destroy of Environment<CellConfiguration>.Content(a1 + v11, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4D8]);
    type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, v14);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for UICellConfigurationState();
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15))
      {
        type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
        memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v12, v13, v15);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
      }
      uint64_t v18 = (int *)type metadata accessor for CellConfiguration();
      *((unsigned char *)v12 + v18[5]) = *((unsigned char *)v13 + v18[5]);
      *((unsigned char *)v12 + v18[6]) = *((unsigned char *)v13 + v18[6]);
      *((unsigned char *)v12 + v18[7]) = *((unsigned char *)v13 + v18[7]);
      *(void *)((char *)v12 + v18[8]) = *(void *)((char *)v13 + v18[8]);
      uint64_t v19 = v18[9];
      uint64_t v20 = (char *)v12 + v19;
      uint64_t v21 = (char *)v13 + v19;
      *(void *)uint64_t v20 = *(void *)v21;
      *((void *)v20 + 1) = *((void *)v21 + 1);
      *((void *)v20 + 2) = *((void *)v21 + 2);
      long long v22 = *(_OWORD *)(v21 + 24);
      *(_OWORD *)(v20 + 40) = *(_OWORD *)(v21 + 40);
      *(_OWORD *)(v20 + 24) = v22;
      *((void *)v20 + 7) = *((void *)v21 + 7);
      swift_retain();
      swift_retain();
    }
    else
    {
      *uint64_t v12 = *v13;
    }
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for LegacyModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 103) = *(void *)(a2 + 103);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)(a1 + v5);
  int v7 = (char *)(a2 + v5);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4D8]);
  uint64_t v9 = v8;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for UICellConfigurationState();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10))
    {
      type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
      memcpy(v6, v7, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v6, v7, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
    }
    long long v13 = (int *)type metadata accessor for CellConfiguration();
    v6[v13[5]] = v7[v13[5]];
    v6[v13[6]] = v7[v13[6]];
    v6[v13[7]] = v7[v13[7]];
    *(void *)&v6[v13[8]] = *(void *)&v7[v13[8]];
    uint64_t v14 = v13[9];
    uint64_t v15 = &v6[v14];
    uint64_t v16 = &v7[v14];
    long long v17 = *((_OWORD *)v16 + 1);
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v17;
    long long v18 = *((_OWORD *)v16 + 3);
    *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
    *((_OWORD *)v15 + 3) = v18;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
  }
  return a1;
}

uint64_t assignWithTake for LegacyModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (a1 != a2)
  {
    outlined destroy of AccessibilityScrollableContext(a1 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 103) = *(void *)(a2 + 103);
    long long v7 = *(_OWORD *)(a2 + 40);
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = (char *)(a1 + v8);
    uint64_t v10 = (char *)(a2 + v8);
    *(_OWORD *)(a1 + 40) = v7;
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    outlined destroy of Environment<CellConfiguration>.Content(a1 + v8, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4D8]);
    type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, v11);
    uint64_t v13 = v12;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for UICellConfigurationState();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v14))
      {
        type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
        memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v9, v10, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v9, 0, 1, v14);
      }
      long long v17 = (int *)type metadata accessor for CellConfiguration();
      v9[v17[5]] = v10[v17[5]];
      v9[v17[6]] = v10[v17[6]];
      v9[v17[7]] = v10[v17[7]];
      *(void *)&v9[v17[8]] = *(void *)&v10[v17[8]];
      uint64_t v18 = v17[9];
      uint64_t v19 = &v9[v18];
      uint64_t v20 = &v10[v18];
      long long v21 = *((_OWORD *)v20 + 1);
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
      *((_OWORD *)v19 + 1) = v21;
      long long v22 = *((_OWORD *)v20 + 3);
      *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
      *((_OWORD *)v19 + 3) = v22;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187F144C0);
}

uint64_t sub_187F144C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 253)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 110);
    if (v4 > 2) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for Environment<CellConfiguration>, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4E0]);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for LegacyModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187F145AC);
}

uint64_t sub_187F145AC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 253)
  {
    *(unsigned char *)(result + 110) = -(char)a2;
  }
  else
  {
    type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for Environment<CellConfiguration>, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4E0]);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for LegacyModifier()
{
  type metadata accessor for Environment<CellConfiguration>.Content(319, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4D8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for IOSMultiColumnModifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(void *)(a1 + 40) = a2[5];
    uint64_t v8 = a2[6];
    if (v8 == 1)
    {
      *(void *)(v4 + 48) = a2[6];
      *(unsigned char *)(v4 + 56) = *((unsigned char *)a2 + 56);
    }
    else
    {
      *(void *)(v4 + 48) = v8;
      *(unsigned char *)(v4 + 56) = *((unsigned char *)a2 + 56);
      swift_retain();
    }
    *(void *)(v4 + 64) = a2[8];
    *(unsigned char *)(v4 + 72) = *((unsigned char *)a2 + 72);
    uint64_t v10 = v4 + 80;
    uint64_t v11 = a2 + 10;
    int v12 = *((unsigned __int8 *)a2 + 150);
    if (v12 == 2)
    {
      long long v13 = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(v4 + 104) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(v10, (uint64_t)v11);
      *(void *)(v4 + 120) = a2[15];
      *(void *)(v4 + 128) = a2[16];
    }
    else if (v12 == 1)
    {
      *(void *)(v4 + 80) = a2[10];
      *(void *)(v4 + 88) = a2[11];
    }
    else
    {
      long long v14 = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(v4 + 104) = v14;
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(v10, (uint64_t)v11);
      *(unsigned char *)(v4 + 120) = *((unsigned char *)a2 + 120);
      *(void *)(v4 + 128) = a2[16];
      *(void *)(v4 + 136) = a2[17];
      *(_DWORD *)(v4 + 144) = *((_DWORD *)a2 + 36);
      *(_WORD *)(v4 + 148) = *((_WORD *)a2 + 74);
    }
    *(unsigned char *)(v4 + 150) = v12;
    swift_retain();
    uint64_t v15 = *(int *)(a3 + 40);
    uint64_t v16 = (void *)(v4 + v15);
    long long v17 = (uint64_t *)((char *)a2 + v15);
    type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4D8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = type metadata accessor for UICellConfigurationState();
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v16, v17, v18);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      long long v21 = (int *)type metadata accessor for CellConfiguration();
      *((unsigned char *)v16 + v21[5]) = *((unsigned char *)v17 + v21[5]);
      *((unsigned char *)v16 + v21[6]) = *((unsigned char *)v17 + v21[6]);
      *((unsigned char *)v16 + v21[7]) = *((unsigned char *)v17 + v21[7]);
      *(void *)((char *)v16 + v21[8]) = *(void *)((char *)v17 + v21[8]);
      uint64_t v22 = v21[9];
      uint64_t v23 = (char *)v16 + v22;
      uint64_t v24 = (char *)v17 + v22;
      uint64_t v25 = *((void *)v24 + 1);
      *(void *)uint64_t v23 = *(void *)v24;
      *((void *)v23 + 1) = v25;
      *((void *)v23 + 2) = *((void *)v24 + 2);
      *(_OWORD *)(v23 + 24) = *(_OWORD *)(v24 + 24);
      *(_OWORD *)(v23 + 40) = *(_OWORD *)(v24 + 40);
      *((void *)v23 + 7) = *((void *)v24 + 7);
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *uint64_t v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v26 = *(int *)(a3 + 44);
    uint64_t v27 = v4 + v26;
    uint64_t v28 = (uint64_t)a2 + v26;
    uint64_t v29 = *(void *)v28;
    char v30 = *(unsigned char *)(v28 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v28, v30);
    *(void *)uint64_t v27 = v29;
    *(unsigned char *)(v27 + 8) = v30;
  }
  return v4;
}

uint64_t destroy for IOSMultiColumnModifier(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 48) != 1) {
    swift_release();
  }
  int v4 = *(unsigned __int8 *)(a1 + 150);
  if (v4 == 2)
  {
LABEL_6:
    __swift_destroy_boxed_opaque_existential_1(a1 + 80);
    goto LABEL_7;
  }
  if (v4 != 1)
  {
    if (*(unsigned char *)(a1 + 150)) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
LABEL_7:
  swift_release();
LABEL_8:
  uint64_t v5 = a1 + *(int *)(a2 + 40);
  type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for UICellConfigurationState();
    uint64_t v7 = *(void *)(v6 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    }
    type metadata accessor for CellConfiguration();
    swift_release();
    swift_release();
  }
  swift_release();
  uint64_t v8 = a1 + *(int *)(a2 + 44);
  uint64_t v9 = *(void *)v8;
  char v10 = *(unsigned char *)(v8 + 8);

  return outlined consume of Environment<Bool>.Content(v9, v10);
}

uint64_t initializeWithCopy for IOSMultiColumnModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  if (v7 == 1)
  {
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  }
  else
  {
    *(void *)(a1 + 48) = v7;
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    swift_retain();
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v8 = a1 + 80;
  uint64_t v9 = a2 + 80;
  int v10 = *(unsigned __int8 *)(a2 + 150);
  if (v10 == 2)
  {
    long long v11 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 104) = v11;
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(v8, v9);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
  }
  else if (v10 == 1)
  {
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 104) = v12;
    (**(void (***)(uint64_t, uint64_t))(v12 - 8))(v8, v9);
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
    *(_WORD *)(a1 + 148) = *(_WORD *)(a2 + 148);
  }
  *(unsigned char *)(a1 + 150) = v10;
  swift_retain();
  uint64_t v13 = *(int *)(a3 + 40);
  long long v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = type metadata accessor for UICellConfigurationState();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v19 = (int *)type metadata accessor for CellConfiguration();
    *((unsigned char *)v14 + v19[5]) = *((unsigned char *)v15 + v19[5]);
    *((unsigned char *)v14 + v19[6]) = *((unsigned char *)v15 + v19[6]);
    *((unsigned char *)v14 + v19[7]) = *((unsigned char *)v15 + v19[7]);
    *(void *)((char *)v14 + v19[8]) = *(void *)((char *)v15 + v19[8]);
    uint64_t v20 = v19[9];
    long long v21 = (char *)v14 + v20;
    uint64_t v22 = (char *)v15 + v20;
    uint64_t v23 = *((void *)v22 + 1);
    *(void *)long long v21 = *(void *)v22;
    *((void *)v21 + 1) = v23;
    *((void *)v21 + 2) = *((void *)v22 + 2);
    *(_OWORD *)(v21 + 24) = *(_OWORD *)(v22 + 24);
    *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
    *((void *)v21 + 7) = *((void *)v22 + 7);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *long long v14 = *v15;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v24 = *(int *)(a3 + 44);
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = *(void *)v26;
  char v28 = *(unsigned char *)(v26 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v26, v28);
  *(void *)uint64_t v25 = v27;
  *(unsigned char *)(v25 + 8) = v28;
  return a1;
}

uint64_t assignWithCopy for IOSMultiColumnModifier(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v6 = *a2;
  long long v7 = a2[1];
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  uint64_t v8 = a1 + 48;
  uint64_t v9 = *(void *)(a1 + 48);
  long long v11 = (uint64_t *)(a2 + 3);
  uint64_t v10 = *((void *)a2 + 6);
  if (v9 == 1)
  {
    if (v10 == 1)
    {
      uint64_t v12 = *v11;
      *(unsigned char *)(v8 + 8) = *((unsigned char *)a2 + 56);
      *(void *)uint64_t v8 = v12;
    }
    else
    {
      *(void *)(a1 + 48) = v10;
      *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
      swift_retain();
    }
  }
  else if (v10 == 1)
  {
    outlined destroy of ListItemTint(v8);
    char v13 = *((unsigned char *)v11 + 8);
    *(void *)uint64_t v8 = *v11;
    *(unsigned char *)(v8 + 8) = v13;
  }
  else
  {
    *(void *)(a1 + 48) = v10;
    swift_retain();
    swift_release();
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  }
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  if ((long long *)a1 != a2)
  {
    outlined destroy of AccessibilityScrollableContext(a1 + 80);
    int v14 = *((unsigned __int8 *)a2 + 150);
    if (v14 == 2)
    {
      uint64_t v15 = *((void *)a2 + 13);
      *(void *)(a1 + 104) = v15;
      *(void *)(a1 + 112) = *((void *)a2 + 14);
      (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 80, (uint64_t)(a2 + 5));
      *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 30);
      *(_DWORD *)(a1 + 124) = *((_DWORD *)a2 + 31);
      *(void *)(a1 + 128) = *((void *)a2 + 16);
    }
    else if (v14 == 1)
    {
      *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
      *(_DWORD *)(a1 + 84) = *((_DWORD *)a2 + 21);
      *(void *)(a1 + 88) = *((void *)a2 + 11);
    }
    else
    {
      uint64_t v16 = *((void *)a2 + 13);
      *(void *)(a1 + 104) = v16;
      *(void *)(a1 + 112) = *((void *)a2 + 14);
      (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 80, (uint64_t)(a2 + 5));
      *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
      *(_DWORD *)(a1 + 128) = *((_DWORD *)a2 + 32);
      *(_DWORD *)(a1 + 132) = *((_DWORD *)a2 + 33);
      *(void *)(a1 + 136) = *((void *)a2 + 17);
      int v17 = *((_DWORD *)a2 + 36);
      *(_WORD *)(a1 + 148) = *((_WORD *)a2 + 74);
      *(_DWORD *)(a1 + 144) = v17;
    }
    *(unsigned char *)(a1 + 150) = v14;
    swift_retain();
    uint64_t v18 = *(int *)(a3 + 40);
    uint64_t v19 = (void *)(a1 + v18);
    uint64_t v20 = (void *)((char *)a2 + v18);
    long long v21 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    outlined destroy of Environment<CellConfiguration>.Content(a1 + v18, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4D8]);
    type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, v21);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = type metadata accessor for UICellConfigurationState();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
      {
        type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
        memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v23 + 16))(v19, v20, v22);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
      }
      uint64_t v25 = (int *)type metadata accessor for CellConfiguration();
      *((unsigned char *)v19 + v25[5]) = *((unsigned char *)v20 + v25[5]);
      *((unsigned char *)v19 + v25[6]) = *((unsigned char *)v20 + v25[6]);
      *((unsigned char *)v19 + v25[7]) = *((unsigned char *)v20 + v25[7]);
      *(void *)((char *)v19 + v25[8]) = *(void *)((char *)v20 + v25[8]);
      uint64_t v26 = v25[9];
      uint64_t v27 = (char *)v19 + v26;
      char v28 = (char *)v20 + v26;
      *(void *)uint64_t v27 = *(void *)v28;
      *((void *)v27 + 1) = *((void *)v28 + 1);
      *((void *)v27 + 2) = *((void *)v28 + 2);
      long long v29 = *(_OWORD *)(v28 + 24);
      *(_OWORD *)(v27 + 40) = *(_OWORD *)(v28 + 40);
      *(_OWORD *)(v27 + 24) = v29;
      *((void *)v27 + 7) = *((void *)v28 + 7);
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      void *v19 = *v20;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v30 = *(int *)(a3 + 44);
  uint64_t v31 = a1 + v30;
  uint64_t v32 = (uint64_t)a2 + v30;
  uint64_t v33 = *(void *)v32;
  char v34 = *(unsigned char *)(v32 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v32, v34);
  uint64_t v35 = *(void *)v31;
  char v36 = *(unsigned char *)(v31 + 8);
  *(void *)uint64_t v31 = v33;
  *(unsigned char *)(v31 + 8) = v34;
  outlined consume of Environment<Bool>.Content(v35, v36);
  return a1;
}

uint64_t initializeWithTake for IOSMultiColumnModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 96);
  long long v10 = *(_OWORD *)(a2 + 112);
  long long v11 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 143) = *(void *)(a2 + 143);
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 128) = v11;
  uint64_t v12 = *(int *)(a3 + 40);
  char v13 = (char *)(a1 + v12);
  int v14 = (char *)(a2 + v12);
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4D8]);
  uint64_t v16 = v15;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = type metadata accessor for UICellConfigurationState();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v14, 1, v17))
    {
      type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
      memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v13, v14, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v13, 0, 1, v17);
    }
    uint64_t v20 = (int *)type metadata accessor for CellConfiguration();
    v13[v20[5]] = v14[v20[5]];
    v13[v20[6]] = v14[v20[6]];
    v13[v20[7]] = v14[v20[7]];
    *(void *)&v13[v20[8]] = *(void *)&v14[v20[8]];
    uint64_t v21 = v20[9];
    uint64_t v22 = &v13[v21];
    uint64_t v23 = &v14[v21];
    long long v24 = *((_OWORD *)v23 + 1);
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    *((_OWORD *)v22 + 1) = v24;
    long long v25 = *((_OWORD *)v23 + 3);
    *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
    *((_OWORD *)v22 + 3) = v25;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  uint64_t v26 = *(int *)(a3 + 44);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  return a1;
}

uint64_t assignWithTake for IOSMultiColumnModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = a1 + 48;
  uint64_t v9 = a2 + 48;
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48) == 1) {
    goto LABEL_4;
  }
  if (v8 == 1)
  {
    outlined destroy of ListItemTint(v7);
LABEL_4:
    *(void *)uint64_t v7 = *(void *)v9;
    *(unsigned char *)(v7 + 8) = *(unsigned char *)(v9 + 8);
    goto LABEL_6;
  }
  *(void *)(a1 + 48) = v8;
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
LABEL_6:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  if (a1 != a2)
  {
    outlined destroy of AccessibilityScrollableContext(a1 + 80);
    long long v10 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v10;
    *(void *)(a1 + 143) = *(void *)(a2 + 143);
    long long v11 = *(_OWORD *)(a2 + 96);
    uint64_t v12 = *(int *)(a3 + 40);
    char v13 = (char *)(a1 + v12);
    int v14 = (char *)(a2 + v12);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v11;
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    outlined destroy of Environment<CellConfiguration>.Content(a1 + v12, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4D8]);
    type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, v15);
    uint64_t v17 = v16;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = type metadata accessor for UICellConfigurationState();
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v14, 1, v18))
      {
        type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
        memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v13, v14, v18);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v13, 0, 1, v18);
      }
      uint64_t v21 = (int *)type metadata accessor for CellConfiguration();
      v13[v21[5]] = v14[v21[5]];
      v13[v21[6]] = v14[v21[6]];
      v13[v21[7]] = v14[v21[7]];
      *(void *)&v13[v21[8]] = *(void *)&v14[v21[8]];
      uint64_t v22 = v21[9];
      uint64_t v23 = &v13[v22];
      long long v24 = &v14[v22];
      long long v25 = *((_OWORD *)v24 + 1);
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
      *((_OWORD *)v23 + 1) = v25;
      long long v26 = *((_OWORD *)v24 + 3);
      *((_OWORD *)v23 + 2) = *((_OWORD *)v24 + 2);
      *((_OWORD *)v23 + 3) = v26;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
  }
  uint64_t v27 = *(int *)(a3 + 44);
  uint64_t v28 = a1 + v27;
  long long v29 = (uint64_t *)(a2 + v27);
  uint64_t v30 = *v29;
  LOBYTE(v29) = *((unsigned char *)v29 + 8);
  uint64_t v31 = *(void *)v28;
  char v32 = *(unsigned char *)(v28 + 8);
  *(void *)uint64_t v28 = v30;
  *(unsigned char *)(v28 + 8) = (_BYTE)v29;
  outlined consume of Environment<Bool>.Content(v31, v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for IOSMultiColumnModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187F15B14);
}

uint64_t sub_187F15B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483645)
  {
    unint64_t v4 = *(void *)(a1 + 48);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 - 1) & ~(((int)v4 - 1) >> 31);
  }
  else
  {
    type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for Environment<CellConfiguration>, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4E0]);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for IOSMultiColumnModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187F15C10);
}

uint64_t sub_187F15C10(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483645)
  {
    *(void *)(result + 48) = (a2 + 1);
  }
  else
  {
    type metadata accessor for Environment<CellConfiguration>.Content(0, &lazy cache variable for type metadata for Environment<CellConfiguration>, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4E0]);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for IOSMultiColumnModifier()
{
  type metadata accessor for Environment<CellConfiguration>.Content(319, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4D8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ListTableCellModifier>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<ListTableCellModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ListTableCellModifier>);
    lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type IOSMultiColumnModifier and conformance IOSMultiColumnModifier, (void (*)(uint64_t))type metadata accessor for IOSMultiColumnModifier);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type LegacyModifier and conformance LegacyModifier, (void (*)(uint64_t))type metadata accessor for LegacyModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in IOSMultiColumnModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in LegacyModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined destroy of StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined destroy of Environment<CellConfiguration>.Content(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  type metadata accessor for Environment<CellConfiguration>.Content(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>)
  {
    type metadata accessor for _ViewModifier_Content<LegacyModifier>();
    type metadata accessor for _EnvironmentKeyWritingModifier<EdgeInsets>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<EdgeInsets>, MEMORY[0x1E4F3F360], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<LegacyModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<LegacyModifier>)
  {
    type metadata accessor for LegacyModifier(255);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type LegacyModifier and conformance LegacyModifier, (void (*)(uint64_t))type metadata accessor for LegacyModifier);
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<LegacyModifier>);
    }
  }
}

void type metadata accessor for AccessibilityListCoreCellModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>>(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<LegacyModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<LegacyModifier>);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<EdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<EdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<EdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<EdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<EdgeInsets>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<EdgeInsets>, MEMORY[0x1E4F3F360], MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<EdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 288);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Transaction?(v2);
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>(255);
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_4(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListItemTint?>, &lazy cache variable for type metadata for ListItemTint?, (uint64_t)&type metadata for ListItemTint);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<EdgeInsets>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<EdgeInsets>, MEMORY[0x1E4F3F360], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>)
  {
    type metadata accessor for _ViewModifier_Content<IOSMultiColumnModifier>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_4(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat?>, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E4FBC958]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<IOSMultiColumnModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<IOSMultiColumnModifier>)
  {
    type metadata accessor for IOSMultiColumnModifier(255);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type IOSMultiColumnModifier and conformance IOSMultiColumnModifier, (void (*)(uint64_t))type metadata accessor for IOSMultiColumnModifier);
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<IOSMultiColumnModifier>);
    }
  }
}

void type metadata accessor for AccessibilityListCoreCellModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>>(uint64_t a1)
{
}

void type metadata accessor for AccessibilityListCoreCellModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    unint64_t v6 = type metadata accessor for AccessibilityListCoreCellModifier();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListItemTint?> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<EdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<IOSMultiColumnModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<IOSMultiColumnModifier>);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<CGFloat?> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<CGFloat?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_4(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat?>, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E4FBC958]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 288);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Transaction?(v2);
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>(255);
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_4(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_4(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<EdgeInsets>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_187F16EBC()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, Accessibili()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, Acces;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, Acces)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAt, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, Acces);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t specialized static Scene._makeScene(scene:inputs:)@<X0>(int a1@<W0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  static DynamicPropertyCache.fields(of:)();
  long long v5 = v23;
  char v6 = v24;
  int v7 = DWORD1(v24);
  long long v8 = a2[1];
  long long v20 = *a2;
  long long v21 = v8;
  v22[0] = a2[2];
  *(_OWORD *)((char *)v22 + 12) = *(long long *)((char *)a2 + 44);
  outlined retain of _ViewInputs((uint64_t)a2);
  LOBYTE(v23) = v24;
  specialized static Scene.makeBody(scene:inputs:fields:)();
  long long v9 = v23;
  char v10 = v24;
  long long v23 = v20;
  long long v24 = v21;
  v25[0] = v22[0];
  *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)((char *)v22 + 12);
  outlined retain of _ViewInputs((uint64_t)&v23);
  specialized static Scene._makeScene(scene:inputs:)(&v15, v15, &v23);
  outlined release of _ViewInputs((uint64_t)&v23);
  uint64_t v11 = v15;
  int v12 = DWORD2(v15);
  if ((v10 & 1) == 0)
  {
    long long v19 = v9;
    int v18 = a1;
    long long v15 = v5;
    char v16 = v6;
    int v17 = v7;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _ViewInputs((uint64_t)&v23);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a3 = v11;
  *(_DWORD *)(a3 + 8) = v12;
  return result;
}

void protocol witness for Scene.body.getter in conformance WindowSceneList<A>()
{
}

void protocol witness for Scene.body.getter in conformance _SceneModifier_Content<A>()
{
}

void protocol witness for Scene.body.getter in conformance <A> Group<A>()
{
}

void protocol witness for Scene.body.getter in conformance ResolvedUISceneAdaptor<A>.RootViewScene()
{
}

uint64_t specialized static Scene.makeBody(scene:inputs:fields:)()
{
  if (AGTypeID.isValueType.getter())
  {
    type metadata accessor for SceneBodyAccessor<Never>();
    lazy protocol witness table accessor for type SceneBodyAccessor<Never> and conformance SceneBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = 0x726576654ELL;
    v1._object = (void *)0xE500000000000000;
    String.append(_:)(v1);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for static Scene._makeScene(scene:inputs:) in conformance Never@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(long long *)((char *)a2 + 44);
  return specialized static Scene._makeScene(scene:inputs:)(v3, v6, a3);
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance SceneDescriptor()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance SceneDescriptor(uint64_t a1)
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  static SceneDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance SceneDescriptor())()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

void protocol witness for Scene.body.getter in conformance _EmptyScene()
{
}

void protocol witness for Scene.body.getter in conformance DocumentGroup<A, B>.DocumentContentScene()
{
}

void protocol witness for Scene.body.getter in conformance DocumentIntroductionSceneList()
{
}

void protocol witness for Scene.body.getter in conformance SingleWindowSceneList()
{
}

void specialized Scene.sceneBodyError()()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized PrimitiveScene.body.getter()
{
}

_UNKNOWN **associated type witness table accessor for Scene.Body : Scene in Never()
{
  return &protocol witness table for Never;
}

uint64_t dispatch thunk of Scene.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static Scene._makeScene(scene:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

ValueMetadata *type metadata accessor for SceneDescriptor()
{
  return &type metadata for SceneDescriptor;
}

void type metadata accessor for SceneBodyAccessor<Never>()
{
  if (!lazy cache variable for type metadata for SceneBodyAccessor<Never>)
  {
    unint64_t v0 = type metadata accessor for SceneBodyAccessor();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SceneBodyAccessor<Never>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SceneBodyAccessor<Never> and conformance SceneBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type SceneBodyAccessor<Never> and conformance SceneBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type SceneBodyAccessor<Never> and conformance SceneBodyAccessor<A>)
  {
    type metadata accessor for SceneBodyAccessor<Never>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneBodyAccessor<Never> and conformance SceneBodyAccessor<A>);
  }
  return result;
}

void View.interactiveResizeDisabled(_:)()
{
}

void static VolumeViewpointUpdateStrategy.all.getter()
{
}

void static VolumeViewpointUpdateStrategy.== infix(_:_:)()
{
}

void View.onVolumeViewpointChange(updateStrategy:initial:_:)()
{
}

ValueMetadata *type metadata accessor for VolumeViewpointUpdateStrategy()
{
  return &type metadata for VolumeViewpointUpdateStrategy;
}

void static VolumeViewpointUpdateStrategy.supported.getter()
{
}

void __swiftcall AutomaticMenuBarExtraStyle.init()()
{
}

void AutomaticMenuBarExtraStyle._makeMenuBarExtra(_:)()
{
}

void static MenuBarExtraStyle<>.automatic.getter()
{
}

ValueMetadata *type metadata accessor for AutomaticMenuBarExtraStyle()
{
  return &type metadata for AutomaticMenuBarExtraStyle;
}

uint64_t outlined init with copy of _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>, MEMORY[0x1E4F40578]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>, MEMORY[0x1E4F40578]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void static DraggingFormation.== infix(_:_:)()
{
}

void DraggingFormation.hash(into:)()
{
}

void DraggingFormation.hashValue.getter()
{
}

unint64_t lazy protocol witness table accessor for type DraggingFormation and conformance DraggingFormation()
{
  unint64_t result = lazy protocol witness table cache variable for type DraggingFormation and conformance DraggingFormation;
  if (!lazy protocol witness table cache variable for type DraggingFormation and conformance DraggingFormation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DraggingFormation and conformance DraggingFormation);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DraggingFormation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187F17E54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DraggingFormation()
{
  return &type metadata for DraggingFormation;
}

uint64_t _UnbridgedNavigationStackStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = *(_DWORD *)(a1 + 48);
  char v6 = *(unsigned char *)(a1 + 52);
  *(void *)a2 = *(void *)a1;
  *(unsigned char *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = v4;
  *(_DWORD *)(a2 + 48) = v5;
  *(unsigned char *)(a2 + 52) = v6;
  swift_bridgeObjectRetain();

  return swift_retain();
}

uint64_t associated type witness table accessor for _NavigationStackStyle.Body : View in _UnbridgedNavigationStackStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for _NavigationStackStyle.makeBody(configuration:) in conformance _UnbridgedNavigationStackStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = *(_DWORD *)(a1 + 48);
  char v6 = *(unsigned char *)(a1 + 52);
  *(void *)a2 = *(void *)a1;
  *(unsigned char *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = v4;
  *(_DWORD *)(a2 + 48) = v5;
  *(unsigned char *)(a2 + 52) = v6;
  swift_bridgeObjectRetain();

  return swift_retain();
}

ValueMetadata *type metadata accessor for _UnbridgedNavigationStackStyle()
{
  return &type metadata for _UnbridgedNavigationStackStyle;
}

unint64_t lazy protocol witness table accessor for type PhoneUnbridgedNavigationStackCore and conformance PhoneUnbridgedNavigationStackCore()
{
  unint64_t result = lazy protocol witness table cache variable for type PhoneUnbridgedNavigationStackCore and conformance PhoneUnbridgedNavigationStackCore;
  if (!lazy protocol witness table cache variable for type PhoneUnbridgedNavigationStackCore and conformance PhoneUnbridgedNavigationStackCore)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneUnbridgedNavigationStackCore and conformance PhoneUnbridgedNavigationStackCore);
  }
  return result;
}

id UISwipeActionsConfiguration.init(configuration:performDestructiveAction:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  double v6 = *((double *)a1 + 1);
  uint64_t v7 = a1[16];
  int v8 = a1[17];
  uint64_t v18 = *((void *)a1 + 5);
  uint64_t v20 = *((void *)a1 + 4);
  uint64_t v26 = *((void *)a1 + 8);
  uint64_t v27 = *((void *)a1 + 7);
  uint64_t v24 = *((void *)a1 + 10);
  uint64_t v25 = *((void *)a1 + 9);
  uint64_t v22 = *((void *)a1 + 12);
  uint64_t v23 = *((void *)a1 + 11);
  uint64_t v9 = swift_bridgeObjectRetain();
  specialized Sequence.compactMap<A>(_:)(v9, a2, a3);
  swift_bridgeObjectRelease();
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIContextualAction);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(ObjCClassFromMetadata, sel_configurationWithActions_, isa);

  id v13 = v12;
  objc_msgSend(v13, sel_setPerformsFirstActionWithFullSwipe_, v5);
  double v14 = v6;
  if (v7) {
    double v14 = 0.0;
  }
  if (v8) {
    uint64_t v15 = (*(void *)&v6 | v7) != 0;
  }
  else {
    uint64_t v15 = 2;
  }
  if (v8) {
    double v16 = 0.0;
  }
  else {
    double v16 = v14;
  }
  objc_msgSend(v13, sel__setSwipeActionsStyle_, v15, v14, v18, v20);
  objc_msgSend(v13, sel__setRoundedStyleCornerRadius_, v16);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of Binding<NavigationSplitViewColumn>?(v21, v19);
  outlined consume of Binding<SwipeActionResultToken?>?(v27, v26, v25, v24, v23, v22);

  return v13;
}

uint64_t static SwipeActions.TraitKey.resolvedValue(attributeValues:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x18C113CA0]();
  AGGraphClearUpdate();
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v95 = *MEMORY[0x1E4F4E7A0];
    swift_bridgeObjectRetain();
    unint64_t v4 = 0;
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    uint64_t v5 = 0;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    uint64_t v80 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    unint64_t v68 = v3 - 1;
    char v69 = 1;
    unint64_t v94 = v3;
    while (2)
    {
      while (2)
      {
        if (v4 <= v3) {
          unint64_t v22 = v3;
        }
        else {
          unint64_t v22 = v4;
        }
        unint64_t v96 = v22;
        *(void *)&long long v86 = v8;
        *((void *)&v86 + 1) = v9;
        *(void *)&long long v85 = v6;
        *((void *)&v85 + 1) = v7;
        uint64_t v89 = v5;
        uint64_t v90 = v21;
        uint64_t v91 = v20;
        uint64_t v92 = v19;
        uint64_t v93 = v18;
        while (1)
        {
          if (v96 == v4)
          {
            __break(1u);
LABEL_31:
            uint64_t v81 = v10;
            uint64_t v82 = v13;
            uint64_t v92 = v19;
            uint64_t v93 = v18;
            *(void *)&long long v85 = v6;
            *((void *)&v85 + 1) = v7;
            uint64_t v89 = v5;
            uint64_t v90 = v21;
            *(void *)&long long v86 = v8;
            *((void *)&v86 + 1) = v9;
            uint64_t v97 = v11;
            uint64_t v74 = v17;
            uint64_t v75 = v12;
            uint64_t v91 = v20;
            swift_bridgeObjectRelease();
            uint64_t v54 = v77;
            uint64_t v53 = v78;
            uint64_t v56 = v80;
            goto LABEL_33;
          }
          uint64_t v23 = v16;
          uint64_t v24 = v15;
          uint64_t v25 = v14;
          uint64_t v26 = v13;
          a1 = v4 + 1;
          uint64_t v19 = v4;
          if (AGWeakAttributeGetAttribute() != v95) {
            break;
          }
          unint64_t v4 = a1;
          uint64_t v13 = v26;
          uint64_t v14 = v25;
          uint64_t v15 = v24;
          uint64_t v16 = v23;
          if (v94 == a1)
          {
            uint64_t v81 = v10;
            uint64_t v82 = v13;
            uint64_t v97 = v11;
            uint64_t v74 = v17;
            uint64_t v75 = v12;
            swift_bridgeObjectRelease();
            uint64_t v54 = v77;
            uint64_t v53 = v78;
            uint64_t v55 = v79;
            uint64_t v56 = v80;
            unint64_t v3 = v72;
            uint64_t v57 = v73;
            a1 = v76;
            goto LABEL_29;
          }
        }
        uint64_t v66 = a1;
        uint64_t v67 = v19;
        if (v69)
        {
          uint64_t Value = (long long *)AGGraphGetValue();
          long long v28 = Value[1];
          long long v98 = *Value;
          long long v99 = v28;
          long long v29 = Value[2];
          long long v30 = Value[3];
          long long v31 = Value[5];
          long long v102 = Value[4];
          long long v103 = v31;
          long long v100 = v29;
          long long v101 = v30;
          long long v32 = Value[6];
          long long v33 = Value[7];
          long long v34 = Value[9];
          long long v106 = Value[8];
          long long v107 = v34;
          long long v104 = v32;
          long long v105 = v33;
          long long v35 = Value[10];
          long long v36 = Value[11];
          long long v37 = Value[13];
          long long v110 = Value[12];
          long long v111 = v37;
          long long v108 = v35;
          long long v109 = v36;
          *(void *)&long long v131 = v10;
          *((void *)&v131 + 1) = v11;
          *(void *)&long long v132 = v12;
          *((void *)&v132 + 1) = v83;
          *(void *)&long long v133 = v26;
          *((void *)&v133 + 1) = v25;
          *(void *)&long long v134 = v76;
          *((void *)&v134 + 1) = v24;
          *(void *)&long long v135 = v23;
          *((void *)&v135 + 1) = v17;
          *(void *)&long long v136 = v93;
          *((void *)&v136 + 1) = v92;
          *(void *)&long long v137 = v91;
          *((void *)&v137 + 1) = v90;
          *(void *)&long long v138 = v79;
          *((void *)&v138 + 1) = v88;
          *(void *)&long long v139 = v89;
          *((void *)&v139 + 1) = v87;
          *(void *)&long long v140 = v78;
          *((void *)&v140 + 1) = v77;
          *(void *)&long long v141 = v80;
          *((void *)&v141 + 1) = v84;
          *(void *)&long long v142 = v73;
          *((void *)&v142 + 1) = v72;
          long long v143 = v85;
          long long v144 = v86;
          outlined retain of SwipeActions.Value((uint64_t)&v98, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))outlined copy of SwipeActions.Configuration?);
          outlined retain of SwipeActions.Value((uint64_t)&v131, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))outlined consume of SwipeActions.Configuration?);
          uint64_t v5 = v106;
          uint64_t v78 = v107;
          uint64_t v79 = v105;
          uint64_t v77 = *((void *)&v107 + 1);
          uint64_t v84 = *((void *)&v108 + 1);
          uint64_t v80 = v108;
          uint64_t v72 = *((void *)&v109 + 1);
          uint64_t v73 = v109;
          uint64_t v7 = *((void *)&v110 + 1);
          uint64_t v6 = v110;
          uint64_t v9 = *((void *)&v111 + 1);
          uint64_t v8 = v111;
          uint64_t v11 = *((void *)&v98 + 1);
          uint64_t v10 = v98;
          uint64_t v12 = v99;
          uint64_t v14 = *((void *)&v100 + 1);
          uint64_t v13 = v100;
          uint64_t v15 = *((void *)&v101 + 1);
          a1 = v101;
          uint64_t v17 = *((void *)&v102 + 1);
          uint64_t v16 = v102;
          uint64_t v19 = *((void *)&v103 + 1);
          uint64_t v18 = v103;
          uint64_t v21 = *((void *)&v104 + 1);
          uint64_t v20 = v104;
          uint64_t v87 = *((void *)&v106 + 1);
          uint64_t v88 = *((void *)&v105 + 1);
          uint64_t v83 = *((void *)&v99 + 1);
          if (v68 != v67)
          {
            uint64_t v76 = v101;
            char v69 = 0;
            unint64_t v3 = v94;
            unint64_t v4 = v66;
            continue;
          }
          goto LABEL_31;
        }
        break;
      }
      char v38 = (long long *)AGGraphGetValue();
      long long v39 = v38[1];
      long long v131 = *v38;
      long long v132 = v39;
      long long v40 = v38[5];
      long long v42 = v38[2];
      long long v41 = v38[3];
      long long v135 = v38[4];
      long long v136 = v40;
      long long v133 = v42;
      long long v134 = v41;
      long long v43 = v38[8];
      long long v45 = v38[6];
      long long v44 = v38[7];
      long long v140 = v38[9];
      long long v139 = v43;
      long long v137 = v45;
      long long v138 = v44;
      long long v46 = v38[12];
      long long v48 = v38[10];
      long long v47 = v38[11];
      long long v144 = v38[13];
      long long v143 = v46;
      long long v141 = v48;
      long long v142 = v47;
      long long v70 = v139;
      long long v64 = v48;
      long long v65 = v140;
      long long v62 = v46;
      long long v63 = v47;
      uint64_t v60 = *((void *)&v144 + 1);
      uint64_t v61 = v144;
      uint64_t v119 = v10;
      uint64_t v120 = v11;
      uint64_t v121 = v12;
      uint64_t v122 = v83;
      uint64_t v123 = v26;
      uint64_t v124 = v25;
      uint64_t v125 = v76;
      uint64_t v126 = v24;
      uint64_t v127 = v23;
      uint64_t v128 = v17;
      *(void *)&long long v129 = v93;
      *((void *)&v129 + 1) = v92;
      *(void *)&long long v130 = v91;
      *((void *)&v130 + 1) = v90;
      long long v112 = v131;
      long long v113 = v132;
      long long v114 = v133;
      long long v115 = v134;
      long long v116 = v135;
      long long v117 = v40;
      long long v59 = v138;
      long long v118 = v137;
      outlined retain of SwipeActions.Value((uint64_t)&v131, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))outlined copy of SwipeActions.Configuration?);
      static SwipeActions.Configuration.reduce(_:_:)((unint64_t *)&v119, (uint64_t *)&v112, (uint64_t)&v98);
      outlined consume of SwipeActions.Configuration?(v10, v11, v12, v83, v26, v25, v76, v24, v23, v17, v93, v92, v91);
      uint64_t v97 = *((void *)&v98 + 1);
      uint64_t v14 = *((void *)&v100 + 1);
      uint64_t v82 = v100;
      uint64_t v83 = *((void *)&v99 + 1);
      uint64_t v76 = v101;
      uint64_t v15 = *((void *)&v101 + 1);
      uint64_t v16 = v102;
      if (BYTE1(v98)) {
        uint64_t v49 = 256;
      }
      else {
        uint64_t v49 = 0;
      }
      uint64_t v81 = v49 | v98;
      uint64_t v93 = v103;
      if (BYTE1(v99)) {
        uint64_t v50 = 256;
      }
      else {
        uint64_t v50 = 0;
      }
      uint64_t v74 = *((void *)&v102 + 1);
      uint64_t v75 = v50 | v99;
      *(void *)&long long v118 = v61;
      uint64_t v91 = v104;
      uint64_t v92 = *((void *)&v103 + 1);
      *((void *)&v118 + 1) = v60;
      uint64_t v90 = *((void *)&v104 + 1);
      uint64_t v119 = v79;
      uint64_t v120 = v88;
      uint64_t v121 = v89;
      uint64_t v122 = v87;
      uint64_t v123 = v78;
      uint64_t v124 = v77;
      uint64_t v125 = v80;
      a1 = v84;
      uint64_t v126 = v84;
      uint64_t v127 = v73;
      uint64_t v128 = v72;
      long long v129 = v85;
      long long v130 = v86;
      long long v112 = v59;
      long long v113 = v70;
      long long v114 = v65;
      long long v115 = v64;
      long long v116 = v63;
      long long v117 = v62;
      static SwipeActions.Configuration.reduce(_:_:)((unint64_t *)&v119, (uint64_t *)&v112, (uint64_t)&v98);
      outlined consume of SwipeActions.Configuration?(v79, v88, v89, v87, v78, v77, v80, v84, v73, v72, v85, *((uint64_t *)&v85 + 1), v86);
      outlined retain of SwipeActions.Value((uint64_t)&v131, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))outlined consume of SwipeActions.Configuration?);
      uint64_t v77 = *((void *)&v100 + 1);
      uint64_t v78 = v100;
      uint64_t v80 = v101;
      uint64_t v84 = *((void *)&v101 + 1);
      uint64_t v72 = *((void *)&v102 + 1);
      uint64_t v73 = v102;
      uint64_t v7 = *((void *)&v103 + 1);
      uint64_t v6 = v103;
      uint64_t v9 = *((void *)&v104 + 1);
      uint64_t v8 = v104;
      if (BYTE1(v98)) {
        uint64_t v51 = 256;
      }
      else {
        uint64_t v51 = 0;
      }
      uint64_t v79 = v51 | v98;
      if (BYTE1(v99)) {
        uint64_t v52 = 256;
      }
      else {
        uint64_t v52 = 0;
      }
      uint64_t v5 = v52 | v99;
      uint64_t v87 = *((void *)&v99 + 1);
      uint64_t v88 = *((void *)&v98 + 1);
      if (v68 != v19)
      {
        char v69 = 0;
        uint64_t v11 = v97;
        uint64_t v10 = v81;
        uint64_t v13 = v82;
        uint64_t v17 = v74;
        uint64_t v12 = v75;
        uint64_t v18 = v93;
        unint64_t v3 = v94;
        uint64_t v20 = v91;
        uint64_t v19 = v92;
        uint64_t v21 = v90;
        unint64_t v4 = v66;
        continue;
      }
      break;
    }
    long long v85 = v103;
    uint64_t v89 = v52 | v99;
    long long v86 = v104;
    swift_bridgeObjectRelease();
    uint64_t v54 = v77;
    uint64_t v53 = v78;
    uint64_t v56 = v80;
    a1 = v76;
LABEL_33:
    unint64_t v3 = v72;
    uint64_t v57 = v73;
    uint64_t v55 = v79;
  }
  else
  {
    uint64_t v55 = 0;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    uint64_t v87 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v56 = 0;
    uint64_t v84 = 0;
    long long v85 = 0uLL;
    uint64_t v57 = 0;
    long long v86 = 0uLL;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    uint64_t v97 = 0;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    uint64_t v83 = 0;
    uint64_t v14 = 0;
    a1 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    uint64_t v90 = 0;
    uint64_t v91 = 0;
  }
LABEL_29:
  AGGraphSetUpdate();
  *(void *)a2 = v81;
  *(void *)(a2 + 8) = v97;
  *(void *)(a2 + 16) = v75;
  *(void *)(a2 + 24) = v83;
  *(void *)(a2 + 32) = v82;
  *(void *)(a2 + 40) = v14;
  *(void *)(a2 + 48) = a1;
  *(void *)(a2 + 56) = v15;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v74;
  *(void *)(a2 + 80) = v93;
  *(void *)(a2 + 88) = v92;
  *(void *)(a2 + 96) = v91;
  *(void *)(a2 + 104) = v90;
  *(void *)(a2 + 112) = v55;
  *(void *)(a2 + 120) = v88;
  *(void *)(a2 + 128) = v89;
  *(void *)(a2 + 136) = v87;
  *(void *)(a2 + 144) = v53;
  *(void *)(a2 + 152) = v54;
  *(void *)(a2 + 160) = v56;
  *(void *)(a2 + 168) = v84;
  *(void *)(a2 + 176) = v57;
  *(void *)(a2 + 184) = v3;
  *(_OWORD *)(a2 + 192) = v85;
  *(_OWORD *)(a2 + 208) = v86;
  return static Update.end()();
}

void static SwipeActionsStyle.automatic.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t View.swipeActions<A>(edge:allowsFullSwipe:content:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, void (*a3)(double)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10 = 0;
  __int16 v11 = 256;
  return View.swipeActions<A>(edge:allowsFullSwipe:style:content:)(a1 & 1, a2, &v10, a3, a4, a5, a6, a7, a9, a8);
}

uint64_t View.swipeActions<A>(edge:allowsFullSwipe:style:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void (*a4)(double)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v65 = a8;
  uint64_t v50 = a6;
  uint64_t v60 = a5;
  uint64_t v61 = a4;
  uint64_t v63 = a2;
  uint64_t v64 = a1;
  uint64_t v66 = a9;
  uint64_t v57 = a7;
  uint64_t v62 = *(void *)(a7 - 8);
  uint64_t v46 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>, MEMORY[0x1E4F3FA20], MEMORY[0x1E4F41280]);
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v59 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v42 - v14;
  _s7SwiftUI18StyleContextWriterVyAA012SwipeActionscD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<SwipeActionsStyleContext>, MEMORY[0x1E4F40DE0], MEMORY[0x1E4F40DD8], MEMORY[0x1E4F40318]);
  uint64_t v48 = v13;
  uint64_t v16 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v16);
  uint64_t v51 = (char *)&v42 - v17;
  unint64_t v18 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>();
  uint64_t v82 = a10;
  unint64_t v83 = v18;
  uint64_t v58 = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v45 = WitnessTable;
  unint64_t v20 = lazy protocol witness table accessor for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v80 = WitnessTable;
  unint64_t v81 = v20;
  uint64_t v53 = v16;
  uint64_t v52 = swift_getWitnessTable();
  uint64_t v49 = type metadata accessor for SwipeActionsModifier();
  uint64_t v55 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  unint64_t v22 = (char *)&v42 - v21;
  uint64_t v23 = type metadata accessor for ModifiedContent();
  uint64_t v56 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v42 - v24;
  _s7SwiftUI18StyleContextWriterVyAA012SwipeActionscD0VGMaTm_0(255, &lazy cache variable for type metadata for _TraitWritingModifier<SwipeActionsArePresent>, (uint64_t)&type metadata for SwipeActionsArePresent, (uint64_t)&protocol witness table for SwipeActionsArePresent, MEMORY[0x1E4F408B8]);
  uint64_t v47 = v26;
  uint64_t v27 = type metadata accessor for ModifiedContent();
  uint64_t v54 = *(void *)(v27 - 8);
  double v28 = MEMORY[0x1F4188790](v27);
  long long v30 = (char *)&v42 - v29;
  uint64_t v43 = *a3;
  uint64_t v44 = *((unsigned __int8 *)a3 + 8);
  LODWORD(WitnessTable) = *((unsigned __int8 *)a3 + 9);
  v61(v28);
  static SymbolVariants.fill.getter();
  __int16 v79 = v71;
  uint64_t v31 = v57;
  View.symbolVariant(_:)();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v12, v31);
  uint64_t v32 = (uint64_t)v51;
  uint64_t v33 = v48;
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v15, v33);
  uint64_t v34 = 256;
  *(void *)&long long v71 = v63 & 1 | ((unint64_t)(v64 & 1) << 8);
  *((void *)&v71 + 1) = v43;
  if (!WitnessTable) {
    uint64_t v34 = 0;
  }
  uint64_t v72 = v34 | v44;
  uint64_t v73 = MEMORY[0x1E4FBC860];
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  __n128 v35 = SwipeActionsModifier.init(actionsView:configuration:)(v32, &v71, v53, (uint64_t)v22);
  uint64_t v36 = v49;
  uint64_t v37 = v65;
  MEMORY[0x18C113660](v22, v50, v49, v65, v35);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v22, v36);
  LOBYTE(v71) = 1;
  uint64_t v69 = v37;
  long long v70 = &protocol witness table for SwipeActionsModifier<A>;
  uint64_t v38 = swift_getWitnessTable();
  MEMORY[0x18C113660](&v71, v23, v47, v38);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v25, v23);
  unint64_t v39 = lazy protocol witness table accessor for type _TraitWritingModifier<SwipeActionsArePresent> and conformance _TraitWritingModifier<A>();
  uint64_t v67 = v38;
  unint64_t v68 = v39;
  uint64_t v40 = swift_getWitnessTable();
  View.sharingPickerHost()(v27, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v30, v27);
}

uint64_t type metadata accessor for SwipeActionsModifier()
{
  return __swift_instantiateGenericMetadata();
}

void _s7SwiftUI18StyleContextWriterVyAA012SwipeActionscD0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t View.swipeActions<A>(edge:allowsFullSwipe:isPresented:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(double)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v44 = a8;
  uint64_t v53 = a7;
  uint64_t v54 = a6;
  uint64_t v58 = a5;
  uint64_t v60 = a4;
  uint64_t v59 = a3;
  uint64_t v56 = a2;
  uint64_t v57 = a1;
  uint64_t v62 = a9;
  uint64_t v61 = a11;
  uint64_t v55 = *(void *)(a10 - 8);
  v41[1] = a12;
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>, MEMORY[0x1E4F3FA20], MEMORY[0x1E4F41280]);
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v52 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v41 - v15;
  _s7SwiftUI18StyleContextWriterVyAA012SwipeActionscD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<SwipeActionsStyleContext>, MEMORY[0x1E4F40DE0], MEMORY[0x1E4F40DD8], MEMORY[0x1E4F40318]);
  uint64_t v17 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v17);
  uint64_t v45 = (char *)v41 - v18;
  unint64_t v19 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>();
  uint64_t v80 = a12;
  unint64_t v81 = v19;
  uint64_t v51 = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  v41[0] = WitnessTable;
  unint64_t v21 = lazy protocol witness table accessor for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v78 = WitnessTable;
  unint64_t v79 = v21;
  uint64_t v47 = v17;
  uint64_t v46 = swift_getWitnessTable();
  uint64_t v43 = type metadata accessor for SwipeActionsModifier();
  uint64_t v49 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  uint64_t v23 = (char *)v41 - v22;
  uint64_t v24 = type metadata accessor for ModifiedContent();
  uint64_t v50 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)v41 - v25;
  _s7SwiftUI18StyleContextWriterVyAA012SwipeActionscD0VGMaTm_0(255, &lazy cache variable for type metadata for _TraitWritingModifier<SwipeActionsArePresent>, (uint64_t)&type metadata for SwipeActionsArePresent, (uint64_t)&protocol witness table for SwipeActionsArePresent, MEMORY[0x1E4F408B8]);
  uint64_t v42 = v27;
  uint64_t v28 = type metadata accessor for ModifiedContent();
  uint64_t v48 = *(void *)(v28 - 8);
  double v29 = MEMORY[0x1F4188790](v28);
  uint64_t v31 = (char *)v41 - v30;
  v54(v29);
  static SymbolVariants.fill.getter();
  __int16 v77 = v67;
  View.symbolVariant(_:)();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v13, a10);
  uint64_t v32 = (uint64_t)v45;
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v14);
  unint64_t v67 = v56 & 1 | ((unint64_t)(v57 & 1) << 8);
  long long v68 = xmmword_1883B2320;
  uint64_t v33 = v59;
  uint64_t v69 = MEMORY[0x1E4FBC860];
  uint64_t v70 = v59;
  uint64_t v34 = v60;
  uint64_t v71 = v60;
  uint64_t v72 = v58;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  uint64_t v76 = 0;
  SwipeActionsModifier.init(actionsView:configuration:)(v32, (long long *)&v67, v47, (uint64_t)v23);
  outlined copy of Binding<NavigationSplitViewColumn>?(v33, v34);
  uint64_t v35 = v43;
  uint64_t v36 = v61;
  MEMORY[0x18C113660](v23, v44, v43, v61);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v23, v35);
  LOBYTE(v67) = 1;
  uint64_t v65 = v36;
  uint64_t v66 = &protocol witness table for SwipeActionsModifier<A>;
  uint64_t v37 = swift_getWitnessTable();
  MEMORY[0x18C113660](&v67, v24, v42, v37);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v26, v24);
  unint64_t v38 = lazy protocol witness table accessor for type _TraitWritingModifier<SwipeActionsArePresent> and conformance _TraitWritingModifier<A>();
  uint64_t v63 = v37;
  unint64_t v64 = v38;
  uint64_t v39 = swift_getWitnessTable();
  View.sharingPickerHost()(v28, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v31, v28);
}

__n128 SwipeActionsModifier.init(actionsView:configuration:)@<Q0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v14 = *a2;
  long long v12 = a2[2];
  long long v13 = a2[1];
  long long v10 = a2[4];
  long long v11 = a2[3];
  __n128 v9 = (__n128)a2[5];
  uint64_t v5 = *((void *)a2 + 12);
  uint64_t v6 = *((void *)a2 + 13);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v7 = a4 + *(int *)(type metadata accessor for SwipeActionsModifier() + 36);
  *(_OWORD *)uint64_t v7 = v14;
  *(_OWORD *)(v7 + 16) = v13;
  *(_OWORD *)(v7 + 32) = v12;
  *(_OWORD *)(v7 + 48) = v11;
  __n128 result = v9;
  *(_OWORD *)(v7 + 64) = v10;
  *(__n128 *)(v7 + 80) = v9;
  *(void *)(v7 + 96) = v5;
  *(void *)(v7 + 104) = v6;
  return result;
}

uint64_t View.swipeActions<A>(edge:allowsFullSwipe:style:isPresented:resultToken:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, void (*a8)(double)@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v80 = a8;
  uint64_t v84 = a6;
  uint64_t v85 = a5;
  uint64_t v83 = a4;
  uint64_t v81 = a2;
  uint64_t v82 = a1;
  uint64_t v87 = a9;
  uint64_t v78 = a10;
  uint64_t v67 = a11;
  uint64_t v86 = a13;
  uint64_t v73 = a12;
  uint64_t v79 = *(void *)(a12 - 8);
  uint64_t v59 = a14;
  MEMORY[0x1F4188790](a1);
  long long v75 = &v53[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  _s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>, MEMORY[0x1E4F3FA20], MEMORY[0x1E4F41280]);
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v76 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v69 = &v53[-v18];
  _s7SwiftUI18StyleContextWriterVyAA012SwipeActionscD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<SwipeActionsStyleContext>, MEMORY[0x1E4F40DE0], MEMORY[0x1E4F40DD8], MEMORY[0x1E4F40318]);
  uint64_t v60 = v17;
  uint64_t v19 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v19);
  uint64_t v89 = &v53[-v20];
  unint64_t v21 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>();
  uint64_t v110 = a14;
  unint64_t v111 = v21;
  uint64_t v77 = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v58 = WitnessTable;
  unint64_t v23 = lazy protocol witness table accessor for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v108 = WitnessTable;
  unint64_t v109 = v23;
  uint64_t v66 = v19;
  uint64_t v68 = swift_getWitnessTable();
  uint64_t v65 = type metadata accessor for SwipeActionsModifier();
  uint64_t v72 = *(void *)(v65 - 8);
  MEMORY[0x1F4188790](v65);
  uint64_t v63 = &v53[-v24];
  uint64_t v57 = type metadata accessor for ModifiedContent();
  uint64_t v74 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  uint64_t v62 = &v53[-v25];
  _s7SwiftUI18StyleContextWriterVyAA012SwipeActionscD0VGMaTm_0(255, &lazy cache variable for type metadata for _TraitWritingModifier<SwipeActionsArePresent>, (uint64_t)&type metadata for SwipeActionsArePresent, (uint64_t)&protocol witness table for SwipeActionsArePresent, MEMORY[0x1E4F408B8]);
  uint64_t v64 = v26;
  uint64_t v70 = type metadata accessor for ModifiedContent();
  uint64_t v71 = *(void *)(v70 - 8);
  double v27 = MEMORY[0x1F4188790](v70);
  uint64_t v61 = &v53[-v28];
  uint64_t v55 = *a3;
  uint64_t v56 = *((unsigned __int8 *)a3 + 8);
  int v54 = *((unsigned __int8 *)a3 + 9);
  uint64_t v30 = *a7;
  uint64_t v29 = a7[1];
  uint64_t v31 = a7[2];
  uint64_t v32 = a7[3];
  uint64_t v34 = a7[4];
  uint64_t v33 = a7[5];
  uint64_t v88 = a7[6];
  uint64_t v35 = v75;
  v80(v27);
  static SymbolVariants.fill.getter();
  __int16 v107 = v94;
  uint64_t v36 = v69;
  uint64_t v37 = v73;
  View.symbolVariant(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v79 + 8))(v35, v37);
  uint64_t v38 = v60;
  View.styleContext<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v76 + 8))(v36, v38);
  *(void *)&long long v94 = v81 & 1 | ((unint64_t)(v82 & 1) << 8);
  *((void *)&v94 + 1) = v55;
  uint64_t v39 = 256;
  if (!v54) {
    uint64_t v39 = 0;
  }
  uint64_t v95 = v39 | v56;
  uint64_t v96 = MEMORY[0x1E4FBC860];
  uint64_t v40 = v83;
  uint64_t v41 = v85;
  uint64_t v97 = v83;
  uint64_t v98 = v85;
  uint64_t v99 = v84;
  uint64_t v100 = v30;
  uint64_t v101 = v29;
  uint64_t v102 = v31;
  uint64_t v103 = v32;
  uint64_t v104 = v34;
  uint64_t v105 = v33;
  uint64_t v106 = v88;
  uint64_t v42 = v63;
  SwipeActionsModifier.init(actionsView:configuration:)((uint64_t)v89, &v94, v66, (uint64_t)v63);
  outlined copy of Binding<NavigationSplitViewColumn>?(v40, v41);
  outlined copy of Binding<SwipeActionResultToken?>?(v30, v29, v31, v32, v34, v33);
  uint64_t v43 = v62;
  uint64_t v44 = v65;
  uint64_t v45 = v86;
  MEMORY[0x18C113660](v42, v67, v65, v86);
  (*(void (**)(unsigned char *, uint64_t))(v72 + 8))(v42, v44);
  LOBYTE(v94) = 1;
  uint64_t v92 = v45;
  uint64_t v93 = &protocol witness table for SwipeActionsModifier<A>;
  uint64_t v46 = v57;
  uint64_t v47 = swift_getWitnessTable();
  uint64_t v48 = v61;
  MEMORY[0x18C113660](&v94, v46, v64, v47);
  (*(void (**)(unsigned char *, uint64_t))(v74 + 8))(v43, v46);
  unint64_t v49 = lazy protocol witness table accessor for type _TraitWritingModifier<SwipeActionsArePresent> and conformance _TraitWritingModifier<A>();
  uint64_t v90 = v47;
  unint64_t v91 = v49;
  uint64_t v50 = v70;
  uint64_t v51 = swift_getWitnessTable();
  View.sharingPickerHost()(v50, v51);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v71 + 8))(v48, v50);
}

void static SwipeActionsStyle.standard.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(_WORD *)(a1 + 8) = 256;
}

void static SwipeActionsStyle.rounded.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
}

void static SwipeActionsStyle.rounded(radius:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_WORD *)(a1 + 8) = 0;
}

double static SwipeActionsModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void *(*a3)(void **__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, double *a7@<X8>)
{
  void *(*v46)(void **__return_ptr, uint64_t, uint64_t *);
  double *v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  ValueMetadata *v58;
  uint64_t v59;
  _UNKNOWN **v60;
  uint64_t v61;
  void *v62;
  double v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  long long v68;
  long long v69;
  long long v70;
  uint64_t v71;
  int v72;
  char v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  unint64_t v80;
  long long v81;
  long long v82;
  long long v83;
  uint64_t v84;
  int v85;
  char v86;
  int v87;
  uint64_t v88;

  uint64_t v45 = a4;
  uint64_t v46 = a3;
  uint64_t v47 = a7;
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  int v8 = *a1;
  uint64_t v9 = *(void *)a2;
  int v10 = *(_DWORD *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  int v13 = *(_DWORD *)(a2 + 24);
  int v12 = *(_DWORD *)(a2 + 28);
  uint64_t v56 = *(_DWORD *)(a2 + 32);
  uint64_t v57 = v12;
  uint64_t v55 = *(_DWORD *)(a2 + 36);
  int v54 = *(void *)(a2 + 40);
  uint64_t v44 = *(void *)(a2 + 48);
  unsigned int v15 = *(_DWORD *)(a2 + 56);
  unsigned int v14 = *(_DWORD *)(a2 + 60);
  uint64_t v52 = *(_DWORD *)(a2 + 64);
  uint64_t v53 = v14;
  unsigned int v16 = *(_DWORD *)(a2 + 68);
  uint64_t v50 = *(_DWORD *)(a2 + 72);
  uint64_t v51 = v16;
  unsigned int v17 = *(_DWORD *)(a2 + 76);
  uint64_t v48 = *(_DWORD *)(a2 + 80);
  unint64_t v49 = v17;
  int v43 = v8;
  LODWORD(v75) = v8;
  type metadata accessor for SwipeActionsModifier();
  uint64_t v42 = type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(a5 - 8) + 64)) {
    closure #1 in static SwipeActionsModifier._makeView(modifier:inputs:body:)(1, a5, a6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v62 = (void *)v9;
  int v39 = v10;
  LODWORD(v63) = v10;
  uint64_t v64 = v11;
  uint64_t v37 = v11;
  int v41 = v13;
  uint64_t v65 = v13;
  uint64_t v66 = v57;
  uint64_t v67 = __PAIR64__(v55, v56);
  uint64_t v20 = v44;
  *(void *)&uint64_t v68 = v54;
  *((void *)&v68 + 1) = v44;
  *(void *)&uint64_t v69 = __PAIR64__(v53, v15);
  *((void *)&v69 + 1) = __PAIR64__(v51, v52);
  *(void *)&uint64_t v70 = __PAIR64__(v49, v50);
  DWORD2(v70) = v48;
  id v21 = PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v62, 1, (uint64_t)&v75);
  unsigned int v40 = v15;
  uint64_t v38 = &v36;
  uint64_t v62 = (void *)v75;
  LODWORD(v63) = v76;
  uint64_t v64 = v77;
  uint64_t v65 = v78;
  uint64_t v67 = v80;
  uint64_t v68 = v81;
  uint64_t v69 = v82;
  uint64_t v70 = v83;
  uint64_t v71 = v84;
  uint64_t v72 = v85;
  uint64_t v73 = v86;
  uint64_t v74 = v87;
  MEMORY[0x1F4188790](v21);
  uint64_t v58 = &type metadata for AllPlatformItemListFlags;
  uint64_t v59 = a5;
  uint64_t v60 = &protocol witness table for AllPlatformItemListFlags;
  uint64_t v61 = a6;
  uint64_t v34 = type metadata accessor for PlatformItemListGenerator();
  uint64_t WitnessTable = swift_getWitnessTable();
  _s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E740]);
  uint64_t v23 = v22;
  swift_retain();
  swift_retain();
  uint64_t v24 = v54;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v62, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v33, v34, MEMORY[0x1E4FBC248], v23, MEMORY[0x1E4FBC278], v25);
  uint64_t v26 = v62;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  uint64_t v27 = swift_release();
  LODWORD(v38) = v58;
  MEMORY[0x1F4188790](v27);
  *(void *)&v33[-16] = a5;
  *(void *)&v33[-8] = a6;
  LODWORD(v75) = v43;
  _s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0(0, &lazy cache variable for type metadata for SwipeActions.Configuration?, (uint64_t)&type metadata for SwipeActions.Configuration, MEMORY[0x1E4FBB718]);
  _GraphValue.subscript.getter();
  type metadata accessor for Binding<SwipeActionResultToken?>(0, &lazy cache variable for type metadata for _GraphValue<SwipeActions.Configuration?>, &lazy cache variable for type metadata for SwipeActions.Configuration?, (uint64_t)&type metadata for SwipeActions.Configuration, MEMORY[0x1E4F3F590]);
  uint64_t v28 = _GraphValue.value.getter();
  int v29 = v28;
  long long v75 = v9;
  LODWORD(v23) = v40;
  uint64_t v76 = v39;
  uint64_t v77 = v37;
  uint64_t v78 = v41;
  uint64_t v79 = v57;
  uint64_t v80 = __PAIR64__(v55, v56);
  *(void *)&uint64_t v81 = v24;
  *((void *)&v81 + 1) = v20;
  *(void *)&uint64_t v82 = __PAIR64__(v53, v40);
  *((void *)&v82 + 1) = __PAIR64__(v51, v52);
  *(void *)&uint64_t v83 = __PAIR64__(v49, v50);
  DWORD2(v83) = v48;
  uint64_t v30 = v46(&v62, v28, &v75);
  long long v75 = v20;
  uint64_t v76 = v23;
  MEMORY[0x1F4188790](v30);
  *(_DWORD *)&v33[-16] = v38;
  *(_DWORD *)&v33[-12] = v29;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  uint64_t v31 = v47;
  *(void *)uint64_t v47 = v62;
  double result = v63;
  v31[1] = v63;
  return result;
}

uint64_t implicit closure #1 in static SwipeActionsModifier._makeView(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t static SwipeActionsModifier._makeViewList(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v60 = a7;
  uint64_t v61 = a3;
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  int v10 = *a1;
  uint64_t v11 = *(ValueMetadata **)a2;
  int v12 = *(_DWORD *)(a2 + 8);
  int v13 = *(_UNKNOWN ***)(a2 + 16);
  int v14 = *(_DWORD *)(a2 + 24);
  int v15 = *(_DWORD *)(a2 + 28);
  unsigned int v16 = *(_DWORD *)(a2 + 32);
  unsigned int v17 = *(_DWORD *)(a2 + 36);
  uint64_t v19 = *(void *)(a2 + 40);
  uint64_t v18 = *(void *)(a2 + 48);
  uint64_t v20 = *(void *)(a2 + 56);
  int v21 = *(_DWORD *)(a2 + 64);
  uint64_t v22 = *(ValueMetadata **)(a2 + 72);
  int v23 = *(unsigned __int8 *)(a2 + 80);
  uint64_t v101 = *(ValueMetadata **)a2;
  int v67 = v14;
  int v68 = v12;
  int v102 = v12;
  uint64_t v103 = v13;
  int v104 = v14;
  int v105 = v15;
  unsigned int v65 = v16;
  int v66 = v15;
  unsigned int v106 = v16;
  unsigned int v107 = v17;
  unsigned int v64 = v17;
  uint64_t v108 = v19;
  uint64_t v109 = v18;
  uint64_t v57 = v20;
  uint64_t v58 = v18;
  uint64_t v110 = v20;
  int v55 = v23;
  int v56 = v21;
  int v111 = v21;
  long long v112 = v22;
  char v113 = v23;
  lazy protocol witness table accessor for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v59 = v22;
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  uint64_t v62 = a4;
  int v63 = v10;
  if (v88 == 1)
  {
    int v54 = v13;
    uint64_t v24 = (uint64_t *)a6;
    PropertyList.subscript.setter();
    LODWORD(v88) = v10;
    type metadata accessor for SwipeActionsModifier();
    uint64_t v51 = type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    if (*(void *)(*(void *)(a5 - 8) + 64)) {
      closure #1 in static SwipeActionsModifier._makeView(modifier:inputs:body:)(1, a5, a6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
    }
    int v31 = v67;
    int v30 = v68;
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    uint64_t v88 = v11;
    int v89 = v30;
    uint64_t v90 = v54;
    int v91 = v31;
    int v92 = v66;
    unint64_t v93 = __PAIR64__(v64, v65);
    *(void *)&long long v94 = v19;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    _ViewInputs.init(withoutGeometry:)();
    uint64_t v80 = v69;
    LODWORD(v81) = v70;
    uint64_t v82 = v71;
    long long v83 = v72;
    long long v84 = v73;
    long long v85 = v74;
    uint64_t v86 = v75;
    int v87 = DWORD2(v75);
    id v33 = PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v80, 1, (uint64_t)&v88);
    uint64_t v53 = &v48;
    long long v73 = v94;
    uint64_t v69 = v88;
    int v70 = v89;
    uint64_t v71 = v90;
    LODWORD(v72) = v91;
    *((void *)&v72 + 1) = v93;
    long long v74 = v95;
    long long v75 = v96;
    uint64_t v76 = v97;
    int v77 = v98;
    char v78 = v99;
    int v79 = v100;
    MEMORY[0x1F4188790](v33);
    uint64_t v80 = &type metadata for AllPlatformItemListFlags;
    uint64_t v81 = a5;
    uint64_t v82 = &protocol witness table for AllPlatformItemListFlags;
    *(void *)&long long v83 = v24;
    uint64_t v46 = type metadata accessor for PlatformItemListGenerator();
    uint64_t WitnessTable = swift_getWitnessTable();
    _s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v69, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v45, v46, MEMORY[0x1E4FBC248], v34, MEMORY[0x1E4FBC278], v35);
    uint64_t v50 = 0;
    uint64_t v36 = v69;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    uint64_t v37 = swift_release();
    unsigned int v49 = v80;
    MEMORY[0x1F4188790](v37);
    uint64_t v52 = a5;
    uint64_t v53 = v24;
    *(void *)&v45[-16] = a5;
    *(void *)&v45[-8] = v24;
    LODWORD(v88) = v63;
    _s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0(0, &lazy cache variable for type metadata for SwipeActions.Configuration?, (uint64_t)&type metadata for SwipeActions.Configuration, MEMORY[0x1E4FBB718]);
    _GraphValue.subscript.getter();
    type metadata accessor for Binding<SwipeActionResultToken?>(0, &lazy cache variable for type metadata for _GraphValue<SwipeActions.Configuration?>, &lazy cache variable for type metadata for SwipeActions.Configuration?, (uint64_t)&type metadata for SwipeActions.Configuration, MEMORY[0x1E4F3F590]);
    uint64_t v88 = (ValueMetadata *)__PAIR64__(_GraphValue.value.getter(), v49);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type SwipeActions.MakeValue and conformance SwipeActions.MakeValue();
    unsigned int v38 = Attribute.init<A>(body:value:flags:update:)();
    if (v112)
    {
      uint64_t v88 = v112;
      LOBYTE(v89) = v113 & 1;
      specialized Set._Variant.insert(_:)((uint64_t *)&v69, (uint64_t)&type metadata for SwipeActions.TraitKey);
      long long v112 = v88;
      char v113 = v89;
    }
    uint64_t v88 = v11;
    int v89 = v68;
    uint64_t v90 = v54;
    int v91 = v67;
    int v92 = v66;
    unint64_t v93 = __PAIR64__(v64, v65);
    *(void *)&long long v94 = v19;
    *((void *)&v94 + 1) = v58;
    *(void *)&long long v95 = v57;
    DWORD2(v95) = v56;
    *(void *)&long long v96 = v59;
    BYTE8(v96) = v55;
    uint64_t v39 = _ViewListInputs.traits.getter();
    unsigned int v40 = *MEMORY[0x1E4F4E7A0];
    if ((v39 & 0x100000000) == 0) {
      unsigned int v40 = v39;
    }
    uint64_t v88 = (ValueMetadata *)__PAIR64__(v40, v38);
    MEMORY[0x1F4188790](v39);
    uint64_t v41 = type metadata accessor for SwipeActionsModifier.WriteTrait();
    *(void *)&v45[-16] = v41;
    *(void *)&v45[-8] = swift_getWitnessTable();
    _s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTraitCollection>, MEMORY[0x1E4F40530], MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v88, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_22, (uint64_t)&v45[-32], v41, MEMORY[0x1E4FBC248], v42, MEMORY[0x1E4FBC278], v43);
    LOBYTE(v88) = 0;
    _ViewListInputs.traits.setter();
    uint64_t v11 = v101;
    int v13 = v103;
    int v67 = v104;
    int v68 = v102;
    unsigned int v65 = v106;
    int v66 = v105;
    unsigned int v64 = v107;
    uint64_t v19 = v108;
    uint64_t v26 = v109;
    uint64_t v27 = v110;
    int v28 = v111;
    uint64_t v25 = v112;
    char v29 = v113;
  }
  else
  {
    uint64_t v26 = v58;
    uint64_t v25 = v59;
    uint64_t v27 = v57;
    char v29 = v55;
    int v28 = v56;
  }
  type metadata accessor for SwipeActionsModifier();
  LODWORD(v69) = v63;
  uint64_t v88 = v11;
  int v89 = v68;
  uint64_t v90 = v13;
  int v91 = v67;
  int v92 = v66;
  unint64_t v93 = __PAIR64__(v64, v65);
  *(void *)&long long v94 = v19;
  *((void *)&v94 + 1) = v26;
  *(void *)&long long v95 = v27;
  DWORD2(v95) = v28;
  *(void *)&long long v96 = v25;
  BYTE8(v96) = v29;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ViewModifier.makeMultiViewList(modifier:inputs:body:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t closure #1 in static SwipeActionsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v10[2] = type metadata accessor for SwipeActionsModifier();
  void v10[3] = a2;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a4, (uint64_t)v10, a2, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return v10[5];
}

uint64_t closure #2 in static SwipeActionsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for SwipeActionsModifier();
  uint64_t v7 = a1 + *(int *)(v6 + 36);
  _OWORD v13[2] = v6;
  _s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0(0, &lazy cache variable for type metadata for SwipeActions.Configuration?, (uint64_t)&type metadata for SwipeActions.Configuration, MEMORY[0x1E4FBB718]);
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, a4, (uint64_t)v13, v9, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  return v13[5];
}

uint64_t SwipeActionsModifier.WriteTrait.value.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  TableRow.MakeList.traits.getter(a1, &v5);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    ViewTraitCollection.init()();
  }
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  uint64_t v3 = AGCreateWeakAttribute();
  specialized Array.replaceSubrange<A>(_:with:)(0, 0, v3);
  uint64_t result = ViewTraitCollection.subscript.setter();
  *a2 = v6;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance SwipeActionsModifier<A>.WriteTrait@<X0>(uint64_t *a1@<X8>)
{
  return SwipeActionsModifier.WriteTrait.value.getter(*v1, a1);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SwipeActionsModifier<A>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void *(*a3)(void **__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  return static SwipeActionsModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SwipeActionsModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static SwipeActionsModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance SwipeActionsUseTraitKeyInput()
{
  lazy protocol witness table accessor for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SwipeActionsUseTraitKeyInput()
{
  return PropertyList.subscript.setter();
}

void SwipeActions.Value.init(itemList:configuration:)(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v44 = *a2;
  unsigned __int8 v46 = a2[1];
  uint64_t v52 = *((void *)a2 + 1);
  uint64_t v26 = a2[16];
  int v22 = a2[17];
  uint64_t v4 = *((void *)a2 + 4);
  uint64_t v5 = *((void *)a2 + 5);
  uint64_t v53 = *((void *)a2 + 7);
  uint64_t v6 = *((void *)a2 + 9);
  uint64_t v48 = a2[48];
  uint64_t v49 = *((void *)a2 + 8);
  uint64_t v7 = *((void *)a2 + 10);
  uint64_t v8 = *((void *)a2 + 11);
  uint64_t v18 = v8;
  uint64_t v10 = *((void *)a2 + 12);
  uint64_t v9 = *((void *)a2 + 13);
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v4, v5);
  outlined copy of Binding<SwipeActionResultToken?>?(v53, v49, v6, v7, v8, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v4, v5);
  uint64_t v11 = v7;
  outlined copy of Binding<SwipeActionResultToken?>?(v53, v49, v6, v7, v18, v10);
  uint64_t v50 = v10;
  outlined consume of Binding<SwipeActionResultToken?>?(v53, v49, v6, v7, v18, v10);
  uint64_t v51 = v4;
  outlined consume of Binding<NavigationSplitViewColumn>?(v4, v5);
  swift_bridgeObjectRelease();
  if (v46)
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v32 = 0;
    uint64_t v14 = 256;
    if (!v22) {
      uint64_t v14 = 0;
    }
    uint64_t v39 = v14 | v26;
    uint64_t v40 = v44 | 0x100;
    uint64_t v45 = v10;
    uint64_t v47 = v9;
    uint64_t v43 = v18;
    uint64_t v42 = v11;
    uint64_t v41 = v6;
    uint64_t v38 = v49;
    uint64_t v15 = v53;
    uint64_t v37 = v53;
    uint64_t v35 = v5;
    uint64_t v36 = v48;
    uint64_t v33 = a1;
    uint64_t v34 = v4;
    uint64_t v29 = v52;
    uint64_t v52 = 0;
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    uint64_t v47 = 0;
    uint64_t v43 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v29 = 0;
    uint64_t v17 = 256;
    if (!v22) {
      uint64_t v17 = 0;
    }
    uint64_t v32 = v17 | v26;
    uint64_t v31 = v9;
    uint64_t v30 = v10;
    uint64_t v27 = v7;
    uint64_t v28 = v18;
    uint64_t v24 = v49;
    uint64_t v25 = v6;
    uint64_t v15 = v53;
    uint64_t v23 = v53;
    uint64_t v20 = v5;
    uint64_t v21 = v48;
    uint64_t v12 = v4;
    uint64_t v13 = a1;
    uint64_t v16 = v44;
  }
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v51, v5);
  outlined consume of Binding<SwipeActionResultToken?>?(v15, v49, v6, v11, v18, v50);
  *a3 = v16;
  a3[1] = v52;
  a3[2] = v32;
  a3[3] = v13;
  a3[4] = v12;
  a3[5] = v20;
  a3[6] = v21;
  a3[7] = v23;
  a3[8] = v24;
  a3[9] = v25;
  a3[10] = v27;
  a3[11] = v28;
  a3[12] = v30;
  a3[13] = v31;
  a3[14] = v40;
  a3[15] = v29;
  a3[16] = v39;
  a3[17] = v33;
  a3[18] = v34;
  a3[19] = v35;
  a3[20] = v36;
  a3[21] = v37;
  a3[22] = v38;
  a3[23] = v41;
  a3[24] = v42;
  a3[25] = v43;
  a3[26] = v45;
  a3[27] = v47;
}

double SwipeActions.Value.reduce(_:)(long long *a1)
{
  long long v56 = a1[9];
  long long v57 = a1[8];
  long long v54 = a1[11];
  long long v55 = a1[10];
  long long v53 = a1[12];
  uint64_t v51 = *((void *)a1 + 27);
  uint64_t v52 = *((void *)a1 + 26);
  uint64_t v46 = v1[1];
  uint64_t v42 = v1[3];
  uint64_t v44 = v1[2];
  uint64_t v2 = v1[5];
  uint64_t v40 = v1[4];
  uint64_t v3 = v1[6];
  uint64_t v4 = v1[7];
  uint64_t v6 = v1[8];
  uint64_t v5 = v1[9];
  uint64_t v7 = v1[10];
  uint64_t v8 = v1[11];
  uint64_t v9 = v1[12];
  unint64_t v10 = v1[13];
  unint64_t v65 = *v1;
  uint64_t v48 = v65;
  uint64_t v66 = v46;
  uint64_t v67 = v44;
  uint64_t v68 = v42;
  uint64_t v69 = v40;
  uint64_t v70 = v2;
  uint64_t v71 = v3;
  uint64_t v72 = v4;
  uint64_t v73 = v6;
  uint64_t v74 = v5;
  uint64_t v75 = v7;
  uint64_t v76 = v8;
  uint64_t v77 = v9;
  unint64_t v78 = v10;
  long long v11 = a1[1];
  long long v58 = *a1;
  long long v59 = v11;
  long long v12 = a1[3];
  long long v60 = a1[2];
  long long v61 = v12;
  long long v13 = a1[5];
  long long v62 = a1[4];
  long long v63 = v13;
  long long v50 = a1[7];
  long long v64 = a1[6];
  static SwipeActions.Configuration.reduce(_:_:)(&v65, (uint64_t *)&v58, (uint64_t)&v79);
  outlined consume of SwipeActions.Configuration?(v48, v46, v44, v42, v40, v2, v3, v4, v6, v5, v7, v8, v9);
  unint64_t v14 = v81;
  uint64_t v15 = v82;
  unint64_t v16 = v84;
  unint64_t v17 = v86;
  unint64_t v18 = v90;
  if (v80) {
    uint64_t v19 = 256;
  }
  else {
    uint64_t v19 = 0;
  }
  unint64_t v20 = v19 | v79;
  if (v83) {
    uint64_t v21 = 256;
  }
  else {
    uint64_t v21 = 0;
  }
  *unsigned __int8 v1 = v20;
  v1[1] = v14;
  v1[2] = v21 | v15;
  v1[3] = v16;
  *((_OWORD *)v1 + 2) = v85;
  void v1[6] = v17;
  *(_OWORD *)(v1 + 7) = v87;
  *(_OWORD *)(v1 + 9) = v88;
  *(_OWORD *)(v1 + 11) = v89;
  v1[13] = v18;
  uint64_t v47 = v1[15];
  uint64_t v43 = v1[17];
  uint64_t v45 = v1[16];
  uint64_t v22 = v1[19];
  uint64_t v41 = v1[18];
  uint64_t v23 = v1[20];
  uint64_t v24 = v1[21];
  uint64_t v26 = v1[22];
  uint64_t v25 = v1[23];
  uint64_t v27 = v1[24];
  uint64_t v28 = v1[25];
  uint64_t v29 = v1[26];
  unint64_t v30 = v1[27];
  unint64_t v65 = v1[14];
  uint64_t v49 = v65;
  uint64_t v66 = v47;
  uint64_t v67 = v45;
  uint64_t v68 = v43;
  uint64_t v69 = v41;
  uint64_t v70 = v22;
  uint64_t v71 = v23;
  uint64_t v72 = v24;
  uint64_t v73 = v26;
  uint64_t v74 = v25;
  uint64_t v75 = v27;
  uint64_t v76 = v28;
  uint64_t v77 = v29;
  unint64_t v78 = v30;
  long long v58 = v50;
  long long v59 = v57;
  long long v60 = v56;
  long long v61 = v55;
  long long v62 = v54;
  long long v63 = v53;
  *(void *)&long long v64 = v52;
  *((void *)&v64 + 1) = v51;
  static SwipeActions.Configuration.reduce(_:_:)(&v65, (uint64_t *)&v58, (uint64_t)&v79);
  outlined consume of SwipeActions.Configuration?(v49, v47, v45, v43, v41, v22, v23, v24, v26, v25, v27, v28, v29);
  unint64_t v31 = v81;
  unint64_t v32 = v84;
  unint64_t v33 = v86;
  unint64_t v34 = v90;
  if (v80) {
    uint64_t v35 = 256;
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t v36 = v35 | v79;
  if (v83) {
    uint64_t v37 = 256;
  }
  else {
    uint64_t v37 = 0;
  }
  uint64_t v38 = v37 | v82;
  v1[14] = v36;
  v1[15] = v31;
  v1[16] = v38;
  v1[17] = v32;
  *((_OWORD *)v1 + 9) = v85;
  v1[20] = v33;
  *(_OWORD *)(v1 + 21) = v87;
  *(_OWORD *)(v1 + 23) = v88;
  double result = *(double *)&v89;
  *(_OWORD *)(v1 + 25) = v89;
  v1[27] = v34;
  return result;
}

void static SwipeActions.Configuration.reduce(_:_:)(unint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = *a1;
  uint64_t v47 = a1[1];
  unint64_t v6 = a1[2];
  unint64_t v5 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v53 = a1[5];
  unint64_t v8 = a1[6];
  uint64_t v51 = a1[8];
  uint64_t v41 = a1[9];
  uint64_t v42 = a1[7];
  uint64_t v52 = a1[10];
  uint64_t v50 = a1[11];
  uint64_t v56 = a1[12];
  unint64_t v49 = a1[13];
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  unint64_t v11 = a2[2];
  uint64_t v12 = a2[3];
  uint64_t v45 = a2[4];
  uint64_t v38 = a2[7];
  uint64_t v39 = a2[6];
  uint64_t v36 = a2[9];
  uint64_t v37 = a2[8];
  uint64_t v34 = a2[11];
  uint64_t v35 = a2[10];
  unint64_t v32 = a2[13];
  uint64_t v33 = a2[12];
  uint64_t v40 = a2[5];
  if (v5)
  {
    swift_bridgeObjectRetain();
    unint64_t v13 = v5;
  }
  else
  {
    unint64_t v13 = MEMORY[0x1E4FBC860];
  }
  unint64_t v57 = v13;
  char v55 = v8;
  if (v12) {
    uint64_t v14 = swift_bridgeObjectRetain();
  }
  else {
    uint64_t v14 = MEMORY[0x1E4FBC860];
  }
  specialized Array.append<A>(contentsOf:)(v14);
  if (!v5 || (v4 & 1) != 0)
  {
    char v15 = (v12 == 0) | v10;
    if (!v5)
    {
      if (v12) {
        char v23 = BYTE1(v10) & 1;
      }
      else {
        char v23 = 1;
      }
      uint64_t v16 = (v11 >> 8) & 1;
      if (v12) {
        uint64_t v24 = v9;
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v54 = v24;
      if (v12) {
        unsigned __int8 v18 = v11;
      }
      else {
        unsigned __int8 v18 = 0;
      }
      if (!v12) {
        LODWORD(v16) = 0;
      }
      LOBYTE(v46) = v23;
      if (!v12)
      {
        uint64_t v20 = v52;
        uint64_t v19 = v7;
        uint64_t v21 = v51;
        goto LABEL_46;
      }
      uint64_t v20 = v52;
      uint64_t v19 = v7;
      uint64_t v21 = v51;
      if ((v11 & 0x100) == 0) {
        goto LABEL_39;
      }
LABEL_41:
      if (v12 && v16 && v54 | v18)
      {
        char v44 = 0;
        uint64_t v54 = 1;
LABEL_47:
        char v43 = 1;
        goto LABEL_48;
      }
LABEL_46:
      uint64_t v54 = 0;
      char v44 = 0;
      goto LABEL_47;
    }
  }
  else
  {
    char v15 = 0;
  }
  uint64_t v16 = (v11 >> 8) & 1;
  if (v12) {
    uint64_t v17 = v9;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v54 = v17;
  if (v12) {
    unsigned __int8 v18 = v11;
  }
  else {
    unsigned __int8 v18 = 0;
  }
  if (!v12) {
    LODWORD(v16) = 0;
  }
  uint64_t v19 = v7;
  uint64_t v46 = (v4 >> 8) & 1;
  if ((v6 & 0x100) != 0)
  {
    uint64_t v21 = v51;
    if (v12 && (v11 & 0x100) == 0)
    {
      uint64_t v20 = v52;
      goto LABEL_39;
    }
    uint64_t v22 = v53;
    if (v47 | v6)
    {
      char v44 = 0;
      uint64_t v54 = 1;
      char v43 = 1;
      uint64_t v20 = v52;
      goto LABEL_49;
    }
    uint64_t v20 = v52;
    goto LABEL_41;
  }
  uint64_t v54 = v47;
  unsigned __int8 v18 = v6;
  uint64_t v20 = v52;
  uint64_t v21 = v51;
LABEL_39:
  char v43 = 0;
  char v44 = v18 & 1;
LABEL_48:
  uint64_t v22 = v53;
LABEL_49:
  unint64_t v25 = v57;
  char v48 = v15;
  if (v5)
  {
    if (v22)
    {
      uint64_t v45 = v19;
      swift_retain();
      swift_retain();
      uint64_t v27 = v41;
      uint64_t v26 = v42;
      if (!v21) {
        goto LABEL_52;
      }
LABEL_60:
      swift_retain();
      swift_retain();
      unint64_t v28 = v49;
      uint64_t v29 = v50;
      outlined copy of SwipeActionResultToken?(v27, v20, v50, v56);
      goto LABEL_63;
    }
    unint64_t v30 = v57;
    if (!v12) {
      goto LABEL_57;
    }
LABEL_55:
    outlined copy of Binding<NavigationSplitViewColumn>?(v45, v40);
    uint64_t v31 = v40;
    char v55 = v39;
    goto LABEL_58;
  }
  uint64_t v19 = 0;
  unint64_t v30 = v57;
  if (v12) {
    goto LABEL_55;
  }
LABEL_57:
  uint64_t v45 = 0;
  uint64_t v31 = 0;
  char v55 = 0;
LABEL_58:
  outlined consume of Binding<NavigationSplitViewColumn>?(v19, 0);
  if (!v5)
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v20 = 0;
    uint64_t v50 = 0;
    uint64_t v56 = 0;
    unint64_t v25 = v30;
    uint64_t v22 = v31;
    if (v12) {
      goto LABEL_53;
    }
LABEL_62:
    outlined consume of Binding<SwipeActionResultToken?>?(v26, 0, v27, v20, v50, v56);
    uint64_t v26 = 0;
    uint64_t v21 = 0;
    uint64_t v27 = 0;
    uint64_t v20 = 0;
    uint64_t v29 = 0;
    uint64_t v56 = 0;
    unint64_t v28 = 0;
    goto LABEL_63;
  }
  uint64_t v27 = v41;
  uint64_t v26 = v42;
  uint64_t v21 = v51;
  unint64_t v25 = v30;
  uint64_t v22 = v31;
  if (v51) {
    goto LABEL_60;
  }
LABEL_52:
  if (!v12) {
    goto LABEL_62;
  }
LABEL_53:
  unint64_t v28 = v32;
  outlined copy of Binding<SwipeActionResultToken?>?(v38, v37, v36, v35, v34, v33);
  outlined consume of Binding<SwipeActionResultToken?>?(v26, 0, v27, v20, v50, v56);
  uint64_t v26 = v38;
  uint64_t v21 = v37;
  uint64_t v27 = v36;
  uint64_t v29 = v34;
  uint64_t v20 = v35;
  uint64_t v56 = v33;
LABEL_63:
  *(unsigned char *)a3 = v48 & 1;
  *(unsigned char *)(a3 + 1) = v46;
  *(void *)(a3 + 8) = v54;
  *(unsigned char *)(a3 + 16) = v44;
  *(unsigned char *)(a3 + 17) = v43;
  *(void *)(a3 + 24) = v25;
  *(void *)(a3 + 32) = v45;
  *(void *)(a3 + 40) = v22;
  *(unsigned char *)(a3 + 48) = v55;
  *(void *)(a3 + 56) = v26;
  *(void *)(a3 + 64) = v21;
  *(void *)(a3 + 72) = v27;
  *(void *)(a3 + 80) = v20;
  *(void *)(a3 + 88) = v29;
  *(void *)(a3 + 96) = v56;
  *(void *)(a3 + 104) = v28;
}

double (*SwipeActions.MakeValueTransform.value.getter())()
{
  _s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0(0, &lazy cache variable for type metadata for SwipeActions.Configuration?, (uint64_t)&type metadata for SwipeActions.Configuration, MEMORY[0x1E4FBB718]);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v1 = Value[3];
  uint64_t v2 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  if (v1)
  {
    uint64_t v3 = Value[12];
    uint64_t v4 = Value[13];
    uint64_t v6 = Value[10];
    uint64_t v5 = Value[11];
    uint64_t v7 = Value[9];
    uint64_t v24 = Value[7];
    uint64_t v25 = Value[8];
    uint64_t v22 = Value[5];
    uint64_t v23 = Value[6];
    uint64_t v21 = Value[4];
    uint64_t v9 = Value[1];
    uint64_t v8 = Value[2];
    uint64_t v10 = *Value;
    AGGraphGetValue();
    __int16 v26 = v10 & 0x101;
    uint64_t v27 = v9;
    __int16 v28 = v8 & 0x1FF;
    uint64_t v29 = v1;
    uint64_t v30 = v21;
    uint64_t v31 = v22;
    char v32 = v23;
    uint64_t v33 = v24;
    uint64_t v34 = v25;
    uint64_t v35 = v7;
    uint64_t v36 = v6;
    uint64_t v37 = v5;
    uint64_t v38 = v3;
    uint64_t v39 = v4;
    outlined copy of SwipeActions.Configuration?(v10, v9, v8, v1, v21, v22, v23, v24, v25, v7, v6, v5, v3);
    uint64_t v11 = swift_bridgeObjectRetain();
    SwipeActions.Value.init(itemList:configuration:)(v11, (unsigned __int8 *)&v26, v40);
    uint64_t v12 = (_OWORD *)swift_allocObject();
    long long v13 = v40[11];
    v12[11] = v40[10];
    v12[12] = v13;
    long long v14 = v40[13];
    v12[13] = v40[12];
    v12[14] = v14;
    long long v15 = v40[7];
    v12[7] = v40[6];
    v12[8] = v15;
    long long v16 = v40[9];
    v12[9] = v40[8];
    v12[10] = v16;
    long long v17 = v40[3];
    v12[3] = v40[2];
    v12[4] = v17;
    long long v18 = v40[5];
    v12[5] = v40[4];
    v12[6] = v18;
    long long v19 = v40[1];
    v12[1] = v40[0];
    void v12[2] = v19;
    return _s7SwiftUI12SwipeActionsO18MakeValueTransformV5valueyyAC0F0VzcvgyAHzcfU0_TA_0;
  }
  return (double (*)())v2;
}

double closure #2 in SwipeActions.MakeValueTransform.value.getter(uint64_t a1, long long *a2)
{
  return SwipeActions.Value.reduce(_:)(a2);
}

uint64_t protocol witness for Rule.value.getter in conformance SwipeActions.MakeValueTransform@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t Value = SwipeActions.MakeValueTransform.value.getter();
  uint64_t v4 = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = Value;
  *(void *)(result + 24) = v4;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SwipeActions.MakeValue@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI12SwipeActionsO5ValueVSgWOi0_((uint64_t)v3);
  return outlined init with take of SwipeActions.Value?((uint64_t)v3, a1);
}

void protocol witness for Rule.value.getter in conformance SwipeActions.MakeValue(uint64_t *a1@<X8>)
{
  _s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0(0, &lazy cache variable for type metadata for SwipeActions.Configuration?, (uint64_t)&type metadata for SwipeActions.Configuration, MEMORY[0x1E4FBB718]);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  uint64_t v4 = Value[1];
  uint64_t v5 = Value[2];
  uint64_t v6 = Value[3];
  uint64_t v8 = Value[4];
  uint64_t v7 = Value[5];
  uint64_t v10 = Value[6];
  uint64_t v9 = Value[7];
  uint64_t v11 = Value[8];
  uint64_t v12 = Value[9];
  uint64_t v13 = Value[10];
  uint64_t v14 = Value[11];
  uint64_t v16 = Value[12];
  uint64_t v15 = Value[13];
  if (v6)
  {
    uint64_t v23 = v15;
    uint64_t v21 = v10;
    uint64_t v22 = v9;
    uint64_t v19 = v8;
    uint64_t v20 = v7;
    uint64_t v17 = v11;
    AGGraphGetValue();
    __int16 v24 = v3 & 0x101;
    uint64_t v25 = v4;
    __int16 v26 = v5 & 0x1FF;
    uint64_t v27 = v6;
    uint64_t v28 = v19;
    uint64_t v29 = v20;
    char v30 = v21;
    uint64_t v31 = v22;
    uint64_t v32 = v17;
    uint64_t v33 = v12;
    uint64_t v34 = v13;
    uint64_t v35 = v14;
    uint64_t v36 = v16;
    uint64_t v37 = v23;
    outlined copy of SwipeActions.Configuration?(v3, v4, v5, v6, v19, v20, v21, v22, v17, v12, v13, v14, v16);
    uint64_t v18 = swift_bridgeObjectRetain();
    SwipeActions.Value.init(itemList:configuration:)(v18, (unsigned __int8 *)&v24, a1);
  }
  else
  {
    *a1 = v3;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = 0;
    a1[4] = v8;
    a1[5] = v7;
    a1[6] = v10;
    a1[7] = v9;
    a1[8] = v11;
    a1[9] = v12;
    a1[10] = v13;
    a1[11] = v14;
    a1[12] = v16;
    a1[13] = v15;
    a1[14] = v3;
    a1[15] = v4;
    a1[16] = v5;
    a1[17] = 0;
    a1[18] = v8;
    a1[19] = v7;
    a1[20] = v10;
    a1[21] = v9;
    a1[22] = v11;
    a1[23] = v12;
    a1[24] = v13;
    a1[25] = v14;
    a1[26] = v16;
    a1[27] = v15;
  }
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance SwipeActions.Key(uint64_t a1, void (*a2)(_OWORD *__return_ptr))
{
  a2(v4);
  v3[10] = v4[10];
  v3[11] = v4[11];
  v3[12] = v4[12];
  v3[13] = v4[13];
  v3[6] = v4[6];
  v3[7] = v4[7];
  v3[8] = v4[8];
  v3[9] = v4[9];
  _OWORD v3[2] = v4[2];
  v3[3] = v4[3];
  v3[4] = v4[4];
  v3[5] = v4[5];
  v3[0] = v4[0];
  v3[1] = v4[1];
  SwipeActions.Value.reduce(_:)(v3);
  return outlined retain of SwipeActions.Value((uint64_t)v4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))outlined consume of SwipeActions.Configuration?);
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance SwipeActions.TraitKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static SwipeActions.TraitKey.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in ViewGraph.swipeActions()@<X0>(uint64_t a1@<X8>)
{
  AGGraphClearUpdate();
  lazy protocol witness table accessor for type SwipeActions.Feature and conformance SwipeActions.Feature();
  uint64_t v2 = ViewGraph.subscript.getter();
  if (v2 && (*(unsigned char *)(v2 + 8) & 1) == 0 && (Weakuint64_t Value = (_OWORD *)AGGraphGetWeakValue()) != 0)
  {
    long long v4 = WeakValue[1];
    v18[0] = *WeakValue;
    v18[1] = v4;
    long long v5 = WeakValue[2];
    long long v6 = WeakValue[3];
    long long v7 = WeakValue[5];
    long long v18[4] = WeakValue[4];
    v18[5] = v7;
    void v18[2] = v5;
    v18[3] = v6;
    long long v8 = WeakValue[6];
    long long v9 = WeakValue[7];
    long long v10 = WeakValue[9];
    v18[8] = WeakValue[8];
    v18[9] = v10;
    void v18[6] = v8;
    v18[7] = v9;
    long long v11 = WeakValue[10];
    long long v12 = WeakValue[11];
    long long v13 = WeakValue[13];
    v18[12] = WeakValue[12];
    v18[13] = v13;
    v18[10] = v11;
    v18[11] = v12;
    memmove(__dst, WeakValue, 0xE0uLL);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__dst, v14, v15, v16);
    outlined init with take of SwipeActions.Value?((uint64_t)__dst, a1);
    outlined retain of SwipeActions.Value((uint64_t)v18, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))outlined copy of SwipeActions.Configuration?);
  }
  else
  {
    _s7SwiftUI12SwipeActionsO5ValueVSgWOi0_((uint64_t)__dst);
    outlined init with take of SwipeActions.Value?((uint64_t)__dst, a1);
  }
  return AGGraphSetUpdate();
}

Swift::Void __swiftcall SwipeActionResultToken.complete()()
{
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 8);
  if (!v1)
  {
    JUMPOUT(0x18C112B90);
  }
  if (*(unsigned char *)v0 == 1)
  {
    uint64_t v2 = *(void (**)(void))(v0 + 24);
    if (v2) {
      v2();
    }
  }
  v1(1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v1);
  *(void *)(v0 + 8) = 0;
  *(void *)(v0 + 16) = 0;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)(v0 + 24));
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
}

Swift::Void __swiftcall SwipeActionResultToken.cancel()()
{
  uint64_t v1 = (void (*)(void))v0[1];
  if (!v1)
  {
    JUMPOUT(0x18C112B90);
  }
  v1(0);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v1);
  v0[1] = 0;
  v0[2] = 0;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v0[3]);
  v0[3] = 0;
  v0[4] = 0;
}

ValueMetadata *type metadata accessor for SwipeActionsStyle()
{
  return &type metadata for SwipeActionsStyle;
}

uint64_t destroy for SwipeActionResultToken(uint64_t result)
{
  uint64_t v1 = result;
  if (*(void *)(result + 8)) {
    uint64_t result = swift_release();
  }
  if (*(void *)(v1 + 24))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for SwipeActionResultToken(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  return a1;
}

uint64_t assignWithCopy for SwipeActionResultToken(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v6 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v7;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v8;
    swift_retain();
    goto LABEL_8;
  }
  *uint64_t v4 = *v6;
LABEL_8:
  uint64_t v9 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24))
  {
    if (v9)
    {
      uint64_t v11 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = v11;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    return a1;
  }
  if (!v9)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v10 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SwipeActionResultToken(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v6 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v7;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v8;
    goto LABEL_8;
  }
  *uint64_t v4 = *v6;
LABEL_8:
  uint64_t v9 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24))
  {
    if (v9)
    {
      uint64_t v11 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = v11;
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    return a1;
  }
  if (!v9)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v10 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SwipeActionResultToken()
{
  return &type metadata for SwipeActionResultToken;
}

uint64_t sub_187F1C808()
{
  return swift_getWitnessTable();
}

uint64_t destructiveInjectEnumTag for SwipeActionsStyle.Storage(uint64_t result, int a2)
{
  if (a2)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 9) = 1;
  }
  else
  {
    *(unsigned char *)(result + 9) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SwipeActionsStyle.Storage()
{
  return &type metadata for SwipeActionsStyle.Storage;
}

ValueMetadata *type metadata accessor for SwipeActionsArePresent()
{
  return &type metadata for SwipeActionsArePresent;
}

uint64_t type metadata completion function for SwipeActionsModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SwipeActionsModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) == 0 && ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 112 <= 0x18)
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)(v11 + 24) < 0xFFFFFFFFuLL)
    {
      long long v20 = *(_OWORD *)v11;
      long long v21 = *(_OWORD *)(v11 + 32);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(v11 + 16);
      *(_OWORD *)(v10 + 32) = v21;
      *(_OWORD *)unint64_t v10 = v20;
      long long v22 = *(_OWORD *)(v11 + 48);
      long long v23 = *(_OWORD *)(v11 + 64);
      long long v24 = *(_OWORD *)(v11 + 96);
      *(_OWORD *)(v10 + 80) = *(_OWORD *)(v11 + 80);
      *(_OWORD *)(v10 + 96) = v24;
      *(_OWORD *)(v10 + 48) = v22;
      *(_OWORD *)(v10 + 64) = v23;
      return v4;
    }
    *(unsigned char *)unint64_t v10 = *(unsigned char *)v11;
    *(unsigned char *)(v10 + 1) = *(unsigned char *)(v11 + 1);
    uint64_t v12 = *(void *)(v11 + 8);
    *(_WORD *)(v10 + 16) = *(_WORD *)(v11 + 16);
    *(void *)(v10 + 8) = v12;
    *(void *)(v10 + 24) = *(void *)(v11 + 24);
    uint64_t v13 = *(void *)(v11 + 40);
    swift_bridgeObjectRetain();
    if (v13)
    {
      *(void *)(v10 + 32) = *(void *)(v11 + 32);
      *(void *)(v10 + 40) = *(void *)(v11 + 40);
      *(unsigned char *)(v10 + 48) = *(unsigned char *)(v11 + 48);
      swift_retain();
      swift_retain();
      if (*(void *)(v11 + 64))
      {
LABEL_11:
        *(void *)(v10 + 56) = *(void *)(v11 + 56);
        *(void *)(v10 + 64) = *(void *)(v11 + 64);
        uint64_t v14 = (void *)(v11 + 80);
        uint64_t v15 = *(void *)(v11 + 80);
        uint64_t v16 = (long long *)(v11 + 72);
        swift_retain();
        swift_retain();
        if (v15 == 1)
        {
          uint64_t v17 = (_OWORD *)(v10 + 72);
          long long v18 = *v16;
          long long v19 = *(_OWORD *)(v11 + 88);
          *(void *)(v10 + 104) = *(void *)(v11 + 104);
LABEL_16:
          *uint64_t v17 = v18;
          v17[1] = v19;
          return v4;
        }
        *(unsigned char *)(v10 + 72) = *(unsigned char *)v16;
        if (*v14)
        {
          uint64_t v28 = *(void *)(v11 + 88);
          *(void *)(v10 + 80) = *v14;
          *(void *)(v10 + 88) = v28;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(v10 + 80) = *(_OWORD *)v14;
        }
        uint64_t v29 = *(void *)(v11 + 96);
        if (!v29)
        {
          *(_OWORD *)(v10 + 96) = *(_OWORD *)(v11 + 96);
          return v4;
        }
        uint64_t v30 = *(void *)(v11 + 104);
        *(void *)(v10 + 96) = v29;
        *(void *)(v10 + 104) = v30;
        goto LABEL_7;
      }
    }
    else
    {
      long long v25 = *(_OWORD *)(v11 + 32);
      *(unsigned char *)(v10 + 48) = *(unsigned char *)(v11 + 48);
      *(_OWORD *)(v10 + 32) = v25;
      if (*(void *)(v11 + 64)) {
        goto LABEL_11;
      }
    }
    uint64_t v17 = (_OWORD *)(v10 + 56);
    long long v18 = *(_OWORD *)(v11 + 56);
    long long v19 = *(_OWORD *)(v11 + 72);
    long long v26 = *(_OWORD *)(v11 + 88);
    *(void *)(v10 + 104) = *(void *)(v11 + 104);
    *(_OWORD *)(v10 + 88) = v26;
    goto LABEL_16;
  }
  uint64_t v9 = *a2;
  *uint64_t v4 = *a2;
  uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
LABEL_7:
  swift_retain();
  return v4;
}