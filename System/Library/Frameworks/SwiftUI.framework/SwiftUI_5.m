uint64_t type metadata completion function for NavigationLinkButtonStyle.Payload()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for NavigationLinkButtonStyle.PayloadV1();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for NavigationLinkButtonStyle.PayloadV4();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t NavigationLinkButtonStyle.Payload.deprecated_isActive.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NavigationLinkButtonStyle.PayloadV4();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  v7 = &v22[-v6];
  uint64_t v8 = type metadata accessor for NavigationLinkButtonStyle.PayloadV1();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  v11 = (uint64_t *)&v22[-v10];
  double v13 = MEMORY[0x1F4188790](v12);
  v15 = &v22[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v16 + 16))(v15, v2, a1, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 32))(v7, v15, v4);
    v17 = (uint64_t *)&v7[*(int *)(v4 + 48)];
    if (v17[1])
    {
      uint64_t v18 = *v17;
      v19 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
      swift_retain();
      swift_retain();
      v19(v7, v4);
    }
    else
    {
      v22[7] = 0;
      static Binding.constant(_:)();
      (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
      return v23;
    }
  }
  else
  {
    (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v9 + 32))(v11, v15, v8);
    uint64_t v18 = *v11;
    v20 = *(void (**)(uint64_t *, uint64_t))(v9 + 8);
    swift_retain();
    swift_retain();
    v20(v11, v8);
  }
  return v18;
}

uint64_t initializeWithCopy for NavigationLinkButtonStyle.Payload(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  if (((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24 <= ((v7 + 17) & (unint64_t)~v7) + v8)
    unint64_t v9 = ((v7 + 17) & ~v7) + v8;
  else {
    unint64_t v9 = ((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
  }
       + 24;
  unsigned int v10 = a2[v9];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_13;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_13:
        int v14 = (v13 | (v11 << (8 * v9))) + 2;
        unsigned int v10 = v13 + 2;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  if (v10 == 1)
  {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
    v15 = (void *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = (void *)((unint64_t)&a2[v8 + 7] & 0xFFFFFFFFFFFFFFF8);
    void *v15 = *v16;
    unint64_t v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v17 = *(void *)v18;
    *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
    unint64_t v19 = ((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = ((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = *(void *)(v20 + 8);
    swift_retain();
    if (v21 < 0xFFFFFFFF)
    {
      long long v27 = *(_OWORD *)v20;
      *(unsigned char *)(v19 + 16) = *(unsigned char *)(v20 + 16);
      *(_OWORD *)unint64_t v19 = v27;
    }
    else
    {
      *(void *)unint64_t v19 = *(void *)v20;
      *(void *)(v19 + 8) = *(void *)(v20 + 8);
      *(unsigned char *)(v19 + 16) = *(unsigned char *)(v20 + 16);
      swift_retain();
      swift_retain();
    }
    unint64_t v28 = ((unint64_t)v15 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v29 = ((unint64_t)v16 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v30 = *(void *)(v29 + 8);
    if (v30 >= 0xFFFFFFFF) {
      LODWORD(v30) = -1;
    }
    if ((int)v30 - 1 < 0)
    {
      swift_weakCopyInit();
      *(void *)(v28 + 8) = *(void *)(v29 + 8);
      *(void *)(v28 + 16) = *(void *)(v29 + 16);
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v31 = *(_OWORD *)v29;
      *(void *)(v28 + 16) = *(void *)(v29 + 16);
      *(_OWORD *)unint64_t v28 = v31;
    }
    v32 = (_OWORD *)((v28 + 31) & 0xFFFFFFFFFFFFFFF8);
    v33 = (long long *)((v29 + 31) & 0xFFFFFFFFFFFFFFF8);
    long long v34 = *v33;
    long long v35 = v33[2];
    v32[1] = v33[1];
    v32[2] = v35;
    _OWORD *v32 = v34;
    unint64_t v36 = ((unint64_t)v32 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v37 = ((unint64_t)v33 + 55) & 0xFFFFFFFFFFFFFFF8;
    long long v38 = *(_OWORD *)v37;
    *(void *)(v36 + 16) = *(void *)(v37 + 16);
    *(_OWORD *)unint64_t v36 = v38;
    char v26 = 1;
  }
  else
  {
    uint64_t v22 = *((void *)a2 + 1);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v22;
    *(unsigned char *)(a1 + 16) = a2[16];
    uint64_t v23 = (a1 + v7 + 17) & ~v7;
    uint64_t v24 = (unint64_t)&a2[v7 + 17] & ~v7;
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v25(v23, v24, v5);
    char v26 = 0;
  }
  *(unsigned char *)(a1 + v9) = v26;
  return a1;
}

uint64_t NavigationLinkButtonStyle.reconfiguration(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  v68 = (unsigned __int8 *)a1;
  v71 = (unsigned char *)a3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v8 = type metadata accessor for NavigationLinkButtonStyle.PayloadV1();
  uint64_t v60 = *(void *)(v8 - 8);
  uint64_t v61 = v8;
  uint64_t v9 = *(void *)(v60 + 64);
  MEMORY[0x1F4188790](v8);
  v63 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  v59 = (char *)&v56 - v11;
  uint64_t v70 = *(void *)(a2 - 8);
  uint64_t v12 = *(void *)(v70 + 64);
  MEMORY[0x1F4188790](v13);
  v69 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for ButtonAction();
  MEMORY[0x1F4188790](v65);
  v67 = (uint64_t (**)())((char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v62 = type metadata accessor for NavigationLinkButtonStyle.PayloadV4();
  uint64_t v58 = *(void *)(v62 - 8);
  uint64_t v15 = *(void *)(v58 + 64);
  MEMORY[0x1F4188790](v62);
  v57 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  unint64_t v18 = (char *)&v56 - v17;
  uint64_t v66 = v6;
  uint64_t v19 = type metadata accessor for NavigationLinkButtonStyle.Payload();
  uint64_t v20 = type metadata accessor for Optional();
  double v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v56 - v22;
  uint64_t v24 = *(int *)(a2 + 36);
  uint64_t v64 = v4;
  (*(void (**)(char *, uint64_t, double))(v25 + 16))(v23, v4 + v24, v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v23, 1, v19) == 1) {
    return _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_7((uint64_t)v68, (uint64_t)v71, type metadata accessor for PrimitiveButtonStyleConfiguration);
  }
  long long v27 = v68;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v56 = v70 + 16;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v30 = v58 + 32;
    unint64_t v29 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
    uint64_t v31 = v62;
    v29(v18, v23, v62);
    v32 = v29;
    LODWORD(v63) = *v27;
    LODWORD(v68) = v27[1];
    uint64_t v33 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, v64, a2);
    long long v34 = v57;
    v32(v57, v18, v31);
    long long v35 = (void (*)(unint64_t, char *, uint64_t))v32;
    unint64_t v36 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    unint64_t v37 = (v12 + v36 + *(unsigned __int8 *)(v30 + 48)) & ~(unint64_t)*(unsigned __int8 *)(v30 + 48);
    uint64_t v38 = swift_allocObject();
    uint64_t v39 = v66;
    *(void *)(v38 + 16) = v7;
    *(void *)(v38 + 24) = v39;
    (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))(v38 + v36, v69, a2);
    v35(v38 + v37, v34, v62);
    uint64_t v40 = (uint64_t)v67;
    *v67 = partial apply for closure #1 in NavigationLinkButtonStyle.reconfiguration(from:);
    *(void *)(v40 + 8) = v38;
    swift_storeEnumTagMultiPayload();
    v41 = v71;
    char v42 = (char)v63;
  }
  else
  {
    v43 = v59;
    uint64_t v44 = v60 + 32;
    v45 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
    uint64_t v46 = v61;
    v45(v59, v23, v61);
    v47 = v45;
    LODWORD(v62) = *v27;
    LODWORD(v68) = v27[1];
    uint64_t v48 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, v64, a2);
    v49 = v43;
    uint64_t v50 = v46;
    v47(v63, v49, v46);
    unint64_t v51 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
    unint64_t v52 = (v12 + v51 + *(unsigned __int8 *)(v44 + 48)) & ~(unint64_t)*(unsigned __int8 *)(v44 + 48);
    uint64_t v53 = swift_allocObject();
    uint64_t v54 = v66;
    *(void *)(v53 + 16) = v7;
    *(void *)(v53 + 24) = v54;
    (*(void (**)(unint64_t, char *, uint64_t))(v48 + 32))(v53 + v51, v69, a2);
    v47((char *)(v53 + v52), v63, v50);
    uint64_t v40 = (uint64_t)v67;
    *v67 = partial apply for closure #2 in NavigationLinkButtonStyle.reconfiguration(from:);
    *(void *)(v40 + 8) = v53;
    swift_storeEnumTagMultiPayload();
    v41 = v71;
    char v42 = v62;
  }
  unsigned char *v41 = v42;
  v41[1] = (_BYTE)v68;
  uint64_t v55 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  return outlined init with take of ButtonAction(v40, (uint64_t)&v41[*(int *)(v55 + 24)], (uint64_t (*)(void))type metadata accessor for ButtonAction);
}

uint64_t initializeWithTake for NavigationLinkButtonStyle.PayloadV4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  unint64_t v11 = ((unint64_t)v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  long long v13 = *(_OWORD *)v12;
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  *(_OWORD *)unint64_t v11 = v13;
  unint64_t v14 = ((unint64_t)v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  int v16 = *(void *)(v15 + 8);
  if (*(void *)(v15 + 8) >= 0xFFFFFFFFuLL) {
    int v16 = -1;
  }
  if (v16 - 1 < 0)
  {
    unint64_t v14 = swift_weakTakeInit();
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
  }
  else
  {
    long long v17 = *(_OWORD *)v15;
    *(void *)(v14 + 16) = *(void *)(v15 + 16);
    *(_OWORD *)unint64_t v14 = v17;
  }
  unint64_t v18 = (_OWORD *)((v14 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (long long *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v20 = *v19;
  long long v21 = v19[2];
  v18[1] = v19[1];
  v18[2] = v21;
  *unint64_t v18 = v20;
  unint64_t v22 = ((unint64_t)v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = ((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFFFF8;
  long long v24 = *(_OWORD *)v23;
  *(void *)(v22 + 16) = *(void *)(v23 + 16);
  *(_OWORD *)unint64_t v22 = v24;
  return a1;
}

uint64_t type metadata accessor for NavigationLinkButtonStyle.PayloadV1()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for NavigationLinkButtonStyle.PayloadV4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t result = swift_release();
  if (*(void *)(((v4 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    uint64_t result = swift_release();
  }
  unint64_t v6 = *(void *)(((v4 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v6 >= 0xFFFFFFFF) {
    LODWORD(v6) = -1;
  }
  if ((int)v6 - 1 < 0)
  {
    swift_weakDestroy();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t assignWithTake for HostingContentViewRootModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  uint64_t v7 = *(void *)(a2 + 72);
  uint64_t v8 = *(void *)(a1 + 72);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  if (v8 == 1) {
    goto LABEL_4;
  }
  if (v7 == 1)
  {
    outlined destroy of ListItemTint(a1 + 72);
LABEL_4:
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    goto LABEL_6;
  }
  *(void *)(a1 + 72) = v7;
  swift_release();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
LABEL_6:
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  uint64_t v9 = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 152) = v9;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  LOBYTE(v9) = *(unsigned char *)(a2 + 177);
  uint64_t v10 = *(int *)(a3 + 32);
  unint64_t v11 = (void *)(a1 + v10);
  unint64_t v12 = (void *)(a2 + v10);
  *(unsigned char *)(a1 + 177) = v9;
  uint64_t v13 = type metadata accessor for UICellConfigurationState();
  uint64_t v14 = *(void *)(v13 - 8);
  unint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_11;
  }
  if (v17)
  {
LABEL_11:
    type metadata accessor for UICellConfigurationState?(0);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

BOOL specialized static SearchFieldPlacement.Role.== infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  switch(a1)
  {
    case 2u:
      if (a2 != 2) {
        goto LABEL_15;
      }
      BOOL result = 1;
      break;
    case 3u:
      if (a2 != 3) {
        goto LABEL_15;
      }
      BOOL result = 1;
      break;
    case 4u:
      if (a2 != 4) {
        goto LABEL_15;
      }
      BOOL result = 1;
      break;
    case 5u:
      if (a2 != 5) {
        goto LABEL_15;
      }
      BOOL result = 1;
      break;
    case 6u:
      if (a2 != 6) {
        goto LABEL_15;
      }
      BOOL result = 1;
      break;
    case 7u:
      if (a2 != 7) {
        goto LABEL_15;
      }
      BOOL result = 1;
      break;
    default:
      if (a2 - 2 >= 6) {
        BOOL result = ((a2 ^ a1) & 1) == 0;
      }
      else {
LABEL_15:
      }
        BOOL result = 0;
      break;
  }
  return result;
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance SidebarListStyleContext(uint64_t a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4)
{
  lazy protocol witness table accessor for type SidebarListStyleContext and conformance SidebarListStyleContext();

  return specialized static ListStyleContext.accepts<A>(_:at:)(a4, a3);
}

unint64_t lazy protocol witness table accessor for type SidebarListStyleContext and conformance SidebarListStyleContext()
{
  unint64_t result = lazy protocol witness table cache variable for type SidebarListStyleContext and conformance SidebarListStyleContext;
  if (!lazy protocol witness table cache variable for type SidebarListStyleContext and conformance SidebarListStyleContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarListStyleContext and conformance SidebarListStyleContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SidebarListStyleContext and conformance SidebarListStyleContext;
  if (!lazy protocol witness table cache variable for type SidebarListStyleContext and conformance SidebarListStyleContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarListStyleContext and conformance SidebarListStyleContext);
  }
  return result;
}

uint64_t one-time initialization function for automatic()
{
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for CustomHoverEffectModifier<HoverEffect>(0, (unint64_t *)&lazy cache variable for type metadata for _InternalHoverEffectBox<AutomaticHoverEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticHoverEffect and conformance AutomaticHoverEffect, (uint64_t)&type metadata for AutomaticHoverEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _InternalHoverEffectBox);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = KeyPath;
  *(unsigned char *)(result + 24) = 0;
  static HoverEffect.automatic = result;
  return result;
}

void type metadata accessor for CustomHoverEffectModifier<HoverEffect>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticHoverEffect and conformance AutomaticHoverEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomaticHoverEffect and conformance AutomaticHoverEffect;
  if (!lazy protocol witness table cache variable for type AutomaticHoverEffect and conformance AutomaticHoverEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticHoverEffect and conformance AutomaticHoverEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomaticHoverEffect and conformance AutomaticHoverEffect;
  if (!lazy protocol witness table cache variable for type AutomaticHoverEffect and conformance AutomaticHoverEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticHoverEffect and conformance AutomaticHoverEffect);
  }
  return result;
}

uint64_t AutomaticHoverEffect.body(content:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *((unsigned __int8 *)v1 + 8);
  outlined copy of Environment<HoverEffect?>.Content(*v1, v4);
  specialized Environment.wrappedValue.getter(v3, v4, &v9);
  uint64_t v5 = outlined consume of Environment<Color?>.Content(v3, v4);
  if (v9
    && ((*(void (**)(char *__return_ptr, uint64_t))(*(void *)v9 + 96))(&v8, v5), swift_release(), v8 != 3)
    && !v8
    || (outlined copy of Environment<HoverEffect?>.Content(v3, v4),
        specialized Environment.wrappedValue.getter(v3, v4, &v9),
        outlined consume of Environment<Color?>.Content(v3, v4),
        (uint64_t result = v9) == 0))
  {
    uint64_t KeyPath = swift_getKeyPath();
    type metadata accessor for _InternalHoverEffectBox<HoverContainerEffect>();
    uint64_t result = swift_allocObject();
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 16) = KeyPath;
    *(void *)(result + 37) = 0;
    *(unsigned char *)(result + 45) = 1;
  }
  *a1 = result;
  return result;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, void (*a6)(uint64_t, void)@<X5>, void *a7@<X8>)
{
  if (a2)
  {
    *a7 = a1;
    return a3();
  }
  else
  {
    ((void (*)(uint64_t, void))a3)(a1, 0);
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    unint64_t v12 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v17 = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v12, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v15, -1, -1);
      MEMORY[0x18C119C60](v14, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    a6(a1, 0);
    swift_release();
    return swift_release();
  }
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  return specialized Environment.wrappedValue.getter(a1, a2, (uint64_t (*)(void))outlined copy of Environment<HoverEffect?>.Content, 0xD000000000000015, 0x8000000188328260, (void (*)(uint64_t, void))outlined consume of Environment<Color?>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (uint64_t (*)(void))outlined copy of ResolvedTableRowIDs.Storage, 0xD00000000000001CLL, 0x8000000188328480, (void (*)(uint64_t, void))outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content, a3);
}

void type metadata accessor for _InternalHoverEffectBox<HoverContainerEffect>()
{
  if (!lazy cache variable for type metadata for _InternalHoverEffectBox<HoverContainerEffect>)
  {
    lazy protocol witness table accessor for type HoverContainerEffect and conformance HoverContainerEffect();
    unint64_t v0 = type metadata accessor for _InternalHoverEffectBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _InternalHoverEffectBox<HoverContainerEffect>);
    }
  }
}

uint64_t type metadata accessor for _InternalHoverEffectBox()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for NavigationSplitViewStyleConfiguration()
{
  return &type metadata for NavigationSplitViewStyleConfiguration;
}

uint64_t initializeWithCopy for SearchPrimitiveModifier.SearchConfigModifier(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AttributedString();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = ((v7 + 9) & ~v7) + v8;
  unint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  unint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 24;
  uint64_t v12 = v7 | 3;
  if (v10 + ((v7 + 16) & ~(v7 | 3)) <= v11) {
    unint64_t v13 = v11;
  }
  else {
    unint64_t v13 = v10 + ((v7 + 16) & ~(v7 | 3));
  }
  unsigned int v14 = a2[v13];
  unsigned int v15 = v14 - 2;
  if (v14 >= 2)
  {
    if (v13 <= 3) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a2;
        if (v13 < 4) {
          goto LABEL_14;
        }
        goto LABEL_16;
      case 2:
        int v17 = *(unsigned __int16 *)a2;
        if (v13 >= 4) {
          goto LABEL_16;
        }
        goto LABEL_14;
      case 3:
        int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v13 < 4) {
          goto LABEL_14;
        }
        goto LABEL_16;
      case 4:
        int v17 = *(_DWORD *)a2;
        if (v13 < 4) {
LABEL_14:
        }
          unsigned int v14 = (v17 | (v15 << (8 * v13))) + 2;
        else {
LABEL_16:
        }
          unsigned int v14 = v17 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v18 = ~v7;
  if (v14 == 1)
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v19 = ~v12;
    long long v20 = (void *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    long long v21 = (void *)((unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *long long v20 = *v21;
    unint64_t v22 = (char *)v20 + v12;
    unint64_t v23 = (char *)v21 + v12;
    uint64_t v24 = (unint64_t)(v22 + 8) & v19;
    uint64_t v25 = (unint64_t)(v23 + 8) & v19;
    *(unsigned char *)uint64_t v24 = *(unsigned char *)v25;
    *(unsigned char *)(v24 | 1) = *(unsigned char *)(v25 | 1);
    *(unsigned char *)(v24 | 2) = *(unsigned char *)(v25 | 2);
    *(unsigned char *)(v24 | 3) = *(unsigned char *)(v25 | 3);
    unint64_t v26 = (v24 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v27 = (v25 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v22) = *(_DWORD *)v27;
    *(unsigned char *)(v26 + 4) = *(unsigned char *)(v27 + 4);
    *(_DWORD *)unint64_t v26 = v22;
    uint64_t v28 = v7 + 5;
    unint64_t v29 = (v28 + v26) & v18;
    unint64_t v30 = (v28 + v27) & v18;
    uint64_t v31 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    uint64_t v32 = v5;
    swift_retain();
    swift_retain();
    v31(v29, v30, v32);
    *(unsigned char *)(v29 + v8) = *(unsigned char *)(v30 + v8);
    unint64_t v33 = (v29 + v8) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v34 = (v30 + v8) & 0xFFFFFFFFFFFFFFFCLL;
    int v35 = *(_DWORD *)(v34 + 4);
    *(unsigned char *)(v33 + 8) = *(unsigned char *)(v34 + 8);
    *(_DWORD *)(v33 + 4) = v35;
    char v36 = 1;
  }
  else
  {
    *(unsigned char *)a1 = *a2;
    *(unsigned char *)(a1 + 1) = a2[1];
    *(unsigned char *)(a1 + 2) = a2[2];
    *(unsigned char *)(a1 + 3) = a2[3];
    unint64_t v37 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v38 = (unint64_t)(a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    int v39 = *(_DWORD *)v38;
    *(unsigned char *)(v37 + 4) = *(unsigned char *)(v38 + 4);
    *(_DWORD *)unint64_t v37 = v39;
    uint64_t v40 = (v37 + v7 + 5) & v18;
    uint64_t v41 = (v38 + v7 + 5) & v18;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v40, v41, v5);
    *(unsigned char *)(v40 + v8) = *(unsigned char *)(v41 + v8);
    unint64_t v42 = (v40 + v8) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v43 = (v41 + v8) & 0xFFFFFFFFFFFFFFFCLL;
    int v44 = *(_DWORD *)(v43 + 4);
    *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
    *(_DWORD *)(v42 + 4) = v44;
    *(void *)((a1 + 7 + v10) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    char v36 = 0;
  }
  *(unsigned char *)(a1 + v13) = v36;
  unint64_t v45 = (v13 + 8 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v46 = (unint64_t)&a2[v13 + 8] & 0xFFFFFFFFFFFFFFF8;
  unsigned int v47 = *(unsigned __int8 *)(v46 + 17);
  if (v47 >= 2) {
    unsigned int v47 = *(_DWORD *)v46 + 2;
  }
  if (v47 == 1)
  {
    *(void *)unint64_t v45 = *(void *)v46;
    *(void *)(v45 + 8) = *(void *)(v46 + 8);
    *(unsigned char *)(v45 + 16) = *(unsigned char *)(v46 + 16);
    swift_retain();
    char v48 = 1;
  }
  else
  {
    char v48 = 0;
    *(unsigned char *)unint64_t v45 = *(unsigned char *)v46;
    *(void *)(v45 + 8) = *(void *)(v46 + 8);
  }
  swift_retain();
  *(unsigned char *)(v45 + 17) = v48;
  uint64_t v49 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v50 = v49 + 16;
  uint64_t v51 = *(unsigned __int8 *)(v49 + 80);
  (*(void (**)(unint64_t, unint64_t))(v49 + 16))((v45 + v51 + 18) & ~v51, (v46 + v51 + 18) & ~v51);
  uint64_t v52 = *(void *)(v50 + 48);
  *(unsigned char *)(((v45 + v51 + 18) & ~v51) + v52) = *(unsigned char *)(((v46 + v51 + 18) & ~v51) + v52);
  unint64_t v53 = v52 + (((v13 & 0xFFFFFFFFFFFFFFF8) + v51 + 26) & ~v51) + 1;
  unint64_t v54 = (unint64_t)&a2[v53];
  *(unsigned char *)(v53 + a1) = a2[v53];
  unint64_t v55 = (v53 + a1) & 0xFFFFFFFFFFFFFFF8;
  v54 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v56 = (unsigned __int8 *)(v54 + 8);
  *(unsigned char *)(v55 + 8) = *(unsigned char *)(v54 + 8);
  unint64_t v57 = v55 + 8;
  uint64_t v60 = *(void *)(v54 + 16);
  uint64_t v58 = (_OWORD *)(v54 + 16);
  uint64_t v59 = v60;
  if (v60)
  {
    uint64_t v61 = *((void *)v56 + 2);
    *(void *)(v57 + 8) = v59;
    *(void *)(v57 + 16) = v61;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v57 + 8) = *v58;
  }
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SearchEnvironmentWritingModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SearchEnvironmentWritingModifier()
{
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TriggerSubmitAction?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type SearchEnvironmentWritingModifier and conformance SearchEnvironmentWritingModifier, (void (*)(uint64_t))type metadata accessor for SearchEnvironmentWritingModifier);

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t SearchModifier.primitiveModifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for SearchField();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v14 - v6;
  double v9 = MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v11, v2, a1, v9);
  SearchModifier.searchField.getter(a1, (uint64_t)v7);
  return SearchPrimitiveModifier.init(base:searchField:)((uint64_t)v11, (uint64_t)v7, a2);
}

uint64_t SearchPrimitiveModifier.init(base:searchField:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SearchModifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for SearchPrimitiveModifier() + 36);
  uint64_t v8 = type metadata accessor for SearchField();
  double v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32);

  return v9(v7, a2, v8);
}

uint64_t SearchModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v48 = type metadata accessor for SearchFieldStateTransform(0);
  MEMORY[0x1F4188790](v48);
  unsigned int v47 = &v32[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v38 = type metadata accessor for SearchEnvironmentWritingModifier(0);
  MEMORY[0x1F4188790](v38);
  unint64_t v46 = &v32[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for SearchPrimitiveModifier();
  uint64_t v43 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = &v32[-v6];
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for _ViewModifier_Content();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v42 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = &v32[-v11];
  uint64_t v39 = type metadata accessor for ModifiedContent();
  uint64_t v45 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  char v36 = &v32[-v13];
  type metadata accessor for SearchEnvironmentTransformModifier<SearchFieldStateTransform>();
  uint64_t v40 = type metadata accessor for ModifiedContent();
  uint64_t v44 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  unint64_t v37 = &v32[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v15);
  uint64_t v41 = &v32[-v16];
  uint64_t KeyPath = swift_getKeyPath();
  v58[0] = 1;
  uint64_t v59 = 4;
  uint64_t v60 = KeyPath;
  uint64_t v61 = 0;
  char v62 = 0;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](v63, v58, v8, &type metadata for SubmitScopeModifier, WitnessTable);
  outlined consume of Environment<AppIntentExecutor?>.Content(KeyPath, 0, 0);
  uint64_t v35 = v63[2];
  uint64_t v34 = v63[3];
  int v33 = v64;
  SearchModifier.primitiveModifier.getter(a1, (uint64_t)v7);
  unint64_t v19 = lazy protocol witness table accessor for type SubmitScopeModifier and conformance SubmitScopeModifier();
  uint64_t v56 = WitnessTable;
  unint64_t v57 = v19;
  uint64_t v20 = swift_getWitnessTable();
  MEMORY[0x18C113660](v7, v9, v5, v20);
  (*(void (**)(unsigned char *, uint64_t))(v43 + 8))(v7, v5);
  long long v21 = v46;
  SearchModifier.environmentModifier.getter(a1, v46);
  uint64_t v54 = v20;
  unint64_t v55 = &protocol witness table for SearchPrimitiveModifier<A>;
  uint64_t v22 = swift_getWitnessTable();
  unint64_t v23 = v36;
  MEMORY[0x18C113660](v21, v10, v38, v22);
  outlined destroy of SearchEnvironmentWritingModifier((uint64_t)v21, type metadata accessor for SearchEnvironmentWritingModifier);
  (*(void (**)(unsigned char *, uint64_t))(v42 + 8))(v12, v10);
  uint64_t v24 = v47;
  SearchModifier.environmentTransform.getter(a1, v47);
  uint64_t v52 = v22;
  unint64_t v53 = &protocol witness table for SearchEnvironmentWritingModifier;
  uint64_t v25 = v39;
  uint64_t v26 = swift_getWitnessTable();
  unint64_t v27 = v37;
  View.searchEnvironmentTransform<A>(_:)((uint64_t)v24, v25, v48, v26);
  outlined consume of Environment<AppIntentExecutor?>.Content(v35, v34, v33);
  outlined destroy of SearchEnvironmentWritingModifier((uint64_t)v24, type metadata accessor for SearchFieldStateTransform);
  (*(void (**)(unsigned char *, uint64_t))(v45 + 8))(v23, v25);
  uint64_t v50 = v26;
  uint64_t v51 = &protocol witness table for SearchEnvironmentTransformModifier<A>;
  uint64_t v28 = v40;
  swift_getWitnessTable();
  unint64_t v29 = v41;
  static ViewBuilder.buildExpression<A>(_:)(v27);
  unint64_t v30 = *(void (**)(unsigned char *, uint64_t))(v44 + 8);
  v30(v27, v28);
  static ViewBuilder.buildExpression<A>(_:)(v29);
  return ((uint64_t (*)(unsigned char *, uint64_t))v30)(v29, v28);
}

uint64_t outlined consume of Environment<AppIntentExecutor?>.Content(uint64_t result, uint64_t a2, char a3)
{
  if (a3) {
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(result);
  }
  else {
    return swift_release();
  }
}

uint64_t destroy for SearchPrimitiveModifier(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Text.Storage(*(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v3 + 16), *(unsigned char *)(v3 + 24));
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v41 = v5 + 8;
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 + 40 + v3) & ~v6;
  unint64_t v37 = *(void (**)(uint64_t))(v5 + 8);
  uint64_t v38 = v4;
  v37(v7);
  uint64_t v8 = *(void *)(v41 + 56);
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = v11 | 7;
  uint64_t v33 = v8;
  uint64_t v13 = ((v11 | 7) + v8 + v7) & ~(v11 | 7);
  swift_release();
  swift_release();
  uint64_t v40 = *(void (**)(unint64_t, uint64_t))(v10 + 8);
  v40((v11 + 8 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v11, v9);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v32 = v14 + ((v11 + 16) & ~v11);
  unint64_t v15 = (v32 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v16 = *(unsigned __int8 *)(v15 + 17);
  if (v16 >= 2) {
    unsigned int v16 = *(_DWORD *)v15 + 2;
  }
  uint64_t v35 = ~v6;
  uint64_t v36 = v6;
  uint64_t v17 = ~v12;
  uint64_t v39 = ~v11;
  if (v16 == 1) {
    swift_release();
  }
  swift_release();
  v40((v11 + 9 + ((v12 + 18 + v15) & v17)) & v39, v9);
  uint64_t v18 = v14 + ((v11 + 9) & v39);
  unint64_t v19 = v11 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v20 = (v18 & 0xFFFFFFFFFFFFFFFCLL) + ((v11 + 16) & v19);
  swift_release();
  unint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 24;
  uint64_t v22 = (unsigned __int8 *)(((v12 | v6)
                           + a1
                           + v21
                           + ((v12 + 18 + ((((((v6 + 40) & v35) + v33 + v12) & v17 | 7) + v32) & 0xFFFFFFFFFFFFFFF8)) & v17)) & ~(v12 | v6));
  if (v20 + 9 <= v21) {
    unint64_t v23 = (v18 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  else {
    unint64_t v23 = v20 + 9;
  }
  unsigned int v24 = v22[v23];
  unsigned int v25 = v24 - 2;
  if (v24 >= 2)
  {
    if (v23 <= 3) {
      uint64_t v26 = v23;
    }
    else {
      uint64_t v26 = 4;
    }
    switch(v26)
    {
      case 1:
        int v27 = *v22;
        goto LABEL_17;
      case 2:
        int v27 = *(unsigned __int16 *)v22;
        goto LABEL_17;
      case 3:
        int v27 = *(unsigned __int16 *)v22 | (v22[2] << 16);
        goto LABEL_17;
      case 4:
        int v27 = *(_DWORD *)v22;
LABEL_17:
        int v28 = (v27 | (v25 << (8 * v23))) + 2;
        unsigned int v24 = v27 + 2;
        if (v23 < 4) {
          unsigned int v24 = v28;
        }
        break;
      default:
        break;
    }
  }
  if (v24 == 1)
  {
    swift_release();
    swift_release();
    v40((v11 + ((((v11 + 8 + ((unint64_t)(v22 + 15) & 0xFFFFFFFFFFFFFFF8)) & v19) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v39, v9);
  }
  else
  {
    v40((unint64_t)&v22[v11 + 9] & v39, v9);
    swift_release();
  }
  unint64_t v29 = (unint64_t)&v22[v23 + 8] & 0xFFFFFFFFFFFFFFF8;
  unsigned int v30 = *(unsigned __int8 *)(v29 + 17);
  if (v30 >= 2) {
    unsigned int v30 = *(_DWORD *)v29 + 2;
  }
  if (v30 == 1) {
    swift_release();
  }
  swift_release();

  return ((uint64_t (*)(unint64_t, uint64_t))v37)((v36 + v29 + 18) & v35, v38);
}

uint64_t SearchPrimitiveModifier.MakeDefaultView.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v20 = a2;
  unint64_t v21 = a3;
  char v3 = BYTE4(a1);
  uint64_t v19 = type metadata accessor for SearchField();
  uint64_t v4 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v6 = &v17[-v5];
  uint64_t v7 = type metadata accessor for SearchPrimitiveModifier();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v17[-v9];
  char v24 = v3 & 1;
  if (v3) {
    int v11 = 1;
  }
  else {
    int v11 = *(unsigned __int8 *)AGGraphGetValue() ^ 1;
  }
  int v18 = v11;
  char v23 = v3 & 1;
  SearchPrimitiveModifier.MakeDefaultView.modifier.getter((uint64_t)v10);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v4 + 16))(v6, &v10[*(int *)(v7 + 36)], v19);
  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  char v22 = v3 & 1;
  char Default = specialized SearchPrimitiveModifier.MakeDefaultView.forwardEnv.getter();
  uint64_t v14 = v13;
  SearchPrimitiveModifier.DefaultSearchView.init(shouldUse:searchField:forwardEnv:)(v18 & 1, (uint64_t)v6, Default & 1, v13, v15, v21);
  return outlined copy of AppIntentExecutor?(v14);
}

unint64_t initializeWithCopy for SearchPrimitiveModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  char v8 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  outlined copy of Text.Storage(v6, v7, v8);
  *(void *)(v4 + 8) = v6;
  *(void *)(v4 + 16) = v7;
  *(unsigned char *)(v4 + 24) = v8;
  *(void *)(v4 + 32) = *(void *)(v5 + 32);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  int v11 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16);
  uint64_t v12 = v10 + 16;
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = (v13 + 40 + v4) & ~v13;
  uint64_t v85 = v13 + 40;
  uint64_t v95 = v13;
  uint64_t v15 = (v13 + 40 + v5) & ~v13;
  swift_bridgeObjectRetain();
  v87 = v11;
  uint64_t v88 = v9;
  v11(v14, v15, v9);
  uint64_t v16 = *(void *)(v12 + 48);
  uint64_t v17 = type metadata accessor for AttributedString();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  uint64_t v20 = v18 + 16;
  uint64_t v21 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v22 = v21 | 7;
  uint64_t v94 = v16;
  uint64_t v23 = (v21 | 7) + v16;
  char v24 = (void *)((v23 + v14) & ~(v21 | 7));
  unsigned int v25 = (void *)((v23 + v15) & ~(v21 | 7));
  *char v24 = *v25;
  uint64_t v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v27 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v26 = *v27;
  uint64_t v28 = ((unint64_t)v26 + v21 + 8) & ~v21;
  uint64_t v83 = v21 + 8;
  uint64_t v29 = ((unint64_t)v27 + v21 + 8) & ~v21;
  swift_retain();
  swift_retain();
  v91 = v19;
  uint64_t v92 = v17;
  v19(v28, v29, v17);
  uint64_t v90 = *(void *)(v20 + 48);
  uint64_t v84 = v90 + ((v21 + 16) & ~v21);
  unint64_t v30 = ((unint64_t)v24 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = ((unint64_t)v25 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v32 = *(unsigned __int8 *)(v31 + 17);
  if (v32 >= 2) {
    unsigned int v32 = *(_DWORD *)v31 + 2;
  }
  uint64_t v93 = ~v95;
  uint64_t v33 = ~v22;
  uint64_t v34 = ~v21;
  if (v32 == 1)
  {
    *(void *)unint64_t v30 = *(void *)v31;
    *(void *)(v30 + 8) = *(void *)(v31 + 8);
    *(unsigned char *)(v30 + 16) = *(unsigned char *)(v31 + 16);
    swift_retain();
    char v35 = 1;
  }
  else
  {
    char v35 = 0;
    *(unsigned char *)unint64_t v30 = *(unsigned char *)v31;
    *(void *)(v30 + 8) = *(void *)(v31 + 8);
  }
  swift_retain();
  *(unsigned char *)(v30 + 17) = v35;
  uint64_t v36 = (v22 + 18 + v30) & v33;
  uint64_t v37 = (v22 + 18 + v31) & v33;
  *(unsigned char *)uint64_t v36 = *(unsigned char *)v37;
  *(unsigned char *)(v36 | 1) = *(unsigned char *)(v37 | 1);
  *(unsigned char *)(v36 | 2) = *(unsigned char *)(v37 | 2);
  *(unsigned char *)(v36 | 3) = *(unsigned char *)(v37 | 3);
  uint64_t v38 = v36 | 4;
  int v39 = *(_DWORD *)(v37 | 4);
  *(unsigned char *)(v38 + 4) = *(unsigned char *)((v37 | 4) + 4);
  *(_DWORD *)uint64_t v38 = v39;
  uint64_t v40 = v21 + 9;
  uint64_t v41 = (v21 + 9 + v37) & v34;
  v91((v21 + 9 + v36) & v34, v41, v92);
  uint64_t v42 = ((v21 + 9 + v36) & v34) + v90;
  *(unsigned char *)uint64_t v42 = *(unsigned char *)(v41 + v90);
  v42 &= 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v43 = (v41 + v90) & 0xFFFFFFFFFFFFFFFCLL;
  int v44 = *(_DWORD *)(v43 + 4);
  *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
  *(_DWORD *)(v42 + 4) = v44;
  uint64_t v45 = v90 + ((v21 + 9) & v34);
  unint64_t v46 = v21 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v47 = (v45 & 0xFFFFFFFFFFFFFFFCLL) + ((v21 + 16) & v46);
  uint64_t v48 = v45 + 16;
  *(void *)((v45 + 16 + v36) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v45 + 16 + v37) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v49 = (v45 & 0xFFFFFFFFFFFFFFF8) + 24;
  uint64_t v50 = v22 | v95;
  unint64_t v51 = ((v22 + 18 + (((((v85 & v93) + v94 + v22) & v33 | 7) + v84) & 0xFFFFFFFFFFFFFFF8)) & v33) + v49 + (v22 | v95);
  unint64_t v52 = (v51 + a1) & ~(v22 | v95);
  unint64_t v53 = (v51 + a2) & ~v50;
  unint64_t v54 = v47 + 9;
  if (v54 <= v49) {
    unint64_t v55 = v49;
  }
  else {
    unint64_t v55 = v54;
  }
  unsigned int v56 = *(unsigned __int8 *)(v53 + v55);
  swift_retain();
  if (v56 >= 2)
  {
    if (v55 <= 3) {
      uint64_t v57 = v55;
    }
    else {
      uint64_t v57 = 4;
    }
    switch(v57)
    {
      case 1:
        int v58 = *(unsigned __int8 *)v53;
        if (v55 >= 4) {
          goto LABEL_23;
        }
        goto LABEL_19;
      case 2:
        int v58 = *(unsigned __int16 *)v53;
        if (v55 >= 4) {
          goto LABEL_23;
        }
        goto LABEL_19;
      case 3:
        int v58 = *(unsigned __int16 *)v53 | (*(unsigned __int8 *)(v53 + 2) << 16);
        if (v55 < 4) {
          goto LABEL_19;
        }
        goto LABEL_23;
      case 4:
        int v58 = *(_DWORD *)v53;
        if (v55 < 4)
        {
LABEL_19:
          unsigned int v56 = (v58 | ((v56 - 2) << (8 * v55))) + 2;
          break;
        }
LABEL_23:
        if (v58 != -1) {
          goto LABEL_24;
        }
        goto LABEL_21;
      default:
        break;
    }
  }
  if (v56 == 1)
  {
LABEL_21:
    *(void *)unint64_t v52 = *(void *)v53;
    uint64_t v59 = (void *)((v52 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v60 = (void *)((v53 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v59 = *v60;
    unint64_t v61 = ((unint64_t)v59 + v83) & v46;
    unint64_t v62 = ((unint64_t)v60 + v83) & v46;
    unint64_t v63 = v62 + 7;
    *(unsigned char *)unint64_t v61 = *(unsigned char *)v62;
    *(unsigned char *)(v61 | 1) = *(unsigned char *)(v62 | 1);
    *(unsigned char *)(v61 | 2) = *(unsigned char *)(v62 | 2);
    *(unsigned char *)(v61 | 3) = *(unsigned char *)(v62 | 3);
    unint64_t v64 = (v61 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    int v65 = *(_DWORD *)(v63 & 0xFFFFFFFFFFFFFFFCLL);
    *(unsigned char *)(v64 + 4) = *(unsigned char *)((v63 & 0xFFFFFFFFFFFFFFFCLL) + 4);
    *(_DWORD *)unint64_t v64 = v65;
    uint64_t v66 = (v21 + 5 + v64) & v34;
    unint64_t v67 = (v21 + 5 + (v63 & 0xFFFFFFFFFFFFFFFCLL)) & v34;
    swift_retain();
    swift_retain();
    v91(v66, v67, v92);
    *(unsigned char *)(v66 + v90) = *(unsigned char *)(v67 + v90);
    unint64_t v68 = (v66 + v90) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v69 = (v67 + v90) & 0xFFFFFFFFFFFFFFFCLL;
    int v70 = *(_DWORD *)(v69 + 4);
    *(unsigned char *)(v68 + 8) = *(unsigned char *)(v69 + 8);
    *(_DWORD *)(v68 + 4) = v70;
    char v71 = 1;
  }
  else
  {
LABEL_24:
    *(unsigned char *)unint64_t v52 = *(unsigned char *)v53;
    *(unsigned char *)(v52 | 1) = *(unsigned char *)(v53 | 1);
    *(unsigned char *)(v52 | 2) = *(unsigned char *)(v53 | 2);
    *(unsigned char *)(v52 | 3) = *(unsigned char *)(v53 | 3);
    uint64_t v72 = v52 | 4;
    int v73 = *(_DWORD *)(v53 | 4);
    *(unsigned char *)(v72 + 4) = *(unsigned char *)((v53 | 4) + 4);
    *(_DWORD *)uint64_t v72 = v73;
    unint64_t v74 = (v40 + v53) & v34;
    v91((v40 + v52) & v34, v74, v92);
    uint64_t v75 = ((v40 + v52) & v34) + v90;
    *(unsigned char *)uint64_t v75 = *(unsigned char *)(v74 + v90);
    v75 &= 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v76 = (v74 + v90) & 0xFFFFFFFFFFFFFFFCLL;
    int v77 = *(_DWORD *)(v76 + 4);
    *(unsigned char *)(v75 + 8) = *(unsigned char *)(v76 + 8);
    *(_DWORD *)(v75 + 4) = v77;
    *(void *)((v48 + v52) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v48 + v53) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    char v71 = 0;
  }
  *(unsigned char *)(v52 + v55) = v71;
  unint64_t v78 = (v55 + 8 + v52) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v79 = (v55 + 8 + v53) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v80 = *(unsigned __int8 *)(v79 + 17);
  if (v80 >= 2) {
    unsigned int v80 = *(_DWORD *)v79 + 2;
  }
  if (v80 == 1)
  {
    *(void *)unint64_t v78 = *(void *)v79;
    *(void *)(v78 + 8) = *(void *)(v79 + 8);
    *(unsigned char *)(v78 + 16) = *(unsigned char *)(v79 + 16);
    swift_retain();
    char v81 = 1;
  }
  else
  {
    char v81 = 0;
    *(unsigned char *)unint64_t v78 = *(unsigned char *)v79;
    *(void *)(v78 + 8) = *(void *)(v79 + 8);
  }
  swift_retain();
  *(unsigned char *)(v78 + 17) = v81;
  v87((v95 + 18 + v78) & v93, (v95 + 18 + v79) & v93, v88);
  *(unsigned char *)(((v95 + 18 + v78) & v93) + v94) = *(unsigned char *)(((v95 + 18 + v79) & v93) + v94);
  return a1;
}

uint64_t type metadata accessor for SearchPrimitiveModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SearchPrimitiveModifier.MakeDefaultView.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SearchPrimitiveModifier();
  uint64_t Value = AGGraphGetValue();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t specialized SearchPrimitiveModifier.MakeDefaultView.forwardEnv.getter()
{
  return *(unsigned __int8 *)AGGraphGetValue();
}

uint64_t SearchPrimitiveModifier.DefaultSearchView.init(shouldUse:searchField:forwardEnv:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  *a6 = a1;
  uint64_t v11 = type metadata accessor for SearchPrimitiveModifier.DefaultSearchView();
  uint64_t v12 = &a6[*(int *)(v11 + 36)];
  uint64_t v13 = type metadata accessor for SearchField();
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12, a2, v13);
  uint64_t v15 = &a6[*(int *)(v11 + 40)];
  unsigned char *v15 = a3;
  *((void *)v15 + 1) = a4;
  *((void *)v15 + 2) = a5;
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SubmitScopeModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SubmitScopeModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SubmitScopeModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OnSubmitModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SubmitScopeModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>>, &lazy cache variable for type metadata for _ViewModifier_Content<SubmitScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type SubmitScopeModifier and conformance SubmitScopeModifier);
    lazy protocol witness table accessor for type _ViewModifier_Content<SubmitScopeModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<SubmitScopeModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<SubmitScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type SubmitScopeModifier and conformance SubmitScopeModifier);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TriggerSubmitAction?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SubmitScopeModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.triggerSubmission : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.triggerSubmission.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t EnvironmentValues.triggerSubmission.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ViewModifier_Content<SubmitScopeModifier> and conformance _ViewModifier_Content<A>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _ViewModifier_Content<OnSubmitModifier>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<OnSubmitModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  if (!*a2)
  {
    type metadata accessor for _ViewModifier_Content<OnSubmitModifier>(255, a3, a4);
    type metadata accessor for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>();
    unint64_t v5 = type metadata accessor for ModifiedContent();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<OnSubmitModifier>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for _ViewModifier_Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SubmitScopeModifier and conformance SubmitScopeModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type SubmitScopeModifier and conformance SubmitScopeModifier;
  if (!lazy protocol witness table cache variable for type SubmitScopeModifier and conformance SubmitScopeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubmitScopeModifier and conformance SubmitScopeModifier);
  }
  return result;
}

uint64_t SearchPrimitiveModifier.SearchConfigModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for _ViewModifier_Content();
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v18 = *(void *)(a1 + 16);
  type metadata accessor for SearchField();
  _s7SwiftUI5StateVySbGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>();
  uint64_t v5 = type metadata accessor for ModifiedContent();
  unint64_t v6 = lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v34 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v32 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TriggerSubmitAction?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TriggerSubmitAction?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>);
  int v27 = &type metadata for EnvironmentValues.SearchField;
  uint64_t v28 = v5;
  unint64_t v29 = v6;
  uint64_t v30 = swift_getWitnessTable();
  type metadata accessor for StaticSourceWriter();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v17 - v12;
  uint64_t v22 = v18;
  uint64_t v23 = v4;
  uint64_t v24 = v19;
  uint64_t v14 = swift_getWitnessTable();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for EnvironmentValues.SearchField, (void (*)(double))partial apply for closure #1 in SearchPrimitiveModifier.SearchConfigModifier.body(content:), (uint64_t)v21, v3, (uint64_t)&type metadata for EnvironmentValues.SearchField, v5, v14);
  uint64_t v25 = v14;
  uint64_t v26 = &protocol witness table for StaticSourceWriter<A, B>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v10);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, v7);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>)
  {
    type metadata accessor for TriggerSubmitAction?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TriggerSubmitAction?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField);
  }
  return result;
}

void type metadata accessor for TriggerSubmitAction?()
{
  if (!lazy cache variable for type metadata for TriggerSubmitAction?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TriggerSubmitAction?);
    }
  }
}

uint64_t SearchModifier.searchField.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Binding<SearchFieldState>(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = &v18[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  SearchModifier.adjustedState.getter(a1, v12);
  uint64_t v13 = v2 + *(int *)(a1 + 48);
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *(void *)(v13 + 8);
  if (*(unsigned char *)(v13 + 17))
  {
    int v16 = *(unsigned char *)(v13 + 16) & 1;
    swift_retain();
    swift_retain();
  }
  else
  {
    v18[8] = v14 & 1;
    uint64_t v19 = v15;
    _s7SwiftUI5StateVySbGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
    State.projectedValue.getter();
    uint64_t v14 = v20;
    uint64_t v15 = v21;
    int v16 = v22;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + *(int *)(a1 + 40), v6);
  return SearchField.init(state:isPresented:control:)((uint64_t)v12, v14, v15, v16, (uint64_t)v9, v6, a2);
}

uint64_t SearchModifier.environmentModifier.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  SearchModifier.adjustedState.getter(a1, a2);
  uint64_t v5 = (uint64_t)&v2[*(int *)(a1 + 44)];
  uint64_t v6 = type metadata accessor for SearchEnvironmentWritingModifier(0);
  uint64_t result = _s7SwiftUI7BindingVy10Foundation16AttributedStringVGWOcTm_0(v5, (uint64_t)a2 + *(int *)(v6 + 20), (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
  *((unsigned char *)a2 + *(int *)(v6 + 24)) = *v2;
  return result;
}

uint64_t SearchField.init(state:isPresented:control:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v26 = a5;
  uint64_t v27 = a2;
  int v29 = a4;
  uint64_t v28 = a3;
  uint64_t v25 = a1;
  uint64_t v9 = type metadata accessor for SearchFieldState(0);
  uint64_t v10 = v9 - 8;
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v12 = 2;
  uint64_t v13 = self;
  id v14 = objc_msgSend(v13, sel_currentTraitCollection);
  id v15 = objc_msgSend(v14, sel_horizontalSizeClass);

  id v16 = objc_msgSend(v13, sel_currentTraitCollection);
  id v17 = objc_msgSend(v16, sel_userInterfaceIdiom);

  char v18 = specialized SearchSuggestionsPlacement.Role.init(sizeClass:idiom:placement:)((uint64_t)v15, (uint64_t)v17, 2u);
  v12[1] = (v18 == 2) | v18 & 1;
  *((_WORD *)v12 + 1) = 2;
  *((_DWORD *)v12 + 1) = 0;
  v12[8] = 1;
  AttributedString.init()();
  v12[*(int *)(v10 + 48)] = 0;
  uint64_t v19 = &v12[*(int *)(v10 + 52)];
  *(_DWORD *)uint64_t v19 = 0;
  v19[4] = 0;
  property wrapper backing initializer of SearchField.state((uint64_t)v12, a7);
  uint64_t v20 = (int *)type metadata accessor for SearchField();
  uint64_t v21 = a7 + v20[9];
  *(void *)uint64_t v21 = 0;
  *(void *)(v21 + 8) = 0;
  *(_WORD *)(v21 + 16) = 0;
  *(unsigned char *)(a7 + v20[11]) = 0;
  _s7SwiftUI16SearchFieldStateVWOhTm_4(a7, (uint64_t (*)(void))type metadata accessor for StateOrBinding<SearchFieldState>);
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_1(v25, a7, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  type metadata accessor for StateOrBinding<SearchFieldState>(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7 + v20[10], v26, a6);
  uint64_t result = outlined consume of StateOrBinding<Bool>(*(void *)v21, *(void *)(v21 + 8), *(unsigned __int8 *)(v21 + 16), *(unsigned char *)(v21 + 17));
  uint64_t v23 = v28;
  *(void *)uint64_t v21 = v27;
  *(void *)(v21 + 8) = v23;
  *(unsigned char *)(v21 + 16) = v29;
  *(unsigned char *)(v21 + 17) = 1;
  return result;
}

uint64_t property wrapper backing initializer of SearchField.state@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _s7SwiftUI16SearchFieldStateVWOcTm_0(a1, a2, type metadata accessor for SearchFieldState);
  type metadata accessor for State<SearchFieldState>(0);
  *(void *)(a2 + *(int *)(v4 + 28)) = 0;
  type metadata accessor for StateOrBinding<SearchFieldState>(0);
  swift_storeEnumTagMultiPayload();
  return _s7SwiftUI16SearchFieldStateVWOhTm_4(a1, type metadata accessor for SearchFieldState);
}

uint64_t getEnumTagSinglePayload for TextField(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  _ss8RangeSetVySS5IndexVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  int v12 = *(_DWORD *)(v10 + 80);
  unint64_t v13 = *(void *)(v10 + 64);
  if (v13 <= 0x10) {
    unint64_t v13 = 16;
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v8) {
    goto LABEL_25;
  }
  unint64_t v14 = v13
      + (((v12 & 0xF8) + 23) & ~(v12 & 0xF8 | 7))
      + (((v12 & 0xF8 | 7)
        + ((((((v11 + 33) & ~v11) + *(void *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
        + 109) & ~(v12 & 0xF8 | 7))
      + 2;
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v18 = ((a2 - v8 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v18 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v18 < 2)
    {
LABEL_25:
      if ((v7 & 0x80000000) != 0)
      {
        uint64_t v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
        return v21(((unint64_t)a1 + v11 + 33) & ~v11, v7, v5);
      }
      else
      {
        unint64_t v20 = *((void *)a1 + 1);
        if (v20 >= 0xFFFFFFFF) {
          LODWORD(v20) = -1;
        }
        return (v20 + 1);
      }
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_25;
  }
LABEL_17:
  int v19 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v19 = 0;
  }
  if (v14)
  {
    if (v14 > 3) {
      LODWORD(v14) = 4;
    }
    switch((int)v14)
    {
      case 2:
        LODWORD(v14) = *a1;
        break;
      case 3:
        LODWORD(v14) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v14) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v14) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v14 | v19) + 1;
}

uint64_t initializeWithCopy for SearchField(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AttributedString();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = ((v7 + 9) & ~v7) + v8;
  unint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  unint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 24;
  uint64_t v12 = v7 | 3;
  if (v10 + ((v7 + 16) & ~(v7 | 3)) <= v11) {
    unint64_t v13 = v11;
  }
  else {
    unint64_t v13 = v10 + ((v7 + 16) & ~(v7 | 3));
  }
  unsigned int v14 = a2[v13];
  unsigned int v15 = v14 - 2;
  if (v14 >= 2)
  {
    if (v13 <= 3) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a2;
        if (v13 < 4) {
          goto LABEL_14;
        }
        goto LABEL_16;
      case 2:
        int v17 = *(unsigned __int16 *)a2;
        if (v13 >= 4) {
          goto LABEL_16;
        }
        goto LABEL_14;
      case 3:
        int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v13 < 4) {
          goto LABEL_14;
        }
        goto LABEL_16;
      case 4:
        int v17 = *(_DWORD *)a2;
        if (v13 < 4) {
LABEL_14:
        }
          unsigned int v14 = (v17 | (v15 << (8 * v13))) + 2;
        else {
LABEL_16:
        }
          unsigned int v14 = v17 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v18 = ~v7;
  if (v14 == 1)
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v19 = ~v12;
    unint64_t v20 = (void *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = (void *)((unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v20 = *v21;
    unsigned __int8 v22 = (char *)v20 + v12;
    uint64_t v23 = (char *)v21 + v12;
    uint64_t v24 = (unint64_t)(v22 + 8) & v19;
    uint64_t v25 = (unint64_t)(v23 + 8) & v19;
    *(unsigned char *)uint64_t v24 = *(unsigned char *)v25;
    *(unsigned char *)(v24 | 1) = *(unsigned char *)(v25 | 1);
    *(unsigned char *)(v24 | 2) = *(unsigned char *)(v25 | 2);
    *(unsigned char *)(v24 | 3) = *(unsigned char *)(v25 | 3);
    unint64_t v26 = (v24 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v27 = (v25 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v22) = *(_DWORD *)v27;
    *(unsigned char *)(v26 + 4) = *(unsigned char *)(v27 + 4);
    *(_DWORD *)unint64_t v26 = v22;
    uint64_t v28 = v7 + 5;
    unint64_t v29 = (v28 + v26) & v18;
    unint64_t v30 = (v28 + v27) & v18;
    uint64_t v31 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    uint64_t v32 = v5;
    swift_retain();
    swift_retain();
    v31(v29, v30, v32);
    *(unsigned char *)(v29 + v8) = *(unsigned char *)(v30 + v8);
    unint64_t v33 = (v29 + v8) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v34 = (v30 + v8) & 0xFFFFFFFFFFFFFFFCLL;
    int v35 = *(_DWORD *)(v34 + 4);
    *(unsigned char *)(v33 + 8) = *(unsigned char *)(v34 + 8);
    *(_DWORD *)(v33 + 4) = v35;
    char v36 = 1;
  }
  else
  {
    *(unsigned char *)a1 = *a2;
    *(unsigned char *)(a1 + 1) = a2[1];
    *(unsigned char *)(a1 + 2) = a2[2];
    *(unsigned char *)(a1 + 3) = a2[3];
    unint64_t v37 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v38 = (unint64_t)(a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    int v39 = *(_DWORD *)v38;
    *(unsigned char *)(v37 + 4) = *(unsigned char *)(v38 + 4);
    *(_DWORD *)unint64_t v37 = v39;
    uint64_t v40 = (v37 + v7 + 5) & v18;
    uint64_t v41 = (v38 + v7 + 5) & v18;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v40, v41, v5);
    *(unsigned char *)(v40 + v8) = *(unsigned char *)(v41 + v8);
    unint64_t v42 = (v40 + v8) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v43 = (v41 + v8) & 0xFFFFFFFFFFFFFFFCLL;
    int v44 = *(_DWORD *)(v43 + 4);
    *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
    *(_DWORD *)(v42 + 4) = v44;
    *(void *)((a1 + 7 + v10) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    char v36 = 0;
  }
  *(unsigned char *)(a1 + v13) = v36;
  unint64_t v45 = (v13 + 8 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v46 = (unint64_t)&a2[v13 + 8] & 0xFFFFFFFFFFFFFFF8;
  unsigned int v47 = *(unsigned __int8 *)(v46 + 17);
  if (v47 >= 2) {
    unsigned int v47 = *(_DWORD *)v46 + 2;
  }
  if (v47 == 1)
  {
    *(void *)unint64_t v45 = *(void *)v46;
    *(void *)(v45 + 8) = *(void *)(v46 + 8);
    *(unsigned char *)(v45 + 16) = *(unsigned char *)(v46 + 16);
    swift_retain();
    char v48 = 1;
  }
  else
  {
    char v48 = 0;
    *(unsigned char *)unint64_t v45 = *(unsigned char *)v46;
    *(void *)(v45 + 8) = *(void *)(v46 + 8);
  }
  swift_retain();
  *(unsigned char *)(v45 + 17) = v48;
  uint64_t v49 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v50 = v49 + 16;
  uint64_t v51 = *(unsigned __int8 *)(v49 + 80);
  uint64_t v52 = (v45 + v51 + 18) & ~v51;
  uint64_t v53 = (v46 + v51 + 18) & ~v51;
  (*(void (**)(uint64_t, uint64_t))(v49 + 16))(v52, v53);
  *(unsigned char *)(v52 + *(void *)(v50 + 48)) = *(unsigned char *)(v53 + *(void *)(v50 + 48));
  return a1;
}

uint64_t destroy for SearchModifier(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Text.Storage(*(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v3 + 16), *(unsigned char *)(v3 + 24));
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (v3 + *(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v8 = type metadata accessor for AttributedString();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v6 + v7 + (v10 | 7)) & ~(v10 | 7);
  swift_release();
  swift_release();
  uint64_t v12 = *(void (**)(unint64_t, uint64_t))(v9 + 8);
  v12((v10 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v10, v8);
  unint64_t v13 = (((v10 + 16) & ~v10) + *(void *)(v9 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v14 = *(unsigned __int8 *)(v13 + 17);
  if (v14 >= 2) {
    unsigned int v14 = *(_DWORD *)v13 + 2;
  }
  if (v14 == 1) {
    swift_release();
  }
  swift_release();
  v12((v10 + 9 + (((v10 | 7) + v13 + 18) & ~(v10 | 7))) & ~v10, v8);

  return swift_release();
}

unint64_t initializeWithCopy for SearchModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  char v8 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  outlined copy of Text.Storage(v6, v7, v8);
  *(void *)(v4 + 8) = v6;
  *(void *)(v4 + 16) = v7;
  *(unsigned char *)(v4 + 24) = v8;
  *(void *)(v4 + 32) = *(void *)(v5 + 32);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  uint64_t v12 = v10 + 16;
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = (v13 + 40 + v4) & ~v13;
  uint64_t v15 = (v13 + 40 + v5) & ~v13;
  swift_bridgeObjectRetain();
  v11(v14, v15, v9);
  uint64_t v16 = *(void *)(v12 + 48);
  uint64_t v17 = type metadata accessor for AttributedString();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  uint64_t v20 = v18 + 16;
  uint64_t v21 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v22 = v21 | 7;
  uint64_t v23 = (v21 | 7) + v16;
  uint64_t v24 = (void *)((v23 + v14) & ~(v21 | 7));
  uint64_t v25 = (void *)((v23 + v15) & ~(v21 | 7));
  *uint64_t v24 = *v25;
  unint64_t v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v27 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v26 = *v27;
  uint64_t v28 = ((unint64_t)v26 + v21 + 8) & ~v21;
  uint64_t v29 = ((unint64_t)v27 + v21 + 8) & ~v21;
  swift_retain();
  swift_retain();
  char v48 = v19;
  uint64_t v49 = v17;
  v19(v28, v29, v17);
  uint64_t v30 = *(void *)(v20 + 48);
  uint64_t v31 = v30 + ((v21 + 16) & ~v21) + 7;
  unint64_t v32 = ((unint64_t)v24 + v31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = ((unint64_t)v25 + v31) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v34 = *(unsigned __int8 *)(v33 + 17);
  if (v34 >= 2) {
    unsigned int v34 = *(_DWORD *)v33 + 2;
  }
  uint64_t v35 = ~v22;
  uint64_t v36 = ~v21;
  if (v34 == 1)
  {
    *(void *)unint64_t v32 = *(void *)v33;
    *(void *)(v32 + 8) = *(void *)(v33 + 8);
    *(unsigned char *)(v32 + 16) = *(unsigned char *)(v33 + 16);
    swift_retain();
    char v37 = 1;
  }
  else
  {
    char v37 = 0;
    *(unsigned char *)unint64_t v32 = *(unsigned char *)v33;
    *(void *)(v32 + 8) = *(void *)(v33 + 8);
  }
  swift_retain();
  *(unsigned char *)(v32 + 17) = v37;
  uint64_t v38 = (v22 + 18 + v32) & v35;
  uint64_t v39 = (v22 + 18 + v33) & v35;
  *(unsigned char *)uint64_t v38 = *(unsigned char *)v39;
  *(unsigned char *)(v38 | 1) = *(unsigned char *)(v39 | 1);
  *(unsigned char *)(v38 | 2) = *(unsigned char *)(v39 | 2);
  *(unsigned char *)(v38 | 3) = *(unsigned char *)(v39 | 3);
  uint64_t v40 = v38 | 4;
  int v41 = *(_DWORD *)(v39 | 4);
  *(unsigned char *)(v40 + 4) = *(unsigned char *)((v39 | 4) + 4);
  *(_DWORD *)uint64_t v40 = v41;
  uint64_t v42 = (v21 + 9 + v38) & v36;
  uint64_t v43 = (v21 + 9 + v39) & v36;
  v48(v42, v43, v49);
  *(unsigned char *)(v42 + v30) = *(unsigned char *)(v43 + v30);
  unint64_t v44 = (v42 + v30) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v45 = (v43 + v30) & 0xFFFFFFFFFFFFFFFCLL;
  int v46 = *(_DWORD *)(v45 + 4);
  *(unsigned char *)(v44 + 8) = *(unsigned char *)(v45 + 8);
  *(_DWORD *)(v44 + 4) = v46;
  *(void *)((v30 + ((v21 + 9) & v36) + 16 + v38) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v30
                                                                                        + ((v21 + 9) & v36)
                                                                                        + 16
                                                                                        + v39) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

void destroy for TextField(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  unint64_t v7 = (v6 + *(void *)(v5 + 56)) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v7 + 32) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)(v7 + 8), *(void *)(v7 + 16), *(unsigned char *)(v7 + 24));
    swift_bridgeObjectRelease();
  }
  unint64_t v8 = (v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v9 = *(unsigned __int8 *)(v8 + 108);
  if (v9 >= 2) {
    unsigned int v9 = *(_DWORD *)v8 + 2;
  }
  if (v9 != 1)
  {
    swift_bridgeObjectRelease();
    if (*(void *)(v8 + 16))
    {
      swift_release();
      swift_release();
    }
    if (*(void *)(v8 + 48))
    {
      swift_release();
      swift_release();
    }
    goto LABEL_14;
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v8 + 32))
  {
    swift_release();
    swift_release();
  }
  if (*(void *)(v8 + 64))
  {
    swift_release();
LABEL_14:
    swift_release();
  }
  _ss8RangeSetVySS5IndexVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  uint64_t v13 = (void *)((((v8 + v12 + 109) & ~v12) + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v13 >= 0xFFFFFFFFuLL)
  {
    uint64_t v14 = *(void *)(v11 + 64) <= 0x10uLL ? 16 : *(void *)(v11 + 64);
    uint64_t v16 = *(void *)(v10 - 8);
    swift_release();
    swift_release();
    if (*(unsigned char *)((((unint64_t)v13 + v12 + 8) & ~v12) + v14) == 1)
    {
      uint64_t v15 = *(void (**)(void))(v16 + 8);
      v15();
    }
  }
}

uint64_t initializeWithCopy for TextField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a3 + 16);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  uint64_t v8 = *(void *)(v6 - 8) + 16;
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  uint64_t v10 = (v9 + 33 + a1) & ~v9;
  uint64_t v11 = (v9 + 33 + a2) & ~v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v7(v10, v11, v6);
  uint64_t v12 = *(void *)(v8 + 48);
  unint64_t v13 = v12 + v10;
  unint64_t v14 = v12 + v11;
  *(unsigned char *)unint64_t v13 = *(unsigned char *)v14;
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v17 = v14 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
  if (*(void *)((v14 & 0xFFFFFFFFFFFFFFF8) + 32) < 0xFFFFFFFFuLL)
  {
    long long v22 = *(_OWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 24);
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v18;
    *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24) = v22;
  }
  else
  {
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)((v14 & 0xFFFFFFFFFFFFFFF8) + 16);
    char v21 = *(unsigned char *)((v14 & 0xFFFFFFFFFFFFFFF8) + 24);
    outlined copy of Text.Storage(*(void *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8), v20, v21);
    *(void *)unint64_t v16 = v19;
    *(void *)(v16 + 8) = v20;
    *(unsigned char *)(v16 + 16) = v21;
    *(void *)(v16 + 24) = *(void *)(v18 + 24);
    swift_bridgeObjectRetain();
  }
  unint64_t v23 = (v15 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v17 + 47) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v25 = *(unsigned __int8 *)(v24 + 108);
  if (v25 >= 2) {
    unsigned int v25 = *(_DWORD *)v24 + 2;
  }
  if (v25 == 1)
  {
    *(void *)unint64_t v23 = *(void *)v24;
    *(void *)(v23 + 8) = *(void *)(v24 + 8);
    *(void *)(v23 + 16) = *(void *)(v24 + 16);
    *(void *)(v23 + 24) = *(void *)(v24 + 24);
    uint64_t v26 = *(void *)(v24 + 32);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v26)
    {
      uint64_t v27 = *(void *)(v24 + 40);
      *(void *)(v23 + 32) = v26;
      *(void *)(v23 + 40) = v27;
      uint64_t v28 = *(void *)(v24 + 56);
      *(void *)(v23 + 48) = *(void *)(v24 + 48);
      *(void *)(v23 + 56) = v28;
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v32 = *(_OWORD *)(v24 + 48);
      *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
      *(_OWORD *)(v23 + 48) = v32;
    }
    uint64_t v33 = *(void *)(v24 + 64);
    if (v33)
    {
      uint64_t v34 = *(void *)(v24 + 72);
      *(void *)(v23 + 64) = v33;
      *(void *)(v23 + 72) = v34;
      uint64_t v35 = *(void *)(v24 + 88);
      *(void *)(v23 + 80) = *(void *)(v24 + 80);
      *(void *)(v23 + 88) = v35;
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v40 = *(_OWORD *)(v24 + 80);
      *(_OWORD *)(v23 + 64) = *(_OWORD *)(v24 + 64);
      *(_OWORD *)(v23 + 80) = v40;
    }
    *(unsigned char *)(v23 + 96) = *(unsigned char *)(v24 + 96);
    int v41 = *(_DWORD *)(v24 + 100);
    *(unsigned char *)(v23 + 104) = *(unsigned char *)(v24 + 104);
    *(_DWORD *)(v23 + 100) = v41;
    *(unsigned char *)(v23 + 105) = *(unsigned char *)(v24 + 105);
    *(unsigned char *)(v23 + 106) = *(unsigned char *)(v24 + 106);
    *(unsigned char *)(v23 + 107) = *(unsigned char *)(v24 + 107);
    *(unsigned char *)(v23 + 108) = 1;
  }
  else
  {
    *(void *)unint64_t v23 = *(void *)v24;
    *(void *)(v23 + 8) = *(void *)(v24 + 8);
    uint64_t v29 = *(void *)(v24 + 16);
    swift_bridgeObjectRetain();
    if (v29)
    {
      uint64_t v30 = *(void *)(v24 + 24);
      *(void *)(v23 + 16) = v29;
      *(void *)(v23 + 24) = v30;
      uint64_t v31 = *(void *)(v24 + 40);
      *(void *)(v23 + 32) = *(void *)(v24 + 32);
      *(void *)(v23 + 40) = v31;
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v36 = *(_OWORD *)(v24 + 32);
      *(_OWORD *)(v23 + 16) = *(_OWORD *)(v24 + 16);
      *(_OWORD *)(v23 + 32) = v36;
    }
    uint64_t v37 = *(void *)(v24 + 48);
    if (v37)
    {
      uint64_t v38 = *(void *)(v24 + 56);
      *(void *)(v23 + 48) = v37;
      *(void *)(v23 + 56) = v38;
      uint64_t v39 = *(void *)(v24 + 72);
      *(void *)(v23 + 64) = *(void *)(v24 + 64);
      *(void *)(v23 + 72) = v39;
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v42 = *(_OWORD *)(v24 + 64);
      *(_OWORD *)(v23 + 48) = *(_OWORD *)(v24 + 48);
      *(_OWORD *)(v23 + 64) = v42;
    }
    *(unsigned char *)(v23 + 80) = *(unsigned char *)(v24 + 80);
    int v43 = *(_DWORD *)(v24 + 84);
    *(unsigned char *)(v23 + 88) = *(unsigned char *)(v24 + 88);
    *(_DWORD *)(v23 + 84) = v43;
    *(unsigned char *)(v23 + 89) = *(unsigned char *)(v24 + 89);
    *(unsigned char *)(v23 + 90) = *(unsigned char *)(v24 + 90);
    *(unsigned char *)(v23 + 91) = *(unsigned char *)(v24 + 91);
    *(void *)(v23 + 96) = *(void *)(v24 + 96);
    *(unsigned char *)(v23 + 108) = 0;
    swift_retain();
  }
  _ss8RangeSetVySS5IndexVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
  uint64_t v45 = v44;
  uint64_t v46 = *(void *)(v44 - 8);
  uint64_t v47 = v46;
  uint64_t v48 = *(_DWORD *)(v46 + 80) & 0xF8 | 7;
  uint64_t v49 = ~v48;
  uint64_t v50 = (void *)((v23 + v48 + 109) & ~v48);
  uint64_t v51 = (void *)((v24 + v48 + 109) & ~v48);
  unint64_t v52 = *(void *)(v46 + 64);
  if (v52 <= 0x10) {
    uint64_t v53 = 16;
  }
  else {
    uint64_t v53 = v52;
  }
  unint64_t v54 = (void *)(((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v54 < 0xFFFFFFFFuLL)
  {
    size_t v60 = ((v48 + 16) & v49) + v53 + 2;
LABEL_31:
    memcpy(v50, v51, v60);
    return a1;
  }
  *uint64_t v50 = *v51;
  unint64_t v55 = (void *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v55 = *v54;
  uint64_t v56 = v48 + 8;
  uint64_t v57 = (_OWORD *)(((unint64_t)v55 + v56) & v49);
  int v58 = (_OWORD *)(((unint64_t)v54 + v56) & v49);
  unsigned int v59 = *((unsigned __int8 *)v58 + v53);
  swift_retain();
  swift_retain();
  if (v59 > 1)
  {
    uint64_t v50 = v57;
    uint64_t v51 = v58;
    size_t v60 = v53 + 2;
    goto LABEL_31;
  }
  if (v59 == 1)
  {
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v47 + 16))(v57, v58, v45);
    char v61 = 1;
  }
  else
  {
    char v61 = 0;
    _OWORD *v57 = *v58;
  }
  *((unsigned char *)v57 + v53) = v61;
  *((unsigned char *)v57 + v53 + 1) = *((unsigned char *)v58 + v53 + 1);
  return a1;
}

void type metadata accessor for RangeSet<String.Index>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _ss8RangeSetVySS5IndexVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _ss8RangeSetVySS5IndexVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _ss8RangeSetVySS5IndexVGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance NavigationStateHost@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for NavigationStateHost();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t static ScrollEventStateReader._makeViewList(view:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  uint64_t v8 = a2[2];
  int v9 = *((_DWORD *)a2 + 6);
  int v10 = *((_DWORD *)a2 + 7);
  int v16 = *((_DWORD *)a2 + 9);
  int v17 = *((_DWORD *)a2 + 8);
  uint64_t v15 = a2[5];
  uint64_t v22 = a2[6];
  uint64_t v21 = a2[7];
  int v20 = *((_DWORD *)a2 + 16);
  uint64_t v19 = a2[9];
  char v18 = *((unsigned char *)a2 + 80);
  int v29 = *((_DWORD *)a2 + 2);
  int v7 = v29;
  uint64_t v30 = v8;
  int v31 = v9;
  int v32 = v10;
  int v33 = v17;
  int v34 = v16;
  uint64_t v35 = v15;
  int v11 = _GraphInputs.scrollPhaseState.getter();
  type metadata accessor for ScrollEventStateReader();
  type metadata accessor for _GraphValue();
  LODWORD(v28) = _GraphValue.value.getter();
  HIDWORD(v28) = v11;
  uint64_t v25 = a3;
  uint64_t View = type metadata accessor for ScrollEventStateReader.MakeView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v28, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v24, View, MEMORY[0x1E4FBC248], v12, MEMORY[0x1E4FBC278], v13);
  _GraphValue.init(_:)();
  uint64_t v28 = v6;
  int v29 = v7;
  uint64_t v30 = v8;
  int v31 = v9;
  int v32 = v10;
  int v33 = v17;
  int v34 = v16;
  uint64_t v35 = v15;
  uint64_t v36 = v22;
  uint64_t v37 = v21;
  int v38 = v20;
  uint64_t v39 = v19;
  char v40 = v18;
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(&v23, &v28, a3, a4);
}

uint64_t ScrollEventStateReader.MakeView.value.getter()
{
  return Rule.withObservation<A>(do:)();
}

uint64_t type metadata accessor for ScrollEventStateReader.MakeView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in ScrollEventStateReader.MakeView.value.getter()
{
  return closure #1 in ScrollEventStateReader.MakeView.value.getter(*(void *)(v0 + 32));
}

uint64_t closure #1 in ScrollEventStateReader.MakeView.value.getter(uint64_t a1)
{
  ScrollEventStateReader.MakeView.view.getter(&v8);
  uint64_t v2 = v8;
  ScrollEventStateReader.MakeView.resolvedState.getter(a1, (uint64_t)v6);
  v4[0] = v6[0];
  long long v5 = v7;
  v2(v4);
  return swift_release();
}

uint64_t ScrollEventStateReader.MakeView.view.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for ScrollEventStateReader();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;

  return swift_retain();
}

uint64_t type metadata accessor for ScrollEventStateReader()
{
  return __swift_instantiateGenericMetadata();
}

__n128 ScrollEventStateReader.MakeView.resolvedState.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a1) || (Value = (char *)AGGraphGetValue(), int v4 = *Value, v4 == 5))
  {
    default argument 1 of ScrollPhaseState.init(phase:velocity:)();
    long long v5 = &v7;
    ScrollPhaseState.init(phase:velocity:)();
    LOBYTE(v4) = v7;
  }
  else
  {
    long long v5 = Value;
  }
  __n128 result = *(__n128 *)(v5 + 8);
  *(unsigned char *)a2 = v4;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.enqueueAction(ids:)()
{
  return (*(uint64_t (**)(void))(v0 + 32))(*(void *)(v0 + 48));
}

uint64_t specialized static SupportsHoverEffects.evaluate(inputs:)()
{
  _GraphInputs.interfaceIdiom.getter();
  if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) != 0
    || (_GraphInputs.interfaceIdiom.getter(), (AnyInterfaceIdiom.accepts<A>(_:)() & 1) != 0))
  {
    char v0 = 1;
  }
  else
  {
    _GraphInputs.interfaceIdiom.getter();
    char v0 = AnyInterfaceIdiom.accepts<A>(_:)();
  }
  return v0 & 1;
}

uint64_t getEnumTag for SystemScrollLayoutState.ContentOffsetMode(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return ((*a1 >> 1) & 0xFFFFFFFC | *a1 & 3) + 2;
  }
}

void *specialized NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7 = v6;
  int v73 = a3;
  *(void *)&long long v72 = a1;
  *((void *)&v72 + 1) = a2;
  uint64_t v82 = a4;
  uint64_t v83 = a5;
  uint64_t v84 = a6;
  int v11 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v12 = (void *)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x70));
  swift_beginAccess();
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  uint64_t v15 = v12[2];
  *uint64_t v12 = a4;
  v12[1] = a5;
  v12[2] = a6;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of RichTextAttributeResolver?(v14, v13, v15);
  uint64_t v16 = (uint64_t)v7 + *(void *)((*v11 & *v7) + 0x68);
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_4;
  }
  uint64_t v18 = Strong + 16;
  swift_beginAccess();
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0(v18, (uint64_t)v80, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
  outlined retain of NavigationState?((uint64_t)v80, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?);
  swift_release();
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v80, (uint64_t)v77, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v77) == 1)
  {
    int v11 = (void *)MEMORY[0x1E4FBC8C8];
LABEL_4:
    _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)v79);
    uint64_t v19 = v79;
    goto LABEL_5;
  }
  v87[6] = *(_OWORD *)&v77[96];
  v87[7] = *(_OWORD *)&v77[112];
  v87[8] = *(_OWORD *)&v77[128];
  v87[2] = *(_OWORD *)&v77[32];
  v87[3] = *(_OWORD *)&v77[48];
  __int16 v88 = *(_WORD *)&v77[144];
  v87[4] = *(_OWORD *)&v77[64];
  v87[5] = *(_OWORD *)&v77[80];
  v87[0] = *(_OWORD *)v77;
  v87[1] = *(_OWORD *)&v77[16];
  int v11 = (void *)MEMORY[0x1E4FBC8C8];
  size_t v60 = (char *)v7 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v7) + 0x60);
  NavigationState.stackContent(for:)(*(void *)v60, v60[8], *((void *)v60 + 2), (uint64_t)v85);
  outlined retain of NavigationState?((uint64_t)v80, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v85, (uint64_t)v78, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v78, (uint64_t)v79, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v79) != 1)
  {
    _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v78, (uint64_t)v86, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    goto LABEL_9;
  }
  uint64_t v19 = v78;
LABEL_5:
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v19, (uint64_t)v87, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  int v20 = (char *)v7 + *(void *)((*v11 & *v7) + 0x60);
  uint64_t v21 = *(void *)v20;
  int v22 = v20[8];
  uint64_t v23 = *((void *)v20 + 2);
  _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_1((uint64_t)v87, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
  v85[0] = v21;
  if (v22 == 4) {
    char v24 = 0;
  }
  else {
    char v24 = v22;
  }
  LOBYTE(v85[1]) = v24;
  v85[2] = v23;
  _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(v85);
  outlined init with take of NavigationState.Base(v85, v86);
LABEL_9:
  memcpy(v77, v86, sizeof(v77));
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v77, v25, v26, v27);
  uint64_t v28 = (uint64_t)v7 + *(void *)((*v11 & *v7) + 0xB0);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0(v28, (uint64_t)v78, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v77, v28, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  outlined release of NavigationState.StackContent((uint64_t)v86, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_1((uint64_t)v78, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
  int v29 = (void *)swift_allocObject();
  v29[2] = a4;
  v29[3] = a5;
  v29[4] = a6;
  outlined init with take of NavigationState.Base(v86, v79);
  v79[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
  v79[50] = v29;
  v79[51] = a6;
  memcpy(v85, v79, sizeof(v85));
  outlined release of NavigationState.StackContent((uint64_t)v86, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined release of NavigationState.StackContent((uint64_t)v86, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  swift_bridgeObjectRetain();
  specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
  swift_bridgeObjectRelease();
  uint64_t v30 = outlined release of NavigationState.StackContent((uint64_t)v86, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
  unint64_t v32 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v30);
  char v34 = v33;
  uint64_t v36 = v35;
  unsigned int v37 = v31;
  if ((v33 & 1) != 0 && v31 > 1u)
  {
    __n128 result = (void *)outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v79);
    goto LABEL_28;
  }
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v79);
  specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(v32, v34 & 1, v36, v37);
  outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v79);
  __n128 result = (void *)outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v79);
  if (!*(void *)&v75[0])
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v39 = v11;
  v80[2] = v75[2];
  v80[3] = v75[3];
  char v81 = v76;
  v80[0] = v75[0];
  v80[1] = v75[1];
  outlined init with copy of NavigationAuthority(v16, (uint64_t)v75);
  NavigationAuthority.controllerCache.getter();
  uint64_t v40 = outlined destroy of NavigationAuthority((uint64_t)v75);
  MEMORY[0x1F4188790](v40);
  char v71 = (uint64_t (*)())v80;
  MEMORY[0x1F4188790](v41);
  unint64_t v67 = &v82;
  uint64_t v68 = v42;
  MEMORY[0x1F4188790](v43);
  v61[16] = v44;
  uint64_t v62 = v45;
  unint64_t v63 = closure #1 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:)partial apply;
  uint64_t v64 = v46;
  int v65 = partial apply for specialized closure #2 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:);
  uint64_t v66 = v47;
  uint64_t v48 = specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(0, (void (*)(uint64_t *))partial apply for closure #1 in NavigationHostingControllerCache_UIKit.unparentedHostingController(at:configureExisting:makeNew:), (uint64_t)v61, (void (*)(uint64_t *__return_ptr, unint64_t))closure #2 in NavigationHostingControllerCache_UIKit.unparentedHostingController(at:configureExisting:makeNew:), 0);
  swift_release();
  specialized NavigationStackCoordinator.configureAsRoot(_:transparentBackground:)(v48, v73 & 1);
  __n128 result = objc_msgSend(v48, sel_view);
  if (!result)
  {
LABEL_29:
    __break(1u);
    return result;
  }
  uint64_t v49 = result;
  objc_msgSend(result, sel_setClipsToBounds_, 1);

  uint64_t v50 = direct field offset for UIHostingController.host;
  uint64_t v51 = v82;
  uint64_t v52 = v83;
  uint64_t v53 = *(id *)((char *)v48 + direct field offset for UIHostingController.host);
  char v71 = closure #2 in UIHostingController.initialDataDrivenPresentationMode(canPop:)specialized partial apply;
  unint64_t v69 = &unk_1ED48E7C0;
  int v70 = closure #1 in UIHostingController.initialDataDrivenPresentationMode(canPop:)partial apply;
  specialized NavigationStrategy.inheritedEnvironment<A>(from:for:canPop:)(1, 0, 0, v51, v52, (uint64_t *)v75);
  uint64_t v54 = *(void *)((char *)v53 + *(void *)((*v39 & *v53) + 0x68));
  uint64_t v55 = *(void *)(v54 + 136);
  *(_OWORD *)(v54 + 136) = v75[0];
  outlined consume of EnvironmentValues?(v55);
  if (MEMORY[0x18C119DF0](v54 + 24))
  {
    swift_getObjectType();
    __int16 v74 = 2;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_unknownObjectRelease();
  }
  else
  {
  }
  v75[0] = v72;
  uint64_t v56 = EnvironmentValues.preferenceBridge.getter();
  if (v56)
  {
    uint64_t v57 = v56;
    id v58 = *(id *)((char *)v48 + v50);
    swift_retain();
    swift_retain();
    uint64_t v59 = ViewGraph.preferenceBridge.getter();
    swift_release();
    if (v59 && (swift_release(), v57 == v59))
    {
      swift_release();
    }
    else
    {
      swift_retain();
      swift_retain();
      ViewGraph.preferenceBridge.setter();
      swift_release();

      swift_release();
    }
    outlined release of NavigationState.StackContent((uint64_t)v86, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
    swift_release();
  }
  else
  {
    outlined release of NavigationState.StackContent((uint64_t)v86, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
  }
  outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v80);
  return v48;
}

{
  void *v6;
  void *v7;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Strong;
  uint64_t v18;
  unsigned char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  void *result;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  char *v60;
  unsigned char v61[24];
  uint64_t v62;
  uint64_t (*v63)();
  uint64_t v64;
  char *(*v65)();
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  void *v69;
  void (*v70)(unsigned char *@<X8>);
  void (*v71)(char *);
  long long v72;
  int v73;
  __int16 v74;
  _OWORD v75[4];
  char v76;
  unsigned char v77[392];
  unsigned char v78[392];
  void v79[55];
  _OWORD v80[4];
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void v85[52];
  unsigned char v86[392];
  _OWORD v87[9];
  __int16 v88;

  char v7 = v6;
  int v73 = a3;
  *(void *)&long long v72 = a1;
  *((void *)&v72 + 1) = a2;
  uint64_t v82 = a4;
  uint64_t v83 = a5;
  uint64_t v84 = a6;
  int v11 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v12 = (void *)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x70));
  swift_beginAccess();
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  uint64_t v15 = v12[2];
  *uint64_t v12 = a4;
  v12[1] = a5;
  v12[2] = a6;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of RichTextAttributeResolver?(v14, v13, v15);
  uint64_t v16 = (uint64_t)v7 + *(void *)((*v11 & *v7) + 0x68);
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_4;
  }
  uint64_t v18 = Strong + 16;
  swift_beginAccess();
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0(v18, (uint64_t)v80, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
  outlined retain of NavigationState?((uint64_t)v80, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?);
  swift_release();
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v80, (uint64_t)v77, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v77) == 1)
  {
    int v11 = (void *)MEMORY[0x1E4FBC8C8];
LABEL_4:
    _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)v79);
    uint64_t v19 = v79;
    goto LABEL_5;
  }
  v87[6] = *(_OWORD *)&v77[96];
  v87[7] = *(_OWORD *)&v77[112];
  v87[8] = *(_OWORD *)&v77[128];
  v87[2] = *(_OWORD *)&v77[32];
  v87[3] = *(_OWORD *)&v77[48];
  __int16 v88 = *(_WORD *)&v77[144];
  v87[4] = *(_OWORD *)&v77[64];
  v87[5] = *(_OWORD *)&v77[80];
  v87[0] = *(_OWORD *)v77;
  v87[1] = *(_OWORD *)&v77[16];
  int v11 = (void *)MEMORY[0x1E4FBC8C8];
  size_t v60 = (char *)v7 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v7) + 0x60);
  NavigationState.stackContent(for:)(*(void *)v60, v60[8], *((void *)v60 + 2), (uint64_t)v85);
  outlined retain of NavigationState?((uint64_t)v80, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v85, (uint64_t)v78, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v78, (uint64_t)v79, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v79) != 1)
  {
    _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v78, (uint64_t)v86, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    goto LABEL_9;
  }
  uint64_t v19 = v78;
LABEL_5:
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v19, (uint64_t)v87, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  int v20 = (char *)v7 + *(void *)((*v11 & *v7) + 0x60);
  uint64_t v21 = *(void *)v20;
  int v22 = v20[8];
  uint64_t v23 = *((void *)v20 + 2);
  _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_1((uint64_t)v87, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
  v85[0] = v21;
  if (v22 == 4) {
    char v24 = 0;
  }
  else {
    char v24 = v22;
  }
  LOBYTE(v85[1]) = v24;
  v85[2] = v23;
  _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(v85);
  outlined init with take of NavigationState.Base(v85, v86);
LABEL_9:
  memcpy(v77, v86, sizeof(v77));
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v77, v25, v26, v27);
  uint64_t v28 = (uint64_t)v7 + *(void *)((*v11 & *v7) + 0xB0);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0(v28, (uint64_t)v78, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v77, v28, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  outlined release of NavigationState.StackContent((uint64_t)v86, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_1((uint64_t)v78, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
  int v29 = (void *)swift_allocObject();
  v29[2] = a4;
  v29[3] = a5;
  v29[4] = a6;
  outlined init with take of NavigationState.Base(v86, v79);
  v79[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
  v79[50] = v29;
  v79[51] = a6;
  memcpy(v85, v79, sizeof(v85));
  outlined release of NavigationState.StackContent((uint64_t)v86, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined release of NavigationState.StackContent((uint64_t)v86, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  swift_bridgeObjectRetain();
  specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
  swift_bridgeObjectRelease();
  uint64_t v30 = outlined release of NavigationState.StackContent((uint64_t)v86, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
  unint64_t v32 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v30);
  char v34 = v33;
  uint64_t v36 = v35;
  unsigned int v37 = v31;
  if ((v33 & 1) != 0 && v31 > 1u)
  {
    __n128 result = (void *)outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v79);
    goto LABEL_28;
  }
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v79);
  specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(v32, v34 & 1, v36, v37);
  outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v79);
  __n128 result = (void *)outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v79);
  if (!*(void *)&v75[0])
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v39 = v11;
  v80[2] = v75[2];
  v80[3] = v75[3];
  char v81 = v76;
  v80[0] = v75[0];
  v80[1] = v75[1];
  outlined init with copy of NavigationAuthority(v16, (uint64_t)v75);
  NavigationAuthority.controllerCache.getter();
  uint64_t v40 = outlined destroy of NavigationAuthority((uint64_t)v75);
  MEMORY[0x1F4188790](v40);
  char v71 = (void (*)(char *))v80;
  MEMORY[0x1F4188790](v41);
  unint64_t v67 = &v82;
  uint64_t v68 = v42;
  MEMORY[0x1F4188790](v43);
  v61[16] = v44;
  uint64_t v62 = v45;
  unint64_t v63 = partial apply for closure #1 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:);
  uint64_t v64 = v46;
  int v65 = partial apply for specialized closure #2 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:);
  uint64_t v66 = v47;
  uint64_t v48 = specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(0, (void (*)(uint64_t *))partial apply for closure #1 in NavigationHostingControllerCache_UIKit.unparentedHostingController(at:configureExisting:makeNew:), (uint64_t)v61, (void (*)(uint64_t *__return_ptr, unint64_t))closure #2 in NavigationHostingControllerCache_UIKit.unparentedHostingController(at:configureExisting:makeNew:), 0);
  swift_release();
  specialized NavigationStackCoordinator.configureAsRoot(_:transparentBackground:)(v48, v73 & 1);
  __n128 result = objc_msgSend(v48, sel_view);
  if (!result)
  {
LABEL_29:
    __break(1u);
    return result;
  }
  uint64_t v49 = result;
  objc_msgSend(result, sel_setClipsToBounds_, 1);

  uint64_t v50 = direct field offset for UIHostingController.host;
  uint64_t v51 = v82;
  uint64_t v52 = v83;
  uint64_t v53 = *(id *)((char *)v48 + direct field offset for UIHostingController.host);
  char v71 = partial apply for specialized closure #2 in UIHostingController.initialDataDrivenPresentationMode(canPop:);
  unint64_t v69 = &unk_1ED48E068;
  int v70 = partial apply for closure #1 in UIHostingController.initialDataDrivenPresentationMode(canPop:);
  specialized NavigationStrategy.inheritedEnvironment<A>(from:for:canPop:)(1, 0, 0, v51, v52, (uint64_t *)v75);
  uint64_t v54 = *(void *)((char *)v53 + *(void *)((*v39 & *v53) + 0x68));
  uint64_t v55 = *(void *)(v54 + 136);
  *(_OWORD *)(v54 + 136) = v75[0];
  outlined consume of EnvironmentValues?(v55);
  if (MEMORY[0x18C119DF0](v54 + 24))
  {
    swift_getObjectType();
    __int16 v74 = 2;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_unknownObjectRelease();
  }
  else
  {
  }
  v75[0] = v72;
  uint64_t v56 = EnvironmentValues.preferenceBridge.getter();
  if (v56)
  {
    uint64_t v57 = v56;
    id v58 = *(id *)((char *)v48 + v50);
    swift_retain();
    swift_retain();
    uint64_t v59 = ViewGraph.preferenceBridge.getter();
    swift_release();
    if (v59 && (swift_release(), v57 == v59))
    {
      swift_release();
    }
    else
    {
      swift_retain();
      swift_retain();
      ViewGraph.preferenceBridge.setter();
      swift_release();

      swift_release();
    }
    outlined release of NavigationState.StackContent((uint64_t)v86, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
    swift_release();
  }
  else
  {
    outlined release of NavigationState.StackContent((uint64_t)v86, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
  }
  outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v80);
  return v48;
}

uint64_t NavigationAuthority.controllerCache.getter()
{
  uint64_t v1 = v0;
  uint64_t result = swift_weakLoadStrong();
  if (!result)
  {
    type metadata accessor for NavigationHostingControllerCache_UIKit();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    *(void *)(v6 + 24) = 0;
    return v6;
  }
  uint64_t v3 = result;
  if ((*(unsigned char *)(result + 200) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + 8);
    uint64_t v4 = *(void *)(v1 + 16);
    v7[0] = v5;
    v7[1] = v4;
    swift_retain();
    swift_retain();
    NavigationStateHost.createState(environment:)(v7);
    swift_release();
    uint64_t result = swift_release();
  }
  uint64_t v6 = *(void *)(v3 + 192);
  if (v6)
  {
    swift_retain();
    swift_release();
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(char *a1, uint64_t a2, uint64_t a3)
{
  outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(a2, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)v29, (uint64_t)v35, (uint64_t (*)(void))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(a2, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  uint64_t result = _s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v32);
  if (result == 1) {
    goto LABEL_20;
  }
  unsigned int v7 = *(unsigned __int8 *)(a3 + 24);
  if (v7 == 255)
  {
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v8 = *(void *)(a3 + 16);
  int64_t v10 = *(void *)a3;
  outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)v35, (uint64_t)__src, (uint64_t (*)(void))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v11 = outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
  uint64_t v12 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v11);
  if (v15)
  {
    BOOL v16 = (v9 & 1) == 0;
  }
  else
  {
    if ((v9 & 1) != 0 || v10 < v12) {
      goto LABEL_18;
    }
    if (v12 < v10) {
      goto LABEL_14;
    }
    if (!v7)
    {
      if (v14)
      {
        if (v14 != 1) {
          goto LABEL_14;
        }
LABEL_18:
        char v31 = 0;
        memset(v30, 0, sizeof(v30));
        outlined release of NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?(a2);
        goto LABEL_19;
      }
      goto LABEL_32;
    }
    if (v7 == 1)
    {
      if (v14 != 1) {
        goto LABEL_14;
      }
LABEL_32:
      BOOL v16 = v8 < v13;
      goto LABEL_12;
    }
    BOOL v16 = v14 != 2 || v13 != 0;
  }
LABEL_12:
  if (v16 || (v9 & 1) != 0) {
    goto LABEL_18;
  }
LABEL_14:
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
  LOBYTE(v30[0]) = v9 & 1;
  specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(v10, v9 & 1, v8, v7);
  outlined release of NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?(a2);
  outlined release of NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?(a2);
  uint64_t v17 = v30[0];
  if (!v30[0])
  {
LABEL_19:
    outlined destroy of PPTTestCase?((uint64_t)v30, &lazy cache variable for type metadata for NavigationState.StackContent.PositionedView?, (uint64_t)&type metadata for NavigationState.StackContent.PositionedView);
LABEL_20:
    uint64_t v17 = 0;
    goto LABEL_21;
  }
  swift_retain();
  outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v30);
LABEL_21:
  specialized NavigationStackCoordinator.configureExtantHostingController(_:view:transaction:)(a1, v17);
  swift_release();
  outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(a2, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  uint64_t result = _s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v30);
  if (result == 1)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    char v21 = -1;
LABEL_25:
    *(void *)a3 = v18;
    *(void *)(a3 + 8) = v19;
    *(void *)(a3 + 16) = v20;
    *(unsigned char *)(a3 + 24) = v21;
    return 1;
  }
  if (*(unsigned __int8 *)(a3 + 24) != 255)
  {
    int v22 = *(_DWORD *)(a3 + 8);
    int64_t v23 = *(void *)a3;
    outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)v35, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
    memcpy(__src, v28, sizeof(__src));
    outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v28);
    uint64_t v18 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v23, v22 & 1);
    uint64_t v20 = v24;
    char v21 = v25;
    uint64_t v19 = v26 & 1;
    outlined release of NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?(a2);
    goto LABEL_25;
  }
LABEL_34:
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  int64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  void v21[8];
  unsigned char v22[416];
  unsigned char v23[480];
  unsigned char __src[480];
  unsigned char v25[480];
  unsigned char v26[416];
  unsigned char __dst[480];
  unsigned char v28[480];

  outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(a2, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
  outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)v23, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
  outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(a2, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
  uint64_t result = _ss5SliceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0H8SequenceVy___AC22_VariadicView_ChildrenVAC08ModifiedG0VyAC0D14ColumnModifierVAOyAC09InjectKeyO0VAC0d16BackgroundReaderO033_7632008E3567AB610EB09B57688D0EDELLVGGGGSgWOg((uint64_t)v25);
  if (result == 1)
  {
    unsigned int v7 = 0;
  }
  else
  {
    uint64_t v8 = *(unsigned __int8 *)(a3 + 24);
    if (v8 == 255)
    {
      __break(1u);
      goto LABEL_13;
    }
    uint64_t v9 = *(void *)(a3 + 16);
    int64_t v10 = *(_DWORD *)(a3 + 8);
    uint64_t v11 = *(void *)a3;
    outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)v28, (uint64_t)__src, (uint64_t (*)(void))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
    memcpy(__dst, __src, sizeof(__dst));
    outlined retain of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>((uint64_t)__src);
    LOBYTE(v21[0]) = v10 & 1;
    specialized Collection.subscript.getter(v11, v10 & 1, v9, v8, (uint64_t)v21);
    outlined release of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(a2);
    unsigned int v7 = v21[0];
    if (v21[0])
    {
      swift_retain();
      outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v21);
    }
    else
    {
      outlined destroy of PPTTestCase?((uint64_t)v21, &lazy cache variable for type metadata for NavigationState.StackContent.PositionedView?, (uint64_t)&type metadata for NavigationState.StackContent.PositionedView);
    }
  }
  specialized NavigationStackCoordinator.configureExtantHostingController(_:view:transaction:)(a1, v7);
  swift_release();
  outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(a2, (uint64_t)__src, (uint64_t (*)(void))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
  uint64_t result = _ss5SliceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0H8SequenceVy___AC22_VariadicView_ChildrenVAC08ModifiedG0VyAC0D14ColumnModifierVAOyAC09InjectKeyO0VAC0d16BackgroundReaderO033_7632008E3567AB610EB09B57688D0EDELLVGGGGSgWOg((uint64_t)__src);
  if (result == 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    char v14 = 0;
    char v15 = -1;
LABEL_11:
    *(void *)a3 = v12;
    *(void *)(a3 + 8) = v13;
    *(void *)(a3 + 16) = v14;
    *(unsigned char *)(a3 + 24) = v15;
    return 1;
  }
  if (*(unsigned __int8 *)(a3 + 24) != 255)
  {
    BOOL v16 = *(_DWORD *)(a3 + 8);
    uint64_t v17 = *(void *)a3;
    outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)v28, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
    memcpy(v26, v22, sizeof(v26));
    outlined retain of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>((uint64_t)v21);
    uint64_t v12 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v17, v16 & 1);
    char v14 = v18;
    char v15 = v19;
    uint64_t v13 = v20 & 1;
    outlined release of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(a2);
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for UINavigationPresentationAdaptor??(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?(uint64_t a1)
{
}

uint64_t outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1)
{
  long long v6 = *(_OWORD *)(a1 + 288);
  long long v4 = *(_OWORD *)(a1 + 256);
  long long v5 = *(_OWORD *)(a1 + 272);
  long long v3 = *(_OWORD *)(a1 + 224);
  outlined copy of NavigationState.Base(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    *(void *)(a1 + 304));
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?(uint64_t a1)
{
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v4 = *(_OWORD *)(a1 + 240);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v3 = *(_OWORD *)(a1 + 208);
  outlined consume of NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((unint64_t *)&v7 + 1),
    *(void *)(a1 + 304));
  return a1;
}

uint64_t outlined consume of NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unint64_t a38,uint64_t a39)
{
  uint64_t result = a21;
  if ((~a22 & 0x7000000000000007) != 0
    || (a32 & 0xF000000000000007) != 0xF000000000000007
    || (a34 & 0xFFFFFFFFFFFFFFF8) != 0x3FFFF8
    || (a38 & 0xFFFFFFFFFF0000FCLL) != 0)
  {
    outlined consume of NavigationState.Base(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t outlined destroy of NavigationState.StackContent.PositionedView(uint64_t a1)
{
  return a1;
}

uint64_t destroy for NavigationState.StackContent.PositionedView(uint64_t a1)
{
  uint64_t result = swift_release();
  if (*(unsigned char *)(a1 + 64) == 1)
  {
    swift_release();
    uint64_t result = *(void *)(a1 + 40);
    if (result != 1)
    {
      return swift_release();
    }
  }
  else if (!*(unsigned char *)(a1 + 64))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  }
  return result;
}

uint64_t *specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(unint64_t a1, char a2, uint64_t a3, unsigned int a4)
{
  return specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:), (void (*)(unint64_t, void, uint64_t, void, uint64_t *, uint64_t))specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:));
}

uint64_t specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(void *a1, const void *a2, uint64_t a3, uint64_t (*a4)(uint64_t *))
{
  uint64_t v6 = v4;
  int64_t v10 = memcpy(v44, a2, sizeof(v44));
  uint64_t v11 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v10);
  if (v12)
  {
    uint64_t v15 = 0;
LABEL_8:
    id v18 = objc_msgSend(a1, sel_viewControllers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v19 >> 62))
    {
      uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v13 = 0;
    char v14 = 0;
    while (1)
    {
      uint64_t v15 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        break;
      }
      uint64_t v11 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v11, v14 & 1);
      char v14 = v17 & 1;
      ++v13;
      if ((v17 & 1) != 0 && v16 >= 2u) {
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_bridgeObjectRelease();
  if (v15 == v20)
  {
    memcpy(v43, v44, sizeof(v43));
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v43, v21, v22, v23);
    outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)v43, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
    outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)a2);
  }
  else
  {
    _s7SwiftUI15NavigationStateV12StackContentV5ViewsV0G8SequenceVy___AA22_VariadicView_ChildrenVAA08ModifiedF0VyAA0C14ColumnModifierVAMyAA09InjectKeyN0VAA0c16BackgroundReaderN033_7632008E3567AB610EB09B57688D0EDELLVGGGSgWOi0_((uint64_t)v43);
    outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)v43, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  }
  outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)v43, (uint64_t)v42, (uint64_t (*)(void))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)v42, (uint64_t)v40, (uint64_t (*)(void))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  uint64_t v24 = _s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v40);
  if (v24 == 1)
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    char v39 = -1;
  }
  else
  {
    outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)v42, (uint64_t)v35, (uint64_t (*)(void))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
    memcpy(v43, v35, sizeof(v43));
    uint64_t v25 = outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v35);
    uint64_t v26 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v25);
    char v28 = v27;
    uint64_t v30 = v29;
    char v32 = v31;
    uint64_t v24 = outlined release of NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?((uint64_t)v42);
    uint64_t v36 = v26;
    LOBYTE(v37) = v28 & 1;
    uint64_t v38 = v30;
    char v39 = v32;
  }
  MEMORY[0x1F4188790](v24);
  v34[2] = v6;
  v34[3] = v41;
  v34[4] = &v36;
  v34[5] = a3;
  specialized UINavigationController.visitDescendents<A>(matchingType:visitor:)(a4, (uint64_t)v34);
  outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)v41, (uint64_t)v35, (uint64_t (*)(void))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  return outlined release of NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?((uint64_t)v35);
}

uint64_t specialized UINavigationController.visitDescendents<A>(matchingType:visitor:)(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  id v5 = objc_msgSend(v2, sel_viewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v7)
    {
LABEL_3:
      uint64_t v8 = 4;
      do
      {
        if ((v6 & 0xC000000000000001) != 0) {
          id v11 = (id)MEMORY[0x18C117680](v8 - 4, v6);
        }
        else {
          id v11 = *(id *)(v6 + 8 * v8);
        }
        char v12 = v11;
        uint64_t v13 = v8 - 3;
        if (__OFADD__(v8 - 4, 1))
        {
          __break(1u);
          goto LABEL_17;
        }
        type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
        uint64_t v14 = swift_dynamicCastClass();
        if (v14)
        {
          uint64_t v16 = v14;
          char v9 = a1(&v16);
        }
        else
        {
          self;
          if (!swift_dynamicCastObjCClass())
          {

            goto LABEL_6;
          }
          char v9 = specialized UINavigationController.visitDescendents<A>(matchingType:visitor:)(a1, a2);
        }
        char v10 = v9;

        if ((v10 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          return 0;
        }
LABEL_6:
        ++v8;
      }
      while (v13 != v7);
    }
  }
  swift_bridgeObjectRelease();
  return 1;
}

void specialized closure #2 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t), void (*a12)(uint64_t, unsigned char *, uint64_t))
{
  uint64_t v45 = a5;
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0(a2, (uint64_t)v49, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v49, (uint64_t)v52, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  memcpy(v53, a3, sizeof(v53));
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v22 = MEMORY[0x18C119DF0](a1 + 16);
  if (v22)
  {
    uint64_t v23 = (void *)v22;
    uint64_t v43 = a6;
    uint64_t v44 = a4;
    uint64_t v42 = a12;
    uint64_t v41 = a11;
    uint64_t v40 = a9;
    static Log.navigation.getter();
    uint64_t v24 = type metadata accessor for Logger();
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v21, 1, v24) == 1)
    {
      outlined destroy of UINavigationPresentationAdaptor?((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for Logger?);
    }
    else
    {
      uint64_t v39 = a7;
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        char v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v38 = a8;
        uint64_t v29 = v28;
        *(_WORD *)char v28 = 0;
        _os_log_impl(&dword_1872C6000, v26, v27, "Updating stack views in place", v28, 2u);
        uint64_t v30 = v29;
        a8 = v38;
        MEMORY[0x18C119C60](v30, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v25 + 8))(v21, v24);
      a7 = v39;
    }
    _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0(a2, (uint64_t)v50, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    int v31 = _s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v50);
    uint64_t v33 = v43;
    uint64_t v32 = v44;
    if (v31 == 1)
    {
      outlined release of NavigationState.StackContent((uint64_t)a3, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      memcpy(v48, v53, 0x188uLL);
    }
    else
    {
      _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v52, (uint64_t)v48, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    }
    char v34 = (void *)swift_allocObject();
    uint64_t v35 = v45;
    v34[2] = v32;
    v34[3] = v35;
    v34[4] = v33;
    outlined init with take of NavigationState.Base(v48, v47);
    v47[49] = a10;
    v47[50] = v34;
    v47[51] = v33;
    memcpy(v51, v47, sizeof(v51));
    swift_retain();
    swift_bridgeObjectRetain_n();
    swift_retain();
    outlined release of NavigationState.StackContent((uint64_t)v48, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
    uint64_t v36 = _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_1(a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
    uint64_t v37 = v41(v36);
    v42(a7, v51, a8);
    if (v37)
    {
      outlined init with copy of NavigationAuthority((uint64_t)v23 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v23) + 0x68), (uint64_t)v46);
      NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v46);
      specialized NavigationHostingControllerCache_UIKit.updateUnusedRoots(_:transaction:)(v37);
      outlined release of NavigationState.StackContent((uint64_t)v48, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v47);
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      outlined release of NavigationState.StackContent((uint64_t)v48, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v47);
    }
  }
}

uint64_t outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1)
{
  long long v6 = *(_OWORD *)(a1 + 288);
  long long v4 = *(_OWORD *)(a1 + 256);
  long long v5 = *(_OWORD *)(a1 + 272);
  long long v3 = *(_OWORD *)(a1 + 224);
  outlined consume of NavigationState.Base(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    *(void *)(a1 + 304));
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

void specialized NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  LODWORD(v119) = v19;
  unint64_t v120 = v20;
  uint64_t v118 = v21;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  id v122 = v26;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v27 - 8);
  v113 = (char *)&v111 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  v117 = (char *)&v111 - v30;
  uint64_t v31 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v14) + 0x70);
  v121 = v14;
  uint64_t v32 = (void *)((char *)v14 + v31);
  swift_beginAccess();
  uint64_t v33 = *v32;
  uint64_t v34 = v32[1];
  uint64_t v35 = v32[2];
  uint64_t *v32 = v18;
  v32[1] = v16;
  v32[2] = a9;
  uint64_t v116 = v16;
  swift_retain();
  uint64_t v115 = a9;
  swift_bridgeObjectRetain();
  uint64_t v114 = v18;
  swift_retain();
  outlined consume of RichTextAttributeResolver?(v33, v34, v35);
  if (!v32[2]) {
    goto LABEL_59;
  }
  uint64_t *v32 = v25;
  v32[1] = v23;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  id v36 = v122;
  id v37 = objc_msgSend(v122, sel_viewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  unint64_t v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v39 = v36;
  uint64_t v40 = v23;
  uint64_t v41 = v25;
  if (v38 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v42 = *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v43 = v121;
  uint64_t v44 = (void *)MEMORY[0x1E4FBC8C8];
  if (v42 < 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  if ((v38 & 0xC000000000000001) != 0)
  {
    id v45 = (id)MEMORY[0x18C117680](0, v38);
    goto LABEL_8;
  }
  if (!*(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_59:
    __break(1u);
    return;
  }
  id v45 = *(id *)(v38 + 32);
LABEL_8:
  uint64_t v46 = v45;
  swift_bridgeObjectRelease();
  type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  uint64_t v47 = swift_dynamicCastClass();
  if (v47)
  {
    uint64_t v48 = (void *)v47;
    uint64_t v49 = direct field offset for UIHostingController.host;
    uint64_t v50 = *(void **)(v47 + direct field offset for UIHostingController.host);
    uint64_t v51 = self;
    id v52 = v50;
    id v53 = objc_msgSend(v51, sel_currentDevice);
    id v54 = objc_msgSend(v53, sel_userInterfaceIdiom);

    if (v54 == (id)5)
    {
      uint64_t v44 = (void *)MEMORY[0x1E4FBC8C8];
      char v55 = *((unsigned char *)v43 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v43) + 0x60) + 8) == 0;
    }
    else
    {
      char v55 = 0;
      uint64_t v44 = (void *)MEMORY[0x1E4FBC8C8];
    }
    specialized _UIHostingView.setWantsTransparentBackground(for:_:)(1, v55);

    id v56 = *(id *)((char *)v48 + v49);
    specialized _UIHostingView.setWantsTransparentBackground(for:_:)(4, v119 & 1);

    *(void *)&v137[0] = v41;
    *((void *)&v137[0] + 1) = v40;
    char v57 = EnvironmentValues.presentationNeedsPreferredContentSize.getter();
    id v58 = (void *)((char *)v48 + direct field offset for UIHostingController.sizingOptions);
    id v39 = v122;
    if (v57)
    {
      swift_beginAccess();
      unint64_t v59 = *v58;
      unint64_t v60 = *v58 | 1;
    }
    else
    {
      swift_beginAccess();
      unint64_t v59 = *v58;
      unint64_t v60 = *v58 & 0xFFFFFFFFFFFFFFFELL;
    }
    *id v58 = v60;
    *(void *)&v137[0] = v59;
    (*(void (**)(_OWORD *))((*v44 & *v48) + 0x3B0))(v137);
  }

LABEL_18:
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v62 = Strong + 16;
    swift_beginAccess();
    _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0(v62, (uint64_t)v131, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    outlined retain of NavigationState?((uint64_t)v131, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?);
    swift_release();
    _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v131, (uint64_t)v132, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v132) != 1)
    {
      uint64_t v63 = *v44 & *v43;
      uint64_t v64 = (unsigned int *)((char *)v43 + *(void *)(v63 + 0xA8));
      unsigned int v65 = *v64;
      v111 = v64;
      unint64_t v112 = HIDWORD(v120);
      if (__PAIR64__(v64[1], v65) == v120)
      {
        _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)v137);
        _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v137, (uint64_t)v129, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
      }
      else
      {
        uint64_t v66 = (char *)v43 + *(void *)(v63 + 96);
        Swift::UInt v67 = *(void *)v66;
        Swift::UInt v68 = *((void *)v66 + 2);
        unsigned __int8 v69 = v66[8];
        v137[6] = v132[6];
        v137[7] = v132[7];
        v137[8] = v132[8];
        LOWORD(v137[9]) = v133;
        v137[2] = v132[2];
        v137[3] = v132[3];
        v137[4] = v132[4];
        v137[5] = v132[5];
        v137[0] = v132[0];
        v137[1] = v132[1];
        NavigationState.stackContent(for:)(v67, v69, v68, (uint64_t)v126);
        _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v126, (uint64_t)v128, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
        _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v128, (uint64_t)v134, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
        if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v134) == 1)
        {
          Swift::UInt v70 = *(void *)v66;
          int v71 = v66[8];
          uint64_t v72 = *((void *)v66 + 2);
          if (v71 == 4) {
            LOBYTE(v71) = 0;
          }
          BYTE8(v137[0]) = v71;
          *(void *)&v137[0] = v70;
          *(void *)&v137[1] = v72;
          _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(v137);
          outlined init with take of NavigationState.Base(v137, v127);
        }
        else
        {
          _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v128, (uint64_t)v127, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
        }
        memcpy(v137, v127, 0x188uLL);
        memcpy(v125, v127, sizeof(v125));
        destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v125, v73, v74, v75);
        _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v125, (uint64_t)v135, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
        outlined release of NavigationState.StackContent((uint64_t)v127, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
        BOOL v76 = specialized closure #1 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(v137, v43);
        outlined release of NavigationState.StackContent((uint64_t)v127, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
        if (!v76)
        {
          v121 = a14;
          uint64_t v97 = (uint64_t)v113;
          static Log.navigation.getter();
          uint64_t v98 = type metadata accessor for Logger();
          uint64_t v99 = *(void *)(v98 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98) == 1)
          {
            outlined destroy of UINavigationPresentationAdaptor?(v97, (uint64_t (*)(void))type metadata accessor for Logger?);
          }
          else
          {
            v100 = Logger.logObject.getter();
            os_log_type_t v101 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v100, v101))
            {
              v102 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v102 = 0;
              _os_log_impl(&dword_1872C6000, v100, v101, "Enqueuing: Updating stack views with new content", v102, 2u);
              MEMORY[0x18C119C60](v102, -1, -1);
            }

            (*(void (**)(char *, uint64_t))(v99 + 8))(v113, v98);
          }
          uint64_t v103 = swift_allocObject();
          swift_unknownObjectWeakInit();
          _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v43 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v43) + 0xB0), (uint64_t)v124, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
          _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v124, (uint64_t)v129, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
          if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v129) == 1)
          {
            Swift::UInt v104 = *(void *)v66;
            int v105 = v66[8];
            uint64_t v106 = *((void *)v66 + 2);
            if (v105 == 4) {
              LOBYTE(v105) = 0;
            }
            LOBYTE(v136[1]) = v105;
            v136[0] = v104;
            v136[2] = v106;
            _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(v136);
            outlined init with take of NavigationState.Base(v136, v123);
          }
          else
          {
            memcpy(v123, v129, sizeof(v123));
          }
          memcpy(v136, v123, sizeof(v136));
          uint64_t v107 = swift_allocObject();
          _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v135, v107 + 16, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
          *(void *)(v107 + 408) = v103;
          memcpy((void *)(v107 + 416), v136, 0x188uLL);
          id v108 = v122;
          *(void *)(v107 + 808) = v122;
          *(void *)(v107 + 816) = v118;
          *(unsigned char *)(v107 + 824) = v119 & 1;
          outlined release of NavigationState.StackContent((uint64_t)v127, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
          swift_retain();
          id v109 = v108;
          outlined release of NavigationState.StackContent((uint64_t)v127, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
          _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_1((uint64_t)v124, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
          swift_retain();
          outlined release of NavigationState.StackContent((uint64_t)v123, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
          static Update.enqueueAction(_:)();
          swift_release();
          outlined release of NavigationState.StackContent((uint64_t)v127, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
          outlined release of NavigationState.StackContent((uint64_t)v123, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
          swift_release();
          _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v125, (uint64_t)v130, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
          v96 = (void *)MEMORY[0x1E4FBC8C8];
          goto LABEL_53;
        }
        _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v125, (uint64_t)v129, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
        id v39 = v122;
      }
      uint64_t v119 = a12;
      _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v129, (uint64_t)v134, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
      uint64_t v77 = (uint64_t)v117;
      static Log.navigation.getter();
      uint64_t v78 = type metadata accessor for Logger();
      uint64_t v79 = *(void *)(v78 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78) == 1)
      {
        outlined destroy of UINavigationPresentationAdaptor?(v77, (uint64_t (*)(void))type metadata accessor for Logger?);
      }
      else
      {
        unsigned int v80 = Logger.logObject.getter();
        os_log_type_t v81 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v80, v81))
        {
          id v82 = v39;
          uint64_t v83 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v83 = 0;
          _os_log_impl(&dword_1872C6000, v80, v81, "Enqueuing: Updating stack views in place", v83, 2u);
          uint64_t v84 = v83;
          id v39 = v82;
          uint64_t v77 = (uint64_t)v117;
          MEMORY[0x18C119C60](v84, -1, -1);
        }

        (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v77, v78);
      }
      uint64_t v85 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v86 = (void *)MEMORY[0x1E4FBC8C8];
      _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v43 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v43) + 0xB0), (uint64_t)v127, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
      _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v127, (uint64_t)v128, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
      if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v128) == 1)
      {
        v87 = (char *)v43 + *(void *)((*v86 & *v43) + 0x60);
        uint64_t v88 = *(void *)v87;
        int v89 = v87[8];
        uint64_t v90 = *((void *)v87 + 2);
        if (v89 == 4) {
          LOBYTE(v89) = 0;
        }
        LOBYTE(v136[1]) = v89;
        v136[0] = v88;
        v136[2] = v90;
        _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(v136);
        outlined init with take of NavigationState.Base(v136, v126);
      }
      else
      {
        memcpy(v126, v128, sizeof(v126));
      }
      memcpy(v136, v126, sizeof(v136));
      v91 = (void *)swift_allocObject();
      v91[2] = v85;
      _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v134, (uint64_t)(v91 + 3), &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
      memcpy(v91 + 52, v136, 0x188uLL);
      uint64_t v92 = v115;
      v91[101] = v114;
      v91[102] = v116;
      v91[103] = v92;
      v91[104] = v39;
      v91[105] = v118;
      _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_1((uint64_t)v129, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_1((uint64_t)v129, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
      swift_retain();
      id v93 = v39;
      _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_1((uint64_t)v127, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
      outlined release of NavigationState.StackContent((uint64_t)v126, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      swift_retain();
      static Update.enqueueAction(_:)();
      _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_1((uint64_t)v129, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
      outlined release of NavigationState.StackContent((uint64_t)v126, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
      swift_release();
      swift_release();
      _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v129, (uint64_t)v125, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
      if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v125) == 1)
      {
        outlined retain of NavigationState?((uint64_t)v131, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
        uint64_t v95 = v111;
        unsigned int v94 = v112;
LABEL_54:
        *uint64_t v95 = v120;
        v95[1] = v94;
        return;
      }
      _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v129, (uint64_t)v130, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
      v96 = (void *)MEMORY[0x1E4FBC8C8];
      uint64_t v43 = v121;
LABEL_53:
      uint64_t v95 = v111;
      unsigned int v94 = v112;
      uint64_t v110 = (uint64_t)v43 + *(void *)((*v96 & *v43) + 0xB0);
      _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0(v110, (uint64_t)v128, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
      _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v130, v110, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
      _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_1((uint64_t)v128, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
      outlined retain of NavigationState?((uint64_t)v131, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
      goto LABEL_54;
    }
  }
}

uint64_t outlined release of NavigationState.StackContent?(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  long long v11 = *(_OWORD *)(a1 + 352);
  long long v12 = *(_OWORD *)(a1 + 368);
  long long v9 = *(_OWORD *)(a1 + 320);
  long long v10 = *(_OWORD *)(a1 + 336);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v8 = *(_OWORD *)(a1 + 304);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v4 = *(_OWORD *)(a1 + 224);
  outlined copy of NavigationState.StackContent?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4,
    *((uint64_t *)&v4 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    *(void *)(a1 + 384),
    a2);
  return a1;
}

uint64_t _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_0(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  long long v11 = *(_OWORD *)(a1 + 352);
  long long v12 = *(_OWORD *)(a1 + 368);
  long long v9 = *(_OWORD *)(a1 + 320);
  long long v10 = *(_OWORD *)(a1 + 336);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v8 = *(_OWORD *)(a1 + 304);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v4 = *(_OWORD *)(a1 + 224);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4,
    *((void *)&v4 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    v8,
    *((void *)&v8 + 1),
    v9,
    *((void *)&v9 + 1),
    v10,
    *((void *)&v10 + 1),
    v11,
    *((void *)&v11 + 1),
    v12,
    *((void *)&v12 + 1),
    *(void *)(a1 + 384));
  return a1;
}

uint64_t _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_1(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  long long v11 = *(_OWORD *)(a1 + 352);
  long long v12 = *(_OWORD *)(a1 + 368);
  long long v9 = *(_OWORD *)(a1 + 320);
  long long v10 = *(_OWORD *)(a1 + 336);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v8 = *(_OWORD *)(a1 + 304);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v4 = *(_OWORD *)(a1 + 224);
  _s7SwiftUI15NavigationStateV12StackContentVSgWOyTm_0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4,
    *((uint64_t *)&v4 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    *(void *)(a1 + 384),
    a2);
  return a1;
}

uint64_t outlined release of NavigationState.StackContent(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  long long v11 = *(_OWORD *)(a1 + 352);
  long long v12 = *(_OWORD *)(a1 + 368);
  long long v9 = *(_OWORD *)(a1 + 320);
  long long v10 = *(_OWORD *)(a1 + 336);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v8 = *(_OWORD *)(a1 + 304);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v4 = *(_OWORD *)(a1 + 224);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4,
    *((void *)&v4 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    v8,
    *((void *)&v8 + 1),
    v9,
    *((void *)&v9 + 1),
    v10,
    *((void *)&v10 + 1),
    v11,
    *((void *)&v11 + 1),
    v12,
    *((void *)&v12 + 1),
    *(void *)(a1 + 384));
  return a1;
}

void outlined consume of NavigationState.Base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unint64_t a38,uint64_t a39)
{
  if (a38 >> 62 == 2)
  {
    swift_bridgeObjectRelease();
    outlined copy of NavigationSplitViewState?(a2, a3, a4, a5, a6, a7, a8, a9, a10, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  }
  else if (a38 >> 62 == 1)
  {
    outlined consume of NavigationListState?(a6, a7);
    outlined consume of Binding<AnyNavigationPath>?(a12, a13);
    outlined consume of NavigationColumnState.ColumnContent(a15, a16, a17, a18, a19, a20, a21, a22);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    outlined consume of ResolvedNavigationDestinations?(a39);
  }
}

uint64_t outlined copy of NavigationState.StackContent?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t (*a50)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a21;
  if ((~a22 & 0x7000000000000007) != 0
    || (a32 & 0xF000000000000007) != 0xF000000000000007
    || (a34 & 0xFFFFFFFFFFFFFFF8) != 0x3FFFF8
    || (a38 & 0xFFFFFFFFFF0000FCLL) != 0)
  {
    return a50(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49);
  }
  return result;
}

uint64_t _s7SwiftUI15NavigationStateV12StackContentVSgWOyTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t (*a50)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a21;
  if ((~a22 & 0x7000000000000007) != 0
    || (a32 & 0xF000000000000007) != 0xF000000000000007
    || (a34 & 0xFFFFFFFFFFFFFFF8) != 0x3FFFF8
    || (a38 & 0xFFFFFFFFFF0000FCLL) != 0)
  {
    return a50(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49);
  }
  return result;
}

uint64_t _s7SwiftUI15NavigationStateV12StackContentVSgWOgTm(uint64_t a1)
{
  unsigned int v1 = (*(void *)(a1 + 168) >> 57) & 0x38 | *(void *)(a1 + 168) & 7 | (*(void *)(a1 + 248) >> 51) & 0x1E00 | ((*(void *)(a1 + 248) & 7) << 6) & 0x1FFF | (*(_DWORD *)(a1 + 264) >> 3 << 13);
  if (v1 > 0x80000000) {
    return -v1;
  }
  else {
    return 0;
  }
}

uint64_t outlined copy of ResolvedNavigationDestinations?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of ResolvedNavigationDestinations?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined destroy of UINavigationPresentationAdaptor?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined consume of RichTextAttributeResolver?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

void *_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(void *result)
{
  uint64_t v1 = result[31] & 0xFFFFFFFFFFFFFF8;
  uint64_t v2 = result[33] & 7;
  uint64_t v3 = result[37] & 0xFFFF03;
  result[21] &= 0x8FFFFFFFFFFFFFF8;
  result[31] = v1;
  result[33] = v2;
  result[37] = v3;
  return result;
}

uint64_t specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(void *a1, const void *a2, uint64_t a3)
{
  return specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(a1, a2, a3, (uint64_t (*)(uint64_t *))partial apply for specialized closure #1 in NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:));
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()()
{
  return specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()((uint64_t)&unk_1ED48E1D0, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
}

{
  return specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()((uint64_t)&unk_1ED48E568, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
}

{
  return specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()((uint64_t)&unk_1ED48DE38, (uint64_t)partial apply for closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:));
}

BOOL specialized closure #1 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(void *__src, void *a2)
{
  memcpy(__dst, __src, sizeof(__dst));
  NavigationState.StackContent.structuralSeed.getter(&v17);
  int v3 = v17;
  long long v4 = (void *)MEMORY[0x1E4FBC8C8];
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)a2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a2) + 0xB0), (uint64_t)v14, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v14, (uint64_t)__dst, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)__dst) == 1)
  {
    long long v5 = (char *)a2 + *(void *)((*v4 & *a2) + 0x60);
    uint64_t v6 = *(void *)v5;
    int v7 = v5[8];
    uint64_t v8 = *((void *)v5 + 2);
    if (v7 == 4) {
      LOBYTE(v7) = 0;
    }
    v12[0] = v6;
    LOBYTE(v12[1]) = v7;
    v12[2] = v8;
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(v12);
    outlined init with take of NavigationState.Base(v12, __srca);
  }
  else
  {
    memcpy(__srca, __dst, sizeof(__srca));
  }
  memcpy(v12, __srca, sizeof(v12));
  _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_1((uint64_t)v14, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
  NavigationState.StackContent.structuralSeed.getter(&v16);
  outlined release of NavigationState.StackContent((uint64_t)__srca, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
  return v3 != -1 && v16 != -1 && v3 == v16;
}

Swift::Void __swiftcall UIHostingController.sizingOptionsDidChange(from:)(SwiftUI::UIHostingControllerSizingOptions from)
{
  uint64_t v2 = v1;
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v4 = *(void *)from.rawValue;
  long long v5 = (void *)((char *)v1 + direct field offset for UIHostingController.sizingOptions);
  swift_beginAccess();
  uint64_t v6 = *v5 & ~v4;
  if (one-time initialization token for idealSizeOptions != -1) {
    swift_once();
  }
  uint64_t v7 = static UIHostingControllerSizingOptions.idealSizeOptions;
  if ((static UIHostingControllerSizingOptions.idealSizeOptions & v6) != 0)
  {
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();
    static _ProposedSize.unspecified.getter();
    uint64_t v8 = swift_allocObject();
    swift_unknownObjectWeakInit();
    long long v9 = (void *)swift_allocObject();
    v9[2] = *(void *)(v3 + 80);
    v9[3] = *(void *)(v3 + 88);
    v9[4] = v8;
    swift_beginAccess();
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
    ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
    swift_endAccess();
    swift_release();
    swift_release();
    uint64_t v10 = specialized _UIHostingView.viewGraph.getter();
    swift_beginAccess();
    if (*(unsigned char *)(v10 + 128) == 1)
    {
      static CGSize.invalidValue.getter();
      unint64_t v12 = v11;
      unint64_t v14 = v13;
      id v15 = *(id *)((char *)v2 + direct field offset for UIHostingController.host);
      static _ProposedSize.unspecified.getter();
      type metadata accessor for _UIHostingView();
      swift_getWitnessTable();
      ViewRendererHost.sizeThatFits(_:)();
      unint64_t v17 = v16;
      unint64_t v19 = v18;

      UIHostingController.idealSizeDidChange(from:to:)((CGSize)__PAIR128__(v14, v12), (CGSize)__PAIR128__(v19, v17));
    }
  }
  else
  {
    unint64_t v20 = (void *)((char *)v2 + direct field offset for UIHostingController.sizingOptions);
    swift_beginAccess();
    if ((*v20 & v7) == 0)
    {
      specialized _UIHostingView.viewGraph.getter();
      swift_retain();
      static _ProposedSize.unspecified.getter();
      swift_beginAccess();
      type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
      ViewGraphGeometryObservers.stopObserving(proposal:)();
      swift_endAccess();
      swift_release();
    }
  }
  uint64_t v21 = v6;
  UIHostingController.updateWindowSizeObservers(_:)((SwiftUI::UIHostingControllerSizingOptions)&v21);
}

Swift::Void __swiftcall UIHostingController.updateWindowSizeObservers(_:)(SwiftUI::UIHostingControllerSizingOptions a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)a1.rawValue;
  if (!_UIHostingView.sceneBridge.getter()) {
    return;
  }
  if ((v3 & 4) != 0)
  {
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();
    static _ProposedSize.zero.getter();
    swift_allocObject();
    swift_weakInit();
    swift_beginAccess();
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
    ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
    swift_endAccess();
    swift_release();
    goto LABEL_6;
  }
  uint64_t v4 = (unsigned char *)(v1 + direct field offset for UIHostingController.sizingOptions);
  swift_beginAccess();
  if ((*v4 & 4) == 0)
  {
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();
    static _ProposedSize.zero.getter();
    swift_beginAccess();
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
    ViewGraphGeometryObservers.stopObserving(proposal:)();
    swift_endAccess();
LABEL_6:
    swift_release();
  }
  if ((v3 & 8) != 0)
  {
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();
    static _ProposedSize.infinity.getter();
    swift_allocObject();
    swift_weakInit();
    swift_beginAccess();
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
    ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
    swift_endAccess();
    swift_release();
    swift_release();
  }
  else
  {
    long long v5 = (unsigned char *)(v2 + direct field offset for UIHostingController.sizingOptions);
    swift_beginAccess();
    if ((*v5 & 8) == 0)
    {
      specialized _UIHostingView.viewGraph.getter();
      swift_retain();
      static _ProposedSize.infinity.getter();
      swift_beginAccess();
      type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
      ViewGraphGeometryObservers.stopObserving(proposal:)();
      swift_endAccess();
      swift_release();
    }
  }
  swift_release();
}

void specialized NavigationStackCoordinator.configureExtantHostingController(_:view:transaction:)(char *a1, uint64_t a2)
{
  uint64_t v4 = direct field offset for UIHostingController.host;
  id v5 = objc_msgSend(*(id *)&a1[direct field offset for UIHostingController.host], sel_window);
  if (v5)
  {

    uint64_t v6 = *(void **)&a1[v4];
    uint64_t v7 = *(void *)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x68));
    uint64_t v8 = *(void *)(v7 + 136);
    *(_OWORD *)(v7 + 136) = xmmword_18834FC50;
    long long v9 = v6;
    outlined consume of EnvironmentValues?(v8);
    if (MEMORY[0x18C119DF0](v7 + 24))
    {
      swift_getObjectType();
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

      swift_unknownObjectRelease();
      if (!a2) {
        return;
      }
    }
    else
    {

      if (!a2) {
        return;
      }
    }
  }
  else
  {
    uint64_t v10 = *(id *)&a1[v4];
    id v11 = objc_msgSend(a1, sel_traitCollection);
    uint64_t v12 = *(void *)((char *)v10 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v10) + 0x68));
    unint64_t v13 = *(void **)(v12 + 168);
    *(void *)(v12 + 168) = v11;
    id v14 = v11;
    UIHostingViewBase.traitCollectionOverride.didset((uint64_t)v13);

    if (!a2) {
      return;
    }
  }
  uint64_t v15 = swift_retain();
  specialized UIHostingController.setRootView(_:transaction:)(v15);

  swift_release();
}

uint64_t specialized UIHostingController.setRootView(_:transaction:)(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + direct field offset for UIHostingController.host);
  uint64_t v4 = (void *)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x60));
  swift_beginAccess();
  *uint64_t v4 = a1;
  id v5 = v3;
  swift_retain();
  swift_release();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  swift_retain();
  default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
  GraphHost.asyncTransaction(_:id:_:)();

  swift_release();
  return swift_release_n();
}

uint64_t partial apply for specialized closure #1 in NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(char **a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = *a1;
  outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(*(void *)(v1 + 24), (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  return specialized closure #1 in NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v3, (uint64_t)v5, v2) & 1;
}

{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unsigned char v5[480];

  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = *a1;
  outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(*(void *)(v1 + 24), (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
  return specialized closure #1 in NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v3, (uint64_t)v5, v2) & 1;
}

uint64_t EnvironmentValues.presentationNeedsPreferredContentSize.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationKind.Key>, (uint64_t)&type metadata for PresentationKind.Key, (uint64_t)&protocol witness table for PresentationKind.Key, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationKind.Key>, (uint64_t)&type metadata for PresentationKind.Key, (uint64_t)&protocol witness table for PresentationKind.Key);
  swift_retain_n();
  if (v1)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v4 == 1) {
    return 1;
  }
  if (v4) {
    return 0;
  }
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize>, (uint64_t)&unk_1ED486078, (uint64_t)&protocol witness table for EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize>, (uint64_t)&unk_1ED486078, (uint64_t)&protocol witness table for EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize);
  swift_retain_n();
  if (v1)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v3;
}

double _s7SwiftUI15NavigationStateV12StackContentV5ViewsV0G8SequenceVy___AA22_VariadicView_ChildrenVAA08ModifiedF0VyAA0C14ColumnModifierVAMyAA09InjectKeyN0VAA0c16BackgroundReaderN033_7632008E3567AB610EB09B57688D0EDELLVGGGSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0x7000000000000007;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 248) = xmmword_18834FC60;
  *(void *)(a1 + 264) = 4194296;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  return result;
}

void type metadata accessor for UINavigationPresentationAdaptor??(uint64_t a1)
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DividerStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t base witness table accessor for MultiViewModifier in _LabeledContentStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in _LabeledContentStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in RemoteSheetContainerVCWriter<A>()
{
  return swift_getWitnessTable();
}

unint64_t protocol witness for static UserDefaultKeyedFeature.key.getter in conformance EnableLazyStackLogging()
{
  return 0xD000000000000022;
}

uint64_t base witness table accessor for MultiViewModifier in HelpStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in HelpStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in MakeAlertStorage<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for ContentResponder in _CALayerView<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveView in _CALayerView<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for UnaryView in _CALayerView<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in CommandGroup<A>.MakeList()
{
  return swift_getWitnessTable();
}

double ScrollViewAlignmentAdjustment.value.getter()
{
  static Semantics.v6.getter();
  double v0 = 0.0;
  if (isLinkedOnOrAfter(_:)())
  {
    unsigned int v1 = *(unsigned __int8 *)AGGraphGetValue();
    AGGraphGetValue();
    ScrollAnchorStorage.alignment.getter();
    uint64_t v2 = static Axis.allCases.getter();
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      char v4 = (unsigned __int8 *)(v2 + 32);
      do
      {
        int v5 = *v4;
        if ((v1 >> v5))
        {
          UnitPoint.subscript.getter();
          if (v6 != 0.0)
          {
            AGGraphGetValue();
            ViewSize.subscript.getter();
            double v8 = v7;
            AGGraphGetValue();
            ViewSize.subscript.getter();
            if (v8 < v9)
            {
              double v10 = v9 - v8;
              UnitPoint.subscript.getter();
              double v12 = v10 * v11;
              if (!v5) {
                double v0 = v12;
              }
            }
          }
        }
        ++v4;
        --v3;
      }
      while (v3);
    }
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t View._onEnvironmentChange<A>(_:perform:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View._onEnvironmentChange<A>(_:perform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, void, uint64_t))type metadata accessor for EnvironmentChangeModifier);
}

{
  return View._onEnvironmentChange<A>(_:perform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, void, uint64_t))type metadata accessor for EnvironmentChangeModifier2);
}

uint64_t partial apply for closure #2 in View.pressableGesture<A>(_:action:pressingAction:)()
{
  return partial apply for closure #1 in View.pressableGesture<A>(_:action:pressingAction:)((uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void))closure #2 in View.pressableGesture<A>(_:action:pressingAction:));
}

uint64_t partial apply for closure #1 in View.pressableGesture<A>(_:action:pressingAction:)()
{
  return partial apply for closure #1 in View.pressableGesture<A>(_:action:pressingAction:)((uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void))closure #1 in View.pressableGesture<A>(_:action:pressingAction:));
}

uint64_t type metadata accessor for Link()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in ScrollIndicatorFlashOnAppearModifier.body(content:)(uint64_t a1)
{
  return closure #1 in ScrollIndicatorFlashOnAppearModifier.body(content:)(a1, *(unsigned char *)(v1 + 16));
}

uint64_t type metadata accessor for UIKitNavigationBridge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for Rule.value.getter in conformance NavigationStackReader<A, B>.AppliedBody@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return NavigationStackReader.AppliedBody.value.getter(*(void *)v2, *(void *)(v2 + 8), *(_DWORD *)(v2 + 16), a1[2], a1[3], a1[4], a1[5], a2);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Primitiv()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Pr;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Pr)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContain(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonSty, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<Platf, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<Pl, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarSectionActionStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarSectionActionStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Pr);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier>();
    lazy protocol witness table accessor for type SearchCompletionButtonStyle and conformance SearchCompletionButtonStyle(&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (void (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformFallbackButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlatformFallbackButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlatformFallbackButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformFallbackButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformFallbackButtonStyle and conformance PlatformFallbackButtonStyle, (uint64_t)&type metadata for PlatformFallbackButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlatformFallbackButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContex()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, Stati)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformFallbackButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformFallbackButtonStyle and conformance PlatformFallbackButtonStyle, (uint64_t)&type metadata for PlatformFallbackButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, Stati);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleCon()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<St;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<St)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredi();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<PlatterButtonStyle> and conformance ButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<St);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredi()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAccept;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAccept)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleConte(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleCo();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ButtonStyleContainerModifier<AccessibilityButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ButtonStyleContainerModifier<AccessibilityButtonStyle>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<AccessibilityButtonStyle> and conformance ButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAccept);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleCo()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuS;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuS)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveBu(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Primitiv();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuS);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<Pl()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModif;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModif)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButto(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListBu();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModif);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle, (uint64_t)&type metadata for PlatformItemListButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultListButtonStyle and conformance DefaultListButtonStyle, (uint64_t)&type metadata for DefaultListButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

uint64_t PlatformFallbackButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v2 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v3 = v2 - 8;
  MEMORY[0x1F4188790](v2);
  int v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6);
  double v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  double v12 = (char *)&v27 - v11;
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v27 - v14;
  type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>);
  uint64_t v17 = v16 - 8;
  MEMORY[0x1F4188790](v16);
  unint64_t v19 = (char *)&v27 - v18;
  outlined init with copy of PrimitiveButtonStyleConfiguration(v27, (uint64_t)v5, type metadata accessor for PrimitiveButtonStyleConfiguration);
  char v20 = v5[1];
  *double v9 = *v5;
  v9[1] = v20;
  outlined init with copy of PrimitiveButtonStyleConfiguration((uint64_t)&v5[*(int *)(v3 + 32)], (uint64_t)&v9[*(int *)(v7 + 44)], (uint64_t (*)(void))type metadata accessor for ButtonAction);
  outlined destroy of PrimitiveButtonStyleConfiguration((uint64_t)v5, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v9, (uint64_t)v12);
  outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v12, (uint64_t)v15);
  outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v12);
  outlined init with copy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>((uint64_t)v15, (uint64_t)v19, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>);
  uint64_t v21 = &v19[*(int *)(v17 + 44)];
  *(void *)uint64_t v21 = 0;
  v21[8] = 0;
  outlined destroy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>((uint64_t)v15, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v23 = v28;
  outlined init with copy of ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>((uint64_t)v19, v28, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle>>();
  uint64_t v25 = v23 + *(int *)(v24 + 36);
  *(void *)uint64_t v25 = KeyPath;
  *(unsigned char *)(v25 + 8) = 0;
  return outlined destroy of ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>((uint64_t)v19, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ConditionallyBorderedStyle and conformance ConditionallyBorderedStyle, (uint64_t)&type metadata for ConditionallyBorderedStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle>>);
    }
  }
}

uint64_t DefaultButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v108 = a1;
  uint64_t v124 = a2;
  type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v123 = (uint64_t)&v99 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier>();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v122 = (uint64_t)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for SearchCompletionButtonStyle() - 8;
  MEMORY[0x1F4188790](v120);
  uint64_t v119 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v121 = (uint64_t)&v99 - v8;
  uint64_t v103 = type metadata accessor for PrimitiveButtonStyleConfiguration(0) - 8;
  MEMORY[0x1F4188790](v103);
  uint64_t v10 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v100 = (uint64_t)&v99 - v16;
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>);
  MEMORY[0x1F4188790](v17 - 8);
  unint64_t v19 = (char *)&v99 - v18;
  os_log_type_t v101 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>;
  type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>);
  uint64_t v21 = v20 - 8;
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v99 - v22;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>();
  MEMORY[0x1F4188790](v24 - 8);
  uint64_t v99 = (uint64_t)&v99 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>(0);
  uint64_t v27 = v26 - 8;
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v99 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>(0);
  uint64_t v102 = v30 - 8;
  MEMORY[0x1F4188790](v30 - 8);
  uint64_t v32 = (char *)&v99 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>(0);
  uint64_t v105 = v33 - 8;
  MEMORY[0x1F4188790](v33 - 8);
  uint64_t v104 = (uint64_t)&v99 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyMo(0);
  uint64_t v107 = v35 - 8;
  MEMORY[0x1F4188790](v35 - 8);
  uint64_t v106 = (uint64_t)&v99 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButto(0);
  uint64_t v110 = v37 - 8;
  MEMORY[0x1F4188790](v37 - 8);
  uint64_t v109 = (uint64_t)&v99 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<Platf(0);
  uint64_t v112 = v39 - 8;
  MEMORY[0x1F4188790](v39 - 8);
  uint64_t v111 = (uint64_t)&v99 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContain(0);
  MEMORY[0x1F4188790](v41 - 8);
  uint64_t v113 = (uint64_t)&v99 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveBu(0);
  uint64_t v117 = v43 - 8;
  MEMORY[0x1F4188790](v43 - 8);
  uint64_t v114 = (uint64_t)&v99 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleConte(0);
  MEMORY[0x1F4188790](v45 - 8);
  uint64_t v116 = (uint64_t)&v99 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0);
  uint64_t v118 = v47 - 8;
  MEMORY[0x1F4188790](v47 - 8);
  uint64_t v115 = (uint64_t)&v99 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PrimitiveButtonStyleConfiguration(v108, (uint64_t)v10, type metadata accessor for PrimitiveButtonStyleConfiguration);
  char v49 = v10[1];
  *uint64_t v14 = *v10;
  v14[1] = v49;
  outlined init with copy of PrimitiveButtonStyleConfiguration((uint64_t)&v10[*(int *)(v103 + 32)], (uint64_t)&v14[*(int *)(v12 + 44)], (uint64_t (*)(void))type metadata accessor for ButtonAction);
  outlined destroy of PrimitiveButtonStyleConfiguration((uint64_t)v10, type metadata accessor for PrimitiveButtonStyleConfiguration);
  uint64_t v50 = (uint64_t)v14;
  uint64_t v51 = v100;
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>(v50, v100);
  outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>(v51, (uint64_t)v19);
  outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>(v51);
  uint64_t KeyPath = swift_getKeyPath();
  outlined init with copy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>((uint64_t)v19, (uint64_t)v23, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>);
  id v53 = &v23[*(int *)(v21 + 44)];
  *(void *)id v53 = KeyPath;
  v53[8] = 0;
  outlined destroy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>((uint64_t)v19, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>);
  uint64_t v54 = v99;
  char v55 = (void (*)(uint64_t))v101;
  outlined init with copy of ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>((uint64_t)v23, v99, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>, (void (*)(uint64_t))v101);
  outlined destroy of ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>((uint64_t)v23, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>, v55);
  uint64_t v56 = swift_getKeyPath();
  uint64_t v57 = swift_getKeyPath();
  outlined init with copy of PrimitiveButtonStyleConfiguration(v54, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>);
  id v58 = &v29[*(int *)(v27 + 44)];
  *(void *)id v58 = v56;
  char v58[8] = 0;
  *((void *)v58 + 2) = v57;
  v58[24] = 0;
  outlined destroy of PrimitiveButtonStyleConfiguration(v54, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>);
  uint64_t v59 = swift_getKeyPath();
  uint64_t v60 = swift_getKeyPath();
  outlined init with copy of PrimitiveButtonStyleConfiguration((uint64_t)v29, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>);
  char v61 = &v32[*(int *)(v102 + 44)];
  *(void *)char v61 = v59;
  v61[8] = 0;
  *((void *)v61 + 2) = v60;
  unsigned char v61[24] = 0;
  outlined destroy of PrimitiveButtonStyleConfiguration((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>);
  uint64_t v62 = swift_getKeyPath();
  uint64_t v63 = swift_getKeyPath();
  uint64_t v64 = swift_getKeyPath();
  uint64_t v65 = swift_getKeyPath();
  uint64_t v66 = v104;
  outlined init with copy of PrimitiveButtonStyleConfiguration((uint64_t)v32, v104, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>);
  uint64_t v67 = v66 + *(int *)(v105 + 44);
  *(void *)uint64_t v67 = v62;
  *(unsigned char *)(v67 + 8) = 0;
  *(void *)(v67 + 16) = v63;
  *(unsigned char *)(v67 + 24) = 0;
  *(void *)(v67 + 32) = v64;
  *(unsigned char *)(v67 + 40) = 0;
  *(void *)(v67 + 48) = v65;
  *(unsigned char *)(v67 + 56) = 0;
  outlined destroy of PrimitiveButtonStyleConfiguration((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>);
  uint64_t v68 = swift_getKeyPath();
  uint64_t v69 = swift_getKeyPath();
  uint64_t v70 = swift_getKeyPath();
  uint64_t v71 = swift_getKeyPath();
  uint64_t v72 = v106;
  outlined init with copy of PrimitiveButtonStyleConfiguration(v66, v106, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>);
  uint64_t v73 = v72 + *(int *)(v107 + 44);
  *(void *)uint64_t v73 = v68;
  *(unsigned char *)(v73 + 8) = 0;
  *(void *)(v73 + 16) = v69;
  *(unsigned char *)(v73 + 24) = 0;
  *(void *)(v73 + 32) = v70;
  *(unsigned char *)(v73 + 40) = 0;
  *(void *)(v73 + 48) = v71;
  *(unsigned char *)(v73 + 56) = 0;
  outlined destroy of PrimitiveButtonStyleConfiguration(v66, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>);
  uint64_t v74 = swift_getKeyPath();
  LOBYTE(v126[0]) = 0;
  uint64_t v75 = swift_getKeyPath();
  v125[0] = 0;
  uint64_t v76 = swift_getKeyPath();
  char v128 = 0;
  uint64_t v129 = v74;
  char v130 = v126[0];
  uint64_t v131 = v75;
  char v132 = v125[0];
  uint64_t v133 = v76;
  char v134 = 0;
  outlined init with copy of ToolbarButtonStyle((uint64_t)&v129, (uint64_t)v125);
  outlined init with copy of PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>((uint64_t)v125, (uint64_t)v126);
  outlined destroy of PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>((uint64_t)v125);
  uint64_t v77 = v109;
  outlined init with copy of PrimitiveButtonStyleConfiguration(v72, v109, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyMo);
  uint64_t v78 = (_OWORD *)(v77 + *(int *)(v110 + 44));
  long long v79 = *(_OWORD *)v127;
  v78[2] = v126[2];
  v78[3] = v79;
  *(_OWORD *)((char *)v78 + 57) = *(_OWORD *)&v127[9];
  long long v80 = v126[1];
  *uint64_t v78 = v126[0];
  v78[1] = v80;
  outlined destroy of ToolbarButtonStyle((uint64_t)&v129);
  outlined destroy of PrimitiveButtonStyleConfiguration(v72, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyMo);
  uint64_t v81 = (uint64_t)v119;
  *((_OWORD *)v119 + 2) = 0u;
  *(_OWORD *)(v81 + 48) = 0u;
  *(void *)(v81 + 64) = 0;
  *(_OWORD *)uint64_t v81 = 0u;
  *(_OWORD *)(v81 + 16) = 0u;
  *(unsigned char *)(v81 + 72) = -1;
  uint64_t v82 = v120;
  uint64_t v83 = (uint64_t *)(v81 + *(int *)(v120 + 28));
  *uint64_t v83 = swift_getKeyPath();
  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
  swift_storeEnumTagMultiPayload();
  uint64_t v84 = v81 + *(int *)(v82 + 32);
  *(void *)uint64_t v84 = swift_getKeyPath();
  *(void *)(v84 + 8) = 0;
  *(unsigned char *)(v84 + 16) = 0;
  uint64_t v85 = v121;
  outlined init with take of StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier>(v81, v121, (uint64_t (*)(void))type metadata accessor for SearchCompletionButtonStyle);
  uint64_t v86 = v123;
  outlined init with copy of PrimitiveButtonStyleConfiguration(v85, v123, (uint64_t (*)(void))type metadata accessor for SearchCompletionButtonStyle);
  uint64_t v87 = v122;
  outlined init with copy of PrimitiveButtonStyleConfiguration(v86, v122, (uint64_t (*)(void))type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>);
  outlined destroy of PrimitiveButtonStyleConfiguration(v86, (uint64_t (*)(void))type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>);
  uint64_t v88 = v111;
  outlined init with copy of PrimitiveButtonStyleConfiguration(v77, v111, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButto);
  outlined init with take of StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier>(v87, v88 + *(int *)(v112 + 44), (uint64_t (*)(void))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier>);
  outlined destroy of PrimitiveButtonStyleConfiguration(v85, (uint64_t (*)(void))type metadata accessor for SearchCompletionButtonStyle);
  outlined destroy of PrimitiveButtonStyleConfiguration(v77, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButto);
  uint64_t v89 = v113;
  outlined init with copy of PrimitiveButtonStyleConfiguration(v88, v113, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<Platf);
  outlined destroy of PrimitiveButtonStyleConfiguration(v88, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<Platf);
  uint64_t v90 = swift_getKeyPath();
  uint64_t v91 = swift_getKeyPath();
  uint64_t v92 = swift_getKeyPath();
  uint64_t v93 = swift_getKeyPath();
  uint64_t v94 = v114;
  outlined init with copy of PrimitiveButtonStyleConfiguration(v89, v114, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContain);
  uint64_t v95 = v94 + *(int *)(v117 + 44);
  *(void *)uint64_t v95 = v90;
  *(unsigned char *)(v95 + 8) = 0;
  *(void *)(v95 + 16) = v91;
  *(unsigned char *)(v95 + 24) = 0;
  *(void *)(v95 + 32) = v92;
  *(unsigned char *)(v95 + 40) = 0;
  *(void *)(v95 + 48) = v93;
  *(unsigned char *)(v95 + 56) = 0;
  outlined destroy of PrimitiveButtonStyleConfiguration(v89, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContain);
  uint64_t v96 = v116;
  outlined init with copy of PrimitiveButtonStyleConfiguration(v94, v116, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveBu);
  outlined destroy of PrimitiveButtonStyleConfiguration(v94, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveBu);
  uint64_t v97 = v115;
  outlined init with copy of PrimitiveButtonStyleConfiguration(v96, v115, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleConte);
  *(unsigned char *)(v97 + *(int *)(v118 + 44)) = 0;
  outlined destroy of PrimitiveButtonStyleConfiguration(v96, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleConte);
  outlined init with copy of PrimitiveButtonStyleConfiguration(v97, v124, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat);
  return outlined destroy of PrimitiveButtonStyleConfiguration(v97, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata accessor for SearchCompletionButtonStyle()
{
  uint64_t result = type metadata singleton initialization cache for SearchCompletionButtonStyle;
  if (!type metadata singleton initialization cache for SearchCompletionButtonStyle) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>()
{
  if (!lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>)
  {
    type metadata accessor for SearchCompletionButtonStyle();
    lazy protocol witness table accessor for type SearchCompletionButtonStyle and conformance SearchCompletionButtonStyle(&lazy protocol witness table cache variable for type SearchCompletionButtonStyle and conformance SearchCompletionButtonStyle, (void (*)(uint64_t))type metadata accessor for SearchCompletionButtonStyle);
    unint64_t v0 = type metadata accessor for PrimitiveButtonStyleContainerModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleConte(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveBu(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContain(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<Platf(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButto(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyMo(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>);
    }
  }
}

uint64_t outlined init with take of StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TextInputSuggestionsContext>);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>();
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<TextInputSuggestionsContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TextInputSuggestionsContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier>);
    }
  }
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>(255, a3, a4);
    a5(255);
    unint64_t v7 = type metadata accessor for ModifiedContent();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t outlined destroy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
    a3(255);
    unint64_t v5 = type metadata accessor for ModifiedContent();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined destroy of PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>(uint64_t a1)
{
  type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(0, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonStyle and conformance ToolbarButtonStyle, (uint64_t)&type metadata for ToolbarButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t outlined init with copy of PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(0, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonStyle and conformance ToolbarButtonStyle, (uint64_t)&type metadata for ToolbarButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ToolbarButtonStyle(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ToolbarButtonStyle(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 41))
  {
    if (*(unsigned char *)(a1 + 40) == 1) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
  }
  else
  {
    swift_release();
  }
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 72);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

uint64_t outlined init with copy of ToolbarButtonStyle(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for Environment<DismissSearchAccessoryAction>.Content()
{
  if (!lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content)
  {
    type metadata accessor for DismissSearchAccessoryAction(255);
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle, (uint64_t)&type metadata for PlatformItemListButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type BorderlessButtonStyle and conformance BorderlessButtonStyle;
  if (!lazy protocol witness table cache variable for type BorderlessButtonStyle and conformance BorderlessButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BorderlessButtonStyle and conformance BorderlessButtonStyle);
  }
  return result;
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, MEMORY[0x1E4F40BF8], MEMORY[0x1E4F40BF0], MEMORY[0x1E4F40C60]);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<PlatterButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatterButtonStyle and conformance PlatterButtonStyle, (uint64_t)&type metadata for PlatterButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<ClarityUIInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<ClarityUIInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type InterfaceIdiomPredicate<ClarityUIInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>;
  if (!lazy protocol witness table cache variable for type InterfaceIdiomPredicate<ClarityUIInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>)
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, MEMORY[0x1E4F40BF8], MEMORY[0x1E4F40BF0], MEMORY[0x1E4F40C60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<ClarityUIInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonStyle and conformance ToolbarButtonStyle, (uint64_t)&type metadata for ToolbarButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultListButtonStyle and conformance DefaultListButtonStyle, (uint64_t)&type metadata for DefaultListButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TableStyleContext>);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<TableStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TableStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ButtonStyleContainerModifier<AccessibilityButtonStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ButtonStyleContainerModifier<AccessibilityButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<AccessibilityButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityButtonStyle and conformance AccessibilityButtonStyle, (uint64_t)&type metadata for AccessibilityButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ButtonStyleContainerModifier<AccessibilityButtonStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle, (uint64_t)&type metadata for PlatformItemListButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarSectionActionStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarSectionActionStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarSectionActionStyleContext>);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarSectionActionButtonStyle and conformance SidebarSectionActionButtonStyle, (uint64_t)&type metadata for SidebarSectionActionButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarSectionActionStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarSectionActionStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarSectionActionStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SwipeActionsStyleContext>);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle, (uint64_t)&type metadata for PlatformItemListButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SwipeActionsStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SwipeActionsStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarButtonStyle and conformance SidebarButtonStyle, (uint64_t)&type metadata for SidebarButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultListButtonStyle and conformance DefaultListButtonStyle, (uint64_t)&type metadata for DefaultListButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TabSectionStyleContext>);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<TabSectionStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TabSectionStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type SearchCompletionButtonStyle and conformance SearchCompletionButtonStyle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI27SearchCompletionButtonStyleVAcA09PrimitiveeF0AAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>)
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, MEMORY[0x1E4F407A8], MEMORY[0x1E4F407A0], MEMORY[0x1E4F40C60]);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle_CarMac and conformance BorderedButtonStyle_CarMac, (uint64_t)&type metadata for BorderedButtonStyle_CarMac, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<CarPlayInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle;
  if (!lazy protocol witness table cache variable for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle);
  }
  return result;
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>, MEMORY[0x1E4F406E0], MEMORY[0x1E4F406D8], MEMORY[0x1E4F40C60]);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetBorderedButtonStyle and conformance WidgetBorderedButtonStyle, (uint64_t)&type metadata for WidgetBorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>;
  if (!lazy protocol witness table cache variable for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>)
  {
    type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>, MEMORY[0x1E4F406E0], MEMORY[0x1E4F406D8], MEMORY[0x1E4F40C60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonStyle and conformance ToolbarButtonStyle, (uint64_t)&type metadata for ToolbarButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<SidebarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SidebarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SidebarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarButtonStyle and conformance SidebarButtonStyle, (uint64_t)&type metadata for SidebarButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SidebarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarSectionActionButtonStyle and conformance SidebarSectionActionButtonStyle, (uint64_t)&type metadata for SidebarSectionActionButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SidebarSectionActionButtonStyle and conformance SidebarSectionActionButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type SidebarSectionActionButtonStyle and conformance SidebarSectionActionButtonStyle;
  if (!lazy protocol witness table cache variable for type SidebarSectionActionButtonStyle and conformance SidebarSectionActionButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarSectionActionButtonStyle and conformance SidebarSectionActionButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStyleContainerModifier<AccessibilityButtonStyle> and conformance ButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonStyleContainerModifier<AccessibilityButtonStyle> and conformance ButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type ButtonStyleContainerModifier<AccessibilityButtonStyle> and conformance ButtonStyleContainerModifier<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<AccessibilityButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityButtonStyle and conformance AccessibilityButtonStyle, (uint64_t)&type metadata for AccessibilityButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleContainerModifier<AccessibilityButtonStyle> and conformance ButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformFallbackButtonStyle and conformance PlatformFallbackButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformFallbackButtonStyle and conformance PlatformFallbackButtonStyle;
  if (!lazy protocol witness table cache variable for type PlatformFallbackButtonStyle and conformance PlatformFallbackButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformFallbackButtonStyle and conformance PlatformFallbackButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityButtonStyle and conformance AccessibilityButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityButtonStyle and conformance AccessibilityButtonStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityButtonStyle and conformance AccessibilityButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityButtonStyle and conformance AccessibilityButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultListButtonStyle and conformance DefaultListButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultListButtonStyle and conformance DefaultListButtonStyle;
  if (!lazy protocol witness table cache variable for type DefaultListButtonStyle and conformance DefaultListButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultListButtonStyle and conformance DefaultListButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarButtonStyle and conformance ToolbarButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarButtonStyle and conformance ToolbarButtonStyle;
  if (!lazy protocol witness table cache variable for type ToolbarButtonStyle and conformance ToolbarButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarButtonStyle and conformance ToolbarButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SidebarButtonStyle and conformance SidebarButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type SidebarButtonStyle and conformance SidebarButtonStyle;
  if (!lazy protocol witness table cache variable for type SidebarButtonStyle and conformance SidebarButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarButtonStyle and conformance SidebarButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatterButtonStyle and conformance PlatterButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatterButtonStyle and conformance PlatterButtonStyle;
  if (!lazy protocol witness table cache variable for type PlatterButtonStyle and conformance PlatterButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatterButtonStyle and conformance PlatterButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListBu()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItem;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItem)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyMo(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, Empt();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItem);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, Empt()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>);
    lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<SidebarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>);
    lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ConditionallyBorderedStyle and conformance ConditionallyBorderedStyle, (uint64_t)&type metadata for ConditionallyBorderedStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStyleContainerModifier<WidgetBorderedButtonStyle> and conformance ButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonStyleContainerModifier<WidgetBorderedButtonStyle> and conformance ButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type ButtonStyleContainerModifier<WidgetBorderedButtonStyle> and conformance ButtonStyleContainerModifier<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetBorderedButtonStyle and conformance WidgetBorderedButtonStyle, (uint64_t)&type metadata for WidgetBorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleContainerModifier<WidgetBorderedButtonStyle> and conformance ButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConditionallyBorderedStyle and conformance ConditionallyBorderedStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ConditionallyBorderedStyle and conformance ConditionallyBorderedStyle;
  if (!lazy protocol witness table cache variable for type ConditionallyBorderedStyle and conformance ConditionallyBorderedStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConditionallyBorderedStyle and conformance ConditionallyBorderedStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BorderedButtonStyle_CarMac and conformance BorderedButtonStyle_CarMac()
{
  unint64_t result = lazy protocol witness table cache variable for type BorderedButtonStyle_CarMac and conformance BorderedButtonStyle_CarMac;
  if (!lazy protocol witness table cache variable for type BorderedButtonStyle_CarMac and conformance BorderedButtonStyle_CarMac)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BorderedButtonStyle_CarMac and conformance BorderedButtonStyle_CarMac);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetBorderedButtonStyle and conformance WidgetBorderedButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetBorderedButtonStyle and conformance WidgetBorderedButtonStyle;
  if (!lazy protocol witness table cache variable for type WidgetBorderedButtonStyle and conformance WidgetBorderedButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetBorderedButtonStyle and conformance WidgetBorderedButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>);
    lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac> and conformance PrimitiveButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>);
    lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<WidgetBorderedButtonStyle> and conformance ButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t Image.init(uiImage:)(uint64_t a1)
{
  type metadata accessor for ImageProviderBox<UIImage>();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

void type metadata accessor for ImageProviderBox<UIImage>()
{
  if (!lazy cache variable for type metadata for ImageProviderBox<UIImage>)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIImage);
    lazy protocol witness table accessor for type UIImage and conformance UIImage(&lazy protocol witness table cache variable for type UIImage and conformance UIImage);
    unint64_t v0 = type metadata accessor for ImageProviderBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<UIImage>);
    }
  }
}

uint64_t base witness table accessor for Equatable in UIImage()
{
  return lazy protocol witness table accessor for type UIImage and conformance UIImage(&lazy protocol witness table cache variable for type UIImage and conformance NSObject);
}

uint64_t lazy protocol witness table accessor for type UIImage and conformance UIImage(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIImage);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata completion function for PlatformViewHost()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SystemScrollViewContainer<A>.EnvironmentAxesModifier()
{
  swift_getWitnessTable();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

void type metadata accessor for AGWeakAttribute.__Unnamed_struct__details(uint64_t a1)
{
}

uint64_t protocol witness for GraphMutation.apply() in conformance BaseModifier.SelectionStateBox.Mutation()
{
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x1E4F4E7A0])
  {
    type metadata accessor for _GraphValue<BaseModifier>(0, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB718]);
    return AGGraphSetValue();
  }
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsConditionallyBorderedPredicate()
{
  lazy protocol witness table accessor for type IsToggleButton and conformance IsToggleButton();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

unint64_t lazy protocol witness table accessor for type IsToggleButton and conformance IsToggleButton()
{
  unint64_t result = lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton;
  if (!lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton;
  if (!lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton;
  if (!lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton;
  if (!lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton;
  if (!lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton;
  if (!lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton);
  }
  return result;
}

void specialized LazySubviewPrefetcher.updateValue()(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(_DWORD *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = v4;
  unsigned int v9 = *v4;
  uint64_t v10 = *((void *)v8 + 4);
  uint64_t Value = AGGraphGetValue();
  uint64_t v12 = *(void *)Value;
  if (v10 != *(void *)Value)
  {
    uint64_t v13 = *(void *)(Value + 8);
    uint64_t v14 = *(unsigned __int8 *)(Value + 16);
    *((void *)v8 + 4) = v12;
    type metadata accessor for LazyLayoutViewCache();
    if ((*(unsigned char *)(*(void *)AGGraphGetValue() + 216) & v14) != 0)
    {
      unsigned int v36 = v9;
      lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
      if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0) {
        goto LABEL_9;
      }
      if (one-time initialization token for log != -1) {
        goto LABEL_26;
      }
      while (1)
      {
        uint64_t v15 = type metadata accessor for Logger();
        __swift_project_value_buffer(v15, (uint64_t)static Log.LazyLayoutPrefetch.log);
        uint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v16, v17))
        {
          unint64_t v35 = a2;
          uint64_t v18 = swift_slowAlloc();
          uint64_t v34 = swift_slowAlloc();
          uint64_t v38 = v34;
          *(_DWORD *)uint64_t v18 = 136446466;
          uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v35, &v38);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v18 + 12) = 2082;
          uint64_t v19 = MEMORY[0x18C10AA50](v36, a3);
          uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v38);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1872C6000, v16, v17, "%{public}s %{public}s start prefetch", (uint8_t *)v18, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v34, -1, -1);
          uint64_t v21 = v18;
          a2 = v35;
          MEMORY[0x18C119C60](v21, -1, -1);
        }

LABEL_9:
        if (AGGraphGetCurrentAttribute() != *MEMORY[0x1E4F4E7A0]) {
          break;
        }
        __break(1u);
LABEL_26:
        swift_once();
      }
      id v22 = (id)AGGraphGetAttributeGraph();
      AGGraphGetDeadline();
      AGGraphSetDeadline();
      a4(v8, v12, v13, v14);
      AGGraphSetDeadline();

      int v23 = *((unsigned __int8 *)v8 + 56);
      if (static UserDefaultKeyedFeature.isEnabled.getter())
      {
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v24 = type metadata accessor for Logger();
        __swift_project_value_buffer(v24, (uint64_t)static Log.LazyLayoutPrefetch.log);
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = swift_slowAlloc();
          uint64_t v28 = swift_slowAlloc();
          uint64_t v40 = v28;
          *(_DWORD *)uint64_t v27 = 136446722;
          uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v40);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v27 + 12) = 2082;
          uint64_t v29 = MEMORY[0x18C10AA50](v36, a3);
          uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v40);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v27 + 22) = 2082;
          if (v23)
          {
            if (v23 == 1) {
              uint64_t v31 = 0x6863746566657270;
            }
            else {
              uint64_t v31 = 0x6574656C706D6F63;
            }
            if (v23 == 1) {
              unint64_t v32 = 0xEF7374757074754FLL;
            }
            else {
              unint64_t v32 = 0xE800000000000000;
            }
          }
          else
          {
            uint64_t v38 = 0x77656956656B616DLL;
            unint64_t v39 = 0xEA00000000002320;
            v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v33);
            swift_bridgeObjectRelease();
            uint64_t v31 = v38;
            unint64_t v32 = v39;
          }
          uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v40);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1872C6000, v25, v26, "%{public}s %{public}s end prefetch, phase=%{public}s", (uint8_t *)v27, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v28, -1, -1);
          MEMORY[0x18C119C60](v27, -1, -1);
        }
      }
    }
  }
}

ValueMetadata *type metadata accessor for SceneList()
{
  return &type metadata for SceneList;
}

ValueMetadata *type metadata accessor for SceneList.Item()
{
  return &type metadata for SceneList.Item;
}

ValueMetadata *type metadata accessor for MenuOrder.Guts()
{
  return &type metadata for MenuOrder.Guts;
}

uint64_t protocol witness for View.body.getter in conformance LazyView<A>(uint64_t a1)
{
  return LazyView.body.getter(*v1, v1[1], *(void *)(a1 + 16));
}

ValueMetadata *type metadata accessor for WindowGroupConfigurationAttributes()
{
  return &type metadata for WindowGroupConfigurationAttributes;
}

ValueMetadata *type metadata accessor for ConnectionOptionPayloadStorage()
{
  return &type metadata for ConnectionOptionPayloadStorage;
}

ValueMetadata *type metadata accessor for HoverEffectContainerModifier()
{
  return &type metadata for HoverEffectContainerModifier;
}

ValueMetadata *type metadata accessor for OutlineRootConfiguration()
{
  return &type metadata for OutlineRootConfiguration;
}

ValueMetadata *type metadata accessor for ContainerBackgroundValue.Content()
{
  return &type metadata for ContainerBackgroundValue.Content;
}

ValueMetadata *type metadata accessor for ContainerBackgroundKeys.TransparentHost()
{
  return &type metadata for ContainerBackgroundKeys.TransparentHost;
}

ValueMetadata *type metadata accessor for AnyAccessibilityAction()
{
  return &type metadata for AnyAccessibilityAction;
}

void *type metadata accessor for ButtonRepeatModifier.RepeatState()
{
  return &unk_1ED42FED0;
}

ValueMetadata *type metadata accessor for ButtonRepeatTiming.TimingEntry()
{
  return &type metadata for ButtonRepeatTiming.TimingEntry;
}

ValueMetadata *type metadata accessor for SidebarLabelStyle()
{
  return &type metadata for SidebarLabelStyle;
}

ValueMetadata *type metadata accessor for PresentationKind()
{
  return &type metadata for PresentationKind;
}

ValueMetadata *type metadata accessor for SwipeActions.Value()
{
  return &type metadata for SwipeActions.Value;
}

ValueMetadata *type metadata accessor for RootModifier()
{
  return &type metadata for RootModifier;
}

ValueMetadata *type metadata accessor for CommandsList()
{
  return &type metadata for CommandsList;
}

uint64_t base witness table accessor for GraphDelegate in _UIHostingView<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in UpdateViewDestinationRequestProcessor.PreferenceDebouncer.updateValue()(uint64_t a1)
{
  return closure #1 in UpdateViewDestinationRequestProcessor.PreferenceDebouncer.updateValue()(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void *)(v1 + 28), *(unsigned char *)(v1 + 36), *(unsigned char *)(v1 + 37), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(unsigned char *)(v1 + 72));
}

uint64_t closure #1 in UpdateViewDestinationRequestProcessor.PreferenceDebouncer.updateValue()(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a3) {
    return result;
  }
  int v14 = a4;
  int v15 = a2;
  if a4 != a2 || HIDWORD(a4) == HIDWORD(a2) || (a5 & 1) != 0 || (a6) {
    goto LABEL_15;
  }
  uint64_t v16 = *(void *)result;
  if (!*(void *)(*(void *)result + 16))
  {
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    unint64_t v43 = 0x1FFFFFFFCLL;
    uint64_t v44 = 0;
    uint64_t v46 = 0;
    uint64_t v45 = 0;
    goto LABEL_14;
  }
  swift_retain();
  outlined copy of Text.LineStyle?(a8, a9);
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a7, a8, a9, a10);
  if ((v18 & 1) == 0)
  {
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    unint64_t v43 = 0x1FFFFFFFCLL;
    uint64_t v44 = 0;
    uint64_t v46 = 0;
    uint64_t v45 = 0;
    swift_release();
    outlined consume of Text.LineStyle?(a8, a9);
    goto LABEL_14;
  }
  outlined init with copy of UpdateViewDestinationRequest(*(void *)(v16 + 56) + 160 * v17, (uint64_t)&v35);
  swift_release();
  outlined consume of Text.LineStyle?(a8, a9);
  if (v43 >> 1 == 4294967294)
  {
LABEL_14:
    unint64_t result = outlined destroy of UpdateViewDestinationRequest?((uint64_t)&v35, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
LABEL_15:
    if (a11) {
      return result;
    }
    goto LABEL_16;
  }
  outlined init with take of UpdateViewDestinationRequest((uint64_t)&v35, (uint64_t)v47);
  outlined init with take of NavigationRequest.KeyKind?((uint64_t)v48, (uint64_t)v23, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  outlined init with take of NavigationRequest.KeyKind?((uint64_t)v23, (uint64_t)v25, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  if (_s7SwiftUI15NavigationStateV12UpdateResultOWOg((uint64_t)v25) != 1 && v26 == 14)
  {
    specialized Dictionary._Variant.removeValue(forKey:)(a7, a8, a9, a10, (uint64_t)v20);
    outlined destroy of UpdateViewDestinationRequest?((uint64_t)v20, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
    return outlined destroy of UpdateViewDestinationRequest((uint64_t)v47);
  }
  unint64_t result = outlined destroy of UpdateViewDestinationRequest((uint64_t)v47);
  if ((a11 & 1) == 0)
  {
LABEL_16:
    specialized Dictionary._Variant.removeValue(forKey:)(a7, a8, a9, a10, (uint64_t)&v35);
    if (v43 >> 1 == 4294967294) {
      return outlined destroy of UpdateViewDestinationRequest?((uint64_t)&v35, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
    }
    outlined init with take of UpdateViewDestinationRequest((uint64_t)&v35, (uint64_t)v47);
    if (a6)
    {
      _s7SwiftUI19NavigationAuthorityVSgWOcTm_1((uint64_t)v47, (uint64_t)v33, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
      if (v34 == 1)
      {
        outlined destroy of UpdateViewDestinationRequest?((uint64_t)v33, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
        return outlined destroy of UpdateViewDestinationRequest((uint64_t)v47);
      }
      outlined init with take of NavigationAuthority((uint64_t)v33, (uint64_t)v21);
      outlined init with take of NavigationRequest.KeyKind?((uint64_t)v48, (uint64_t)v20, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      outlined init with take of NavigationRequest.KeyKind?((uint64_t)v20, (uint64_t)&v35, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      if (_s7SwiftUI15NavigationStateV12UpdateResultOWOg((uint64_t)&v35) == 1)
      {
        outlined destroy of NavigationAuthority((uint64_t)v21);
        return outlined destroy of UpdateViewDestinationRequest((uint64_t)v47);
      }
      v23[6] = v41;
      v23[7] = v42;
      unint64_t v24 = v43;
      v23[2] = v37;
      v23[3] = v38;
      v23[4] = v39;
      v23[5] = v40;
      v23[0] = v35;
      v23[1] = v36;
      outlined init with take of NavigationRequest.KeyKind?((uint64_t)v20, (uint64_t)v25, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      outlined retain of NavigationRequest((uint64_t)v25);
      NavigationAuthority.enqueueRequest(_:)(v23);
      uint64_t v19 = v21;
    }
    else
    {
      outlined init with take of NavigationRequest.KeyKind?((uint64_t)v48, (uint64_t)v20, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      outlined init with take of NavigationRequest.KeyKind?((uint64_t)v20, (uint64_t)&v35, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      if (_s7SwiftUI15NavigationStateV12UpdateResultOWOg((uint64_t)&v35) != 1)
      {
        if (v39 == 18)
        {
          if (v14 != v15) {
            return outlined destroy of UpdateViewDestinationRequest((uint64_t)v47);
          }
          outlined init with take of NavigationRequest.KeyKind?((uint64_t)v20, (uint64_t)v25, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
        }
        else
        {
          outlined init with take of NavigationRequest.KeyKind?((uint64_t)v20, (uint64_t)v25, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
          if (v14 != v15 && v26 == 13) {
            return outlined destroy of UpdateViewDestinationRequest((uint64_t)v47);
          }
        }
      }
      _s7SwiftUI19NavigationAuthorityVSgWOcTm_1((uint64_t)v47, (uint64_t)v31, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
      if (v32 == 1)
      {
        outlined destroy of UpdateViewDestinationRequest?((uint64_t)v31, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
        return outlined destroy of UpdateViewDestinationRequest((uint64_t)v47);
      }
      outlined init with take of NavigationAuthority((uint64_t)v31, (uint64_t)v33);
      outlined init with take of NavigationRequest.KeyKind?((uint64_t)v20, (uint64_t)v25, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      if (_s7SwiftUI15NavigationStateV12UpdateResultOWOg((uint64_t)v25) == 1)
      {
        outlined destroy of NavigationAuthority((uint64_t)v33);
        return outlined destroy of UpdateViewDestinationRequest((uint64_t)v47);
      }
      v21[6] = v28;
      v21[7] = v29;
      uint64_t v22 = v30;
      v21[2] = v25[2];
      v21[3] = v25[3];
      v21[4] = v26;
      v21[5] = v27;
      v21[0] = v25[0];
      v21[1] = v25[1];
      outlined init with take of NavigationRequest.KeyKind?((uint64_t)v20, (uint64_t)v23, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      outlined retain of NavigationRequest((uint64_t)v23);
      NavigationAuthority.enqueueRequest(_:)(v21);
      uint64_t v19 = (long long *)v33;
    }
    outlined destroy of NavigationAuthority((uint64_t)v19);
    outlined release of NavigationRequest?(v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationRequest?);
    return outlined destroy of UpdateViewDestinationRequest((uint64_t)v47);
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  swift_bridgeObjectRetain();
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, a3, a4);
  LOBYTE(a4) = v13;
  swift_bridgeObjectRelease();
  if (a4)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v6;
    uint64_t v20 = *v6;
    *uint64_t v6 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v15 = v20;
    }
    uint64_t v16 = *(void *)(v15 + 48) + 32 * v12;
    uint64_t v17 = *(void *)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
    swift_release();
    outlined consume of Text.LineStyle?(v17, v18);
    outlined init with take of UpdateViewDestinationRequest(*(void *)(v15 + 56) + 160 * v12, a5);
    specialized _NativeDictionary._delete(at:)(v12, v15);
    *uint64_t v6 = v15;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(a5 + 96) = 0u;
    *(_OWORD *)(a5 + 112) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 80) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(void *)(a5 + 128) = 0x1FFFFFFFCLL;
    *(void *)(a5 + 136) = 0;
    *(void *)(a5 + 144) = 0;
    *(void *)(a5 + 152) = 0;
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  NavigationLinkSelectionIdentifier.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, a4, v8);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v7 = a5 & ~v6;
  if ((*(void *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    uint64_t v21 = ~v6;
    unint64_t v17 = HIDWORD(a2);
    do
    {
      unsigned int v9 = (uint64_t *)(*(void *)(v5 + 48) + 32 * v7);
      uint64_t v10 = v9[1];
      uint64_t v12 = v9[2];
      uint64_t v11 = v9[3];
      if (*v9)
      {
        if (!a1) {
          goto LABEL_6;
        }
        char v13 = *(uint64_t (**)(uint64_t))(*(void *)*v9 + 176);
        swift_retain();
        outlined copy of Text.LineStyle?(v10, v12);
        swift_retain();
        swift_retain();
        LOBYTE(v13) = v13(a1);
        swift_release();
        swift_release();
        if ((v13 & 1) == 0) {
          goto LABEL_5;
        }
        if (v12 == 1)
        {
LABEL_11:
          uint64_t v14 = a3;
          if (a3 != 1) {
            goto LABEL_4;
          }
          swift_release();
          outlined consume of Text.LineStyle?(v10, 1);
          if (v11 == a4) {
            return v7;
          }
          goto LABEL_6;
        }
      }
      else
      {
        if (a1) {
          goto LABEL_6;
        }
        outlined copy of Text.LineStyle?(v9[1], v9[2]);
        if (v12 == 1) {
          goto LABEL_11;
        }
      }
      v24[0] = v10;
      v24[1] = v12;
      uint64_t v14 = a3;
      if (a3 == 1)
      {
        swift_retain();
LABEL_4:
        outlined copy of Text.LineStyle?(a2, v14);
        outlined consume of Text.LineStyle?(v10, v12);
        outlined consume of Text.LineStyle?(a2, v14);
LABEL_5:
        swift_release();
        outlined consume of Text.LineStyle?(v10, v12);
        goto LABEL_6;
      }
      v22[0] = a2;
      v22[1] = v17;
      uint64_t v23 = a3;
      swift_retain_n();
      char v15 = MEMORY[0x18C10D6E0](v24, v22);
      swift_release();
      outlined consume of Text.LineStyle?(v10, v12);
      swift_release();
      outlined consume of Text.LineStyle?(v10, v12);
      if ((v15 & 1) != 0 && v11 == a4) {
        return v7;
      }
LABEL_6:
      unint64_t v7 = (v7 + 1) & v21;
    }
    while (((*(void *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

void NavigationLinkSelectionIdentifier.hash(into:)()
{
  void (*v5)(void *__return_ptr, uint64_t);
  uint64_t v6;
  void v7[5];

  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  Swift::UInt v3 = v0[3];
  if (!*v0)
  {
    Hasher._combine(_:)(0);
    if (v4 == 1) {
      goto LABEL_3;
    }
LABEL_5:
    v7[0] = v2;
    v7[1] = v4;
    Hasher._combine(_:)(1u);
    _ViewList_ID.Canonical.hash(into:)();
    goto LABEL_6;
  }
  Hasher._combine(_:)(1u);
  uint64_t v5 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)v1 + 96);
  uint64_t v6 = swift_retain();
  v5(v7, v6);
  AnyHashable.hash(into:)();
  outlined destroy of AnyHashable((uint64_t)v7);
  swift_release();
  if (v4 != 1) {
    goto LABEL_5;
  }
LABEL_3:
  Hasher._combine(_:)(0);
LABEL_6:
  Hasher._combine(_:)(v3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoreViewRespondersModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  int v6 = *((_DWORD *)a2 + 8);
  uint64_t v7 = a2[5];
  uint64_t v8 = a2[6];
  int v9 = *((_DWORD *)a2 + 20);
  unsigned int v10 = *((_DWORD *)a2 + 9) & 0xFFFFFF7F;
  uint64_t v13 = *a2;
  int v14 = v4;
  uint64_t v15 = v5;
  uint64_t v16 = a2[3];
  int v17 = v6;
  unsigned int v18 = v10;
  uint64_t v19 = v7;
  uint64_t v20 = v8;
  long long v21 = *(_OWORD *)(a2 + 7);
  uint64_t v22 = a2[9];
  int v23 = v9;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v11 = swift_bridgeObjectRetain_n();
  a3(v11, &v13);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t View.presentationSource<A>(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.presentationSource<A>(id:configuration:)(a1, (uint64_t)closure #1 in View.presentationSource<A>(id:), 0, a2, a3, a4, a5);
}

ValueMetadata *type metadata accessor for ToggleStyleConfiguration.Label()
{
  return &type metadata for ToggleStyleConfiguration.Label;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in LabelStyleWritingModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in NavigationCommonTransformEnvironment()
{
  return &protocol witness table for NavigationCommonTransformEnvironment;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in NavigationColumnEnvironmentTransform()
{
  return &protocol witness table for NavigationColumnEnvironmentTransform;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in UpdateEnvironmentToAllowedBehaviors()
{
  return &protocol witness table for UpdateEnvironmentToAllowedBehaviors;
}

_UNKNOWN **base witness table accessor for ViewModifier in CoordinateSpaceNameModifier()
{
  return &protocol witness table for CoordinateSpaceNameModifier;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in TransformScrollIndicators()
{
  return &protocol witness table for TransformScrollIndicators;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsInHostingConfiguration()
{
  return &protocol witness table for IsInHostingConfiguration;
}

uint64_t type metadata completion function for NavigationSeedHost()
{
  return type metadata completion function for NavigationSelectionHost();
}

uint64_t key path getter for EnvironmentValues.listReorderControlVisibility : EnvironmentValues@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X3>, void (*a3)(void)@<X6>, unsigned char *a4@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
    a3();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
    a3();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a4 = v7;
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t initializeWithCopy for ScrollViewAdjustedState(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_retain();
  return a1;
}

uint64_t LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.placeSubviews(in:proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, int *a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, double a10, uint64_t a11, char a12)
{
  int v20 = *a5;
  uint64_t v21 = *((void *)a5 + 1);
  char v22 = *((unsigned char *)a5 + 16);
  char v23 = *((unsigned char *)a5 + 17);
  LODWORD(v85) = *a5;
  *((void *)&v85 + 1) = v21;
  LOBYTE(v86) = v22;
  BYTE1(v86) = v23;
  swift_bridgeObjectRetain();
  uint64_t v24 = LayoutSubviews.endIndex.getter();
  if (LayoutSubviews.endIndex.getter() < 0)
  {
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v25 = LayoutSubviews.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v24 < 0 || v25 < v24) {
    goto LABEL_29;
  }
  if (!v24) {
    return result;
  }
  if (v24 != 2)
  {
    if (v24 == 1)
    {
      BYTE1(v86) = v23;
      LayoutSubviews.subscript.getter();
      long long v85 = v81;
      LOBYTE(v86) = v82;
      static UnitPoint.topLeading.getter();
      char v84 = a4 & 1;
      return LayoutSubview.place(at:anchor:proposal:)();
    }
    goto LABEL_30;
  }
  CGFloat v68 = a9;
  LayoutSubviews.subscript.getter();
  unsigned int v74 = v81;
  unsigned int v77 = DWORD2(v81);
  LODWORD(v85) = v20;
  *((void *)&v85 + 1) = v21;
  LOBYTE(v86) = v22;
  BYTE1(v86) = v23;
  LayoutSubviews.subscript.getter();
  char v79 = v82;
  unsigned int v72 = HIDWORD(v81);
  unsigned int v73 = DWORD1(v81);
  char v71 = v82;
  LOBYTE(v85) = a2 & 1;
  LayoutSubview.dimensions(in:)();
  unsigned int v69 = DWORD1(v81);
  unsigned int v70 = v81;
  unsigned int v75 = HIDWORD(v81);
  LayoutSubview.dimensions(in:)();
  swift_retain();
  uint64_t v27 = static VerticalAlignment.firstTextBaseline.getter();
  uint64_t v59 = v86;
  uint64_t v61 = v87;
  uint64_t v28 = *((void *)&v86 + 1);
  uint64_t v64 = *((void *)&v87 + 1);
  double v29 = COERCE_DOUBLE(MEMORY[0x18C10E940](v27));
  uint64_t v67 = v85;
  if (v30) {
    goto LABEL_15;
  }
  uint64_t v31 = static VerticalAlignment.lastTextBaseline.getter();
  double v32 = COERCE_DOUBLE(MEMORY[0x18C10E940](v31));
  char v34 = v33;
  swift_release();
  if ((v34 & 1) != 0 || vabdd_f64(v29, v32) >= 0.5) {
    goto LABEL_16;
  }
  swift_retain();
  uint64_t v35 = static VerticalAlignment.firstTextBaseline.getter();
  *((void *)&v85 + 1) = v21;
  double v36 = COERCE_DOUBLE(MEMORY[0x18C10E940](v35));
  if (v37)
  {
LABEL_15:
    swift_release();
LABEL_16:
    uint64_t v42 = static VerticalAlignment.center.getter();
    goto LABEL_17;
  }
  uint64_t v38 = static VerticalAlignment.lastTextBaseline.getter();
  *((void *)&v85 + 1) = v21;
  double v39 = COERCE_DOUBLE(MEMORY[0x18C10E940](v38));
  char v41 = v40;
  swift_release();
  if ((v41 & 1) != 0 || vabdd_f64(v36, v39) >= 0.5) {
    goto LABEL_16;
  }
  uint64_t v42 = static VerticalAlignment.firstTextBaseline.getter();
LABEL_17:
  long long v85 = v81;
  unsigned int v43 = v81;
  LOBYTE(v86) = v82;
  unsigned int v58 = DWORD2(v81);
  char v84 = a4 & 1;
  uint64_t v66 = v42;
  LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.fitOnSingleLine(_:_:proposal:alignment:)((unsigned int *)&v85, a10, (uint64_t)&v81, a1, a2 & 1, a3, a4 & 1, v42, a12 & 1);
  if (v44)
  {
    *(void *)&long long v81 = __PAIR64__(v69, v43);
    *((void *)&v81 + 1) = __PAIR64__(v75, v58);
    LOBYTE(v82) = v79;
    LOBYTE(v85) = a2 & 1;
    LayoutSubview.dimensions(in:)();
    if (!(a2 & 1 | ((~a1 & 0x7FF0000000000000) == 0)))
    {
      long long v81 = v85;
      long long v82 = v86;
      long long v83 = v87;
      ViewDimensions.width.getter();
    }
    LOBYTE(v81) = a2 & 1;
    char v84 = a4 & 1;
    LayoutSubview.dimensions(in:)();
    long long v45 = v81;
    long long v46 = v82;
    long long v47 = v83;
    uint64_t v63 = *((void *)&v82 + 1);
    uint64_t v65 = v82;
    uint64_t v60 = *((void *)&v83 + 1);
    uint64_t v62 = v83;
    if (a2)
    {
      uint64_t v49 = *((void *)&v85 + 1);
      uint64_t v48 = v85;
      uint64_t v50 = *((void *)&v86 + 1);
      uint64_t v76 = v86;
      uint64_t v52 = *((void *)&v87 + 1);
      uint64_t v51 = v87;
    }
    else
    {
      ViewDimensions.width.getter();
      double v57 = v53;
      uint64_t v49 = *((void *)&v85 + 1);
      uint64_t v48 = v85;
      uint64_t v50 = *((void *)&v86 + 1);
      uint64_t v52 = *((void *)&v87 + 1);
      uint64_t v51 = v87;
      long long v81 = v85;
      uint64_t v76 = v86;
      long long v82 = v86;
      long long v83 = v87;
      ViewDimensions.width.getter();
      if (v57 + v54 < *(double *)&a1)
      {
        long long v81 = v45;
        long long v82 = v46;
        long long v83 = v47;
        ViewDimensions.width.getter();
        LOBYTE(v81) = 0;
        char v84 = a4 & 1;
        LayoutSubview.dimensions(in:)();
        swift_release();
        uint64_t v49 = *((void *)&v81 + 1);
        uint64_t v48 = v81;
        uint64_t v50 = *((void *)&v82 + 1);
        uint64_t v76 = v82;
        uint64_t v52 = *((void *)&v83 + 1);
        uint64_t v51 = v83;
      }
    }
    uint64_t v55 = static VerticalAlignment.center.getter();
    long long v81 = v45;
    *(void *)&long long v82 = v65;
    *((void *)&v82 + 1) = v63;
    *(void *)&long long v83 = v62;
    *((void *)&v83 + 1) = v60;
    MEMORY[0x18C10E980](v55);
    long long v81 = v45;
    *(void *)&long long v82 = v65;
    *((void *)&v82 + 1) = v63;
    *(void *)&long long v83 = v62;
    *((void *)&v83 + 1) = v60;
    MEMORY[0x18C10E980](v66);
    swift_retain();
    uint64_t v56 = static VerticalAlignment.center.getter();
    *(void *)&long long v81 = v48;
    *((void *)&v81 + 1) = v49;
    *(void *)&long long v82 = v76;
    *((void *)&v82 + 1) = v50;
    *(void *)&long long v83 = v51;
    *((void *)&v83 + 1) = v52;
    MEMORY[0x18C10E980](v56);
    swift_release();
    *(void *)&long long v81 = v48;
    *((void *)&v81 + 1) = v49;
    *(void *)&long long v82 = v76;
    *((void *)&v82 + 1) = v50;
    *(void *)&long long v83 = v51;
    *((void *)&v83 + 1) = v52;
    MEMORY[0x18C10E980](v66);
    *(void *)&long long v81 = __PAIR64__(v73, v74);
    *((void *)&v81 + 1) = __PAIR64__(v72, v77);
    LOBYTE(v82) = v71;
    v90.origin.x = a6;
    v90.origin.y = a7;
    v90.size.width = a8;
    v90.size.height = v68;
    CGRectGetMinX(v90);
    v91.origin.x = a6;
    v91.origin.y = a7;
    v91.size.width = a8;
    v91.size.height = v68;
    CGRectGetMidY(v91);
    static UnitPoint.leading.getter();
    char v84 = a4 & 1;
    LayoutSubview.place(at:anchor:proposal:)();
    *(void *)&long long v81 = __PAIR64__(v69, v70);
    *((void *)&v81 + 1) = __PAIR64__(v75, v58);
    LOBYTE(v82) = v79;
    v92.origin.x = a6;
    v92.origin.y = a7;
    v92.size.width = a8;
    v92.size.height = v68;
    CGRectGetMaxX(v92);
    v93.origin.x = a6;
    v93.origin.y = a7;
    v93.size.width = a8;
    v93.size.height = v68;
    CGRectGetMidY(v93);
    static UnitPoint.trailing.getter();
    char v84 = a4 & 1;
    LayoutSubview.place(at:anchor:proposal:)();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    *(void *)&long long v85 = __PAIR64__(v73, v74);
    *((void *)&v85 + 1) = __PAIR64__(v72, v77);
    LOBYTE(v86) = v71;
    static UnitPoint.topLeading.getter();
    LOBYTE(v81) = a2 & 1;
    LayoutSubview.place(at:anchor:proposal:)();
    *(void *)&long long v81 = __PAIR64__(v69, v43);
    *((void *)&v81 + 1) = __PAIR64__(v75, v58);
    LOBYTE(v82) = v79;
    v88.origin.x = a6;
    v88.origin.y = a7;
    v88.size.width = a8;
    v88.size.height = a9;
    CGRectGetMinX(v88);
    v89.origin.x = a6;
    v89.origin.y = a7;
    v89.size.width = a8;
    v89.size.height = a9;
    CGRectGetMinY(v89);
    *(void *)&long long v85 = v67;
    *((void *)&v85 + 1) = v21;
    *(void *)&long long v86 = v59;
    *((void *)&v86 + 1) = v28;
    *(void *)&long long v87 = v61;
    *((void *)&v87 + 1) = v64;
    ViewDimensions.height.getter();
    static UnitPoint.topLeading.getter();
    LOBYTE(v85) = a2 & 1;
    LayoutSubview.place(at:anchor:proposal:)();
    swift_release();
  }
  return swift_release();
}

uint64_t LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, int *a5, double a6, uint64_t a7, char a8)
{
  int v13 = *a5;
  uint64_t v14 = *((void *)a5 + 1);
  char v15 = *((unsigned char *)a5 + 16);
  char v16 = *((unsigned char *)a5 + 17);
  LODWORD(v51) = *a5;
  *((void *)&v51 + 1) = v14;
  char v52 = v15;
  char v53 = v16;
  swift_bridgeObjectRetain();
  uint64_t v17 = LayoutSubviews.endIndex.getter();
  if (LayoutSubviews.endIndex.getter() < 0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v18 = LayoutSubviews.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v17 < 0 || v18 < v17) {
    goto LABEL_22;
  }
  if (!v17) {
    return result;
  }
  if (v17 != 2)
  {
    if (v17 == 1)
    {
      char v53 = v16;
      LayoutSubviews.subscript.getter();
      long long v51 = v54;
      char v52 = v55;
      return LayoutSubview.sizeThatFits(_:)();
    }
    goto LABEL_23;
  }
  LayoutSubviews.subscript.getter();
  uint64_t v49 = a3;
  char v47 = a2;
  unsigned int v48 = HIDWORD(v54);
  LODWORD(v51) = v13;
  *((void *)&v51 + 1) = v14;
  char v52 = v15;
  char v53 = v16;
  LayoutSubviews.subscript.getter();
  unsigned int v43 = DWORD1(v54);
  unsigned int v44 = v54;
  unsigned int v42 = DWORD2(v54);
  char v46 = v55;
  LOBYTE(v51) = a2 & 1;
  LayoutSubview.dimensions(in:)();
  uint64_t v20 = v51;
  unsigned int v40 = DWORD1(v54);
  unsigned int v41 = v54;
  char v45 = v55;
  LOBYTE(v51) = a2 & 1;
  LayoutSubview.dimensions(in:)();
  long long v21 = v51;
  swift_retain();
  uint64_t v22 = static VerticalAlignment.firstTextBaseline.getter();
  *(void *)&long long v51 = v20;
  double v23 = COERCE_DOUBLE(MEMORY[0x18C10E940](v22));
  if (v24) {
    goto LABEL_16;
  }
  uint64_t v25 = static VerticalAlignment.lastTextBaseline.getter();
  *(void *)&long long v51 = v20;
  double v26 = COERCE_DOUBLE(MEMORY[0x18C10E940](v25));
  char v28 = v27;
  swift_release();
  if ((v28 & 1) != 0 || vabdd_f64(v23, v26) >= 0.5) {
    goto LABEL_17;
  }
  swift_retain();
  uint64_t v29 = static VerticalAlignment.firstTextBaseline.getter();
  long long v51 = v21;
  double v30 = COERCE_DOUBLE(MEMORY[0x18C10E940](v29));
  if (v31)
  {
LABEL_16:
    swift_release();
LABEL_17:
    unsigned int v36 = HIDWORD(v54);
    unsigned int v37 = DWORD2(v54);
    uint64_t v38 = static VerticalAlignment.center.getter();
    goto LABEL_18;
  }
  uint64_t v32 = static VerticalAlignment.lastTextBaseline.getter();
  long long v51 = v21;
  double v33 = COERCE_DOUBLE(MEMORY[0x18C10E940](v32));
  char v35 = v34;
  swift_release();
  if ((v35 & 1) != 0 || vabdd_f64(v30, v33) >= 0.5) {
    goto LABEL_17;
  }
  unsigned int v36 = HIDWORD(v54);
  unsigned int v37 = DWORD2(v54);
  uint64_t v38 = static VerticalAlignment.firstTextBaseline.getter();
LABEL_18:
  long long v51 = v54;
  char v52 = v55;
  *((void *)&v54 + 1) = __PAIR64__(v36, v37);
  LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.fitOnSingleLine(_:_:proposal:alignment:)((unsigned int *)&v51, a6, (uint64_t)&v54, a1, v47 & 1, v49, a4 & 1, v38, a8 & 1);
  if ((v39 & 1) == 0)
  {
    *(void *)&long long v51 = __PAIR64__(v43, v44);
    *((void *)&v51 + 1) = __PAIR64__(v48, v42);
    char v52 = v46;
    LOBYTE(v54) = v47 & 1;
    LayoutSubview.sizeThatFits(_:)();
    *(void *)&long long v51 = __PAIR64__(v40, v41);
    *((void *)&v51 + 1) = __PAIR64__(v36, v37);
    char v52 = v45;
    LOBYTE(v54) = v47 & 1;
    LayoutSubview.sizeThatFits(_:)();
  }
  swift_release();
  return swift_release();
}

double LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.fitOnSingleLine(_:_:proposal:alignment:)(unsigned int *a1, double a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, char a9)
{
  unsigned int v11 = *a1;
  unsigned int v10 = a1[1];
  unsigned int v13 = a1[2];
  unsigned int v12 = a1[3];
  char v14 = *((unsigned char *)a1 + 16);
  static ProposedViewSize.unspecified.getter();
  LOBYTE(v36) = v15 & 1;
  LayoutSubview.dimensions(in:)();
  unint64_t v16 = v36;
  static ProposedViewSize.unspecified.getter();
  LOBYTE(v36) = v17 & 1;
  char v35 = v18 & 1;
  LayoutSubview.dimensions(in:)();
  unint64_t v20 = v36;
  unint64_t v19 = v37;
  long long v21 = v38;
  long long v22 = v39;
  unint64_t v36 = v16;
  unint64_t v31 = v20;
  unint64_t v32 = v37;
  long long v33 = v38;
  long long v34 = v39;
  double v23 = LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.calculateSize(_:_:alignment:)(a2, (uint64_t)&v36, (uint64_t)&v31, a8);
  if (a5) {
    double v24 = INFINITY;
  }
  else {
    double v24 = *(double *)&a4;
  }
  if (v23 <= v24)
  {
    swift_release();
  }
  else
  {
    if ((a9 & 1) == 0)
    {
      swift_release();
      swift_release();
      return v23;
    }
    unint64_t v36 = v20;
    unint64_t v37 = v19;
    long long v38 = v21;
    long long v39 = v22;
    ViewDimensions.width.getter();
    unint64_t v31 = __PAIR64__(v10, v11);
    unint64_t v32 = __PAIR64__(v12, v13);
    LOBYTE(v33) = v14;
    LOBYTE(v36) = 0;
    char v35 = a7 & 1;
    LayoutSubview.dimensions(in:)();
    unint64_t v31 = v20;
    unint64_t v32 = v19;
    long long v33 = v21;
    long long v34 = v22;
    double v23 = LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.calculateSize(_:_:alignment:)(a2, (uint64_t)&v36, (uint64_t)&v31, a8);
    swift_release();
    swift_release();
  }
  swift_release();
  return v23;
}

double LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.calculateSize(_:_:alignment:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = static VerticalAlignment.center.getter();
  MEMORY[0x18C10E980](v5);
  MEMORY[0x18C10E980](a4);
  uint64_t v6 = static VerticalAlignment.center.getter();
  MEMORY[0x18C10E980](v6);
  MEMORY[0x18C10E980](a4);
  ViewDimensions.width.getter();
  double v11 = v7;
  ViewDimensions.width.getter();
  double v10 = v8;
  ViewDimensions.height.getter();
  ViewDimensions.height.getter();
  ViewDimensions.height.getter();
  return v11 + v10 + a1;
}

uint64_t type metadata completion function for _InternalHoverEffectBox()
{
  return swift_initClassMetadata2();
}

unsigned char *FlipForRTLDisplayList.value.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(_DWORD *)(v1 + 24) == *MEMORY[0x1E4F4E7A0])
  {
    DisplayList.init()();
    uint64_t v3 = v12;
    __int16 v4 = v13;
    char v5 = v14;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v3 = *(void *)Value;
    __int16 v4 = *(_WORD *)(Value + 8);
    char v5 = *(unsigned char *)(Value + 10);
    swift_bridgeObjectRetain();
  }
  if (DisplayList.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    return (unsigned char *)DisplayList.init()();
  }
  else
  {
    uint64_t result = (unsigned char *)AGGraphGetValue();
    int v8 = *result;
    if (v8 == 2 || (uint64_t result = (unsigned char *)AGGraphGetValue(), ((v8 & 1) == 0) == *result))
    {
      *(void *)a1 = v3;
      *(_WORD *)(a1 + 8) = v4;
      *(unsigned char *)(a1 + 10) = v5;
    }
    else
    {
      AGGraphGetValue();
      ViewSize.width.getter();
      uint64_t v10 = v9;
      AGGraphGetValue();
      MEMORY[0x18C10C240]();
      AGGraphGetValue();
      MEMORY[0x18C10C240]();
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = 0xBFF0000000000000;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0;
      *(void *)(v11 + 40) = 0x3FF0000000000000;
      *(void *)(v11 + 48) = v10;
      *(_OWORD *)(v11 + 56) = 0u;
      *(_OWORD *)(v11 + 72) = 0u;
      *(unsigned char *)(v11 + 88) = 0;
      AGGraphGetValue();
      MEMORY[0x18C114450]();
      DisplayList.Version.init(forUpdate:)();
      DisplayList.Item.init(_:frame:identity:version:)();
      return (unsigned char *)DisplayList.init(_:)();
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SubscriptionView(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 <= v5) {
    unsigned int v9 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + v8;
  uint64_t v11 = *(void *)(v6 + 64) + 7;
  if (v9 >= a2)
  {
LABEL_27:
    if (v5 == v9)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, void))(v4 + 48))(result, v5, *(void *)(a3 + 24));
    }
    else
    {
      uint64_t v21 = (v10 + result) & ~v8;
      if (v7 == v9)
      {
        return (*(uint64_t (**)(uint64_t))(v6 + 48))(v21);
      }
      else
      {
        unint64_t v22 = *(void *)((v11 + v21) & 0xFFFFFFFFFFFFFFF8);
        if (v22 >= 0xFFFFFFFF) {
          LODWORD(v22) = -1;
        }
        return (v22 + 1);
      }
    }
  }
  else
  {
    unint64_t v12 = ((v11 + (v10 & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v13 = a2 - v9;
    uint64_t v14 = v12 & 0xFFFFFFF8;
    if ((v12 & 0xFFFFFFF8) != 0) {
      unsigned int v15 = 2;
    }
    else {
      unsigned int v15 = v13 + 1;
    }
    if (v15 >= 0x10000) {
      unsigned int v16 = 4;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v15 < 0x100) {
      unsigned int v16 = 1;
    }
    if (v15 >= 2) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    switch(v17)
    {
      case 1:
        int v18 = *(unsigned __int8 *)(result + v12);
        if (!v18) {
          goto LABEL_27;
        }
        goto LABEL_24;
      case 2:
        int v18 = *(unsigned __int16 *)(result + v12);
        if (!v18) {
          goto LABEL_27;
        }
        goto LABEL_24;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v18 = *(_DWORD *)(result + v12);
        if (!v18) {
          goto LABEL_27;
        }
LABEL_24:
        int v19 = v18 - 1;
        if (v14)
        {
          int v19 = 0;
          int v20 = *(_DWORD *)result;
        }
        else
        {
          int v20 = 0;
        }
        uint64_t result = v9 + (v20 | v19) + 1;
        break;
      default:
        goto LABEL_27;
    }
  }
  return result;
}

uint64_t type metadata completion function for UIViewRepresentableContext()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTag for ProgressView.Base(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v5 = *(void *)(v4 + 64)
     + ((*(void *)(v4 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = 10;
  if (v5 + 1 > 0xA) {
    uint64_t v6 = v5 + 1;
  }
  uint64_t v7 = *(void *)(*(void *)(a2 + 16) - 8);
  unint64_t v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = v9 + 1;
  }
  uint64_t v11 = *(void *)(*(void *)(a2 + 24) - 8);
  unint64_t v12 = (v10 + *(unsigned __int8 *)(v11 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = *(void *)(v11 + 64);
  if (!*(_DWORD *)(v11 + 84)) {
    ++v13;
  }
  unint64_t v14 = v13 + v12;
  if (v14 <= 0x40) {
    unint64_t v14 = 64;
  }
  uint64_t result = a1[v14];
  if (result >= 2)
  {
    if (v14 <= 3) {
      uint64_t v16 = v14;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a1;
        goto LABEL_19;
      case 2:
        int v17 = *(unsigned __int16 *)a1;
        goto LABEL_19;
      case 3:
        int v17 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_19;
      case 4:
        int v17 = *(_DWORD *)a1;
LABEL_19:
        unsigned int v18 = (v17 | ((result - 2) << (8 * v14))) + 2;
        unsigned int v19 = v17 + 2;
        if (v14 >= 4) {
          uint64_t result = v19;
        }
        else {
          uint64_t result = v18;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

unint64_t protocol witness for static UserDefaultKeyedFeature.key.getter in conformance InferredToolbarUserDefaultFeature()
{
  return 0xD000000000000021;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in RefreshScopeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t closure #1 in PickerOption._identifiedView.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = v8;
  v14[1] = v9;
  v14[2] = v10;
  v14[3] = v11;
  uint64_t v12 = type metadata accessor for PickerOption();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v12 + 52));
  static ViewBuilder.buildExpression<A>(_:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a3);
}

uint64_t PickerOption.init(value:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v23 = a6;
  uint64_t v13 = *(void *)(a4 - 8);
  v14.n128_f64[0] = MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v18 + 16))(a7, a1, v17, v14);
  a2(v19);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, a3);
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = v23;
  uint64_t v20 = type metadata accessor for PickerOption();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a7 + *(int *)(v20 + 52), v16, a4);
}

uint64_t type metadata accessor for PickerOption()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationColumnEnvironmentTransform(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationColumnEnvironmentTransform(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance NavigationColumnEnvironmentTransform()
{
  lazy protocol witness table accessor for type NavigationColumnEnvironmentTransform and conformance NavigationColumnEnvironmentTransform();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

unint64_t lazy protocol witness table accessor for type NavigationColumnEnvironmentTransform and conformance NavigationColumnEnvironmentTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationColumnEnvironmentTransform and conformance NavigationColumnEnvironmentTransform;
  if (!lazy protocol witness table cache variable for type NavigationColumnEnvironmentTransform and conformance NavigationColumnEnvironmentTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationColumnEnvironmentTransform and conformance NavigationColumnEnvironmentTransform);
  }
  return result;
}

uint64_t View._fullScreenSheet<A>(isPresented:onDismiss:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return View.sheet<A>(isPresented:onDismiss:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 4);
}

uint64_t View.fullScreenCover<A, B>(item:onDismiss:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return View.sheet<A, B>(item:onDismiss:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 1u);
}

uint64_t View.formSheet<A>(isPresented:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a6;
  v16[3] = a7;
  v16[4] = a8;
  v16[5] = a9;
  v16[6] = a4;
  v16[7] = a5;
  type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, MEMORY[0x1E4F41108]);
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v32 = a9;
  unint64_t v33 = lazy protocol witness table accessor for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>();
  uint64_t WitnessTable = swift_getWitnessTable();
  SheetPresentationModifier<>.init(isPresented:onDismiss:sheetContent:placement:drawsBackground:)(a1, a2, a3, 0, 0, (unint64_t)partial apply for closure #1 in View.formSheet<A>(isPresented:content:), (unint64_t)v16, 2, (uint64_t)v41, 1, v17, WitnessTable);
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = a6;
  v19[3] = a7;
  v19[4] = a8;
  v19[5] = a9;
  v19[6] = a4;
  v19[7] = a5;
  SheetPresentationModifier<>.init(isPresented:onDismiss:sheetContent:placement:drawsBackground:)(a1, a2, a3, 0, 0, (unint64_t)partial apply for closure #1 in View.formSheet<A>(isPresented:content:), (unint64_t)v19, 0, (uint64_t)v30, 1, v17, WitnessTable);
  type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  uint64_t v21 = v20;
  uint64_t v22 = lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  *(void *)&long long v34 = v17;
  *((void *)&v34 + 1) = v21;
  *(void *)&long long v35 = WitnessTable;
  *((void *)&v35 + 1) = v22;
  type metadata accessor for SheetPresentationModifier();
  swift_getWitnessTable();
  uint64_t v23 = MEMORY[0x1E4F40170];
  uint64_t v24 = MEMORY[0x1E4F40178];
  StaticIf<>.init<A>(idiom:then:else:)();
  v41[4] = v38;
  v41[5] = v39;
  v42[0] = v40[0];
  *(_OWORD *)((char *)v42 + 11) = *(_OWORD *)((char *)v40 + 11);
  v41[0] = v34;
  v41[1] = v35;
  v41[2] = v36;
  v41[3] = v37;
  v30[4] = v38;
  v30[5] = v39;
  v31[0] = v40[0];
  *(_OWORD *)((char *)v31 + 11) = *(_OWORD *)((char *)v40 + 11);
  v30[0] = v34;
  v30[1] = v35;
  v30[2] = v36;
  v30[3] = v37;
  type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<PadInterfaceIdiom>, v24, v23, MEMORY[0x1E4F40C60]);
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<PadInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  uint64_t v25 = type metadata accessor for StaticIf();
  MEMORY[0x18C113660](v30, a6, v25, a8);
  return outlined release of StaticIf<InterfaceIdiomPredicate<PadInterfaceIdiom>, SheetPresentationModifier<ModifiedContent<A1, _PreferenceTransformModifier<PresentationOptionsPreferenceKey>>, NullSheetAnchor<SheetPreference.Key>>, SheetPresentationModifier<ModifiedContent<A1, _PreferenceTransformModifier<PresentationOptionsPreferenceKey>>, NullSheetAnchor<SheetPreference.Key>>>((uint64_t)v41);
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, MEMORY[0x1E4F41108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t View.fullScreenCover<A>(isPresented:onDismiss:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return View.sheet<A>(isPresented:onDismiss:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 1);
}

uint64_t View.sheet<A, B>(item:onDismiss:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return View.sheet<A, B>(item:onDismiss:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0);
}

uint64_t View.sheet<A, B>(item:onDismiss:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t v39 = a6;
  uint64_t v30 = a8;
  uint64_t v31 = a1;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v34 = a3;
  uint64_t v32 = a2;
  uint64_t v37 = a9;
  int v33 = a13;
  uint64_t v38 = a10;
  type metadata accessor for Optional();
  uint64_t v14 = type metadata accessor for Binding();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v30 - v16;
  type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  uint64_t v19 = v18;
  uint64_t v20 = lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  uint64_t v21 = v30;
  uint64_t v40 = a7;
  uint64_t v41 = v30;
  uint64_t v42 = v19;
  uint64_t v43 = a11;
  uint64_t v44 = a12;
  uint64_t v45 = v20;
  uint64_t v22 = type metadata accessor for ItemSheetPresentationModifier();
  uint64_t v23 = *(void *)(v22 - 8);
  double v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v30 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v17, v31, v14, v24);
  uint64_t v27 = (uint64_t)v17;
  uint64_t v28 = v32;
  ItemSheetPresentationModifier<>.init(item:onDismiss:sheetContent:placement:drawsBackground:)(v27, v32, v34, v35, v36, v33, 1, a7, (uint64_t)v26, v21);
  outlined copy of AppIntentExecutor?(v28);
  swift_retain();
  MEMORY[0x18C113660](v26, v39, v22, v38);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v26, v22);
}

uint64_t destroy for ItemSheetPresentationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 15;
  swift_release();
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v10 = a1 + *(void *)(v7 + 64) + ((v8 + 16) & ~v8);
  if (!*(_DWORD *)(v7 + 84)) {
    ++v10;
  }
  uint64_t v11 = (void *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v11 >= 0xFFFFFFFFuLL) {
    swift_release();
  }
  swift_release();
  uint64_t v12 = *(void *)(*(void *)(a2 + 32) - 8);
  uint64_t v13 = *(uint64_t (**)(unint64_t))(v12 + 8);
  unint64_t v14 = ((((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v12 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);

  return v13(v14);
}

uint64_t ItemSheetPresentationModifier<>.init(item:onDismiss:sheetContent:placement:drawsBackground:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  type metadata accessor for NullSheetAnchor<SheetPreference.Key>(0, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  uint64_t v14 = v13;
  lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  return ItemSheetPresentationModifier.init(item:onDismiss:sheetContent:placement:drawsBackground:anchorProvider:)(a1, a2, a3, a4, a5, a6, a7, v15, a9, a8, a10, v14);
}

uint64_t View.sheet<A>(isPresented:onDismiss:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return View.sheet<A>(isPresented:onDismiss:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0);
}

uint64_t View.sheet<A>(isPresented:onDismiss:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  SheetPresentationModifier<>.init(isPresented:onDismiss:sheetContent:placement:drawsBackground:)(a1, a2, a3, a4, a5, a6, a7, a12, (uint64_t)v18, 1, a9, a11);
  v16[0] = v18[0];
  v16[1] = v18[1];
  v17[0] = v19[0];
  *(_OWORD *)((char *)v17 + 11) = *(_OWORD *)((char *)v19 + 11);
  swift_retain();
  swift_retain();
  outlined copy of AppIntentExecutor?(a4);
  type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  swift_retain();
  uint64_t v14 = type metadata accessor for SheetPresentationModifier();
  MEMORY[0x18C113660](v16, a8, v14, a10);
  return outlined release of SheetPresentationModifier<A1, NullSheetAnchor<SheetPreference.Key>>((uint64_t)v18);
}

__n128 SheetPresentationModifier<>.init(isPresented:onDismiss:sheetContent:placement:drawsBackground:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12)
{
  v27.n128_u64[0] = a6;
  v27.n128_u64[1] = a7;
  type metadata accessor for NullSheetAnchor<SheetPreference.Key>(0, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  char v31 = a3;
  *(void *)&long long v32 = a4;
  *((void *)&v32 + 1) = a5;
  __n128 v33 = v27;
  char v34 = a8;
  char v35 = a10;
  uint64_t v37 = a11;
  uint64_t v38 = v17;
  uint64_t v39 = a12;
  uint64_t v40 = lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  uint64_t v18 = type metadata accessor for SheetPresentationModifier();
  (*(void (**)(char *))(*(void *)(v38 - 8) + 32))((char *)&v29 + *(int *)(v18 + 68));
  *((unsigned char *)&v29 + *(int *)(v18 + 72)) = 2;
  uint64_t v19 = v30;
  char v20 = v31;
  char v21 = v34;
  char v22 = v35;
  char v23 = v36;
  long long v25 = v32;
  __n128 result = v33;
  *(void *)a9 = v29;
  *(void *)(a9 + 8) = v19;
  *(unsigned char *)(a9 + 16) = v20;
  *(_OWORD *)(a9 + 24) = v25;
  *(__n128 *)(a9 + 40) = result;
  *(unsigned char *)(a9 + 56) = v21;
  *(unsigned char *)(a9 + 57) = v22;
  *(unsigned char *)(a9 + 58) = v23;
  return result;
}

uint64_t lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined release of SheetPresentationModifier<A1, NullSheetAnchor<SheetPreference.Key>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  swift_release();
  return a1;
}

uint64_t ItemSheetPresentationModifier.init(item:onDismiss:sheetContent:placement:drawsBackground:anchorProvider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  type metadata accessor for Optional();
  uint64_t v18 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(a9, a1, v18);
  uint64_t v19 = (int *)type metadata accessor for ItemSheetPresentationModifier();
  char v20 = (void *)(a9 + v19[17]);
  *char v20 = a2;
  v20[1] = a3;
  char v21 = (void *)(a9 + v19[18]);
  *char v21 = a4;
  v21[1] = a5;
  *(unsigned char *)(a9 + v19[19]) = a6;
  *(unsigned char *)(a9 + v19[20]) = a7;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32))(a9 + v19[21], a8, a12);
}

uint64_t type metadata accessor for ItemSheetPresentationModifier()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<PadInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type InterfaceIdiomPredicate<PadInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>;
  if (!lazy protocol witness table cache variable for type InterfaceIdiomPredicate<PadInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>)
  {
    type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<PadInterfaceIdiom>, MEMORY[0x1E4F40178], MEMORY[0x1E4F40170], MEMORY[0x1E4F40C60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<PadInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>);
  }
  return result;
}

uint64_t outlined release of StaticIf<InterfaceIdiomPredicate<PadInterfaceIdiom>, SheetPresentationModifier<ModifiedContent<A1, _PreferenceTransformModifier<PresentationOptionsPreferenceKey>>, NullSheetAnchor<SheetPreference.Key>>, SheetPresentationModifier<ModifiedContent<A1, _PreferenceTransformModifier<PresentationOptionsPreferenceKey>>, NullSheetAnchor<SheetPreference.Key>>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 88);
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  swift_release();
  return a1;
}

uint64_t type metadata completion function for ActionDispatcherSubscriber()
{
  uint64_t result = type metadata accessor for CombineIdentifier();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t downloadURL(_:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for URL();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](downloadURL(_:), 0, 0);
}

uint64_t partial apply for closure #1 in static ContainerBackgroundRendererModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static ContainerBackgroundRendererModifier._makeView(modifier:inputs:body:)(a1);
}

uint64_t instantiation function for generic protocol witness table for AccessibilityTraitsModifier<A>.ChildModifier(uint64_t a1)
{
  return instantiation function for generic protocol witness table for AccessibilityLabelModifier<A>.ChildModifier(a1);
}

uint64_t destroy for ScrollViewAdjustedState()
{
  return swift_release();
}

uint64_t closure #9 in static _NavigationSplitReader._makeView(view:inputs:)(uint64_t a1)
{
  return a1 + 79;
}

uint64_t closure #7 in static _NavigationSplitReader._makeView(view:inputs:)(uint64_t a1)
{
  return a1 + 63;
}

uint64_t closure #6 in static _NavigationSplitReader._makeView(view:inputs:)(uint64_t a1)
{
  return a1 + 39;
}

uint64_t closure #8 in static _NavigationSplitReader._makeView(view:inputs:)(uint64_t a1)
{
  return a1 + 71;
}

uint64_t partial apply for closure #1 in static NavigableListModifier._makeInputs(modifier:inputs:)(uint64_t a1)
{
  return closure #1 in static NavigableListModifier._makeInputs(modifier:inputs:)(a1);
}

uint64_t partial apply for closure #2 in static NavigableListModifier._makeInputs(modifier:inputs:)(uint64_t a1)
{
  return closure #2 in static NavigableListModifier._makeInputs(modifier:inputs:)(a1);
}

uint64_t partial apply for closure #3 in static NavigableListModifier._makeInputs(modifier:inputs:)(uint64_t a1)
{
  return closure #3 in static NavigableListModifier._makeInputs(modifier:inputs:)(a1);
}

uint64_t partial apply for implicit closure #1 in static SearchToolbarItem._makeToolbar(content:inputs:)()
{
  return implicit closure #1 in static SearchToolbarItem._makeToolbar(content:inputs:)();
}

uint64_t partial apply for implicit closure #1 in static BarItemModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static BarItemModifier._makeView(modifier:inputs:body:)();
}

void type metadata accessor for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>)()
{
  if (!lazy cache variable for type metadata for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>))
  {
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for StackPlacement<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for PlacementProperties<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlacementProperties);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>));
    }
  }
}

double closure #3 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t *a1@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X1>, double *a3@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v22 = *a1;
  int v23 = v5;
  long long v25 = *(_OWORD *)(a1 + 3);
  uint64_t v24 = v6;
  uint64_t v26 = v7;
  uint64_t v27 = v8;
  long long v28 = *(_OWORD *)(a1 + 7);
  long long v29 = *(_OWORD *)(a1 + 9);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _CustomHoverEffectInputs.removeContextFromEnvironment()();
  uint64_t v11 = v22;
  int v12 = v23;
  uint64_t v13 = v6;
  long long v14 = v25;
  uint64_t v15 = v7;
  uint64_t v16 = v8;
  long long v17 = v28;
  uint64_t v18 = v29;
  int v19 = DWORD2(v29);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v9 = swift_bridgeObjectRetain();
  a2(&v20, v9, &v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  *(void *)a3 = v20;
  double result = v21;
  a3[1] = v21;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityAttachmentModifier(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier();
  unint64_t result = lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityContainerModifier(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier();
  unint64_t result = lazy protocol witness table accessor for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t closure #1 in NavigationItemAdaptorModifier.MakeAdaptor.updateValue()()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  return specialized Array.append<A>(contentsOf:)(v0);
}

_DWORD *specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return UpdateViewCache.updateValue()();
}

_DWORD *UpdateViewCache.updateValue()()
{
  uint64_t v1 = v0;
  int v2 = *(_DWORD *)(v0 + 16);
  unint64_t result = (_DWORD *)AGGraphGetValue();
  if (v2 != *result >> 1)
  {
    uint64_t v4 = *(void *)(v1 + 8);
    if (!v4)
    {
      __break(1u);
      goto LABEL_9;
    }
    (*(void (**)(void))(*(void *)v4 + 264))();
    *(_DWORD *)(v1 + 16) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  type metadata accessor for LazyLayoutViewCache();
  unint64_t result = (_DWORD *)AGGraphGetOutputValue();
  if (result) {
    return result;
  }
  if (!*(void *)(v1 + 8))
  {
LABEL_9:
    __break(1u);
    return result;
  }
  return (_DWORD *)AGGraphSetOutputValue();
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.setter in conformance EnableKeyboardTrackingElement(char a1)
{
  uint64_t result = swift_beginAccess();
  static EnableKeyboardTrackingElement.cacheduint64_t Value = a1;
  return result;
}

uint64_t _LabeledContentStyleModifier.styleBody(configuration:)(char *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v10 = MEMORY[0x1F4188790](v9);
  int v12 = &v15[-v11];
  char v16 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 24))(&v16, v4, v3, v10);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v13 = *(void (**)(unsigned char *, uint64_t))(v6 + 8);
  v13(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(unsigned char *, uint64_t))v13)(v12, AssociatedTypeWitness);
}

uint64_t destroy for LeadingTrailingLabeledContentStyle_Phone._Body(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  outlined consume of Environment<CGFloat?>.Content(*(void *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), *(unsigned char *)(a1 + 65));
  outlined consume of Environment<ListItemTint?>.Content(*(void *)(a1 + 72), *(unsigned __int8 *)(a1 + 80), *(unsigned char *)(a1 + 81));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 88), *(unsigned char *)(a1 + 96));
  uint64_t v2 = *(void *)(a1 + 104);
  char v3 = *(unsigned char *)(a1 + 112);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

__n128 protocol witness for LabeledContentStyle.makeBody(configuration:) in conformance LeadingTrailingLabeledContentStyle_Phone@<Q0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  closure #1 in closure #1 in LeadingTrailingLabeledContentStyle_Phone.makeBody(configuration:)(*a1, (uint64_t)v11);
  closure #2 in closure #1 in LeadingTrailingLabeledContentStyle_Phone.makeBody(configuration:)(v3, (uint64_t)v12 + 8);
  v26[0] = v13[0];
  *(_OWORD *)((char *)v26 + 9) = *(_OWORD *)((char *)v13 + 9);
  long long v22 = v12[1];
  long long v23 = v12[2];
  long long v24 = v12[3];
  long long v25 = v12[4];
  long long v18 = v11[4];
  long long v19 = v11[5];
  long long v20 = v11[6];
  long long v21 = v12[0];
  long long v14 = v11[0];
  long long v15 = v11[1];
  long long v16 = v11[2];
  __n128 v17 = (__n128)v11[3];
  long long v4 = v26[0];
  *(_OWORD *)(a2 + 192) = v12[5];
  *(_OWORD *)(a2 + 208) = v4;
  *(_OWORD *)(a2 + 217) = *(_OWORD *)((char *)v26 + 9);
  long long v5 = v23;
  *(_OWORD *)(a2 + 128) = v22;
  *(_OWORD *)(a2 + 144) = v5;
  long long v6 = v25;
  *(_OWORD *)(a2 + 160) = v24;
  *(_OWORD *)(a2 + 176) = v6;
  long long v7 = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = v7;
  long long v8 = v21;
  *(_OWORD *)(a2 + 96) = v20;
  *(_OWORD *)(a2 + 112) = v8;
  long long v9 = v15;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v9;
  __n128 result = v17;
  *(_OWORD *)(a2 + 32) = v16;
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double closure #1 in closure #1 in LeadingTrailingLabeledContentStyle_Phone.makeBody(configuration:)@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = swift_getKeyPath();
  uint64_t v6 = swift_getKeyPath();
  uint64_t v7 = swift_getKeyPath();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  double result = v13;
  *(unsigned char *)a2 = a1;
  *(unsigned char *)(a2 + 1) = 1;
  *(void *)(a2 + 8) = v9;
  *(unsigned char *)(a2 + 16) = v10;
  *(void *)(a2 + 24) = v11;
  *(unsigned char *)(a2 + 32) = v12;
  *(double *)(a2 + 40) = v13;
  *(unsigned char *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = KeyPath;
  *(_WORD *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = v5;
  *(_WORD *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = v6;
  *(unsigned char *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = v7;
  *(unsigned char *)(a2 + 112) = 0;
  return result;
}

double closure #2 in closure #1 in LeadingTrailingLabeledContentStyle_Phone.makeBody(configuration:)@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = swift_getKeyPath();
  uint64_t v6 = swift_getKeyPath();
  uint64_t v7 = swift_getKeyPath();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  double result = v13;
  *(unsigned char *)a2 = a1;
  *(unsigned char *)(a2 + 1) = 0;
  *(void *)(a2 + 8) = v9;
  *(unsigned char *)(a2 + 16) = v10;
  *(void *)(a2 + 24) = v11;
  *(unsigned char *)(a2 + 32) = v12;
  *(double *)(a2 + 40) = v13;
  *(unsigned char *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = KeyPath;
  *(_WORD *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = v5;
  *(_WORD *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = v6;
  *(unsigned char *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = v7;
  *(unsigned char *)(a2 + 112) = 0;
  return result;
}

uint64_t AutomaticLabeledContentStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(unsigned __int8 *)(v1 + 8);
  uint64_t KeyPath = swift_getKeyPath();
  outlined copy of Environment<Bool>.Content(v3, v4);
  int v6 = specialized Environment.wrappedValue.getter(v3, v4);
  uint64_t result = outlined consume of Environment<Bool?>.Content(v3, v4);
  *(unsigned char *)a1 = v6 == 2;
  *(void *)(a1 + 8) = KeyPath;
  *(_WORD *)(a1 + 16) = 512;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 1;
  return result;
}

uint64_t @objc DragAndDropBridge.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();

  swift_release();
  _sypSgWOhTm_6(a1 + direct field offset for DragAndDropBridge.activeDrop, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)(a1 + direct field offset for DragAndDropBridge.onSessionBegan));
  uint64_t v2 = *(void *)(a1 + direct field offset for DragAndDropBridge.onSessionEnded);

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
}

uint64_t AlwaysOnBridge.__deallocating_deinit()
{
  AlwaysOnBridge.deinit();

  return swift_deallocClassInstance();
}

uint64_t AlwaysOnBridge.deinit()
{
  swift_unknownObjectWeakDestroy();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t type metadata completion function for ContextMenuResponder()
{
  return swift_initClassMetadata2();
}

{
  return type metadata completion function for ContextMenuResponder();
}

ValueMetadata *type metadata accessor for LabeledContentStyleConfiguration.Content()
{
  return &type metadata for LabeledContentStyleConfiguration.Content;
}

Swift::Void __swiftcall LazyLayoutViewCache.updateItemPhases()()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v3 = v1 + 64;
  uint64_t v2 = v4;
  uint64_t v5 = 1 << *(unsigned char *)(*(void *)(v0 + 160) + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  uint64_t v7 = v6 & v2;
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v7)
    {
      v7 &= v7 - 1;
      goto LABEL_5;
    }
    int64_t v11 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v11 >= v8) {
      goto LABEL_21;
    }
    uint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v9;
    if (!v12)
    {
      int64_t v9 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_21;
      }
      uint64_t v12 = *(void *)(v3 + 8 * v9);
      if (!v12)
      {
        int64_t v9 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_21;
        }
        uint64_t v12 = *(void *)(v3 + 8 * v9);
        if (!v12) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v7 = (v12 - 1) & v12;
LABEL_5:
    uint64_t v10 = swift_retain();
    LazyLayoutViewCache.updateItemPhase(_:)(v10);
    swift_release();
  }
  int64_t v13 = v11 + 3;
  if (v13 >= v8)
  {
LABEL_21:
    swift_release();
    return;
  }
  uint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    int64_t v9 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v9 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_21;
    }
    uint64_t v12 = *(void *)(v3 + 8 * v9);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
}

uint64_t LazyLayoutViewCache.updateItemPhase(_:)(uint64_t a1)
{
  uint64_t result = AGSubgraphIsValid();
  if (result)
  {
    int v4 = *(_DWORD *)(a1 + 192);
    int v5 = *(_DWORD *)(v1 + 208);
    uint64_t result = AGGraphGetValue();
    int v6 = *(unsigned __int8 *)(result + 4);
    if (v4 == v5)
    {
      if (v6 == 1) {
        return result;
      }
      return AGGraphSetValue();
    }
    if (*(unsigned char *)(result + 4))
    {
      uint64_t v7 = (unsigned char *)(a1 + 280);
      if (v6 == 1 && (*(unsigned char *)(a1 + 208) & 1) == 0)
      {
        uint64_t result = AGGraphSetValue();
        *(unsigned char *)(a1 + 296) = 0;
        return result;
      }
      if (!*(_DWORD *)(a1 + 180))
      {
        *(_OWORD *)(a1 + 216) = 0u;
        int64_t v8 = (_OWORD *)(a1 + 216);
        *((void *)v8 - 2) = 0;
        *((unsigned char *)v8 - 8) = 1;
        v8[1] = 0u;
        v8[2] = 0u;
        v8[3] = 0u;
        unsigned char *v7 = 1;
        AGGraphGetValue();
        return AGGraphSetValue();
      }
    }
  }
  return result;
}

uint64_t EnvironmentValues.listStackBehavior.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.listStackBehavior : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.listStackBehavior.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
  return result;
}

uint64_t EnvironmentValues.listStackBehavior.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t destroy for ConditionallyBorderedButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (*(void *)(v3 + 56) + a1) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
  outlined consume of Environment<CGFloat?>.Content(*(void *)(v4 + 24), *(unsigned __int8 *)(v4 + 32), *(unsigned char *)(v4 + 33));
  unint64_t v5 = (v4 + 41) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(void *)v5, *(unsigned char *)(v5 + 8));
  outlined consume of Environment<KeyboardShortcut?>.Content(*(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(unsigned __int8 *)(v5 + 40), *(unsigned char *)(v5 + 41));
  uint64_t v6 = *(void *)(v5 + 48);
  char v7 = *(unsigned char *)(v5 + 56);

  return outlined consume of Environment<Bool>.Content(v6, v7);
}

uint64_t ProgressView<>.init<>()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4F417F8];
  uint64_t v3 = MEMORY[0x1E4F417F0];
  type metadata accessor for CustomProgressView<EmptyView, EmptyView>(0, &lazy cache variable for type metadata for CustomProgressView<EmptyView, EmptyView>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], (uint64_t (*)(void, void *))type metadata accessor for CustomProgressView);
  uint64_t v5 = *(int *)(v4 + 52);
  uint64_t v6 = *(int *)(v4 + 56);
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 257;
  type metadata accessor for ProgressViewValue(0);
  swift_storeEnumTagMultiPayload();
  *(unsigned char *)(a1 + v5) = 1;
  *(unsigned char *)(a1 + v6) = 1;
  type metadata accessor for CustomProgressView<EmptyView, EmptyView>(0, &lazy cache variable for type metadata for ProgressView<EmptyView, EmptyView>.Base, v2, v3, (uint64_t (*)(void, void *))type metadata accessor for ProgressView.Base);

  return swift_storeEnumTagMultiPayload();
}

void type metadata accessor for CustomProgressView<EmptyView, EmptyView>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void *))
{
  if (!*a2)
  {
    v8[0] = a3;
    v8[1] = MEMORY[0x1E4F417F8];
    v8[2] = a4;
    v8[3] = MEMORY[0x1E4F417F0];
    unint64_t v6 = a5(0, v8);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata completion function for ProgressView()
{
  uint64_t result = type metadata accessor for ProgressView.Base();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ProgressView.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v40 = (void *)a1[2];
  uint64_t v2 = v40;
  uint64_t v41 = v3;
  uint64_t v42 = v4;
  uint64_t v43 = v5;
  uint64_t v6 = type metadata accessor for CustomProgressView();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  int64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v34 - v11;
  MEMORY[0x1F4188790](v13);
  long long v15 = (char *)&v34 - v14;
  uint64_t v40 = v2;
  uint64_t v41 = v3;
  uint64_t v42 = v4;
  uint64_t v43 = v5;
  uint64_t v16 = type metadata accessor for ProgressView.Base();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  long long v19 = (char *)&v34 - v18;
  uint64_t v20 = type metadata accessor for _ConditionalContent();
  uint64_t v36 = *(void *)(v20 - 8);
  double v21 = MEMORY[0x1F4188790](v20);
  long long v23 = (char *)&v34 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, v35, v16, v21);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v24 = *(void **)v19;
    uint64_t v25 = *((void *)v19 + 1);
    uint64_t v26 = *((void *)v19 + 2);
    uint64_t v27 = *((void *)v19 + 3);
    uint64_t v28 = *((void *)v19 + 4);
    uint64_t v29 = *((void *)v19 + 5);
    uint64_t v30 = *((void *)v19 + 6);
    uint64_t v31 = *((void *)v19 + 7);
    uint64_t v35 = v30;
    uint64_t v40 = v24;
    uint64_t v41 = v25;
    uint64_t v42 = v26;
    uint64_t v43 = v27;
    uint64_t v44 = v28;
    uint64_t v45 = v29;
    uint64_t v46 = v30;
    uint64_t v47 = v31;
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v40, v6, (uint64_t)&type metadata for FoundationProgressView);

    outlined consume of NSProgress.UIState?(v25, v26, v27, v28);
    swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v19, v6);
    static ViewBuilder.buildExpression<A>(_:)(v15);
    static ViewBuilder.buildExpression<A>(_:)(v12);
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v9, v6);
    long long v32 = *(void (**)(char *, uint64_t))(v7 + 8);
    v32(v9, v6);
    v32(v12, v6);
    v32(v15, v6);
  }
  uint64_t v38 = &protocol witness table for CustomProgressView<A, B>;
  uint64_t v39 = &protocol witness table for FoundationProgressView;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v23);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v23, v20);
}

uint64_t type metadata accessor for ProgressView.Base()
{
  return swift_getGenericMetadata();
}

uint64_t initializeWithCopy for ProgressView.Base(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = v8 + v9;
  uint64_t v11 = ((v8 + v9) & ~v9) + v8;
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  if ((unint64_t)(v11 + 1) > 0xA) {
    uint64_t v15 = v11 + 1;
  }
  else {
    uint64_t v15 = 10;
  }
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = v15 + v17 + 1;
  int v19 = *(_DWORD *)(v14 + 84);
  size_t v20 = *(void *)(v14 + 64);
  if (v19) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = v20 + 1;
  }
  uint64_t v22 = *(void *)(v12 - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  size_t __n = v21;
  uint64_t v24 = (v21 + v23 + (v18 & ~v17)) & ~v23;
  if (*(_DWORD *)(v22 + 84)) {
    uint64_t v25 = *(void *)(*(void *)(v12 - 8) + 64);
  }
  else {
    uint64_t v25 = *(void *)(*(void *)(v12 - 8) + 64) + 1;
  }
  if ((unint64_t)(v25 + v24) <= 0x40) {
    uint64_t v26 = 64;
  }
  else {
    uint64_t v26 = v25 + v24;
  }
  unsigned int v27 = a2[v26];
  unsigned int v28 = v27 - 2;
  if (v27 >= 2)
  {
    if (v26 <= 3) {
      uint64_t v29 = v26;
    }
    else {
      uint64_t v29 = 4;
    }
    switch(v29)
    {
      case 1:
        int v30 = *a2;
        if (v26 >= 4) {
          goto LABEL_30;
        }
        goto LABEL_21;
      case 2:
        int v30 = *(unsigned __int16 *)a2;
        if (v26 < 4) {
          goto LABEL_21;
        }
        goto LABEL_30;
      case 3:
        int v30 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v26 < 4) {
          goto LABEL_21;
        }
        goto LABEL_30;
      case 4:
        int v30 = *(_DWORD *)a2;
        if (v26 < 4)
        {
LABEL_21:
          unsigned int v27 = (v30 | (v28 << (8 * v26))) + 2;
          break;
        }
LABEL_30:
        if (v30 != -1) {
          goto LABEL_31;
        }
        goto LABEL_23;
      default:
        break;
    }
  }
  if (v27 == 1)
  {
LABEL_23:
    uint64_t v31 = *(void **)a2;
    *(void *)a1 = *(void *)a2;
    uint64_t v32 = *((void *)a2 + 4);
    id v33 = v31;
    if (v32)
    {
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(unsigned char *)(a1 + 16) = a2[16];
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(void *)(a1 + 32) = v32;
      uint64_t v34 = *((void *)a2 + 6);
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(void *)(a1 + 48) = v34;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v35 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = v35;
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    }
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *(unsigned char *)(a1 + v26) = 1;
    swift_retain();
  }
  else
  {
LABEL_31:
    unsigned int v36 = a2[v15];
    unsigned int v37 = v36 - 2;
    if (v36 >= 2)
    {
      if (v15 <= 3) {
        uint64_t v38 = v15;
      }
      else {
        uint64_t v38 = 4;
      }
      switch(v38)
      {
        case 1:
          int v39 = *a2;
          if (v15 < 4) {
            goto LABEL_39;
          }
          goto LABEL_43;
        case 2:
          int v39 = *(unsigned __int16 *)a2;
          if (v15 < 4) {
            goto LABEL_39;
          }
          goto LABEL_43;
        case 3:
          int v39 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v15 < 4) {
            goto LABEL_39;
          }
          goto LABEL_43;
        case 4:
          int v39 = *(_DWORD *)a2;
          if (v15 < 4) {
LABEL_39:
          }
            unsigned int v36 = (v39 | (v37 << (8 * v15))) + 2;
          else {
LABEL_43:
          }
            unsigned int v36 = v39 + 2;
          break;
        default:
          break;
      }
    }
    size_t v62 = v25;
    uint64_t v63 = *(void *)(a3 + 24);
    uint64_t v40 = ~v17;
    if (v36 == 1)
    {
      uint64_t v41 = ~v9;
      uint64_t v61 = v13;
      uint64_t v42 = *(void (**)(uint64_t, unsigned __int8 *))(v7 + 16);
      uint64_t v59 = v15 + v17 + 1;
      uint64_t v60 = *(void *)(v12 - 8);
      uint64_t v43 = v6;
      uint64_t v57 = v15;
      uint64_t v58 = v16;
      uint64_t v44 = v11;
      v42(a1, a2);
      uint64_t v45 = v43;
      uint64_t v22 = v60;
      ((void (*)(uint64_t, unint64_t, uint64_t))v42)((v10 + a1) & v41, (unint64_t)&a2[v10] & v41, v45);
      uint64_t v18 = v59;
      uint64_t v13 = v61;
      *(unsigned char *)(v44 + a1) = a2[v44];
      uint64_t v15 = v57;
      uint64_t v16 = v58;
      char v46 = 1;
    }
    else
    {
      char v46 = 0;
      *(void *)a1 = *(void *)a2;
      *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    }
    uint64_t v47 = ~v23;
    *(unsigned char *)(a1 + v15) = v46;
    unsigned int v48 = (void *)((v18 + a1) & v40);
    uint64_t v49 = (char *)((unint64_t)&a2[v18] & v40);
    uint64_t v50 = v13;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v49, 1, v13))
    {
      size_t v51 = __n;
      memcpy(v48, v49, __n);
      uint64_t v52 = v63;
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v48, v49, v50);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v48, 0, 1, v50);
      uint64_t v52 = v63;
      size_t v51 = __n;
    }
    char v53 = &v49[v51];
    long long v54 = (void *)(((unint64_t)v48 + v51 + v23) & v47);
    char v55 = (const void *)((unint64_t)&v53[v23] & v47);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v55, 1, v52))
    {
      memcpy(v54, v55, v62);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v54, v55, v52);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v54, 0, 1, v52);
    }
    *(unsigned char *)(a1 + v26) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for OpacityButtonHighlightModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PlatformItemListGeneratingViewModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance CoreSheetPresentationModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FFCC0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t assignWithCopy for LazyHGrid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(unsigned __int8 *)(v7 + 80) + 32 + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 32 + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

void one-time initialization function for typeCache()
{
  static ToolbarContentDescriptor.typeCache = MEMORY[0x1E4FBC868];
}

{
  static CommandsDescriptor.typeCache = MEMORY[0x1E4FBC868];
}

{
  static AccessibilityRotorContentDescriptor.typeCache = MEMORY[0x1E4FBC868];
}

{
  static TableColumnDescriptor.typeCache = MEMORY[0x1E4FBC868];
}

{
  static NavigationDestinationDescriptor.typeCache = MEMORY[0x1E4FBC868];
}

{
  static SceneDescriptor.typeCache = MEMORY[0x1E4FBC868];
}

{
  static WidgetDescriptor.typeCache = MEMORY[0x1E4FBC868];
}

{
  static TableRowDescriptor.typeCache = MEMORY[0x1E4FBC868];
}

uint64_t downloadURL(_:)()
{
  v0[7] = objc_msgSend(self, sel_sharedSession);
  unint64_t v1 = (void *)swift_task_alloc();
  v0[8] = v1;
  *unint64_t v1 = v0;
  v1[1] = downloadURL(_:);
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[3];
  return MEMORY[0x1F40E6618](v2, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t assignWithCopy for TableColumnCollection.Entry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v13 = *(void *)(v9 + 24);
  char v14 = *(unsigned char *)(v9 + 32);
  outlined copy of TableColumnCustomizationID.Base(*(void *)v9, v11, v12, v13, v14);
  uint64_t v15 = *(void *)v8;
  uint64_t v16 = *(void *)(v8 + 8);
  uint64_t v17 = *(void *)(v8 + 16);
  uint64_t v18 = *(void *)(v8 + 24);
  char v19 = *(unsigned char *)(v8 + 32);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  *(void *)(v8 + 16) = v12;
  *(void *)(v8 + 24) = v13;
  *(unsigned char *)(v8 + 32) = v14;
  outlined consume of TableColumnCustomizationID.Base(v15, v16, v17, v18, v19);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v20 = a3[7];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  char v23 = *(unsigned char *)(v22 + 32);
  long long v24 = *(_OWORD *)(v22 + 16);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(_OWORD *)(v21 + 16) = v24;
  *(unsigned char *)(v21 + 32) = v23;
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v25 = a3[11];
  uint64_t v26 = a1 + v25;
  unsigned int v27 = (uint64_t *)(a2 + v25);
  uint64_t v28 = *(void *)(a2 + v25 + 24);
  if (*(void *)(a1 + v25 + 24))
  {
    if (v28)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v26, v27);
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(v26 + 32), v27 + 4);
      uint64_t v29 = v27[10];
      *(void *)(v26 + 72) = v27[9];
      *(void *)(v26 + 80) = v29;
      swift_retain();
      swift_release();
      uint64_t v30 = v27[12];
      *(void *)(v26 + 88) = v27[11];
      *(void *)(v26 + 96) = v30;
      swift_retain();
      swift_release();
      uint64_t v31 = v27[14];
      *(void *)(v26 + 104) = v27[13];
      *(void *)(v26 + 112) = v31;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of SwiftUIAnySortComparator(v26);
      long long v37 = *((_OWORD *)v27 + 3);
      long long v39 = *(_OWORD *)v27;
      long long v38 = *((_OWORD *)v27 + 1);
      *(_OWORD *)(v26 + 32) = *((_OWORD *)v27 + 2);
      *(_OWORD *)(v26 + 48) = v37;
      *(_OWORD *)uint64_t v26 = v39;
      *(_OWORD *)(v26 + 16) = v38;
      long long v41 = *((_OWORD *)v27 + 5);
      long long v40 = *((_OWORD *)v27 + 6);
      long long v42 = *((_OWORD *)v27 + 4);
      *(void *)(v26 + 112) = v27[14];
      *(_OWORD *)(v26 + 80) = v41;
      *(_OWORD *)(v26 + 96) = v40;
      *(_OWORD *)(v26 + 64) = v42;
    }
  }
  else if (v28)
  {
    *(void *)(v26 + 24) = v28;
    (**(void (***)(uint64_t, long long *))(v28 - 8))(v26, (long long *)v27);
    uint64_t v32 = v27[7];
    *(void *)(v26 + 56) = v32;
    *(void *)(v26 + 64) = v27[8];
    (**(void (***)(uint64_t, uint64_t))(v32 - 8))(v26 + 32, (uint64_t)(v27 + 4));
    uint64_t v33 = v27[10];
    *(void *)(v26 + 72) = v27[9];
    *(void *)(v26 + 80) = v33;
    uint64_t v34 = v27[12];
    *(void *)(v26 + 88) = v27[11];
    *(void *)(v26 + 96) = v34;
    uint64_t v35 = v27[13];
    uint64_t v36 = v27[14];
    *(void *)(v26 + 104) = v35;
    *(void *)(v26 + 112) = v36;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v43 = *(_OWORD *)v27;
    long long v44 = *((_OWORD *)v27 + 1);
    long long v45 = *((_OWORD *)v27 + 3);
    *(_OWORD *)(v26 + 32) = *((_OWORD *)v27 + 2);
    *(_OWORD *)(v26 + 48) = v45;
    *(_OWORD *)uint64_t v26 = v43;
    *(_OWORD *)(v26 + 16) = v44;
    long long v46 = *((_OWORD *)v27 + 4);
    long long v47 = *((_OWORD *)v27 + 5);
    long long v48 = *((_OWORD *)v27 + 6);
    *(void *)(v26 + 112) = v27[14];
    *(_OWORD *)(v26 + 80) = v47;
    *(_OWORD *)(v26 + 96) = v48;
    *(_OWORD *)(v26 + 64) = v46;
  }
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_retain();
  swift_release();
  return a1;
}

void type metadata accessor for _ViewModifier_Content<BadgeModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<BadgeModifier>)
  {
    lazy protocol witness table accessor for type BadgeModifier and conformance BadgeModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<BadgeModifier>);
    }
  }
}

uint64_t LimitedAvailabilityConfigurationStorage.makeWidgetConfiguration(widget:inputs:)(_DWORD *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  int v9 = *((_DWORD *)a2 + 14);
  uint64_t v10 = *(void *)(*v3 + 96);
  LODWORD(v16) = *a1;
  type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityConfiguration>, (uint64_t)&type metadata for LimitedAvailabilityConfiguration, MEMORY[0x1E4F3F590]);
  long long v15 = *(_OWORD *)(a2 + 5);
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  _GraphValue.value.getter();
  uint64_t v13 = *(void *)(v5 + 104);
  type metadata accessor for LimitedAvailabilityConfigurationStorage.Child();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v16 = v6;
  int v17 = v7;
  uint64_t v18 = v8;
  uint64_t v19 = v11;
  uint64_t v20 = v12;
  long long v21 = v15;
  int v22 = v9;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(v13 + 32))(v23, &v16, v10, v13);
}

uint64_t SwiftUIGlue.defaultOpenSensitiveURLAction()()
{
  return MEMORY[0x1F40FDF08](1, closure #1 in SwiftUIGlue.defaultOpenSensitiveURLAction(), 0);
}

uint64_t closure #1 in View.renderContainerBackground<A>(_:key:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1[1] < 0)
  {
    uint64_t result = 0;
    long long v5 = 0uLL;
  }
  else
  {
    uint64_t v3 = *a1;
    swift_retain();
    uint64_t result = static Edge.Set.all.getter();
    *((void *)&v5 + 1) = -1;
    *(void *)&long long v5 = v3;
  }
  *(_OWORD *)a2 = v5;
  *(unsigned char *)(a2 + 16) = result;
  return result;
}

uint64_t type metadata completion function for PrimaryBarViewModel()
{
  return swift_updateClassMetadata2();
}

uint64_t ScrollViewAdjustedConfiguration.value.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of ScrollViewConfiguration(Value, (uint64_t)a1);
  uint64_t v3 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for External<SystemScrollLayoutState>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
  char v4 = (uint64_t *)AGGraphGetValue();
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = v6;
  a1[14] = v5;
  type metadata accessor for External<SystemScrollLayoutState>(0, &lazy cache variable for type metadata for ScrollToTopGestureAction?, (uint64_t)&type metadata for ScrollToTopGestureAction, v3);
  int v7 = (uint64_t *)AGGraphGetValue();
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = a1[6];
  outlined copy of AppIntentExecutor?(*v7);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v10);
  a1[6] = v8;
  a1[7] = v9;
  type metadata accessor for External<SystemScrollLayoutState>(0, &lazy cache variable for type metadata for RefreshAction?, (uint64_t)&type metadata for RefreshAction, v3);
  uint64_t v11 = (uint64_t *)AGGraphGetValue();
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = v11[2];
  uint64_t v15 = a1[10];
  outlined copy of AppIntentExecutor?(*v11);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v15);
  a1[10] = v12;
  a1[11] = v13;
  a1[12] = v14;
  type metadata accessor for SafeAreaTransitionState?();
  a1[9] = *(void *)(AGGraphGetValue() + 8);
  swift_unknownObjectWeakAssign();
  static EdgeInsets.zero.getter();
  uint64_t result = static EdgeInsets.== infix(_:_:)();
  if (result)
  {
    uint64_t v17 = AGGraphGetValue();
    uint64_t v18 = *(void *)v17;
    uint64_t v46 = *(void *)(v17 + 16);
    char v44 = *(unsigned char *)(v17 + 8);
    char v45 = *(unsigned char *)(v17 + 24);
    uint64_t v43 = *(void *)(v17 + 32);
    uint64_t v40 = *(void *)(v17 + 48);
    char v41 = *(unsigned char *)(v17 + 40);
    char v42 = *(unsigned char *)(v17 + 56);
    uint64_t v19 = *(void *)(v17 + 64);
    char v20 = *(unsigned char *)(v17 + 72);
    uint64_t v21 = *(void *)(v17 + 80);
    char v22 = *(unsigned char *)(v17 + 88);
    uint64_t v23 = *(void *)(v17 + 96);
    char v24 = *(unsigned char *)(v17 + 104);
    uint64_t v25 = *(void *)(v17 + 112);
    char v26 = *(unsigned char *)(v17 + 120);
    static Edge.Set.all.getter();
    OptionalEdgeInsets.init()();
    uint64_t v63 = v19;
    char v64 = v20;
    uint64_t v65 = v21;
    char v66 = v22;
    uint64_t v67 = v23;
    char v68 = v24;
    uint64_t v69 = v25;
    char v70 = v26;
    static OptionalEdgeInsets.none.getter();
    uint64_t v47 = v55;
    char v48 = v56;
    uint64_t v49 = v57;
    char v50 = v58;
    uint64_t v51 = v59;
    char v52 = v60;
    uint64_t v53 = v61;
    char v54 = v62;
    char v27 = MEMORY[0x18C110940](&v63, &v47);
    if (v27) {
      uint64_t v28 = v18;
    }
    else {
      uint64_t v28 = v19;
    }
    uint64_t v71 = v28;
    char v29 = v44;
    char v30 = v45;
    if ((v27 & 1) == 0) {
      char v29 = v20;
    }
    char v72 = v29 & 1;
    uint64_t v31 = v46;
    if ((v27 & 1) == 0)
    {
      uint64_t v31 = v21;
      char v30 = v22;
    }
    uint64_t v32 = v43;
    if ((v27 & 1) == 0) {
      uint64_t v32 = v23;
    }
    char v33 = v41;
    if ((v27 & 1) == 0) {
      char v33 = v24;
    }
    uint64_t v34 = v40;
    if ((v27 & 1) == 0) {
      uint64_t v34 = v25;
    }
    uint64_t v73 = v31;
    char v74 = v30 & 1;
    char v35 = v42;
    if ((v27 & 1) == 0) {
      char v35 = v26;
    }
    uint64_t v75 = v32;
    char v76 = v33 & 1;
    uint64_t v77 = v34;
    char v78 = v35 & 1;
    uint64_t result = OptionalEdgeInsets.in(edges:)();
    a1[1] = v36;
    a1[2] = v37;
    a1[3] = v38;
    a1[4] = v39;
  }
  return result;
}

void type metadata accessor for SafeAreaTransitionState?()
{
  if (!lazy cache variable for type metadata for SafeAreaTransitionState?)
  {
    type metadata accessor for ContainerBackgroundHost(255, &lazy cache variable for type metadata for SafeAreaTransitionState);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SafeAreaTransitionState?);
    }
  }
}

uint64_t base witness table accessor for View in <> Section<A, B, C>()
{
  return swift_getWitnessTable();
}

__n128 static OnScrollPhaseContextChangeModifier._makeView(modifier:inputs:body:)@<Q0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  int v33 = *a1;
  unint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  unsigned int v8 = *(_DWORD *)(a2 + 24);
  unsigned int v9 = *(_DWORD *)(a2 + 28);
  unsigned int v10 = *(_DWORD *)(a2 + 32);
  unsigned int v11 = *(_DWORD *)(a2 + 36);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  unsigned int v14 = *(_DWORD *)(a2 + 56);
  unsigned int v15 = *(_DWORD *)(a2 + 60);
  unsigned int v16 = *(_DWORD *)(a2 + 64);
  unsigned int v17 = *(_DWORD *)(a2 + 68);
  unsigned int v19 = *(_DWORD *)(a2 + 72);
  unsigned int v18 = *(_DWORD *)(a2 + 76);
  int v20 = *(_DWORD *)(a2 + 80);
  unint64_t v62 = v5;
  int v46 = v6;
  int v63 = v6;
  unint64_t v64 = v7;
  unsigned int v43 = v9;
  unsigned int v44 = v8;
  *(void *)&long long v65 = __PAIR64__(v9, v8);
  unsigned int v41 = v11;
  unsigned int v42 = v10;
  *((void *)&v65 + 1) = __PAIR64__(v11, v10);
  uint64_t v66 = v12;
  uint64_t v67 = v13;
  unsigned int v39 = v15;
  unsigned int v40 = v14;
  *(void *)&long long v68 = __PAIR64__(v15, v14);
  unsigned int v37 = v17;
  unsigned int v38 = v16;
  *((void *)&v68 + 1) = __PAIR64__(v17, v16);
  unsigned int v35 = v18;
  unsigned int v36 = v19;
  unint64_t v69 = __PAIR64__(v18, v19);
  int v34 = v20;
  int v70 = v20;
  unint64_t v47 = v5;
  swift_retain();
  unint64_t v45 = v7;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  PreferenceKeys.add(_:)();
  unint64_t v52 = v62;
  int v53 = v63;
  unint64_t v55 = v7;
  long long v56 = v65;
  uint64_t v57 = v12;
  uint64_t v58 = v13;
  long long v59 = v68;
  unint64_t v60 = v69;
  int v61 = v70;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v21 = swift_bridgeObjectRetain();
  a3(&v50, v21, &v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v22 = v50;
  v23.n128_u64[0] = v51;
  unint64_t v52 = v50;
  int v24 = v51;
  __n128 v48 = v23;
  int v53 = v51;
  swift_bridgeObjectRetain();
  uint64_t v25 = PreferencesOutputs.subscript.getter();
  if ((v25 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  int v26 = v25;
  unint64_t v52 = v22;
  int v53 = v24;
  uint64_t v27 = PreferencesOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v27 & 0x100000000) != 0)
  {
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_6;
  }
  LODWORD(v52) = v33;
  type metadata accessor for Binding<ScrollPhaseState>(0, &lazy cache variable for type metadata for _GraphValue<OnScrollPhaseContextChangeModifier>, (uint64_t)&type metadata for OnScrollPhaseContextChangeModifier, MEMORY[0x1E4F3F590]);
  unsigned int v28 = _GraphValue.value.getter();
  unint64_t v52 = v47;
  int v53 = v46;
  unint64_t v55 = v45;
  *(void *)&long long v56 = __PAIR64__(v43, v44);
  *((void *)&v56 + 1) = __PAIR64__(v41, v42);
  uint64_t v57 = v12;
  uint64_t v58 = v13;
  *(void *)&long long v59 = __PAIR64__(v39, v40);
  *((void *)&v59 + 1) = __PAIR64__(v37, v38);
  unint64_t v60 = __PAIR64__(v35, v36);
  int v61 = v34;
  int v29 = _ViewInputs.viewPhase.getter();
  UpdateCycleDetector.init()();
  int v30 = v51;
  char v31 = BYTE4(v51);
  type metadata accessor for ViewGraph();
  MEMORY[0x18C114EE0]();
  unint64_t v52 = __PAIR64__(v27, v28);
  uint64_t v58 = 0;
  *(void *)&long long v59 = 0;
  uint64_t v57 = 5;
  int v53 = v26;
  int v54 = v29;
  unint64_t v55 = v50;
  LODWORD(v56) = v30;
  BYTE4(v56) = v31;
  DWORD2(v56) = -1;
  swift_weakInit();
  swift_release();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>(0, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider>, (void (*)(void))lazy protocol witness table accessor for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider);
  lazy protocol witness table accessor for type ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider> and conformance ScrollActionDispatcher<A>(&lazy protocol witness table cache variable for type ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider> and conformance ScrollActionDispatcher<A>, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider>, (void (*)(void))lazy protocol witness table accessor for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider);
  Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>((uint64_t)&v52, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider>, (void (*)(void))lazy protocol witness table accessor for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider);
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
LABEL_6:
  swift_release();
  *a4 = v22;
  __n128 result = v48;
  a4[1] = v48.n128_u64[0];
  return result;
}

uint64_t outlined destroy of ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  type metadata accessor for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for ScrollActionDispatcher();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider> and conformance ScrollActionDispatcher<A>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider;
  if (!lazy protocol witness table cache variable for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider;
  if (!lazy protocol witness table cache variable for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider);
  }
  return result;
}

uint64_t specialized ScrollActionDispatcher.updateValue()()
{
  uint64_t v1 = v0;
  int v2 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v2 != *(_DWORD *)(v0 + 32))
  {
    *(_DWORD *)(v0 + 32) = v2;
    *(void *)(v0 + 20) = 0xFFFFFFFFLL;
    *(unsigned char *)(v0 + 28) = 0;
    *(void *)(v0 + 48) = 0;
    *(void *)(v0 + 56) = 0;
    *(void *)(v0 + 40) = 5;
  }
  type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for [ScrollPhaseState], MEMORY[0x1E4F3FD68], MEMORY[0x1E4FBB320]);
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(void *)Value;
  int v5 = *(_DWORD *)v1;
  int v6 = *(_DWORD *)(v1 + 4);
  unint64_t v7 = *(void *)(*(void *)Value + 16);
  swift_bridgeObjectRetain();
  if (v7 >= 2)
  {
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    unsigned int v9 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v10 = v8;
    if (os_log_type_enabled(v9, v8))
    {
      unsigned int v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v30 = v12;
      *(_DWORD *)unsigned int v11 = 136315138;
      *(void *)unsigned int v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x8000000188328E40, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v9, v10, "%s: Multiple scroll views were found. Picking the first one to compare.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v12, -1, -1);
      MEMORY[0x18C119C60](v11, -1, -1);
    }
  }
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)&v36[16] = 0;
    *(_OWORD *)unsigned int v36 = 5uLL;
LABEL_16:
    long long v28 = *(_OWORD *)v36;
    uint64_t v27 = *(void *)&v36[16];
    goto LABEL_17;
  }
  char v13 = *(unsigned char *)(v4 + 32);
  uint64_t v14 = *(void *)(v4 + 40);
  uint64_t v15 = *(void *)(v4 + 48);
  swift_bridgeObjectRelease();
  v34[0] = v13;
  *(void *)&long long v35 = v14;
  *((void *)&v35 + 1) = v15;
  int v32 = v5;
  int v33 = v6;
  uint64_t v16 = outlined init with copy of ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider>(v1, (uint64_t)&v30);
  MEMORY[0x1F4188790](v16);
  type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider, (uint64_t)&type metadata for OnScrollPhaseContextChangeModifier.PhaseContextActionProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScrollActionDispatcher);
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for ScrollPhaseState?, MEMORY[0x1E4F3FD68], MEMORY[0x1E4FBB718]);
  lazy protocol witness table accessor for type ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider> and conformance ScrollActionDispatcher<A>();
  StatefulRule.withObservation<A>(do:)();
  uint64_t result = outlined destroy of ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider>((uint64_t)&v30);
  char v18 = v36[0];
  if (v36[0] == 5) {
    goto LABEL_16;
  }
  uint64_t v19 = *(unsigned __int8 *)(v1 + 40);
  long long v20 = *(_OWORD *)(v1 + 48);
  uint64_t v30 = *(void *)v36;
  long long v29 = *(_OWORD *)&v36[8];
  long long v31 = *(_OWORD *)&v36[8];
  if (v19 != 5)
  {
    v34[0] = v19;
    long long v35 = v20;
    uint64_t result = static ScrollPhaseState.== infix(_:_:)();
    if (result) {
      goto LABEL_16;
    }
  }
  MEMORY[0x1F4188790](result);
  uint64_t result = UpdateCycleDetector.dispatch(label:isDebug:)();
  if ((result & 1) == 0) {
    goto LABEL_16;
  }
  AGGraphClearUpdate();
  LOBYTE(v30) = v18;
  long long v21 = v29;
  long long v31 = v29;
  if (*(unsigned char *)(v1 + 40) != 5)
  {
    long long v21 = *(_OWORD *)(v1 + 48);
    char v18 = *(unsigned char *)(v1 + 40);
  }
  v34[0] = v18;
  long long v35 = v21;
  unint64_t v22 = OnScrollPhaseContextChangeModifier.PhaseContextActionProvider.makeAction(oldOutput:newOutput:)(v34, (char *)&v30);
  uint64_t v24 = v23;
  AGGraphSetUpdate();
  uint64_t Strong = swift_weakLoadStrong();
  int v26 = (void *)swift_allocObject();
  _OWORD v26[2] = v22;
  v26[3] = v24;
  v26[4] = Strong;
  swift_retain();
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  uint64_t v27 = *(void *)&v36[16];
  long long v28 = *(_OWORD *)v36;
LABEL_17:
  *(_OWORD *)(v1 + 40) = v28;
  *(void *)(v1 + 56) = v27;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t Value;
  uint64_t v4;
  int v5;
  unint64_t v6;
  os_log_type_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  int v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Strong;
  void *v25;
  uint64_t v26[6];
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;

  uint64_t v1 = v0;
  int v2 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v2 != *(_DWORD *)(v0 + 28))
  {
    *(_DWORD *)(v0 + 28) = v2;
    *(void *)(v0 + 16) = 0xFFFFFFFFLL;
    *(unsigned char *)(v0 + 24) = 0;
    *(unsigned char *)(v0 + 32) = 5;
  }
  type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for [ScrollPhaseState], MEMORY[0x1E4F3FD68], MEMORY[0x1E4FBB320]);
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(void *)Value;
  int v5 = *(_DWORD *)v1;
  int v6 = *(void *)(*(void *)Value + 16);
  swift_bridgeObjectRetain();
  if (v6 >= 2)
  {
    unint64_t v7 = static os_log_type_t.fault.getter();
    os_log_type_t v8 = static Log.runtimeIssuesLog.getter();
    unsigned int v9 = v7;
    if (os_log_type_enabled(v8, v7))
    {
      os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
      unsigned int v11 = swift_slowAlloc();
      v26[0] = v11;
      *(_DWORD *)os_log_type_t v10 = 136315138;
      long long v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x8000000188328E20, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v8, v9, "%s: Multiple scroll views were found. Picking the first one to compare.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v11, -1, -1);
      MEMORY[0x18C119C60](v10, -1, -1);
    }

    int v6 = *(void *)(v4 + 16);
  }
  if (v6)
  {
    uint64_t v12 = *(unsigned char *)(v4 + 32);
    char v13 = *(void *)(v4 + 40);
    uint64_t v14 = *(void *)(v4 + 48);
    swift_bridgeObjectRelease();
    LOBYTE(v28) = v12;
    long long v29 = v13;
    uint64_t v30 = v14;
    uint64_t v27 = v5;
    uint64_t v15 = outlined init with copy of ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>(v1, (uint64_t)v26);
    MEMORY[0x1F4188790](v15);
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider, (uint64_t)&type metadata for OnScrollPhaseChangeModifier.PhaseActionProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScrollActionDispatcher);
    type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for ScrollPhase?, MEMORY[0x1E4F3F520], MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider> and conformance ScrollActionDispatcher<A>();
    StatefulRule.withObservation<A>(do:)();
    uint64_t result = outlined destroy of ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>((uint64_t)v26);
    unsigned int v17 = v31;
    if (v31 != 5)
    {
      char v18 = *(unsigned __int8 *)(v1 + 32);
      if (v18 == 5 || v31 != v18)
      {
        MEMORY[0x1F4188790](result);
        uint64_t result = UpdateCycleDetector.dispatch(label:isDebug:)();
        if (result)
        {
          AGGraphClearUpdate();
          if (*(unsigned char *)(v1 + 32) == 5) {
            uint64_t v19 = v17;
          }
          else {
            uint64_t v19 = *(unsigned char *)(v1 + 32);
          }
          long long v20 = (uint64_t *)AGGraphGetValue();
          unint64_t v22 = *v20;
          long long v21 = v20[1];
          uint64_t v23 = swift_allocObject();
          *(void *)(v23 + 16) = v22;
          *(void *)(v23 + 24) = v21;
          *(unsigned char *)(v23 + 32) = v19;
          *(unsigned char *)(v23 + 33) = v17;
          swift_retain();
          AGGraphSetUpdate();
          uint64_t Strong = swift_weakLoadStrong();
          uint64_t v25 = (void *)swift_allocObject();
          v25[2] = partial apply for closure #1 in OnScrollPhaseChangeModifier.PhaseActionProvider.makeAction(oldOutput:newOutput:);
          v25[3] = v23;
          _OWORD v25[4] = Strong;
          swift_retain();
          swift_retain();
          static Update.enqueueAction(_:)();
          swift_release();
          swift_release();
          uint64_t result = swift_release();
        }
      }
    }
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    unsigned int v17 = 5;
  }
  *(unsigned char *)(v1 + 32) = v17;
  return result;
}

uint64_t (*OnScrollPhaseContextChangeModifier.PhaseContextActionProvider.makeAction(oldOutput:newOutput:)(char *a1, char *a2))()
{
  char v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *((void *)a1 + 2);
  char v5 = *a2;
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = *((void *)a2 + 2);
  type metadata accessor for Binding<ScrollPhaseState>(0, &lazy cache variable for type metadata for [ScrollGeometryState], MEMORY[0x1E4F40498], MEMORY[0x1E4FBB320]);
  uint64_t Value = AGGraphGetValue();
  unsigned int v9 = *(_OWORD **)Value;
  if (*(void *)(*(void *)Value + 16))
  {
    long long v15 = v9[2];
    long long v16 = v9[3];
    long long v17 = v9[4];
    long long v18 = v9[5];
    long long v19 = v9[6];
    long long v20 = v9[7];
    long long v21 = v9[8];
  }
  else
  {
    static ScrollGeometry.zero.getter();
  }
  os_log_type_t v10 = (uint64_t *)AGGraphGetValue();
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 80) = v19;
  *(_OWORD *)(v13 + 96) = v20;
  *(_OWORD *)(v13 + 112) = v21;
  *(_OWORD *)(v13 + 16) = v15;
  *(_OWORD *)(v13 + 32) = v16;
  *(_OWORD *)(v13 + 48) = v17;
  *(_OWORD *)(v13 + 64) = v18;
  *(unsigned char *)(v13 + 128) = v5;
  *(void *)(v13 + 136) = v6;
  *(void *)(v13 + 144) = v7;
  *(void *)(v13 + 152) = v12;
  *(void *)(v13 + 160) = v11;
  *(unsigned char *)(v13 + 168) = v2;
  *(void *)(v13 + 176) = v3;
  *(void *)(v13 + 184) = v4;
  swift_retain();
  return partial apply for closure #1 in OnScrollPhaseContextChangeModifier.PhaseContextActionProvider.makeAction(oldOutput:newOutput:);
}

uint64_t outlined destroy of ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider>(uint64_t a1)
{
  type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider, (uint64_t)&type metadata for OnScrollPhaseContextChangeModifier.PhaseContextActionProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScrollActionDispatcher);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider, (uint64_t)&type metadata for OnScrollPhaseContextChangeModifier.PhaseContextActionProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScrollActionDispatcher);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider> and conformance ScrollActionDispatcher<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider> and conformance ScrollActionDispatcher<A>;
  if (!lazy protocol witness table cache variable for type ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider> and conformance ScrollActionDispatcher<A>)
  {
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider, (uint64_t)&type metadata for OnScrollPhaseContextChangeModifier.PhaseContextActionProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScrollActionDispatcher);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider> and conformance ScrollActionDispatcher<A>);
  }
  return result;
}

uint64_t View.onScrollGeometryChange<A>(for:of:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v12[0] = a2;
  v12[1] = a3;
  v12[2] = a4;
  v12[3] = a5;
  uint64_t v10 = type metadata accessor for OnScrollGeometryChangeModifier();
  swift_retain();
  swift_retain();
  MEMORY[0x18C113660](v12, a6, v10, a8);
  swift_release();
  return swift_release();
}

double static OnScrollGeometryChangeModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, _DWORD *a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  void (*v16)(void *__return_ptr, uint64_t, void);
  void (*v17)(void *__return_ptr, void, void);
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  void (*v22)(void *__return_ptr, void, void);
  void (*v23)(void *__return_ptr, void, void);
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  long long v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t AssociatedTypeWitness;
  uint64_t v38;
  unsigned char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  double result;
  uint64_t v46;
  uint64_t v47;
  unsigned char v48[12];
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned char *v66;
  unsigned char *v67;
  uint64_t v68;
  uint64_t v69;
  long long v70;
  void (*v71)(void *__return_ptr, uint64_t, void);
  void *v72;
  int v73;
  void (*v74)(void *__return_ptr, uint64_t, void);
  uint64_t v75;
  void (*v76)(void *__return_ptr, uint64_t, void);
  int v77;
  char v78;
  void (*v79)(void *__return_ptr, void, void);
  long long v80;
  void (*v81)(void *__return_ptr, void, void);
  void (*v82)(void *__return_ptr, void, void);
  long long v83;
  unint64_t v84;
  int v85;
  void (*v86)(void *__return_ptr, uint64_t, void);
  int v87;
  void (*v88)(void *__return_ptr, void, void);
  long long v89;
  void (*v90)(void *__return_ptr, void, void);
  void (*v91)(void *__return_ptr, void, void);
  long long v92;
  unint64_t v93;
  int v94;
  uint64_t v95;

  *(void *)&int v70 = a4;
  uint64_t v71 = a3;
  char v72 = a7;
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v66 = &v48[-v12];
  unint64_t v62 = a5;
  int v63 = a6;
  uint64_t v13 = type metadata accessor for OnScrollGeometryChangeModifier.GeometryActionProvider();
  uint64_t WitnessTable = swift_getWitnessTable();
  long long v65 = v13;
  unint64_t v64 = WitnessTable;
  unint64_t v69 = type metadata accessor for ScrollActionDispatcher();
  long long v68 = *(void *)(v69 - 8);
  MEMORY[0x1F4188790](v69);
  uint64_t v67 = &v48[-v15];
  uint64_t v49 = *a1;
  long long v16 = *(void (**)(void *__return_ptr, uint64_t, void))a2;
  LODWORD(v15) = a2[2];
  long long v17 = (void (*)(void *__return_ptr, void, void))*((void *)a2 + 2);
  long long v18 = a2[6];
  long long v19 = a2[7];
  long long v20 = a2[8];
  long long v21 = a2[9];
  unint64_t v22 = (void (*)(void *__return_ptr, void, void))*((void *)a2 + 5);
  uint64_t v23 = (void (*)(void *__return_ptr, void, void))*((void *)a2 + 6);
  uint64_t v24 = a2[14];
  uint64_t v25 = a2[15];
  int v26 = a2[16];
  uint64_t v27 = a2[17];
  long long v29 = a2[18];
  long long v28 = a2[19];
  uint64_t v30 = a2[20];
  long long v86 = *(void (**)(void *__return_ptr, uint64_t, void))a2;
  int v61 = v15;
  long long v87 = v15;
  CGRect v88 = v17;
  unint64_t v60 = v18;
  *(void *)&CGRect v89 = __PAIR64__(v19, v18);
  long long v59 = v19;
  uint64_t v58 = v20;
  *((void *)&v89 + 1) = __PAIR64__(v21, v20);
  uint64_t v57 = v21;
  CGRect v90 = v22;
  CGRect v91 = v23;
  long long v56 = v24;
  *(void *)&CGRect v92 = __PAIR64__(v25, v24);
  unint64_t v55 = v25;
  int v54 = v26;
  *((void *)&v92 + 1) = __PAIR64__(v27, v26);
  int v53 = v27;
  unint64_t v52 = v29;
  CGRect v93 = __PAIR64__(v28, v29);
  unint64_t v51 = v28;
  unint64_t v50 = v30;
  uint64_t v94 = v30;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  char v76 = v86;
  uint64_t v77 = v87;
  char v79 = v88;
  long long v80 = v89;
  long long v81 = v90;
  long long v82 = v91;
  long long v83 = v92;
  char v84 = v93;
  long long v85 = v94;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  long long v31 = swift_bridgeObjectRetain();
  v71(&v74, v31, &v76);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)&int v32 = v75;
  uint64_t v71 = v74;
  char v76 = v74;
  int v70 = v32;
  uint64_t v77 = v75;
  int v33 = PreferencesOutputs.subscript.getter();
  if ((v33 & 0x100000000) == 0)
  {
    int v34 = v33;
    LODWORD(v76) = v49;
    type metadata accessor for OnScrollGeometryChangeModifier();
    type metadata accessor for _GraphValue();
    uint64_t v73 = _GraphValue.value.getter();
    char v76 = v16;
    uint64_t v77 = v61;
    char v79 = v17;
    *(void *)&long long v80 = __PAIR64__(v59, v60);
    *((void *)&v80 + 1) = __PAIR64__(v57, v58);
    long long v81 = v22;
    long long v82 = v23;
    *(void *)&long long v83 = __PAIR64__(v55, v56);
    *((void *)&v83 + 1) = __PAIR64__(v53, v54);
    char v84 = __PAIR64__(v51, v52);
    long long v85 = v50;
    long long v35 = _ViewInputs.viewPhase.getter();
    UpdateCycleDetector.init()();
    char v74 = v76;
    LODWORD(v75) = v77;
    BYTE4(v75) = v78;
    unsigned int v36 = v65;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    unsigned int v38 = (uint64_t)v66;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v66, 1, 1, AssociatedTypeWitness);
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    unsigned int v39 = v67;
    unsigned int v40 = ScrollActionDispatcher.init(provider:inputs:viewPhase:cycleDetector:oldResetSeed:oldOutput:viewGraph:)((uint64_t)&v73, v34, v35, (uint64_t)&v74, -1, v38, v36, (uint64_t)v67);
    MEMORY[0x1F4188790](v40);
    unsigned int v41 = v69;
    int v46 = v69;
    unint64_t v47 = swift_getWitnessTable();
    type metadata accessor for Binding<ScrollPhaseState>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v39, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)&v48[-32], v41, MEMORY[0x1E4FBC248], v42, MEMORY[0x1E4FBC278], v43);
    (*(void (**)(unsigned char *, uint64_t))(v68 + 8))(v39, v41);
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unsigned int v44 = v72;
  *char v72 = v71;
  unint64_t result = *(double *)&v70;
  v44[1] = v70;
  return result;
}

uint64_t closure #2 in ScrollActionDispatcher.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v30 = a1;
  long long v31 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v28 - v12;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v15);
  long long v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  long long v20 = (char *)&v28 - v19;
  uint64_t v21 = a2 + *(int *)(type metadata accessor for ScrollActionDispatcher() + 52);
  uint64_t v22 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v21, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v22, AssociatedTypeWitness);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v20, v17, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v20, v13, AssociatedTypeWitness);
  }
  uint64_t v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(a5 + 56))(v20, v22, a4, a5);
  uint64_t v25 = v24;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v20, AssociatedTypeWitness);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v23;
  *(void *)(result + 24) = v25;
  uint64_t v27 = v31;
  *long long v31 = partial apply for thunk for @callee_guaranteed () -> ();
  v27[1] = (uint64_t (*)())result;
  return result;
}

uint64_t $defer #1 <A>() in ScrollActionDispatcher.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for ScrollActionDispatcher() + 52);
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24);

  return v5(v3, a2, v4);
}

uint64_t closure #1 in ScrollActionDispatcher.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for ScrollActionDispatcher();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = &v16[-v13];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v11 + 16))(&v16[-v13], a2, v10, v12);
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a3;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  swift_getWitnessTable();
  StatefulRule.withObservation<A>(do:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t type metadata accessor for ScrollActionDispatcher()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for ScrollActionDispatcher(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(uint64_t, void))v3)(a1, *(void *)(a2 + 16));
  unint64_t v4 = (((((a1 + *(void *)(v3 + 56) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 23) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, AssociatedTypeWitness)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, AssociatedTypeWitness);
  }

  return swift_weakDestroy();
}

uint64_t initializeWithCopy for ScrollActionDispatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 48) + 3;
  unint64_t v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  os_log_type_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v7 = *v8;
  unsigned int v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned int v9 = *v10;
  uint64_t v11 = (void *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v12 = (void *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v13 = *(void *)((char *)v12 + 5);
  void *v11 = *v12;
  *(void *)((char *)v11 + 5) = v13;
  uint64_t v14 = (_DWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v15 = (_DWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v14 = *v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (void *)(((unint64_t)v14 + v18 + 4) & ~v18);
  uint64_t v20 = (const void *)(((unint64_t)v15 + v18 + 4) & ~v18);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v20, 1, AssociatedTypeWitness))
  {
    int v21 = *(_DWORD *)(v17 + 84);
    size_t v22 = *(void *)(v17 + 64);
    if (v21) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v22 + 1;
    }
    memcpy(v19, v20, v23);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v19, v20, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, AssociatedTypeWitness);
  }
  swift_weakCopyInit();
  return a1;
}

uint64_t (*protocol witness for ScrollActionProvider.makeAction(oldOutput:newOutput:) in conformance OnScrollGeometryChangeModifier<A>.GeometryActionProvider(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  return OnScrollGeometryChangeModifier.GeometryActionProvider.makeAction(oldOutput:newOutput:)(a1, a2, *v3, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t (*OnScrollGeometryChangeModifier.GeometryActionProvider.makeAction(oldOutput:newOutput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v25 = a1;
  uint64_t v26 = a5;
  uint64_t v7 = *(void *)(a4 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](a1);
  unsigned int v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  double v12 = (char *)&v25 - v11;
  OnScrollGeometryChangeModifier.GeometryActionProvider.modifier.getter();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  swift_release();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v17(v12, v25, a4);
  v17(v9, a2, a4);
  uint64_t v18 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v19 = (v18 + 48) & ~v18;
  uint64_t v20 = (v8 + v18 + v19) & ~v18;
  int v21 = (char *)swift_allocObject();
  uint64_t v22 = v26;
  *((void *)v21 + 2) = a4;
  *((void *)v21 + 3) = v22;
  *((void *)v21 + 4) = v14;
  *((void *)v21 + 5) = v16;
  size_t v23 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v23(&v21[v19], v12, a4);
  v23(&v21[v20], v9, a4);
  return partial apply for closure #1 in OnScrollGeometryChangeModifier.GeometryActionProvider.makeAction(oldOutput:newOutput:);
}

uint64_t partial apply for closure #1 in closure #1 in ScrollActionDispatcher.updateValue()()
{
  return (*(uint64_t (**)(void, void))(v0[3] + 48))(v0[5], v0[2]);
}

uint64_t protocol witness for ScrollActionProvider.makeOutput(input:) in conformance OnScrollGeometryChangeModifier<A>.GeometryActionProvider@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return OnScrollGeometryChangeModifier.GeometryActionProvider.makeOutput(input:)(a1, *(void *)(a2 + 16), a3);
}

uint64_t OnScrollGeometryChangeModifier.GeometryActionProvider.makeOutput(input:)@<X0>(long long *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  long long v14 = a1[1];
  long long v15 = *a1;
  long long v12 = a1[3];
  long long v13 = a1[2];
  long long v10 = a1[5];
  long long v11 = a1[4];
  uint64_t v5 = *((void *)a1 + 12);
  uint64_t v6 = *((void *)a1 + 13);
  uint64_t v7 = (void (*)(_OWORD *))OnScrollGeometryChangeModifier.GeometryActionProvider.modifier.getter();
  swift_release();
  v16[0] = v15;
  v16[1] = v14;
  _OWORD v16[2] = v13;
  v16[3] = v12;
  v16[4] = v11;
  v16[5] = v10;
  uint64_t v17 = v5;
  uint64_t v18 = v6;
  v7(v16);
  swift_release();
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);

  return v8(a3, 0, 1, a2);
}

uint64_t OnScrollGeometryChangeModifier.GeometryActionProvider.modifier.getter()
{
  type metadata accessor for OnScrollGeometryChangeModifier();
  uint64_t v0 = *(void *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  return v0;
}

uint64_t type metadata accessor for OnScrollGeometryChangeModifier()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Binding<ScrollPhaseState>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t type metadata accessor for OnScrollGeometryChangeModifier.GeometryActionProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ScrollActionDispatcher.init(provider:inputs:viewPhase:cycleDetector:oldResetSeed:oldOutput:viewGraph:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  int v13 = *(_DWORD *)(a4 + 8);
  char v14 = *(unsigned char *)(a4 + 12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a8, a1, a7);
  long long v15 = (int *)type metadata accessor for ScrollActionDispatcher();
  *(_DWORD *)(a8 + v15[9]) = a2;
  *(_DWORD *)(a8 + v15[10]) = a3;
  uint64_t v16 = a8 + v15[11];
  *(void *)uint64_t v16 = *(void *)a4;
  *(_DWORD *)(v16 + 8) = v13;
  *(unsigned char *)(v16 + 12) = v14;
  *(_DWORD *)(a8 + v15[12]) = a5;
  uint64_t v17 = a8 + v15[13];
  swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v17, a6, v18);
  swift_weakInit();

  return swift_release();
}

uint64_t type metadata completion function for ScrollView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void @objc PlatformViewHost.updateConstraints()(void *a1)
{
  id v1 = a1;
  PlatformViewHost.updateConstraints()();
}

Swift::Void __swiftcall PlatformViewHost.updateConstraints()()
{
  id v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  LODWORD(v8.receiver) = -1;
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    || (lazy protocol witness table accessor for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature(),
        (static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0))
  {
    v8.receiver = v0;
    v8.super_class = (Class)swift_getObjectType();
    id v3 = objc_msgSendSuper2(&v8, sel_hostedView);
    if (v3)
    {
      unint64_t v4 = v3;
      if (objc_msgSend(v3, sel__wantsConstraintBasedLayout)) {
        objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
      }
    }
  }
  else
  {
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    uint64_t v6 = (void *)MEMORY[0x18C115780](0xD000000000000014, 0x8000000188341AA0);
    objc_msgSend(v1, sel_setValue_forKey_, isa, v6);
  }
  v7.receiver = v1;
  v7.super_class = ObjectType;
  objc_msgSendSuper2(&v7, sel_updateConstraints);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ControlGroupStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance GroupBoxStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance StepperStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SliderStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance MenuStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

__n128 __swift_memcpy50_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in Transform<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in PrimitiveTargetVisibilityModifier<A>.VisibilityActionDispatcher()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OpacityButtonHighlightModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in _LabeledContentStyleModifier<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in BorderlessButtonStyleBase()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t UserInterfaceSizeClass.init(_:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 2 * (result != 1);
  if (result == 2) {
    char v2 = 1;
  }
  *a2 = v2;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in ScrollEventStateReader<A>.MakeView()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in MergePlatformItemsView<A>.Transform()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in BorderlessButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in TimelineView<A, B><>.UpdateFilter()
{
  return swift_getWitnessTable();
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(int *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

ValueMetadata *type metadata accessor for SharingActivityPickerModifier()
{
  return &type metadata for SharingActivityPickerModifier;
}

ValueMetadata *type metadata accessor for MatchedTransitionSourceSourceMarkingEffect()
{
  return &type metadata for MatchedTransitionSourceSourceMarkingEffect;
}

void destructiveInjectEnumTag for ProgressView.Base(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v7 = *(void *)(v6 + 64)
     + ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v8 = 10;
  if (v7 + 1 > 0xA) {
    uint64_t v8 = v7 + 1;
  }
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v10 = (v8 + *(unsigned __int8 *)(v9 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 64);
  uint64_t v12 = *(void *)(*(void *)(a3 + 24) - 8);
  if (!*(_DWORD *)(v9 + 84)) {
    ++v11;
  }
  unint64_t v13 = (v11 + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  int v14 = *(_DWORD *)(v12 + 84);
  uint64_t v15 = *(void *)(v12 + 64);
  if (!v14) {
    ++v15;
  }
  unint64_t v16 = v15 + v13;
  if (v16 <= 0x40) {
    size_t v17 = 64;
  }
  else {
    size_t v17 = v16;
  }
  if (a2 > 1)
  {
    if (v17 <= 3) {
      char v18 = ((a2 - 2) >> (8 * v17)) + 2;
    }
    else {
      char v18 = 2;
    }
    if (v17 <= 3) {
      int v19 = (a2 - 2) & ~(-1 << (8 * v17));
    }
    else {
      int v19 = a2 - 2;
    }
    a1[v17] = v18;
    if (v17 >= 4) {
      int v20 = 4;
    }
    else {
      int v20 = v17;
    }
    bzero(a1, v17);
    switch(v20)
    {
      case 2:
        *(_WORD *)a1 = v19;
        break;
      case 3:
        *(_WORD *)a1 = v19;
        a1[2] = BYTE2(v19);
        break;
      case 4:
        *(_DWORD *)a1 = v19;
        break;
      default:
        *a1 = v19;
        break;
    }
  }
  else
  {
    a1[v17] = a2;
  }
}

uint64_t AccessibilityRelationshipScope.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t View.onScrollPhaseChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a1;
  v6[1] = a2;
  return MEMORY[0x18C113660](v6, a3, a5);
}

uint64_t initializeWithTake for NavigationLinkButtonStyle.Payload(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  if (((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24 <= ((v6 + 17) & (unint64_t)~v6) + v7)
    unint64_t v8 = ((v6 + 17) & ~v6) + v7;
  else {
    unint64_t v8 = ((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
  }
       + 24;
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_13;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_13:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    (*(void (**)(uint64_t, unsigned __int8 *))(v5 + 32))(a1, a2);
    int v14 = (void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v15 = (void *)((unint64_t)&a2[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
    *int v14 = *v15;
    unint64_t v16 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v16 = *(void *)v17;
    *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
    unint64_t v18 = ((unint64_t)v14 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v19 = ((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8;
    long long v20 = *(_OWORD *)v19;
    *(unsigned char *)(v18 + 16) = *(unsigned char *)(v19 + 16);
    *(_OWORD *)unint64_t v18 = v20;
    unint64_t v21 = ((unint64_t)v14 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = ((unint64_t)v15 + 55) & 0xFFFFFFFFFFFFFFF8;
    int v23 = *(void *)(v22 + 8);
    if (*(void *)(v22 + 8) >= 0xFFFFFFFFuLL) {
      int v23 = -1;
    }
    if (v23 - 1 < 0)
    {
      unint64_t v21 = swift_weakTakeInit();
      *(_OWORD *)(v21 + 8) = *(_OWORD *)(v22 + 8);
    }
    else
    {
      long long v24 = *(_OWORD *)v22;
      *(void *)(v21 + 16) = *(void *)(v22 + 16);
      *(_OWORD *)unint64_t v21 = v24;
    }
    uint64_t v26 = (_OWORD *)((v21 + 31) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v27 = (long long *)((v22 + 31) & 0xFFFFFFFFFFFFFFF8);
    long long v28 = *v27;
    long long v29 = v27[2];
    v26[1] = v27[1];
    _OWORD v26[2] = v29;
    *uint64_t v26 = v28;
    unint64_t v30 = ((unint64_t)v26 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v31 = ((unint64_t)v27 + 55) & 0xFFFFFFFFFFFFFFF8;
    long long v32 = *(_OWORD *)v31;
    *(void *)(v30 + 16) = *(void *)(v31 + 16);
    *(_OWORD *)unint64_t v30 = v32;
    char v25 = 1;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = a2[16];
    (*(void (**)(uint64_t, unint64_t))(v5 + 32))((a1 + v6 + 17) & ~v6, (unint64_t)&a2[v6 + 17] & ~v6);
    char v25 = 0;
  }
  *(unsigned char *)(a1 + v8) = v25;
  return a1;
}

unsigned char *storeEnumTagSinglePayload for SearchScopeActivation.Role(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFC) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v7 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.navigationEventHandlers : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.navigationEventHandlers.getter();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t EnvironmentValues.navigationEventHandlers.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationEventHandlersKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationEventHandlersKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationEventHandlersKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationEventHandlersKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationEventHandlersKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationEventHandlersKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<EditModeScopeModifier>, EditModeScopeModifier.TransformModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<EditModeScopeModifier>, EditModeScopeModifier.TransformModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<EditModeScopeModifier>, EditModeScopeModifier.TransformModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<EditModeScopeModifier>, EditModeScopeModifier.TransformModifier>();
    lazy protocol witness table accessor for type _ViewModifier_Content<EditModeScopeModifier> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<EditModeScopeModifier>, EditModeScopeModifier.TransformModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<EditModeScopeModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<EditModeScopeModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<EditModeScopeModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<EditModeScopeModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<EditModeScopeModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<EditModeScopeModifier>, EditModeScopeModifier.TransformModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<EditModeScopeModifier>, EditModeScopeModifier.TransformModifier>)
  {
    type metadata accessor for _ViewModifier_Content<EditModeScopeModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<EditModeScopeModifier>, EditModeScopeModifier.TransformModifier>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<EditModeScopeModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<EditModeScopeModifier>)
  {
    lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<EditModeScopeModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>;
  if (!lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>)
  {
    type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(255, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, Float>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, Float>> and conformance AnimatablePair<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>);
  }
  return result;
}

void type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    unint64_t v6 = type metadata accessor for AnimatablePair();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t ResolvedShadowView.animatableData.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, double))(v4 + 24))(v3, v4, v6);
  uint64_t v7 = (long long *)(v1 + *(int *)(a1 + 36));
  uint64_t v8 = *((void *)v7 + 4);
  int v9 = *((_DWORD *)v7 + 10);
  char v10 = *((unsigned char *)v7 + 44);
  long long v11 = v7[1];
  long long v13 = *v7;
  long long v14 = v11;
  uint64_t v15 = v8;
  int v16 = v9;
  char v17 = v10;
  ResolvedShadowStyle.animatableData.getter();
  type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
  return AnimatablePair.init(_:_:)();
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>)
  {
    type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(255, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, Float>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, Float>> and conformance AnimatablePair<A, B>);
    type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>();
    lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>();
    lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>);
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
    }
  }
}

void type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, Float>>(uint64_t a1)
{
}

void type metadata accessor for AnimatablePair<Float, Float>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<Float, Float>)
  {
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<Float, Float>);
    }
  }
}

void type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>)
  {
    type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>);
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>);
    }
  }
}

void type metadata accessor for AnimatablePair<CGFloat, CGFloat>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<CGFloat, CGFloat>)
  {
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<CGFloat, CGFloat>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, Float>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatablePair<Float, Float>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, Float>>);
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<Float, Float>);
}

uint64_t *assignWithTake for AutomaticLabeledContentStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((unsigned char *)a1 + 8) = v4;
  outlined consume of Environment<Bool?>.Content(v5, v6);
  return a1;
}

uint64_t View.scrollBounceBehavior(_:axes:)(unsigned char *a1, char a2, uint64_t a3)
{
  v4[0] = *a1;
  v4[1] = a2;
  return MEMORY[0x18C113660](v4, a3, &type metadata for TransformScrollBounceBehavior);
}

uint64_t initializeWithCopy for PositionedNavigationDestinationProcessor(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 8) == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  else
  {
    swift_weakCopyInit();
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    swift_retain();
    swift_retain();
  }
  return a1;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance NavigationBackgroundReaderModifier@<X0>(uint64_t (**a1)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t result = static Alignment.center.getter();
  *a1 = closure #1 in View.renderContainerBackgroundInHostingView<A>(_:);
  a1[1] = 0;
  a1[2] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))result;
  a1[3] = v3;
  return result;
}

uint64_t partial apply for closure #1 in NavigationStackReader.ChildEnvironment.updateValue()@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in NavigationStackReader.ChildEnvironment.updateValue()(a1);
}

uint64_t closure #1 in NavigationStackReader.ChildEnvironment.updateValue()@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = swift_weakLoadStrong();
  if (!result)
  {
    int v12 = 0;
LABEL_9:
    *a1 = v12;
    return result;
  }
  uint64_t v3 = *(void *)(result + 176);
  swift_retain();
  swift_release();
  type metadata accessor for NavigationStackReader.ChildEnvironment();
  uint64_t result = NavigationStackReader.ChildEnvironment.key.getter();
  if (v4 != 6)
  {
    Swift::UInt v6 = result;
    unsigned __int8 v7 = v4;
    Swift::UInt v8 = v5;
    swift_getKeyPath();
    lazy protocol witness table accessor for type NavigationSelectionHost and conformance NavigationSelectionHost(&lazy protocol witness table cache variable for type NavigationSelectionHost and conformance NavigationSelectionHost, (void (*)(uint64_t))type metadata accessor for NavigationSelectionHost);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v9 = *(void *)(v3 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7, v8), (v11 & 1) != 0)) {
      int v12 = *(_DWORD *)(*(void *)(v9 + 56) + 4 * v10);
    }
    else {
      int v12 = 0;
    }
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type NavigationSelectionHost and conformance NavigationSelectionHost(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI23NavigationSelectionHostCAC11Observation10ObservableAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for NavigationStackReader.ChildEnvironment()
{
  return swift_getGenericMetadata();
}

uint64_t assignWithTake for RootModifier(uint64_t a1, uint64_t a2)
{
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  if (*(void *)(a1 + 48))
  {
    if (*(void *)(a2 + 48)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    }
    else {
      outlined destroy of AnyHashable(a1 + 24);
    }
  }
  long long v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  Swift::UInt v5 = (_OWORD *)(a2 + 72);
  int v6 = *(unsigned __int8 *)(a1 + 88);
  if (v6 != 255)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    if (v7 != 255)
    {
      uint64_t v8 = *(void *)(a1 + 72);
      uint64_t v9 = *(void *)(a1 + 80);
      *(_OWORD *)(a1 + 72) = *v5;
      *(unsigned char *)(a1 + 88) = v7 & 1;
      outlined consume of SceneID(v8, v9, v6 & 1);
      goto LABEL_10;
    }
    outlined destroy of SceneID(a1 + 72);
  }
  *(_OWORD *)(a1 + 72) = *v5;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
LABEL_10:
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t initializeWithCopy for TextFieldState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  Swift::UInt v5 = (_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = v7;
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v8 = v5[1];
    *(_OWORD *)(a1 + 16) = *v5;
    *(_OWORD *)(a1 + 32) = v8;
  }
  uint64_t v9 = *(void *)(a2 + 48);
  if (v9)
  {
    *(void *)(a1 + 48) = v9;
    uint64_t v10 = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = v10;
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v11;
  }
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  int v12 = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = v12;
  return a1;
}

uint64_t key path getter for EnvironmentValues.isToggleOn : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isToggleOn.getter();
  *a1 = result;
  return result;
}

uint64_t EnvironmentValues.isToggleOn.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultToggleIsOnKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultToggleIsOnKey>, (uint64_t)&unk_1ED430608, (uint64_t)&protocol witness table for DefaultToggleIsOnKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultToggleIsOnKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultToggleIsOnKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultToggleIsOnKey>, (uint64_t)&unk_1ED430608, (uint64_t)&protocol witness table for DefaultToggleIsOnKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultToggleIsOnKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for EnvironmentPropertyKey<DefaultToggleIsOnKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultToggleIsOnKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultToggleIsOnKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultToggleIsOnKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultToggleIsOnKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultToggleIsOnKey>, (uint64_t)&unk_1ED430608, (uint64_t)&protocol witness table for DefaultToggleIsOnKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultToggleIsOnKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unsigned char *assignWithCopy for SearchCustomScopeBarModifier(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 2] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 2] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t key path setter for ContainerValues.labelItemRole : ContainerValues()
{
  return ContainerValues.subscript.setter();
}

ValueMetadata *type metadata accessor for SearchFieldConfiguration.Scopes()
{
  return &type metadata for SearchFieldConfiguration.Scopes;
}

uint64_t type metadata completion function for WrappedButtonStyleBody()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PrimitiveButtonStyleConfiguration(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedToggleStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

unint64_t lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedToggleStyle and conformance ResolvedToggleStyle;
  if (!lazy protocol witness table cache variable for type ResolvedToggleStyle and conformance ResolvedToggleStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedToggleStyle and conformance ResolvedToggleStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedToggleStyle and conformance ResolvedToggleStyle;
  if (!lazy protocol witness table cache variable for type ResolvedToggleStyle and conformance ResolvedToggleStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedToggleStyle and conformance ResolvedToggleStyle);
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance OpacityButtonHighlightModifier@<X0>(double *a1@<X8>)
{
  double v3 = 1.0;
  if (*(unsigned char *)v1 == 1)
  {
    char v4 = *(unsigned char *)(v1 + 16);
    uint64_t v5 = *(void *)(v1 + 8);
    outlined copy of Environment<Bool>.Content(v5, v4);
    specialized Environment.wrappedValue.getter(v5, v4, (void (*)(uint64_t, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, 0x686353726F6C6F43, 0xEB00000000656D65, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content, &v8);
    int v6 = v8;
    uint64_t result = outlined consume of Environment<Bool>.Content(v5, v4);
    double v3 = 0.2;
    if (v6) {
      double v3 = 0.4;
    }
  }
  *a1 = v3;
  return result;
}

uint64_t key path getter for EnvironmentValues.listRowSpacing : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = EnvironmentValues.listRowSpacing.getter(a1, a2);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5 & 1;
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowSpacing>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowSpacing>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<ListMarginKey>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI22EnvironmentPropertyKeyVyAA14ListRowSpacing33_1F5CF552B45C3ADB33DFD14469AB7BE9LLVGACyxGAA0dE0AAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA35AccessibilityRepresentationModifier33_AAF5C5EDB558810623EAFD84FD4E7390LLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t static AccessibilityChildrenModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  long long v8 = *(_OWORD *)(a2 + 48);
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v46 = *(_OWORD *)(a2 + 32);
  long long v47 = v8;
  long long v10 = *(_OWORD *)(a2 + 48);
  long long v48 = *(_OWORD *)(a2 + 64);
  long long v11 = *(_OWORD *)(a2 + 16);
  long long v44 = *(_OWORD *)a2;
  long long v45 = v11;
  long long v40 = v46;
  long long v41 = v10;
  long long v42 = *(_OWORD *)(a2 + 64);
  int v12 = *a1;
  int v49 = *(_DWORD *)(a2 + 80);
  int v43 = *(_DWORD *)(a2 + 80);
  long long v38 = v44;
  long long v39 = v9;
  ((void (*)(long long *__return_ptr))a3)(&v35);
  uint64_t v36 = v47;
  int v37 = DWORD2(v47);
  *(void *)&long long v38 = v47;
  DWORD2(v38) = DWORD2(v47);
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  uint64_t v14 = v35;
  int v15 = DWORD2(v35);
  int v16 = HIDWORD(v35);
  if (result)
  {
    long long v38 = v35;
    uint64_t v31 = _ViewOutputs.subscript.getter();
    LODWORD(v38) = v12;
    type metadata accessor for AccessibilityChildrenModifier();
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    if (*(void *)(*(void *)(type metadata accessor for AccessibilityRepresentationModifier() - 8) + 64)) {
      closure #1 in static AccessibilityChildrenModifier._makeView(modifier:inputs:body:)(1);
    }
    AGGraphCreateOffsetAttribute2();
    _GraphValue.init(_:)();
    long long v40 = v46;
    long long v41 = v47;
    long long v42 = v48;
    int v43 = v49;
    long long v38 = v44;
    long long v39 = v45;
    static AccessibilityRepresentationModifier._makeView(modifier:inputs:body:)((uint64_t)&v38, a3, a4, (uint64_t)&v32);
    uint64_t v17 = v32;
    uint64_t v18 = v33;
    uint64_t v19 = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)&long long v35 = v17;
    *((void *)&v35 + 1) = __PAIR64__(v19, v18);
    if (one-time initialization token for contain != -1) {
      swift_once();
    }
    *(void *)&long long v38 = static AccessibilityChildBehavior.contain;
    _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_3(0, &lazy cache variable for type metadata for External<AccessibilityContainerModifier>, (uint64_t)&type metadata for AccessibilityContainerModifier, MEMORY[0x1E4F4E778]);
    lazy protocol witness table accessor for type External<AccessibilityContainerModifier> and conformance External<A>();
    swift_retain();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    _GraphValue.init(_:)();
    int v20 = v32;
    *(void *)&long long v38 = v36;
    DWORD2(v38) = v37;
    char v21 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (v21)
    {
      unsigned int v22 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v20, &v44, v17, v18 | (v19 << 32), 0);
      LOBYTE(v38) = 1;
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v22, 0x100000000, (uint64_t)&v44);
    }
    swift_bridgeObjectRelease();
    LOBYTE(v38) = (v21 & 1) == 0;
    _ViewOutputs.subscript.setter();
    uint64_t v23 = v35;
    uint64_t v24 = DWORD2(v35);
    uint64_t v25 = HIDWORD(v35);
    long long v38 = v35;
    uint64_t v26 = _ViewOutputs.subscript.getter();
    unsigned int v27 = *MEMORY[0x1E4F4E7A0];
    if ((v26 & 0x100000000) != 0) {
      unsigned int v28 = *MEMORY[0x1E4F4E7A0];
    }
    else {
      unsigned int v28 = v26;
    }
    if ((v31 & 0x100000000) == 0) {
      unsigned int v27 = v31;
    }
    *(void *)&long long v38 = __PAIR64__(v27, v28);
    type metadata accessor for AccessibilityChildrenModifier.BridgedAttachment();
    swift_getWitnessTable();
    _GraphValue.init<A>(_:)();
    int v29 = v32;
    *(void *)&long long v38 = v36;
    DWORD2(v38) = v37;
    swift_bridgeObjectRetain();
    char v30 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (v30) {
      specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v29, &v44, v23, v24 | (v25 << 32), 0);
    }
    swift_bridgeObjectRelease();
    LOBYTE(v38) = (v30 & 1) == 0;
    uint64_t result = _ViewOutputs.subscript.setter();
    uint64_t v14 = v35;
    int v15 = DWORD2(v35);
    int v16 = HIDWORD(v35);
  }
  *(void *)a5 = v14;
  *(_DWORD *)(a5 + 8) = v15;
  *(_DWORD *)(a5 + 12) = v16;
  return result;
}

uint64_t static AccessibilityRepresentationModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(void)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  long long v7 = *(_OWORD *)(a1 + 48);
  v20[2] = *(_OWORD *)(a1 + 32);
  long long v21 = v7;
  long long v22 = *(_OWORD *)(a1 + 64);
  int v23 = *(_DWORD *)(a1 + 80);
  long long v8 = *(_OWORD *)(a1 + 16);
  v20[0] = *(_OWORD *)a1;
  v20[1] = v8;
  uint64_t v9 = swift_allocObject();
  a2();
  uint64_t v24 = v21;
  int v25 = DWORD2(v21);
  char v10 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  uint64_t v11 = *(void *)(v9 + 16);
  int v13 = *(_DWORD *)(v9 + 24);
  int v12 = *(_DWORD *)(v9 + 28);
  if (v10)
  {
    _ViewOutputs.subscript.getter();
    type metadata accessor for AccessibilityRepresentationModifier();
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    if (*(void *)(*(void *)(a3 - 8) + 64)) {
      closure #1 in static AccessibilityRepresentationModifier._makeView(modifier:inputs:body:)(1, a3);
    }
    type metadata accessor for AccessibilityProxyModifier();
    AGGraphCreateOffsetAttribute2();
    type metadata accessor for AccessibilityRepresentationModifier.ProxyModifier();
    swift_getWitnessTable();
    _GraphValue.init<A>(_:)();
    swift_retain();
    swift_getWitnessTable();
    static ViewModifier._makeView(modifier:inputs:body:)();
    swift_release();
    swift_beginAccess();
    *(void *)(v9 + 16) = v18;
    *(void *)(v9 + 24) = v19;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v17 = *(void *)(v9 + 16);
    _ViewOutputs.subscript.getter();
    swift_endAccess();
    type metadata accessor for AccessibilityRepresentationModifier.BridgedAttachment();
    swift_getWitnessTable();
    _GraphValue.init<A>(_:)();
    uint64_t v15 = *(void *)(v9 + 16);
    unint64_t v16 = *(void *)(v9 + 24);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)()) {
      specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v17, v20, v15, v16, 0);
    }
    swift_bridgeObjectRelease();
    swift_beginAccess();
    _ViewOutputs.subscript.setter();
    swift_endAccess();
    *(void *)a4 = *(void *)(v9 + 16);
    *(void *)(a4 + 8) = *(void *)(v9 + 24);
    swift_bridgeObjectRetain();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_release();
    *(void *)a4 = v11;
    *(_DWORD *)(a4 + 8) = v13;
    *(_DWORD *)(a4 + 12) = v12;
  }
  return result;
}

uint64_t closure #1 in static AccessibilityRepresentationModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7[2] = type metadata accessor for AccessibilityRepresentationModifier();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t View.accessibilityRepresentation<A>(representation:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a5;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  char v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AccessibilityRepresentationModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  a1(v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a4);
  MEMORY[0x18C113660](v15, a3, v11, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for AccessibilityRepresentationModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityRepresentationModifier.BridgedAttachment()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityRepresentationModifier.ProxyModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in static AccessibilityChildrenModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  v5[2] = type metadata accessor for AccessibilityChildrenModifier();
  uint64_t v6 = type metadata accessor for AccessibilityRepresentationModifier();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, v6, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v7;
}

uint64_t View.accessibilityChildren<A>(children:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a5;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  char v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AccessibilityChildrenModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  a1(v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a4);
  MEMORY[0x18C113660](v15, a3, v11, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for AccessibilityChildrenModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityChildrenModifier.BridgedAttachment()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t instantiation function for generic protocol witness table for AccessibilityOpacityModifier(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier();
  unint64_t result = lazy protocol witness table accessor for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata completion function for UIKitEventBindingBridge()
{
  return swift_initClassMetadata2();
}

double ScrollGeometryProvider.value.getter@<D0>(_OWORD *a1@<X8>)
{
  AGGraphGetValue();
  AGGraphGetValue();
  MEMORY[0x18C114450]();
  AGGraphGetValue();
  AGGraphGetValue();
  CGRect.outset(by:)();
  uint64_t Value = AGGraphGetValue();
  long long v4 = *(_OWORD *)(Value + 16);
  long long v5 = *(_OWORD *)(Value + 32);
  MEMORY[0x18C114450]();
  AGGraphGetValue();
  ScrollGeometry.init(contentOffset:contentSize:contentInsets:containerSize:visibleRect:)();
  AGGraphGetValue();
  ScrollGeometry.applyLayoutDirection(_:contentSize:)();
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  double result = *(double *)&v10;
  a1[6] = v10;
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in ScrollBehaviorModifier<A>()
{
  return &protocol witness table for ScrollBehaviorModifier<A>;
}

uint64_t type metadata completion function for _ShadowView()
{
  return type metadata completion function for DelaySource();
}

_UNKNOWN **base witness table accessor for View in LazyVStack<A>()
{
  return &protocol witness table for LazyVStack<A>;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LazyVStack<A>()
{
  return static LazyVStack._makeView(view:inputs:)();
}

uint64_t destroy for UIKitSystemButtonConfigurationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = *(void *)v5;
  char v7 = *(unsigned char *)(v5 + 8);

  return outlined consume of Environment<Bool>.Content(v6, v7);
}

uint64_t initializeWithCopy for ReadDestinationsModifier.RequestsTransform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OutsetByRowInsetsIfNecessary(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  char v8 = *(unsigned char *)(a2 + 64);
  outlined copy of Environment<HoverEffectContext?>.Content(v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  char v13 = *(unsigned char *)(a1 + 64);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 64) = v8;
  outlined consume of Environment<HoverEffectContext?>.Content(v9, v10, v11, v12, v13);
  uint64_t v14 = *(void *)(a2 + 72);
  LOBYTE(v5) = *(unsigned char *)(a2 + 80);
  outlined copy of Environment<Bool>.Content(v14, v5);
  uint64_t v15 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  *(void *)(a1 + 72) = v14;
  *(unsigned char *)(a1 + 80) = v5;
  outlined consume of Environment<Bool>.Content(v15, v16);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  return a1;
}

uint64_t instantiation function for generic protocol witness table for <> Section<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

void *type metadata accessor for SupportsHoverEffects()
{
  return &unk_1ED432C10;
}

void one-time initialization function for appRootViewWrappers()
{
  appRootViewWrappers._rawuint64_t Value = (void *)MEMORY[0x1E4FBC860];
}

uint64_t partial apply for implicit closure #1 in static WindowSceneList._makeScene(scene:inputs:)()
{
  return implicit closure #1 in static WindowSceneList._makeScene(scene:inputs:)(*(_DWORD *)(v0 + 32), *(long long **)(v0 + 40), *(unsigned int *)(v0 + 48), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t protocol witness for static UserDefaultKeyedFeature.key.getter in conformance EnableLazyLayoutReuseLoggingAlways()
{
  return 0xD00000000000002ELL;
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(void *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(_DWORD *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

void (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(id *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

unint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

_DWORD *(*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t protocol witness for ViewGraphFeature.uninstantiate(graph:) in conformance AccessibilityViewGraph()
{
  v0[1] = 0;
  uint64_t result = swift_release();
  *uint64_t v0 = 0;
  return result;
}

uint64_t assignWithCopy for SheetPresentationModifier(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v4 = (unint64_t)a2;
  *(void *)a1 = *a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(v4 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(v4 + 16);
  uint64_t v6 = (unint64_t *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFF8;
  v4 &= 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = *(void *)(v4 + 24);
  uint64_t v9 = (void *)(v4 + 24);
  unint64_t v8 = v10;
  if (*v6 < 0xFFFFFFFF)
  {
    if (v8 >= 0xFFFFFFFF)
    {
      uint64_t v12 = v9[1];
      *uint64_t v6 = v8;
      *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = v12;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  if (v8 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v11 = v9[1];
  *uint64_t v6 = v8;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = v11;
  swift_retain();
  swift_release();
LABEL_8:
  unint64_t v13 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)(v14 + 8);
  *(void *)unint64_t v13 = *(void *)v14;
  *(void *)(v13 + 8) = v15;
  swift_retain();
  swift_release();
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  *(unsigned char *)(v13 + 17) = *(unsigned char *)(v14 + 17);
  uint64_t v16 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v17 = v16 + 24;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = (v18 + 18 + v13) & ~v18;
  uint64_t v20 = (v18 + 18 + v14) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v16 + 24))(v19, v20);
  *(unsigned char *)(*(void *)(v17 + 40) + v19) = *(unsigned char *)(*(void *)(v17 + 40) + v20);
  return a1;
}

Swift::Void __swiftcall FinishLaunchTestAction.callAsFunction()()
{
  uint64_t v0 = static AppGraph.shared;
  if (static AppGraph.shared && (*(unsigned char *)(static AppGraph.shared + 230) & 1) == 0)
  {
    *(unsigned char *)(static AppGraph.shared + 230) = 1;
    swift_retain();
    if (AppGraph.traceLaunch.getter())
    {
      type metadata accessor for AGGraphRef(0);
      static AGGraphRef.stopTracing()();
    }
    else
    {
      if ((AppGraph.launchProfileOptions.getter() & 2) != 0) {
        AGGraphStopProfiling();
      }
      if (*(_DWORD *)(v0 + 224)) {
        AGGraphArchiveJSON();
      }
    }
    swift_release();
  }
  uint64_t v1 = self;
  id v2 = objc_msgSend(v1, sel_sharedApplication);
  id v3 = objc_msgSend(v1, sel_sharedApplication);
  id v4 = objc_msgSend(v3, sel__launchTestName);

  objc_msgSend(v2, sel_finishedTest_, v4);
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance UIApplicationDelegateAdaptor<A>()
{
  type metadata accessor for GraphHost();
  MEMORY[0x18C114840]();
  type metadata accessor for AppGraph();
  uint64_t v0 = swift_dynamicCastClass();
  uint64_t result = swift_release();
  if (!v0)
  {
    JUMPOUT(0x18C112B90);
  }
  return result;
}

void partial apply for closure #1 in runApp<A>(_:)()
{
  closure #1 in runApp<A>(_:)(v0[4], v0[2], v0[3]);
}

void closure #1 in runApp<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for AppGraph();
  uint64_t v6 = specialized AppGraph.__allocating_init<A>(app:)(a1, a2, a3);
  if ((*(unsigned char *)(v6 + 230) & 1) == 0)
  {
    if (AppGraph.traceLaunch.getter())
    {
      type metadata accessor for AGGraphRef(0);
      static AGGraphRef.startTracing(options:)();
    }
    else if ((AppGraph.launchProfileOptions.getter() & 2) != 0)
    {
      AGGraphStartProfiling();
    }
  }
  GraphHost.instantiate()();
  if (static AppGraph.shared)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    static AppGraph.shared = v6;
  }
}

uint64_t type metadata accessor for AppGraph()
{
  uint64_t result = type metadata singleton initialization cache for AppGraph;
  if (!type metadata singleton initialization cache for AppGraph) {
    return swift_getSingletonMetadata();
  }
  return result;
}

const char *AppGraph.launchProfileOptions.getter()
{
  if (*(unsigned char *)(v0 + 228) != 1) {
    return (const char *)*(unsigned int *)(v0 + 224);
  }
  uint64_t result = getenv("SWIFTUI_PROFILE_LAUNCH");
  if (result) {
    uint64_t result = (const char *)atoi(result);
  }
  *(_DWORD *)(v0 + 224) = result;
  *(unsigned char *)(v0 + 228) = 0;
  return result;
}

uint64_t AppGraph.traceLaunch.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 229);
  if (v1 == 2)
  {
    char v2 = static ProcessEnvironment.BOOL(forKey:defaultValue:)();
    *(unsigned char *)(v0 + 229) = v2 & 1;
  }
  else
  {
    char v2 = v1 & 1;
  }
  return v2 & 1;
}

uint64_t specialized AppGraph.__allocating_init<A>(app:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized AppGraph.init<A>(app:)(a1, a2, a3);
}

Swift::Void __swiftcall AppSceneDelegate.sceneWillEnterForeground(_:)(UIScene *a1)
{
}

void AppSceneDelegate.sceneWillResignActive(_:)(uint64_t a1, SEL *a2)
{
  uint64_t v5 = OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_scenePhase;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_scenePhase) = 1;
  uint64_t v6 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
  if (v6)
  {
    id v7 = objc_msgSend(v6, sel_rootViewController);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID);
      int v10 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID + 16);
      if (v10 == 255)
      {
      }
      else
      {
        Swift::UInt v11 = *v9;
        uint64_t v12 = v9[1];
        outlined copy of SceneID(*v9, v12, v10 & 1);
        AppSceneDelegate.scenesDidChange(phaseChanged:)(1);
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        char v19 = *(unsigned char *)(v2 + v5);
        swift_retain();
        PlatformSceneCache.setPhase(_:id:host:)(&v19, v11, v12, v10 & 1);
        swift_release();

        outlined consume of SceneID?(v11, v12, v10);
      }
    }
  }
  uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
  if (v13)
  {
    unint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)v13 + 80);
    uint64_t v15 = swift_retain();
    uint64_t v16 = (void *)v14(v15);
    swift_release();
    if (v16)
    {
      uint64_t v20 = &unk_1ED4DD6D0;
      uint64_t v17 = (void *)swift_dynamicCastObjCProtocolConditional();
      if (v17)
      {
        uint64_t v18 = v17;
        if (objc_msgSend(v17, sel_respondsToSelector_, *a2)) {
          objc_msgSend(v18, *a2, a1);
        }
      }
    }
  }
}

Swift::Void __swiftcall AppSceneDelegate.sceneDidBecomeActive(_:)(UIScene *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_scenePhase;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_scenePhase) = 2;
  id v4 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
  if (v4)
  {
    id v5 = objc_msgSend(v4, sel_rootViewController);
    if (v5)
    {
      uint64_t v6 = v5;
      id v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID);
      int v8 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID + 16);
      if (v8 == 255)
      {
      }
      else
      {
        Swift::UInt v9 = *v7;
        uint64_t v10 = v7[1];
        outlined copy of SceneID(*v7, v10, v8 & 1);
        AppSceneDelegate.scenesDidChange(phaseChanged:)(1);
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        char v17 = *(unsigned char *)(v1 + v3);
        swift_retain();
        PlatformSceneCache.setPhase(_:id:host:)(&v17, v9, v10, v8 & 1);
        swift_release();

        outlined consume of SceneID?(v9, v10, v8);
      }
    }
  }
  uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
  if (v11)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 80);
    uint64_t v13 = swift_retain();
    unint64_t v14 = (void *)v12(v13);
    swift_release();
    if (v14)
    {
      uint64_t v18 = &unk_1ED4DD6D0;
      uint64_t v15 = (void *)swift_dynamicCastObjCProtocolConditional();
      if (v15)
      {
        uint64_t v16 = v15;
        if (objc_msgSend(v15, sel_respondsToSelector_, sel_sceneDidBecomeActive_)) {
          objc_msgSend(v16, sel_sceneDidBecomeActive_, a1);
        }
      }
    }
  }
}

uint64_t AppGraph.graphDelegate.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t partial apply for closure #1 in PlatformSceneCache.setPhase(_:id:host:)()
{
  return closure #1 in PlatformSceneCache.setPhase(_:id:host:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t closure #1 in PlatformSceneCache.setPhase(_:id:host:)(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 204) == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v3 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  id v4 = specialized Sequence.compactMap<A>(_:)(v3, a2);
  swift_bridgeObjectRelease();
  swift_release();
  static Semantics.v6.getter();
  char v5 = isLinkedOnOrAfter(_:)();
  unint64_t v6 = *((void *)v4 + 2);
  if (v5)
  {
    if (!v6) {
      goto LABEL_45;
    }
    unsigned int v7 = v4[32];
    unint64_t v8 = v6 - 1;
    if (v6 == 1) {
      goto LABEL_45;
    }
    if (v6 < 9)
    {
      unint64_t v9 = 1;
      goto LABEL_35;
    }
    if (v6 >= 0x21)
    {
      unint64_t v13 = v8 & 0xFFFFFFFFFFFFFFE0;
      uint8x16_t v15 = (uint8x16_t)vdupq_n_s8(v7);
      uint64_t v16 = (uint8x16_t *)(v4 + 49);
      unint64_t v17 = v8 & 0xFFFFFFFFFFFFFFE0;
      uint8x16_t v18 = v15;
      do
      {
        uint8x16_t v15 = vmaxq_u8(v15, v16[-1]);
        uint8x16_t v18 = vmaxq_u8(v18, *v16);
        v16 += 2;
        v17 -= 32;
      }
      while (v17);
      uint8x16_t v19 = vmaxq_u8(v15, v18);
      v19.i8[0] = vmaxvq_u8(v19);
      unsigned int v7 = v19.i32[0];
      if (v8 == v13) {
        goto LABEL_45;
      }
      if ((v8 & 0x18) == 0)
      {
        unint64_t v9 = v13 | 1;
LABEL_35:
        unint64_t v33 = v6 - v9;
        unsigned int v34 = &v4[v9 + 32];
        do
        {
          unsigned int v36 = *v34++;
          char v35 = v36;
          if (v7 <= v36) {
            LOBYTE(v7) = v35;
          }
          --v33;
        }
        while (v33);
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v13 = 0;
    }
    unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFF8 | 1;
    uint8x8_t v20 = (uint8x8_t)vdup_n_s8(v7);
    long long v21 = (uint8x8_t *)&v4[v13 + 33];
    unint64_t v22 = v13 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v23 = *v21++;
      uint8x8_t v20 = vmax_u8(v20, v23);
      v22 += 8;
    }
    while (v22);
    LOBYTE(v7) = vmaxv_u8(v20);
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_45;
    }
    goto LABEL_35;
  }
  if (!v6) {
    goto LABEL_45;
  }
  unsigned int v10 = v4[32];
  unint64_t v11 = v6 - 1;
  if (v6 == 1) {
    goto LABEL_45;
  }
  if (v6 < 9)
  {
    uint64_t v12 = 1;
    goto LABEL_41;
  }
  if (v6 < 0x21)
  {
    unint64_t v14 = 0;
    goto LABEL_30;
  }
  unint64_t v14 = v11 & 0xFFFFFFFFFFFFFFE0;
  uint8x16_t v24 = (uint8x16_t)vdupq_n_s8(v10);
  int v25 = (uint8x16_t *)(v4 + 49);
  unint64_t v26 = v11 & 0xFFFFFFFFFFFFFFE0;
  uint8x16_t v27 = v24;
  do
  {
    uint8x16_t v24 = vminq_u8(v25[-1], v24);
    uint8x16_t v27 = vminq_u8(*v25, v27);
    v25 += 2;
    v26 -= 32;
  }
  while (v26);
  uint8x16_t v28 = vminq_u8(v24, v27);
  v28.i8[0] = vminvq_u8(v28);
  unsigned int v10 = v28.i32[0];
  if (v11 == v14) {
    goto LABEL_45;
  }
  if ((v11 & 0x18) != 0)
  {
LABEL_30:
    uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFF8 | 1;
    uint8x8_t v29 = (uint8x8_t)vdup_n_s8(v10);
    char v30 = (uint8x8_t *)&v4[v14 + 33];
    unint64_t v31 = v14 - (v11 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v32 = *v30++;
      uint8x8_t v29 = vmin_u8(v32, v29);
      v31 += 8;
    }
    while (v31);
    LOBYTE(v10) = vminv_u8(v29);
    if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_45;
    }
    goto LABEL_41;
  }
  uint64_t v12 = v14 | 1;
LABEL_41:
  unint64_t v37 = v6 - v12;
  long long v38 = &v4[v12 + 32];
  do
  {
    unsigned int v40 = *v38++;
    char v39 = v40;
    if (v40 < v10) {
      LOBYTE(v10) = v39;
    }
    --v37;
  }
  while (v37);
LABEL_45:
  swift_bridgeObjectRelease();
  uint64_t result = AGGraphSetValue();
  if (result)
  {
    swift_retain();
    AppGraph.graphDidChange()();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall AppGraph.graphDidChange()()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  id v4 = *(void **)(v0 + 32);
  char v5 = *(unsigned char *)(v0 + 40);
  char v6 = *(unsigned char *)(v0 + 41);
  int v7 = *(_DWORD *)(v0 + 68);
  uint64_t v8 = *(void *)(v0 + 72);
  int v9 = *(_DWORD *)(v0 + 80);
  uint64_t v10 = *(void *)(v0 + 88);
  uint64_t v11 = *(void *)(v1 + 112);
  int v43 = v2;
  long long v44 = v3;
  long long v45 = v4;
  char v46 = v5;
  char v47 = v6;
  long long v48 = *(_OWORD *)(v1 + 44);
  uint64_t v49 = *(void *)(v1 + 60);
  int v50 = v7;
  uint64_t v51 = v8;
  int v52 = v9;
  uint64_t v53 = v10;
  long long v54 = *(_OWORD *)(v1 + 96);
  uint64_t v55 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v12 = v2;
  id v13 = v3;
  id v14 = v4;
  uint8x16_t v15 = (void (*)(unsigned char *, void))GraphHost.Data.updateSeed.modify();
  ++*v16;
  v15(v42, 0);
  unint64_t v17 = v43;
  uint8x16_t v18 = v44;
  uint8x16_t v19 = v45;
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  GraphHost.runTransaction()();
  AGGraphGetValue();
  char v21 = v20;
  swift_beginAccess();
  uint64_t v22 = *(void *)(v1 + 192);
  uint64_t v23 = v22 + 56;
  uint64_t v24 = 1 << *(unsigned char *)(v22 + 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & *(void *)(v22 + 56);
  int64_t v27 = (unint64_t)(v24 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v28 = 0;
  uint64_t v29 = v21 & 1;
  while (1)
  {
    if (v26)
    {
      unint64_t v30 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      unint64_t v31 = v30 | (v28 << 6);
      goto LABEL_24;
    }
    int64_t v32 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v32 >= v27) {
      goto LABEL_33;
    }
    unint64_t v33 = *(void *)(v23 + 8 * v32);
    ++v28;
    if (!v33)
    {
      int64_t v28 = v32 + 1;
      if (v32 + 1 >= v27) {
        goto LABEL_33;
      }
      unint64_t v33 = *(void *)(v23 + 8 * v28);
      if (!v33)
      {
        int64_t v28 = v32 + 2;
        if (v32 + 2 >= v27) {
          goto LABEL_33;
        }
        unint64_t v33 = *(void *)(v23 + 8 * v28);
        if (!v33)
        {
          int64_t v28 = v32 + 3;
          if (v32 + 3 >= v27) {
            goto LABEL_33;
          }
          unint64_t v33 = *(void *)(v23 + 8 * v28);
          if (!v33) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v26 = (v33 - 1) & v33;
    unint64_t v31 = __clz(__rbit64(v33)) + (v28 << 6);
LABEL_24:
    outlined init with copy of HashableWeakBox<Swift.AnyObject>(*(void *)(v22 + 48) + 16 * v31, (uint64_t)v42);
    outlined init with take of HashableWeakBox<Swift.AnyObject>((uint64_t)v42, (uint64_t)v41);
    uint64_t v35 = MEMORY[0x18C119DF0](v41);
    if (v35)
    {
      uint64_t v36 = v35;
      swift_getObjectType();
      uint64_t v37 = swift_conformsToProtocol2();
      if (v37) {
        uint64_t v38 = v37;
      }
      else {
        uint64_t v38 = 0;
      }
      if (v37) {
        uint64_t v39 = v36;
      }
      else {
        uint64_t v39 = 0;
      }
      if (v39)
      {
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 8))(v29, ObjectType, v38);
      }
      swift_unknownObjectRelease();
    }
    outlined destroy of HashableWeakBox<Swift.AnyObject>((uint64_t)v41);
  }
  int64_t v34 = v32 + 4;
  if (v34 >= v27)
  {
LABEL_33:
    swift_release();
    return;
  }
  unint64_t v33 = *(void *)(v23 + 8 * v34);
  if (v33)
  {
    int64_t v28 = v34;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v28 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v28 >= v27) {
      goto LABEL_33;
    }
    unint64_t v33 = *(void *)(v23 + 8 * v28);
    ++v34;
    if (v33) {
      goto LABEL_23;
    }
  }
LABEL_35:
  __break(1u);
}

uint64_t outlined init with copy of HashableWeakBox<Swift.AnyObject>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ContiguousArrayStorage<AppPreview>(0, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4F3FB58]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _ContiguousArrayStorage<AppPreview>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined init with take of HashableWeakBox<Swift.AnyObject>(uint64_t a1, uint64_t a2)
{
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_3(0, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4F3FB58]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of HashableWeakBox<Swift.AnyObject>(uint64_t a1)
{
  type metadata accessor for HashableWeakBox<Swift.AnyObject>(0, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4F3FB58]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized Sequence<>.max()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X8>)
{
  uint64_t v2 = result + 64;
  char v3 = *(unsigned char *)(result + 32);
  uint64_t v4 = 1 << v3;
  uint64_t v5 = -1;
  if (1 << v3 < 64) {
    uint64_t v5 = ~(-1 << (1 << v3));
  }
  unint64_t v6 = v5 & *(void *)(result + 64);
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = __clz(__rbit64(v6));
    unint64_t v9 = (v6 - 1) & v6;
    int64_t v10 = (unint64_t)(v4 + 63) >> 6;
  }
  else
  {
    LODWORD(v7) = v3 & 0x3F;
    if (v7 <= 6) {
      goto LABEL_48;
    }
    int64_t v10 = (unint64_t)(v4 + 63) >> 6;
    unint64_t v19 = *(void *)(result + 72);
    if (v19)
    {
      uint64_t v7 = 1;
    }
    else
    {
      if (v7 < 8) {
        goto LABEL_48;
      }
      unint64_t v19 = *(void *)(result + 80);
      if (v19)
      {
        uint64_t v7 = 2;
      }
      else
      {
        unint64_t v19 = *(void *)(result + 88);
        if (v19)
        {
          uint64_t v7 = 3;
        }
        else
        {
LABEL_36:
          if (v7 < 9) {
            goto LABEL_48;
          }
          unint64_t v19 = *(void *)(result + 96);
          if (v19)
          {
            uint64_t v7 = 4;
          }
          else
          {
            unint64_t v19 = *(void *)(result + 104);
            if (!v19) {
              goto LABEL_42;
            }
            uint64_t v7 = 5;
          }
        }
      }
    }
LABEL_29:
    unint64_t v9 = (v19 - 1) & v19;
    unint64_t v8 = __clz(__rbit64(v19)) + (v7 << 6);
  }
  uint64_t v11 = *(void *)(result + 56);
  unsigned __int8 v12 = *(unsigned char *)(v11 + v8);
  while (v9)
  {
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v7 << 6);
LABEL_7:
    unsigned int v15 = *(unsigned __int8 *)(v11 + v14);
    if (v12 <= v15) {
      unsigned __int8 v12 = v15;
    }
  }
  int64_t v16 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v16 >= v10) {
    goto LABEL_49;
  }
  unint64_t v17 = *(void *)(v2 + 8 * v16);
  ++v7;
  if (v17) {
    goto LABEL_25;
  }
  uint64_t v7 = v16 + 1;
  if (v16 + 1 >= v10) {
    goto LABEL_49;
  }
  unint64_t v17 = *(void *)(v2 + 8 * v7);
  if (v17) {
    goto LABEL_25;
  }
  uint64_t v7 = v16 + 2;
  if (v16 + 2 >= v10) {
    goto LABEL_49;
  }
  unint64_t v17 = *(void *)(v2 + 8 * v7);
  if (v17) {
    goto LABEL_25;
  }
  uint64_t v7 = v16 + 3;
  if (v16 + 3 >= v10) {
    goto LABEL_49;
  }
  unint64_t v17 = *(void *)(v2 + 8 * v7);
  if (v17)
  {
LABEL_25:
    unint64_t v9 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v7 << 6);
    goto LABEL_7;
  }
  int64_t v18 = v16 + 4;
  if (v18 >= v10) {
    goto LABEL_49;
  }
  unint64_t v17 = *(void *)(v2 + 8 * v18);
  if (v17)
  {
    uint64_t v7 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v7 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v7 >= v10) {
      goto LABEL_49;
    }
    unint64_t v17 = *(void *)(v2 + 8 * v7);
    ++v18;
    if (v17) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_42:
  uint64_t v20 = 0;
  uint64_t v21 = 6;
  if (v10 > 6) {
    uint64_t v21 = v10;
  }
  uint64_t v22 = v21 - 6;
  while (v22 != v20)
  {
    unint64_t v19 = *(void *)(result + 112 + 8 * v20++);
    if (v19)
    {
      uint64_t v7 = v20 + 5;
      goto LABEL_29;
    }
  }
LABEL_48:
  unsigned __int8 v12 = 3;
LABEL_49:
  *a2 = v12;
  return result;
}

uint64_t PlatformSceneCache.setPhase(_:id:host:)(char *a1, Swift::UInt a2, uint64_t a3, char a4)
{
  char v8 = *a1;
  unint64_t v9 = (uint64_t *)(v4 + 16);
  swift_beginAccess();
  uint64_t v10 = *(void *)(v4 + 16);
  if (!*(void *)(v10 + 16)) {
    return swift_endAccess();
  }
  char v11 = a4 & 1;
  outlined copy of SceneID(a2, a3, v11);
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v11);
  if ((v13 & 1) == 0)
  {
    outlined consume of SceneID(a2, a3, v11);
    return swift_endAccess();
  }
  uint64_t v14 = *(void *)(*(void *)(v10 + 56) + 8 * v12);
  swift_endAccess();
  swift_bridgeObjectRetain();
  outlined consume of SceneID(a2, a3, v11);
  swift_unknownObjectWeakInit();
  uint64_t v15 = swift_unknownObjectWeakAssign();
  outlined init with take of HashableWeakBox<UIViewController>(v15, (uint64_t)v21);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, (uint64_t)v21, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  outlined destroy of HashableWeakBox<UIViewController>((uint64_t)v21);
  swift_beginAccess();
  outlined copy of SceneID(a2, a3, v11);
  swift_bridgeObjectRetain();
  char v17 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v20 = *v9;
  *unint64_t v9 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, a2, a3, v11, v17);
  *unint64_t v9 = v20;
  swift_bridgeObjectRelease();
  outlined consume of SceneID(a2, a3, v11);
  uint64_t v18 = swift_endAccess();
  if (static AppGraph.shared)
  {
    MEMORY[0x1F4188790](v18);
    swift_retain();
    static Update.ensure<A>(_:)();
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with take of HashableWeakBox<UIViewController>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for HashableWeakBox<UIViewController>(0, (unint64_t *)&lazy cache variable for type metadata for HashableWeakBox<UIViewController>, (uint64_t (*)(uint64_t))type metadata accessor for UIViewController, MEMORY[0x1E4F3FB58]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of HashableWeakBox<UIViewController>(uint64_t a1)
{
  type metadata accessor for HashableWeakBox<UIViewController>(0, (unint64_t *)&lazy cache variable for type metadata for HashableWeakBox<UIViewController>, (uint64_t (*)(uint64_t))type metadata accessor for UIViewController, MEMORY[0x1E4F3FB58]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for HashableWeakBox<UIViewController>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI15HashableWeakBoxVySo16UIViewControllerCGMaTm_0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for NSObject(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, uint64_t a3, char a4, char a5)
{
  unint64_t v6 = v5;
  uint64_t v11 = a4 & 1;
  uint64_t v12 = *v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 1);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = *(void *)(v20 + 56);
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v11);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, v11, a1, v20);

  return outlined copy of SceneID(a2, a3, v11);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, uint64_t a2, char a3)
{
  char v6 = a3 & 1;
  Hasher.init(_seed:)();
  if (a3)
  {
    Hasher._combine(_:)(a1);
    Hasher._combine(_:)(a2);
  }
  else
  {
    String.hash(into:)();
  }
  Swift::Int v7 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v6, v7);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = v4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v8 = a4 & ~v7;
  if ((*(void *)(v4 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    char v9 = a3;
    uint64_t v10 = a2;
    uint64_t v34 = ~v7;
    int v33 = a2;
    do
    {
      uint64_t v13 = *(void *)(v5 + 48) + 24 * v8;
      uint64_t v14 = *(void *)v13;
      uint64_t v15 = *(void *)(v13 + 8);
      char v16 = *(unsigned char *)(v13 + 16);
      if (v16)
      {
        if (v9)
        {
          if (v14 == a1 && *(void *)(v13 + 8) == v33) {
            return v8;
          }
          goto LABEL_7;
        }
        uint64_t v35 = _typeName(_:qualified:)();
        uint64_t v37 = v17;
        v18._countAndFlagsBits = 45;
        v18._object = (void *)0xE100000000000000;
        String.append(_:)(v18);
        v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        uint64_t v20 = v10;
        uint64_t v21 = v35;
        uint64_t v22 = v37;
        swift_bridgeObjectRetain();
        uint64_t v23 = a1;
      }
      else
      {
        if ((v9 & 1) == 0)
        {
          BOOL v24 = v14 == a1 && v15 == v10;
          if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            return v8;
          }
          goto LABEL_7;
        }
        outlined copy of SceneID(*(void *)v13, *(void *)(v13 + 8), 0);
        swift_bridgeObjectRetain();
        uint64_t v36 = _typeName(_:qualified:)();
        uint64_t v38 = v25;
        v26._countAndFlagsBits = 45;
        v26._object = (void *)0xE100000000000000;
        String.append(_:)(v26);
        v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        uint64_t v23 = v36;
        uint64_t v20 = v38;
        uint64_t v21 = v14;
        uint64_t v22 = v15;
      }
      if (v21 == v23 && v22 == v20)
      {
        swift_bridgeObjectRelease_n();
        outlined consume of SceneID(v14, v15, v16);
        return v8;
      }
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of SceneID(v14, v15, v16);
      char v9 = a3;
      uint64_t v10 = a2;
      if (v29) {
        return v8;
      }
LABEL_7:
      unint64_t v8 = (v8 + 1) & v34;
    }
    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  uint64_t v7 = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    uint64_t v11 = ~v6;
    uint64_t v12 = *(void *)(v4 + 48);
    do
    {
      uint64_t v13 = v12 + 24 * v7;
      if (*(unsigned char *)(v13 + 16))
      {
        if ((a3 & 1) == 0) {
          goto LABEL_3;
        }
      }
      else if (a3)
      {
        goto LABEL_3;
      }
      uint64_t v14 = *(void *)v13 == a1 && *(void *)(v13 + 8) == a2;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return v7;
      }
LABEL_3:
      uint64_t v7 = (v7 + 1) & v11;
    }
    while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(unsigned char *)(v16[7] + v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_14:
    type metadata accessor for PartialKeyPath<UISplitViewController>(0, (unint64_t *)&lazy cache variable for type metadata for HashableWeakBox<UIViewController>, (unint64_t *)&lazy cache variable for type metadata for UIViewController, 0x1E4FB1EC0, MEMORY[0x1E4F3FB58]);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  char v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  outlined init with copy of HashableWeakBox<UIViewController>(a2, (uint64_t)v18);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v18, a1, v16);
}

uint64_t outlined init with copy of HashableWeakBox<UIViewController>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for HashableWeakBox<UIViewController>(0, (unint64_t *)&lazy cache variable for type metadata for HashableWeakBox<UIViewController>, (uint64_t (*)(uint64_t))type metadata accessor for UIViewController, MEMORY[0x1E4F3FB58]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _DictionaryStorage<HashableWeakBox<UIViewController>, ScenePhase>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<HashableWeakBox<UIViewController>, ScenePhase>)
  {
    _s7SwiftUI15HashableWeakBoxVySo16UIViewControllerCGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for HashableWeakBox<UIViewController>, (unint64_t *)&lazy cache variable for type metadata for UIViewController, 0x1E4FB1EC0, MEMORY[0x1E4F3FB58]);
    lazy protocol witness table accessor for type HashableWeakBox<UIViewController> and conformance HashableWeakBox<A>();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<HashableWeakBox<UIViewController>, ScenePhase>);
    }
  }
}

uint64_t outlined init with take of TabSidebarCustomization(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for HashableWeakBox<UIViewController>()
{
  if (!lazy cache variable for type metadata for HashableWeakBox<UIViewController>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    unint64_t v0 = type metadata accessor for HashableWeakBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HashableWeakBox<UIViewController>);
    }
  }
}

uint64_t outlined init with copy of TabViewCustomization(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI20TabViewCustomizationVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for (HashableWeakBox<UIViewController>, ScenePhase)()
{
  if (!lazy cache variable for type metadata for (HashableWeakBox<UIViewController>, ScenePhase))
  {
    type metadata accessor for HashableWeakBox<UIViewController>(255, (unint64_t *)&lazy cache variable for type metadata for HashableWeakBox<UIViewController>, (uint64_t (*)(uint64_t))type metadata accessor for UIViewController, MEMORY[0x1E4F3FB58]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (HashableWeakBox<UIViewController>, ScenePhase));
    }
  }
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = a6[6] + 24 * result;
  *(void *)uint64_t v6 = a2;
  *(void *)(v6 + 8) = a3;
  *(unsigned char *)(v6 + 16) = a4 & 1;
  *(void *)(a6[7] + 8 * result) = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

uint64_t specialized AppGraph.init<A>(app:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  double v8 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = (int *)MEMORY[0x1E4F4E7A0];
  *(void *)(v3 + 192) = MEMORY[0x1E4FBC870];
  int v11 = *v10;
  *(_DWORD *)(v3 + 204) = *v10;
  *(_DWORD *)(v3 + 224) = 0;
  *(unsigned char *)(v3 + 228) = 1;
  *(_WORD *)(v3 + 229) = 2;
  *(_DWORD *)(v3 + 232) = v11;
  (*(void (**)(char *, double))(v6 + 16))(v9, v8);
  unint64_t v12 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v5;
  *(void *)(v13 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v13 + v12, v9, v5);
  uint64_t v39 = (_DWORD *)v3;
  *(void *)(v3 + 176) = partial apply for closure #1 in AppGraph.init<A>(app:);
  *(void *)(v3 + 184) = v13;
  swift_retain();
  GraphHost.Data.init()();
  unint64_t v15 = v58;
  char v14 = v59;
  unsigned int v40 = (void *)v58;
  long long v41 = v59;
  unint64_t v16 = v60;
  long long v42 = (void *)v60;
  unsigned __int8 v17 = v61;
  unsigned __int8 v18 = v62;
  int v48 = v62;
  int v49 = v61;
  int v19 = v63;
  LODWORD(v13) = v64;
  int v47 = v63;
  int v46 = v64;
  LODWORD(v9) = v65;
  LODWORD(v6) = v66;
  int v45 = v65;
  int v44 = v66;
  LODWORD(v5) = v67;
  int v43 = v67;
  int v38 = v68;
  int v37 = v69;
  uint64_t v53 = v70;
  int v36 = v71;
  int v56 = v74;
  int v57 = v73;
  int v54 = v76;
  int v55 = v75;
  uint64_t v51 = v77;
  uint64_t v52 = v72;
  id v50 = (id)AGSubgraphGetCurrent();
  unint64_t v58 = v15;
  long long v59 = v14;
  unint64_t v60 = v16;
  unsigned __int8 v61 = v17;
  unsigned __int8 v62 = v18;
  int v63 = v19;
  int v64 = v13;
  int v65 = (int)v9;
  int v66 = v6;
  LODWORD(v13) = v38;
  int v67 = v5;
  int v68 = v38;
  LODWORD(v9) = v37;
  int v69 = v37;
  uint64_t v70 = v53;
  LODWORD(v6) = v36;
  int v71 = v36;
  uint64_t v72 = v52;
  int v73 = v57;
  int v74 = v56;
  int v75 = v55;
  int v76 = v54;
  uint64_t v77 = v51;
  uint64_t v20 = (void *)GraphHost.Data.globalSubgraph.getter();
  AGSubgraphSetCurrent();

  LOBYTE(v58) = 0;
  uint64_t v21 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F4E778];
  type metadata accessor for HashableWeakBox<Swift.AnyObject>(0, &lazy cache variable for type metadata for External<ScenePhase>, (uint64_t)&type metadata for ScenePhase, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<FocusStore> and conformance External<A>(&lazy protocol witness table cache variable for type External<ScenePhase> and conformance External<A>, &lazy cache variable for type metadata for External<ScenePhase>, (uint64_t)&type metadata for ScenePhase);
  int v22 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v23 = v39;
  v39[50] = v22;
  BOOL v24 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v58 = MEMORY[0x1E4FBC860];
  type metadata accessor for HashableWeakBox<Swift.AnyObject>(0, &lazy cache variable for type metadata for [SceneList.Item.Summary], (uint64_t)&type metadata for SceneList.Item.Summary, MEMORY[0x1E4FBB320]);
  type metadata accessor for External<[SceneList.Item.Summary]>();
  lazy protocol witness table accessor for type AppGraph and conformance AppGraph(&lazy protocol witness table cache variable for type External<[SceneList.Item.Summary]> and conformance External<A>, (void (*)(uint64_t))type metadata accessor for External<[SceneList.Item.Summary]>);
  v23[52] = Attribute.init<A>(body:value:flags:update:)();
  unint64_t v58 = 0;
  LOBYTE(v59) = 0;
  HIDWORD(v59) = 0;
  type metadata accessor for HashableWeakBox<Swift.AnyObject>(0, (unint64_t *)&lazy cache variable for type metadata for External<FocusedValues>, (uint64_t)&type metadata for FocusedValues, v21);
  lazy protocol witness table accessor for type External<FocusStore> and conformance External<A>(&lazy protocol witness table cache variable for type External<FocusedValues> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<FocusedValues>, (uint64_t)&type metadata for FocusedValues);
  v23[53] = Attribute.init<A>(body:value:flags:update:)();
  unint64_t v25 = specialized Dictionary.init(dictionaryLiteral:)(v24);
  LODWORD(v58) = 0;
  long long v59 = v24;
  unint64_t v60 = v25;
  type metadata accessor for HashableWeakBox<Swift.AnyObject>(0, &lazy cache variable for type metadata for External<FocusStore>, (uint64_t)&type metadata for FocusStore, v21);
  lazy protocol witness table accessor for type External<FocusStore> and conformance External<A>(&lazy protocol witness table cache variable for type External<FocusStore> and conformance External<A>, &lazy cache variable for type metadata for External<FocusStore>, (uint64_t)&type metadata for FocusStore);
  LODWORD(v21) = Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23[54] = v21;
  unint64_t v58 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v24);
  type metadata accessor for [SceneID : KeyboardShortcut]();
  type metadata accessor for External<[SceneID : KeyboardShortcut]>();
  lazy protocol witness table accessor for type AppGraph and conformance AppGraph(&lazy protocol witness table cache variable for type External<[SceneID : KeyboardShortcut]> and conformance External<A>, (void (*)(uint64_t))type metadata accessor for External<[SceneID : KeyboardShortcut]>);
  LODWORD(v14) = Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  v23[55] = v14;
  swift_release();
  Swift::String v26 = v40;
  Swift::String v27 = v41;
  unint64_t v58 = (unint64_t)v40;
  long long v59 = v41;
  int64_t v28 = v42;
  unint64_t v60 = (unint64_t)v42;
  unsigned __int8 v61 = v49;
  unsigned __int8 v62 = v48;
  int v63 = v47;
  int v64 = v46;
  int v65 = v45;
  int v66 = v44;
  int v67 = v43;
  int v68 = v13;
  int v69 = (int)v9;
  uint64_t v70 = v53;
  int v71 = v6;
  uint64_t v72 = v52;
  int v73 = v57;
  int v74 = v56;
  int v75 = v55;
  int v76 = v54;
  uint64_t v77 = v51;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v29 = v26;
  id v30 = v27;
  id v31 = v28;
  uint64_t v32 = GraphHost.init(data:)();
  int v33 = v50;
  AGSubgraphSetCurrent();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return v32;
}

void type metadata accessor for HashableWeakBox<Swift.AnyObject>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type External<FocusStore> and conformance External<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for HashableWeakBox<Swift.AnyObject>(255, a2, a3, MEMORY[0x1E4F4E778]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AppGraph and conformance AppGraph(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for External<[SceneList.Item.Summary]>()
{
  if (!lazy cache variable for type metadata for External<[SceneList.Item.Summary]>)
  {
    type metadata accessor for HashableWeakBox<Swift.AnyObject>(255, &lazy cache variable for type metadata for [SceneList.Item.Summary], (uint64_t)&type metadata for SceneList.Item.Summary, MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for External();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<[SceneList.Item.Summary]>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type HashableWeakBox<UIViewController> and conformance HashableWeakBox<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HashableWeakBox<UIViewController> and conformance HashableWeakBox<A>;
  if (!lazy protocol witness table cache variable for type HashableWeakBox<UIViewController> and conformance HashableWeakBox<A>)
  {
    _s7SwiftUI15HashableWeakBoxVySo16UIViewControllerCGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for HashableWeakBox<UIViewController>, (unint64_t *)&lazy cache variable for type metadata for UIViewController, 0x1E4FB1EC0, MEMORY[0x1E4F3FB58]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HashableWeakBox<UIViewController> and conformance HashableWeakBox<A>);
  }
  return result;
}

id @objc UIHostingController.childForHomeIndicatorAutoHidden.getter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)UIHostingController.childForHomeIndicatorAutoHidden.getter();

  return v2;
}

unint64_t UIHostingController._childForHomeIndicatorAutoHidden.getter()
{
  if (UIHostingController._persistentSystemOverlays.getter()
    || (UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController.getter() & 1) == 0)
  {
    return 0;
  }
  id v1 = objc_msgSend(v0, sel_childViewControllers);
  unint64_t v2 = type metadata accessor for UIViewController();
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    uint64_t v4 = *(char **)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      goto LABEL_11;
    }
LABEL_5:
    unint64_t v5 = v4 - 1;
    if (__OFSUB__(v4, 1))
    {
      __break(1u);
    }
    else if ((v3 & 0xC000000000000001) == 0)
    {
      if (((unint64_t)v5 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if ((unint64_t)v5 < *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v6 = (char *)*(id *)(v3 + 8 * (void)v5 + 32);
LABEL_10:
        uint64_t v4 = v6;
        goto LABEL_11;
      }
      __break(1u);
      goto LABEL_26;
    }
    uint64_t v6 = (char *)MEMORY[0x18C117680](v5, v3);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = (char *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v4) {
    goto LABEL_5;
  }
LABEL_11:
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v4, sel_childViewControllerForHomeIndicatorAutoHidden);

  if (v7) {
    return (unint64_t)v7;
  }
  id v8 = objc_msgSend(v0, sel_childViewControllers);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    uint64_t v9 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }
LABEL_26:
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_14:
  unint64_t result = v9 - 1;
  if (__OFSUB__(v9, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if ((v2 & 0xC000000000000001) != 0)
  {
LABEL_31:
    id v11 = (id)MEMORY[0x18C117680](result, v2);
    goto LABEL_19;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v11 = *(id *)(v2 + 8 * result + 32);
LABEL_19:
    id v7 = v11;
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  __break(1u);
  return result;
}

uint64_t UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController.getter()
{
  return *(unsigned __int8 *)(v0
                            + direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController);
}

uint64_t @objc UIHostingController.preferredScreenEdgesDeferringSystemGestures.getter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = UIHostingController.preferredScreenEdgesDeferringSystemGestures.getter();

  return v2;
}

uint64_t UIHostingController._preferredScreenEdgesDeferringSystemGestures.getter()
{
  __int16 v0 = UIHostingController.deferredEdges.getter();
  if ((v0 & 0x100) != 0) {
    LOBYTE(v0) = static Edge.Set.horizontal.getter();
  }
  unsigned __int8 v2 = 0;
  return specialized UIRectEdge.init(_:layoutDirection:)(v0, &v2);
}

id @objc UIHostingController.childForScreenEdgesDeferringSystemGestures.getter(void *a1)
{
  id v1 = a1;
  unsigned __int8 v2 = (void *)UIHostingController.childForScreenEdgesDeferringSystemGestures.getter();

  return v2;
}

unint64_t UIHostingController._childForScreenEdgesDeferringSystemGestures.getter()
{
  if ((UIHostingController.deferredEdges.getter() & 0x100) == 0
    || (UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController.getter() & 1) == 0)
  {
    return 0;
  }
  id v1 = objc_msgSend(v0, sel_childViewControllers);
  unint64_t v2 = type metadata accessor for UIViewController();
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    uint64_t v4 = *(char **)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      goto LABEL_11;
    }
LABEL_5:
    unint64_t v5 = v4 - 1;
    if (__OFSUB__(v4, 1))
    {
      __break(1u);
    }
    else if ((v3 & 0xC000000000000001) == 0)
    {
      if (((unint64_t)v5 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if ((unint64_t)v5 < *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v6 = (char *)*(id *)(v3 + 8 * (void)v5 + 32);
LABEL_10:
        uint64_t v4 = v6;
        goto LABEL_11;
      }
      __break(1u);
      goto LABEL_26;
    }
    uint64_t v6 = (char *)MEMORY[0x18C117680](v5, v3);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = (char *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v4) {
    goto LABEL_5;
  }
LABEL_11:
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v4, sel_childViewControllerForHomeIndicatorAutoHidden);

  if (v7) {
    return (unint64_t)v7;
  }
  id v8 = objc_msgSend(v0, sel_childViewControllers);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    uint64_t v9 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }
LABEL_26:
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_14:
  unint64_t result = v9 - 1;
  if (__OFSUB__(v9, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if ((v2 & 0xC000000000000001) != 0)
  {
LABEL_31:
    id v11 = (id)MEMORY[0x18C117680](result, v2);
    goto LABEL_19;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v11 = *(id *)(v2 + 8 * result + 32);
LABEL_19:
    id v7 = v11;
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  __break(1u);
  return result;
}

uint64_t UIHostingController.deferredEdges.getter()
{
  return *(unsigned __int8 *)(v0 + direct field offset for UIHostingController.deferredEdges) | (*(unsigned __int8 *)(v0 + direct field offset for UIHostingController.deferredEdges + 1) << 8);
}

unint64_t type metadata accessor for UIViewController()
{
  unint64_t result = lazy cache variable for type metadata for UIViewController;
  if (!lazy cache variable for type metadata for UIViewController)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  }
  return result;
}

uint64_t UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController.getter()
{
  return *(unsigned __int8 *)(v0
                            + direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController);
}

uint64_t specialized UIRectEdge.init(_:layoutDirection:)(unsigned __int8 a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  uint64_t v4 = a1;
  switch(a1)
  {
    case 1u:
      return v4;
    case 2u:
      BOOL v5 = v3 == 0;
      uint64_t v6 = 2;
      uint64_t v7 = 8;
      goto LABEL_7;
    case 4u:
      return 4;
    case 8u:
      BOOL v5 = v3 == 0;
      uint64_t v6 = 8;
      uint64_t v7 = 2;
LABEL_7:
      if (v5) {
        return v6;
      }
      else {
        return v7;
      }
    default:
      if (static Edge.Set.vertical.getter() == a1) {
        return 5;
      }
      if (static Edge.Set.horizontal.getter() == a1) {
        return 10;
      }
      if (static Edge.Set.all.getter() == a1) {
        return 15;
      }
      uint64_t v9 = static Edge.allCases.getter();
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10)
      {
        uint64_t v4 = 0;
        for (uint64_t i = 0; i != v10; ++i)
        {
          char v12 = *(unsigned char *)(v9 + i + 32);
          if ((v12 - 9) < 0xEFu) {
            goto LABEL_23;
          }
          int v13 = 1 << v12;
          if ((*(unsigned char *)(v9 + i + 32) & 0x80) != 0) {
            LOBYTE(v13) = 0;
          }
          if ((v13 & ~a1) == 0)
          {
LABEL_23:
            switch(*(unsigned char *)(v9 + i + 32))
            {
              case 1:
                if ((v3 & 1) == 0) {
                  goto LABEL_32;
                }
                goto LABEL_29;
              case 2:
                if ((v4 & 4) != 0) {
                  continue;
                }
                uint64_t v14 = 4;
                goto LABEL_17;
              case 3:
                if (v3)
                {
LABEL_32:
                  if ((v4 & 2) == 0)
                  {
                    uint64_t v14 = 2;
                    goto LABEL_17;
                  }
                }
                else
                {
LABEL_29:
                  if ((v4 & 8) == 0)
                  {
                    uint64_t v14 = 8;
LABEL_17:
                    v4 |= v14;
                    continue;
                  }
                }
                break;
              default:
                if (v4) {
                  continue;
                }
                uint64_t v14 = 1;
                goto LABEL_17;
            }
          }
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        return 0;
      }
      return v4;
  }
}

void specialized UIApplicationDelegateAdaptor.wrappedValue.getter()
{
  uint64_t v0 = static AppGraph.delegateBox;
  if (!static AppGraph.delegateBox)
  {
    static os_log_type_t.fault.getter();
    id v1 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v0 = static AppGraph.delegateBox;
    if (!static AppGraph.delegateBox) {
      goto LABEL_8;
    }
  }
  unint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 80);
  uint64_t v3 = swift_retain();
  uint64_t v4 = v2(v3);
  swift_release();
  if (!v4)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return;
  }

  swift_dynamicCastUnknownClassUnconditional();
}

id AppSceneDelegate.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate____lazy_storage___appDelegate] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window] = 0;
  id v1 = &v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID];
  *(void *)id v1 = 0;
  *((void *)v1 + 1) = 0;
  v1[16] = -1;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_lastVersion] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge] = 0;
  v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_scenePhase] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneStorageValues] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_presentationDataType] = 0;
  *(_OWORD *)&v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_rawPresentationDataValue] = xmmword_18835D590;
  unint64_t v2 = &v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_presentationDataValue];
  *((void *)v2 + 4) = 0;
  *(_OWORD *)unint64_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  v0[OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate____lazy_storage___isDocumentViewControllerRootEnabled] = 2;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for AppSceneDelegate();
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t AppSceneDelegate.responds(to:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
  if (v3)
  {
    objc_super v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 80);
    uint64_t v5 = swift_retain();
    uint64_t v6 = (void *)v4(v5);
    swift_release();
    if (v6)
    {
      uint64_t v7 = (void *)swift_dynamicCastObjCProtocolConditional();
      if (v7) {
        LODWORD(v3) = objc_msgSend(v7, sel_respondsToSelector_, a1);
      }
      else {
        LODWORD(v3) = 0;
      }
    }
    else
    {
      LODWORD(v3) = 0;
    }
  }
  type metadata accessor for AppSceneDelegate();
  return objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_instancesRespondToSelector_, a1) | v3;
}

uint64_t type metadata accessor for AppSceneDelegate()
{
  return self;
}

id FallbackDelegateBox.delegate.getter()
{
  id v1 = *(id *)(v0 + 16);
  if (*(unsigned char *)(v0 + 24))
  {
    id v2 = v1;
  }
  else
  {
    id v1 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    uint64_t v3 = *(void **)(v0 + 16);
    char v4 = *(unsigned char *)(v0 + 24);
    *(void *)(v0 + 16) = v1;
    *(unsigned char *)(v0 + 24) = 1;
    id v5 = v1;
    outlined consume of FallbackDelegateBox<A>.DelegateStorage<A>(v3, v4);
  }
  return v1;
}

uint64_t ObjectFallbackDelegateBox.delegate.getter()
{
  return swift_unknownObjectRetain();
}

void outlined consume of FallbackDelegateBox<A>.DelegateStorage<A>(id a1, char a2)
{
  if (a2) {
}
  }

void type metadata accessor for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1ED45CF18, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in SectionStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #2 in BarAppearanceBridge.didUpdate(bar:barUpdates:)()
{
  return closure #2 in BarAppearanceBridge.didUpdate(bar:barUpdates:)();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in LabelStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for DragDropDefaultPreviewResponder()
{
  uint64_t result = type metadata singleton initialization cache for DragDropDefaultPreviewResponder;
  if (!type metadata singleton initialization cache for DragDropDefaultPreviewResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnySource.IsNil<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

unint64_t lazy protocol witness table accessor for type AccessibilityTechnology and conformance AccessibilityTechnology()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTechnology and conformance AccessibilityTechnology;
  if (!lazy protocol witness table cache variable for type AccessibilityTechnology and conformance AccessibilityTechnology)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTechnology and conformance AccessibilityTechnology);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTechnology and conformance AccessibilityTechnology;
  if (!lazy protocol witness table cache variable for type AccessibilityTechnology and conformance AccessibilityTechnology)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTechnology and conformance AccessibilityTechnology);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityFocus.Match and conformance AccessibilityFocus.Match()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityFocus.Match and conformance AccessibilityFocus.Match;
  if (!lazy protocol witness table cache variable for type AccessibilityFocus.Match and conformance AccessibilityFocus.Match)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityFocus.Match and conformance AccessibilityFocus.Match);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityFocus.Match and conformance AccessibilityFocus.Match;
  if (!lazy protocol witness table cache variable for type AccessibilityFocus.Match and conformance AccessibilityFocus.Match)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityFocus.Match and conformance AccessibilityFocus.Match);
  }
  return result;
}

double MainThreadRequiringScrollPhase.value.getter(uint64_t a1)
{
  uint64_t v10 = a1;
  uint64_t v6 = a1;
  MainThreadRequiringScrollPhase.state.getter((uint64_t)v7);
  char v3 = v7[0];
  uint64_t v4 = v8;
  uint64_t v5 = v9;
  switch(ScrollPhaseState.phase.getter())
  {
    case 3u:
    case 4u:
      double result = MainThreadRequiringScrollPhase.time.getter(&v2);
      break;
    default:
      return result;
  }
  return result;
}

__n128 MainThreadRequiringScrollPhase.state.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  *(unsigned char *)a1 = *(unsigned char *)Value;
  __n128 result = *(__n128 *)(Value + 8);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Text.Sizing> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.Sizing> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.Sizing> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Text.Sizing>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.Sizing> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Text.Sizing>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.Sizing>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.Sizing>);
    }
  }
}

uint64_t type metadata accessor for PlaybackButton.Specs()
{
  uint64_t result = type metadata singleton initialization cache for PlaybackButton.Specs;
  if (!type metadata singleton initialization cache for PlaybackButton.Specs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata accessor for ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI15ModifiedContentVyAA5ColorVAA30_SafeAreaRegionsIgnoringLayoutVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t specialized Set._Variant.insert(_:)(double *a1, double a2)
{
  char v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_8:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v3;
    *char v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v9, isUniquelyReferenced_nonNull_native, a2);
    *char v3 = v15;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  double v11 = *(double *)(v10 + 8 * v9);
  if (v11 != a2)
  {
    uint64_t v13 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v13;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_8;
      }
      double v11 = *(double *)(v10 + 8 * v9);
    }
    while (v11 != a2);
  }
  uint64_t result = 0;
  a2 = v11;
LABEL_9:
  *a1 = a2;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, char a2, double a3)
{
  unint64_t v4 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a2 & 1) != 0) {
    goto LABEL_14;
  }
  if (a2)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v4 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(double *)(v10 + 8 * v4) == a3)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        unint64_t v4 = (v4 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
          break;
        }
        if (*(double *)(v10 + 8 * v4) == a3) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (v4 >> 6) + 56) |= 1 << v4;
  *(double *)(*(void *)(v12 + 48) + 8 * v4) = a3;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.keyPressHandlers : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.keyPressHandlers.getter();
  *a1 = result;
  return result;
}

uint64_t EnvironmentValues.keyPressHandlers.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey>, (uint64_t)&type metadata for EnvironmentValues.KeyPressHandlersKey, (uint64_t)&protocol witness table for EnvironmentValues.KeyPressHandlersKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey>, (uint64_t)&type metadata for EnvironmentValues.KeyPressHandlersKey, (uint64_t)&protocol witness table for EnvironmentValues.KeyPressHandlersKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey>, (uint64_t)&type metadata for EnvironmentValues.KeyPressHandlersKey, (uint64_t)&protocol witness table for EnvironmentValues.KeyPressHandlersKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t type metadata completion function for WrappedButtonStyleBody.ArchiveBody()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PrimitiveButtonStyleConfiguration(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityChildBehavior.Combine(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t closure #1 in static ReadDestinationsModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1 = a1 + 41;
  void v6[2] = type metadata accessor for ReadDestinationsModifier();
  uint64_t v2 = MEMORY[0x1E4FBB390];
  uint64_t v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_0, (uint64_t)v6, v2, MEMORY[0x1E4FBC248], v3, MEMORY[0x1E4FBC278], v4);
  return v6[5];
}

uint64_t implicit closure #1 in static PositionedNavigationDestinationProcessor._makeView(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

unint64_t lazy protocol witness table accessor for type External<(_:)> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<(_:)> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<(_:)> and conformance External<A>)
  {
    type metadata accessor for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?(255, &lazy cache variable for type metadata for External<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E778]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<(_:)> and conformance External<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type External<(_:)> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<(_:)> and conformance External<A>)
  {
    type metadata accessor for External<(_:)>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<(_:)> and conformance External<A>);
  }
  return result;
}

uint64_t closure #4 in ReadDestinationsModifier.RequestsTransform.updateValue()(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  outlined retain of NavigationRequest((uint64_t)a3);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a3, a2, isUniquelyReferenced_nonNull_native);
  *a1 = v8;

  return swift_bridgeObjectRelease();
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, _OWORD *a2, _OWORD *a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = (_OWORD *)(a4[6] + 48 * result);
  long long v5 = a2[1];
  *uint64_t v4 = *a2;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 25) = *(_OWORD *)((char *)a2 + 25);
  unint64_t v6 = (_OWORD *)(a4[7] + 144 * result);
  long long v7 = a3[3];
  void v6[2] = a3[2];
  v6[3] = v7;
  long long v8 = a3[1];
  *unint64_t v6 = *a3;
  v6[1] = v8;
  *(_OWORD *)((char *)v6 + 124) = *(_OWORD *)((char *)a3 + 124);
  long long v9 = a3[7];
  void v6[6] = a3[6];
  v6[7] = v9;
  long long v10 = a3[5];
  v6[4] = a3[4];
  v6[5] = v10;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t closure #2 in static ReadDestinationsModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v7[2] = type metadata accessor for ReadDestinationsModifier();
  type metadata accessor for NavigationStackViewPosition?(0, &lazy cache variable for type metadata for NavigationStackViewPosition?, (uint64_t)&type metadata for NavigationStackViewPosition, MEMORY[0x1E4FBB718]);
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v3, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t implicit closure #1 in static ReadDestinationsModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v2 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v2;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t Destinations = type metadata accessor for ReadDestinationsModifier.RequestsTransform();
  uint64_t WitnessTable = swift_getWitnessTable();
  outlined retain of ReadDestinationsModifier<A>.RequestsTransform(a1);
  type metadata accessor for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v7, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v9, Destinations, MEMORY[0x1E4FBC248], v3, MEMORY[0x1E4FBC278], v4);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t type metadata accessor for ReadDestinationsModifier.RequestsTransform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized static PositionedNavigationDestination.Key.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v6);
  uint64_t v3 = v6;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v6);
  *a1 = v6;
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t ReadDestinationsModifier.RequestsTransform.updateValue()()
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  type metadata accessor for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v48 - v2;
  long long v4 = v0[1];
  long long v63 = *v0;
  long long v64 = v4;
  uint64_t v65 = *((void *)v0 + 4);
  if (*(unsigned char *)AGGraphGetValue() == 1)
  {
    type metadata accessor for NavigationStackViewPosition?(0, &lazy cache variable for type metadata for NavigationStackViewPosition?, (uint64_t)&type metadata for NavigationStackViewPosition, MEMORY[0x1E4FBB718]);
    uint64_t Value = AGGraphGetValue();
    uint64_t v56 = v6;
    uint64_t v7 = *(void *)Value;
    uint64_t v8 = *(NSObject **)(Value + 8);
    uint64_t v9 = *(unsigned __int8 *)(Value + 16);
    uint64_t v11 = *(void *)(Value + 24);
    uint64_t v10 = *(void *)(Value + 32);
    int v12 = *(unsigned __int8 *)(Value + 40);
    type metadata accessor for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?(0, &lazy cache variable for type metadata for [NavigationDestinationResolverBase], (uint64_t (*)(uint64_t))type metadata accessor for NavigationDestinationResolverBase, MEMORY[0x1E4FBB320]);
    uint64_t v13 = (unint64_t *)AGGraphGetValue();
    if (v12 == 2)
    {
      type metadata accessor for (_:)();
      uint64_t result = AGGraphGetOutputValue();
      if (!result) {
        goto LABEL_6;
      }
      return result;
    }
    char v16 = v14;
    uint64_t v54 = v11;
    int v55 = v3;
    unint64_t v57 = *v13;
    int v17 = v12 & 1;
    *(void *)&long long v61 = v7;
    *((void *)&v61 + 1) = v8;
    os_log_t v53 = v8;
    LOBYTE(v62[0]) = v9;
    *((void *)&v62[0] + 1) = v11;
    *(void *)&v62[1] = v10;
    BYTE8(v62[1]) = v12 & 1;
    unsigned int v18 = HIDWORD(v65);
    unint64_t v52 = type metadata accessor for (_:)();
    uint64_t result = AGGraphGetOutputValue();
    if (!result || (v56 & 1) != 0)
    {
      if ((v16 & 1) == 0) {
        goto LABEL_13;
      }
    }
    else if ((v16 & 1) == 0)
    {
      return result;
    }
    *((_DWORD *)v0 + 9) = ++v18;
LABEL_13:
    unint64_t v19 = *((void *)&v64 + 1);
    if (v9 == 4) {
      uint64_t v20 = v10;
    }
    else {
      uint64_t v20 = v7;
    }
    if (!v17) {
      uint64_t v20 = -1;
    }
    int v21 = v65;
    *(void *)&long long v67 = v57;
    *((void *)&v67 + 1) = v20;
    long long v68 = v64;
    long long v69 = 0u;
    long long v70 = 0u;
    LOBYTE(v71) = 3;
    *((void *)&v71 + 1) = v53;
    *(void *)&long long v72 = v9;
    uint64_t v75 = 0;
    *((void *)&v72 + 1) = v54;
    long long v73 = 0uLL;
    *(void *)&long long v74 = 0;
    BYTE8(v74) = 0;
    uint64_t v22 = v64;
    if (v65)
    {
      uint64_t v23 = (uint64_t)v55;
      if (v65 != -1) {
        int v21 = merge32(_:_:)(v65, v18);
      }
    }
    else
    {
      int v21 = v18;
      uint64_t v23 = (uint64_t)v55;
    }
    long long v82 = v73;
    long long v83 = v74;
    uint64_t v84 = v75;
    long long v78 = v69;
    long long v79 = v70;
    long long v80 = v71;
    long long v81 = v72;
    long long v76 = v67;
    long long v77 = v68;
    swift_bridgeObjectRetain();
    outlined retain of ReadDestinationsModifier<A>.RequestsTransform((uint64_t)&v63);
    swift_bridgeObjectRetain();
    outlined retain of ReadDestinationsModifier<A>.RequestsTransform((uint64_t)&v63);
    outlined retain of NavigationRequest((uint64_t)&v67);
    static Log.navigation.getter();
    uint64_t v24 = type metadata accessor for Logger();
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
    {
      outlined release of StrokeStyle((uint64_t)&v63);
      swift_bridgeObjectRelease();
      _s7SwiftUI19NavigationAuthorityVSgWOhTm_2(v23, (uint64_t)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?);
LABEL_39:
      uint64_t v42 = swift_allocObject();
      long long v43 = v62[0];
      *(_OWORD *)(v42 + 16) = v61;
      *(_OWORD *)(v42 + 32) = v43;
      *(_OWORD *)(v42 + 41) = *(_OWORD *)((char *)v62 + 9);
      long long v44 = v83;
      *(_OWORD *)(v42 + 160) = v82;
      *(_OWORD *)(v42 + 176) = v44;
      *(void *)(v42 + 192) = v84;
      long long v45 = v79;
      *(_OWORD *)(v42 + 96) = v78;
      *(_OWORD *)(v42 + 112) = v45;
      long long v46 = v81;
      *(_OWORD *)(v42 + 128) = v80;
      *(_OWORD *)(v42 + 144) = v46;
      long long v47 = v77;
      *(_OWORD *)(v42 + 64) = v76;
      *(_OWORD *)(v42 + 80) = v47;
      *(_DWORD *)(v42 + 200) = v21;
      uint64_t v59 = (uint64_t)partial apply for closure #4 in ReadDestinationsModifier.RequestsTransform.updateValue();
      unint64_t v60 = v42;
      AGGraphSetOutputValue();
      outlined release of NavigationRequest((uint64_t)&v67);
      return swift_release();
    }
    swift_bridgeObjectRetain();
    outlined retain of ReadDestinationsModifier<A>.RequestsTransform((uint64_t)&v63);
    Swift::String v26 = Logger.logObject.getter();
    int v27 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v26, (os_log_type_t)v27))
    {

      outlined release of StrokeStyle((uint64_t)&v63);
      outlined release of StrokeStyle((uint64_t)&v63);
      swift_bridgeObjectRelease_n();
LABEL_38:
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
      goto LABEL_39;
    }
    int v51 = v27;
    os_log_t v53 = v26;
    uint64_t v54 = v25;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    uint64_t v66 = v50;
    *(_DWORD *)uint64_t v28 = 136315650;
    uint64_t v29 = NavigationStackViewPosition.description.getter();
    uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v19, &v66);
    unint64_t v31 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined release of StrokeStyle((uint64_t)&v63);
    outlined release of StrokeStyle((uint64_t)&v63);
    outlined release of StrokeStyle((uint64_t)&v63);
    *(_WORD *)(v28 + 22) = 2080;
    uint64_t v59 = 91;
    unint64_t v60 = 0xE100000000000000;
    if (v31 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v56 = v24;
      if (v32) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      uint64_t v56 = v24;
      if (v32)
      {
LABEL_27:
        int v49 = v21;
        if (v32 < 1) {
          __break(1u);
        }
        uint64_t v33 = 0;
        unint64_t v34 = v31 & 0xC000000000000001;
        do
        {
          if (v34)
          {
            uint64_t v35 = MEMORY[0x18C117680](v33, v31);
          }
          else
          {
            uint64_t v35 = *(void *)(v31 + 8 * v33 + 32);
            swift_retain();
          }
          ++v33;
          v36._countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v35 + 128))();
          v58._countAndFlagsBits = 2314;
          v58._object = (void *)0xE200000000000000;
          String.append(_:)(v36);
          swift_bridgeObjectRelease();
          String.append(_:)(v58);
          swift_release();
          swift_bridgeObjectRelease();
          unint64_t v31 = v57;
        }
        while (v32 != v33);
        swift_bridgeObjectRelease();
        uint64_t v37 = v59;
        int v38 = (void *)v60;
        int v21 = v49;
        goto LABEL_37;
      }
    }
    swift_bridgeObjectRelease();
    int v38 = (void *)0xE100000000000000;
    uint64_t v37 = 91;
LABEL_37:
    uint64_t v59 = 93;
    unint64_t v60 = 0xE100000000000000;
    v58._countAndFlagsBits = v37;
    v58._object = v38;
    swift_bridgeObjectRetain();
    v58._countAndFlagsBits = String.init<A>(_:)();
    v58._object = v39;
    String.append<A>(contentsOf:)();
    swift_bridgeObjectRelease();
    uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58._countAndFlagsBits, (unint64_t)v58._object, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v40 = v53;
    _os_log_impl(&dword_1872C6000, v53, (os_log_type_t)v51, "Reading navigation destinations at %s\nReader: %s\nDestinations: %s", (uint8_t *)v28, 0x20u);
    uint64_t v41 = v50;
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v41, -1, -1);
    MEMORY[0x18C119C60](v28, -1, -1);

    uint64_t v23 = (uint64_t)v55;
    uint64_t v24 = v56;
    uint64_t v25 = v54;
    goto LABEL_38;
  }
  type metadata accessor for (_:)();
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
LABEL_6:
    *(void *)&long long v76 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    *((void *)&v76 + 1) = 0;
    return AGGraphSetOutputValue();
  }
  return result;
}

uint64_t outlined retain of ReadDestinationsModifier<A>.RequestsTransform(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of StrokeStyle(uint64_t a1)
{
  return a1;
}

uint64_t merge32(_:_:)(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = (a2 | (unint64_t)(a1 << 32)) + ~((unint64_t)a2 << 32);
  unint64_t v3 = (v2 ^ (v2 >> 22)) + ~((v2 ^ (v2 >> 22)) << 13);
  unint64_t v4 = (9 * (v3 ^ (v3 >> 8))) ^ ((9 * (v3 ^ (v3 >> 8))) >> 15);
  return ((v4 + ~(v4 << 27)) >> 31) ^ (v4 + ~(v4 << 27));
}

uint64_t PositionedNavigationDestinationProcessor.PollingRule.updateValue()()
{
  uint64_t v1 = v0;
  type metadata accessor for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8);
  unint64_t v4 = (char *)&v75 - v3;
  LOBYTE(v3) = *(unsigned char *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 32);
  int v7 = *(_DWORD *)(v0 + 48);
  char v8 = *(unsigned char *)(v0 + 52);
  int v9 = *(_DWORD *)(v0 + 56);
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v11 = *(void *)(v0 + 40);
  long long v77 = *(_OWORD *)v0;
  long long v86 = v77;
  LOBYTE(v87) = v3;
  *((void *)&v87 + 1) = v5;
  *(void *)&long long v88 = v6;
  *((void *)&v88 + 1) = v11;
  LODWORD(v89) = v7;
  BYTE4(v89) = v8;
  DWORD2(v89) = v9;
  *(void *)&long long v90 = v10;
  PositionedNavigationDestinationProcessor.PollingRule.authority.getter((uint64_t)&v94);
  if (*((void *)&v94 + 1) == 1) {
    return _s7SwiftUI19NavigationAuthorityVSgWOhTm_2((uint64_t)&v94, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for NavigationStackViewPosition?);
  }
  if (*((void *)&v94 + 1) == 2) {
    return outlined destroy of NavigationAuthority??((uint64_t)&v94);
  }
  uint64_t v75 = v4;
  uint64_t v76 = v0 + 40;
  outlined init with take of NavigationAuthority((uint64_t)&v94, (uint64_t)v83);
  int v13 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v13 != v9)
  {
    *(_DWORD *)(v0 + 56) = v13;
    *(void *)(v0 + 44) = 0xFFFFFFFFLL;
    *(unsigned char *)(v0 + 52) = 0;
  }
  long long v78 = (char *)MEMORY[0x1E4FBC860];
  long long v82 = (char *)MEMORY[0x1E4FBC860];
  uint64_t Value = AGGraphGetValue();
  uint64_t v15 = *(void *)Value;
  uint64_t v16 = *(void *)Value + 64;
  uint64_t v17 = 1 << *(unsigned char *)(*(void *)Value + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(*(void *)Value + 64);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v21 = 0;
  while (v19)
  {
    unint64_t v22 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    unint64_t v23 = v22 | (v21 << 6);
LABEL_29:
    uint64_t v27 = *(void *)(v15 + 56);
    uint64_t v28 = (long long *)(*(void *)(v15 + 48) + 48 * v23);
    long long v29 = v28[1];
    long long v30 = *(long long *)((char *)v28 + 25);
    long long v84 = *v28;
    v85[0] = v29;
    *(_OWORD *)((char *)v85 + 9) = v30;
    unint64_t v31 = (long long *)(v27 + 144 * v23);
    long long v32 = v31[1];
    long long v33 = v31[2];
    long long v34 = v31[4];
    long long v89 = v31[3];
    long long v90 = v34;
    long long v87 = v32;
    long long v88 = v33;
    long long v35 = v31[5];
    long long v36 = v31[6];
    long long v37 = v31[7];
    *(_OWORD *)((char *)v93 + 12) = *(long long *)((char *)v31 + 124);
    long long v92 = v36;
    v93[0] = v37;
    long long v91 = v35;
    long long v86 = *v31;
    uint64_t v38 = *(void *)(v1 + 64);
    if (*(void *)(v38 + 16) && (unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v84), (v40 & 1) != 0))
    {
      int v41 = *(_DWORD *)(*(void *)(v38 + 56) + 4 * v39);
      if (v41 != -1 && DWORD2(v93[1]) != -1 && v41 == DWORD2(v93[1]))
      {
LABEL_11:
        outlined retain of NavigationRequest((uint64_t)&v86);
        goto LABEL_12;
      }
    }
    else if (!DWORD2(v93[1]))
    {
      goto LABEL_11;
    }
    outlined retain of NavigationRequest((uint64_t)&v86);
    outlined retain of NavigationRequest((uint64_t)&v86);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v42 = v78;
    }
    else {
      uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v78 + 2) + 1, 1, v78);
    }
    unint64_t v44 = *((void *)v42 + 2);
    unint64_t v43 = *((void *)v42 + 3);
    long long v45 = (char *)(v44 + 1);
    if (v44 >= v43 >> 1)
    {
      long long v78 = (char *)(v44 + 1);
      os_log_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v44 + 1, 1, v42);
      long long v45 = v78;
      uint64_t v42 = v53;
    }
    long long v96 = v88;
    long long v97 = v89;
    uint64_t v102 = *(void *)&v93[1];
    long long v100 = v92;
    long long v101 = v93[0];
    long long v98 = v90;
    long long v99 = v91;
    long long v94 = v86;
    long long v95 = v87;
    *((void *)v42 + 2) = v45;
    long long v46 = &v42[136 * v44];
    *((_OWORD *)v46 + 2) = v94;
    long long v47 = v95;
    long long v48 = v96;
    long long v49 = v98;
    *((_OWORD *)v46 + 5) = v97;
    *((_OWORD *)v46 + 6) = v49;
    *((_OWORD *)v46 + 3) = v47;
    *((_OWORD *)v46 + 4) = v48;
    long long v50 = v99;
    long long v51 = v100;
    long long v52 = v101;
    *((void *)v46 + 20) = v102;
    *((_OWORD *)v46 + 8) = v51;
    *((_OWORD *)v46 + 9) = v52;
    *((_OWORD *)v46 + 7) = v50;
    long long v78 = v42;
    long long v82 = v42;
LABEL_12:
    $defer #1 <A>() in PositionedNavigationDestinationProcessor.PollingRule.updateValue()(v1, &v84, (uint64_t)&v86);
    uint64_t result = outlined release of NavigationRequest((uint64_t)&v86);
  }
  int64_t v24 = v21 + 1;
  if (__OFADD__(v21, 1))
  {
    __break(1u);
LABEL_56:
    __break(1u);
    return result;
  }
  if (v24 >= v20) {
    goto LABEL_40;
  }
  unint64_t v25 = *(void *)(v16 + 8 * v24);
  ++v21;
  if (v25) {
    goto LABEL_28;
  }
  int64_t v21 = v24 + 1;
  if (v24 + 1 >= v20) {
    goto LABEL_40;
  }
  unint64_t v25 = *(void *)(v16 + 8 * v21);
  if (v25) {
    goto LABEL_28;
  }
  int64_t v21 = v24 + 2;
  if (v24 + 2 >= v20) {
    goto LABEL_40;
  }
  unint64_t v25 = *(void *)(v16 + 8 * v21);
  if (v25)
  {
LABEL_28:
    unint64_t v19 = (v25 - 1) & v25;
    unint64_t v23 = __clz(__rbit64(v25)) + (v21 << 6);
    goto LABEL_29;
  }
  int64_t v26 = v24 + 3;
  if (v26 < v20)
  {
    unint64_t v25 = *(void *)(v16 + 8 * v26);
    if (!v25)
    {
      while (1)
      {
        int64_t v21 = v26 + 1;
        if (__OFADD__(v26, 1)) {
          goto LABEL_56;
        }
        if (v21 >= v20) {
          goto LABEL_40;
        }
        unint64_t v25 = *(void *)(v16 + 8 * v21);
        ++v26;
        if (v25) {
          goto LABEL_28;
        }
      }
    }
    int64_t v21 = v26;
    goto LABEL_28;
  }
LABEL_40:
  swift_release();
  if (*((void *)v78 + 2) && (UpdateCycleDetector.dispatch(label:isDebug:)() & 1) != 0)
  {
    uint64_t v55 = *(void *)(v1 + 24);
    unint64_t v54 = *(void *)(v1 + 32);
    swift_bridgeObjectRetain();
    uint64_t v56 = (uint64_t)v75;
    static Log.navigation.getter();
    uint64_t v57 = type metadata accessor for Logger();
    uint64_t v58 = *(void *)(v57 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57) == 1)
    {
      swift_bridgeObjectRelease();
      _s7SwiftUI19NavigationAuthorityVSgWOhTm_2(v56, (uint64_t)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?);
    }
    else
    {
      uint64_t v59 = v78;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      unint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.debug.getter();
      int v62 = v61;
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v63 = swift_slowAlloc();
        LODWORD(v77) = v62;
        uint64_t v64 = v63;
        uint64_t v76 = swift_slowAlloc();
        *(void *)&v79[0] = v76;
        *(_DWORD *)uint64_t v64 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v54, (uint64_t *)v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v64 + 12) = 2080;
        uint64_t v65 = specialized implicit closure #5 in PositionedNavigationDestinationProcessor.PollingRule.updateValue()((uint64_t)v59);
        uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, (uint64_t *)v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1872C6000, v60, (os_log_type_t)v77, "Processing navigation destinations from\n- Processor: %s\n- Requests: %s", (uint8_t *)v64, 0x16u);
        uint64_t v67 = v76;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v67, -1, -1);
        uint64_t v56 = (uint64_t)v75;
        MEMORY[0x18C119C60](v64, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }

      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v56, v57);
    }
    swift_beginAccess();
    uint64_t v68 = *((void *)v82 + 2);
    if (v68)
    {
      int v69 = *(unsigned __int8 *)(v1 + 16);
      long long v70 = v82 + 32;
      do
      {
        if (!v69)
        {
          long long v71 = *((_OWORD *)v70 + 7);
          v79[6] = *((_OWORD *)v70 + 6);
          v79[7] = v71;
          uint64_t v80 = *((void *)v70 + 16);
          long long v72 = *((_OWORD *)v70 + 3);
          v79[2] = *((_OWORD *)v70 + 2);
          v79[3] = v72;
          long long v73 = *((_OWORD *)v70 + 5);
          v79[4] = *((_OWORD *)v70 + 4);
          v79[5] = v73;
          long long v74 = *((_OWORD *)v70 + 1);
          v79[0] = *(_OWORD *)v70;
          v79[1] = v74;
          NavigationAuthority.enqueueRequest(_:)(v79);
        }
        v70 += 136;
        --v68;
      }
      while (v68);
    }
  }
  swift_bridgeObjectRelease();
  return outlined destroy of NavigationAuthority((uint64_t)v83);
}

uint64_t NavigationAuthority.enqueueRequest(_:)(long long *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = a1[7];
  long long v46 = a1[6];
  long long v47 = v7;
  uint64_t v48 = *((void *)a1 + 16);
  long long v8 = a1[3];
  long long v42 = a1[2];
  long long v43 = v8;
  long long v9 = a1[5];
  long long v44 = a1[4];
  long long v45 = v9;
  long long v10 = a1[1];
  long long v40 = *a1;
  long long v41 = v10;
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v12 = result;
    if ((*(unsigned char *)(result + 200) & 1) == 0)
    {
      uint64_t v13 = *(void *)(v2 + 16);
      *(void *)&v37[0] = *(void *)(v2 + 8);
      *((void *)&v37[0] + 1) = v13;
      swift_retain();
      swift_retain();
      NavigationStateHost.createState(environment:)((uint64_t *)v37);
      swift_release();
      swift_release();
    }
    static Log.navigation.getter();
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v6, 1, v14) == 1)
    {
      uint64_t result = outlined destroy of Logger?((uint64_t)v6);
    }
    else
    {
      outlined retain of NavigationRequest((uint64_t)&v40);
      outlined retain of NavigationRequest((uint64_t)&v40);
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        uint64_t v39 = v36;
        *(_DWORD *)uint64_t v18 = 141558275;
        *(void *)&v37[0] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v18 + 12) = 2081;
        uint64_t v35 = v18 + 14;
        v37[6] = v46;
        v37[7] = v47;
        uint64_t v38 = v48;
        v37[2] = v42;
        v37[3] = v43;
        v37[4] = v44;
        v37[5] = v45;
        v37[0] = v40;
        v37[1] = v41;
        unint64_t v19 = NavigationRequest.description.getter();
        *(void *)&v37[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of NavigationRequest((uint64_t)&v40);
        outlined release of NavigationRequest((uint64_t)&v40);
        _os_log_impl(&dword_1872C6000, v16, v17, "%{private,mask.hash}s", (uint8_t *)v18, 0x16u);
        uint64_t v21 = v36;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v21, -1, -1);
        MEMORY[0x18C119C60](v18, -1, -1);
      }
      else
      {

        outlined release of NavigationRequest((uint64_t)&v40);
        outlined release of NavigationRequest((uint64_t)&v40);
      }
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v6, v14);
    }
    unint64_t v22 = *(char **)(v12 + 168);
    if (v22)
    {
      uint64_t v23 = *((void *)v22 + 2);
      outlined retain of NavigationRequest((uint64_t)&v40);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v12 + 168) = v22;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, v22);
        *(void *)(v12 + 168) = v22;
      }
      unint64_t v26 = *((void *)v22 + 2);
      unint64_t v25 = *((void *)v22 + 3);
      if (v26 >= v25 >> 1)
      {
        unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v22);
        *(void *)(v12 + 168) = v22;
      }
      *((void *)v22 + 2) = v26 + 1;
      uint64_t v27 = &v22[136 * v26];
      *((_OWORD *)v27 + 2) = v40;
      long long v28 = v41;
      long long v29 = v42;
      long long v30 = v44;
      *((_OWORD *)v27 + 5) = v43;
      *((_OWORD *)v27 + 6) = v30;
      *((_OWORD *)v27 + 3) = v28;
      *((_OWORD *)v27 + 4) = v29;
      long long v31 = v45;
      long long v32 = v46;
      long long v33 = v47;
      *((void *)v27 + 20) = v48;
      *((_OWORD *)v27 + 8) = v32;
      *((_OWORD *)v27 + 9) = v33;
      *((_OWORD *)v27 + 7) = v31;
      if (!v23)
      {
        outlined init with copy of NavigationAuthority(v2, (uint64_t)v37);
        uint64_t v34 = swift_allocObject();
        outlined init with take of NavigationAuthority((uint64_t)v37, v34 + 16);
        static Update.enqueueAction(_:)();
        swift_release();
      }
      return swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t $defer #1 <A>() in PositionedNavigationDestinationProcessor.PollingRule.updateValue()(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a3 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v5, a2, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 64) = v8;

  return swift_bridgeObjectRelease();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(int a1, _OWORD *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(_DWORD *)(v16[7] + 4 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, _OWORD *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 144 * v10;
    return outlined assign with take of PositionedNavigationDestination.Storage.SeededRequest((uint64_t)a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

uint64_t outlined init with take of (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?(0, (unint64_t *)&lazy cache variable for type metadata for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?, (uint64_t (*)(uint64_t))type metadata accessor for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest), MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t specialized static UpdateViewDestinationRequest.UpdateViewDestinationRequestKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v6);
  uint64_t v3 = v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v6);
  *a1 = v6;

  return swift_bridgeObjectRelease();
}

uint64_t outlined init with take of (key: ViewIdentity, value: InspectorStorage)?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for (key: NavigationLinkSelectionIdentifier, value: UpdateViewDestinationRequest)?()
{
  if (!lazy cache variable for type metadata for (key: NavigationLinkSelectionIdentifier, value: UpdateViewDestinationRequest)?)
  {
    type metadata accessor for (key: ViewIdentity, value: InspectorStorage)(255, &lazy cache variable for type metadata for (key: NavigationLinkSelectionIdentifier, value: UpdateViewDestinationRequest));
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: NavigationLinkSelectionIdentifier, value: UpdateViewDestinationRequest)?);
    }
  }
}

uint64_t _s7SwiftUI27NavigationStackViewPositionV_AA010PositionedC11DestinationO7StorageV13SeededRequest33_EA42A490FE48784768DCEF705CD04CF4LLVtSgWOg(uint64_t a1)
{
  if ((*(void *)(a1 + 152) >> 1) > 0x80000000) {
    return -(*(void *)(a1 + 152) >> 1);
  }
  else {
    return 0;
  }
}

double _s7SwiftUI27NavigationStackViewPositionV_AA010PositionedC11DestinationO7StorageV13SeededRequest33_EA42A490FE48784768DCEF705CD04CF4LLVtSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0x1FFFFFFFELL;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  return result;
}

void type metadata accessor for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?()
{
  if (!lazy cache variable for type metadata for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?)
  {
    type metadata accessor for (Badge, Spacer)(255, (unint64_t *)&lazy cache variable for type metadata for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest));
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?);
    }
  }
}

double PositionedNavigationDestinationProcessor.PollingRule.authority.getter@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for NavigationStackViewPosition?(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of NavigationAuthority?(WeakValue, a1);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a1 = xmmword_18834C6B0;
    *(void *)(a1 + 16) = 0;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, _OWORD *a2, int a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = (_OWORD *)(a4[6] + 48 * result);
  long long v5 = a2[1];
  *uint64_t v4 = *a2;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 25) = *(_OWORD *)((char *)a2 + 25);
  *(_DWORD *)(a4[7] + 4 * result) = a3;
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t static ReadDestinationsModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  int v27 = *a1;
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  int v11 = *(_DWORD *)(a2 + 80);
  unint64_t v44 = *(void *)a2;
  int v45 = v7;
  long long v47 = *(_OWORD *)(a2 + 24);
  uint64_t v46 = v8;
  uint64_t v48 = v9;
  uint64_t v49 = v10;
  long long v50 = *(_OWORD *)(a2 + 56);
  uint64_t v51 = *(void *)(a2 + 72);
  int v52 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v28 = v10;
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  PreferencesInputs.remove<A>(_:)();
  unint64_t v32 = v44;
  int v33 = v45;
  uint64_t v34 = v8;
  long long v35 = v47;
  uint64_t v36 = v9;
  uint64_t v37 = v10;
  long long v38 = v50;
  uint64_t v39 = v51;
  int v40 = v52;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v12 = swift_bridgeObjectRetain();
  a3(&v41, v12, &v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v13 = v41;
  int v14 = v42;
  unint64_t v32 = v41;
  int v33 = v42;
  swift_bridgeObjectRetain();
  uint64_t v15 = PreferencesOutputs.subscript.getter();
  uint64_t v16 = swift_bridgeObjectRelease();
  if ((v15 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
  }
  else
  {
    MEMORY[0x1F4188790](v16);
    LODWORD(v32) = v27;
    type metadata accessor for ReadDestinationsModifier();
    type metadata accessor for _GraphValue();
    uint64_t v17 = MEMORY[0x1E4FBB390];
    _GraphValue.subscript.getter();
    type metadata accessor for NavigationStackViewPosition?(0, &lazy cache variable for type metadata for _GraphValue<Bool>, v17, MEMORY[0x1E4F3F590]);
    uint64_t v18 = _GraphValue.value.getter();
    unsigned int v19 = v18;
    MEMORY[0x1F4188790](v18);
    LODWORD(v32) = v27;
    type metadata accessor for NavigationStackViewPosition?(0, &lazy cache variable for type metadata for NavigationStackViewPosition?, (uint64_t)&type metadata for NavigationStackViewPosition, MEMORY[0x1E4FBB718]);
    _GraphValue.subscript.getter();
    _s7SwiftUI19NavigationAuthorityVSgSgMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<NavigationStackViewPosition?>, &lazy cache variable for type metadata for NavigationStackViewPosition?, (uint64_t)&type metadata for NavigationStackViewPosition, MEMORY[0x1E4F3F590]);
    unsigned int v20 = _GraphValue.value.getter();
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a4, a5);
    uint64_t v23 = v22;
    unsigned int v24 = AGMakeUniqueID();
    unint64_t v32 = __PAIR64__(v20, v19);
    int v33 = v15;
    uint64_t v34 = v21;
    *(void *)&long long v35 = v23;
    *((void *)&v35 + 1) = v24;
    MEMORY[0x1F4188790](v28);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
    outlined release of StrokeStyle((uint64_t)&v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    unint64_t v13 = v41;
    int v14 = v42;
  }
  int v26 = v43;
  *(void *)a6 = v13;
  *(_DWORD *)(a6 + 8) = v14;
  *(_DWORD *)(a6 + 12) = v26;
  return result;
}

void type metadata accessor for NavigationStackViewPosition?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t type metadata accessor for ReadDestinationsModifier()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for NavigationAuthority??(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_0(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for Optional();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI19NavigationAuthorityVSgSgMaTm_0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for NavigationStackViewPosition?(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void _s7SwiftUI19NavigationAuthorityVSgSgMaTm_1(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    _s7SwiftUI7BindingVySbGMaTm_11(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for Optional();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t protocol witness for static NavigationDestinationReader.readerDescription.getter in conformance ResolvedNavigationDestinations()
{
  return 0xD000000000000010;
}

void type metadata accessor for (key: AnyHashable, value: Any)?()
{
  if (!lazy cache variable for type metadata for (key: AnyHashable, value: Any)?)
  {
    type metadata accessor for (key: ViewIdentity, value: InspectorStorage)(255, &lazy cache variable for type metadata for (key: AnyHashable, value: Any));
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: AnyHashable, value: Any)?);
    }
  }
}

void type metadata accessor for (key: ViewIdentity, value: InspectorStorage)(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t protocol witness for static NavigationDestinationProcessor.processorDescription.getter in conformance NavigationStackReader<A, B>.ExtractedRoot()
{
  return static NavigationStackReader.ExtractedRoot.readerDescription.getter();
}

uint64_t static NavigationStackReader.ExtractedRoot.readerDescription.getter()
{
  return 0x6574636172747845;
}

void type metadata accessor for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)()
{
  if (!lazy cache variable for type metadata for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest));
    }
  }
}

uint64_t assignWithCopy for UpdateViewDestinationViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 17 + a1) & ~v8;
  uint64_t v10 = (v8 + 17 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 40) + 7;
  uint64_t v12 = (_OWORD *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (long long *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  long long v14 = *v13;
  long long v15 = v13[2];
  v12[1] = v13[1];
  v12[2] = v15;
  *uint64_t v12 = v14;
  unint64_t v16 = ((unint64_t)v12 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)v13 + 55) & 0xFFFFFFFFFFFFFFF8;
  char v18 = *(unsigned char *)(v17 + 8);
  *(void *)unint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = v18;
  unint64_t v19 = ((unint64_t)v12 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v13 + 71) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  unint64_t v21 = ((unint64_t)v12 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v13 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = *(void *)(v21 + 8);
  if (v23 >= 0xFFFFFFFF) {
    LODWORD(v23) = -1;
  }
  int v24 = v23 - 1;
  unint64_t v25 = *(void *)(v22 + 8);
  if (v25 >= 0xFFFFFFFF) {
    LODWORD(v25) = -1;
  }
  int v26 = v25 - 1;
  if ((v24 & 0x80000000) == 0)
  {
    if (v26 < 0)
    {
      swift_weakCopyInit();
      *(void *)(v21 + 8) = *(void *)(v22 + 8);
      *(void *)(v21 + 16) = *(void *)(v22 + 16);
      swift_retain();
      swift_retain();
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if ((v26 & 0x80000000) == 0)
  {
    swift_weakDestroy();
    swift_release();
    swift_release();
LABEL_10:
    long long v27 = *(_OWORD *)v22;
    *(void *)(v21 + 16) = *(void *)(v22 + 16);
    *(_OWORD *)unint64_t v21 = v27;
    goto LABEL_11;
  }
  swift_weakCopyAssign();
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  swift_retain();
  swift_release();
  *(void *)(v21 + 16) = *(void *)(v22 + 16);
  swift_retain();
  swift_release();
LABEL_11:
  *(unsigned char *)(v21 + 24) = *(unsigned char *)(v22 + 24);
  uint64_t v28 = (uint64_t *)(((unint64_t)v12 + 119) & 0xFFFFFFFFFFFFFFF8);
  long long v29 = (uint64_t *)(((unint64_t)v13 + 119) & 0xFFFFFFFFFFFFFFF8);
  LODWORD(v30) = -1;
  if ((unint64_t)*v28 >= 0xFFFFFFFF) {
    LODWORD(v31) = -1;
  }
  else {
    uint64_t v31 = *v28;
  }
  int v32 = v31 - 1;
  uint64_t v33 = *v29;
  if ((unint64_t)*v29 < 0xFFFFFFFF) {
    uint64_t v30 = *v29;
  }
  int v34 = v30 - 1;
  if (v32 < 0)
  {
    if (v34 < 0)
    {
      *uint64_t v28 = v33;
      swift_retain();
      swift_release();
    }
    else
    {
      swift_release();
      *uint64_t v28 = *v29;
    }
  }
  else
  {
    *uint64_t v28 = v33;
    if (v34 < 0) {
      swift_retain();
    }
  }
  return a1;
}

uint64_t partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  unint64_t v5 = (_OWORD *)v0[6];
  long long v6 = *(_OWORD *)(v4 + 16);
  v8[0] = *(_OWORD *)v4;
  v8[1] = v6;
  char v9 = *(unsigned char *)(v4 + 32);
  return specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v3, (uint64_t)v8, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  long long *v3;
  uint64_t v4;
  uint64_t v5;
  long long v6;
  long long v8[3];

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v3 = (long long *)v0[5];
  unint64_t v5 = v0[6];
  long long v6 = v3[1];
  v8[0] = *v3;
  v8[1] = v6;
  _OWORD v8[2] = v3[2];
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, v8, v5);
  return AGGraphSetUpdate();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  long long *v3;
  uint64_t v4;
  uint64_t v5;
  long long v6;
  long long v8[3];

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v3 = (long long *)v0[5];
  unint64_t v5 = v0[6];
  long long v6 = v3[1];
  v8[0] = *v3;
  v8[1] = v6;
  _OWORD v8[2] = v3[2];
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, v8, v5);
  return AGGraphSetUpdate();
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()((void (*)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t))specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  long long *v3;
  uint64_t v4;
  uint64_t v5;
  long long v6;
  long long v8[3];

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v3 = (long long *)v0[5];
  unint64_t v5 = v0[6];
  long long v6 = v3[1];
  v8[0] = *v3;
  v8[1] = v6;
  _OWORD v8[2] = v3[2];
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, v8, v5);
  return AGGraphSetUpdate();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  long long *v3;
  uint64_t v4;
  uint64_t *v5;
  long long v6;
  long long v8[3];

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v3 = (long long *)v0[5];
  unint64_t v5 = (uint64_t *)v0[6];
  long long v6 = v3[1];
  v8[0] = *v3;
  v8[1] = v6;
  _OWORD v8[2] = v3[2];
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, v8, v5);
  return AGGraphSetUpdate();
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()((void (*)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t))specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  long long *v3;
  uint64_t v4;
  uint64_t *v5;
  long long v6;
  long long v8[3];

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v3 = (long long *)v0[5];
  unint64_t v5 = (uint64_t *)v0[6];
  long long v6 = v3[1];
  v8[0] = *v3;
  v8[1] = v6;
  _OWORD v8[2] = v3[2];
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, v8, v5);
  return AGGraphSetUpdate();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  long long *v3;
  uint64_t v4;
  long long *v5;
  long long v6;
  long long v8[3];

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v3 = (long long *)v0[5];
  unint64_t v5 = (long long *)v0[6];
  long long v6 = v3[1];
  v8[0] = *v3;
  v8[1] = v6;
  _OWORD v8[2] = v3[2];
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, v8, v5);
  return AGGraphSetUpdate();
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  long long v6;
  _OWORD v8[2];
  char v9;

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  unint64_t v5 = v0[6];
  long long v6 = *(_OWORD *)(v4 + 16);
  v8[0] = *(_OWORD *)v4;
  v8[1] = v6;
  char v9 = *(unsigned char *)(v4 + 32);
  return specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v3, (uint64_t)v8, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  long long v5;
  _OWORD v7[2];
  char v8;

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  unint64_t v5 = *(_OWORD *)(v3 + 16);
  v7[0] = *(_OWORD *)v3;
  v7[1] = v5;
  uint64_t v8 = *(unsigned char *)(v3 + 32);
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, (uint64_t)v7);
  return AGGraphSetUpdate();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  void **v5;
  long long v6;
  _OWORD v8[3];

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = (_OWORD *)v0[5];
  unint64_t v5 = (void **)v0[6];
  long long v6 = v4[1];
  v8[0] = *v4;
  v8[1] = v6;
  _OWORD v8[2] = v4[2];
  return specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v3, v8, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  long long v6;
  _OWORD v8[2];
  char v9;

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  unint64_t v5 = (void **)v0[6];
  long long v6 = *(_OWORD *)(v4 + 16);
  v8[0] = *(_OWORD *)v4;
  v8[1] = v6;
  char v9 = *(unsigned char *)(v4 + 32);
  return specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v3, (uint64_t)v8, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  long long v6;
  _OWORD v8[2];
  char v9;

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  unint64_t v5 = v0[6];
  long long v6 = *(_OWORD *)(v4 + 16);
  v8[0] = *(_OWORD *)v4;
  v8[1] = v6;
  char v9 = *(unsigned char *)(v4 + 32);
  return specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v3, (uint64_t)v8, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  long long v6;
  _OWORD v8[2];
  char v9;

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  unint64_t v5 = v0[6];
  long long v6 = *(_OWORD *)(v4 + 16);
  v8[0] = *(_OWORD *)v4;
  v8[1] = v6;
  char v9 = *(unsigned char *)(v4 + 32);
  return specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v3, (uint64_t)v8, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  long long v6;
  _OWORD v8[2];
  char v9;

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  unint64_t v5 = (double *)v0[6];
  long long v6 = *(_OWORD *)(v3 + 16);
  v8[0] = *(_OWORD *)v3;
  v8[1] = v6;
  char v9 = *(unsigned char *)(v3 + 32);
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, (uint64_t)v8, v5);
  return AGGraphSetUpdate();
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  long long *v3;
  uint64_t v4;
  uint64_t v5;
  long long v6;
  long long v8[3];

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v3 = (long long *)v0[5];
  unint64_t v5 = v0[6];
  long long v6 = v3[1];
  v8[0] = *v3;
  v8[1] = v6;
  _OWORD v8[2] = v3[2];
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, v8, v5);
  return AGGraphSetUpdate();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  long long *v3;
  uint64_t v4;
  uint64_t *v5;
  long long v6;
  long long v8[3];

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v3 = (long long *)v0[5];
  unint64_t v5 = (uint64_t *)v0[6];
  long long v6 = v3[1];
  v8[0] = *v3;
  v8[1] = v6;
  _OWORD v8[2] = v3[2];
  AGGraphClearUpdate();
  specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v4, v8, v5);
  return AGGraphSetUpdate();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  long long v6;
  _OWORD v8[2];
  char v9;

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  unint64_t v5 = v0[6];
  long long v6 = *(_OWORD *)(v4 + 16);
  v8[0] = *(_OWORD *)v4;
  v8[1] = v6;
  char v9 = *(unsigned char *)(v4 + 32);
  return specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(v1, v2, v3, (uint64_t)v8, v5);
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

{
  return partial apply for specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(specialized closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue());
}

uint64_t specialized closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v10 = AGGraphClearUpdate();
  long long v11 = *(_OWORD *)(a4 + 16);
  long long v72 = *(_OWORD *)a4;
  long long v73 = v11;
  unsigned __int8 v74 = *(unsigned char *)(a4 + 32);
  uint64_t v12 = *(void **)(a3 + 80);
  if (v12)
  {
    uint64_t v75 = v10;
    unint64_t v13 = *(void **)((char *)v12 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v12) + 0x78));
    id v71 = v13;
    MEMORY[0x1F4188790](v10);
    if (a1)
    {
      MEMORY[0x1F4188790](v14);
      id v15 = v13;
      swift_unknownObjectRetain();
      static Update.ensure<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v46 = &v40;
      uint64_t v47 = v5;
      uint64_t v16 = v72;
      long long v17 = v73;
      int v18 = v74;
      *((void *)&v49 + 1) = *((void *)&static RepresentableContextValues.current + 1);
      uint64_t v48 = static RepresentableContextValues.current;
      uint64_t v40 = *((void *)&xmmword_1EB2E8DA0 + 1);
      *(void *)&long long v49 = xmmword_1EB2E8DA0;
      static RepresentableContextValues.current = v72;
      xmmword_1EB2E8DA0 = v73;
      char v19 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v74;
      uint64_t v43 = *((void *)&v72 + 1);
      swift_retain();
      uint64_t v44 = v16;
      swift_retain();
      uint64_t v42 = v17;
      int v41 = v18;
      outlined copy of RepresentableContextValues.EnvironmentStorage(v17, *((uint64_t *)&v17 + 1), v18);
      id v45 = v13;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v17, *((uint64_t *)&v17 + 1), v18);
      uint64_t v20 = v48;
      long long v21 = v49;
      uint64_t v22 = v40;
      outlined copy of RepresentableContextValues?(v48, *((uint64_t *)&v49 + 1), v49, v40, v19);
      outlined consume of RepresentableContextValues?(v20, *((uint64_t *)&v21 + 1), v21, v22, v19);
      long long v23 = a5[8];
      long long v24 = a5[6];
      long long v68 = a5[7];
      long long v69 = v23;
      long long v25 = a5[8];
      v70[0] = a5[9];
      *(_OWORD *)((char *)v70 + 9) = *(_OWORD *)((char *)a5 + 153);
      long long v26 = a5[3];
      long long v27 = a5[5];
      long long v65 = a5[4];
      long long v66 = v27;
      long long v28 = a5[5];
      long long v67 = a5[6];
      long long v29 = a5[1];
      v62[0] = *a5;
      v62[1] = v29;
      long long v30 = a5[3];
      long long v32 = *a5;
      long long v31 = a5[1];
      long long v63 = a5[2];
      long long v64 = v30;
      long long v33 = a5[9];
      long long v60 = v25;
      v61[0] = v33;
      *(_OWORD *)((char *)v61 + 9) = *(_OWORD *)((char *)a5 + 153);
      long long v56 = v65;
      long long v57 = v28;
      long long v58 = v24;
      long long v59 = v68;
      long long v52 = v32;
      long long v53 = v31;
      long long v54 = v63;
      long long v55 = v26;
      v50[0] = v44;
      v50[1] = v43;
      uint64_t v34 = v42;
      v50[2] = v42;
      v50[3] = *((void *)&v17 + 1);
      char v35 = v41;
      char v51 = v41;
      outlined retain of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v62);
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v34, *((uint64_t *)&v17 + 1), v35);
      CircularUIKitProgressView.updateUIView(_:context:)(v45, (uint64_t)v50);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, *((uint64_t *)&v17 + 1), v35);
      outlined release of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v62);
      long long v36 = static RepresentableContextValues.current;
      long long v37 = xmmword_1EB2E8DA0;
      *(void *)&static RepresentableContextValues.current = v48;
      *((void *)&static RepresentableContextValues.current + 1) = *((void *)&v49 + 1);
      *(void *)&xmmword_1EB2E8DA0 = v49;
      *((void *)&xmmword_1EB2E8DA0 + 1) = v22;
      char v38 = byte_1EB2E8DB0;
      byte_1EB2E8DB0 = v19;
      outlined consume of RepresentableContextValues?(v36, *((uint64_t *)&v36 + 1), v37, *((uint64_t *)&v37 + 1), v38);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v34, *((uint64_t *)&v17 + 1), v35);
    }
  }
  return AGGraphSetUpdate();
}

uint64_t getEnumTagSinglePayload for NavigationDestinationPresentation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 89)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 88);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t specialized PlainDividerShapeStyle.resolve(in:)(long long *a1)
{
  long long v5 = *a1;
  EnvironmentValues.colorScheme.getter();
  LOBYTE(v5) = 0;
  if (v6 == 1)
  {
    v1.n128_u32[0] = 1051240617;
    v2.n128_u32[0] = 1051766961;
    float v3 = 0.6;
  }
  else
  {
    v1.n128_u32[0] = 1047589105;
    v2.n128_u32[0] = 1049003655;
    float v3 = 0.29;
  }
  return MEMORY[0x18C113870](&v5, v1, v1.n128_f32[0], v2, v3);
}

id thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?)(uint64_t a1, void *a2)
{
  float v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  long long v5 = (void *)v3();
  swift_release();

  return v5;
}

uint64_t partial apply for closure #1 in UIColor.init(_:)()
{
  return closure #1 in UIColor.init(_:)();
}

uint64_t closure #1 in UIColor.init(_:)()
{
  UITraitCollection.baseEnvironment.getter(v2);
  v1[0] = v2[0];
  v1[1] = v2[1];
  UITraitCollection.resolvedEnvironment(base:)(v1, &v3);
  swift_release();
  swift_release();
  dispatch thunk of AnyColorBox.resolve(in:)();
  Color.Resolved.kitColor.getter();
  swift_release();
  swift_release();
  self;

  return swift_dynamicCastObjCClassUnconditional();
}

id UIKitGestureRecognizer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIKitGestureRecognizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void *initializeWithTake for UIKitSearchFieldAdaptor(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  char *v7 = *((unsigned char *)a2 + v6);
  v7[1] = *((unsigned char *)a2 + v6 + 1);
  *((_WORD *)v7 + 1) = *(_WORD *)((char *)a2 + v6 + 2);
  unsigned char v7[8] = *((unsigned char *)a2 + v6 + 8);
  *((_DWORD *)v7 + 1) = *(_DWORD *)((char *)a2 + v6 + 4);
  char v9 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v10 = v9[9];
  long long v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  v7[v9[10]] = v8[v9[10]];
  uint64_t v14 = v9[11];
  id v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  v15[4] = v16[4];
  *(_DWORD *)id v15 = *(_DWORD *)v16;
  long long v17 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v18 = v17[6];
  char v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)char v19 = *(void *)v20;
  v19[8] = v20[8];
  *((unsigned char *)a1 + v17[7]) = *((unsigned char *)a2 + v17[7]);
  uint64_t v21 = v17[8];
  uint64_t v22 = (_OWORD *)((char *)a1 + v21);
  long long v23 = (_OWORD *)((char *)a2 + v21);
  long long v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  return a1;
}

uint64_t type metadata accessor for UIKitGestureRecognizer()
{
  return self;
}

uint64_t UIKitGestureRecognizer.convert(touches:with:)(uint64_t a1, void *a2)
{
  unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
    lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject, &lazy cache variable for type metadata for UITouch);
    Set.Iterator.init(_cocoa:)();
    a1 = v53;
    uint64_t v47 = v54;
    uint64_t v4 = v55;
    uint64_t v5 = v56;
    unint64_t v6 = v57;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v47 = a1 + 56;
    uint64_t v8 = ~v7;
    uint64_t v9 = -v7;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v6 = v10 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v4 = v8;
    uint64_t v5 = 0;
  }
  int64_t v46 = (unint64_t)(v4 + 64) >> 6;
  uint64_t v48 = a1;
  if (a1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v6)
  {
    uint64_t v11 = (v6 - 1) & v6;
    unint64_t v12 = __clz(__rbit64(v6)) | (v5 << 6);
    uint64_t v13 = v5;
    goto LABEL_27;
  }
  int64_t v15 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v15 >= v46) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v47 + 8 * v15);
    uint64_t v13 = v5 + 1;
    if (!v16)
    {
      uint64_t v13 = v5 + 2;
      if (v5 + 2 >= v46) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v47 + 8 * v13);
      if (!v16)
      {
        uint64_t v13 = v5 + 3;
        if (v5 + 3 >= v46) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v47 + 8 * v13);
        if (!v16)
        {
          uint64_t v13 = v5 + 4;
          if (v5 + 4 >= v46) {
            goto LABEL_33;
          }
          unint64_t v16 = *(void *)(v47 + 8 * v13);
          if (!v16)
          {
            uint64_t v17 = v5 + 5;
            while (v46 != v17)
            {
              unint64_t v16 = *(void *)(v47 + 8 * v17++);
              if (v16)
              {
                uint64_t v13 = v17 - 1;
                goto LABEL_26;
              }
            }
            goto LABEL_33;
          }
        }
      }
    }
LABEL_26:
    uint64_t v11 = (v16 - 1) & v16;
    unint64_t v12 = __clz(__rbit64(v16)) + (v13 << 6);
LABEL_27:
    id v14 = *(id *)(*(void *)(a1 + 48) + 8 * v12);
    if (v14)
    {
      while (1)
      {
        unint64_t v18 = v3;
        type metadata accessor for (UITransformEvent, TransformEvent)(0, (unint64_t *)&lazy cache variable for type metadata for (UITouch, TouchEvent), &lazy cache variable for type metadata for UITouch);
        Swift::UInt v20 = v19;
        Swift::UInt v21 = (Swift::UInt)v14;
        id v22 = v14;
        id v51 = objc_msgSend(v50, sel_view);
        id v23 = a2;
        id v24 = objc_msgSend(v22, sel_phase);
        objc_msgSend(v22, sel_locationInView_, 0);
        uint64_t v26 = v25;
        uint64_t v28 = v27;
        objc_msgSend(v22, sel_timestamp);
        uint64_t v30 = v29;
        objc_msgSend(v22, sel_majorRadius);
        uint64_t v32 = v31;
        objc_msgSend(v22, sel_force);
        uint64_t v34 = v33;
        objc_msgSend(v22, sel_maximumPossibleForce);
        uint64_t v36 = v35;
        uint64_t v37 = specialized EventModifiers.init(_:)((int)objc_msgSend(v23, sel_modifierFlags));
        objc_msgSend(v22, sel_altitudeAngle);
        uint64_t v39 = v38;
        objc_msgSend(v22, sel_azimuthAngleInView_, 0);
        uint64_t v41 = v40;
        id v42 = objc_msgSend(v22, sel_type);

        if ((unint64_t)v42 >= 4) {
          goto LABEL_35;
        }
        *(void *)&long long v58 = v30;
        unint64_t v43 = 0x201010302010100uLL >> (8 * v24);
        if ((unint64_t)v24 >= 8) {
          LOBYTE(v43) = 3;
        }
        BYTE8(v58) = v43;
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        uint64_t v59 = 0;
        uint64_t v62 = v26;
        uint64_t v63 = v28;
        uint64_t v64 = v32;
        uint64_t v65 = v34;
        uint64_t v66 = v36;
        uint64_t v67 = v37;
        uint64_t v68 = v39;
        uint64_t v69 = v41;
        char v70 = (char)v42;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        long long v52 = (void *)v18;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v58, v20, v21, isUniquelyReferenced_nonNull_native);
        unint64_t v3 = v18;

        swift_bridgeObjectRelease();
        uint64_t v5 = v13;
        unint64_t v6 = v11;
        a1 = v48;
        if ((v48 & 0x8000000000000000) == 0) {
          goto LABEL_8;
        }
LABEL_10:
        if (__CocoaSet.Iterator.next()())
        {
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v14 = v52;
          swift_unknownObjectRelease();
          uint64_t v13 = v5;
          uint64_t v11 = v6;
          if (v52) {
            continue;
          }
        }
        break;
      }
    }
LABEL_33:
    outlined consume of Set<UIPress>.Iterator._Variant();
    return v3;
  }
  __break(1u);
LABEL_35:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in SearchFieldConfigurationReader.MakeContent.config.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v69 = a4;
  uint64_t v65 = a7;
  uint64_t v66 = a6;
  int v63 = a3;
  uint64_t v56 = a5;
  uint64_t v57 = a2;
  uint64_t v8 = a1;
  uint64_t v59 = a1;
  uint64_t v68 = a8;
  uint64_t v70 = a4;
  uint64_t v71 = a5;
  uint64_t v72 = a6;
  uint64_t v73 = a7;
  uint64_t v62 = type metadata accessor for SearchFieldConfigurationReader();
  uint64_t v64 = *(void *)(v62 - 8);
  MEMORY[0x1F4188790](v62);
  uint64_t v10 = &v54[-v9];
  uint64_t v11 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F273A8];
  unint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  uint64_t v61 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F273A8];
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F273A8], MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v13 - 8);
  int64_t v15 = &v54[-v14];
  long long v58 = &v54[-v14];
  uint64_t v67 = type metadata accessor for SearchFieldState;
  uint64_t v60 = v12;
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, v12);
  MEMORY[0x1F4188790](v16 - 8);
  unsigned __int8 v74 = &v54[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v18);
  Swift::UInt v20 = &v54[-v19];
  _s7SwiftUI24SearchFieldConfigurationV4DataVSgWOcTm_0(v8, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, v11, v12);
  LODWORD(v8) = v63;
  uint64_t v22 = v65;
  uint64_t v21 = v66;
  SearchFieldConfigurationReader.MakeContent.reader.getter((uint64_t)v10);
  uint64_t v23 = v62;
  id v24 = &v10[*(int *)(v62 + 52)];
  uint64_t v25 = *(void *)v24;
  uint64_t v26 = *((void *)v24 + 1);
  int v55 = v24[16];
  uint64_t v27 = *(void (**)(unsigned char *, uint64_t))(v64 + 8);
  swift_retain();
  swift_retain();
  v27(v10, v23);
  uint64_t v53 = v21;
  uint64_t v28 = v58;
  SearchFieldConfigurationReader.MakeContent.state(text:isPresented:)((uint64_t)v58, v25, v26, v55, v57, v8, v69, v56, v20, v53, v22);
  uint64_t v29 = v59;
  swift_release();
  swift_release();
  uint64_t v30 = (uint64_t)v28;
  uint64_t v31 = v60;
  outlined destroy of SearchFieldConfiguration.Data?(v30, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, v61, v60);
  _s7SwiftUI24SearchFieldConfigurationV4DataVSgWOcTm_0((uint64_t)v20, (uint64_t)v74, &lazy cache variable for type metadata for Binding<SearchFieldState>, v67, v31);
  uint64_t v32 = type metadata accessor for SearchFieldConfiguration.Data(0);
  int v33 = v8;
  uint64_t v34 = v32;
  uint64_t v35 = v29 + *(int *)(v32 + 24);
  uint64_t v36 = *(void *)v35;
  int v37 = *(unsigned __int8 *)(v35 + 8);
  if (*MEMORY[0x1E4F4E7A0] == v33) {
    int v38 = 2;
  }
  else {
    int v38 = *(unsigned __int8 *)AGGraphGetValue();
  }
  outlined copy of PlatformItemCollection?(v36, v37);
  LODWORD(v69) = v37;
  uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  outlined destroy of SearchFieldConfiguration.Data?((uint64_t)v20, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  LODWORD(v65) = (v38 == 2) | v38;
  uint64_t v40 = v29 + *(int *)(v34 + 20);
  uint64_t v41 = *(void *)v40;
  uint64_t v42 = *(void *)(v40 + 8);
  char v43 = *(unsigned char *)(v40 + 16);
  uint64_t v44 = *(uint64_t (**)(uint64_t))(v40 + 24);
  uint64_t v66 = v41;
  uint64_t v67 = v44;
  id v45 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v46 = v45[7];
  uint64_t v47 = v68;
  uint64_t v48 = v68 + v45[6];
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_3((uint64_t)v74, v68, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, v39);
  *(void *)uint64_t v48 = v36;
  *(unsigned char *)(v48 + 8) = v69;
  *(unsigned char *)(v47 + v46) = v65 & 1;
  uint64_t v49 = v47 + v45[8];
  uint64_t v50 = v66;
  id v51 = v67;
  *(void *)uint64_t v49 = v66;
  *(void *)(v49 + 8) = v42;
  *(unsigned char *)(v49 + 16) = v43;
  *(void *)(v49 + 24) = v51;
  outlined copy of Text.Storage(v50, v42, v43);
  return swift_bridgeObjectRetain();
}

uint64_t outlined init with copy of SearchFieldConfiguration.Data?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  type metadata accessor for SearchFieldConfiguration.Data?(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t _s7SwiftUI24SearchFieldConfigurationV4DataVSgWOcTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t outlined destroy of SearchFieldConfiguration.Data?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t SearchFieldConfigurationReader.MakeContent.reader.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SearchFieldConfigurationReader();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t type metadata accessor for SearchFieldConfigurationReader()
{
  return swift_getGenericMetadata();
}

void *initializeWithCopy for SearchFieldConfigurationReader(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  unint64_t v9 = *(_DWORD *)(v7 + 80) & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v10 = (unsigned char *)(((unint64_t)v4 + v8 + 8) & v9);
  uint64_t v11 = (unsigned char *)(((unint64_t)v5 + v8 + 8) & v9);
  *uint64_t v10 = *v11;
  v10[1] = v11[1];
  v10[2] = v11[2];
  v10[3] = v11[3];
  unint64_t v12 = (unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v13 = (unint64_t)(v11 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  LOBYTE(v11) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)unint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = (_BYTE)v11;
  uint64_t v14 = (v8 + 5 + v12) & ~v8;
  uint64_t v15 = (v8 + 5 + v13) & ~v8;
  uint64_t v17 = v7 + 16;
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  swift_retain();
  swift_retain();
  v16(v14, v15, v6);
  uint64_t v18 = *(void *)(v17 + 48);
  *(unsigned char *)(v18 + v14) = *(unsigned char *)(v18 + v15);
  unint64_t v19 = (v18 + v14) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v20 = (v18 + v15) & 0xFFFFFFFFFFFFFFFCLL;
  char v21 = *(unsigned char *)(v20 + 8);
  *(_DWORD *)(v19 + 4) = *(_DWORD *)(v20 + 4);
  *(unsigned char *)(v19 + 8) = v21;
  unint64_t v22 = ((v8 + 16) & v9) + ((v18 + ((v8 + 9) & ~v8)) & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v23 = (char *)a1 + v22;
  id v24 = (char *)a2 + v22;
  unint64_t v25 = (unint64_t)(v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (unint64_t)(v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v25 = *(void *)v26;
  *(void *)(v25 + 8) = *(void *)(v26 + 8);
  *(unsigned char *)(v25 + 16) = *(unsigned char *)(v26 + 16);
  uint64_t v27 = (void *)((unint64_t)(v23 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = (void *)((unint64_t)(v24 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = v28[1];
  *uint64_t v27 = *v28;
  v27[1] = v29;
  uint64_t v30 = *(void *)(a3 + 24);
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16);
  uint64_t v32 = *(unsigned __int8 *)(*(void *)(v30 - 8) + 80);
  uint64_t v33 = ((unint64_t)v27 + v32 + 16) & ~v32;
  uint64_t v34 = ((unint64_t)v28 + v32 + 16) & ~v32;
  swift_retain();
  swift_retain();
  swift_retain();
  v31(v33, v34, v30);
  return a1;
}

void SwiftUISearchController.enqueueIsActiveUpdate(_:)(char a1)
{
  v1[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_pendingIsActive] = a1;
  uint64_t v2 = (void *)MEMORY[0x18C119DF0](&v1[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_targetController]);
  if (v2
    && (unint64_t v3 = v2,
        id v4 = objc_msgSend(v2, sel_transitionCoordinator),
        v3,
        v4))
  {
    uint64_t v5 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v9[4] = partial apply for closure #1 in SwiftUISearchController.enqueueIsActiveUpdate(_:);
    v9[5] = v5;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    v9[3] = &block_descriptor_18;
    uint64_t v6 = _Block_copy(v9);
    swift_release();
    objc_msgSend(v4, sel_animateAlongsideTransition_completion_, 0, v6);
    _Block_release(v6);
    swift_unknownObjectRelease();
  }
  else
  {
    id v7 = objc_msgSend(v1, sel_searchBar);
    id v8 = objc_msgSend(v7, sel_window);

    if (v8)
    {

      swift_allocObject();
      swift_unknownObjectWeakInit();
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release_n();
    }
  }
}

uint64_t SwiftUISearchController.update(to:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v2 - 8);
  long long v98 = (char *)&v85 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ToolbarStorage.SearchItem?(0, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v96 = (uint64_t)&v85 - v5;
  uint64_t v6 = MEMORY[0x1E4F41638];
  type metadata accessor for ToolbarStorage.SearchItem?(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v97 = v7;
  MEMORY[0x1F4188790](v7);
  unint64_t v9 = (char *)&v85 - v8;
  uint64_t v10 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v94 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v12 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v99 = (uint64_t)&v85 - v14;
  uint64_t v15 = type metadata accessor for ToolbarStorage.SearchItem(0);
  LODWORD(v95) = *(unsigned __int8 *)(a1 + *(int *)(v15 + 48));
  outlined init with copy of Toolbar.UpdateContext?(a1, (uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t)type metadata accessor for SearchFieldState, v6, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
  uint64_t v16 = v15;
  uint64_t v91 = v15;
  uint64_t v17 = *(int *)(v15 + 20);
  uint64_t v90 = a1;
  uint64_t v18 = *(void *)(a1 + v17);
  uint64_t v19 = a1 + *(int *)(v16 + 32);
  uint64_t v87 = *(void *)v19;
  uint64_t v86 = *(void *)(v19 + 8);
  char v20 = *(unsigned char *)(v19 + 16);
  uint64_t v89 = *(void *)(v19 + 24);
  uint64_t v92 = v10;
  char v21 = &v12[*(int *)(v10 + 24)];
  *(void *)char v21 = 0;
  long long v21[8] = -1;
  uint64_t v22 = *(int *)(v10 + 28);
  v12[v22] = 1;
  outlined init with copy of Toolbar.UpdateContext?((uint64_t)v9, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t)type metadata accessor for SearchFieldState, v6, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
  if (v18) {
    int v23 = 1;
  }
  else {
    int v23 = -1;
  }
  int v88 = v23;
  swift_bridgeObjectRetain();
  uint64_t v24 = v87;
  uint64_t v25 = v86;
  outlined copy of Text.Storage(v87, v86, v20);
  swift_bridgeObjectRetain();
  outlined destroy of Toolbar.UpdateContext?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t)type metadata accessor for SearchFieldState, v6, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  outlined consume of PlatformItemCollection?(*(void *)v21, v21[8]);
  *(void *)char v21 = v18;
  long long v21[8] = v88;
  v12[v22] = 1;
  uint64_t v26 = v92;
  uint64_t v27 = &v12[*(int *)(v92 + 32)];
  *(void *)uint64_t v27 = v24;
  *((void *)v27 + 1) = v25;
  v27[16] = v20;
  uint64_t v28 = v93;
  *((void *)v27 + 3) = v89;
  uint64_t v29 = (uint64_t)v12;
  uint64_t v30 = v99;
  outlined init with take of ToolbarStorage.SearchItem(v29, v99, type metadata accessor for SearchFieldConfiguration);
  uint64_t v31 = v90;
  uint64_t v32 = v96;
  _s7SwiftUI24SearchFieldConfigurationVWOcTm_0(v30, v96, type metadata accessor for SearchFieldConfiguration);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v94 + 56))(v32, 0, 1, v26);
  uint64_t v33 = v28;
  uint64_t v34 = (uint64_t)&v28[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_configuration];
  swift_beginAccess();
  outlined assign with take of SearchFieldConfiguration?(v32, v34);
  swift_endAccess();
  uint64_t v35 = (int *)v91;
  uint64_t v36 = v31;
  int v37 = (uint64_t *)(v31 + *(int *)(v91 + 36));
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>, (uint64_t)&type metadata for SceneAllowsSecureDrawingKey, (uint64_t)&protocol witness table for SceneAllowsSecureDrawingKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>, (uint64_t)&type metadata for SceneAllowsSecureDrawingKey, (uint64_t)&protocol witness table for SceneAllowsSecureDrawingKey);
  swift_retain_n();
  if (v38)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    uint64_t v40 = v38;
  }
  else
  {
    PropertyList.subscript.getter();
    uint64_t v40 = 0;
  }
  swift_release_n();
  v28[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_allowsSecureDrawing] = v101[0];
  uint64_t v41 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_coordinator;
  id v42 = *(id *)&v28[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_coordinator];
  char v43 = (unsigned __int8 *)SwiftUISearchController._searchBar.getter();
  v101[0] = v39;
  v101[1] = v38;
  uint64_t v92 = v39;
  swift_retain();
  swift_retain();
  UIKitSearchBarCoordinator.updateSearchBar(_:to:in:)(v43, v99, v101);
  uint64_t v96 = v40;
  swift_release();
  swift_release();

  id v44 = *(id *)&v28[v41];
  id v45 = SwiftUISearchController._searchBar.getter();
  uint64_t v46 = v35;
  uint64_t v47 = v35[6];
  uint64_t v94 = v38;
  uint64_t v48 = v36;
  uint64_t v49 = v36 + v47;
  uint64_t v89 = *(void *)v49;
  uint64_t v50 = *(void **)&v28[v41];
  LODWORD(v41) = *(unsigned __int8 *)(v49 + 8);
  id v51 = v50;
  UIKitSearchBarCoordinator.resolvedTokenScopes.getter();
  uint64_t v53 = v52;
  unsigned __int8 v55 = v54;

  _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_0(v48 + v46[11], (uint64_t)v101, (uint64_t)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Toolbar.UpdateContext?);
  uint64_t v56 = v33;
  outlined retain of BoundInputsView?(v101, (void (*)(void, void, void, void, void, void, void, void, void, void, void))outlined copy of BoundInputsView?);
  specialized UIKitSearchScopeCoordinating<>.updateScopes(_:newScopes:newTokenScopes:customScopeBar:customScopeBarUpdate:)(v45, v89, v41, v53, v55, (uint64_t)v101, (uint64_t)v44, (uint64_t)v56, v95);

  outlined consume of PlatformItemCollection?(v53, v55);
  outlined retain of BoundInputsView?(v101, (void (*)(void, void, void, void, void, void, void, void, void, void, void))outlined consume of BoundInputsView?);
  uint64_t v57 = v48 + v46[7];
  uint64_t v58 = *(void *)v57;
  uint64_t v59 = &v56[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_suggestions];
  uint64_t v60 = *(void *)&v56[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_suggestions];
  unsigned __int8 v61 = *(unsigned char *)(v57 + 8);
  *(void *)uint64_t v59 = *(void *)v57;
  LOBYTE(v51) = v59[8];
  v59[8] = v61;
  outlined copy of PlatformItemCollection?(v58, v61);
  outlined consume of PlatformItemCollection?(v60, v51);
  SwiftUISearchController.updateSuggestions()();
  uint64_t v62 = v48 + v46[13];
  int v63 = *(void **)v62;
  uint64_t v64 = *(void *)(v62 + 8);
  uint64_t v65 = *(void *)(v62 + 16);
  uint64_t v66 = *(void *)(v62 + 24);
  uint64_t v67 = *(void **)(v62 + 32);
  uint64_t v68 = *(void *)(v62 + 40);
  uint64_t v69 = *(void *)(v62 + 48);
  uint64_t v70 = *(void *)(v62 + 56);
  uint64_t v71 = *(void *)(v62 + 64);
  uint64_t v72 = *(void *)(v62 + 72);
  uint64_t v73 = *(void *)(v62 + 80);
  unsigned __int8 v74 = &v56[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent];
  uint64_t v75 = *(void *)&v56[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent];
  uint64_t v76 = *(void *)&v56[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent + 8];
  uint64_t v77 = *(void *)&v56[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent + 16];
  uint64_t v78 = *(void *)&v56[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent + 24];
  long long v79 = *(void **)&v56[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent + 32];
  long long v95 = *(_OWORD *)&v56[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent + 64];
  *(void *)unsigned __int8 v74 = v63;
  *((void *)v74 + 1) = v64;
  *((void *)v74 + 2) = v65;
  *((void *)v74 + 3) = v66;
  *((void *)v74 + 4) = v67;
  *((void *)v74 + 5) = v68;
  *((void *)v74 + 6) = v69;
  *((void *)v74 + 7) = v70;
  *((void *)v74 + 8) = v71;
  *((void *)v74 + 9) = v72;
  *((void *)v74 + 10) = v73;
  outlined copy of BoundInputsView?(v63, v64, v65, v66, v67);
  outlined consume of BoundInputsView?(v75, v76, v77, v78, v79);
  SwiftUISearchController.updateCustomAccessory()();
  SwiftUISearchController.updateCustomAccessoryRecoveryGesture()();
  SwiftUISearchController.updateSuggestions()();
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey>, (uint64_t)&type metadata for EnvironmentValues.SearchScopeActivationKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchScopeActivationKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey>, (uint64_t)&type metadata for EnvironmentValues.SearchScopeActivationKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchScopeActivationKey);
  swift_retain();
  if (v94)
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    SwiftUISearchController.updateScopesActivation(to:)(v100);
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey>, (uint64_t)&type metadata for EnvironmentValues.SearchPresentationToolbarBehaviorKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchPresentationToolbarBehaviorKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>(lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey>, (uint64_t)&type metadata for EnvironmentValues.SearchPresentationToolbarBehaviorKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchPresentationToolbarBehaviorKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    swift_retain();
    PropertyList.subscript.getter();
    swift_release();
    swift_release_n();
    SwiftUISearchController.updateScopesActivation(to:)(v100);
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey>, (uint64_t)&type metadata for EnvironmentValues.SearchPresentationToolbarBehaviorKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchPresentationToolbarBehaviorKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>(lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey>, (uint64_t)&type metadata for EnvironmentValues.SearchPresentationToolbarBehaviorKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchPresentationToolbarBehaviorKey);
    swift_retain_n();
    swift_retain();
    PropertyList.subscript.getter();
    swift_release();
  }
  swift_release_n();
  int v80 = v100;
  if (v80 == objc_msgSend(v56, sel_hidesNavigationBarDuringPresentation)) {
    objc_msgSend(v56, sel_setHidesNavigationBarDuringPresentation_, v80 ^ 1u);
  }
  uint64_t v81 = v98;
  uint64_t v82 = v99;
  MEMORY[0x18C113DA0](v97);
  char v83 = *v81 != 2;
  _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v81, type metadata accessor for SearchFieldState);
  SwiftUISearchController.enqueueIsActiveUpdate(_:)(v83);
  return _s7SwiftUI16SearchFieldStateVWOhTm_2(v82, type metadata accessor for SearchFieldConfiguration);
}

id SwiftUISearchController._searchBar.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController____lazy_storage____searchBar;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController____lazy_storage____searchBar);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController____lazy_storage____searchBar);
  }
  else
  {
    id v4 = closure #1 in SwiftUISearchController._searchBar.getter(v0);
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *outlined retain of BoundInputsView?(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t outlined consume of PlatformItemCollection?(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return outlined consume of PlatformItemCollection.Storage(result, a2 & 1);
  }
  return result;
}

void SwiftUISearchController.updateSuggestions()()
{
  Class v1 = v0;
  uint64_t v2 = type metadata accessor for PlatformItemList.Item();
  id v3 = *(objc_class **)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (void **)((char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v28 - v7;
  type metadata accessor for ToolbarStorage.SearchItem?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v28 - v10;
  if (*(void *)((char *)v1 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent))
  {
    type metadata accessor for UISearchSuggestion();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [(objc_class *)v1 setSearchSuggestions:isa];
    Class v12 = isa;

    return;
  }
  Class isa = v3;
  int v13 = *((unsigned __int8 *)v1 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_suggestions + 8);
  unint64_t v14 = MEMORY[0x1E4FBC860];
  if (v13 != 255)
  {
    uint64_t v31 = v2;
    uint64_t v29 = v1;
    uint64_t v15 = *(void *)((char *)v1 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_suggestions);
    unint64_t v34 = MEMORY[0x1E4FBC860];
    if (v13)
    {
      outlined copy of PlatformItemCollection.Storage(v15, 1);
      swift_bridgeObjectRetain();
    }
    unint64_t v16 = 0;
    Class v1 = isa;
    uint64_t v30 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)isa + 56);
    while (1)
    {
      if (v13)
      {
        outlined copy of PlatformItemCollection?(v15, v13);
        uint64_t v18 = *(void *)(v15 + 16);
        swift_bridgeObjectRelease();
        if (v16 == v18) {
          goto LABEL_28;
        }
        outlined copy of PlatformItemCollection?(v15, v13);
        uint64_t v19 = v15;
      }
      else
      {
        Weakuint64_t Value = AGGraphGetWeakValue();
        if (WeakValue)
        {
          if (v16 == *(void *)(*(void *)WeakValue + 16)) {
            goto LABEL_28;
          }
        }
        else
        {
          uint64_t v20 = *(void *)(MEMORY[0x1E4FBC860] + 16);
          swift_bridgeObjectRelease();
          if (v16 == v20)
          {
LABEL_28:
            (*v30)(v11, 1, 1, v31);
            outlined consume of PlatformItemCollection?(v15, v13);
            unint64_t v14 = v34;
            outlined consume of PlatformItemCollection?(v15, v13);
            Class v1 = v29;
            goto LABEL_29;
          }
        }
        char v21 = (uint64_t *)AGGraphGetWeakValue();
        if (v21)
        {
          uint64_t v19 = *v21;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v19 = MEMORY[0x1E4FBC860];
        }
      }
      if (v16 >= *(void *)(v19 + 16))
      {
        __break(1u);
LABEL_33:
        type metadata accessor for UISearchSuggestion();
        swift_bridgeObjectRetain();
        _bridgeCocoaArray<A>(_:)();
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
      _s7SwiftUI24SearchFieldConfigurationVWOcTm_0(v19+ ((*((unsigned __int8 *)v1 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v1 + 80))+ *((void *)v1 + 9) * v16, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      swift_bridgeObjectRelease();
      (*((void (**)(char *, void, uint64_t, uint64_t))v1 + 7))(v11, 0, 1, v31);
      outlined init with take of ToolbarStorage.SearchItem((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      _s7SwiftUI24SearchFieldConfigurationVWOcTm_0((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      uint64_t v22 = (objc_class *)type metadata accessor for UIKitSearchSuggestion(0);
      id v23 = objc_allocWithZone(v22);
      uint64_t v24 = *v5;
      if (!*v5) {
        goto LABEL_10;
      }
      id v25 = v23;

      if ((unint64_t)v5[51] < 2) {
        break;
      }
      _s7SwiftUI24SearchFieldConfigurationVWOcTm_0((uint64_t)v5, (uint64_t)v25 + OBJC_IVAR____TtC7SwiftUI21UIKitSearchSuggestion_platformItem, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);

      v33.receiver = v25;
      v33.super_class = v22;
      objc_msgSendSuper2(&v33, sel_init);
      _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      uint64_t v26 = _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      MEMORY[0x18C115B40](v26);
      if (*(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
LABEL_11:
      Class v1 = isa;
      ++v16;
    }

LABEL_10:
    _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    swift_deallocPartialClassInstance();
    _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    goto LABEL_11;
  }
LABEL_29:
  if (v14 >> 62) {
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  type metadata accessor for UISearchSuggestion();
LABEL_31:
  swift_bridgeObjectRelease();
  type metadata accessor for UISearchSuggestion();
  Class v27 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [(objc_class *)v1 setSearchSuggestions:v27];
}

unint64_t type metadata accessor for UISearchSuggestion()
{
  unint64_t result = lazy cache variable for type metadata for UISearchSuggestion;
  if (!lazy cache variable for type metadata for UISearchSuggestion)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UISearchSuggestion);
  }
  return result;
}

uint64_t outlined copy of PlatformItemCollection?(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return outlined copy of PlatformItemCollection.Storage(result, a2 & 1);
  }
  return result;
}

uint64_t specialized UIKitSearchScopeCoordinating<>.updateScopes(_:newScopes:newTokenScopes:customScopeBar:customScopeBarUpdate:)(void *a1, uint64_t a2, int a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v95 = a8;
  uint64_t v102 = a7;
  LODWORD(v99) = a3;
  uint64_t v97 = a2;
  id v100 = a1;
  int v11 = ~a5;
  long long v101 = (void *)a6;
  outlined init with take of PlatformItem.PrimaryContent?(a6, (uint64_t)v110, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?);
  uint64_t v91 = v110[5];
  uint64_t v92 = v110[7];
  uint64_t v93 = v110[10];
  id v94 = (id)v110[4];
  uint64_t v12 = type metadata accessor for PlatformItemList.Item();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  *(void *)&long long v107 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v104 = (uint64_t)&v91 - v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (id *)((char *)&v91 - v18);
  MEMORY[0x1F4188790](v20);
  uint64_t v106 = (char *)&v91 - v21;
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (id *)((char *)&v91 - v23);
  MEMORY[0x1F4188790](v25);
  Class v27 = (id *)((char *)&v91 - v26);
  type metadata accessor for PlatformItemList.Item?(0);
  MEMORY[0x1F4188790](v28 - 8);
  long long v98 = (char *)&v91 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)&v91 - v31;
  uint64_t v108 = v13;
  uint64_t v105 = v24;
  uint64_t v96 = v12;
  if (!v11) {
    goto LABEL_16;
  }
  outlined copy of PlatformItemCollection.Storage(a4, a5 & 1);
  specialized Collection.first.getter(a4, a5 & 1, (uint64_t)v32);
  outlined consume of PlatformItemCollection?(a4, a5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v32, 1, v12) == 1)
  {
    outlined destroy of PlatformItemList.Item((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
LABEL_16:
    uint64_t v35 = 0;
    uint64_t v36 = (uint64_t)v106;
    uint64_t v44 = (uint64_t)v98;
    unsigned __int8 v45 = v99;
    goto LABEL_17;
  }
  uint64_t v33 = *((void *)v32 + 77);
  swift_bridgeObjectRetain();
  uint64_t result = outlined destroy of PlatformItemList.Item((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  if (!v33) {
    goto LABEL_16;
  }
  uint64_t v35 = MEMORY[0x1E4FBC860];
  v115[0] = MEMORY[0x1E4FBC860];
  uint64_t v36 = (uint64_t)v106;
  uint64_t v103 = *(void *)(v33 + 16);
  if (v103)
  {
    unint64_t v37 = 0;
    uint64_t v38 = MEMORY[0x1E4FBC860];
    while (v37 < *(void *)(v33 + 16))
    {
      uint64_t v39 = v13;
      unint64_t v40 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v41 = *(void *)(v39 + 72);
      outlined init with copy of PlatformItemList.Item(v33 + v40 + v41 * v37, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      if (*v27)
      {

        outlined init with take of SearchFieldConfiguration((uint64_t)v27, v107, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v38 + 16) + 1, 1);
        }
        uint64_t v38 = v115[0];
        unint64_t v43 = *(void *)(v115[0] + 16);
        unint64_t v42 = *(void *)(v115[0] + 24);
        if (v43 >= v42 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
          uint64_t v38 = v115[0];
        }
        *(void *)(v38 + 16) = v43 + 1;
        uint64_t result = outlined init with take of SearchFieldConfiguration(v107, v38 + v40 + v43 * v41, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        uint64_t v24 = v105;
        uint64_t v36 = (uint64_t)v106;
      }
      else
      {
        uint64_t result = outlined destroy of PlatformItemList.Item((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        uint64_t v36 = (uint64_t)v106;
      }
      uint64_t v13 = v108;
      if (v103 == ++v37)
      {
        uint64_t v35 = v115[0];
        unsigned __int8 v45 = v99;
        uint64_t v44 = (uint64_t)v98;
        goto LABEL_80;
      }
    }
    __break(1u);
    goto LABEL_83;
  }
  uint64_t v44 = (uint64_t)v98;
  unsigned __int8 v45 = v99;
LABEL_80:
  swift_bridgeObjectRelease();
  if (!*(void *)(v35 + 16))
  {
    swift_release();
    uint64_t v35 = 0;
  }
LABEL_17:
  if (v45 == 0xFF) {
    goto LABEL_36;
  }
  uint64_t v46 = v97;
  outlined copy of PlatformItemCollection.Storage(v97, v45 & 1);
  specialized Collection.first.getter(v46, v45 & 1, v44);
  outlined consume of PlatformItemCollection?(v46, v45);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v44, 1, v96) == 1)
  {
    outlined destroy of PlatformItemList.Item(v44, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
    goto LABEL_36;
  }
  uint64_t v47 = *(void *)(v44 + 616);
  swift_bridgeObjectRetain();
  uint64_t result = outlined destroy of PlatformItemList.Item(v44, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  if (!v47) {
    goto LABEL_36;
  }
  uint64_t v103 = v35;
  uint64_t v48 = MEMORY[0x1E4FBC860];
  v115[0] = MEMORY[0x1E4FBC860];
  uint64_t v49 = *(void *)(v47 + 16);
  if (!v49)
  {
LABEL_34:
    uint64_t v35 = v103;
    swift_bridgeObjectRelease();
    if (*(void *)(v48 + 16)) {
      goto LABEL_37;
    }
    swift_release();
LABEL_36:
    uint64_t v48 = 0;
LABEL_37:
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v101, (uint64_t)v115, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?);
    if (v115[0])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_39:
      uint64_t v55 = OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_scopes;
      uint64_t v56 = v102;
      if (*(void *)(*(void *)(v102 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_scopes) + 16))
      {
        objc_msgSend(v100, sel_setScopeButtonTitles_, 0);
        *(void *)(v56 + v55) = MEMORY[0x1E4FBC860];
        swift_bridgeObjectRelease();
      }
      uint64_t v57 = v101;
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v101, (uint64_t)v111, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?);
      if (*(void *)&v111[0])
      {
        v113[2] = v111[2];
        v113[3] = v111[3];
        v113[4] = v111[4];
        uint64_t v114 = v112;
        v113[0] = v111[0];
        v113[1] = v111[1];
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        id v58 = v94;
        id v59 = SwiftUISearchController._searchBar.getter();
        outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v57, (uint64_t)v109, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?);
        outlined retain of BoundInputsView((uint64_t)v113);
        UIKitSearchBar.updateCustomScopeBarView(_:)((uint64_t)v109);

        outlined retain of BoundInputsView?(v57, (void (*)(void, void, void, void, void, void, void, void, void, void, void))outlined consume of BoundInputsView?);
        uint64_t v60 = SwiftUISearchController._searchBar.getter();
        BOOL v61 = v60[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarVisibility] != 1;
        v60[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarVisibility] = a9;
        if ((a9 == 1) == v61) {
          UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)(a9 == 1, 1);
        }

        outlined retain of BoundInputsView?(v57, (void (*)(void, void, void, void, void, void, void, void, void, void, void))outlined consume of BoundInputsView?);
      }
LABEL_78:
      uint64_t v86 = *(void *)(v102 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar);
      uint64_t v87 = *(void *)(v102 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 8);
      uint64_t v88 = *(void *)(v102 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 16);
      uint64_t v89 = *(void *)(v102 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 24);
      uint64_t v90 = *(void **)(v102 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 32);
      uint64_t v108 = *(void *)(v102 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 56);
      long long v107 = *(_OWORD *)(v102 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar + 64);
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v57, v102 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_customScopeBar, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?);
      outlined retain of BoundInputsView?(v57, (void (*)(void, void, void, void, void, void, void, void, void, void, void))outlined copy of BoundInputsView?);
      return outlined consume of BoundInputsView?(v86, v87, v88, v89, v90);
    }
    if (v35)
    {
      uint64_t v62 = v35;
      uint64_t v105 = (id *)v35;
    }
    else
    {
      if (!v48) {
        goto LABEL_39;
      }
      swift_bridgeObjectRetain();
      uint64_t v62 = v48;
      uint64_t v105 = (id *)v48;
    }
    uint64_t v63 = *(void *)(v62 + 16);
    uint64_t v104 = v48;
    uint64_t v99 = v62;
    if (v63)
    {
      uint64_t v64 = v35;
      uint64_t v65 = v62 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      *(void *)&long long v107 = *(void *)(v13 + 72);
      uint64_t v103 = v64;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v66 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v67 = v63;
      do
      {
        outlined init with copy of PlatformItemList.Item(v65, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        if (*v19)
        {
          uint64_t v68 = v63;
          id v69 = objc_msgSend(*v19, sel_string);
          uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v72 = v71;

          outlined destroy of PlatformItemList.Item((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v66 + 2) + 1, 1, v66);
          }
          unint64_t v74 = *((void *)v66 + 2);
          unint64_t v73 = *((void *)v66 + 3);
          if (v74 >= v73 >> 1) {
            uint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74 + 1, 1, v66);
          }
          *((void *)v66 + 2) = v74 + 1;
          uint64_t v75 = &v66[16 * v74];
          *((void *)v75 + 4) = v70;
          *((void *)v75 + 5) = v72;
          uint64_t v63 = v68;
        }
        else
        {
          outlined destroy of PlatformItemList.Item((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        }
        v65 += v107;
        --v67;
      }
      while (v67);
      swift_bridgeObjectRelease();
      uint64_t v36 = (uint64_t)v106;
      uint64_t v35 = v103;
      uint64_t v48 = v104;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v66 = (char *)MEMORY[0x1E4FBC860];
    }
    id v76 = objc_msgSend(v100, sel_scopeButtonTitles, v91, v92, v93);
    uint64_t v57 = v101;
    if (!v76) {
      goto LABEL_66;
    }
    uint64_t v77 = v76;
    uint64_t v78 = v35;
    long long v79 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v77) = specialized static Array<A>.== infix(_:_:)(v66, v79);
    uint64_t v35 = v78;
    uint64_t v48 = v104;
    swift_bridgeObjectRelease();
    if (v77)
    {
      swift_bridgeObjectRelease();
      if (!v63) {
        goto LABEL_64;
      }
    }
    else
    {
LABEL_66:
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v100, sel_setScopeButtonTitles_, isa);

      if (!v63)
      {
LABEL_64:
        swift_bridgeObjectRelease();
        if (!v48)
        {
LABEL_76:
          if (v35)
          {
            *(void *)(v102 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_tokenScopes) = v35;
            swift_bridgeObjectRelease();
          }
          goto LABEL_78;
        }
LABEL_75:
        *(void *)(v102 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_scopes) = v48;
        swift_bridgeObjectRelease();
        goto LABEL_76;
      }
    }
    uint64_t v81 = v35;
    uint64_t v82 = 0;
    uint64_t v83 = v99 + ((*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80));
    uint64_t v84 = *(void *)(v108 + 72);
    do
    {
      outlined init with copy of PlatformItemList.Item(v83, v36, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      int v85 = *(unsigned __int8 *)(v36 + 634);
      if (v85 == 3)
      {
        outlined destroy of PlatformItemList.Item(v36, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      }
      else
      {
        outlined destroy of PlatformItemList.Item(v36, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        if (!v85)
        {
          swift_bridgeObjectRelease();
          objc_msgSend(v100, sel_setSelectedScopeButtonIndex_, v82);
          goto LABEL_74;
        }
      }
      ++v82;
      v83 += v84;
    }
    while (v63 != v82);
    swift_bridgeObjectRelease();
LABEL_74:
    uint64_t v35 = v81;
    uint64_t v48 = v104;
    if (!v104) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  unint64_t v50 = 0;
  while (v50 < *(void *)(v47 + 16))
  {
    unint64_t v51 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v52 = *(void *)(v13 + 72);
    outlined init with copy of PlatformItemList.Item(v47 + v51 + v52 * v50, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    if (*v24)
    {

      outlined init with take of SearchFieldConfiguration((uint64_t)v24, v104, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v48 + 16) + 1, 1);
      }
      uint64_t v48 = v115[0];
      unint64_t v54 = *(void *)(v115[0] + 16);
      unint64_t v53 = *(void *)(v115[0] + 24);
      if (v54 >= v53 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
        uint64_t v48 = v115[0];
      }
      *(void *)(v48 + 16) = v54 + 1;
      uint64_t result = outlined init with take of SearchFieldConfiguration(v104, v48 + v51 + v54 * v52, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      uint64_t v13 = v108;
      uint64_t v24 = v105;
    }
    else
    {
      uint64_t result = outlined destroy of PlatformItemList.Item((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    }
    if (v49 == ++v50)
    {
      uint64_t v48 = v115[0];
      uint64_t v36 = (uint64_t)v106;
      goto LABEL_34;
    }
  }
LABEL_83:
  __break(1u);
  return result;
}

void UIKitSearchBarCoordinator.resolvedTokenScopes.getter()
{
  Class v1 = (void *)MEMORY[0x18C119DF0](v0 + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_searchBar);
  if (!v1) {
    return;
  }
  uint64_t v2 = v1;
  id v3 = objc_msgSend(v1, sel_searchTextField);

  if (!v3) {
    return;
  }
  id v4 = objc_msgSend(v3, sel_selectedTextRange);
  if (!v4)
  {
LABEL_24:

    return;
  }
  uint64_t v5 = v4;
  if (objc_msgSend(v4, sel_isEmpty))
  {

LABEL_6:
    return;
  }
  id v6 = objc_msgSend(v3, sel_tokensInRange_, v5);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISearchToken);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v13 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v14)
      {

        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) != 1)
  {
LABEL_23:
    swift_bridgeObjectRelease();

    goto LABEL_24;
  }
LABEL_9:
  if ((v7 & 0xC000000000000001) != 0)
  {
    id v8 = (id)MEMORY[0x18C117680](0, v7);
  }
  else
  {
    if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v8 = *(id *)(v7 + 32);
  }
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  if (objc_msgSend(v9, sel_representedObject))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v16, 0, sizeof(v16));
  }
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v16, (uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for Any?);
  if (v18)
  {
    type metadata accessor for UIKitSearchBarCoordinator.RepresentedToken(0);
    if ((swift_dynamicCast() & 1) == 0)
    {

      goto LABEL_6;
    }
    type metadata accessor for SearchFieldConfiguration?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
    unint64_t v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_18834BB80;
    outlined init with copy of PlatformItemList.Item(v15+ OBJC_IVAR____TtCC7SwiftUI25UIKitSearchBarCoordinatorP33_9E78780A6F2626BA9019200B48F4A36B16RepresentedToken_platformItem, v12 + v11, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);

    swift_release();
  }
  else
  {

    outlined destroy of AccessibilityValueStorage?((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for Any?);
  }
}

id SwiftUISearchController.updateCustomAccessoryRecoveryGesture()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v2 - 8);
  id v4 = (unsigned __int8 *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  id v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ToolbarStorage.SearchItem?(0, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  unint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent);
  uint64_t v13 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryRecoveryGesture;
  id v14 = *(id *)(v0 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryRecoveryGesture);
  if ((v12 != 0) == (v14 == 0))
  {
    if (v12)
    {
      id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D38]), sel_initWithTarget_action_, v0, sel_handleCustomAccessoryRecoveryGesture);
      uint64_t v16 = *(void **)(v0 + v13);
      *(void *)(v0 + v13) = v15;
      id v14 = v15;
      SwiftUISearchController.customAccessoryRecoveryGesture.didset(v16);
    }
    else
    {
      *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryRecoveryGesture) = 0;
      SwiftUISearchController.customAccessoryRecoveryGesture.didset(v14);
    }
  }
  uint64_t v17 = v0 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_configuration;
  swift_beginAccess();
  outlined init with copy of Toolbar.UpdateContext?(v17, (uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5))
  {
    outlined destroy of Toolbar.UpdateContext?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
    goto LABEL_9;
  }
  _s7SwiftUI24SearchFieldConfigurationVWOcTm_0((uint64_t)v11, (uint64_t)v8, type metadata accessor for SearchFieldConfiguration);
  outlined destroy of Toolbar.UpdateContext?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  type metadata accessor for ToolbarStorage.SearchItem?(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0]();
  _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v8, type metadata accessor for SearchFieldConfiguration);
  int v18 = *v4;
  _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v4, type metadata accessor for SearchFieldState);
  if (v18 == 2)
  {
LABEL_9:
    BOOL v19 = 0;
    id result = *(id *)(v1 + v13);
    if (!result) {
      return result;
    }
    return objc_msgSend(result, sel_setEnabled_, v19);
  }
  BOOL v19 = (v18 & 1) == 0;
  id result = *(id *)(v1 + v13);
  if (!result) {
    return result;
  }
  return objc_msgSend(result, sel_setEnabled_, v19);
}

void SwiftUISearchController.updateScopesActivation(to:)(char a1)
{
  unsigned __int8 v3 = a1 - 2;
  if ((a1 - 2) > 2u) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = qword_18836BF88[(char)v3];
  }
  if ((id)v4 != objc_msgSend(v1, sel_scopeBarActivation)) {
    objc_msgSend(v1, sel_setScopeBarActivation_, v4);
  }
  if (v3 >= 3u)
  {
    uint64_t v5 = a1 & 1;
    id v6 = objc_msgSend(v1, sel_searchBar);
    unsigned int v7 = objc_msgSend(v6, sel_showsScopeBar);

    if (v5 != v7)
    {
      id v8 = objc_msgSend(v1, sel_searchBar);
      objc_msgSend(v8, sel_setShowsScopeBar_, v5);
    }
  }
}

void SwiftUISearchController.updateCustomAccessory()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  id v8 = (char *)v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ToolbarStorage.SearchItem?(0, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, MEMORY[0x1E4FBB718]);
  double v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)v60 - v11;
  id v13 = objc_msgSend(v1, sel_viewIfLoaded, v10);
  id v14 = objc_msgSend(v13, sel_window);

  id v15 = &v1[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent];
  uint64_t v16 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent];
  if (!v16) {
    goto LABEL_7;
  }
  uint64_t v18 = *((void *)v15 + 1);
  uint64_t v17 = *((void *)v15 + 2);
  uint64_t v20 = *((void *)v15 + 3);
  BOOL v19 = (void *)*((void *)v15 + 4);
  uint64_t v22 = *((void *)v15 + 5);
  uint64_t v21 = *((void *)v15 + 6);
  uint64_t v23 = *((void *)v15 + 7);
  uint64_t v24 = *((void *)v15 + 8);
  uint64_t v26 = *((void *)v15 + 9);
  uint64_t v25 = *((void *)v15 + 10);
  *(void *)&long long v74 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent];
  *((void *)&v74 + 1) = v18;
  LODWORD(v75) = v17;
  *((void *)&v75 + 1) = v20;
  *(void *)&long long v76 = v19;
  *((void *)&v76 + 1) = v22;
  LODWORD(v77) = v21;
  *((void *)&v77 + 1) = v23;
  *(void *)&long long v78 = v24;
  *((void *)&v78 + 1) = v26;
  uint64_t v79 = v25;
  if (!v14)
  {
LABEL_7:
    uint64_t v30 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryHost;
    uint64_t v31 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryHost];
    if (v31)
    {
      objc_msgSend(v31, sel_dismissViewControllerAnimated_completion_, 1, 0);
      uint64_t v32 = *(char **)&v1[v30];
    }
    else
    {
      uint64_t v32 = 0;
    }
    *(void *)&v1[v30] = 0;
    goto LABEL_11;
  }
  uint64_t v72 = v25;
  uint64_t v65 = v18;
  uint64_t v66 = v17;
  uint64_t v67 = v20;
  id v69 = v19;
  uint64_t v71 = v22;
  uint64_t v68 = v21;
  uint64_t v70 = v23;
  uint64_t v27 = (uint64_t)&v1[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_configuration];
  swift_beginAccess();
  outlined init with copy of Toolbar.UpdateContext?(v27, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5))
  {
    outlined destroy of Toolbar.UpdateContext?((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
    goto LABEL_7;
  }
  _s7SwiftUI24SearchFieldConfigurationVWOcTm_0((uint64_t)v12, (uint64_t)v8, type metadata accessor for SearchFieldConfiguration);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v28 = v69;
  id v64 = v69;
  outlined destroy of Toolbar.UpdateContext?((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  type metadata accessor for ToolbarStorage.SearchItem?(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0]();
  _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v8, type metadata accessor for SearchFieldConfiguration);
  char v29 = *v4;
  _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v4, type metadata accessor for SearchFieldState);
  if ((v29 & 1) == 0)
  {
    outlined consume of BoundInputsView?((uint64_t)v16, v65, v66, v67, v28);
    goto LABEL_7;
  }
  uint64_t v33 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryHost;
  unint64_t v34 = *(char **)&v1[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryHost];
  if (v34)
  {
    BOOL v61 = *(char **)&v34[direct field offset for UIHostingController.host];
    id v64 = v34;
    uint64_t v35 = &v61[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v61) + 0x60)];
    swift_beginAccess();
    id v62 = (id)*((void *)v35 + 4);
    uint64_t v63 = *((void *)v35 + 5);
    v60[2] = *((void *)v35 + 7);
    v60[1] = *((void *)v35 + 10);
    long long v36 = v77;
    *((_OWORD *)v35 + 2) = v76;
    *((_OWORD *)v35 + 3) = v36;
    *((_OWORD *)v35 + 4) = v78;
    *((void *)v35 + 10) = v79;
    long long v37 = v75;
    *(_OWORD *)uint64_t v35 = v74;
    *((_OWORD *)v35 + 1) = v37;
    uint64_t v38 = v65;
    uint64_t v39 = v66;
    uint64_t v40 = v67;
    uint64_t v41 = v69;
    outlined copy of BoundInputsView?(v16, v65, v66, v67, v69);
    outlined copy of BoundInputsView?(v16, v38, v39, v40, v41);
    id v64 = v64;
    BOOL v61 = v61;
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    LOWORD(v73) = 1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    uint64_t v42 = v65;
    uint64_t v43 = v66;
    uint64_t v44 = v67;
    outlined consume of BoundInputsView?((uint64_t)v16, v65, v66, v67, v41);
    outlined consume of BoundInputsView?((uint64_t)v16, v42, v43, v44, v69);

    uint64_t v32 = v61;
LABEL_11:

    return;
  }
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  id v46 = objc_allocWithZone(v45);
  id v47 = v64;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v48 = specialized UIHostingController.init(rootView:)((uint64_t)&v74);
  outlined consume of BoundInputsView?((uint64_t)v16, v65, v66, v67, v69);
  uint64_t v49 = *(void **)&v1[v33];
  *(void *)&v1[v33] = v48;
  unint64_t v50 = v48;

  unint64_t v51 = (void *)((char *)v50 + direct field offset for UIHostingController.sizingOptions);
  swift_beginAccess();
  uint64_t v52 = *v51;
  *unint64_t v51 = 1;
  uint64_t v73 = v52;
  (*(void (**)(uint64_t *))((*MEMORY[0x1E4FBC8C8] & *v50) + 0x3B0))(&v73);
  objc_msgSend(v50, sel_setModalPresentationStyle_, 7);
  id v53 = objc_msgSend(v50, sel_popoverPresentationController);
  unint64_t v54 = v53;
  if (v53)
  {
    id v55 = v53;
    id v56 = objc_msgSend(v1, sel_searchBar);
    objc_msgSend(v55, sel_setSourceView_, v56);

    type metadata accessor for Toolbar.UpdateContext?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v57 = swift_allocObject();
    *(_OWORD *)(v57 + 16) = xmmword_188351940;
    id v58 = v55;
    *(void *)(v57 + 32) = objc_msgSend(v1, sel_searchBar);
    uint64_t v73 = v57;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v58, sel_setPassthroughViews_, isa);

    objc_msgSend(v58, sel_setDelegate_, v1);
  }
  objc_msgSend(v1, sel_presentViewController_animated_completion_, v50, 1, 0);
  outlined consume of BoundInputsView?((uint64_t)v16, v65, v66, v67, v69);
}

uint64_t SearchFieldConfigurationReader.MakeContent.state(text:isPresented:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v41 = a6;
  int v46 = a4;
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v43 = a1;
  id v47 = a9;
  v37[1] = a10;
  v37[2] = a11;
  uint64_t v39 = type metadata accessor for SearchFieldState;
  uint64_t v40 = a5;
  id v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v42 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v37 - v15;
  uint64_t v48 = a7;
  uint64_t v49 = a8;
  uint64_t v50 = a10;
  uint64_t v51 = a11;
  uint64_t v17 = type metadata accessor for SearchFieldConfigurationReader();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)v37 - v19;
  uint64_t v38 = type metadata accessor for (SearchFieldState, AttributedString);
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for Binding<(SearchFieldState, AttributedString)>, (uint64_t (*)(uint64_t))type metadata accessor for (SearchFieldState, AttributedString), v13);
  v37[3] = v21;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)v37 - v22;
  type metadata accessor for Binding<((SearchFieldState, AttributedString), Bool)>(0);
  uint64_t v25 = v24 - 8;
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (void *)((char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  SearchFieldConfigurationReader.MakeContent.reader.getter((uint64_t)v20);
  uint64_t v28 = v39;
  _s7SwiftUI24SearchFieldConfigurationV4DataVSgWOcTm_0((uint64_t)v20, (uint64_t)v16, &lazy cache variable for type metadata for Binding<SearchFieldState>, v39, v13);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  type metadata accessor for AttributedString();
  uint64_t v29 = v42;
  Binding.zip<A>(with:)();
  outlined destroy of SearchFieldConfiguration.Data?((uint64_t)v16, &lazy cache variable for type metadata for Binding<SearchFieldState>, v28, v13);
  uint64_t v48 = v44;
  uint64_t v49 = v45;
  LOBYTE(v50) = v46;
  Binding.zip<A>(with:)();
  outlined destroy of SearchFieldConfiguration.Data?((uint64_t)v23, &lazy cache variable for type metadata for Binding<(SearchFieldState, AttributedString)>, (uint64_t (*)(uint64_t))v38, v13);
  uint64_t v30 = (uint64_t)v27 + *(int *)(v25 + 40);
  type metadata accessor for (SearchFieldState, AttributedString)();
  uint64_t v32 = v30 + *(int *)(v31 + 48);
  type metadata accessor for ((SearchFieldState, AttributedString), Bool)(0, (unint64_t *)&lazy cache variable for type metadata for ((SearchFieldState, AttributedString), Bool), (void (*)(uint64_t))type metadata accessor for (SearchFieldState, AttributedString));
  unint64_t v34 = v47;
  SearchStateProjection.get(base:)(v30, v32, *(unsigned __int8 *)(v30 + *(int *)(v33 + 48)), (uint64_t)v47 + *(int *)(v29 + 32));
  lazy protocol witness table accessor for type SearchStateProjection and conformance SearchStateProjection();
  uint64_t v35 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  *unint64_t v34 = *v27;
  v34[1] = v35;
  swift_retain();
  return _s7SwiftUI16SearchFieldStateVWOhTm_5((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for Binding<((SearchFieldState, AttributedString), Bool)>);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance KeyEquivalent()
{
  return Hasher._finalize()();
}

void *type metadata accessor for NSProgress.UIState()
{
  return &unk_1ED4697A8;
}

ValueMetadata *type metadata accessor for NavigationCommonTransformEnvironment()
{
  return &type metadata for NavigationCommonTransformEnvironment;
}

ValueMetadata *type metadata accessor for NavigationColumnEnvironmentTransform()
{
  return &type metadata for NavigationColumnEnvironmentTransform;
}

ValueMetadata *type metadata accessor for UpdateEnvironmentToAllowedBehaviors()
{
  return &type metadata for UpdateEnvironmentToAllowedBehaviors;
}

ValueMetadata *type metadata accessor for HiddenModifierAllowingAccessibility()
{
  return &type metadata for HiddenModifierAllowingAccessibility;
}

ValueMetadata *type metadata accessor for SearchDisabledAdjustmentModifier()
{
  return &type metadata for SearchDisabledAdjustmentModifier;
}

ValueMetadata *type metadata accessor for PositionedNavigationDestination.Storage()
{
  return &type metadata for PositionedNavigationDestination.Storage;
}

ValueMetadata *type metadata accessor for PositionedNavigationDestination.Storage.SeededRequest()
{
  return &type metadata for PositionedNavigationDestination.Storage.SeededRequest;
}

uint64_t partial apply for implicit closure #1 in static NavigationItemAdaptorModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static NavigationItemAdaptorModifier._makeView(modifier:inputs:body:)();
}

ValueMetadata *type metadata accessor for IsSearchImplementedModifier()
{
  return &type metadata for IsSearchImplementedModifier;
}

ValueMetadata *type metadata accessor for ToolbarItemBridgingOptions()
{
  return &type metadata for ToolbarItemBridgingOptions;
}

ValueMetadata *type metadata accessor for LabelPlatformItemListFlags()
{
  return &type metadata for LabelPlatformItemListFlags;
}

ValueMetadata *type metadata accessor for ConditionallyBorderedStyle()
{
  return &type metadata for ConditionallyBorderedStyle;
}

ValueMetadata *type metadata accessor for WidgetBorderedButtonStyle()
{
  return &type metadata for WidgetBorderedButtonStyle;
}

ValueMetadata *type metadata accessor for ScrollIndicatorVisibility.Role()
{
  return &type metadata for ScrollIndicatorVisibility.Role;
}

ValueMetadata *type metadata accessor for IsInHostingConfiguration()
{
  return &type metadata for IsInHostingConfiguration;
}

uint64_t type metadata completion function for NavigationSelectionHost()
{
  return type metadata completion function for NavigationSelectionHost();
}

{
  uint64_t result;
  unint64_t v1;

  id result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    id result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContainerBackgroundKeys.NavigationKey()
{
  return &type metadata for ContainerBackgroundKeys.NavigationKey;
}

ValueMetadata *type metadata accessor for ToolbarDefaultItemKind()
{
  return &type metadata for ToolbarDefaultItemKind;
}

ValueMetadata *type metadata accessor for ScrollIndicatorOptions()
{
  return &type metadata for ScrollIndicatorOptions;
}

ValueMetadata *type metadata accessor for SpringLoadingBehavior.Guts()
{
  return &type metadata for SpringLoadingBehavior.Guts;
}

ValueMetadata *type metadata accessor for SearchTextClearAction()
{
  return &type metadata for SearchTextClearAction;
}

ValueMetadata *type metadata accessor for AccessibilityNodesKey()
{
  return &type metadata for AccessibilityNodesKey;
}

ValueMetadata *type metadata accessor for PlainButtonStyleBase()
{
  return &type metadata for PlainButtonStyleBase;
}

ValueMetadata *type metadata accessor for BorderedButtonSpec()
{
  return &type metadata for BorderedButtonSpec;
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarItemGroup<A>.MakeView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ToolbarItemGroup.MakeView.value.getter(*(void *)(a1 + 16), a2);
}

ValueMetadata *type metadata accessor for DismissAction()
{
  return &type metadata for DismissAction;
}

uint64_t FocusState.init<>()()
{
  return 0;
}

uint64_t View.onHover(perform:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a1;
  v4[1] = a2;
  return MEMORY[0x18C113660](v4, a3, &type metadata for _HoverRegionModifier);
}

uint64_t static SceneBuilder.buildBlock<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t associated type witness table accessor for PubliclyPrimitiveView.InternalBody : View in <> Section<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t implicit closure #4 in static SystemScrollView._makeView(view:inputs:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

unint64_t lazy protocol witness table accessor for type ContentScrollViewProvider and conformance ContentScrollViewProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentScrollViewProvider and conformance ContentScrollViewProvider;
  if (!lazy protocol witness table cache variable for type ContentScrollViewProvider and conformance ContentScrollViewProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentScrollViewProvider and conformance ContentScrollViewProvider);
  }
  return result;
}

void *assignWithCopy for _TaskModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = *(int *)(a3 + 20);
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t AsAnySelection.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  uint64_t v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16);

  return v7(boxed_opaque_existential_1, a1, a2);
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in ProgressViewStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in ToggleStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ProgressView<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

id thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed NSCollectionLayoutEnvironment) -> (@owned NSCollectionLayoutSection?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v6 = (void *)v5(a2, a3);
  swift_release();
  swift_unknownObjectRelease();

  return v6;
}

id partial apply for closure #1 in UICollectionViewListCoordinator.createLayout(_:)(Swift::Int a1, uint64_t a2)
{
  return closure #1 in UICollectionViewListCoordinator.createLayout(_:)(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

id closure #1 in UICollectionViewListCoordinator.createLayout(_:)(Swift::Int a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v52 = a5;
  uint64_t v51 = a4;
  uint64_t v53 = a2;
  Swift::Int v50 = a1;
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v7 = *MEMORY[0x1E4FBC8C8] & *a3;
  uint64_t v44 = type metadata accessor for UICollectionLayoutListConfiguration();
  uint64_t v43 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  id v55 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ShadowSectionCollection();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v41 - v11;
  uint64_t v13 = type metadata accessor for ShadowListDataSource();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v41 - v15;
  uint64_t v17 = (char *)a3 + *(void *)(v7 + 136);
  swift_beginAccess();
  uint64_t v41 = v14;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v17, v13);
  uint64_t v18 = (char *)a3 + *(void *)((*v6 & *a3) + 0x108);
  uint64_t v46 = *v18;
  uint64_t v56 = *((void *)v18 + 1);
  int v49 = v18[16];
  uint64_t v48 = *((void *)v18 + 3);
  int v57 = v18[32];
  uint64_t v19 = *((void *)v18 + 5);
  int v47 = v18[48];
  uint64_t v20 = *((void *)v18 + 7);
  LODWORD(v6) = v18[64];
  uint64_t v42 = v13;
  unint64_t v54 = v16;
  ShadowListDataSource.sectionIDs.getter((uint64_t)v12);
  uint64_t v21 = ShadowSectionCollection.count.getter(v9);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v22 = (uint64_t)v55;
  Swift::Int v23 = v50;
  uint64_t v45 = v21;
  UICollectionViewListCoordinator.interSectionSpacing(offset:numSections:)(v50, v21, v66);
  uint64_t v58 = v51;
  uint64_t v59 = v52;
  uint64_t v24 = a3;
  UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)(v23, (uint64_t)v66, &v58, v22);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSCollectionLayoutSection);
  uint64_t v25 = (void *)static NSCollectionLayoutSection.list(using:layoutEnvironment:)();
  objc_msgSend(v25, sel_setContentInsetsReference_, qword_188391B90[v46]);
  uint64_t v58 = v56;
  char v26 = v49;
  LOBYTE(v59) = v49;
  uint64_t v27 = v48;
  uint64_t v60 = v48;
  char v61 = v57;
  uint64_t v53 = v19;
  uint64_t v62 = v19;
  char v28 = v47;
  char v63 = v47;
  uint64_t v52 = v20;
  uint64_t v64 = v20;
  LODWORD(v51) = v6;
  char v65 = (char)v6;
  OptionalEdgeInsets.leading.getter();
  if ((v29 & 1) == 0)
  {
    objc_msgSend(v25, sel_contentInsets);
    objc_msgSend(v25, sel_setContentInsets_);
  }
  uint64_t v58 = v56;
  LOBYTE(v59) = v26;
  uint64_t v60 = v27;
  char v61 = v57;
  uint64_t v62 = v53;
  char v63 = v28;
  uint64_t v64 = v52;
  char v65 = v51;
  OptionalEdgeInsets.trailing.getter();
  if ((v30 & 1) == 0)
  {
    objc_msgSend(v25, sel_contentInsets);
    objc_msgSend(v25, sel_setContentInsets_);
  }
  uint64_t v31 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v32 = (char *)v24 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v24) + 0x130);
  if (v32[9])
  {
    BOOL v33 = 0;
    if (v23)
    {
LABEL_7:
      outlined init with take of CGFloat?((uint64_t)&v67, (uint64_t)v70);
      *(double *)&id result = COERCE_DOUBLE(outlined init with take of CGFloat?((uint64_t)v70, (uint64_t)&v71));
      if (v72) {
        goto LABEL_17;
      }
      double v35 = v71;
      if ((v66[0] | v33)) {
        double v36 = INFINITY;
      }
      else {
        objc_msgSend(v25, sel_contentInsets);
      }
      if (v36 < v35) {
        double v35 = v36;
      }
      goto LABEL_16;
    }
  }
  else
  {
    BOOL v33 = (v32[8] & 1) == 0;
    if (v23) {
      goto LABEL_7;
    }
  }
  uint64_t v58 = v56;
  LOBYTE(v59) = v26;
  uint64_t v60 = v27;
  char v61 = v57;
  uint64_t v62 = v53;
  char v63 = v28;
  uint64_t v64 = v52;
  char v65 = v51;
  *(double *)&id result = COERCE_DOUBLE(OptionalEdgeInsets.top.getter());
  if (v37) {
    goto LABEL_17;
  }
  double v35 = *(double *)&result;
LABEL_16:
  objc_msgSend(v25, sel_contentInsets);
  *(double *)&id result = COERCE_DOUBLE(objc_msgSend(v25, sel_setContentInsets_, v35));
LABEL_17:
  if (__OFSUB__(v45, 1))
  {
    __break(1u);
    return result;
  }
  if (v45 - 1 == v23)
  {
    uint64_t v58 = v56;
    LOBYTE(v59) = v26;
    uint64_t v60 = v27;
    char v61 = v57;
    uint64_t v62 = v53;
    char v63 = v28;
    uint64_t v64 = v52;
    char v65 = v51;
    OptionalEdgeInsets.bottom.getter();
    if ((v38 & 1) == 0)
    {
LABEL_24:
      objc_msgSend(v25, sel_contentInsets);
      objc_msgSend(v25, sel_setContentInsets_);
    }
  }
  else
  {
    outlined init with take of CGFloat?((uint64_t)&v68, (uint64_t)v69);
    outlined init with take of CGFloat?((uint64_t)v69, (uint64_t)&v58);
    if ((v59 & 1) == 0)
    {
      if (((v66[0] | v33) & 1) == 0) {
        objc_msgSend(v25, sel_contentInsets);
      }
      goto LABEL_24;
    }
  }
  uint64_t v39 = v42;
  if (ShadowListDataSource.hasGlobalHeader.getter(v42))
  {
    objc_msgSend(v25, sel_contentInsets);
    objc_msgSend(v25, sel_setContentInsets_, 0.0);
    objc_msgSend(v25, sel_contentInsets);
    objc_msgSend(v25, sel_setContentInsets_);
  }
  uint64_t v40 = (double *)((char *)v24 + *(void *)((*v31 & *v24) + 0x138));
  if (((_BYTE)v40[1] & 1) == 0) {
    objc_msgSend(v25, sel_setInterGroupSpacing_, *v40);
  }
  (*(void (**)(char *, uint64_t))(v43 + 8))(v55, v44);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v54, v39);
  return v25;
}

uint64_t outlined init with take of CGFloat?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TableHeaderView?(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E4FBC958], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for TableHeaderView?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t protocol witness for PlatformViewFactory.makePlatformView() in conformance ViewLeafView<A>(uint64_t a1)
{
  ShadowSectionCollection.count.getter(a1);

  return swift_unknownObjectRetain();
}

uint64_t ShadowSectionCollection.count.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t UICollectionViewListCoordinator.interSectionSpacing(offset:numSections:)@<X0>(Swift::Int a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v85 = a2;
  Swift::Int v89 = a1;
  uint64_t v82 = a3;
  uint64_t v83 = type metadata accessor for ShadowListDataSource();
  uint64_t v88 = *(void *)(v83 - 8);
  MEMORY[0x1F4188790](v83);
  uint64_t v87 = &v71[-v5];
  uint64_t v6 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v71[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = &v71[-v11];
  UICollectionViewListCoordinator.listAppearance.getter();
  uint64_t v13 = *(void (**)(unsigned char *, void, uint64_t))(v7 + 104);
  v13(v9, *MEMORY[0x1E4FB10D8], v6);
  char v14 = static UICollectionLayoutListConfiguration.Appearance.== infix(_:_:)();
  uint64_t v15 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  v15(v12, v6);
  uint64_t v16 = v89;
  uint64_t v86 = v6;
  long long v77 = v13;
  long long v76 = (uint64_t (*)(unsigned char *, uint64_t))v15;
  uint64_t v75 = v7 + 8;
  uint64_t v74 = v7 + 104;
  if ((v14 & 1) == 0)
  {
    UICollectionViewListCoordinator.listAppearance.getter();
    v13(v9, *MEMORY[0x1E4FB10C0], v6);
    char v17 = static UICollectionLayoutListConfiguration.Appearance.== infix(_:_:)();
    v15(v9, v6);
    v15(v12, v6);
    uint64_t v16 = v89;
    if ((v17 & 1) == 0)
    {
      uint64_t v26 = v89;
      UICollectionViewListCoordinator.listAppearance.getter();
      v13(v9, *MEMORY[0x1E4FB10E0], v6);
      int v84 = static UICollectionLayoutListConfiguration.Appearance.== infix(_:_:)();
      v15(v9, v6);
      v15(v12, v6);
      Swift::Int v18 = v26;
      if (v26 >= 1) {
        goto LABEL_4;
      }
LABEL_6:
      BOOL v24 = 0;
      uint64_t v22 = v87;
      uint64_t v20 = v88;
      uint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
      uint64_t v19 = v83;
      goto LABEL_7;
    }
  }
  int v84 = 1;
  Swift::Int v18 = v16;
  if (v16 <= 0) {
    goto LABEL_6;
  }
LABEL_4:
  uint64_t v19 = v83;
  uint64_t v20 = v88;
  uint64_t v21 = (char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x88);
  swift_beginAccess();
  uint64_t v22 = v87;
  (*(void (**)(unsigned char *, char *, uint64_t))(v20 + 16))(v87, v21, v19);
  swift_getWitnessTable();
  BOOL v23 = ListDiffable.hasFooter(forSectionAtOffset:)(v18 - 1);
  Swift::Int v18 = v89;
  BOOL v24 = v23;
  (*(void (**)(unsigned char *, uint64_t))(v20 + 8))(v22, v19);
  uint64_t v25 = (void *)MEMORY[0x1E4FBC8C8];
LABEL_7:
  uint64_t v27 = (char *)v4 + *(void *)((*v25 & *v4) + 0x88);
  swift_beginAccess();
  int v80 = *(void (**)(unsigned char *, char *, uint64_t))(v20 + 16);
  uint64_t v81 = v20 + 16;
  v80(v22, v27, v19);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v28 = v18;
  BOOL v29 = ListDiffable.hasHeader(forSectionAtOffset:)(v18);
  char v30 = *(uint64_t (**)(unsigned char *, uint64_t))(v20 + 8);
  uint64_t v88 = v20 + 8;
  long long v78 = v30;
  v30(v22, v19);
  char v31 = v84;
  LODWORD(v83) = v84 | v24 | v29;
  *(double *)&uint64_t result = COERCE_DOUBLE(spacingValue #1 <A, B>(offset:) in UICollectionViewListCoordinator.interSectionSpacing(offset:numSections:)(v28, v4));
  double v34 = *(double *)&result;
  BOOL v35 = v33;
  uint64_t v36 = v28 - 1;
  uint64_t v37 = v86;
  if (v28 < 1) {
    goto LABEL_25;
  }
  if (v33)
  {
    uint64_t v38 = v28 - 1;
    double v39 = v34;
    uint64_t v40 = v27;
    uint64_t v41 = v19;
    char v42 = v31;
    BOOL v43 = v24;
    BOOL v24 = v33;
    *(double *)&uint64_t result = COERCE_DOUBLE(spacingValue #1 <A, B>(offset:) in UICollectionViewListCoordinator.interSectionSpacing(offset:numSections:)(v38, v4));
    BOOL v35 = v24;
    LOBYTE(v24) = v43;
    char v31 = v42;
    uint64_t v19 = v41;
    uint64_t v27 = v40;
    uint64_t v37 = v86;
    double v34 = v39;
    if (v44) {
      goto LABEL_25;
    }
  }
  double v45 = 0.0;
  if (v83)
  {
    double v45 = *(double *)&result;
    if (v31)
    {
      if (v24) {
        double v45 = *(double *)&result + *(double *)&result;
      }
    }
    else if (v24)
    {
      uint64_t v46 = v36;
      double v47 = v34;
      BOOL v48 = v35;
      double v49 = COERCE_DOUBLE(spacingValue #1 <A, B>(offset:) in UICollectionViewListCoordinator.interSectionSpacing(offset:numSections:)(v46, v4));
      BOOL v35 = v48;
      double v34 = v47;
      double v50 = v49 * 0.5;
      if (v51) {
        double v50 = 0.0;
      }
      double v45 = v50 + v45;
    }
  }
  BOOL v72 = v35;
  double v73 = v34;
  uint64_t v52 = v87;
  v80(v87, v27, v19);
  Swift::Bool v53 = ListDiffable.hasHeader(forSectionAtOffset:)(v89);
  *(double *)&uint64_t result = COERCE_DOUBLE(v78(v52, v19));
  if (v53)
  {
    UICollectionViewListCoordinator.listAppearance.getter();
    v77(v9, *MEMORY[0x1E4FB10D0], v37);
    char v54 = static UICollectionLayoutListConfiguration.Appearance.== infix(_:_:)();
    id v55 = v76;
    v76(v9, v37);
    *(double *)&uint64_t result = COERCE_DOUBLE(v55(v12, v37));
    double v34 = v73;
    LOBYTE(v35) = v72;
    if ((v54 & 1) != 0
      || (uint64_t v56 = (char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x130), (v56[9] & 1) == 0)
      && (v56[8] & 1) == 0)
    {
      char v57 = 0;
      double v58 = v45 * 0.5;
      char v59 = 1;
      double v60 = 0.0;
      uint64_t v61 = v85;
      if (v85 > 0)
      {
        char v62 = 1;
        char v63 = 1;
LABEL_27:
        Swift::Int v64 = v89;
        char v65 = v87;
        goto LABEL_30;
      }
      double v69 = 0.0;
      char v63 = 1;
      goto LABEL_43;
    }
LABEL_25:
    char v63 = 0;
    char v59 = 1;
    double v58 = 0.0;
    uint64_t v61 = v85;
    if (v85 >= 1)
    {
      char v57 = 1;
      double v60 = 0.0;
      char v62 = 1;
      goto LABEL_27;
    }
    double v69 = 0.0;
    char v57 = 1;
    double v60 = 0.0;
LABEL_43:
    char v62 = 1;
    goto LABEL_44;
  }
  char v62 = 0;
  double v60 = v45 * 0.5;
  char v59 = 1;
  double v58 = 0.0;
  uint64_t v61 = v85;
  if (v85 <= 0)
  {
    double v69 = 0.0;
    char v63 = 1;
    char v57 = 1;
    goto LABEL_44;
  }
  char v57 = 1;
  char v63 = 1;
  Swift::Int v64 = v89;
  char v65 = v87;
  double v34 = v73;
  LOBYTE(v35) = v72;
LABEL_30:
  if (v61 - 1 <= v64) {
    goto LABEL_36;
  }
  if (v35)
  {
    *(double *)&uint64_t result = COERCE_DOUBLE(spacingValue #1 <A, B>(offset:) in UICollectionViewListCoordinator.interSectionSpacing(offset:numSections:)(v64 + 1, v4));
    if ((v66 & 1) == 0)
    {
      double v34 = *(double *)&result;
      goto LABEL_34;
    }
LABEL_36:
    double v69 = 0.0;
    char v59 = 1;
    goto LABEL_44;
  }
LABEL_34:
  if (v31)
  {
    double v67 = v34;
    v80(v65, v27, v19);
    Swift::Bool v68 = ListDiffable.hasFooter(forSectionAtOffset:)(v64);
    *(double *)&uint64_t result = COERCE_DOUBLE(v78(v65, v19));
    double v34 = v67;
    if (v68) {
      goto LABEL_36;
    }
  }
  char v59 = 0;
  double v69 = v34 * 0.5;
  if ((v83 & 1) == 0) {
    double v69 = 0.0;
  }
  char v63 = 1;
LABEL_44:
  uint64_t v70 = v82;
  *uint64_t v82 = v63;
  *((double *)v70 + 1) = v60;
  v70[16] = v62;
  *((double *)v70 + 3) = v69;
  v70[32] = v59;
  *((double *)v70 + 5) = v58;
  v70[48] = v57;
  return result;
}

uint64_t spacingValue #1 <A, B>(offset:) in UICollectionViewListCoordinator.interSectionSpacing(offset:numSections:)(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = *MEMORY[0x1E4FBC8C8] & *a2;
  uint64_t v6 = type metadata accessor for ShadowListDataSource();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v14 - v8;
  uint64_t v10 = (char *)a2 + *(void *)(v5 + 136);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v10, v6);
  uint64_t WitnessTable = swift_getWitnessTable();
  ListCoreDataSource.spacing(forSectionAtOffset:)(a1, v6, WitnessTable);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((v17 & 1) == 0)
  {
    uint64_t result = v15;
    if ((v16 & 1) == 0) {
      return result;
    }
    if (v15) {
      return 0x4028000000000000;
    }
  }
  uint64_t v12 = (char *)a2 + *(void *)((*v4 & *a2) + 0x130);
  if (v12[9]) {
    return 0;
  }
  uint64_t result = *(void *)v12;
  if (v12[8])
  {
    if (result) {
      return 0x4028000000000000;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t ListCoreDataSource.spacing(forSectionAtOffset:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v12 - v9;
  ListDiffable.sectionIndex(atOffset:)(a1, a2, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 104))(v10, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
}

uint64_t ShadowListDataSource.spacing(forSectionAt:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v18[1] = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)v18 - v9;
  uint64_t v11 = *(void *)(v5 - 8);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v15, v3, v5, v13);
  uint64_t updated = type metadata accessor for ShadowListUpdateRecorder();
  ShadowListUpdateRecorder.initialIndex(_:)(a1, updated, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 104))(v10, v5, v6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, v5);
}

unint64_t protocol witness for ListCoreDataSource.spacing(forSectionAt:) in conformance CollectionViewListDataSource<A>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return CollectionViewListDataSource.spacing(forSectionAt:)(*a1, a2);
}

unint64_t CollectionViewListDataSource.spacing(forSectionAt:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v4 = *(void *)(v2 + 56);
  if (*(void *)(v4 + 16) <= result)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  outlined init with copy of SectionAccumulator.Item(v4 + 136 * result + 32, (uint64_t)v5);
  if (v6)
  {
    ViewTraitCollection.effectiveListSectionSpacing.getter(a2);
  }
  else
  {
    *(void *)a2 = 0;
    *(_WORD *)(a2 + 8) = 256;
  }
  return outlined destroy of SectionAccumulator.Item((uint64_t)v5);
}

uint64_t ViewTraitCollection.effectiveListSectionSpacing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7 = *v1;
  uint64_t result = ViewTraitCollection.value<A>(for:defaultValue:)();
  if (v10)
  {
    uint64_t result = ViewTraitCollection.value<A>(for:defaultValue:)();
    uint64_t v4 = v7;
    char v5 = v7 ^ 1;
    char v6 = v7;
  }
  else
  {
    char v5 = 0;
    char v6 = v9;
    uint64_t v4 = v8;
  }
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 9) = v5;
  return result;
}

Swift::Bool __swiftcall ListDiffable.hasHeader(forSectionAtOffset:)(Swift::Int forSectionAtOffset)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v9 = (char *)&v11 - v8;
  ListDiffable.sectionIndex(atOffset:)(forSectionAtOffset, v4, v3);
  LOBYTE(v3) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 64))(v9, v4, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  return v3 & 1;
}

void UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v115 = a4;
  uint64_t v116 = a3;
  uint64_t v133 = a2;
  char v128 = a1;
  uint64_t v110 = (void *)(*MEMORY[0x1E4FBC8C8] & *v4);
  char v5 = v110;
  uint64_t v101 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v100 = *(void *)(v101 - 8);
  MEMORY[0x1F4188790](v101);
  long long v98 = &v92[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v99 = type metadata accessor for DispatchQoS();
  uint64_t v97 = *(void *)(v99 - 8);
  MEMORY[0x1F4188790](v99);
  uint64_t v96 = &v92[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v114 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v125 = *(void *)(v114 - 8);
  MEMORY[0x1F4188790](v114);
  uint64_t v113 = &v92[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v9);
  uint64_t v112 = &v92[-v10];
  uint64_t v131 = v5;
  uint64_t v126 = v5[94];
  uint64_t v11 = *(void *)(v126 + 8);
  uint64_t v12 = *(void *)(v11 + 8);
  uint64_t v13 = v5[92];
  swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v108 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v106 = &v92[-v15];
  uint64_t v16 = swift_checkMetadataState();
  uint64_t v104 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v103 = &v92[-v17];
  uint64_t v130 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v124 = &v92[-v19];
  uint64_t v105 = v12;
  uint64_t v20 = type metadata accessor for ShadowSectionCollection();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v123 = (void *)type metadata accessor for DefaultIndices();
  uint64_t v122 = (unsigned char *)*(v123 - 1);
  MEMORY[0x1F4188790](v123);
  uint64_t v121 = &v92[-v21];
  uint64_t v118 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v117 = &v92[-v23];
  uint64_t v107 = v14;
  BOOL v24 = v4;
  uint64_t v127 = swift_getAssociatedTypeWitness();
  uint64_t v25 = type metadata accessor for Optional();
  uint64_t v129 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = &v92[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v28);
  uint64_t v119 = &v92[-v29];
  uint64_t v132 = v13;
  uint64_t v30 = v11;
  uint64_t v31 = type metadata accessor for ShadowListDataSource();
  uint64_t v32 = *(void *)(v31 - 8);
  double v33 = MEMORY[0x1F4188790](v31);
  BOOL v35 = &v92[-v34];
  if ((*((unsigned char *)v4 + v131[24]) & 1) == 0)
  {
    id v94 = v27;
    uint64_t v95 = v16;
    uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, double))(v30 + 72);
    uint64_t v102 = v25;
    int v37 = v36(v132, v30, v33);
    uint64_t v38 = (char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x88);
    swift_beginAccess();
    double v39 = *(void (**)(unsigned char *, char *, uint64_t))(v32 + 16);
    v39(v35, v38, v31);
    int v40 = ShadowListDataSource.hasGlobalHeader.getter(v31);
    uint64_t v131 = v24;
    uint64_t v41 = *(void (**)(unsigned char *, uint64_t))(v32 + 8);
    v41(v35, v31);
    int v93 = v37;
    int v111 = v37 ^ v40;
    v39(v35, v38, v31);
    char v42 = v117;
    ShadowListDataSource.sectionIDs.getter((uint64_t)v117);
    v41(v35, v31);
    uint64_t v43 = v132;
    char v44 = v121;
    Collection<>.indices.getter();
    uint64_t v45 = (*(uint64_t (**)(unsigned char *, uint64_t))(v118 + 8))(v42, v20);
    MEMORY[0x1F4188790](v45);
    *(void *)&v92[-16] = v131;
    uint64_t v46 = v123;
    swift_getWitnessTable();
    double v47 = v119;
    Sequence.first(where:)();
    uint64_t v48 = v102;
    (*((void (**)(unsigned char *, void *))v122 + 1))(v44, v46);
    double v49 = *(void **)(*(void *)(v127 - 8) + 48);
    uint64_t v50 = *(void *)(v127 - 8) + 48;
    LODWORD(v42) = ((uint64_t (*)(unsigned char *, uint64_t))v49)(v47, 1);
    uint64_t v51 = v129 + 8;
    uint64_t v52 = *(void (**)(unsigned char *, uint64_t))(v129 + 8);
    v52(v47, v48);
    Swift::Bool v53 = v124;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v130 + 16))(v124, v133, v43);
    if (v42 == 1)
    {
      char v54 = v103;
      (*(void (**)(uint64_t))(v105 + 56))(v43);
      id v55 = v106;
      uint64_t v129 = v51;
      uint64_t v56 = v95;
      uint64_t v123 = v49;
      uint64_t v57 = v43;
      dispatch thunk of Collection.indices.getter();
      uint64_t v58 = (*(uint64_t (**)(unsigned char *, uint64_t))(v104 + 8))(v54, v56);
      uint64_t v122 = v92;
      MEMORY[0x1F4188790](v58);
      char v59 = v110;
      uint64_t v60 = v110[93];
      *(void *)&v92[-48] = v43;
      *(void *)&v92[-40] = v60;
      uint64_t v61 = v59[95];
      uint64_t v121 = (unsigned char *)v50;
      uint64_t v62 = v126;
      *(void *)&v92[-32] = v126;
      *(void *)&v92[-24] = v61;
      *(void *)&v92[-16] = v53;
      uint64_t v63 = AssociatedTypeWitness;
      swift_getAssociatedConformanceWitness();
      Swift::Int v64 = v94;
      Sequence.first(where:)();
      (*(void (**)(unsigned char *, uint64_t))(v108 + 8))(v55, v63);
      LODWORD(v54) = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v123)(v64, 1, v127) != 1;
      v52(v64, v102);
      uint64_t v65 = v57;
      (*(void (**)(unsigned char *, uint64_t))(v130 + 8))(v53, v57);
      v111 |= v54;
    }
    else
    {
      uint64_t v65 = v43;
      (*(void (**)(unsigned char *, uint64_t))(v130 + 8))(v53, v43);
      uint64_t v62 = v126;
    }
    uint64_t v66 = v116;
    uint64_t v67 = v133;
    char v68 = v115;
    uint64_t v69 = v114;
    uint64_t v70 = v113;
    double v71 = v112;
    UICollectionViewListCoordinator.listAppearance.getter();
    (*(void (**)(uint64_t, uint64_t))(v62 + 16))(v65, v62);
    _s7SwiftUI14_UIHostingViewCyAA15ModifiedContentVyAA08TableRowD0VAA010CollectionD12CellModifierVGGACyxGAA0D12RendererHostAAWlTm_0(&lazy protocol witness table cache variable for type UICollectionLayoutListConfiguration.Appearance and conformance UICollectionLayoutListConfiguration.Appearance, MEMORY[0x1E4FB10E8]);
    char v72 = dispatch thunk of static Equatable.== infix(_:_:)();
    double v73 = v70;
    LOBYTE(v70) = v72;
    uint64_t v74 = *(void (**)(unsigned char *, uint64_t))(v125 + 8);
    v74(v73, v69);
    v74(v71, v69);
    UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(v128, v67, v66, v68 & 1);
    char v75 = v111;
    if (v70 & 1) == 0 || (v111)
    {
      id v76 = objc_msgSend(v128, sel_collectionViewLayout);
      objc_msgSend(v76, sel_invalidateLayout);

      if (v75)
      {
        long long v77 = v128;
        id v78 = objc_msgSend(v128, sel_collectionViewLayout);
        self;
        uint64_t v79 = (void *)swift_dynamicCastObjCClassUnconditional();
        char v80 = v93 & 1;
        id v81 = UICollectionViewListCoordinator.layoutConfiguration(hasGlobalHeader:)(v93 & 1);
        objc_msgSend(v79, sel_setConfiguration_, v81);

        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
        uint64_t v82 = (void *)static OS_dispatch_queue.main.getter();
        uint64_t v83 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v84 = swift_allocObject();
        *(void *)(v84 + 16) = v132;
        uint64_t v85 = v110;
        uint64_t v86 = v126;
        *(void *)(v84 + 24) = v110[93];
        *(void *)(v84 + 32) = v86;
        *(void *)(v84 + 40) = v85[95];
        *(void *)(v84 + 48) = v83;
        *(void *)(v84 + 56) = v77;
        *(unsigned char *)(v84 + 64) = v80;
        aBlock[4] = partial apply for closure #3 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:);
        aBlock[5] = v84;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
        aBlock[3] = &block_descriptor_38;
        uint64_t v87 = _Block_copy(aBlock);
        id v88 = v77;
        swift_release();
        Swift::Int v89 = v96;
        static DispatchQoS.unspecified.getter();
        aBlock[0] = MEMORY[0x1E4FBC860];
        _s7SwiftUI14_UIHostingViewCyAA15ModifiedContentVyAA08TableRowD0VAA010CollectionD12CellModifierVGGACyxGAA0D12RendererHostAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
        _s5UIKit25UIBackgroundConfigurationVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E4FBCB00], MEMORY[0x1E4FBB320]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
        uint64_t v90 = v98;
        uint64_t v91 = v101;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        MEMORY[0x18C116870](0, v89, v90, v87);
        _Block_release(v87);

        (*(void (**)(unsigned char *, uint64_t))(v100 + 8))(v90, v91);
        (*(void (**)(unsigned char *, uint64_t))(v97 + 8))(v89, v99);
      }
    }
  }
}

uint64_t ShadowListDataSource.hasGlobalHeader.getter(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v3 + 16))(v5);
  LOBYTE(v1) = (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 24) + 72))(v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v1 & 1;
}

uint64_t EnvironmentValues.toolbarItemIsHidden.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for _PreferenceWritingModifier<ToolbarItemViewHiddenKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarItemIsHiddenKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarItemIsHiddenKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for _PreferenceWritingModifier<ToolbarItemViewHiddenKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarItemIsHiddenKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarItemIsHiddenKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<ToolbarItemViewHiddenKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarItemIsHiddenKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarItemIsHiddenKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in DefaultButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for AccessibilityActionStorage<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

id protocol witness for static UserDefaultKeyedFeature.defaults.getter in conformance EnableKeyboardTrackingElement()
{
  if (one-time initialization token for defaults != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static EnableKeyboardTrackingElement.defaults;

  return v0;
}

unsigned char *storeEnumTagSinglePayload for WindowToolbarFullScreenVisibility(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ToolbarBackgroundVisibility(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ToolbarLegibility(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TabBarPlacement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t assignWithCopy for SystemScrollViewContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  unsigned int v6 = (_OWORD *)(a1 + 48);
  uint64_t v8 = (_OWORD *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v7)
    {
      uint64_t v9 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v7;
      *(void *)(a1 + 56) = v9;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    outlined destroy of ScrollToTopGestureAction(a1 + 48);
  }
  else if (v7)
  {
    uint64_t v10 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v10;
    swift_retain();
    goto LABEL_8;
  }
  *unsigned int v6 = *v8;
LABEL_8:
  swift_unknownObjectWeakCopyAssign();
  uint64_t v12 = (_OWORD *)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v14 = (_OWORD *)(a2 + 80);
  uint64_t v13 = *(void *)(a2 + 80);
  if (v11)
  {
    if (v13)
    {
      uint64_t v15 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v13;
      *(void *)(a1 + 88) = v15;
      swift_retain();
      swift_release();
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
    }
    else
    {
      outlined destroy of RefreshAction(a1 + 80);
      uint64_t v17 = *(void *)(a2 + 96);
      *uint64_t v12 = *v14;
      *(void *)(a1 + 96) = v17;
    }
  }
  else if (v13)
  {
    uint64_t v16 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v13;
    *(void *)(a1 + 88) = v16;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    swift_retain();
  }
  else
  {
    long long v18 = *v14;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *uint64_t v12 = v18;
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v19 + 24))((*(unsigned __int8 *)(v19 + 80) + 120 + a1) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), (*(unsigned __int8 *)(v19 + 80) + 120 + a2) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  return a1;
}

uint64_t type metadata completion function for _ContentShapeModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t key path getter for ContainerValues.labelItemRole : ContainerValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ContainerValues.subscript.getter();
  *a1 = v3;
  return result;
}

void @objc PlatformViewHost.removeFromSuperview()(void *a1)
{
  id v1 = a1;
  PlatformViewHost.removeFromSuperview()();
}

Swift::Void __swiftcall PlatformViewHost.removeFromSuperview()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  unsigned __int8 v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *(void *)v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v5 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t, double))(v7 + 16))((char *)&v15 - v6, &v0[*(void *)(v3 + 120)], AssociatedTypeWitness, v5);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  if (swift_dynamicCast())
  {
    id v8 = v18;
    objc_msgSend(v18, sel_willMoveToParentViewController_, 0);
    id v9 = objc_msgSend(v8, sel_view);
    if (v9)
    {
      uint64_t v10 = v9;
      objc_msgSend(v9, sel_removeFromSuperview);

      v16.receiver = v0;
      v16.super_class = ObjectType;
      objc_msgSendSuper2(&v16, sel_removeFromSuperview);
      objc_msgSend(v8, sel_removeFromParentViewController);
      uint64_t v11 = &v0[*(void *)((*v2 & *(void *)v0) + 0x80)];
      if (MEMORY[0x18C119DF0](v11))
      {
        uint64_t v12 = *((void *)v11 + 1);
        uint64_t v13 = swift_getObjectType();
        uint64_t v14 = (void *)ViewRendererHost.uiViewController.getter(v13, v12);
        swift_unknownObjectRelease();
        if (v14)
        {
          objc_msgSend(v14, sel__noWarn_setOverrideTraitCollection_forChild_, 0, v8);
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v17.receiver = v0;
    v17.super_class = ObjectType;
    objc_msgSendSuper2(&v17, sel_removeFromSuperview);
  }
}

__n128 initializeWithTake for PositionedNavigationDestinationProcessor(__n128 *a1, __n128 *a2)
{
  unsigned __int8 v2 = (__n128 *)&a2->n128_i8[8];
  if (a2->n128_u64[1] == 1)
  {
    __n128 result = *a2;
    *a1 = *a2;
    a1[1].n128_u64[0] = a2[1].n128_u64[0];
  }
  else
  {
    uint64_t v4 = swift_weakTakeInit();
    __n128 result = *v2;
    *(__n128 *)(v4 + 8) = *v2;
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PrimitiveButtonStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ButtonStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityVoidAction(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t static UITraitBridgedEnvironmentResolver.write<A>(for:to:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t v7 = result;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return static UITraitBridgedEnvironmentResolver.write<A, B>(bridgedKey:to:value:)(a1, a2, a3, a1, AssociatedTypeWitness, v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AttributedString.transformingUIKitAttributedForSwiftUI()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v338 = a1;
  type metadata accessor for AttributedString.AdaptiveImageGlyph?(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x1E4F24330]);
  MEMORY[0x1F4188790](v1 - 8);
  v281 = (char *)&v275 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  v288 = (char *)&v275 - v4;
  MEMORY[0x1F4188790](v5);
  v314 = (char *)&v275 - v6;
  uint64_t v339 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  unint64_t v352 = *(void *)(v339 - 8);
  MEMORY[0x1F4188790](v339);
  v334 = (char *)&v275 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v337 = v8;
  MEMORY[0x1F4188790](v8);
  v336 = (char *)&v275 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4F27658];
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for ScopedAttributeContainer<AttributeScopes.SwiftUIAttributes>, MEMORY[0x1E4F3F288], lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes, MEMORY[0x1E4F27658]);
  uint64_t v345 = v11;
  v350 = *(char **)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  v287 = (char *)&v275 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  v343 = (char *)&v275 - v14;
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for ScopedAttributeContainer<AttributeScopes.UIKitAttributes>, MEMORY[0x1E4FB0D88], lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes and conformance AttributeScopes.UIKitAttributes, v10);
  uint64_t v340 = v15;
  uint64_t v347 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  v313 = (char *)&v275 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  v312 = (char *)&v275 - v18;
  MEMORY[0x1F4188790](v19);
  v280 = (char *)&v275 - v20;
  MEMORY[0x1F4188790](v21);
  v311 = (char *)&v275 - v22;
  MEMORY[0x1F4188790](v23);
  v279 = (char *)&v275 - v24;
  MEMORY[0x1F4188790](v25);
  v310 = (char *)&v275 - v26;
  MEMORY[0x1F4188790](v27);
  v309 = (char *)&v275 - v28;
  MEMORY[0x1F4188790](v29);
  v308 = (char *)&v275 - v30;
  MEMORY[0x1F4188790](v31);
  v307 = (char *)&v275 - v32;
  MEMORY[0x1F4188790](v33);
  v306 = (char *)&v275 - v34;
  MEMORY[0x1F4188790](v35);
  v305 = (char *)&v275 - v36;
  MEMORY[0x1F4188790](v37);
  v304 = (char *)&v275 - v38;
  uint64_t v341 = type metadata accessor for AttributeContainer();
  v349 = *(void (***)(char *, uint64_t))(v341 - 8);
  MEMORY[0x1F4188790](v341);
  v286 = (char *)&v275 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v40);
  v303 = (char *)&v275 - v41;
  MEMORY[0x1F4188790](v42);
  v302 = (char *)&v275 - v43;
  MEMORY[0x1F4188790](v44);
  v278 = (char *)&v275 - v45;
  MEMORY[0x1F4188790](v46);
  v301 = (char *)&v275 - v47;
  MEMORY[0x1F4188790](v48);
  v277 = (char *)&v275 - v49;
  MEMORY[0x1F4188790](v50);
  v300 = (char *)&v275 - v51;
  MEMORY[0x1F4188790](v52);
  v299 = (char *)&v275 - v53;
  MEMORY[0x1F4188790](v54);
  v298 = (char *)&v275 - v55;
  MEMORY[0x1F4188790](v56);
  v297 = (char *)&v275 - v57;
  MEMORY[0x1F4188790](v58);
  v296 = (char *)&v275 - v59;
  MEMORY[0x1F4188790](v60);
  v295 = (char *)&v275 - v61;
  MEMORY[0x1F4188790](v62);
  v342 = (char *)&v275 - v63;
  MEMORY[0x1F4188790](v64);
  v294 = (char *)&v275 - v65;
  uint64_t v335 = type metadata accessor for AttributedString.Runs.Run();
  v346 = *(char **)(v335 - 8);
  MEMORY[0x1F4188790](v335 - 8);
  v348 = (char *)&v275 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributedString.AdaptiveImageGlyph?(0, &lazy cache variable for type metadata for AttributedString.Runs.Run?, MEMORY[0x1E4F27350]);
  MEMORY[0x1F4188790](v67 - 8);
  v329 = (char *)&v275 - v68;
  uint64_t v331 = type metadata accessor for AttributedString.Runs.Index();
  uint64_t v333 = *(void *)(v331 - 8);
  MEMORY[0x1F4188790](v331);
  v328 = (char *)&v275 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v70);
  v330 = (char *)&v275 - v71;
  uint64_t v323 = type metadata accessor for AttributedString.Runs();
  uint64_t v72 = *(void *)(v323 - 8);
  MEMORY[0x1F4188790](v323);
  uint64_t v74 = (char *)&v275 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for AttributedString();
  uint64_t v76 = *(void *)(v75 - 8);
  MEMORY[0x1F4188790](v75);
  id v78 = (char *)&v275 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  uint64_t v80 = v79 - 8;
  MEMORY[0x1F4188790](v79);
  uint64_t v82 = (char *)&v275 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v84 = MEMORY[0x1F4188790](v83);
  uint64_t v322 = (uint64_t)&v275 - v85;
  uint64_t v86 = *(void (**)(uint64_t, char **, uint64_t, double))(v76 + 16);
  uint64_t v87 = v338;
  v86(v338, v351, v75, v84);
  ((void (*)(char *, uint64_t, uint64_t))v86)(v78, v87, v75);
  uint64_t v88 = v323;
  AttributedString.runs.getter();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v78, v75);
  Swift::Int v89 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
  uint64_t v319 = v72 + 16;
  v318 = v89;
  v89(v82, (uint64_t)v74, v88);
  uint64_t v90 = lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs();
  uint64_t v91 = v330;
  uint64_t v327 = v90;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v92 = *(void (**)(char *, uint64_t))(v72 + 8);
  v320 = v74;
  uint64_t v321 = v72 + 8;
  v317 = v92;
  v92(v74, v88);
  uint64_t v93 = v333;
  (*(void (**)(char *, char *, uint64_t))(v333 + 32))(&v82[*(int *)(v80 + 44)], v91, v331);
  uint64_t v94 = v322;
  outlined init with take of IndexingIterator<AttributedString.Runs>((uint64_t)v82, v322);
  uint64_t v95 = v94 + *(int *)(v80 + 44);
  v325 = *(void (**)(char *, uint64_t, uint64_t))(v93 + 16);
  uint64_t v333 = v93 + 16;
  v324 = (void (**)(char *, uint64_t))(v93 + 8);
  v316 = (void (**)(char *))(v346 + 16);
  v326 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v346 + 56);
  v315 = (unsigned int (**)(char *, uint64_t, uint64_t))(v346 + 48);
  v292 = (void (**)(void))(v346 + 32);
  ++v349;
  v351 = (char **)(v347 + 8);
  v344 = (void (**)(char *, uint64_t))(v350 + 8);
  v290 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v352 + 48);
  v285 = (void (**)(char *, uint64_t, uint64_t))(v352 + 32);
  v284 = (void (**)(char *, uint64_t))(v352 + 8);
  v291 = (void (**)(char *, uint64_t))(v346 + 8);
  v276 = (void (**)(char *, char *, uint64_t))(v352 + 16);
  v275 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v352 + 56);
  for (i = v95; ; uint64_t v95 = i)
  {
    uint64_t v96 = v330;
    uint64_t v97 = v331;
    v325(v330, v95, v331);
    long long v98 = v328;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, MEMORY[0x1E4F27358]);
    char v99 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v100 = *v324;
    (*v324)(v98, v97);
    v100(v96, v97);
    if (v99) {
      break;
    }
    uint64_t v101 = (void (*)(id *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v102 = v329;
    uint64_t v103 = v335;
    (*v316)(v329);
    v101(&v356, 0);
    uint64_t v104 = v320;
    v318(v320, v94, v88);
    dispatch thunk of Collection.formIndex(after:)();
    v317(v104, v88);
    (*v326)(v102, 0, 1, v103);
    if ((*v315)(v102, 1, v103) == 1) {
      return outlined destroy of IndexingIterator<AttributedString.Runs>(v94, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>);
    }
    (*v292)();
    uint64_t v105 = v294;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    uint64_t v106 = type metadata accessor for AttributeScopes.UIKitAttributes();
    uint64_t v107 = lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes and conformance AttributeScopes.UIKitAttributes();
    uint64_t v108 = v304;
    unint64_t v352 = v107;
    AttributeContainer.subscript.getter();
    swift_release();
    uint64_t v109 = (char *)*v349;
    uint64_t v110 = v341;
    (*v349)(v105, v341);
    swift_getKeyPath();
    unint64_t v111 = lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.BackgroundColorAttribute and conformance AttributeScopes.UIKitAttributes.BackgroundColorAttribute();
    uint64_t v112 = v340;
    unint64_t v332 = v111;
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    v350 = *v351;
    ((void (*)(char *, uint64_t))v350)(v108, v112);
    id v113 = v356;
    v346 = v109;
    uint64_t v347 = v106;
    if (v356)
    {
      uint64_t v114 = v342;
      AttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
      int v115 = v343;
      AttributeContainer.subscript.getter();
      swift_release();
      ((void (*)(char *, uint64_t))v109)(v114, v110);
      swift_getKeyPath();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute();
      uint64_t v116 = v345;
      ScopedAttributeContainer.subscript.getter();
      swift_release();
      (*v344)(v115, v116);
      id v117 = v356;
      swift_release();
      if (v117)
      {
      }
      else
      {
        uint64_t v118 = (uint64_t)v336;
        AttributedString.Runs.Run.range.getter();
        uint64_t KeyPath = swift_getKeyPath();
        MEMORY[0x1F4188790](KeyPath);
        *(&v275 - 2) = v120;
        swift_getKeyPath();
        id v356 = v113;
        type metadata accessor for UIColor();
        lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (void (*)(uint64_t))type metadata accessor for UIColor);
        id v289 = v113;
        unint64_t v353 = Color.init<A>(provider:)();
        lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
        uint64_t v121 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v121(&v356, 0);
        uint64_t v110 = v341;
        outlined destroy of IndexingIterator<AttributedString.Runs>(v118, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        unint64_t v353 = 0;
        uint64_t v122 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v122(&v356, 0);

        outlined destroy of IndexingIterator<AttributedString.Runs>(v118, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      }
      uint64_t v112 = v340;
    }
    uint64_t v123 = v295;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    uint64_t v124 = v305;
    AttributeContainer.subscript.getter();
    swift_release();
    uint64_t v125 = (void (*)(char *, uint64_t))v346;
    ((void (*)(char *, uint64_t))v346)(v123, v110);
    swift_getKeyPath();
    unint64_t v332 = lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.ForegroundColorAttribute and conformance AttributeScopes.UIKitAttributes.ForegroundColorAttribute();
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    ((void (*)(char *, uint64_t))v350)(v124, v112);
    id v126 = v356;
    if (v356)
    {
      uint64_t v127 = v342;
      AttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
      char v128 = v343;
      AttributeContainer.subscript.getter();
      swift_release();
      v125(v127, v110);
      swift_getKeyPath();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute();
      uint64_t v129 = v345;
      ScopedAttributeContainer.subscript.getter();
      swift_release();
      (*v344)(v128, v129);
      id v130 = v356;
      swift_release();
      if (v130)
      {
      }
      else
      {
        uint64_t v131 = (uint64_t)v336;
        AttributedString.Runs.Run.range.getter();
        uint64_t v132 = swift_getKeyPath();
        MEMORY[0x1F4188790](v132);
        *(&v275 - 2) = v133;
        swift_getKeyPath();
        id v356 = v126;
        type metadata accessor for UIColor();
        lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (void (*)(uint64_t))type metadata accessor for UIColor);
        id v289 = v126;
        unint64_t v353 = Color.init<A>(provider:)();
        lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
        char v134 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v134(&v356, 0);
        outlined destroy of IndexingIterator<AttributedString.Runs>(v131, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        unint64_t v353 = 0;
        uint64_t v110 = v341;
        v135 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v135(&v356, 0);

        uint64_t v136 = v131;
        uint64_t v112 = v340;
        outlined destroy of IndexingIterator<AttributedString.Runs>(v136, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      }
      uint64_t v125 = (void (*)(char *, uint64_t))v346;
    }
    v137 = v296;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    v138 = v306;
    AttributeContainer.subscript.getter();
    swift_release();
    v125(v137, v110);
    swift_getKeyPath();
    v139 = v125;
    unint64_t v140 = lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute();
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    ((void (*)(char *, uint64_t))v350)(v138, v112);
    id v141 = v356;
    if (v356)
    {
      unint64_t v332 = v140;
      v142 = v342;
      AttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
      v143 = v343;
      AttributeContainer.subscript.getter();
      swift_release();
      v139(v142, v110);
      swift_getKeyPath();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute();
      uint64_t v144 = v345;
      ScopedAttributeContainer.subscript.getter();
      swift_release();
      (*v344)(v143, v144);
      id v145 = v356;
      swift_release();
      if (v145)
      {
        uint64_t v146 = v110;
      }
      else
      {
        uint64_t v148 = (uint64_t)v336;
        AttributedString.Runs.Run.range.getter();
        uint64_t v149 = swift_getKeyPath();
        MEMORY[0x1F4188790](v149);
        *(&v275 - 2) = v150;
        swift_getKeyPath();
        id v289 = v141;
        unint64_t v353 = Font.init(_:)();
        lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
        v151 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v151(&v356, 0);
        outlined destroy of IndexingIterator<AttributedString.Runs>(v148, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        unint64_t v353 = 0;
        uint64_t v146 = v341;
        v152 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v152(&v356, 0);

        uint64_t v112 = v340;
        outlined destroy of IndexingIterator<AttributedString.Runs>(v148, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      }
      v147 = (void (*)(char *, uint64_t))v346;
    }
    else
    {
      uint64_t v146 = v110;
      v147 = v139;
    }
    v153 = v297;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    v154 = v307;
    AttributeContainer.subscript.getter();
    swift_release();
    uint64_t v155 = v146;
    v147(v153, v146);
    swift_getKeyPath();
    v156 = v147;
    unint64_t v332 = lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.KernAttribute and conformance AttributeScopes.UIKitAttributes.KernAttribute();
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    ((void (*)(char *, uint64_t))v350)(v154, v112);
    if ((v357 & 1) == 0)
    {
      unint64_t v157 = (unint64_t)v356;
      v158 = v342;
      AttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
      v159 = v343;
      AttributeContainer.subscript.getter();
      swift_release();
      v156(v158, v146);
      swift_getKeyPath();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute();
      uint64_t v160 = v345;
      ScopedAttributeContainer.subscript.getter();
      swift_release();
      (*v344)(v159, v160);
      if (v357 == 1)
      {
        unint64_t v161 = (unint64_t)v356;
        uint64_t v162 = (uint64_t)v336;
        AttributedString.Runs.Run.range.getter();
        uint64_t v163 = swift_getKeyPath();
        MEMORY[0x1F4188790](v163);
        *(&v275 - 2) = v164;
        swift_getKeyPath();
        unint64_t v353 = v157;
        LOBYTE(v354) = 0;
        lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
        v165 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v165(&v356, 0);
        uint64_t v112 = v340;
        outlined destroy of IndexingIterator<AttributedString.Runs>(v162, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        unint64_t v353 = v161;
        LOBYTE(v354) = 1;
        uint64_t v155 = v341;
        v166 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v166(&v356, 0);
        outlined destroy of IndexingIterator<AttributedString.Runs>(v162, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      }
    }
    v167 = v298;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    v168 = v308;
    AttributeContainer.subscript.getter();
    swift_release();
    v156(v167, v155);
    swift_getKeyPath();
    unint64_t v332 = lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.TrackingAttribute and conformance AttributeScopes.UIKitAttributes.TrackingAttribute();
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    ((void (*)(char *, uint64_t))v350)(v168, v112);
    if ((v357 & 1) == 0)
    {
      unint64_t v169 = (unint64_t)v356;
      v170 = v342;
      AttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
      v171 = v343;
      AttributeContainer.subscript.getter();
      swift_release();
      v156(v170, v155);
      swift_getKeyPath();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute();
      uint64_t v172 = v345;
      ScopedAttributeContainer.subscript.getter();
      swift_release();
      (*v344)(v171, v172);
      if (v357 == 1)
      {
        unint64_t v173 = (unint64_t)v356;
        uint64_t v174 = (uint64_t)v336;
        AttributedString.Runs.Run.range.getter();
        uint64_t v175 = swift_getKeyPath();
        MEMORY[0x1F4188790](v175);
        *(&v275 - 2) = v176;
        swift_getKeyPath();
        unint64_t v353 = v169;
        LOBYTE(v354) = 0;
        lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
        v177 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v177(&v356, 0);
        uint64_t v112 = v340;
        outlined destroy of IndexingIterator<AttributedString.Runs>(v174, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        unint64_t v353 = v173;
        LOBYTE(v354) = 1;
        uint64_t v178 = v341;
        v179 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v179(&v356, 0);
        uint64_t v155 = v178;
        outlined destroy of IndexingIterator<AttributedString.Runs>(v174, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      }
    }
    v180 = v299;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    v181 = v309;
    AttributeContainer.subscript.getter();
    swift_release();
    v156(v180, v155);
    swift_getKeyPath();
    unint64_t v332 = lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.BaselineOffsetAttribute and conformance AttributeScopes.UIKitAttributes.BaselineOffsetAttribute();
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    ((void (*)(char *, uint64_t))v350)(v181, v112);
    if ((v357 & 1) == 0)
    {
      id v289 = v356;
      v182 = v342;
      AttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
      v183 = v343;
      AttributeContainer.subscript.getter();
      swift_release();
      v156(v182, v155);
      swift_getKeyPath();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute();
      uint64_t v184 = v345;
      ScopedAttributeContainer.subscript.getter();
      swift_release();
      (*v344)(v183, v184);
      if (v357 == 1)
      {
        unint64_t v185 = (unint64_t)v356;
        uint64_t v186 = (uint64_t)v336;
        AttributedString.Runs.Run.range.getter();
        uint64_t v187 = swift_getKeyPath();
        MEMORY[0x1F4188790](v187);
        *(&v275 - 2) = v188;
        swift_getKeyPath();
        unint64_t v353 = (unint64_t)v289;
        LOBYTE(v354) = 0;
        lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
        v189 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v189(&v356, 0);
        uint64_t v112 = v340;
        outlined destroy of IndexingIterator<AttributedString.Runs>(v186, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        unint64_t v353 = v185;
        LOBYTE(v354) = 1;
        uint64_t v190 = v341;
        v191 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v191(&v356, 0);
        uint64_t v155 = v190;
        outlined destroy of IndexingIterator<AttributedString.Runs>(v186, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      }
    }
    v192 = v300;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    v193 = v310;
    AttributeContainer.subscript.getter();
    swift_release();
    v156(v192, v155);
    swift_getKeyPath();
    v194 = v156;
    uint64_t v195 = v155;
    unint64_t v332 = lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute();
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    ((void (*)(char *, uint64_t))v350)(v193, v112);
    if ((v357 & 1) == 0)
    {
      id v289 = v356;
      v196 = v342;
      AttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
      v197 = v343;
      AttributeContainer.subscript.getter();
      swift_release();
      v156(v196, v155);
      swift_getKeyPath();
      unint64_t v198 = lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute();
      uint64_t v199 = v345;
      ScopedAttributeContainer.subscript.getter();
      v194 = (void (*)(char *, uint64_t))v346;
      swift_release();
      (*v344)(v197, v199);
      uint64_t v200 = v357;
      outlined consume of Text.LineStyle?((uint64_t)v356, v357);
      if (v200 == 1)
      {
        unint64_t v282 = v198;
        Text.LineStyle.init(_nsUnderlineStyle:)();
        uint64_t v201 = v357;
        id v289 = v356;
        v202 = v277;
        AttributedString.Runs.Run.attributes.getter();
        swift_getKeyPath();
        v203 = v279;
        AttributeContainer.subscript.getter();
        swift_release();
        v194(v202, v155);
        swift_getKeyPath();
        unint64_t v204 = lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.StrikethroughColorAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughColorAttribute();
        ScopedAttributeContainer.subscript.getter();
        swift_release();
        ((void (*)(char *, uint64_t))v350)(v203, v112);
        id v205 = v356;
        uint64_t v283 = v204;
        if (v356)
        {
          if (v201 == 1)
          {

            uint64_t v206 = 1;
          }
          else
          {
            type metadata accessor for UIColor();
            lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (void (*)(uint64_t))type metadata accessor for UIColor);
            id v207 = v205;
            uint64_t v208 = Color.init<A>(provider:)();

            swift_release();
            uint64_t v206 = v208;
          }
        }
        else
        {
          uint64_t v206 = v201;
        }
        unint64_t v332 = v206;
        uint64_t v209 = (uint64_t)v336;
        AttributedString.Runs.Run.range.getter();
        uint64_t v210 = swift_getKeyPath();
        MEMORY[0x1F4188790](v210);
        *(&v275 - 2) = v211;
        swift_getKeyPath();
        unint64_t v353 = (unint64_t)v289;
        uint64_t v354 = v206;
        outlined copy of Text.LineStyle?((uint64_t)v289, v206);
        lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
        v212 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v212(&v356, 0);
        outlined destroy of IndexingIterator<AttributedString.Runs>(v209, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        unint64_t v353 = 0;
        LOBYTE(v354) = 1;
        v213 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v213(&v356, 0);
        outlined destroy of IndexingIterator<AttributedString.Runs>(v209, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        unint64_t v353 = 0;
        v214 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v214(&v356, 0);
        outlined destroy of IndexingIterator<AttributedString.Runs>(v209, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        outlined consume of Text.LineStyle?((uint64_t)v289, v332);
        uint64_t v112 = v340;
        uint64_t v195 = v341;
        v194 = (void (*)(char *, uint64_t))v346;
      }
    }
    v215 = v301;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    v216 = v311;
    AttributeContainer.subscript.getter();
    swift_release();
    v194(v215, v195);
    swift_getKeyPath();
    unint64_t v332 = lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.UnderlineStyleAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineStyleAttribute();
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    ((void (*)(char *, uint64_t))v350)(v216, v112);
    if ((v357 & 1) == 0)
    {
      id v289 = v356;
      v217 = v342;
      AttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
      v218 = v343;
      AttributeContainer.subscript.getter();
      swift_release();
      v194(v217, v195);
      swift_getKeyPath();
      unint64_t v219 = lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute();
      uint64_t v220 = v345;
      ScopedAttributeContainer.subscript.getter();
      v194 = (void (*)(char *, uint64_t))v346;
      swift_release();
      (*v344)(v218, v220);
      uint64_t v221 = v357;
      outlined consume of Text.LineStyle?((uint64_t)v356, v357);
      if (v221 == 1)
      {
        unint64_t v282 = v219;
        Text.LineStyle.init(_nsUnderlineStyle:)();
        uint64_t v222 = v357;
        id v289 = v356;
        v223 = v278;
        AttributedString.Runs.Run.attributes.getter();
        swift_getKeyPath();
        v224 = v280;
        AttributeContainer.subscript.getter();
        swift_release();
        v194(v223, v195);
        swift_getKeyPath();
        unint64_t v225 = lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.UnderlineColorAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineColorAttribute();
        ScopedAttributeContainer.subscript.getter();
        swift_release();
        ((void (*)(char *, uint64_t))v350)(v224, v112);
        id v226 = v356;
        uint64_t v283 = v225;
        if (v356)
        {
          if (v222 == 1)
          {

            uint64_t v227 = 1;
          }
          else
          {
            type metadata accessor for UIColor();
            lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (void (*)(uint64_t))type metadata accessor for UIColor);
            id v228 = v226;
            uint64_t v229 = Color.init<A>(provider:)();

            swift_release();
            uint64_t v227 = v229;
          }
        }
        else
        {
          uint64_t v227 = v222;
        }
        unint64_t v332 = v227;
        uint64_t v230 = (uint64_t)v336;
        AttributedString.Runs.Run.range.getter();
        uint64_t v231 = swift_getKeyPath();
        MEMORY[0x1F4188790](v231);
        *(&v275 - 2) = v232;
        swift_getKeyPath();
        unint64_t v353 = (unint64_t)v289;
        uint64_t v354 = v227;
        outlined copy of Text.LineStyle?((uint64_t)v289, v227);
        lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
        v233 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v233(&v356, 0);
        outlined destroy of IndexingIterator<AttributedString.Runs>(v230, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        unint64_t v353 = 0;
        LOBYTE(v354) = 1;
        v234 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v234(&v356, 0);
        outlined destroy of IndexingIterator<AttributedString.Runs>(v230, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        unint64_t v353 = 0;
        v235 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v235(&v356, 0);
        outlined destroy of IndexingIterator<AttributedString.Runs>(v230, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        outlined consume of Text.LineStyle?((uint64_t)v289, v332);
        uint64_t v112 = v340;
        uint64_t v195 = v341;
        v194 = (void (*)(char *, uint64_t))v346;
      }
    }
    v236 = v302;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    v237 = v312;
    AttributeContainer.subscript.getter();
    swift_release();
    v194(v236, v195);
    swift_getKeyPath();
    lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.AttachmentAttribute and conformance AttributeScopes.UIKitAttributes.AttachmentAttribute();
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    ((void (*)(char *, uint64_t))v350)(v237, v112);
    id v238 = v356;
    if (v356)
    {
      self;
      uint64_t v239 = swift_dynamicCastObjCClass();
      if (v239)
      {
        unint64_t v332 = v239;
        v240 = v342;
        AttributedString.Runs.Run.attributes.getter();
        swift_getKeyPath();
        type metadata accessor for AttributeScopes.SwiftUIAttributes();
        lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
        v241 = v343;
        AttributeContainer.subscript.getter();
        swift_release();
        v194(v240, v195);
        swift_getKeyPath();
        lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute();
        uint64_t v242 = v345;
        ScopedAttributeContainer.subscript.getter();
        swift_release();
        (*v344)(v241, v242);
        id v243 = v356;

        if (v243)
        {

          uint64_t v112 = v340;
        }
        else
        {
          uint64_t v267 = (uint64_t)v336;
          AttributedString.Runs.Run.range.getter();
          swift_getKeyPath();
          uint64_t v283 = swift_getKeyPath();
          uint64_t v355 = 0;
          id v289 = (id)lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
          v268 = (void (*)(id *, void))AttributedString.subscript.modify();
          v269 = (void (*)(unint64_t *, void))AttributedSubstring.subscript.modify();
          ScopedAttributeContainer.subscript.setter();
          v269(&v353, 0);
          swift_release();
          v268(&v356, 0);
          outlined destroy of IndexingIterator<AttributedString.Runs>(v267, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
          AttributedString.Runs.Run.range.getter();
          uint64_t v270 = swift_getKeyPath();
          MEMORY[0x1F4188790](v270);
          *(&v275 - 2) = v271;
          swift_getKeyPath();
          unint64_t v353 = v332;
          id v272 = v238;
          v273 = (void (*)(id *, void))AttributedString.subscript.modify();
          uint64_t v112 = v340;
          AttributedSubstring.subscript.setter();
          v273(&v356, 0);

          outlined destroy of IndexingIterator<AttributedString.Runs>(v267, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        }
        v244 = v290;
        goto LABEL_54;
      }
    }
    v244 = v290;
LABEL_54:
    v245 = v303;
    AttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    v246 = v313;
    AttributeContainer.subscript.getter();
    swift_release();
    v247 = v245;
    uint64_t v248 = v341;
    v249 = (void (*)(char *, uint64_t))v346;
    ((void (*)(char *, uint64_t))v346)(v247, v341);
    swift_getKeyPath();
    unint64_t v250 = lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute();
    uint64_t v251 = (uint64_t)v314;
    unint64_t v352 = v250;
    ScopedAttributeContainer.subscript.getter();
    swift_release();
    ((void (*)(char *, uint64_t))v350)(v246, v112);
    v252 = *v244;
    if ((*v244)(v251, 1, v339) == 1)
    {
      (*v291)(v348, v335);
      outlined destroy of AttributedString.AdaptiveImageGlyph?(v251);
    }
    else
    {
      uint64_t v253 = v251;
      uint64_t v254 = v339;
      (*v285)(v334, v253, v339);
      v255 = v286;
      AttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes();
      v256 = v287;
      AttributeContainer.subscript.getter();
      swift_release();
      v249(v255, v248);
      swift_getKeyPath();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute();
      uint64_t v257 = (uint64_t)v288;
      uint64_t v258 = v345;
      ScopedAttributeContainer.subscript.getter();
      swift_release();
      (*v344)(v256, v258);
      unsigned int v259 = v252(v257, 1, v254);
      outlined destroy of AttributedString.AdaptiveImageGlyph?(v257);
      if (v259 == 1)
      {
        uint64_t v260 = (uint64_t)v336;
        AttributedString.Runs.Run.range.getter();
        uint64_t v261 = swift_getKeyPath();
        MEMORY[0x1F4188790](v261);
        *(&v275 - 2) = v262;
        swift_getKeyPath();
        v263 = v281;
        (*v276)(v281, v334, v339);
        v264 = *v275;
        (*v275)(v263, 0, 1, v339);
        lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
        v265 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v265(&v356, 0);
        outlined destroy of IndexingIterator<AttributedString.Runs>(v260, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        AttributedString.Runs.Run.range.getter();
        v264(v263, 1, 1, v339);
        v266 = (void (*)(id *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v266(&v356, 0);
        outlined destroy of IndexingIterator<AttributedString.Runs>(v260, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      }
      (*v284)(v334, v339);
      (*v291)(v348, v335);
    }
    uint64_t v88 = v323;
    uint64_t v94 = v322;
  }
  (*v326)(v329, 1, 1, v335);
  return outlined destroy of IndexingIterator<AttributedString.Runs>(v94, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>);
}

uint64_t lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Range<AttributedString.Index>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for AttributedString.AdaptiveImageGlyph?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined destroy of IndexingIterator<AttributedString.Runs>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for IndexingIterator<AttributedString.Runs>(uint64_t a1)
{
}

void type metadata accessor for Range<AttributedString.Index>(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes and conformance AttributeScopes.UIKitAttributes()
{
  return lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes and conformance AttributeScopes.UIKitAttributes, MEMORY[0x1E4FB0D88]);
}

uint64_t outlined destroy of AttributedString.AdaptiveImageGlyph?(uint64_t a1)
{
  type metadata accessor for AttributedString.AdaptiveImageGlyph?(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x1E4F24330]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.TrackingAttribute and conformance AttributeScopes.UIKitAttributes.TrackingAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.TrackingAttribute and conformance AttributeScopes.UIKitAttributes.TrackingAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.TrackingAttribute and conformance AttributeScopes.UIKitAttributes.TrackingAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.TrackingAttribute and conformance AttributeScopes.UIKitAttributes.TrackingAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.KernAttribute and conformance AttributeScopes.UIKitAttributes.KernAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.KernAttribute and conformance AttributeScopes.UIKitAttributes.KernAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.KernAttribute and conformance AttributeScopes.UIKitAttributes.KernAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.KernAttribute and conformance AttributeScopes.UIKitAttributes.KernAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.FontAttribute and conformance AttributeScopes.UIKitAttributes.FontAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.ForegroundColorAttribute and conformance AttributeScopes.UIKitAttributes.ForegroundColorAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.ForegroundColorAttribute and conformance AttributeScopes.UIKitAttributes.ForegroundColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.ForegroundColorAttribute and conformance AttributeScopes.UIKitAttributes.ForegroundColorAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.ForegroundColorAttribute and conformance AttributeScopes.UIKitAttributes.ForegroundColorAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.BackgroundColorAttribute and conformance AttributeScopes.UIKitAttributes.BackgroundColorAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.BackgroundColorAttribute and conformance AttributeScopes.UIKitAttributes.BackgroundColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.BackgroundColorAttribute and conformance AttributeScopes.UIKitAttributes.BackgroundColorAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.BackgroundColorAttribute and conformance AttributeScopes.UIKitAttributes.BackgroundColorAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.UnderlineStyleAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineStyleAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.UnderlineStyleAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineStyleAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.UnderlineStyleAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineStyleAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.UnderlineStyleAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineStyleAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.BaselineOffsetAttribute and conformance AttributeScopes.UIKitAttributes.BaselineOffsetAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.BaselineOffsetAttribute and conformance AttributeScopes.UIKitAttributes.BaselineOffsetAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.BaselineOffsetAttribute and conformance AttributeScopes.UIKitAttributes.BaselineOffsetAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.BaselineOffsetAttribute and conformance AttributeScopes.UIKitAttributes.BaselineOffsetAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.AttachmentAttribute and conformance AttributeScopes.UIKitAttributes.AttachmentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.AttachmentAttribute and conformance AttributeScopes.UIKitAttributes.AttachmentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.AttachmentAttribute and conformance AttributeScopes.UIKitAttributes.AttachmentAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.AttachmentAttribute and conformance AttributeScopes.UIKitAttributes.AttachmentAttribute);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes()
{
  return lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes, MEMORY[0x1E4F3F288]);
}

uint64_t lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs()
{
  return lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x1E4F27368]);
}

uint64_t outlined init with take of IndexingIterator<AttributedString.Runs>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index()
{
  return lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x1E4F27388]);
}

void specialized UICollectionViewListCoordinatorBase.collectionView(_:didEndDisplaying:forItemAt:)()
{
  if (swift_dynamicCastUnknownClass())
  {
    swift_getAssociatedConformanceWitness();
    PlatformListViewBase.updateViewGraphForDisplay(_:)(0);
  }
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:willDisplay:forItemAt:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a3;
  id v12 = a4;
  id v13 = a1;
  specialized UICollectionViewListCoordinatorBase.collectionView(_:willDisplay:forItemAt:)(v12, (uint64_t)v10);

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t specialized UICollectionViewListCoordinatorBase.collectionView(_:willDisplay:forItemAt:)(void *a1, uint64_t a2)
{
  uint64_t v20 = a2;
  uint64_t v22 = *MEMORY[0x1E4FBC8C8] & *v2;
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  id v21 = a1;
  uint64_t result = swift_dynamicCastUnknownClass();
  if (result)
  {
    uint64_t v10 = (void *)((char *)v2 + *(void *)(v22 + 152));
    uint64_t v11 = *v10;
    if (*v10)
    {
      uint64_t v12 = v10[1];
      id v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      uint64_t v22 = result;
      v13((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v20, v4);
      unint64_t v14 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = v11;
      *(void *)(v15 + 24) = v12;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v15 + v14, v7, v4);
      uint64_t v16 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
      uint64_t v17 = *(void (**)(uint64_t, uint64_t (*)(double, double, double, double), uint64_t, uint64_t, uint64_t))(v16 + 120);
      outlined copy of AppIntentExecutor?(v11);
      outlined copy of AppIntentExecutor?(v11);
      id v18 = v21;
      v17(1, partial apply for closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:willDisplay:forItemAt:), v15, AssociatedTypeWitness, v16);

      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v11);
      return swift_release();
    }
  }
  return result;
}

uint64_t closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:cellForItemAt:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, UICollectionView *a3@<X2>, void *a4@<X8>)
{
  uint64_t v48 = a4;
  uint64_t v42 = (void *)(*MEMORY[0x1E4FBC8C8] & *a2);
  uint64_t v7 = v42[12];
  uint64_t v41 = v42[14];
  uint64_t v8 = type metadata accessor for ShadowListDataSource();
  uint64_t v46 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v40 - v9;
  swift_getWitnessTable();
  uint64_t v45 = type metadata accessor for _RowVisitationContext();
  uint64_t v47 = a1;
  v11._uint64_t countAndFlagsBits = _RowVisitationContext.reuseIdentifier.getter();
  uint64_t countAndFlagsBits = v11._countAndFlagsBits;
  object = v11._object;
  UICollectionViewListCoordinatorBase.registerIdentifierIfNeeded(_:in:)(v11, a3);
  unint64_t v14 = (void *)MEMORY[0x18C115780](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  uint64_t v16 = [(UICollectionView *)a3 dequeueReusableCellWithReuseIdentifier:v14 forIndexPath:isa];

  uint64_t v17 = v16;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v19 = (void *)swift_dynamicCastUnknownClassUnconditional();
  uint64_t v44 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  PlatformListViewBase.updateViewGraphForDisplay(_:)(0);
  type metadata accessor for AnyListCollectionViewCell();
  uint64_t v20 = swift_dynamicCastClass();
  id v21 = (char *)v20;
  if (v20)
  {
    *(void *)(v20 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_selectionDelegate + 8) = &protocol witness table for UICollectionViewListCoordinatorBase<A, B>;
    swift_unknownObjectWeakAssign();
    *(void *)&v21[OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_insetsDelegate + 8] = &protocol witness table for UICollectionViewListCoordinatorBase<A, B>;
    swift_unknownObjectWeakAssign();
    *(void *)&v21[OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_editMenuDelegate + 8] = &protocol witness table for UICollectionViewListCoordinatorBase<A, B>;
    swift_unknownObjectWeakAssign();
    uint64_t v22 = v17;
  }
  uint64_t v43 = v17;
  uint64_t v23 = (uint64_t *)MEMORY[0x1E4FBC8C8];
  uint64_t v24 = (void *)((char *)a2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a2) + 0xA0));
  swift_beginAccess();
  uint64_t v54 = *v24;
  uint64_t v25 = v54;
  uint64_t v26 = *a2;
  uint64_t v27 = *v23;
  if (v54 != 1)
  {
    if (*((unsigned char *)a2 + *(void *)((v27 & v26) + 0xE8)) == 1)
    {
      uint64_t v28 = v42[15];
      uint64_t v29 = v42[13];
      uint64_t v49 = v7;
      uint64_t v50 = v29;
      uint64_t v51 = v41;
      uint64_t v52 = v28;
      type metadata accessor for UICollectionViewListCoordinatorBase.Listener();
      specialized UICollectionViewListCoordinatorBase.Listener.__allocating_init(_:)();
      outlined copy of Transaction?(v25);
      Transaction.addAnimationListener(_:)();
      swift_release();
      uint64_t v26 = *a2;
      uint64_t v27 = *MEMORY[0x1E4FBC8C8];
    }
    else
    {
      swift_retain();
    }
  }
  uint64_t v30 = (char *)a2 + *(void *)((v27 & v26) + 0x88);
  swift_beginAccess();
  uint64_t v31 = v46;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v10, v30, v8);
  uint64_t v32 = v54;
  outlined copy of Transaction?(v54);
  uint64_t v33 = v47;
  ShadowListDataSource.configureCell(_:transaction:context:)((uint64_t)v19, v32, v47, v8);
  outlined consume of Transaction?(v32);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v8);
  id v34 = objc_msgSend(v19, sel_layer);
  uint64_t v53 = *(void *)(v33 + *(int *)(v45 + 40));
  ViewTraitCollection.zIndex.getter();
  objc_msgSend(v34, sel_setZPosition_);

  uint64_t v35 = (void *)(*(uint64_t (**)(uint64_t))(v44 + 56))(AssociatedTypeWitness);
  if (v35)
  {
    id v36 = (id)specialized _UIHostingView.editMenuBridge.getter();

    type metadata accessor for ListCollectionViewCell();
    uint64_t v37 = (void *)swift_dynamicCastClass();
    if (v37) {
      uint64_t v38 = v43;
    }
    swift_unknownObjectWeakAssign();
  }
  *uint64_t v48 = v19;
  return outlined consume of Transaction?(v54);
}

void ListCollectionViewCellBase.updateViewGraphForDisplay(_:sizeThatFitsCallback:)(char a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for isEnabledInProcessEnv != -1) {
    swift_once();
  }
  if ((static ListUsesUIHostingConfigurationFeature.isEnabledInProcessEnv & 1) == 0)
  {
    uint64_t v6 = type metadata accessor for ListCollectionViewCellBase();
    uint64_t WitnessTable = swift_getWitnessTable();
    PlatformListViewBase.defaultUpdateViewGraphForDisplay(_:sizeThatFitsCallback:)(a1 & 1, a2, a3, v6, WitnessTable);
  }
}

Swift::Void __swiftcall PlatformListViewBase.updateViewGraphForDisplay(_:)(Swift::Bool a1)
{
  (*(void (**)(Swift::Bool, void, void))(v1 + 120))(a1, 0, 0);
}

Swift::Void __swiftcall UICollectionViewListCoordinatorBase.registerIdentifierIfNeeded(_:in:)(Swift::String _, UICollectionView *in)
{
  object = _._object;
  uint64_t countAndFlagsBits = _._countAndFlagsBits;
  uint64_t v6 = (void *)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x80));
  swift_beginAccess();
  uint64_t v7 = *v6;
  swift_bridgeObjectRetain();
  char v8 = specialized Set.contains(_:)(countAndFlagsBits, (uint64_t)object, v7);
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v11, countAndFlagsBits, (Swift::Int)object);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_getAssociatedTypeWitness();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    uint64_t v10 = (void *)MEMORY[0x18C115780](countAndFlagsBits, object);
    [(UICollectionView *)in registerClass:ObjCClassFromMetadata forCellWithReuseIdentifier:v10];
  }
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      Swift::Int v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  BOOL v17;

  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      Swift::Int v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

id @objc ListCollectionViewCell.init(frame:)(void *a1, double a2, double a3, double a4, double a5)
{
  v10.receiver = a1;
  v10.super_class = (Class)type metadata accessor for ListCollectionViewCell();
  return objc_msgSendSuper2(&v10, sel_initWithFrame_, a2, a3, a4, a5);
}

uint64_t type metadata accessor for ListCollectionViewCell()
{
  uint64_t result = type metadata singleton initialization cache for ListCollectionViewCell;
  if (!type metadata singleton initialization cache for ListCollectionViewCell) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id @objc ListCollectionViewCellBase.init(frame:)(double a1, double a2, double a3, double a4)
{
  return ListCollectionViewCellBase.init(frame:)(a1, a2, a3, a4);
}

id ListCollectionViewCellBase.init(frame:)(double a1, double a2, double a3, double a4)
{
  v4[direct field offset for ListCollectionViewCellBase.wasEditing] = 0;
  v4[direct field offset for ListCollectionViewCellBase.wasSwiped] = 0;
  uint64_t v9 = &v4[direct field offset for ListCollectionViewCellBase.cellHostWidth];
  *(void *)uint64_t v9 = 0;
  v9[8] = 1;
  objc_super v10 = &v4[direct field offset for ListCollectionViewCellBase.lastConfiguration];
  uint64_t v11 = type metadata accessor for UIListContentConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v4[direct field offset for ListCollectionViewCellBase.shouldHugContent] = 0;
  BOOL v12 = &v4[direct field offset for ListCollectionViewCellBase.viewListID];
  *BOOL v12 = 0;
  v12[1] = 0;
  id v13 = &v4[direct field offset for ListCollectionViewCellBase.selectionBehavior];
  v13[64] = 0;
  *((_OWORD *)v13 + 2) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  *(_OWORD *)id v13 = xmmword_18834BB90;
  *((_OWORD *)v13 + 1) = 0u;
  uint64_t v14 = &v4[direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior];
  *uint64_t v14 = 1;
  v14[1] = 0;
  v14[2] = 0;
  *(_DWORD *)&v4[direct field offset for ListCollectionViewCellBase.popUpButtonSeed] = -1;
  *(void *)&v4[direct field offset for ListCollectionViewCellBase.host] = 0;
  v17.receiver = v4;
  v17.super_class = (Class)type metadata accessor for ListCollectionViewCellBase();
  id v15 = objc_msgSendSuper2(&v17, sel_initWithFrame_, a1, a2, a3, a4);
  objc_msgSend(v15, sel__setAllowsStateUpdatesWhenEvaluatingBackgroundAppearance_, 1);
  objc_msgSend(v15, sel_setAutomaticallyUpdatesContentConfiguration_, 0);

  return v15;
}

uint64_t _RowVisitationContext.reuseIdentifier.getter()
{
  ViewTraitCollection.value<A>(for:defaultValue:)();
  BOOL v0 = v7 == 0x6C6C65437473694CLL && v8 == 0xE800000000000000;
  if (v0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v1._uint64_t countAndFlagsBits = 45;
    v1._object = (void *)0xE100000000000000;
    String.append(_:)(v1);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v3 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
    uint64_t v4 = swift_checkMetadataState();
    v3(v4, AssociatedConformanceWitness);
    v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t protocol witness for ListCellContent.reuseIdentifier.getter in conformance _ViewList_View()
{
  return MEMORY[0x1F40FCFD8]();
}

unint64_t instantiation function for generic protocol witness table for AccessibilityPlatformViewModifier(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier();
  unint64_t result = lazy protocol witness table accessor for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier();
  *(void *)(a1 + 16) = result;
  return result;
}

void type metadata accessor for ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>();
    type metadata accessor for _EnvironmentKeyWritingModifier<ColorScheme?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<ColorScheme?>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for AccessibilityValueStorage?(255, a3);
    unint64_t v4 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>()
{
  if (!lazy cache variable for type metadata for HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.CurrentValueLabel?);
    lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel? and conformance <A> A?, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.CurrentValueLabel?);
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>();
    lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory? and conformance <A> A?(&lazy protocol witness table cache variable for type SearchFieldConfiguration.Scopes? and conformance <A> A?, &lazy cache variable for type metadata for SearchFieldConfiguration.Scopes?);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, MEMORY[0x1E4F40EE0], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _ValueActionModifier2<Bool> and conformance _ValueActionModifier2<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for LazyPlatformItemWriter<LazySearchScopesKey, ModifiedContent<ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>>()
{
  if (!lazy cache variable for type metadata for LazyPlatformItemWriter<LazySearchScopesKey, ModifiedContent<ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>);
    unint64_t v0 = type metadata accessor for LazyPlatformItemWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LazyPlatformItemWriter<LazySearchScopesKey, ModifiedContent<ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>)
  {
    type metadata accessor for ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>();
    type metadata accessor for Button<Text>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F3FCE8], MEMORY[0x1E4F40318]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>)
  {
    type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>(255, &lazy cache variable for type metadata for ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, MEMORY[0x1E4F40EE0], MEMORY[0x1E4F3FBA0]);
    type metadata accessor for Button<Text>(255, &lazy cache variable for type metadata for _ValueActionModifier2<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F408C8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>);
    }
  }
}

void type metadata accessor for ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for SearchFieldConfiguration.Scopes?);
    type metadata accessor for Button<Text>(255, &lazy cache variable for type metadata for PickerStyleWriter<SectionPickerStyle>, (uint64_t)&type metadata for SectionPickerStyle, (uint64_t)&protocol witness table for SectionPickerStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PickerStyleWriter);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<SearchFieldConfiguration.Scopes?, PickerStyleWriter<SectionPickerStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>(255, &lazy cache variable for type metadata for ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, MEMORY[0x1E4F40EE0], MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarRoleKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarRoleKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarRoleKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for Button<Text>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarRoleKey>, (uint64_t)&type metadata for ToolbarRoleKey, (uint64_t)&protocol witness table for ToolbarRoleKey, MEMORY[0x1E4F41108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarRoleKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

void type metadata accessor for LazyPlatformItemWriter<LazySearchSuggestionsKey, SearchFieldConfiguration.Suggestions?>()
{
  if (!lazy cache variable for type metadata for LazyPlatformItemWriter<LazySearchSuggestionsKey, SearchFieldConfiguration.Suggestions?>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, (unint64_t *)&lazy cache variable for type metadata for SearchFieldConfiguration.Suggestions?);
    lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory? and conformance <A> A?(&lazy protocol witness table cache variable for type SearchFieldConfiguration.Suggestions? and conformance <A> A?, (unint64_t *)&lazy cache variable for type metadata for SearchFieldConfiguration.Suggestions?);
    unint64_t v0 = type metadata accessor for LazyPlatformItemWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LazyPlatformItemWriter<LazySearchSuggestionsKey, SearchFieldConfiguration.Suggestions?>);
    }
  }
}

uint64_t static LazyPlatformItemWriter._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, ValueMetadata **)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v67 = a4;
  uint64_t v68 = a3;
  uint64_t v66 = a9;
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  int v13 = *a1;
  uint64_t v14 = *(ValueMetadata **)a2;
  int v15 = *(_DWORD *)(a2 + 8);
  uint64_t v16 = *(_UNKNOWN ***)(a2 + 16);
  unsigned int v17 = *(_DWORD *)(a2 + 24);
  unsigned int v18 = *(_DWORD *)(a2 + 28);
  unsigned int v19 = *(_DWORD *)(a2 + 32);
  unsigned int v20 = *(_DWORD *)(a2 + 36);
  uint64_t v22 = *(void *)(a2 + 40);
  uint64_t v21 = *(void *)(a2 + 48);
  unsigned int v23 = *(_DWORD *)(a2 + 56);
  unsigned int v24 = *(_DWORD *)(a2 + 60);
  unsigned int v25 = *(_DWORD *)(a2 + 64);
  unsigned int v26 = *(_DWORD *)(a2 + 68);
  unsigned int v28 = *(_DWORD *)(a2 + 72);
  unsigned int v27 = *(_DWORD *)(a2 + 76);
  int v29 = *(_DWORD *)(a2 + 80);
  id v113 = v14;
  int v115 = v16;
  unsigned int v85 = v17;
  int v86 = v15;
  int v114 = v15;
  *(void *)&long long v116 = __PAIR64__(v18, v17);
  unsigned int v83 = v19;
  unsigned int v84 = v18;
  *((void *)&v116 + 1) = __PAIR64__(v20, v19);
  uint64_t v117 = v22;
  uint64_t v118 = v21;
  unsigned int v81 = v23;
  unsigned int v82 = v20;
  *(void *)&long long v119 = __PAIR64__(v24, v23);
  unsigned int v79 = v25;
  unsigned int v80 = v24;
  *((void *)&v119 + 1) = __PAIR64__(v26, v25);
  unsigned int v77 = v28;
  unsigned int v78 = v26;
  unint64_t v120 = __PAIR64__(v27, v28);
  int v75 = v29;
  unsigned int v76 = v27;
  int v121 = v29;
  uint64_t v90 = v14;
  swift_retain();
  Swift::Int v89 = v16;
  swift_retain();
  uint64_t v87 = v22;
  uint64_t v30 = a6;
  swift_bridgeObjectRetain();
  uint64_t v88 = v21;
  swift_bridgeObjectRetain();
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(2u);
  LODWORD(v65) = v13;
  LODWORD(v92) = v13;
  uint64_t v101 = (ValueMetadata *)a5;
  uint64_t v102 = a6;
  uint64_t v103 = (_UNKNOWN **)a7;
  *(void *)&long long v104 = a8;
  type metadata accessor for LazyPlatformItemWriter();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  uint64_t v31 = *(void *)(*(void *)(a6 - 8) + 64);
  uint64_t v73 = (ValueMetadata *)a5;
  uint64_t v74 = (_UNKNOWN **)a7;
  if (v31) {
    closure #1 in static LazyPlatformItemWriter._makeView(modifier:inputs:body:)(1, a5, v30, a7, a8, (uint64_t (*)(void, void *))type metadata accessor for LazyPlatformItemWriter, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v92 = v113;
  LODWORD(v93) = v114;
  uint64_t v94 = v115;
  long long v95 = v116;
  uint64_t v96 = v117;
  uint64_t v97 = v118;
  long long v98 = v119;
  unint64_t v99 = v120;
  int v100 = v121;
  PlatformItemListGenerator.init(flags:content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v92, 1, (uint64_t)&v101);
  uint64_t v33 = v101;
  uint64_t v53 = v101;
  uint64_t v71 = *((void *)&v104 + 1);
  uint64_t v72 = v103;
  uint64_t v69 = *((void *)&v107 + 1);
  uint64_t v70 = v107;
  LODWORD(v60) = v104;
  int v57 = v111;
  LODWORD(v58) = v110;
  int v55 = v102;
  int v56 = v112;
  uint64_t v34 = v105;
  uint64_t v35 = v106;
  long long v54 = v108;
  uint64_t v36 = v109;
  LODWORD(v101) = v65;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  uint64_t v61 = a8;
  uint64_t v62 = v30;
  closure #2 in static LazyPlatformItemWriter._makeView(modifier:inputs:body:)(1, (uint64_t)v73, v30, (uint64_t)v74, a8, (uint64_t (*)(void, void *))type metadata accessor for LazyPlatformItemWriter, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
  int v64 = AGGraphCreateOffsetAttribute2();
  uint64_t v101 = v90;
  LODWORD(v102) = v86;
  uint64_t v103 = v89;
  *(void *)&long long v104 = __PAIR64__(v84, v85);
  *((void *)&v104 + 1) = __PAIR64__(v82, v83);
  uint64_t v105 = v87;
  uint64_t v106 = v88;
  *(void *)&long long v107 = __PAIR64__(v80, v81);
  *((void *)&v107 + 1) = __PAIR64__(v78, v79);
  *(void *)&long long v108 = __PAIR64__(v76, v77);
  DWORD2(v108) = v75;
  uint64_t v37 = _ViewInputs.environment.getter();
  int v63 = v37;
  uint64_t v59 = &v52;
  LODWORD(v102) = v55;
  uint64_t v101 = v33;
  uint64_t v103 = v72;
  *((void *)&v104 + 1) = v71;
  uint64_t v105 = v34;
  uint64_t v106 = v35;
  *(void *)&long long v107 = v70;
  *((void *)&v107 + 1) = v69;
  long long v108 = v54;
  uint64_t v109 = v36;
  LODWORD(v104) = v60;
  int v110 = v58;
  unsigned __int8 v111 = v57;
  int v112 = v56;
  MEMORY[0x1F4188790](v37);
  uint64_t v92 = &type metadata for ActionPlatformItemListFlags;
  uint64_t v93 = v30;
  uint64_t v94 = &protocol witness table for ActionPlatformItemListFlags;
  *(void *)&long long v95 = a8;
  uint64_t v50 = type metadata accessor for PlatformItemListGenerator();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v60 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F4E740];
  _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_0(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E740]);
  uint64_t v39 = v38;
  uint64_t v65 = v53;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v101, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v49, v50, MEMORY[0x1E4FBC248], v39, MEMORY[0x1E4FBC278], v40);
  uint64_t v58 = 0;
  uint64_t v41 = v101;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  uint64_t v42 = swift_release();
  uint64_t v59 = (uint64_t *)v49;
  LODWORD(v102) = v86;
  uint64_t v101 = v90;
  uint64_t v103 = v89;
  *(void *)&long long v104 = __PAIR64__(v84, v85);
  *((void *)&v104 + 1) = __PAIR64__(v82, v83);
  uint64_t v105 = v87;
  uint64_t v106 = v88;
  *(void *)&long long v107 = __PAIR64__(v80, v81);
  *((void *)&v107 + 1) = __PAIR64__(v78, v79);
  *(void *)&long long v108 = __PAIR64__(v76, v77);
  DWORD2(v108) = v75;
  v91[0] = v63;
  v91[1] = v92;
  v91[2] = v64;
  MEMORY[0x1F4188790](v42);
  uint64_t v92 = v73;
  uint64_t v93 = v62;
  uint64_t v94 = v74;
  *(void *)&long long v95 = v61;
  uint64_t updated = type metadata accessor for LazyPlatformItemWriter.UpdateEnvironment();
  *(void *)&v49[-16] = updated;
  *(void *)&v49[-8] = swift_getWitnessTable();
  _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<EnvironmentValues>, MEMORY[0x1E4F40140], v60);
  uint64_t v45 = v44;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v91, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v49[-32], updated, MEMORY[0x1E4FBC248], v45, MEMORY[0x1E4FBC278], v46);
  _ViewInputs.environment.setter();
  uint64_t v92 = v101;
  LODWORD(v93) = v102;
  uint64_t v94 = v103;
  long long v95 = v104;
  uint64_t v96 = v105;
  uint64_t v97 = v106;
  long long v98 = v107;
  unint64_t v99 = v108;
  int v100 = DWORD2(v108);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v47 = swift_bridgeObjectRetain();
  v68(v47, &v92);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for LazyPlatformItemWriter()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValue()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<Environmen;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<Environmen)
  {
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.Se, type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC, (void (*)(uint64_t))type metadata accessor for LazyPlatformItemWriter<LazySearchSuggestionsKey, SearchFieldConfiguration.Suggestions?>);
    lazy protocol witness table accessor for type ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAc();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<Environmen);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAc()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCu;
  if (!lazy protocol witness table cache variable for type ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCu)
  {
    type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC(255);
    lazy protocol witness table accessor for type StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, Modifi();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCu);
  }
  return result;
}

void type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, Modifi()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ;
  if (!lazy protocol witness table cache variable for type StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, )
  {
    type metadata accessor for StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryVie();
    lazy protocol witness table accessor for type StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?,);
  }
  return result;
}

void type metadata accessor for StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryVie()
{
  if (!lazy cache variable for type metadata for StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedCo)
  {
    type metadata accessor for ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>();
    type metadata accessor for StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>();
    lazy protocol witness table accessor for type HasCustomScopeBarPredicate and conformance HasCustomScopeBarPredicate();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedCo);
    }
  }
}

unint64_t lazy protocol witness table accessor for type HasCustomScopeBarPredicate and conformance HasCustomScopeBarPredicate()
{
  unint64_t result = lazy protocol witness table cache variable for type HasCustomScopeBarPredicate and conformance HasCustomScopeBarPredicate;
  if (!lazy protocol witness table cache variable for type HasCustomScopeBarPredicate and conformance HasCustomScopeBarPredicate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomScopeBarPredicate and conformance HasCustomScopeBarPredicate);
  }
  return result;
}

void type metadata accessor for ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>()
{
  if (!lazy cache variable for type metadata for ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for EnvironmentValues.SearchCustomScopeBar?);
    type metadata accessor for StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>();
    lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory? and conformance <A> A?(&lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomScopeBar? and conformance <A> A?, &lazy cache variable for type metadata for EnvironmentValues.SearchCustomScopeBar?);
    lazy protocol witness table accessor for type StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>> and conformance <> StaticIf<A, B, C>();
    unint64_t v0 = type metadata accessor for ViewInputsBinding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>);
    }
  }
}

uint64_t type metadata accessor for ViewInputsBinding()
{
  return swift_getGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory? and conformance <A> A?(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AccessibilityValueStorage?(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>)
  {
    type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, MEMORY[0x1E4F40EE0], MEMORY[0x1E4F3FBA0]);
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(255);
    lazy protocol witness table accessor for type HasCustomAccessoryPredicate and conformance HasCustomAccessoryPredicate();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HasCustomAccessoryPredicate and conformance HasCustomAccessoryPredicate()
{
  unint64_t result = lazy protocol witness table cache variable for type HasCustomAccessoryPredicate and conformance HasCustomAccessoryPredicate;
  if (!lazy protocol witness table cache variable for type HasCustomAccessoryPredicate and conformance HasCustomAccessoryPredicate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomAccessoryPredicate and conformance HasCustomAccessoryPredicate);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _HiddenModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  int v10 = *((_DWORD *)a2 + 20);
  uint64_t v20 = *a7;
  uint64_t v12 = v7;
  int v13 = v8;
  uint64_t v14 = v9;
  long long v15 = *(_OWORD *)(a2 + 3);
  long long v16 = *(_OWORD *)(a2 + 5);
  long long v17 = *(_OWORD *)(a2 + 7);
  uint64_t v18 = a2[9];
  int v19 = v10;
  return makeHiddenView(allowedKeys:inputs:body:)(&v20, (uint64_t)&v12, a3);
}

uint64_t makeHiddenView(allowedKeys:inputs:body:)(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  int v8 = *(_DWORD *)(a2 + 80);
  uint64_t v21 = *(void *)a2;
  int v22 = v4;
  uint64_t v23 = v5;
  long long v24 = *(_OWORD *)(a2 + 24);
  uint64_t v25 = v6;
  uint64_t v26 = v7;
  long long v27 = *(_OWORD *)(a2 + 56);
  uint64_t v28 = *(void *)(a2 + 72);
  int v29 = v8;
  uint64_t v12 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.removeHiddenKeys(allowing:)(&v12);
  uint64_t v12 = v26;
  LODWORD(v13) = v27;
  LODWORD(v12) = PreferencesInputs.hostKeys.getter();
  uint64_t v13 = v3;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:) and conformance HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:)();
  Attribute.init<A>(body:value:flags:update:)();
  PreferencesInputs.hostKeys.setter();
  lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  if (v12)
  {
    uint64_t v12 = v3;
    (*(void (**)(uint64_t *, uint64_t *))(v13 + 8))(&v21, &v12);
  }
  uint64_t v12 = v21;
  LODWORD(v13) = v22;
  uint64_t v14 = v23;
  long long v15 = v24;
  uint64_t v16 = v25;
  uint64_t v17 = v26;
  long long v18 = v27;
  uint64_t v19 = v28;
  int v20 = v29;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v9 = swift_bridgeObjectRetain();
  a3(v9, &v12);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t *PreferenceKeys.removeHiddenKeys(allowing:)(uint64_t *result)
{
  uint64_t v1 = *result;
  if ((*result & 0x10) != 0)
  {
    if ((v1 & 4) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t result = (uint64_t *)PreferenceKeys.remove(_:)();
    if ((v1 & 4) != 0)
    {
LABEL_3:
      if (v1) {
        goto LABEL_4;
      }
LABEL_10:
      unint64_t result = (uint64_t *)PreferenceKeys.remove(_:)();
      if ((v1 & 8) != 0) {
        return result;
      }
      goto LABEL_5;
    }
  }
  unint64_t result = (uint64_t *)PreferenceKeys.remove(_:)();
  if ((v1 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v1 & 8) != 0) {
    return result;
  }
LABEL_5:

  return (uint64_t *)PreferenceKeys.remove(_:)();
}

unint64_t lazy protocol witness table accessor for type HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:) and conformance HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:)()
{
  unint64_t result = lazy protocol witness table cache variable for type HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:) and conformance HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:);
  if (!lazy protocol witness table cache variable for type HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:) and conformance HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:))
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:) and conformance HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:));
  }
  return result;
}

uint64_t protocol witness for static PlatformHiddenRepresentable.makeRepresentation(inputs:allowedKeys:) in conformance PlatformItemListHiddenRepresentable(uint64_t a1, unsigned char *a2)
{
  if ((*a2 & 2) == 0) {
    return PreferencesInputs.remove<A>(_:)();
  }
  return result;
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance PlatformItemListViewGraph(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_beginAccess();
  if ((*(unsigned char *)(a2 + 361) & 2) != 0)
  {
    uint64_t result = specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(2u);
    *(unsigned char *)(v2 + 8) = 1;
  }
  return result;
}

uint64_t specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(unsigned __int8 a1)
{
  int v1 = a1;
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemListTextRepresentable and conformance PlatformItemListTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListImageRepresentable and conformance PlatformItemListImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListNamedImageRepresentable and conformance PlatformItemListNamedImageRepresentable();
  _ViewInputs.requestedNamedImageRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListSpacerRepresentable and conformance PlatformItemListSpacerRepresentable();
  _ViewInputs.requestedSpacerRepresentation.setter();
  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey();
  uint64_t result = PropertyList.subscript.setter();
  if (v1 != 2)
  {
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    if (v1) {
      PropertyList.subscript.getter();
    }
    return PropertyList.subscript.setter();
  }
  return result;
}

{
  int v1;
  uint64_t result;

  int v1 = a1;
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemListTextRepresentable and conformance PlatformItemListTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListImageRepresentable and conformance PlatformItemListImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListNamedImageRepresentable and conformance PlatformItemListNamedImageRepresentable();
  _ViewInputs.requestedNamedImageRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListSpacerRepresentable and conformance PlatformItemListSpacerRepresentable();
  _ViewInputs.requestedSpacerRepresentation.setter();
  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey();
  uint64_t result = PropertyList.subscript.setter();
  if (v1 != 2)
  {
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    if (v1) {
      PropertyList.subscript.getter();
    }
    return PropertyList.subscript.setter();
  }
  return result;
}

{
  int v1;
  uint64_t result;

  int v1 = a1;
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemListTextRepresentable and conformance PlatformItemListTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListImageRepresentable and conformance PlatformItemListImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListNamedImageRepresentable and conformance PlatformItemListNamedImageRepresentable();
  _ViewInputs.requestedNamedImageRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemListSpacerRepresentable and conformance PlatformItemListSpacerRepresentable();
  _ViewInputs.requestedSpacerRepresentation.setter();
  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey();
  uint64_t result = PropertyList.subscript.setter();
  if (v1 != 2)
  {
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    if (v1) {
      PropertyList.subscript.getter();
    }
    return PropertyList.subscript.setter();
  }
  return result;
}

double static Divider._makeView(view:inputs:)@<D0>(uint64_t *a1@<X1>, double *a2@<X8>)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  int v2 = *((_DWORD *)a1 + 2);
  uint64_t v3 = a1[2];
  unsigned int v5 = *((_DWORD *)a1 + 6);
  unsigned int v4 = *((_DWORD *)a1 + 7);
  unsigned int v6 = *((_DWORD *)a1 + 8);
  unsigned int v7 = *((_DWORD *)a1 + 9);
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  unsigned int v10 = *((_DWORD *)a1 + 14);
  unsigned int v11 = *((_DWORD *)a1 + 15);
  unsigned int v12 = *((_DWORD *)a1 + 16);
  unsigned int v13 = *((_DWORD *)a1 + 17);
  unsigned int v14 = *((_DWORD *)a1 + 18);
  unsigned int v15 = *((_DWORD *)a1 + 19);
  int v16 = *((_DWORD *)a1 + 20);
  uint64_t v44 = *a1;
  int v28 = v2;
  int v45 = v2;
  uint64_t v46 = v3;
  *(void *)&long long v47 = __PAIR64__(v4, v5);
  unsigned int v29 = v6;
  unsigned int v30 = v4;
  *((void *)&v47 + 1) = __PAIR64__(v7, v6);
  uint64_t v48 = v8;
  uint64_t v49 = v9;
  *(void *)&long long v50 = __PAIR64__(v11, v10);
  unsigned int v24 = v12;
  unsigned int v25 = v11;
  *((void *)&v50 + 1) = __PAIR64__(v13, v12);
  unsigned int v22 = v14;
  unsigned int v23 = v13;
  unint64_t v51 = __PAIR64__(v15, v14);
  unsigned int v21 = v15;
  int v31 = v16;
  int v52 = v16;
  uint64_t v35 = v9;
  unsigned int v26 = v10;
  LODWORD(v36) = v10;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    PreferencesInputs.remove<A>(_:)();
    _ViewInputs.requestedTextRepresentation.setter();
  }
  unsigned int v27 = v5;
  if ((v7 & 4) == 0)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type Divider.Child and conformance Divider.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  uint64_t v35 = v44;
  LODWORD(v36) = v45;
  uint64_t v37 = v46;
  long long v38 = v47;
  uint64_t v39 = v48;
  uint64_t v40 = v49;
  long long v41 = v50;
  unint64_t v42 = v51;
  int v43 = v52;
  lazy protocol witness table accessor for type ResolvedDivider and conformance ResolvedDivider();
  static View.makeDebuggableView(view:inputs:)();
  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  uint64_t v17 = v44;
  if (v44)
  {
    uint64_t v18 = v36;
    uint64_t v35 = v44;
    LODWORD(v36) = v28;
    uint64_t v37 = v3;
    *(void *)&long long v38 = __PAIR64__(v30, v27);
    *((void *)&v38 + 1) = __PAIR64__(v7, v29);
    uint64_t v39 = v8;
    uint64_t v40 = v9;
    uint64_t v20 = v44;
    *(void *)&long long v41 = __PAIR64__(v25, v26);
    *((void *)&v41 + 1) = __PAIR64__(v23, v24);
    unint64_t v42 = __PAIR64__(v21, v22);
    int v43 = v31;
    if ((*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v18 + 8))(&v35, v44, v18))
    {
      uint64_t v35 = v20;
      LODWORD(v36) = v28;
      uint64_t v37 = v3;
      *(void *)&long long v38 = __PAIR64__(v30, v27);
      *((void *)&v38 + 1) = __PAIR64__(v7, v29);
      uint64_t v39 = v8;
      uint64_t v40 = v9;
      *(void *)&long long v41 = __PAIR64__(v25, v26);
      *((void *)&v41 + 1) = __PAIR64__(v23, v24);
      unint64_t v42 = __PAIR64__(v21, v22);
      int v43 = v31;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(v18 + 16))(&v35, &v33, v17, v18);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_release();
  *(void *)a2 = v33;
  double result = v34;
  a2[1] = v34;
  return result;
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey()
{
  unint64_t result = lazy protocol witness table cache variable for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey;
  if (!lazy protocol witness table cache variable for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Divider.Child and conformance Divider.Child()
{
  unint64_t result = lazy protocol witness table cache variable for type Divider.Child and conformance Divider.Child;
  if (!lazy protocol witness table cache variable for type Divider.Child and conformance Divider.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Divider.Child and conformance Divider.Child);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey()
{
  unint64_t result = lazy protocol witness table cache variable for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey;
  if (!lazy protocol witness table cache variable for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey()
{
  unint64_t result = lazy protocol witness table cache variable for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey;
  if (!lazy protocol witness table cache variable for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemListNamedImageRepresentable and conformance PlatformItemListNamedImageRepresentable()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListNamedImageRepresentable and conformance PlatformItemListNamedImageRepresentable;
  if (!lazy protocol witness table cache variable for type PlatformItemListNamedImageRepresentable and conformance PlatformItemListNamedImageRepresentable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListNamedImageRepresentable and conformance PlatformItemListNamedImageRepresentable);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemListSpacerRepresentable and conformance PlatformItemListSpacerRepresentable()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListSpacerRepresentable and conformance PlatformItemListSpacerRepresentable;
  if (!lazy protocol witness table cache variable for type PlatformItemListSpacerRepresentable and conformance PlatformItemListSpacerRepresentable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListSpacerRepresentable and conformance PlatformItemListSpacerRepresentable);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemListImageRepresentable and conformance PlatformItemListImageRepresentable()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListImageRepresentable and conformance PlatformItemListImageRepresentable;
  if (!lazy protocol witness table cache variable for type PlatformItemListImageRepresentable and conformance PlatformItemListImageRepresentable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListImageRepresentable and conformance PlatformItemListImageRepresentable);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemListTextRepresentable and conformance PlatformItemListTextRepresentable()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListTextRepresentable and conformance PlatformItemListTextRepresentable;
  if (!lazy protocol witness table cache variable for type PlatformItemListTextRepresentable and conformance PlatformItemListTextRepresentable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListTextRepresentable and conformance PlatformItemListTextRepresentable);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey()
{
  unint64_t result = lazy protocol witness table cache variable for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey;
  if (!lazy protocol witness table cache variable for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey);
  }
  return result;
}

uint64_t type metadata completion function for OptionalSourceWriter()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for AlwaysOnBridge()
{
  return swift_initClassMetadata2();
}

uint64_t getEnumTagSinglePayload for _ContentShapeKindModifier(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_25:
    if (v5 >= 0xFE) {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
    unsigned int v16 = *(unsigned __int8 *)(v6 + result);
    if (v16 >= 2) {
      return ((v16 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    return 0;
  }
  unint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 16;
  unsigned int v9 = a2 - v7;
  uint64_t v10 = v8 & 0xFFFFFFF8;
  if ((v8 & 0xFFFFFFF8) != 0) {
    unsigned int v11 = 2;
  }
  else {
    unsigned int v11 = v9 + 1;
  }
  if (v11 >= 0x10000) {
    unsigned int v12 = 4;
  }
  else {
    unsigned int v12 = 2;
  }
  if (v11 < 0x100) {
    unsigned int v12 = 1;
  }
  if (v11 >= 2) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  switch(v13)
  {
    case 1:
      int v14 = *(unsigned __int8 *)(result + v8);
      if (!v14) {
        goto LABEL_25;
      }
      goto LABEL_21;
    case 2:
      int v14 = *(unsigned __int16 *)(result + v8);
      if (!v14) {
        goto LABEL_25;
      }
      goto LABEL_21;
    case 3:
      __break(1u);
      return result;
    case 4:
      int v14 = *(_DWORD *)(result + v8);
      if (!v14) {
        goto LABEL_25;
      }
LABEL_21:
      int v15 = v14 - 1;
      if (v10)
      {
        int v15 = 0;
        LODWORD(v10) = *(_DWORD *)result;
      }
      uint64_t result = v7 + (v10 | v15) + 1;
      break;
    default:
      goto LABEL_25;
  }
  return result;
}

uint64_t objectdestroy_69Tm()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.setter in conformance EnableUnifiedLayoutFeature(char a1)
{
  uint64_t result = swift_beginAccess();
  static EnableUnifiedLayoutFeature.cacheduint64_t Value = a1;
  return result;
}

uint64_t dispatch thunk of _UIHostingView.rootView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x528))();
}

uint64_t key path setter for EnvironmentValues.multimodalListGridBadgeInfos : EnvironmentValues()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_bridgeObjectRelease();
}

uint64_t UIDropSession.itemProviders(for:)(uint64_t a1)
{
  id v3 = objc_msgSend(v1, sel_items);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  unint64_t v5 = specialized _ArrayProtocol.filter(_:)(v4, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v13 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v9 = (id)MEMORY[0x18C117680](v8, v5);
      }
      else {
        id v9 = *(id *)(v5 + 8 * v8 + 32);
      }
      uint64_t v10 = v9;
      ++v8;
      id v11 = objc_msgSend(v9, sel_itemProvider, v13);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v6 != v8);
    uint64_t v12 = v13;
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

void type metadata accessor for ModifiedContent<_VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>, StyleContextWriter<MultimodalListContext>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>, StyleContextWriter<MultimodalListContext>>)
  {
    type metadata accessor for _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>();
    type metadata accessor for StyleContextWriter<MultimodalListContext>(255, &lazy cache variable for type metadata for StyleContextWriter<MultimodalListContext>, MEMORY[0x1E4F407F8], MEMORY[0x1E4F407F0], MEMORY[0x1E4F40318]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>, StyleContextWriter<MultimodalListContext>>);
    }
  }
}

uint64_t static MultimodalListStyle._makeViewList<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

void type metadata accessor for _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>)
  {
    type metadata accessor for ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>, (uint64_t)&type metadata for MultimodalListStyle.IconStyle);
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>);
    }
  }
}

Swift::Void __swiftcall DropInfoAdaptor.setDropTargetTransform(_:at:)(CGAffineTransform_optional *_, Swift::Int at)
{
  uint64_t v3 = v2;
  outlined init with take of CGAffineTransform?((uint64_t)_, (uint64_t)v28);
  uint64_t v6 = v28[0];
  uint64_t v7 = v28[1];
  uint64_t v8 = v28[2];
  uint64_t v9 = v28[3];
  uint64_t v10 = v28[4];
  uint64_t v11 = v28[5];
  uint64_t v12 = (void *)MEMORY[0x18C119DF0](v3);
  if (!v12) {
    return;
  }
  id v13 = objc_msgSend(v12, sel_items);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v14 & 0xC000000000000001) != 0)
  {
    id v15 = (id)MEMORY[0x18C117680](at, v14);
    goto LABEL_6;
  }
  if (at < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)at)
  {
LABEL_15:
    __break(1u);
    return;
  }
  id v15 = *(id *)(v14 + 8 * at + 32);
LABEL_6:
  unsigned int v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(v3 + 8);
  if (v17)
  {
    uint64_t v18 = (uint64_t *)(v17 + 24);
    swift_beginAccess();
    outlined init with take of CGAffineTransform?((uint64_t)_, (uint64_t)v29);
    if (v29[48])
    {
      id v19 = v16;
      specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v19, (uint64_t)&v23);
    }
    else
    {
      *(void *)&long long v23 = v6;
      *((void *)&v23 + 1) = v7;
      uint64_t v24 = v8;
      uint64_t v25 = v9;
      uint64_t v26 = v10;
      uint64_t v27 = v11;
      id v20 = v16;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v22 = *v18;
      *uint64_t v18 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v23, v20, isUniquelyReferenced_nonNull_native);
      *uint64_t v18 = v22;

      swift_bridgeObjectRelease();
    }
    swift_endAccess();
  }
  swift_unknownObjectRelease();
}

uint64_t outlined init with take of CGAffineTransform?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for DisplayList.ArchiveIDs?(0, &lazy cache variable for type metadata for CGAffineTransform?, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for DisplayList.ArchiveIDs?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t partial apply for closure #1 in View.alert<A, B, C>(_:isPresented:actions:message:auxiliaryContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  long long v15 = *(_OWORD *)(v2 + 56);
  long long v16 = *(_OWORD *)(v2 + 40);
  unint64_t v8 = (*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  unint64_t v9 = v8 + *(void *)(*(void *)(v6 - 8) + 64);
  unint64_t v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)(type metadata accessor for ModifiedContent() - 8);
  unint64_t v13 = (v11 + *(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  return closure #1 in View.alert<A, B, C>(_:isPresented:actions:message:auxiliaryContent:)(a1, v2 + v8, *(void *)(v2 + v10), *(void *)(v2 + v10 + 8), *(unsigned __int8 *)(v2 + v10 + 16), *(void *)(v2 + v11), *(void *)(v2 + v11 + 8), *(unsigned __int8 *)(v2 + v11 + 16), a2, *(void *)(v2 + v11 + 24), v2 + v13, v2+ ((v13 + *(void *)(v12 + 64) + *(unsigned __int8 *)(*(void *)(v7 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80)), v6, v5, v7, v16, *((uint64_t *)&v16 + 1), v15,
           *((uint64_t *)&v15 + 1));
}

uint64_t DragReorderableLayoutCore.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v61 = a2;
  uint64_t v63 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, (uint64_t)&type metadata for MappedViewElement.Placeholder, MEMORY[0x1E4F40578]);
  *(void *)&long long v60 = swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<MappedViewElement.Placeholder, _EnvironmentKeyWritingModifier<Bool>>, DragReorderableChildModifier>, MappedViewElement.Placeholder> and conformance <> _ConditionalContent<A, B>();
  type metadata accessor for MappedViews();
  uint64_t v58 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v76 = v58;
  *(void *)&long long v77 = MEMORY[0x1E4FBB550];
  *((void *)&v77 + 1) = AssociatedConformanceWitness;
  uint64_t v78 = MEMORY[0x1E4FBB560];
  type metadata accessor for IDView();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  uint64_t WitnessTable = swift_getWitnessTable();
  unsigned int v85 = &protocol witness table for HiddenModifierAllowingViewResponders;
  uint64_t v49 = MEMORY[0x1E4F3FBC0];
  uint64_t v82 = swift_getWitnessTable();
  unsigned int v83 = &protocol witness table for DragReorderableChildModifier;
  uint64_t v81 = swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for DropPlaceholderListModifier();
  uint64_t v41 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v41);
  uint64_t v3 = (char *)&v40 - v2;
  uint64_t v4 = swift_getAssociatedTypeWitness();
  uint64_t v43 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v40 - v5;
  uint64_t v44 = swift_getAssociatedConformanceWitness();
  uint64_t v50 = *(void *)(v44 + 8);
  uint64_t v42 = *(void *)(v50 + 8);
  uint64_t v7 = type metadata accessor for _VariadicView.Tree();
  uint64_t v51 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v9 = (char *)&v40 - v8;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v52 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v46 = (char *)&v40 - v11;
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v54 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v47 = (char *)&v40 - v13;
  type metadata accessor for _ContentShapeKindModifier<Rectangle>(255, &lazy cache variable for type metadata for _ContentShapeKindModifier<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E4F41830], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeKindModifier);
  uint64_t v40 = type metadata accessor for ModifiedContent();
  uint64_t v55 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  int v45 = (char *)&v40 - v14;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v56 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v48 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v53 = (char *)&v40 - v19;
  uint64_t v20 = v62;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v43 + 16))(v6, v62, v4, v18);
  DragReorderableLayoutCore.children.getter(v63, (uint64_t)v3);
  _VariadicView.Tree.init(root:content:)();
  uint64_t v76 = v4;
  *(void *)&long long v77 = AssociatedTypeWitness;
  *((void *)&v77 + 1) = v58;
  uint64_t v78 = v44;
  unsigned int v79 = (_UNKNOWN **)v60;
  uint64_t v80 = AssociatedConformanceWitness;
  unsigned int v21 = (long long *)(v20 + *(int *)(type metadata accessor for DragReorderableLayoutAdaptor() + 72));
  long long v60 = *v21;
  uint64_t v22 = *((void *)v21 + 2);
  long long v23 = (_UNKNOWN **)*((void *)v21 + 3);
  LOBYTE(v76) = static Edge.Set.all.getter();
  long long v77 = v60;
  uint64_t v78 = v22;
  unsigned int v79 = v23;
  LOBYTE(v80) = 0;
  uint64_t v74 = &protocol witness table for MappedViews<A, B>;
  int v75 = &protocol witness table for DropPlaceholderListModifier<A>;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v72 = v50;
  uint64_t v73 = v24;
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v26 = v46;
  MEMORY[0x18C113660](&v76, v7, MEMORY[0x1E4F3FA80], v25);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v9, v7);
  uint64_t v70 = v25;
  uint64_t v71 = MEMORY[0x1E4F3FA78];
  uint64_t v27 = swift_getWitnessTable();
  int v28 = v47;
  MEMORY[0x18C113660](v27, v10, &unk_1ED4248A8, v27);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v26, v10);
  uint64_t v76 = 1;
  uint64_t v68 = v27;
  uint64_t v69 = &protocol witness table for ReorderableLayout;
  uint64_t v29 = swift_getWitnessTable();
  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  unsigned int v30 = v45;
  View.contentShape<A>(_:_:eoFill:)(&v76, v31, 0, v12, MEMORY[0x1E4F41830], v29);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v28, v12);
  uint64_t v32 = *(void *)(v62 + *(int *)(v63 + 36));
  uint64_t v33 = *(void *)(v32 + 24);
  uint64_t v78 = type metadata accessor for DragReorderableLayoutCoordinator();
  unsigned int v79 = &protocol witness table for DragReorderableLayoutCoordinator;
  uint64_t v76 = v32;
  uint64_t v66 = v29;
  uint64_t v67 = &protocol witness table for _ContentShapeKindModifier<A>;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v34 = v40;
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v36 = v48;
  View.onDrop(of:delegate:)(v33, (uint64_t)&v76, v34, v35);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v30, v34);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v76);
  uint64_t v64 = v35;
  uint64_t v65 = &protocol witness table for DropModifier;
  swift_getWitnessTable();
  uint64_t v37 = v53;
  static ViewBuilder.buildExpression<A>(_:)(v36);
  long long v38 = *(void (**)(char *, uint64_t))(v56 + 8);
  v38(v36, v15);
  static ViewBuilder.buildExpression<A>(_:)(v37);
  return ((uint64_t (*)(char *, uint64_t))v38)(v37, v15);
}

uint64_t MultimodalListStyle.Body.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v14 = &type metadata for MultimodalListStyle;
  uint64_t v15 = a1;
  uint64_t v16 = &protocol witness table for MultimodalListStyle;
  uint64_t v17 = a2;
  uint64_t v6 = type metadata accessor for _ListValue();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = (char *)&v14 - v8;
  MultimodalListStyle.Body.base.getter((uint64_t)&v14 - v8);
  char v10 = *v9;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  LOBYTE(v6) = *(unsigned char *)AGGraphGetValue();
  uint64_t result = closure #1 in MultimodalListStyle.Body.value.getter(a1, a2, (uint64_t)&v14);
  uint64_t v12 = v14;
  char v13 = v15;
  *(unsigned char *)a3 = v10;
  *(unsigned char *)(a3 + 1) = v6;
  *(void *)(a3 + 8) = v12;
  *(unsigned char *)(a3 + 16) = v13;
  return result;
}

uint64_t closure #1 in View.alert<A, B, C>(_:isPresented:actions:message:auxiliaryContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  int v82 = a8;
  uint64_t v84 = a7;
  uint64_t v83 = a6;
  int v72 = a5;
  uint64_t v19 = a4;
  uint64_t v61 = a4;
  uint64_t v86 = a2;
  uint64_t v87 = a9;
  uint64_t v81 = a10;
  uint64_t v76 = a11;
  uint64_t v77 = a12;
  uint64_t v74 = a13;
  uint64_t v67 = a19;
  uint64_t v65 = a15;
  uint64_t v75 = *(void *)(a15 - 8);
  uint64_t v85 = a17;
  MEMORY[0x1F4188790](a1);
  uint64_t v70 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for ModifiedContent();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v64 = (char *)&v52 - v25;
  unint64_t v26 = lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier();
  uint64_t v101 = a18;
  unint64_t v102 = v26;
  uint64_t v80 = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v90 = v23;
  *((void *)&v90 + 1) = a15;
  uint64_t v91 = WitnessTable;
  uint64_t v92 = a19;
  uint64_t v73 = type metadata accessor for AlertModifier();
  uint64_t v78 = *(void *)(v73 - 8);
  MEMORY[0x1F4188790](v73);
  uint64_t v66 = (uint64_t)&v52 - v27;
  uint64_t v63 = type metadata accessor for ModifiedContent();
  uint64_t v79 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v69 = (char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v71 = (char *)&v52 - v30;
  uint64_t v60 = *(unsigned int *)(a1 + 16);
  uint64_t v31 = *(void **)(a1 + 32);
  uint64_t v58 = *(void *)(a1 + 24);
  id v62 = v31;
  uint64_t v54 = *(void *)(a1 + 40);
  uint64_t v32 = v54;
  uint64_t v57 = *(unsigned int *)(a1 + 48);
  uint64_t v59 = *(void *)(a1 + 56);
  uint64_t v33 = v59;
  uint64_t v56 = *(void *)(a1 + 64);
  uint64_t v34 = *(void *)(a1 + 80);
  uint64_t v55 = *(void *)(a1 + 72);
  *(void *)&long long v90 = a3;
  *((void *)&v90 + 1) = v19;
  LOBYTE(v19) = v72;
  LOBYTE(v91) = v72;
  type metadata accessor for Binding<Bool>();
  long long v52 = *(_OWORD *)a1;
  MEMORY[0x18C113DA0](&v100);
  int v53 = v100;
  uint64_t v35 = v64;
  uint64_t v36 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v64, v76, v23);
  uint64_t v37 = (uint64_t)v70;
  uint64_t v38 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v70, v77, v65);
  long long v90 = v52;
  uint64_t v91 = v60;
  uint64_t v92 = v58;
  uint64_t v93 = v31;
  uint64_t v94 = v32;
  uint64_t v95 = v57;
  uint64_t v96 = v33;
  uint64_t v97 = v56;
  uint64_t v98 = v55;
  uint64_t v99 = v34;
  LOBYTE(v34) = v82 & 1;
  uint64_t v51 = v36;
  uint64_t v50 = (uint64_t)v35;
  uint64_t v39 = v66;
  uint64_t v40 = v83;
  uint64_t v41 = v84;
  AlertModifier.init(presentedValue:isPresented:title:actions:message:auxiliaryContent:representsError:)(v53, a3, v61, v19, v83, v84, v82 & 1, v81, v66, v50, v37, &v90, 0, v51, v38);
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v40, v41, v34);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v42 = v62;
  uint64_t v43 = v69;
  uint64_t v44 = v73;
  uint64_t v45 = v85;
  MEMORY[0x18C113660](v39, v74, v73, v85);
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v39, v44);
  uint64_t v88 = v45;
  Swift::Int v89 = &protocol witness table for AlertModifier<A, B>;
  uint64_t v46 = v63;
  swift_getWitnessTable();
  long long v47 = v71;
  static ViewBuilder.buildExpression<A>(_:)(v43);
  uint64_t v48 = *(void (**)(char *, uint64_t))(v79 + 8);
  v48(v43, v46);
  static ViewBuilder.buildExpression<A>(_:)(v47);
  return ((uint64_t (*)(char *, uint64_t))v48)(v47, v46);
}

void type metadata accessor for Binding<Bool>()
{
  if (!lazy cache variable for type metadata for Binding<Bool>)
  {
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>);
    }
  }
}

uint64_t EnvironmentValues.multimodalListGridBadgeInfos.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for StyleContextWriter<MultimodalListContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey>, (uint64_t)&type metadata for GridBadgeInfoEnvironmentKey, (uint64_t)&protocol witness table for GridBadgeInfoEnvironmentKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for StyleContextWriter<MultimodalListContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey>, (uint64_t)&type metadata for GridBadgeInfoEnvironmentKey, (uint64_t)&protocol witness table for GridBadgeInfoEnvironmentKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<MultimodalListContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<MultimodalListContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<MultimodalListContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for StyleContextWriter<MultimodalListContext>(255, &lazy cache variable for type metadata for StyleContextWriter<MultimodalListContext>, MEMORY[0x1E4F407F8], MEMORY[0x1E4F407F0], MEMORY[0x1E4F40318]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MultimodalListContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

void type metadata accessor for StyleContextWriter<MultimodalListContext>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void *initializeWithCopy for NavigationStackReader(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  unint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v6[1] = *(void *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
  void v6[2] = *(void *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(void *)(v7 - 8) + 16;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 24) & ~v10;
  unint64_t v12 = (v10 + 24 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  swift_retain();
  swift_retain();
  swift_retain();
  v8(v11, v12, v7);
  uint64_t v13 = *(void *)(v9 + 48);
  uint64_t v14 = v13 + v11;
  uint64_t v15 = v13 + v12;
  *(unsigned char *)uint64_t v14 = *(unsigned char *)v15;
  v14 &= 0xFFFFFFFFFFFFFFF8;
  v15 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  uint64_t v16 = (void *)((v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)((v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  swift_retain();
  swift_retain();
  return a1;
}

ValueMetadata *type metadata accessor for PopoverPresentationKeyType()
{
  return &type metadata for PopoverPresentationKeyType;
}

uint64_t type metadata accessor for AnyUIKitNavigationBridge()
{
  return self;
}

uint64_t outlined init with copy of ToolbarStorage.Entry.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ToolbarStorage.GroupItem.CollapsedContent(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void destroy for ToolbarStorage.Entry.Kind(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(a1 + 88) == 1) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 104);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v3 = a1 + *(int *)(type metadata accessor for ToolbarStorage.Item(0) + 48);
    uint64_t v4 = type metadata accessor for PlatformItemList.Item();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4)) {
      goto LABEL_36;
    }

    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v5 = *(void *)(v3 + 184);
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if ((v5 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v7 = *(unsigned __int8 *)(v3 + 72);
      if (v7 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v3 + 64), v7);
        uint64_t v5 = *(void *)(v3 + 184);
        unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v6 != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(v3 + 168), *(void *)(v3 + 176), v5);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    if (*(void *)(v3 + 256))
    {
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void **)(v3 + 264);
      if ((unint64_t)v8 >= 2) {

      }
      swift_release();
      swift_release();
    }
    unint64_t v9 = *(void *)(v3 + 328);
    if (v9 >> 2 != 0xFFFFFFFF) {
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v3 + 296), *(void *)(v3 + 304), *(void *)(v3 + 312), *(void *)(v3 + 320), v9, *(void *)(v3 + 336), *(void *)(v3 + 344), *(void *)(v3 + 352), *(void *)(v3 + 360), *(void *)(v3 + 368), *(void *)(v3 + 376), *(void *)(v3 + 384), *(void *)(v3 + 392));
    }
    uint64_t v10 = *(void *)(v3 + 408);
    if (v10)
    {
      if (v10 == 1)
      {
LABEL_25:
        swift_bridgeObjectRelease();
        if (*(void *)(v3 + 504)) {
          swift_release();
        }
        if (*(void *)(v3 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(void *)(v3 + 552) != 1)
        {
          swift_release();
          if (*(void *)(v3 + 560)) {
            swift_release();
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v11 = v3 + *(int *)(v4 + 112);
        uint64_t v12 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
        {
          uint64_t v13 = v11 + *(int *)(v12 + 20);
          outlined consume of Text.Storage(*(void *)v13, *(void *)(v13 + 8), *(unsigned char *)(v13 + 16));
          swift_bridgeObjectRelease();
          uint64_t v14 = v13 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          uint64_t v15 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
          if (*(void *)(v11 + *(int *)(v12 + 24))) {
            swift_release();
          }
        }
        swift_release();
LABEL_36:
        swift_weakDestroy();
        return;
      }
      swift_release();
    }
    if (*(void *)(v3 + 424)) {
      swift_release();
    }
    if (*(void *)(v3 + 440)) {
      swift_release();
    }
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(a1 + 56) == 1) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = a1 + *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
  uint64_t v17 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17))
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      __swift_destroy_boxed_opaque_existential_1(v16);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void **)(v16 + 80);

      return;
    }

    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v18 = *(void *)(v16 + 184);
    unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
    if ((v18 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v20 = *(unsigned __int8 *)(v16 + 72);
      if (v20 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v16 + 64), v20);
        uint64_t v18 = *(void *)(v16 + 184);
        unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v19 != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(v16 + 168), *(void *)(v16 + 176), v18);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    if (*(void *)(v16 + 256))
    {
      swift_bridgeObjectRelease();
      unsigned int v21 = *(void **)(v16 + 264);
      if ((unint64_t)v21 >= 2) {

      }
      swift_release();
      swift_release();
    }
    unint64_t v22 = *(void *)(v16 + 328);
    if (v22 >> 2 != 0xFFFFFFFF) {
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v16 + 296), *(void *)(v16 + 304), *(void *)(v16 + 312), *(void *)(v16 + 320), v22, *(void *)(v16 + 336), *(void *)(v16 + 344), *(void *)(v16 + 352), *(void *)(v16 + 360), *(void *)(v16 + 368), *(void *)(v16 + 376), *(void *)(v16 + 384), *(void *)(v16 + 392));
    }
    uint64_t v23 = *(void *)(v16 + 408);
    if (v23)
    {
      if (v23 == 1)
      {
LABEL_63:
        swift_bridgeObjectRelease();
        if (*(void *)(v16 + 504)) {
          swift_release();
        }
        if (*(void *)(v16 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(void *)(v16 + 552) != 1)
        {
          swift_release();
          if (*(void *)(v16 + 560)) {
            swift_release();
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v24 = v16 + *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
        uint64_t v25 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v24, 1, v25))
        {
          uint64_t v26 = v24 + *(int *)(v25 + 20);
          outlined consume of Text.Storage(*(void *)v26, *(void *)(v26 + 8), *(unsigned char *)(v26 + 16));
          swift_bridgeObjectRelease();
          uint64_t v27 = v26 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          uint64_t v28 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v27, v28);
          if (*(void *)(v24 + *(int *)(v25 + 24))) {
            swift_release();
          }
        }
        swift_release();
        return;
      }
      swift_release();
    }
    if (*(void *)(v16 + 424)) {
      swift_release();
    }
    if (*(void *)(v16 + 440)) {
      swift_release();
    }
    goto LABEL_63;
  }
}

uint64_t outlined destroy of ToolbarStorage.NavigationProperties(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of ToolbarStorage.Entry(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

char *initializeWithCopy for ToolbarStorage.Entry.Kind(char *a1, unsigned __int8 *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = *((void *)a2 + 1);
    *(void *)a1 = *(void *)a2;
    *((void *)a1 + 1) = v10;
    int v11 = a2[56];
    swift_bridgeObjectRetain();
    if (v11 == 1)
    {
      long long v12 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 40) = v12;
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
      a1[56] = 1;
    }
    else
    {
      long long v25 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v25;
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    }
    a1[57] = a2[57];
    *((_WORD *)a1 + 29) = *((_WORD *)a2 + 29);
    uint64_t v26 = *((void *)a2 + 9);
    *((void *)a1 + 8) = *((void *)a2 + 8);
    *((void *)a1 + 9) = v26;
    uint64_t v27 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
    uint64_t v28 = (void **)&a1[v27];
    uint64_t v29 = (void **)&a2[v27];
    uint64_t v30 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    if (v32(v29, 1, v30))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
      memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64));
LABEL_108:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      long long v72 = *(_OWORD *)(v29 + 3);
      *(_OWORD *)(v28 + 3) = v72;
      (**(void (***)(void **, void **))(v72 - 8))(v28, v29);
      v28[5] = v29[5];
      v28[6] = v29[6];
      void v28[7] = v29[7];
      *((_OWORD *)v28 + 4) = *((_OWORD *)v29 + 4);
      uint64_t v73 = v29[10];
      v28[10] = v73;
      swift_retain();
      swift_bridgeObjectRetain();
      id v74 = v73;
LABEL_107:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void **, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_108;
    }
    uint64_t v215 = v31;
    long long v52 = *v29;
    int v53 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v53;
    uint64_t v54 = v29[3];
    v28[2] = v29[2];
    v28[3] = v54;
    *((unsigned char *)v28 + 32) = *((unsigned char *)v29 + 32);
    uint64_t v55 = v29[6];
    v28[5] = v29[5];
    v28[6] = v55;
    *((unsigned char *)v28 + 56) = *((unsigned char *)v29 + 56);
    uint64_t v56 = v28 + 8;
    uint64_t v57 = v29 + 8;
    unint64_t v58 = (unint64_t)v29[23];
    id v59 = v52;
    id v60 = v53;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v58 >> 1 == 4294967294)
    {
      long long v61 = *((_OWORD *)v29 + 13);
      *((_OWORD *)v28 + 12) = *((_OWORD *)v29 + 12);
      *((_OWORD *)v28 + 13) = v61;
      *((_OWORD *)v28 + 14) = *((_OWORD *)v29 + 14);
      *(_DWORD *)((char *)v28 + 239) = *(_DWORD *)((char *)v29 + 239);
      long long v62 = *((_OWORD *)v29 + 9);
      *((_OWORD *)v28 + 8) = *((_OWORD *)v29 + 8);
      *((_OWORD *)v28 + 9) = v62;
      long long v63 = *((_OWORD *)v29 + 11);
      *((_OWORD *)v28 + 10) = *((_OWORD *)v29 + 10);
      *((_OWORD *)v28 + 11) = v63;
      long long v64 = *((_OWORD *)v29 + 5);
      *uint64_t v56 = *v57;
      *((_OWORD *)v28 + 5) = v64;
      long long v65 = *((_OWORD *)v29 + 7);
      *((_OWORD *)v28 + 6) = *((_OWORD *)v29 + 6);
      *((_OWORD *)v28 + 7) = v65;
      uint64_t v66 = v29[32];
      if (v66)
      {
LABEL_22:
        v28[31] = v29[31];
        v28[32] = v66;
        uint64_t v67 = v29[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v67 >= 2) {
          id v68 = v67;
        }
        v28[33] = v67;
        *((_DWORD *)v28 + 68) = *((_DWORD *)v29 + 68);
        *((unsigned char *)v28 + 276) = *((unsigned char *)v29 + 276);
        *(_WORD *)((char *)v28 + 277) = *(_WORD *)((char *)v29 + 277);
        uint64_t v69 = v29[36];
        v28[35] = v29[35];
        v28[36] = v69;
        swift_retain();
        swift_retain();
        goto LABEL_74;
      }
    }
    else
    {
      int v75 = *((unsigned __int8 *)v29 + 72);
      if (v75 == 255)
      {
        *(void *)uint64_t v56 = *(void *)v57;
        *((unsigned char *)v28 + 72) = *((unsigned char *)v29 + 72);
      }
      else
      {
        uint64_t v76 = v29[8];
        outlined copy of GraphicsImage.Contents(v76, *((unsigned char *)v29 + 72));
        v28[8] = v76;
        *((unsigned char *)v28 + 72) = v75;
        unint64_t v58 = (unint64_t)v29[23];
      }
      v28[10] = v29[10];
      *(_OWORD *)(v28 + 11) = *(_OWORD *)(v29 + 11);
      *((unsigned char *)v28 + 104) = *((unsigned char *)v29 + 104);
      *(_OWORD *)((char *)v28 + 108) = *(_OWORD *)((char *)v29 + 108);
      *((unsigned char *)v28 + 124) = *((unsigned char *)v29 + 124);
      long long v133 = *((_OWORD *)v29 + 9);
      *((_OWORD *)v28 + 8) = *((_OWORD *)v29 + 8);
      *((_OWORD *)v28 + 9) = v133;
      *((_WORD *)v28 + 80) = *((_WORD *)v29 + 80);
      *((unsigned char *)v28 + 162) = *((unsigned char *)v29 + 162);
      *((unsigned char *)v28 + 163) = *((unsigned char *)v29 + 163);
      if (v58 >> 1 == 0xFFFFFFFF)
      {
        long long v134 = *(_OWORD *)(v29 + 23);
        *(_OWORD *)(v28 + 21) = *(_OWORD *)(v29 + 21);
        *(_OWORD *)(v28 + 23) = v134;
      }
      else
      {
        uint64_t v135 = (uint64_t)v29[21];
        uint64_t v136 = (uint64_t)v29[22];
        v137 = v29[24];
        outlined copy of AccessibilityImageLabel(v135, v136, v58);
        v28[21] = (void *)v135;
        v28[22] = (void *)v136;
        v28[23] = (void *)v58;
        v28[24] = v137;
      }
      v138 = v29[26];
      v28[25] = v29[25];
      v28[26] = v138;
      *((_WORD *)v28 + 108) = *((_WORD *)v29 + 108);
      *((_DWORD *)v28 + 55) = *((_DWORD *)v29 + 55);
      *((unsigned char *)v28 + 224) = *((unsigned char *)v29 + 224);
      v139 = v29[29];
      v28[29] = v139;
      *((_WORD *)v28 + 120) = *((_WORD *)v29 + 120);
      *((unsigned char *)v28 + 242) = *((unsigned char *)v29 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v140 = v139;
      uint64_t v66 = v29[32];
      if (v66) {
        goto LABEL_22;
      }
    }
    long long v141 = *(_OWORD *)(v29 + 33);
    *(_OWORD *)(v28 + 31) = *(_OWORD *)(v29 + 31);
    *(_OWORD *)(v28 + 33) = v141;
    *(_OWORD *)(v28 + 35) = *(_OWORD *)(v29 + 35);
LABEL_74:
    unint64_t v142 = (unint64_t)v29[41];
    if (v142 >> 2 == 0xFFFFFFFF)
    {
      long long v143 = *(_OWORD *)(v29 + 47);
      *(_OWORD *)(v28 + 45) = *(_OWORD *)(v29 + 45);
      *(_OWORD *)(v28 + 47) = v143;
      v28[49] = v29[49];
      long long v144 = *(_OWORD *)(v29 + 39);
      *(_OWORD *)(v28 + 37) = *(_OWORD *)(v29 + 37);
      *(_OWORD *)(v28 + 39) = v144;
      long long v145 = *(_OWORD *)(v29 + 43);
      *(_OWORD *)(v28 + 41) = *(_OWORD *)(v29 + 41);
      *(_OWORD *)(v28 + 43) = v145;
    }
    else
    {
      uint64_t v146 = v29[37];
      uint64_t v147 = (uint64_t)v29[38];
      uint64_t v191 = (uint64_t)v29[40];
      uint64_t v194 = (uint64_t)v29[39];
      uint64_t v148 = (uint64_t)v29[42];
      uint64_t v149 = (uint64_t)v29[43];
      v150 = v29[44];
      uint64_t v197 = (uint64_t)v29[45];
      __dstb = v29[46];
      uint64_t v205 = (uint64_t)v29[47];
      uint64_t v209 = v29[48];
      uint64_t v212 = (uint64_t)v29[49];
      outlined copy of PlatformItemList.Item.SystemItem(v146, v147, v194, v191, v142, v148, v149, (char)v150, v197, (uint64_t)__dstb, v205, (char)v209, v212);
      v28[37] = v146;
      v28[38] = (void *)v147;
      v28[39] = (void *)v194;
      v28[40] = (void *)v191;
      v28[41] = (void *)v142;
      v28[42] = (void *)v148;
      v28[43] = (void *)v149;
      v28[44] = v150;
      v28[45] = (void *)v197;
      v28[46] = __dstb;
      v28[47] = (void *)v205;
      v28[48] = v209;
      v28[49] = (void *)v212;
    }
    v151 = v29[51];
    if (v151 == (void *)1)
    {
      long long v152 = *((_OWORD *)v29 + 28);
      *((_OWORD *)v28 + 27) = *((_OWORD *)v29 + 27);
      *((_OWORD *)v28 + 28) = v152;
      *((unsigned char *)v28 + 464) = *((unsigned char *)v29 + 464);
      long long v153 = *((_OWORD *)v29 + 26);
      *((_OWORD *)v28 + 25) = *((_OWORD *)v29 + 25);
      *((_OWORD *)v28 + 26) = v153;
    }
    else
    {
      *((_DWORD *)v28 + 100) = *((_DWORD *)v29 + 100);
      *((unsigned char *)v28 + 404) = *((unsigned char *)v29 + 404);
      if (v151)
      {
        v154 = v29[52];
        v28[51] = v151;
        v28[52] = v154;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v28 + 51) = *(_OWORD *)(v29 + 51);
      }
      uint64_t v155 = v29[53];
      if (v155)
      {
        v156 = v29[54];
        v28[53] = v155;
        v28[54] = v156;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v28 + 53) = *(_OWORD *)(v29 + 53);
      }
      unint64_t v157 = v29[55];
      if (v157)
      {
        v158 = v29[56];
        v28[55] = v157;
        v28[56] = v158;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v28 + 55) = *(_OWORD *)(v29 + 55);
      }
      v28[57] = v29[57];
      *((unsigned char *)v28 + 464) = *((unsigned char *)v29 + 464);
    }
    v159 = v29[60];
    v28[59] = v29[59];
    v28[60] = v159;
    v28[61] = v29[61];
    *((unsigned char *)v28 + 496) = *((unsigned char *)v29 + 496);
    uint64_t v160 = v29[63];
    swift_bridgeObjectRetain();
    if (v160)
    {
      unint64_t v161 = v29[64];
      v28[63] = v160;
      v28[64] = v161;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v28 + 63) = *(_OWORD *)(v29 + 63);
    }
    *((_WORD *)v28 + 260) = *((_WORD *)v29 + 260);
    uint64_t v162 = v29[66];
    if (v162)
    {
      v28[66] = v162;
      v28[67] = v29[67];
      v28[68] = v29[68];
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *((_OWORD *)v28 + 33) = *((_OWORD *)v29 + 33);
      v28[68] = v29[68];
    }
    uint64_t v163 = v29[69];
    uint64_t v217 = v30;
    if (v163 == (void *)1)
    {
      *(_OWORD *)(v28 + 69) = *(_OWORD *)(v29 + 69);
      v28[71] = v29[71];
    }
    else
    {
      v28[69] = v163;
      v164 = v29[70];
      swift_retain();
      if (v164)
      {
        v165 = v29[71];
        v28[70] = v164;
        v28[71] = v165;
        swift_retain();
      }
      else
      {
        *((_OWORD *)v28 + 35) = *((_OWORD *)v29 + 35);
      }
    }
    v166 = v29[72];
    v28[72] = v166;
    v28[73] = v29[73];
    v28[74] = v29[74];
    v28[75] = v29[75];
    v28[76] = v29[76];
    v28[77] = v29[77];
    v28[78] = v29[78];
    *((_WORD *)v28 + 316) = *((_WORD *)v29 + 316);
    *((unsigned char *)v28 + 634) = *((unsigned char *)v29 + 634);
    uint64_t v167 = type metadata accessor for PlatformItemList.Item();
    uint64_t v168 = *(int *)(v167 + 112);
    uint64_t v210 = (char *)v28 + v168;
    v213 = (int *)v167;
    unint64_t v169 = (char *)v29 + v168;
    uint64_t v170 = type metadata accessor for CommandOperation();
    uint64_t v198 = *(void *)(v170 - 8);
    __dstc = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v198 + 48);
    id v171 = v166;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__dstc(v169, 1, v170))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
      memcpy(v210, v169, *(void *)(*(void *)(v172 - 8) + 64));
      uint64_t v30 = v217;
      uint64_t v31 = v215;
    }
    else
    {
      *uint64_t v210 = *v169;
      uint64_t v173 = *(int *)(v170 + 20);
      uint64_t v174 = &v210[v173];
      __dstd = v169;
      uint64_t v206 = v170;
      uint64_t v175 = &v169[v173];
      uint64_t v176 = *(void *)&v169[v173];
      uint64_t v177 = *((void *)v175 + 1);
      char v178 = v175[16];
      outlined copy of Text.Storage(v176, v177, v178);
      *(void *)uint64_t v174 = v176;
      *((void *)v174 + 1) = v177;
      v174[16] = v178;
      *((void *)v174 + 3) = *((void *)v175 + 3);
      uint64_t v179 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v180 = &v174[v179];
      v181 = &v175[v179];
      uint64_t v182 = type metadata accessor for UUID();
      v183 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v182 - 8) + 16);
      swift_bridgeObjectRetain();
      v183(v180, v181, v182);
      uint64_t v184 = *(int *)(v206 + 24);
      unint64_t v185 = &v210[v184];
      uint64_t v186 = &__dstd[v184];
      if (*(void *)v186)
      {
        uint64_t v187 = *((void *)v186 + 1);
        *unint64_t v185 = *(void *)v186;
        v185[1] = v187;
        swift_retain();
      }
      else
      {
        *(_OWORD *)unint64_t v185 = *(_OWORD *)v186;
      }
      uint64_t v30 = v217;
      uint64_t v31 = v215;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v198 + 56))(v210, 0, 1, v206);
    }
    *((unsigned char *)v28 + v213[29]) = *((unsigned char *)v29 + v213[29]);
    *((unsigned char *)v28 + v213[30]) = *((unsigned char *)v29 + v213[30]);
    *((unsigned char *)v28 + v213[31]) = *((unsigned char *)v29 + v213[31]);
    *((unsigned char *)v28 + v213[32]) = *((unsigned char *)v29 + v213[32]);
    *(void **)((char *)v28 + v213[33]) = *(void **)((char *)v29 + v213[33]);
    swift_retain();
    goto LABEL_107;
  }
  if (!EnumCaseMultiPayload)
  {
    *(void *)a1 = *(void *)a2;
    *((void *)a1 + 1) = *((void *)a2 + 1);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    uint64_t v7 = *((void *)a2 + 5);
    *((void *)a1 + 4) = *((void *)a2 + 4);
    *((void *)a1 + 5) = v7;
    int v8 = a2[88];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 == 1)
    {
      long long v9 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 72) = v9;
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))((uint64_t)(a1 + 48), (uint64_t)(a2 + 48));
      a1[88] = 1;
    }
    else
    {
      long long v13 = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 4) = v13;
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    }
    *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
    *((void *)a1 + 12) = *((void *)a2 + 12);
    long long v14 = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 8) = v14;
    (**(void (***)(uint64_t, uint64_t))(v14 - 8))((uint64_t)(a1 + 104), (uint64_t)(a2 + 104));
    *((void *)a1 + 18) = *((void *)a2 + 18);
    *((void *)a1 + 19) = *((void *)a2 + 19);
    *((void *)a1 + 20) = *((void *)a2 + 20);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    uint64_t v15 = (void *)*((void *)a2 + 23);
    *((void *)a1 + 23) = v15;
    uint64_t v216 = type metadata accessor for ToolbarStorage.Item(0);
    uint64_t v16 = *(int *)(v216 + 48);
    v214 = a1;
    uint64_t v17 = (void **)&a1[v16];
    uint64_t v18 = (void **)&a2[v16];
    uint64_t v19 = type metadata accessor for PlatformItemList.Item();
    uint64_t v20 = *(void *)(v19 - 8);
    unsigned int v21 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v20 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    id v22 = v15;
    if (v21(v18, 1, v19))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
      memcpy(v17, v18, *(void *)(*(void *)(v23 - 8) + 64));
      uint64_t v24 = v216;
LABEL_67:
      a1 = v214;
      swift_weakCopyInit();
      v214[*(int *)(v24 + 56)] = a2[*(int *)(v24 + 56)];
      v214[*(int *)(v24 + 60)] = a2[*(int *)(v24 + 60)];
      goto LABEL_108;
    }
    uint64_t v204 = v20;
    v211 = (int *)v19;
    uint64_t v34 = *v18;
    uint64_t v35 = v18[1];
    void *v17 = *v18;
    v17[1] = v35;
    uint64_t v36 = v18[3];
    _OWORD v17[2] = v18[2];
    v17[3] = v36;
    *((unsigned char *)v17 + 32) = *((unsigned char *)v18 + 32);
    uint64_t v37 = v18[6];
    v17[5] = v18[5];
    v17[6] = v37;
    *((unsigned char *)v17 + 56) = *((unsigned char *)v18 + 56);
    uint64_t v38 = v17 + 8;
    uint64_t v39 = v18 + 8;
    unint64_t v40 = (unint64_t)v18[23];
    id v41 = v34;
    id v42 = v35;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v40 >> 1 == 4294967294)
    {
      long long v43 = *((_OWORD *)v18 + 13);
      *((_OWORD *)v17 + 12) = *((_OWORD *)v18 + 12);
      *((_OWORD *)v17 + 13) = v43;
      *((_OWORD *)v17 + 14) = *((_OWORD *)v18 + 14);
      *(_DWORD *)((char *)v17 + 239) = *(_DWORD *)((char *)v18 + 239);
      long long v44 = *((_OWORD *)v18 + 9);
      *((_OWORD *)v17 + 8) = *((_OWORD *)v18 + 8);
      *((_OWORD *)v17 + 9) = v44;
      long long v45 = *((_OWORD *)v18 + 11);
      *((_OWORD *)v17 + 10) = *((_OWORD *)v18 + 10);
      *((_OWORD *)v17 + 11) = v45;
      long long v46 = *((_OWORD *)v18 + 5);
      *uint64_t v38 = *v39;
      *((_OWORD *)v17 + 5) = v46;
      long long v47 = *((_OWORD *)v18 + 7);
      *((_OWORD *)v17 + 6) = *((_OWORD *)v18 + 6);
      *((_OWORD *)v17 + 7) = v47;
      uint64_t v48 = v18[32];
      if (v48)
      {
LABEL_16:
        v17[31] = v18[31];
        v17[32] = v48;
        uint64_t v49 = v18[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v49 >= 2) {
          id v50 = v49;
        }
        v17[33] = v49;
        *((_DWORD *)v17 + 68) = *((_DWORD *)v18 + 68);
        *((unsigned char *)v17 + 276) = *((unsigned char *)v18 + 276);
        *(_WORD *)((char *)v17 + 277) = *(_WORD *)((char *)v18 + 277);
        uint64_t v51 = v18[36];
        v17[35] = v18[35];
        v17[36] = v51;
        swift_retain();
        swift_retain();
LABEL_36:
        unint64_t v86 = (unint64_t)v18[41];
        if (v86 >> 2 == 0xFFFFFFFF)
        {
          long long v87 = *(_OWORD *)(v18 + 47);
          *(_OWORD *)(v17 + 45) = *(_OWORD *)(v18 + 45);
          *(_OWORD *)(v17 + 47) = v87;
          v17[49] = v18[49];
          long long v88 = *(_OWORD *)(v18 + 39);
          *(_OWORD *)(v17 + 37) = *(_OWORD *)(v18 + 37);
          *(_OWORD *)(v17 + 39) = v88;
          long long v89 = *(_OWORD *)(v18 + 43);
          *(_OWORD *)(v17 + 41) = *(_OWORD *)(v18 + 41);
          *(_OWORD *)(v17 + 43) = v89;
        }
        else
        {
          long long v90 = v18[37];
          uint64_t v91 = (uint64_t)v18[38];
          uint64_t v92 = (uint64_t)v18[40];
          uint64_t v93 = (uint64_t)v18[42];
          uint64_t v94 = (uint64_t)v18[43];
          uint64_t v95 = v18[44];
          uint64_t v189 = (uint64_t)v18[39];
          uint64_t v190 = (uint64_t)v18[45];
          uint64_t v192 = (uint64_t)v18[46];
          uint64_t v195 = (uint64_t)v18[47];
          __dsta = v18[48];
          id v207 = v18[49];
          outlined copy of PlatformItemList.Item.SystemItem(v90, v91, v189, v92, v86, v93, v94, (char)v95, v190, v192, v195, (char)__dsta, (uint64_t)v207);
          v17[37] = v90;
          v17[38] = (void *)v91;
          v17[39] = (void *)v189;
          v17[40] = (void *)v92;
          v17[41] = (void *)v86;
          v17[42] = (void *)v93;
          v17[43] = (void *)v94;
          v17[44] = v95;
          v17[45] = (void *)v190;
          v17[46] = (void *)v192;
          v17[47] = (void *)v195;
          v17[48] = __dsta;
          v17[49] = v207;
        }
        uint64_t v96 = v18[51];
        if (v96 == (void *)1)
        {
          long long v97 = *((_OWORD *)v18 + 28);
          *((_OWORD *)v17 + 27) = *((_OWORD *)v18 + 27);
          *((_OWORD *)v17 + 28) = v97;
          *((unsigned char *)v17 + 464) = *((unsigned char *)v18 + 464);
          long long v98 = *((_OWORD *)v18 + 26);
          *((_OWORD *)v17 + 25) = *((_OWORD *)v18 + 25);
          *((_OWORD *)v17 + 26) = v98;
LABEL_49:
          long long v104 = v18[60];
          v17[59] = v18[59];
          v17[60] = v104;
          v17[61] = v18[61];
          *((unsigned char *)v17 + 496) = *((unsigned char *)v18 + 496);
          uint64_t v105 = v18[63];
          swift_bridgeObjectRetain();
          if (v105)
          {
            uint64_t v106 = v18[64];
            v17[63] = v105;
            v17[64] = v106;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v17 + 63) = *(_OWORD *)(v18 + 63);
          }
          *((_WORD *)v17 + 260) = *((_WORD *)v18 + 260);
          long long v107 = v18[66];
          if (v107)
          {
            v17[66] = v107;
            v17[67] = v18[67];
            v17[68] = v18[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v17 + 33) = *((_OWORD *)v18 + 33);
            v17[68] = v18[68];
          }
          long long v108 = v18[69];
          if (v108 == (void *)1)
          {
            *(_OWORD *)(v17 + 69) = *(_OWORD *)(v18 + 69);
            v17[71] = v18[71];
          }
          else
          {
            v17[69] = v108;
            uint64_t v109 = v18[70];
            swift_retain();
            if (v109)
            {
              int v110 = v18[71];
              v17[70] = v109;
              v17[71] = v110;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v17 + 35) = *((_OWORD *)v18 + 35);
            }
          }
          unsigned __int8 v111 = v18[72];
          v17[72] = v111;
          v17[73] = v18[73];
          v17[74] = v18[74];
          v17[75] = v18[75];
          v17[76] = v18[76];
          v17[77] = v18[77];
          v17[78] = v18[78];
          *((_WORD *)v17 + 316) = *((_WORD *)v18 + 316);
          *((unsigned char *)v17 + 634) = *((unsigned char *)v18 + 634);
          uint64_t v112 = v211[28];
          __dst = (char *)v17 + v112;
          uint64_t v208 = (char *)v18 + v112;
          uint64_t v113 = type metadata accessor for CommandOperation();
          uint64_t v193 = *(void *)(v113 - 8);
          v196 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v193 + 48);
          id v114 = v111;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v196(v208, 1, v113))
          {
            _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
            memcpy(__dst, v208, *(void *)(*(void *)(v115 - 8) + 64));
            uint64_t v116 = v204;
          }
          else
          {
            unsigned char *__dst = *v208;
            uint64_t v117 = *(int *)(v113 + 20);
            uint64_t v118 = &__dst[v117];
            long long v119 = &v208[v117];
            uint64_t v120 = *(void *)&v208[v117];
            uint64_t v121 = *(void *)&v208[v117 + 8];
            char v122 = v208[v117 + 16];
            outlined copy of Text.Storage(v120, *((void *)v119 + 1), v119[16]);
            *(void *)uint64_t v118 = v120;
            *((void *)v118 + 1) = v121;
            v118[16] = v122;
            *((void *)v118 + 3) = *((void *)v119 + 3);
            uint64_t v123 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            uint64_t v124 = &v118[v123];
            uint64_t v125 = &v119[v123];
            uint64_t v126 = type metadata accessor for UUID();
            uint64_t v127 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v126 - 8) + 16);
            swift_bridgeObjectRetain();
            v127(v124, v125, v126);
            uint64_t v128 = *(int *)(v113 + 24);
            uint64_t v129 = &__dst[v128];
            id v130 = &v208[v128];
            if (*v130)
            {
              uint64_t v131 = v130[1];
              *uint64_t v129 = *v130;
              v129[1] = v131;
              swift_retain();
            }
            else
            {
              *(_OWORD *)uint64_t v129 = *(_OWORD *)v130;
            }
            uint64_t v116 = v204;
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v193 + 56))(__dst, 0, 1, v113);
          }
          *((unsigned char *)v17 + v211[29]) = *((unsigned char *)v18 + v211[29]);
          *((unsigned char *)v17 + v211[30]) = *((unsigned char *)v18 + v211[30]);
          *((unsigned char *)v17 + v211[31]) = *((unsigned char *)v18 + v211[31]);
          *((unsigned char *)v17 + v211[32]) = *((unsigned char *)v18 + v211[32]);
          *(void **)((char *)v17 + v211[33]) = *(void **)((char *)v18 + v211[33]);
          uint64_t v132 = *(void (**)(void **, void, uint64_t, int *))(v116 + 56);
          swift_retain();
          v132(v17, 0, 1, v211);
          uint64_t v24 = v216;
          goto LABEL_67;
        }
        *((_DWORD *)v17 + 100) = *((_DWORD *)v18 + 100);
        *((unsigned char *)v17 + 404) = *((unsigned char *)v18 + 404);
        if (v96)
        {
          uint64_t v99 = v18[52];
          v17[51] = v96;
          v17[52] = v99;
          swift_retain();
          unsigned __int8 v100 = v18[53];
          if (v100) {
            goto LABEL_43;
          }
        }
        else
        {
          *(_OWORD *)(v17 + 51) = *(_OWORD *)(v18 + 51);
          unsigned __int8 v100 = v18[53];
          if (v100)
          {
LABEL_43:
            uint64_t v101 = v18[54];
            v17[53] = v100;
            v17[54] = v101;
            swift_retain();
            unint64_t v102 = v18[55];
            if (v102)
            {
LABEL_44:
              uint64_t v103 = v18[56];
              v17[55] = v102;
              v17[56] = v103;
              swift_retain();
LABEL_48:
              v17[57] = v18[57];
              *((unsigned char *)v17 + 464) = *((unsigned char *)v18 + 464);
              goto LABEL_49;
            }
LABEL_47:
            *(_OWORD *)(v17 + 55) = *(_OWORD *)(v18 + 55);
            goto LABEL_48;
          }
        }
        *(_OWORD *)(v17 + 53) = *(_OWORD *)(v18 + 53);
        unint64_t v102 = v18[55];
        if (v102) {
          goto LABEL_44;
        }
        goto LABEL_47;
      }
    }
    else
    {
      int v70 = *((unsigned __int8 *)v18 + 72);
      if (v70 == 255)
      {
        *(void *)uint64_t v38 = *(void *)v39;
        *((unsigned char *)v17 + 72) = *((unsigned char *)v18 + 72);
      }
      else
      {
        uint64_t v71 = v18[8];
        outlined copy of GraphicsImage.Contents(v71, *((unsigned char *)v18 + 72));
        v17[8] = v71;
        *((unsigned char *)v17 + 72) = v70;
        unint64_t v40 = (unint64_t)v18[23];
      }
      v17[10] = v18[10];
      *(_OWORD *)(v17 + 11) = *(_OWORD *)(v18 + 11);
      *((unsigned char *)v17 + 104) = *((unsigned char *)v18 + 104);
      *(_OWORD *)((char *)v17 + 108) = *(_OWORD *)((char *)v18 + 108);
      *((unsigned char *)v17 + 124) = *((unsigned char *)v18 + 124);
      long long v77 = *((_OWORD *)v18 + 9);
      *((_OWORD *)v17 + 8) = *((_OWORD *)v18 + 8);
      *((_OWORD *)v17 + 9) = v77;
      *((_WORD *)v17 + 80) = *((_WORD *)v18 + 80);
      *((unsigned char *)v17 + 162) = *((unsigned char *)v18 + 162);
      *((unsigned char *)v17 + 163) = *((unsigned char *)v18 + 163);
      if (v40 >> 1 == 0xFFFFFFFF)
      {
        long long v78 = *(_OWORD *)(v18 + 23);
        *(_OWORD *)(v17 + 21) = *(_OWORD *)(v18 + 21);
        *(_OWORD *)(v17 + 23) = v78;
      }
      else
      {
        uint64_t v79 = (uint64_t)v18[21];
        uint64_t v80 = (uint64_t)v18[22];
        uint64_t v81 = v18[24];
        outlined copy of AccessibilityImageLabel(v79, v80, v40);
        v17[21] = (void *)v79;
        v17[22] = (void *)v80;
        v17[23] = (void *)v40;
        unsigned char v17[24] = v81;
      }
      int v82 = v18[26];
      v17[25] = v18[25];
      v17[26] = v82;
      *((_WORD *)v17 + 108) = *((_WORD *)v18 + 108);
      *((_DWORD *)v17 + 55) = *((_DWORD *)v18 + 55);
      *((unsigned char *)v17 + 224) = *((unsigned char *)v18 + 224);
      uint64_t v83 = v18[29];
      v17[29] = v83;
      *((_WORD *)v17 + 120) = *((_WORD *)v18 + 120);
      *((unsigned char *)v17 + 242) = *((unsigned char *)v18 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v84 = v83;
      uint64_t v48 = v18[32];
      if (v48) {
        goto LABEL_16;
      }
    }
    long long v85 = *(_OWORD *)(v18 + 33);
    *(_OWORD *)(v17 + 31) = *(_OWORD *)(v18 + 31);
    *(_OWORD *)(v17 + 33) = v85;
    *(_OWORD *)(v17 + 35) = *(_OWORD *)(v18 + 35);
    goto LABEL_36;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

uint64_t destroy for ToolbarStorage.Item(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(a1 + 88) == 1) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  }
  __swift_destroy_boxed_opaque_existential_1(a1 + 104);
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v4 = a1 + *(int *)(a2 + 48);
  uint64_t v5 = type metadata accessor for PlatformItemList.Item();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {

    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v6 = *(void *)(v4 + 184);
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v6 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v8 = *(unsigned __int8 *)(v4 + 72);
      if (v8 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v4 + 64), v8);
        uint64_t v6 = *(void *)(v4 + 184);
        unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v7 != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(v4 + 168), *(void *)(v4 + 176), v6);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    if (*(void *)(v4 + 256))
    {
      swift_bridgeObjectRelease();
      long long v9 = *(void **)(v4 + 264);
      if ((unint64_t)v9 >= 2) {

      }
      swift_release();
      swift_release();
    }
    unint64_t v10 = *(void *)(v4 + 328);
    if (v10 >> 2 != 0xFFFFFFFF) {
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v4 + 296), *(void *)(v4 + 304), *(void *)(v4 + 312), *(void *)(v4 + 320), v10, *(void *)(v4 + 336), *(void *)(v4 + 344), *(void *)(v4 + 352), *(void *)(v4 + 360), *(void *)(v4 + 368), *(void *)(v4 + 376), *(void *)(v4 + 384), *(void *)(v4 + 392));
    }
    uint64_t v11 = *(void *)(v4 + 408);
    if (v11)
    {
      if (v11 == 1)
      {
LABEL_23:
        swift_bridgeObjectRelease();
        if (*(void *)(v4 + 504)) {
          swift_release();
        }
        if (*(void *)(v4 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(void *)(v4 + 552) != 1)
        {
          swift_release();
          if (*(void *)(v4 + 560)) {
            swift_release();
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v12 = v4 + *(int *)(v5 + 112);
        uint64_t v13 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
        {
          uint64_t v14 = v12 + *(int *)(v13 + 20);
          outlined consume of Text.Storage(*(void *)v14, *(void *)(v14 + 8), *(unsigned char *)(v14 + 16));
          swift_bridgeObjectRelease();
          uint64_t v15 = v14 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          uint64_t v16 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
          if (*(void *)(v12 + *(int *)(v13 + 24))) {
            swift_release();
          }
        }
        swift_release();
        goto LABEL_34;
      }
      swift_release();
    }
    if (*(void *)(v4 + 424)) {
      swift_release();
    }
    if (*(void *)(v4 + 440)) {
      swift_release();
    }
    goto LABEL_23;
  }
LABEL_34:

  return swift_weakDestroy();
}

uint64_t initializeWithTake for ToolbarStorage.Item(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v8;
  long long v9 = *(_OWORD *)(a2 + 136);
  long long v10 = *(_OWORD *)(a2 + 152);
  long long v11 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  uint64_t v12 = a3[12];
  uint64_t v13 = (_OWORD *)(a1 + v12);
  uint64_t v14 = (_OWORD *)(a2 + v12);
  *(_OWORD *)(a1 + 136) = v9;
  uint64_t v15 = (int *)type metadata accessor for PlatformItemList.Item();
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    long long v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    *((unsigned char *)v13 + 32) = *((unsigned char *)v14 + 32);
    uint64_t v19 = *((void *)v14 + 6);
    *((void *)v13 + 5) = *((void *)v14 + 5);
    *((void *)v13 + 6) = v19;
    *((unsigned char *)v13 + 56) = *((unsigned char *)v14 + 56);
    long long v20 = v14[13];
    v13[12] = v14[12];
    v13[13] = v20;
    v13[14] = v14[14];
    *(_DWORD *)((char *)v13 + 239) = *(_DWORD *)((char *)v14 + 239);
    long long v21 = v14[9];
    v13[8] = v14[8];
    v13[9] = v21;
    long long v22 = v14[11];
    v13[10] = v14[10];
    v13[11] = v22;
    long long v23 = v14[5];
    v13[4] = v14[4];
    v13[5] = v23;
    long long v24 = v14[7];
    v13[6] = v14[6];
    v13[7] = v24;
    *(_OWORD *)((char *)v13 + 248) = *(_OWORD *)((char *)v14 + 248);
    long long v25 = *(_OWORD *)((char *)v14 + 280);
    *(_OWORD *)((char *)v13 + 264) = *(_OWORD *)((char *)v14 + 264);
    *(_OWORD *)((char *)v13 + 280) = v25;
    long long v26 = *(_OWORD *)((char *)v14 + 376);
    *(_OWORD *)((char *)v13 + 360) = *(_OWORD *)((char *)v14 + 360);
    *(_OWORD *)((char *)v13 + 376) = v26;
    *((void *)v13 + 49) = *((void *)v14 + 49);
    long long v27 = *(_OWORD *)((char *)v14 + 312);
    *(_OWORD *)((char *)v13 + 296) = *(_OWORD *)((char *)v14 + 296);
    *(_OWORD *)((char *)v13 + 312) = v27;
    long long v28 = *(_OWORD *)((char *)v14 + 344);
    *(_OWORD *)((char *)v13 + 328) = *(_OWORD *)((char *)v14 + 328);
    *(_OWORD *)((char *)v13 + 344) = v28;
    long long v29 = v14[28];
    v13[27] = v14[27];
    v13[28] = v29;
    *((unsigned char *)v13 + 464) = *((unsigned char *)v14 + 464);
    long long v30 = v14[26];
    v13[25] = v14[25];
    v13[26] = v30;
    *(_OWORD *)((char *)v13 + 472) = *(_OWORD *)((char *)v14 + 472);
    *(_OWORD *)((char *)v13 + 481) = *(_OWORD *)((char *)v14 + 481);
    uint64_t v31 = *((void *)v14 + 63);
    if (v31)
    {
      uint64_t v32 = *((void *)v14 + 64);
      *((void *)v13 + 63) = v31;
      *((void *)v13 + 64) = v32;
    }
    else
    {
      *(_OWORD *)((char *)v13 + 504) = *(_OWORD *)((char *)v14 + 504);
    }
    *((_WORD *)v13 + 260) = *((_WORD *)v14 + 260);
    v13[33] = v14[33];
    *((void *)v13 + 68) = *((void *)v14 + 68);
    *((void *)v13 + 71) = *((void *)v14 + 71);
    *(_OWORD *)((char *)v13 + 552) = *(_OWORD *)((char *)v14 + 552);
    *((void *)v13 + 72) = *((void *)v14 + 72);
    *(_OWORD *)((char *)v13 + 584) = *(_OWORD *)((char *)v14 + 584);
    *(_OWORD *)((char *)v13 + 600) = *(_OWORD *)((char *)v14 + 600);
    *((void *)v13 + 77) = *((void *)v14 + 77);
    *((void *)v13 + 78) = *((void *)v14 + 78);
    *((unsigned char *)v13 + 632) = *((unsigned char *)v14 + 632);
    *(_WORD *)((char *)v13 + 633) = *(_WORD *)((char *)v14 + 633);
    uint64_t v33 = v15[28];
    __dst = (char *)v13 + v33;
    uint64_t v34 = (char *)v14 + v33;
    uint64_t v35 = type metadata accessor for CommandOperation();
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
      memcpy(__dst, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      uint64_t v53 = v36;
      uint64_t v54 = v16;
      unsigned char *__dst = *v34;
      uint64_t v38 = *(int *)(v35 + 20);
      uint64_t v39 = &__dst[v38];
      unint64_t v40 = &v34[v38];
      long long v41 = *(_OWORD *)&v34[v38 + 16];
      *uint64_t v39 = *(_OWORD *)&v34[v38];
      v39[1] = v41;
      uint64_t v42 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      long long v52 = (char *)v39 + v42;
      long long v43 = &v40[v42];
      uint64_t v44 = type metadata accessor for UUID();
      (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v44 - 8) + 32))(v52, v43, v44);
      uint64_t v45 = *(int *)(v35 + 24);
      long long v46 = &__dst[v45];
      long long v47 = (uint64_t *)&v34[v45];
      uint64_t v48 = *v47;
      if (*v47)
      {
        uint64_t v49 = v47[1];
        *long long v46 = v48;
        v46[1] = v49;
      }
      else
      {
        *(_OWORD *)long long v46 = *(_OWORD *)v47;
      }
      uint64_t v16 = v54;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v53 + 56))(__dst, 0, 1, v35);
    }
    *((unsigned char *)v13 + v15[29]) = *((unsigned char *)v14 + v15[29]);
    *((unsigned char *)v13 + v15[30]) = *((unsigned char *)v14 + v15[30]);
    *((unsigned char *)v13 + v15[31]) = *((unsigned char *)v14 + v15[31]);
    *((unsigned char *)v13 + v15[32]) = *((unsigned char *)v14 + v15[32]);
    *(void *)((char *)v13 + v15[33]) = *(void *)((char *)v14 + v15[33]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  swift_weakTakeInit();
  uint64_t v50 = a3[15];
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + v50) = *(unsigned char *)(a2 + v50);
  return a1;
}

void destroy for ToolbarStorage.Entry(uint64_t a1)
{
  type metadata accessor for ToolbarStorage.Entry.Kind(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(a1 + 88) == 1) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 104);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v3 = a1 + *(int *)(type metadata accessor for ToolbarStorage.Item(0) + 48);
    uint64_t v4 = type metadata accessor for PlatformItemList.Item();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4)) {
      goto LABEL_36;
    }

    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v5 = *(void *)(v3 + 184);
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if ((v5 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v7 = *(unsigned __int8 *)(v3 + 72);
      if (v7 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v3 + 64), v7);
        uint64_t v5 = *(void *)(v3 + 184);
        unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v6 != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(v3 + 168), *(void *)(v3 + 176), v5);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    if (*(void *)(v3 + 256))
    {
      swift_bridgeObjectRelease();
      long long v8 = *(void **)(v3 + 264);
      if ((unint64_t)v8 >= 2) {

      }
      swift_release();
      swift_release();
    }
    unint64_t v9 = *(void *)(v3 + 328);
    if (v9 >> 2 != 0xFFFFFFFF) {
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v3 + 296), *(void *)(v3 + 304), *(void *)(v3 + 312), *(void *)(v3 + 320), v9, *(void *)(v3 + 336), *(void *)(v3 + 344), *(void *)(v3 + 352), *(void *)(v3 + 360), *(void *)(v3 + 368), *(void *)(v3 + 376), *(void *)(v3 + 384), *(void *)(v3 + 392));
    }
    uint64_t v10 = *(void *)(v3 + 408);
    if (v10)
    {
      if (v10 == 1)
      {
LABEL_25:
        swift_bridgeObjectRelease();
        if (*(void *)(v3 + 504)) {
          swift_release();
        }
        if (*(void *)(v3 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(void *)(v3 + 552) != 1)
        {
          swift_release();
          if (*(void *)(v3 + 560)) {
            swift_release();
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v11 = v3 + *(int *)(v4 + 112);
        uint64_t v12 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
        {
          uint64_t v13 = v11 + *(int *)(v12 + 20);
          outlined consume of Text.Storage(*(void *)v13, *(void *)(v13 + 8), *(unsigned char *)(v13 + 16));
          swift_bridgeObjectRelease();
          uint64_t v14 = v13 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          uint64_t v15 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
          if (*(void *)(v11 + *(int *)(v12 + 24))) {
            swift_release();
          }
        }
        swift_release();
LABEL_36:
        swift_weakDestroy();
        return;
      }
      swift_release();
    }
    if (*(void *)(v3 + 424)) {
      swift_release();
    }
    if (*(void *)(v3 + 440)) {
      swift_release();
    }
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(a1 + 56) == 1) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = a1 + *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
  uint64_t v17 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17))
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      __swift_destroy_boxed_opaque_existential_1(v16);
      swift_release();
      swift_bridgeObjectRelease();
      long long v29 = *(void **)(v16 + 80);

      return;
    }

    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v18 = *(void *)(v16 + 184);
    unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
    if ((v18 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v20 = *(unsigned __int8 *)(v16 + 72);
      if (v20 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v16 + 64), v20);
        uint64_t v18 = *(void *)(v16 + 184);
        unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v19 != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(v16 + 168), *(void *)(v16 + 176), v18);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    if (*(void *)(v16 + 256))
    {
      swift_bridgeObjectRelease();
      long long v21 = *(void **)(v16 + 264);
      if ((unint64_t)v21 >= 2) {

      }
      swift_release();
      swift_release();
    }
    unint64_t v22 = *(void *)(v16 + 328);
    if (v22 >> 2 != 0xFFFFFFFF) {
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v16 + 296), *(void *)(v16 + 304), *(void *)(v16 + 312), *(void *)(v16 + 320), v22, *(void *)(v16 + 336), *(void *)(v16 + 344), *(void *)(v16 + 352), *(void *)(v16 + 360), *(void *)(v16 + 368), *(void *)(v16 + 376), *(void *)(v16 + 384), *(void *)(v16 + 392));
    }
    uint64_t v23 = *(void *)(v16 + 408);
    if (v23)
    {
      if (v23 == 1)
      {
LABEL_63:
        swift_bridgeObjectRelease();
        if (*(void *)(v16 + 504)) {
          swift_release();
        }
        if (*(void *)(v16 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(void *)(v16 + 552) != 1)
        {
          swift_release();
          if (*(void *)(v16 + 560)) {
            swift_release();
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v24 = v16 + *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
        uint64_t v25 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v24, 1, v25))
        {
          uint64_t v26 = v24 + *(int *)(v25 + 20);
          outlined consume of Text.Storage(*(void *)v26, *(void *)(v26 + 8), *(unsigned char *)(v26 + 16));
          swift_bridgeObjectRelease();
          uint64_t v27 = v26 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          uint64_t v28 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v27, v28);
          if (*(void *)(v24 + *(int *)(v25 + 24))) {
            swift_release();
          }
        }
        swift_release();
        return;
      }
      swift_release();
    }
    if (*(void *)(v16 + 424)) {
      swift_release();
    }
    if (*(void *)(v16 + 440)) {
      swift_release();
    }
    goto LABEL_63;
  }
}

char *initializeWithCopy for ToolbarStorage.Entry(char *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v11 = *((void *)a2 + 1);
    *(void *)a1 = *(void *)a2;
    *((void *)a1 + 1) = v11;
    int v12 = a2[56];
    swift_bridgeObjectRetain();
    uint64_t v227 = a3;
    if (v12 == 1)
    {
      long long v13 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 40) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
      a1[56] = 1;
    }
    else
    {
      long long v26 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v26;
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    }
    a1[57] = a2[57];
    *((_WORD *)a1 + 29) = *((_WORD *)a2 + 29);
    uint64_t v27 = *((void *)a2 + 9);
    *((void *)a1 + 8) = *((void *)a2 + 8);
    *((void *)a1 + 9) = v27;
    uint64_t v28 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
    long long v29 = (void **)&a1[v28];
    long long v30 = (void **)&a2[v28];
    uint64_t v31 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    uint64_t v32 = *(void *)(v31 - 8);
    uint64_t v33 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v32 + 48);
    swift_bridgeObjectRetain();
    if (v33(v30, 1, v31))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
      memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64));
LABEL_108:
      a3 = v227;
      goto LABEL_109;
    }
    uint64_t v225 = v32;
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      long long v73 = *(_OWORD *)(v30 + 3);
      *(_OWORD *)(v29 + 3) = v73;
      (**(void (***)(void **, void **))(v73 - 8))(v29, v30);
      v29[5] = v30[5];
      v29[6] = v30[6];
      v29[7] = v30[7];
      *((_OWORD *)v29 + 4) = *((_OWORD *)v30 + 4);
      id v74 = v30[10];
      v29[10] = v74;
      swift_retain();
      swift_bridgeObjectRetain();
      id v75 = v74;
      uint64_t v76 = v32;
LABEL_107:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void **, void, uint64_t, uint64_t))(v76 + 56))(v29, 0, 1, v31);
      goto LABEL_108;
    }
    uint64_t v220 = v31;
    uint64_t v53 = *v30;
    uint64_t v54 = v30[1];
    *long long v29 = *v30;
    v29[1] = v54;
    uint64_t v55 = v30[3];
    v29[2] = v30[2];
    v29[3] = v55;
    *((unsigned char *)v29 + 32) = *((unsigned char *)v30 + 32);
    uint64_t v56 = v30[6];
    v29[5] = v30[5];
    v29[6] = v56;
    *((unsigned char *)v29 + 56) = *((unsigned char *)v30 + 56);
    uint64_t v57 = v29 + 8;
    unint64_t v58 = v30 + 8;
    unint64_t v59 = (unint64_t)v30[23];
    id v60 = v53;
    id v61 = v54;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v59 >> 1 == 4294967294)
    {
      long long v62 = *((_OWORD *)v30 + 13);
      *((_OWORD *)v29 + 12) = *((_OWORD *)v30 + 12);
      *((_OWORD *)v29 + 13) = v62;
      *((_OWORD *)v29 + 14) = *((_OWORD *)v30 + 14);
      *(_DWORD *)((char *)v29 + 239) = *(_DWORD *)((char *)v30 + 239);
      long long v63 = *((_OWORD *)v30 + 9);
      *((_OWORD *)v29 + 8) = *((_OWORD *)v30 + 8);
      *((_OWORD *)v29 + 9) = v63;
      long long v64 = *((_OWORD *)v30 + 11);
      *((_OWORD *)v29 + 10) = *((_OWORD *)v30 + 10);
      *((_OWORD *)v29 + 11) = v64;
      long long v65 = *((_OWORD *)v30 + 5);
      _OWORD *v57 = *v58;
      *((_OWORD *)v29 + 5) = v65;
      long long v66 = *((_OWORD *)v30 + 7);
      *((_OWORD *)v29 + 6) = *((_OWORD *)v30 + 6);
      *((_OWORD *)v29 + 7) = v66;
      uint64_t v67 = v30[32];
      if (v67)
      {
LABEL_22:
        v29[31] = v30[31];
        v29[32] = v67;
        id v68 = v30[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v68 >= 2) {
          id v69 = v68;
        }
        v29[33] = v68;
        *((_DWORD *)v29 + 68) = *((_DWORD *)v30 + 68);
        *((unsigned char *)v29 + 276) = *((unsigned char *)v30 + 276);
        *(_WORD *)((char *)v29 + 277) = *(_WORD *)((char *)v30 + 277);
        int v70 = v30[36];
        v29[35] = v30[35];
        v29[36] = v70;
        swift_retain();
        swift_retain();
        goto LABEL_74;
      }
    }
    else
    {
      int v77 = *((unsigned __int8 *)v30 + 72);
      if (v77 == 255)
      {
        *(void *)uint64_t v57 = *(void *)v58;
        *((unsigned char *)v29 + 72) = *((unsigned char *)v30 + 72);
      }
      else
      {
        long long v78 = v30[8];
        outlined copy of GraphicsImage.Contents(v78, *((unsigned char *)v30 + 72));
        v29[8] = v78;
        *((unsigned char *)v29 + 72) = v77;
        unint64_t v59 = (unint64_t)v30[23];
      }
      v29[10] = v30[10];
      *(_OWORD *)(v29 + 11) = *(_OWORD *)(v30 + 11);
      *((unsigned char *)v29 + 104) = *((unsigned char *)v30 + 104);
      *(_OWORD *)((char *)v29 + 108) = *(_OWORD *)((char *)v30 + 108);
      *((unsigned char *)v29 + 124) = *((unsigned char *)v30 + 124);
      long long v141 = *((_OWORD *)v30 + 9);
      *((_OWORD *)v29 + 8) = *((_OWORD *)v30 + 8);
      *((_OWORD *)v29 + 9) = v141;
      *((_WORD *)v29 + 80) = *((_WORD *)v30 + 80);
      *((unsigned char *)v29 + 162) = *((unsigned char *)v30 + 162);
      *((unsigned char *)v29 + 163) = *((unsigned char *)v30 + 163);
      if (v59 >> 1 == 0xFFFFFFFF)
      {
        long long v142 = *(_OWORD *)(v30 + 23);
        *(_OWORD *)(v29 + 21) = *(_OWORD *)(v30 + 21);
        *(_OWORD *)(v29 + 23) = v142;
      }
      else
      {
        uint64_t v143 = (uint64_t)v30[21];
        uint64_t v144 = (uint64_t)v30[22];
        long long v145 = v30[24];
        outlined copy of AccessibilityImageLabel(v143, v144, v59);
        v29[21] = (void *)v143;
        v29[22] = (void *)v144;
        v29[23] = (void *)v59;
        v29[24] = v145;
      }
      uint64_t v146 = v30[26];
      v29[25] = v30[25];
      v29[26] = v146;
      *((_WORD *)v29 + 108) = *((_WORD *)v30 + 108);
      *((_DWORD *)v29 + 55) = *((_DWORD *)v30 + 55);
      *((unsigned char *)v29 + 224) = *((unsigned char *)v30 + 224);
      uint64_t v147 = v30[29];
      v29[29] = v147;
      *((_WORD *)v29 + 120) = *((_WORD *)v30 + 120);
      *((unsigned char *)v29 + 242) = *((unsigned char *)v30 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v148 = v147;
      uint64_t v67 = v30[32];
      if (v67) {
        goto LABEL_22;
      }
    }
    long long v149 = *(_OWORD *)(v30 + 33);
    *(_OWORD *)(v29 + 31) = *(_OWORD *)(v30 + 31);
    *(_OWORD *)(v29 + 33) = v149;
    *(_OWORD *)(v29 + 35) = *(_OWORD *)(v30 + 35);
LABEL_74:
    unint64_t v150 = (unint64_t)v30[41];
    if (v150 >> 2 == 0xFFFFFFFF)
    {
      long long v151 = *(_OWORD *)(v30 + 47);
      *(_OWORD *)(v29 + 45) = *(_OWORD *)(v30 + 45);
      *(_OWORD *)(v29 + 47) = v151;
      v29[49] = v30[49];
      long long v152 = *(_OWORD *)(v30 + 39);
      *(_OWORD *)(v29 + 37) = *(_OWORD *)(v30 + 37);
      *(_OWORD *)(v29 + 39) = v152;
      long long v153 = *(_OWORD *)(v30 + 43);
      *(_OWORD *)(v29 + 41) = *(_OWORD *)(v30 + 41);
      *(_OWORD *)(v29 + 43) = v153;
    }
    else
    {
      v154 = v30[37];
      uint64_t v155 = (uint64_t)v30[38];
      uint64_t v199 = (uint64_t)v30[40];
      uint64_t v203 = (uint64_t)v30[39];
      uint64_t v157 = (uint64_t)v30[42];
      uint64_t v156 = (uint64_t)v30[43];
      v158 = v30[44];
      uint64_t v208 = (uint64_t)v30[45];
      __dstb = v30[46];
      uint64_t v214 = (uint64_t)v30[47];
      uint64_t v217 = v30[48];
      uint64_t v222 = v30[49];
      outlined copy of PlatformItemList.Item.SystemItem(v154, v155, v203, v199, v150, v157, v156, (char)v158, v208, (uint64_t)__dstb, v214, (char)v217, (uint64_t)v222);
      v29[37] = v154;
      v29[38] = (void *)v155;
      v29[39] = (void *)v203;
      v29[40] = (void *)v199;
      v29[41] = (void *)v150;
      v29[42] = (void *)v157;
      v29[43] = (void *)v156;
      v29[44] = v158;
      v29[45] = (void *)v208;
      v29[46] = __dstb;
      v29[47] = (void *)v214;
      v29[48] = v217;
      v29[49] = v222;
    }
    v159 = v30[51];
    if (v159 == (void *)1)
    {
      long long v160 = *((_OWORD *)v30 + 28);
      *((_OWORD *)v29 + 27) = *((_OWORD *)v30 + 27);
      *((_OWORD *)v29 + 28) = v160;
      *((unsigned char *)v29 + 464) = *((unsigned char *)v30 + 464);
      long long v161 = *((_OWORD *)v30 + 26);
      *((_OWORD *)v29 + 25) = *((_OWORD *)v30 + 25);
      *((_OWORD *)v29 + 26) = v161;
    }
    else
    {
      *((_DWORD *)v29 + 100) = *((_DWORD *)v30 + 100);
      *((unsigned char *)v29 + 404) = *((unsigned char *)v30 + 404);
      if (v159)
      {
        uint64_t v162 = v30[52];
        v29[51] = v159;
        v29[52] = v162;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v29 + 51) = *(_OWORD *)(v30 + 51);
      }
      uint64_t v163 = v30[53];
      if (v163)
      {
        v164 = v30[54];
        v29[53] = v163;
        v29[54] = v164;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v29 + 53) = *(_OWORD *)(v30 + 53);
      }
      v165 = v30[55];
      if (v165)
      {
        v166 = v30[56];
        v29[55] = v165;
        unsigned char v29[56] = v166;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v29 + 55) = *(_OWORD *)(v30 + 55);
      }
      v29[57] = v30[57];
      *((unsigned char *)v29 + 464) = *((unsigned char *)v30 + 464);
    }
    uint64_t v167 = v30[60];
    v29[59] = v30[59];
    v29[60] = v167;
    v29[61] = v30[61];
    *((unsigned char *)v29 + 496) = *((unsigned char *)v30 + 496);
    uint64_t v168 = v30[63];
    swift_bridgeObjectRetain();
    if (v168)
    {
      unint64_t v169 = v30[64];
      v29[63] = v168;
      v29[64] = v169;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v29 + 63) = *(_OWORD *)(v30 + 63);
    }
    *((_WORD *)v29 + 260) = *((_WORD *)v30 + 260);
    uint64_t v170 = v30[66];
    if (v170)
    {
      v29[66] = v170;
      v29[67] = v30[67];
      v29[68] = v30[68];
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *((_OWORD *)v29 + 33) = *((_OWORD *)v30 + 33);
      v29[68] = v30[68];
    }
    id v171 = v30[69];
    if (v171 == (void *)1)
    {
      *(_OWORD *)(v29 + 69) = *(_OWORD *)(v30 + 69);
      v29[71] = v30[71];
    }
    else
    {
      v29[69] = v171;
      uint64_t v172 = v30[70];
      swift_retain();
      if (v172)
      {
        uint64_t v173 = v30[71];
        v29[70] = v172;
        v29[71] = v173;
        swift_retain();
      }
      else
      {
        *((_OWORD *)v29 + 35) = *((_OWORD *)v30 + 35);
      }
    }
    uint64_t v174 = v30[72];
    v29[72] = v174;
    v29[73] = v30[73];
    v29[74] = v30[74];
    v29[75] = v30[75];
    v29[76] = v30[76];
    v29[77] = v30[77];
    v29[78] = v30[78];
    *((_WORD *)v29 + 316) = *((_WORD *)v30 + 316);
    *((unsigned char *)v29 + 634) = *((unsigned char *)v30 + 634);
    v218 = (int *)type metadata accessor for PlatformItemList.Item();
    uint64_t v175 = v218[28];
    v223 = (char *)v29 + v175;
    uint64_t v176 = (char *)v30 + v175;
    uint64_t v177 = type metadata accessor for CommandOperation();
    uint64_t v204 = *(void *)(v177 - 8);
    uint64_t v209 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v204 + 48);
    id v178 = v174;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v209(v176, 1, v177))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
      memcpy(v223, v176, *(void *)(*(void *)(v179 - 8) + 64));
      uint64_t v76 = v225;
      uint64_t v31 = v220;
    }
    else
    {
      unsigned char *v223 = *v176;
      uint64_t v180 = *(int *)(v177 + 20);
      v181 = v176;
      uint64_t v200 = v176;
      uint64_t v182 = &v223[v180];
      v183 = &v181[v180];
      uint64_t v215 = v177;
      uint64_t v184 = *(void *)&v181[v180];
      uint64_t v185 = *(void *)&v181[v180 + 8];
      char v186 = v181[v180 + 16];
      outlined copy of Text.Storage(v184, v185, v186);
      *(void *)uint64_t v182 = v184;
      *((void *)v182 + 1) = v185;
      v182[16] = v186;
      *((void *)v182 + 3) = *((void *)v183 + 3);
      uint64_t v187 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v188 = &v182[v187];
      uint64_t v189 = &v183[v187];
      uint64_t v190 = type metadata accessor for UUID();
      uint64_t v191 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v190 - 8) + 16);
      swift_bridgeObjectRetain();
      v191(v188, v189, v190);
      uint64_t v192 = *(int *)(v215 + 24);
      uint64_t v193 = &v223[v192];
      uint64_t v194 = &v200[v192];
      if (*v194)
      {
        uint64_t v195 = v194[1];
        void *v193 = *v194;
        v193[1] = v195;
        swift_retain();
      }
      else
      {
        *(_OWORD *)uint64_t v193 = *(_OWORD *)v194;
      }
      uint64_t v76 = v225;
      uint64_t v31 = v220;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v204 + 56))(v223, 0, 1, v215);
    }
    *((unsigned char *)v29 + v218[29]) = *((unsigned char *)v30 + v218[29]);
    *((unsigned char *)v29 + v218[30]) = *((unsigned char *)v30 + v218[30]);
    *((unsigned char *)v29 + v218[31]) = *((unsigned char *)v30 + v218[31]);
    *((unsigned char *)v29 + v218[32]) = *((unsigned char *)v30 + v218[32]);
    *(void **)((char *)v29 + v218[33]) = *(void **)((char *)v30 + v218[33]);
    swift_retain();
    goto LABEL_107;
  }
  if (!EnumCaseMultiPayload)
  {
    *(void *)a1 = *(void *)a2;
    *((void *)a1 + 1) = *((void *)a2 + 1);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    uint64_t v8 = *((void *)a2 + 5);
    *((void *)a1 + 4) = *((void *)a2 + 4);
    *((void *)a1 + 5) = v8;
    int v9 = a2[88];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v226 = a3;
    if (v9 == 1)
    {
      long long v10 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 72) = v10;
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))((uint64_t)(a1 + 48), (uint64_t)(a2 + 48));
      a1[88] = 1;
    }
    else
    {
      long long v14 = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 4) = v14;
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    }
    *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
    *((void *)a1 + 12) = *((void *)a2 + 12);
    long long v15 = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 8) = v15;
    (**(void (***)(uint64_t, uint64_t))(v15 - 8))((uint64_t)(a1 + 104), (uint64_t)(a2 + 104));
    *((void *)a1 + 18) = *((void *)a2 + 18);
    *((void *)a1 + 19) = *((void *)a2 + 19);
    *((void *)a1 + 20) = *((void *)a2 + 20);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    uint64_t v16 = (void *)*((void *)a2 + 23);
    *((void *)a1 + 23) = v16;
    uint64_t v17 = (int *)type metadata accessor for ToolbarStorage.Item(0);
    uint64_t v18 = v17[12];
    v224 = a1;
    unint64_t v19 = (void **)&a1[v18];
    uint64_t v221 = a2;
    int v20 = (void **)&a2[v18];
    uint64_t v21 = type metadata accessor for PlatformItemList.Item();
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v23 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v22 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    id v24 = v16;
    if (v23(v20, 1, v21))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
      memcpy(v19, v20, *(void *)(*(void *)(v25 - 8) + 64));
      a1 = v224;
      a2 = v221;
LABEL_67:
      swift_weakCopyInit();
      a1[v17[14]] = a2[v17[14]];
      a1[v17[15]] = a2[v17[15]];
LABEL_109:
      swift_storeEnumTagMultiPayload();
      goto LABEL_110;
    }
    uint64_t v213 = v22;
    uint64_t v216 = v17;
    unint64_t v219 = (int *)v21;
    uint64_t v35 = *v20;
    uint64_t v36 = v20[1];
    *unint64_t v19 = *v20;
    v19[1] = v36;
    uint64_t v37 = v20[3];
    _OWORD v19[2] = v20[2];
    v19[3] = v37;
    *((unsigned char *)v19 + 32) = *((unsigned char *)v20 + 32);
    uint64_t v38 = v20[6];
    v19[5] = v20[5];
    v19[6] = v38;
    *((unsigned char *)v19 + 56) = *((unsigned char *)v20 + 56);
    uint64_t v39 = v19 + 8;
    unint64_t v40 = v20 + 8;
    unint64_t v41 = (unint64_t)v20[23];
    id v42 = v35;
    id v43 = v36;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v41 >> 1 == 4294967294)
    {
      long long v44 = *((_OWORD *)v20 + 13);
      *((_OWORD *)v19 + 12) = *((_OWORD *)v20 + 12);
      *((_OWORD *)v19 + 13) = v44;
      *((_OWORD *)v19 + 14) = *((_OWORD *)v20 + 14);
      *(_DWORD *)((char *)v19 + 239) = *(_DWORD *)((char *)v20 + 239);
      long long v45 = *((_OWORD *)v20 + 9);
      *((_OWORD *)v19 + 8) = *((_OWORD *)v20 + 8);
      *((_OWORD *)v19 + 9) = v45;
      long long v46 = *((_OWORD *)v20 + 11);
      *((_OWORD *)v19 + 10) = *((_OWORD *)v20 + 10);
      *((_OWORD *)v19 + 11) = v46;
      long long v47 = *((_OWORD *)v20 + 5);
      *uint64_t v39 = *v40;
      *((_OWORD *)v19 + 5) = v47;
      long long v48 = *((_OWORD *)v20 + 7);
      *((_OWORD *)v19 + 6) = *((_OWORD *)v20 + 6);
      *((_OWORD *)v19 + 7) = v48;
      uint64_t v49 = v20[32];
      if (v49)
      {
LABEL_16:
        v19[31] = v20[31];
        v19[32] = v49;
        uint64_t v50 = v20[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v50 >= 2) {
          id v51 = v50;
        }
        v19[33] = v50;
        *((_DWORD *)v19 + 68) = *((_DWORD *)v20 + 68);
        *((unsigned char *)v19 + 276) = *((unsigned char *)v20 + 276);
        *(_WORD *)((char *)v19 + 277) = *(_WORD *)((char *)v20 + 277);
        long long v52 = v20[36];
        v19[35] = v20[35];
        v19[36] = v52;
        swift_retain();
        swift_retain();
LABEL_36:
        unint64_t v88 = (unint64_t)v20[41];
        if (v88 >> 2 == 0xFFFFFFFF)
        {
          long long v89 = *(_OWORD *)(v20 + 47);
          *(_OWORD *)(v19 + 45) = *(_OWORD *)(v20 + 45);
          *(_OWORD *)(v19 + 47) = v89;
          v19[49] = v20[49];
          long long v90 = *(_OWORD *)(v20 + 39);
          *(_OWORD *)(v19 + 37) = *(_OWORD *)(v20 + 37);
          *(_OWORD *)(v19 + 39) = v90;
          long long v91 = *(_OWORD *)(v20 + 43);
          *(_OWORD *)(v19 + 41) = *(_OWORD *)(v20 + 41);
          *(_OWORD *)(v19 + 43) = v91;
        }
        else
        {
          uint64_t v92 = v20[37];
          uint64_t v93 = (uint64_t)v20[38];
          uint64_t v95 = (uint64_t)v20[39];
          uint64_t v94 = (uint64_t)v20[40];
          uint64_t v97 = (uint64_t)v20[42];
          uint64_t v96 = (uint64_t)v20[43];
          long long v98 = v20[44];
          uint64_t v197 = (uint64_t)v20[45];
          uint64_t v198 = (uint64_t)v20[46];
          uint64_t v201 = (uint64_t)v20[47];
          uint64_t v205 = v20[48];
          __dsta = v20[49];
          outlined copy of PlatformItemList.Item.SystemItem(v92, v93, v95, v94, v88, v97, v96, (char)v98, v197, v198, v201, (char)v205, (uint64_t)__dsta);
          v19[37] = v92;
          v19[38] = (void *)v93;
          v19[39] = (void *)v95;
          v19[40] = (void *)v94;
          v19[41] = (void *)v88;
          v19[42] = (void *)v97;
          v19[43] = (void *)v96;
          v19[44] = v98;
          v19[45] = (void *)v197;
          v19[46] = (void *)v198;
          v19[47] = (void *)v201;
          v19[48] = v205;
          v19[49] = __dsta;
        }
        uint64_t v99 = v20[51];
        if (v99 == (void *)1)
        {
          long long v100 = *((_OWORD *)v20 + 28);
          *((_OWORD *)v19 + 27) = *((_OWORD *)v20 + 27);
          *((_OWORD *)v19 + 28) = v100;
          *((unsigned char *)v19 + 464) = *((unsigned char *)v20 + 464);
          long long v101 = *((_OWORD *)v20 + 26);
          *((_OWORD *)v19 + 25) = *((_OWORD *)v20 + 25);
          *((_OWORD *)v19 + 26) = v101;
LABEL_49:
          long long v107 = v20[60];
          v19[59] = v20[59];
          v19[60] = v107;
          v19[61] = v20[61];
          *((unsigned char *)v19 + 496) = *((unsigned char *)v20 + 496);
          long long v108 = v20[63];
          swift_bridgeObjectRetain();
          if (v108)
          {
            uint64_t v109 = v20[64];
            v19[63] = v108;
            v19[64] = v109;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v19 + 63) = *(_OWORD *)(v20 + 63);
          }
          *((_WORD *)v19 + 260) = *((_WORD *)v20 + 260);
          int v110 = v20[66];
          if (v110)
          {
            v19[66] = v110;
            v19[67] = v20[67];
            v19[68] = v20[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v19 + 33) = *((_OWORD *)v20 + 33);
            v19[68] = v20[68];
          }
          unsigned __int8 v111 = v20[69];
          if (v111 == (void *)1)
          {
            *(_OWORD *)(v19 + 69) = *(_OWORD *)(v20 + 69);
            v19[71] = v20[71];
          }
          else
          {
            v19[69] = v111;
            uint64_t v112 = v20[70];
            swift_retain();
            if (v112)
            {
              uint64_t v113 = v20[71];
              v19[70] = v112;
              v19[71] = v113;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v19 + 35) = *((_OWORD *)v20 + 35);
            }
          }
          id v114 = v20[72];
          v19[72] = v114;
          v19[73] = v20[73];
          v19[74] = v20[74];
          v19[75] = v20[75];
          v19[76] = v20[76];
          v19[77] = v20[77];
          v19[78] = v20[78];
          *((_WORD *)v19 + 316) = *((_WORD *)v20 + 316);
          *((unsigned char *)v19 + 634) = *((unsigned char *)v20 + 634);
          uint64_t v115 = v219[28];
          __dst = (char *)v19 + v115;
          uint64_t v116 = (char *)v20 + v115;
          uint64_t v117 = type metadata accessor for CommandOperation();
          uint64_t v202 = *(void *)(v117 - 8);
          uint64_t v206 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v202 + 48);
          id v118 = v114;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v206(v116, 1, v117))
          {
            _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
            memcpy(__dst, v116, *(void *)(*(void *)(v119 - 8) + 64));
            a3 = v226;
            uint64_t v17 = v216;
            uint64_t v120 = v219;
            a2 = v221;
            uint64_t v121 = v213;
          }
          else
          {
            unsigned char *__dst = *v116;
            uint64_t v122 = *(int *)(v117 + 20);
            uint64_t v123 = &__dst[v122];
            uint64_t v124 = &v116[v122];
            id v207 = v116;
            uint64_t v125 = *(void *)&v116[v122];
            uint64_t v126 = *(void *)&v116[v122 + 8];
            uint64_t v127 = v117;
            char v128 = v124[16];
            outlined copy of Text.Storage(v125, v126, v128);
            *(void *)uint64_t v123 = v125;
            *((void *)v123 + 1) = v126;
            v123[16] = v128;
            *((void *)v123 + 3) = *((void *)v124 + 3);
            uint64_t v129 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            id v130 = &v123[v129];
            uint64_t v131 = &v124[v129];
            uint64_t v132 = type metadata accessor for UUID();
            long long v133 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v132 - 8) + 16);
            swift_bridgeObjectRetain();
            long long v134 = v131;
            uint64_t v135 = v127;
            v133(v130, v134, v132);
            uint64_t v136 = *(int *)(v127 + 24);
            v137 = &__dst[v136];
            v138 = &v207[v136];
            if (*v138)
            {
              uint64_t v139 = v138[1];
              void *v137 = *v138;
              v137[1] = v139;
              swift_retain();
            }
            else
            {
              *(_OWORD *)v137 = *(_OWORD *)v138;
            }
            a3 = v226;
            uint64_t v17 = v216;
            uint64_t v120 = v219;
            uint64_t v121 = v213;
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v202 + 56))(__dst, 0, 1, v135);
            a2 = v221;
          }
          *((unsigned char *)v19 + v120[29]) = *((unsigned char *)v20 + v120[29]);
          *((unsigned char *)v19 + v120[30]) = *((unsigned char *)v20 + v120[30]);
          *((unsigned char *)v19 + v120[31]) = *((unsigned char *)v20 + v120[31]);
          *((unsigned char *)v19 + v120[32]) = *((unsigned char *)v20 + v120[32]);
          *(void **)((char *)v19 + v120[33]) = *(void **)((char *)v20 + v120[33]);
          id v140 = *(void (**)(void **, void, uint64_t, int *))(v121 + 56);
          swift_retain();
          v140(v19, 0, 1, v120);
          a1 = v224;
          goto LABEL_67;
        }
        *((_DWORD *)v19 + 100) = *((_DWORD *)v20 + 100);
        *((unsigned char *)v19 + 404) = *((unsigned char *)v20 + 404);
        if (v99)
        {
          unint64_t v102 = v20[52];
          v19[51] = v99;
          v19[52] = v102;
          swift_retain();
          uint64_t v103 = v20[53];
          if (v103) {
            goto LABEL_43;
          }
        }
        else
        {
          *(_OWORD *)(v19 + 51) = *(_OWORD *)(v20 + 51);
          uint64_t v103 = v20[53];
          if (v103)
          {
LABEL_43:
            long long v104 = v20[54];
            v19[53] = v103;
            v19[54] = v104;
            swift_retain();
            uint64_t v105 = v20[55];
            if (v105)
            {
LABEL_44:
              uint64_t v106 = v20[56];
              v19[55] = v105;
              v19[56] = v106;
              swift_retain();
LABEL_48:
              v19[57] = v20[57];
              *((unsigned char *)v19 + 464) = *((unsigned char *)v20 + 464);
              goto LABEL_49;
            }
LABEL_47:
            *(_OWORD *)(v19 + 55) = *(_OWORD *)(v20 + 55);
            goto LABEL_48;
          }
        }
        *(_OWORD *)(v19 + 53) = *(_OWORD *)(v20 + 53);
        uint64_t v105 = v20[55];
        if (v105) {
          goto LABEL_44;
        }
        goto LABEL_47;
      }
    }
    else
    {
      int v71 = *((unsigned __int8 *)v20 + 72);
      if (v71 == 255)
      {
        *(void *)uint64_t v39 = *(void *)v40;
        *((unsigned char *)v19 + 72) = *((unsigned char *)v20 + 72);
      }
      else
      {
        long long v72 = v20[8];
        outlined copy of GraphicsImage.Contents(v72, *((unsigned char *)v20 + 72));
        v19[8] = v72;
        *((unsigned char *)v19 + 72) = v71;
        unint64_t v41 = (unint64_t)v20[23];
      }
      v19[10] = v20[10];
      *(_OWORD *)(v19 + 11) = *(_OWORD *)(v20 + 11);
      *((unsigned char *)v19 + 104) = *((unsigned char *)v20 + 104);
      *(_OWORD *)((char *)v19 + 108) = *(_OWORD *)((char *)v20 + 108);
      *((unsigned char *)v19 + 124) = *((unsigned char *)v20 + 124);
      long long v79 = *((_OWORD *)v20 + 9);
      *((_OWORD *)v19 + 8) = *((_OWORD *)v20 + 8);
      *((_OWORD *)v19 + 9) = v79;
      *((_WORD *)v19 + 80) = *((_WORD *)v20 + 80);
      *((unsigned char *)v19 + 162) = *((unsigned char *)v20 + 162);
      *((unsigned char *)v19 + 163) = *((unsigned char *)v20 + 163);
      if (v41 >> 1 == 0xFFFFFFFF)
      {
        long long v80 = *(_OWORD *)(v20 + 23);
        *(_OWORD *)(v19 + 21) = *(_OWORD *)(v20 + 21);
        *(_OWORD *)(v19 + 23) = v80;
      }
      else
      {
        uint64_t v81 = (uint64_t)v20[21];
        uint64_t v82 = (uint64_t)v20[22];
        uint64_t v83 = v20[24];
        outlined copy of AccessibilityImageLabel(v81, v82, v41);
        v19[21] = (void *)v81;
        v19[22] = (void *)v82;
        v19[23] = (void *)v41;
        v19[24] = v83;
      }
      id v84 = v20[26];
      v19[25] = v20[25];
      v19[26] = v84;
      *((_WORD *)v19 + 108) = *((_WORD *)v20 + 108);
      *((_DWORD *)v19 + 55) = *((_DWORD *)v20 + 55);
      *((unsigned char *)v19 + 224) = *((unsigned char *)v20 + 224);
      long long v85 = v20[29];
      v19[29] = v85;
      *((_WORD *)v19 + 120) = *((_WORD *)v20 + 120);
      *((unsigned char *)v19 + 242) = *((unsigned char *)v20 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v86 = v85;
      uint64_t v49 = v20[32];
      if (v49) {
        goto LABEL_16;
      }
    }
    long long v87 = *(_OWORD *)(v20 + 33);
    *(_OWORD *)(v19 + 31) = *(_OWORD *)(v20 + 31);
    *(_OWORD *)(v19 + 33) = v87;
    *(_OWORD *)(v19 + 35) = *(_OWORD *)(v20 + 35);
    goto LABEL_36;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_110:
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemList.Item(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187B48484);
}

uint64_t specialized LazyLayoutComputer.updateValue()()
{
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    __break(1u);
  }
  else
  {
    SizeAndSpacingContext.init(context:owner:environment:)();
    type metadata accessor for LazyLayoutViewCache();
    AGGraphGetValue();
    AGGraphGetValue();
    swift_retain();
    default argument 0 of ViewSizeCache.init(cache:)();
    ViewSizeCache.init(cache:)();
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyLayoutComputer<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyLayoutComputer<LazyHStackLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer.Engine);
    lazy protocol witness table accessor for type LazyLayoutComputer<LazyHStackLayout> and conformance LazyLayoutComputer<A>();
    lazy protocol witness table accessor for type LazyLayoutComputer<LazyHStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine();
    StatefulRule<>.update<A>(to:)();
    return swift_release();
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    __break(1u);
  }
  else
  {
    SizeAndSpacingContext.init(context:owner:environment:)();
    type metadata accessor for LazyLayoutViewCache();
    AGGraphGetValue();
    AGGraphGetValue();
    swift_retain();
    default argument 0 of ViewSizeCache.init(cache:)();
    ViewSizeCache.init(cache:)();
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyLayoutComputer<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyLayoutComputer<LazyVStackLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer.Engine);
    lazy protocol witness table accessor for type LazyLayoutComputer<LazyVStackLayout> and conformance LazyLayoutComputer<A>();
    lazy protocol witness table accessor for type LazyLayoutComputer<LazyVStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine();
    StatefulRule<>.update<A>(to:)();
    return swift_release();
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    __break(1u);
  }
  else
  {
    SizeAndSpacingContext.init(context:owner:environment:)();
    type metadata accessor for LazyLayoutViewCache();
    AGGraphGetValue();
    AGGraphGetValue();
    swift_retain();
    default argument 0 of ViewSizeCache.init(cache:)();
    ViewSizeCache.init(cache:)();
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyLayoutComputer<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyLayoutComputer<LazyFixedSizeHStackLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer.Engine);
    lazy protocol witness table accessor for type LazyLayoutComputer<LazyFixedSizeHStackLayout> and conformance LazyLayoutComputer<A>();
    lazy protocol witness table accessor for type LazyLayoutComputer<LazyFixedSizeHStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine();
    StatefulRule<>.update<A>(to:)();
    return swift_release();
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    __break(1u);
  }
  else
  {
    SizeAndSpacingContext.init(context:owner:environment:)();
    type metadata accessor for LazyLayoutViewCache();
    AGGraphGetValue();
    AGGraphGetValue();
    swift_retain();
    default argument 0 of ViewSizeCache.init(cache:)();
    ViewSizeCache.init(cache:)();
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyLayoutComputer<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyLayoutComputer<LazyFixedSizeVStackLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer.Engine);
    lazy protocol witness table accessor for type LazyLayoutComputer<LazyFixedSizeVStackLayout> and conformance LazyLayoutComputer<A>();
    lazy protocol witness table accessor for type LazyLayoutComputer<LazyFixedSizeVStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine();
    StatefulRule<>.update<A>(to:)();
    return swift_release();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  char v44;

  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    __break(1u);
  }
  else
  {
    long long v10 = *(_DWORD *)(v0 + 12);
    LOBYTE(v24) = 1;
    SizeAndSpacingContext.init(context:owner:environment:)();
    uint64_t v6 = HIDWORD(v24);
    uint64_t Value = AGGraphGetValue();
    uint64_t v3 = *(void *)Value;
    uint64_t v8 = *(void *)(Value + 16);
    int v9 = *(void *)(Value + 8);
    uint64_t v5 = *(unsigned char *)(Value + 24);
    int v7 = *(_DWORD *)(Value + 28);
    type metadata accessor for LazyLayoutViewCache();
    uint64_t v4 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    swift_retain();
    default argument 0 of ViewSizeCache.init(cache:)();
    ViewSizeCache.init(cache:)();
    uint64_t v11 = v24;
    int v12 = v25;
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyLayoutComputer<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyLayoutComputer<LazyHGridLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer.Engine);
    lazy protocol witness table accessor for type LazyLayoutComputer<LazyHGridLayout> and conformance LazyLayoutComputer<A>();
    lazy protocol witness table accessor for type LazyLayoutComputer<LazyHGridLayout>.Engine and conformance LazyLayoutComputer<A>.Engine();
    StatefulRule<>.update<A>(to:)();
    unint64_t v41 = v20;
    id v42 = v21;
    id v43 = v22;
    uint64_t v37 = v16;
    uint64_t v38 = v17;
    uint64_t v39 = v18;
    unint64_t v40 = v19;
    uint64_t v34 = v13;
    uint64_t v35 = v14;
    id v24 = v3;
    uint64_t v25 = v9;
    long long v26 = v8;
    uint64_t v27 = v5;
    uint64_t v28 = v7;
    long long v29 = v11;
    long long v30 = v6;
    uint64_t v31 = v12;
    uint64_t v32 = v10;
    uint64_t v33 = v4;
    long long v44 = v23;
    uint64_t v36 = v15;
    return outlined release of LazyLayoutComputer<LazyHGridLayout>.Engine((uint64_t)&v24);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  char v44;

  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    __break(1u);
  }
  else
  {
    long long v10 = *(_DWORD *)(v0 + 12);
    LOBYTE(v24) = 1;
    SizeAndSpacingContext.init(context:owner:environment:)();
    uint64_t v6 = HIDWORD(v24);
    uint64_t Value = AGGraphGetValue();
    uint64_t v3 = *(void *)Value;
    uint64_t v8 = *(void *)(Value + 16);
    int v9 = *(void *)(Value + 8);
    uint64_t v5 = *(unsigned char *)(Value + 24);
    int v7 = *(_DWORD *)(Value + 28);
    type metadata accessor for LazyLayoutViewCache();
    uint64_t v4 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    swift_retain();
    default argument 0 of ViewSizeCache.init(cache:)();
    ViewSizeCache.init(cache:)();
    uint64_t v11 = v24;
    int v12 = v25;
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyLayoutComputer<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyLayoutComputer<LazyVGridLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer.Engine);
    lazy protocol witness table accessor for type LazyLayoutComputer<LazyVGridLayout> and conformance LazyLayoutComputer<A>();
    lazy protocol witness table accessor for type LazyLayoutComputer<LazyVGridLayout>.Engine and conformance LazyLayoutComputer<A>.Engine();
    StatefulRule<>.update<A>(to:)();
    unint64_t v41 = v20;
    id v42 = v21;
    id v43 = v22;
    uint64_t v37 = v16;
    uint64_t v38 = v17;
    uint64_t v39 = v18;
    unint64_t v40 = v19;
    uint64_t v34 = v13;
    uint64_t v35 = v14;
    id v24 = v3;
    uint64_t v25 = v9;
    long long v26 = v8;
    uint64_t v27 = v5;
    uint64_t v28 = v7;
    long long v29 = v11;
    long long v30 = v6;
    uint64_t v31 = v12;
    uint64_t v32 = v10;
    uint64_t v33 = v4;
    long long v44 = v23;
    uint64_t v36 = v15;
    return outlined release of LazyLayoutComputer<LazyHGridLayout>.Engine((uint64_t)&v24);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyLayoutComputer<LazyHStackLayout> and conformance LazyLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutComputer<LazyHStackLayout> and conformance LazyLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LazyLayoutComputer<LazyHStackLayout> and conformance LazyLayoutComputer<A>)
  {
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyLayoutComputer<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutComputer<LazyHStackLayout> and conformance LazyLayoutComputer<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutComputer<LazyHStackLayout> and conformance LazyLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LazyLayoutComputer<LazyHStackLayout> and conformance LazyLayoutComputer<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyLayoutComputer<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutComputer<LazyHStackLayout> and conformance LazyLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyLayoutComputer<LazyHStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutComputer<LazyHStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine;
  if (!lazy protocol witness table cache variable for type LazyLayoutComputer<LazyHStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine)
  {
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyLayoutComputer<LazyHStackLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer.Engine);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutComputer<LazyHStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine);
  }
  return result;
}

uint64_t Toggle.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v46 = *(void *)(a1 + 16);
  unint64_t v47 = lazy protocol witness table accessor for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label();
  uint64_t v45 = *(void *)(a1 + 24);
  uint64_t v56 = &type metadata for ToggleStyleConfiguration.Label;
  uint64_t v57 = v46;
  unint64_t v58 = v47;
  uint64_t v59 = v45;
  type metadata accessor for StaticSourceWriter();
  uint64_t v4 = type metadata accessor for ModifiedContent();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  uint64_t v50 = v5;
  MEMORY[0x1F4188790](v4);
  uint64_t v53 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  long long v48 = (char *)&v40 - v8;
  unint64_t v44 = v2;
  long long v10 = *(ValueMetadata **)v2;
  uint64_t v9 = *(void *)(v2 + 8);
  int v11 = *(unsigned __int8 *)(v2 + 16);
  int v12 = (uint64_t *)(v2 + *(int *)(a1 + 40));
  uint64_t v14 = v12[1];
  uint64_t v42 = *v12;
  uint64_t v13 = v42;
  uint64_t v15 = v12[2];
  uint64_t v16 = (void *)v12[3];
  uint64_t v18 = v12[4];
  uint64_t v17 = v12[5];
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v13, v14, v15, v16);
  lazy protocol witness table accessor for type ToggleStateBool and conformance ToggleStateBool();
  swift_retain();
  swift_retain();
  uint64_t v52 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  uint64_t v56 = v10;
  uint64_t v57 = v9;
  LOBYTE(v58) = v11;
  _s7SwiftUI7BindingVySbGMaTm_2(0, &lazy cache variable for type metadata for Binding<ToggleState>, MEMORY[0x1E4F3F540], MEMORY[0x1E4F41638]);
  uint64_t v20 = v19;
  swift_retain();
  MEMORY[0x18C113DA0](&v69, v20);
  swift_release();
  uint64_t v21 = swift_release();
  id v43 = &v40;
  if (v16) {
    uint64_t v22 = v42;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v40 = v22;
  if (v16)
  {
    uint64_t v23 = v15 & 1;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v23 = 0;
  }
  uint64_t v41 = v23;
  if (v16) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = 0;
  }
  if (v16) {
    uint64_t v25 = v17;
  }
  else {
    uint64_t v25 = 0;
  }
  LOBYTE(v58) = v11 == 0;
  uint64_t v56 = v10;
  uint64_t v57 = v52;
  uint64_t v59 = (uint64_t)v10;
  uint64_t v60 = v9;
  char v61 = v11;
  BOOL v62 = v69 == 2;
  uint64_t v63 = v22;
  uint64_t v64 = v14;
  uint64_t v42 = v14;
  uint64_t v65 = v23;
  long long v66 = v16;
  uint64_t v67 = v24;
  uint64_t v68 = v25;
  MEMORY[0x1F4188790](v21);
  uint64_t v26 = v46;
  uint64_t v27 = v45;
  *(&v40 - 4) = v46;
  *(&v40 - 3) = v27;
  swift_retain_n();
  swift_retain();
  swift_retain();
  uint64_t v28 = v40;
  uint64_t v29 = v14;
  char v30 = v41;
  outlined copy of ToggleStyleConfiguration.Effect(v40, v29, v41, v16);
  unint64_t v44 = lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle();
  uint64_t v39 = v27;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for ToggleStyleConfiguration.Label, (void (*)(double))partial apply for closure #1 in Toggle.body.getter, (uint64_t)(&v40 - 6), (uint64_t)&type metadata for ResolvedToggleStyle, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, v26, v44);
  swift_release();
  swift_release();
  swift_release_n();
  outlined consume of ToggleStyleConfiguration.Effect(v28, v42, v30, v16);
  uint64_t v31 = v63;
  uint64_t v32 = v64;
  LOBYTE(v26) = v65;
  uint64_t v33 = v66;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v31, v32, v26, v33);
  unint64_t v54 = v44;
  uint64_t v55 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v34 = v49;
  swift_getWitnessTable();
  uint64_t v35 = v48;
  uint64_t v36 = v53;
  static ViewBuilder.buildExpression<A>(_:)(v53);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v50 + 8);
  v37(v36, v34);
  static ViewBuilder.buildExpression<A>(_:)(v35);
  return ((uint64_t (*)(char *, uint64_t))v37)(v35, v34);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ToggleStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  void v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

unint64_t lazy protocol witness table accessor for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToggleStateBool and conformance ToggleStateBool()
{
  unint64_t result = lazy protocol witness table cache variable for type ToggleStateBool and conformance ToggleStateBool;
  if (!lazy protocol witness table cache variable for type ToggleStateBool and conformance ToggleStateBool)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleStateBool and conformance ToggleStateBool);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToggleStateBool and conformance ToggleStateBool;
  if (!lazy protocol witness table cache variable for type ToggleStateBool and conformance ToggleStateBool)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleStateBool and conformance ToggleStateBool);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToggleStateBool and conformance ToggleStateBool;
  if (!lazy protocol witness table cache variable for type ToggleStateBool and conformance ToggleStateBool)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToggleStateBool and conformance ToggleStateBool);
  }
  return result;
}

uint64_t ToggleStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  int v11 = (char *)v21 - v10;
  uint64_t v12 = *(void *)(a1 + 8);
  char v13 = *(unsigned char *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  char v16 = *(unsigned char *)(a1 + 40);
  char v17 = *(unsigned char *)(a1 + 41);
  v21[0] = *(void *)a1;
  v21[1] = v12;
  char v22 = v13;
  uint64_t v23 = v14;
  uint64_t v24 = v15;
  char v25 = v16;
  char v26 = v17;
  long long v18 = *(_OWORD *)(a1 + 64);
  long long v27 = *(_OWORD *)(a1 + 48);
  long long v28 = v18;
  long long v29 = *(_OWORD *)(a1 + 80);
  (*(void (**)(void *, uint64_t, uint64_t))(v3 + 24))(v21, v4, v3);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v19)(v11, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for Toggle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(void *)(v5 - 8) + 16;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v9 = (v8 + 17 + a1) & ~v8;
  uint64_t v10 = (v8 + 17 + a2) & ~v8;
  swift_retain();
  swift_retain();
  v6(v9, v10, v5);
  uint64_t v11 = *(void *)(v7 + 48) + 7;
  unint64_t v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + v10) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v13 + 24) < 0xFFFFFFFFuLL)
  {
    long long v20 = *(_OWORD *)v13;
    long long v21 = *(_OWORD *)(v13 + 32);
    *(_OWORD *)(v12 + 16) = *(_OWORD *)(v13 + 16);
    *(_OWORD *)(v12 + 32) = v21;
    *(_OWORD *)unint64_t v12 = v20;
  }
  else
  {
    uint64_t v14 = *(void *)v13;
    uint64_t v15 = *(void *)(v13 + 8);
    char v16 = *(unsigned char *)(v13 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v13, v15, v16);
    *(void *)unint64_t v12 = v14;
    *(void *)(v12 + 8) = v15;
    *(unsigned char *)(v12 + 16) = v16;
    char v17 = *(void **)(v13 + 24);
    *(void *)(v12 + 24) = v17;
    uint64_t v18 = *(void *)(v13 + 40);
    *(void *)(v12 + 32) = *(void *)(v13 + 32);
    *(void *)(v12 + 40) = v18;
    id v19 = v17;
    swift_retain();
  }
  return a1;
}

uint64_t destroy for Toggle(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t))(v4 + 8))(v6);
  unint64_t v8 = (*(void *)(v5 + 56) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v8 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v8, *(void *)(v8 + 8), *(unsigned char *)(v8 + 16));

    return swift_release();
  }
  return result;
}

uint64_t destroy for SwitchToggleStyle(uint64_t a1)
{
  outlined consume of Environment<Bool?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined consume of Environment<Color?>.Content(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_release();

  return swift_release();
}

uint64_t partial apply for closure #2 in ForestRootBodyAccessor.updateBody(of:changed:)()
{
  return (*(uint64_t (**)(void, void))(v0[3] + 56))(v0[5], v0[2]);
}

uint64_t _NavigationSplitReader.ForestRoot.body(children:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *(void *)(result + 16);
  if (!v3)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  uint64_t result = outlined init with copy of _VariadicView_Children(result + 32, (uint64_t)v54);
  if (v3 == 1)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = outlined init with copy of _VariadicView_Children(v4 + 88, (uint64_t)v30);
  if (v3 < 3)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v26 = a2;
  outlined init with copy of _VariadicView_Children(v4 + 144, (uint64_t)v28);
  uint64_t v6 = *(void *)v2;
  uint64_t v24 = *(void *)(v2 + 16);
  uint64_t v7 = *(unsigned __int8 *)(v2 + 8);
  uint64_t v8 = _NavigationSplitReader.ForestRoot.widths(from:)(v4);
  char v9 = _NavigationSplitReader.ForestRoot.sidebarDimmingIgnoresSafeArea(_:)(v4);
  char v10 = _NavigationSplitReader.ForestRoot.sidebarDimmingIgnoresSafeArea(_:)(v4);
  uint64_t v25 = NavigationSplitParameters.addingWidths(_:opaqueSidebar:sidebarDimmingIgnoresSafeArea:extraWidePrimaryColumn:)(v8, 0, v9 & 1, v10 & 1, v6, v7, v24);
  char v23 = v11;
  uint64_t v22 = v12;
  int v14 = v13;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(v2 + 32);
  uint64_t v15 = *(void *)(v2 + 40);
  __int16 v17 = *(_WORD *)(v2 + 48);
  __int16 v18 = *(_WORD *)(v2 + 50);
  outlined init with copy of NavigationAuthority(v2 + 56, (uint64_t)v27);
  if (*(unsigned char *)(v2 + 88))
  {
    int v19 = -1;
    int v20 = -1;
  }
  else
  {
    int v19 = *(_DWORD *)(v2 + 80);
    int v20 = *(_DWORD *)(v2 + 84);
  }
  uint64_t v21 = *(void *)(v2 + 96);
  _s7SwiftUI19NavigationAuthorityVSgWOcTm_0(v2 + 104, (uint64_t)&v53, (uint64_t)&lazy cache variable for type metadata for UINavigationPresentationAdaptor?, (uint64_t)type metadata accessor for UINavigationPresentationAdaptor, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for _GraphValue<NavigationStateHost>);
  v32[0] = v54[0];
  v32[1] = v54[1];
  v32[2] = v54[2];
  long long v34 = v30[0];
  long long v35 = v30[1];
  long long v36 = v30[2];
  uint64_t v33 = v55;
  uint64_t v37 = v31;
  long long v39 = v28[1];
  long long v40 = v28[2];
  long long v38 = v28[0];
  uint64_t v41 = v29;
  uint64_t v42 = v25;
  char v43 = v23;
  uint64_t v44 = v22;
  __int16 v45 = v14 & 0x101;
  char v46 = BYTE2(v14) & 1;
  uint64_t v47 = v16;
  uint64_t v48 = v15;
  __int16 v49 = v17;
  __int16 v50 = v18;
  outlined init with take of NavigationAuthority((uint64_t)v27, (uint64_t)v51);
  v51[6] = v19;
  v51[7] = v20;
  uint64_t v52 = v21;
  outlined init with take of NavigationSplitCore((uint64_t)v32, (uint64_t)v54);
  outlined init with take of NavigationSplitCore((uint64_t)v54, v26);
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t _NavigationSplitReader.ForestRoot.sidebarDimmingIgnoresSafeArea(_:)(uint64_t result)
{
  if (!*(void *)(result + 16))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  outlined init with copy of _VariadicView_Children(result + 32, (uint64_t)v16);
  uint64_t v17 = 0;
  if (_VariadicView_Children.endIndex.getter())
  {
    uint64_t v1 = 0;
    while (1)
    {
      _VariadicView_Children.subscript.getter();
      uint64_t result = _VariadicView_Children.endIndex.getter();
      if (v1 < 0 || v1 >= result) {
        break;
      }
      long long v6 = v12;
      long long v7 = v13;
      long long v8 = v14;
      long long v9 = v15;
      long long v4 = v10;
      long long v5 = v11;
      uint64_t v17 = v1 + 1;
      *(void *)&long long v18 = *((void *)&v15 + 1);
      ViewTraitCollection.value<A>(for:defaultValue:)();
      if (v3 == 1)
      {
        outlined destroy of _NavigationSplitReader.SplitPresentationModeLocation((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<_VariadicView_Children>);
        long long v20 = v6;
        long long v21 = v7;
        long long v22 = v8;
        long long v23 = v9;
        uint64_t v2 = 1;
        long long v18 = v4;
        long long v19 = v5;
        goto LABEL_10;
      }
      outlined destroy of _VariadicView_Children.Element((uint64_t)&v4);
      uint64_t v1 = v17;
      if (v1 == _VariadicView_Children.endIndex.getter()) {
        goto LABEL_8;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_8:
  outlined destroy of _NavigationSplitReader.SplitPresentationModeLocation((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<_VariadicView_Children>);
  uint64_t v2 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
LABEL_10:
  _s7SwiftUI19NavigationAuthorityVSgWOhTm_0((uint64_t)&v18, (unint64_t *)&lazy cache variable for type metadata for _VariadicView_Children.Element?, MEMORY[0x1E4F40A20]);
  return v2;
}

uint64_t outlined init with take of NavigationSplitCore(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithTake for NavigationSplitCore(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  long long v5 = *(_OWORD *)(a2 + 112);
  long long v6 = *(_OWORD *)(a2 + 128);
  long long v7 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 144) = v7;
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 179) = *(_OWORD *)(a2 + 179);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  uint64_t v8 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v8;
  long long v9 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v9;
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  return a1;
}

uint64_t NavigationSplitParameters.addingWidths(_:opaqueSidebar:sidebarDimmingIgnoresSafeArea:extraWidePrimaryColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    char v10 = *(unsigned char *)(a1 + 64);
    long long v11 = *(_OWORD *)(a1 + 48);
    v28[0] = *(_OWORD *)(a1 + 32);
    v28[1] = v11;
    char v29 = v10;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v28, 0);
    if (v8 == 1)
    {
      uint64_t v12 = *(void *)(a7 + 16);
      if (v12)
      {
        uint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(1);
        if (v14)
        {
          long long v15 = (void *)(*(void *)(a7 + 56) + 40 * v13);
          uint64_t v16 = v15 + 1;
          uint64_t v17 = v15 + 2;
          long long v18 = v15 + 3;
          long long v19 = (char *)(v15 + 4);
LABEL_8:
          uint64_t v12 = *v18;
          uint64_t v20 = *v17;
          uint64_t v21 = *v16;
          uint64_t v22 = *v15;
          char v23 = *v19;
LABEL_12:
          v26[0] = v22;
          v26[1] = v21;
          _OWORD v26[2] = v20;
          v26[3] = v12;
          char v27 = v23;
          specialized Dictionary.subscript.setter((uint64_t)v26, 1u);
          return a5;
        }
        uint64_t v22 = 0;
        uint64_t v20 = 0;
        uint64_t v12 = 0;
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v20 = 0;
      }
      char v23 = 0;
      uint64_t v21 = 0x1FFFFFFFELL;
      goto LABEL_12;
    }
    long long v15 = (void *)(a1 + 72);
    uint64_t v16 = (uint64_t *)(a1 + 80);
    uint64_t v17 = (uint64_t *)(a1 + 88);
    long long v18 = (uint64_t *)(a1 + 96);
    long long v19 = (char *)(a1 + 104);
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  return a5;
}

uint64_t _NavigationSplitReader.ForestRoot.widths(from:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (!v1) {
    return v2;
  }
  uint64_t v27 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v4 = 0;
  int64_t v16 = v1;
  while (1)
  {
    uint64_t v17 = v4;
    outlined init with copy of _VariadicView_Children(a1 + 32 + 56 * v4, (uint64_t)v26);
    outlined init with copy of _VariadicView_Children((uint64_t)v26, (uint64_t)v24);
    uint64_t v25 = 0;
    if (_VariadicView_Children.endIndex.getter()) {
      break;
    }
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    LOBYTE(v9) = 0;
    unint64_t v10 = 0x1FFFFFFFELL;
LABEL_12:
    outlined destroy of _NavigationSplitReader.SplitPresentationModeLocation((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for IndexingIterator<_VariadicView_Children>);
    outlined destroy of _VariadicView_Children((uint64_t)v26);
    uint64_t v2 = v27;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
      uint64_t v2 = v27;
    }
    uint64_t v12 = v17;
    unint64_t v14 = *(void *)(v2 + 16);
    unint64_t v13 = *(void *)(v2 + 24);
    if (v14 >= v13 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1);
      uint64_t v12 = v17;
      uint64_t v2 = v27;
    }
    uint64_t v4 = v12 + 1;
    *(void *)(v2 + 16) = v14 + 1;
    uint64_t v15 = v2 + 40 * v14;
    *(void *)(v15 + 32) = v6;
    *(void *)(v15 + 40) = v10;
    *(void *)(v15 + 48) = v7;
    *(void *)(v15 + 56) = v8;
    *(unsigned char *)(v15 + 64) = v9;
    if (v4 == v16) {
      return v2;
    }
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unsigned int v9 = 0;
  unint64_t v10 = 0x1FFFFFFFELL;
  while (1)
  {
    _VariadicView_Children.subscript.getter();
    uint64_t result = _VariadicView_Children.endIndex.getter();
    if (v5 < 0 || v5 >= result) {
      break;
    }
    uint64_t v25 = v5 + 1;
    v23[3] = v23[9];
    unsigned char v23[4] = v23[10];
    v23[5] = v23[11];
    v23[0] = v23[6];
    v23[1] = v23[7];
    v23[2] = v23[8];
    if (v10 >> 1 == 0xFFFFFFFF && v9 <= 1)
    {
      ViewTraitCollection.value<A>(for:defaultValue:)();
      uint64_t v6 = v18;
      unint64_t v10 = v19;
      uint64_t v7 = v20;
      uint64_t v8 = v21;
      unsigned int v9 = v22;
    }
    outlined destroy of _VariadicView_Children.Element((uint64_t)v23);
    uint64_t v5 = v25;
    if (v5 == _VariadicView_Children.endIndex.getter()) {
      goto LABEL_12;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined destroy of _NavigationSplitReader.SplitPresentationModeLocation(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for IndexingIterator<_VariadicView_Children>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<_VariadicView_Children>)
  {
    lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<_VariadicView_Children>);
    }
  }
}

uint64_t outlined destroy of _VariadicView_Children.Element(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of _VariadicView_Children(uint64_t a1)
{
  return a1;
}

void type metadata accessor for _ContiguousArrayStorage<NavigationSplitViewColumnWidth?>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationSplitViewColumnWidth?>)
  {
    type metadata accessor for [TabCustomizationID](255, &lazy cache variable for type metadata for NavigationSplitViewColumnWidth?, (uint64_t)&type metadata for NavigationSplitViewColumnWidth, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationSplitViewColumnWidth?>);
    }
  }
}

uint64_t outlined destroy of _NavigationSplitReader.ForestRoot(uint64_t a1)
{
  return a1;
}

uint64_t LabeledContent<>.init(content:label:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(uint64_t)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(int *)(type metadata accessor for LabeledContent() + 40);
  uint64_t v7 = a1();
  uint64_t result = a2(v7);
  *(unsigned char *)(a3 + v6) = 2;
  return result;
}

uint64_t closure #2 in LabeledContent<>.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LabeledContent();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v8 + 36));
  static ViewBuilder.buildExpression<A>(_:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a3);
}

uint64_t type metadata accessor for LabeledContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t LabeledContent<>.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v30 = a4;
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v28 = lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label();
  uint64_t v47 = &type metadata for LabeledContentStyleConfiguration.Label;
  uint64_t v48 = v8;
  unint64_t v49 = v28;
  uint64_t v50 = a2;
  type metadata accessor for StaticSourceWriter();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v29 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v24 = (char *)&v23 - v10;
  uint64_t v11 = *(void *)(a1 + 24);
  unint64_t v26 = lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content();
  uint64_t v47 = &type metadata for LabeledContentStyleConfiguration.Content;
  uint64_t v48 = v11;
  unint64_t v49 = v26;
  uint64_t v50 = a3;
  uint64_t v23 = a3;
  type metadata accessor for StaticSourceWriter();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v27 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  unint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v25 = (char *)&v23 - v16;
  LOBYTE(v47) = *(unsigned char *)(v4 + *(int *)(a1 + 40));
  uint64_t v38 = v8;
  uint64_t v39 = v11;
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  uint64_t v42 = v4;
  unint64_t v17 = lazy protocol witness table accessor for type ResolvedLabeledContent and conformance ResolvedLabeledContent();
  uint64_t v18 = v24;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, (void (*)(double))partial apply for closure #1 in LabeledContent<>.body.getter, (uint64_t)v37, (uint64_t)&type metadata for ResolvedLabeledContent, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, v8, v17);
  uint64_t v32 = v8;
  uint64_t v33 = v11;
  uint64_t v34 = a2;
  uint64_t v35 = v23;
  uint64_t v36 = v4;
  unint64_t v45 = v17;
  char v46 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for LabeledContentStyleConfiguration.Content, (void (*)(double))partial apply for closure #2 in LabeledContent<>.body.getter, (uint64_t)v31, v9, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Content, v11, WitnessTable);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v9);
  uint64_t v43 = WitnessTable;
  uint64_t v44 = &protocol witness table for StaticSourceWriter<A, B>;
  swift_getWitnessTable();
  uint64_t v20 = v25;
  static ViewBuilder.buildExpression<A>(_:)(v14);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v27 + 8);
  v21(v14, v12);
  static ViewBuilder.buildExpression<A>(_:)(v20);
  return ((uint64_t (*)(char *, uint64_t))v21)(v20, v12);
}

uint64_t destroy for _ServicesButtonMenuStyle(uint64_t a1)
{
  return outlined consume of Environment<Bool?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LabeledContentStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  void v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

unint64_t lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content()
{
  unint64_t result = lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content);
  }
  return result;
}

uint64_t destroy for _KeyboardShortcutPickerContent(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_bridgeObjectRelease();
}

uint64_t destroy for Tuple(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (*(void *)(v4 + 56) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t destroy for _NavigationSplitReader.ForestRoot(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_weakDestroy();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (*(void *)(a1 + 128))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 104);
  }
  return result;
}

uint64_t specialized _NavigationSplitReader.PreparedColumn.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&KeyPath - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0 && !*((void *)v0 + 4))
  {
    Weakuint64_t Value = (void *)AGGraphGetWeakValue();
    if (WeakValue)
    {
      *(void *)&long long v11 = *WeakValue;
    }
    else
    {
      *(void *)&long long v11 = -1;
      *((void *)&v11 + 1) = -1;
    }
    long long v34 = v11;
    type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for MutableBox<NavigationState.Seeds>, (uint64_t)&type metadata for NavigationState.Seeds, MEMORY[0x1E4F3F398]);
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v34;
    swift_release();
    *((void *)v1 + 5) = v12;
    uint64_t v13 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
    uint64_t Value = AGGraphGetValue();
    uint64_t result = outlined init with copy of AccessibilityScrollableContext?(Value, (uint64_t)&v48, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, v13);
    if (*((void *)&v48 + 1) == 1)
    {
      __break(1u);
      return result;
    }
    char v16 = *((unsigned char *)v1 + 8);
    uint64_t v17 = *(void *)AGGraphGetValue();
    uint64_t v18 = *(void *)AGGraphGetValue();
    outlined init with take of NavigationAuthority((uint64_t)&v48, (uint64_t)v4);
    *((void *)v4 + 3) = v17;
    v4[32] = v16;
    *((void *)v4 + 5) = v18;
    swift_retain();
    UUID.init()();
    *(void *)&v4[*(int *)(v2 + 28)] = v12;
    type metadata accessor for LocationBox<_NavigationSplitReader.SplitPresentationModeLocation>();
    swift_allocObject();
    *((void *)v1 + 4) = LocationBox.init(_:)();
  }
  else
  {
    uint64_t v5 = *((void *)v0 + 5);
    if (v5)
    {
      uint64_t v6 = (int *)AGGraphGetWeakValue();
      if (v6)
      {
        int v7 = *v6;
        int v8 = v6[1];
        swift_beginAccess();
        if (*(_DWORD *)(v5 + 16) != v7 || *(_DWORD *)(v5 + 20) != v8)
        {
          *(_DWORD *)(v5 + 16) = v7;
          *(_DWORD *)(v5 + 20) = v8;
        }
      }
    }
  }
  unint64_t v19 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  uint64_t v20 = AGGraphGetValue();
  outlined init with copy of AccessibilityScrollableContext?(v20, (uint64_t)v54, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, v19);
  if (v55 == 1) {
    __break(1u);
  }
  unsigned __int8 v21 = *((unsigned char *)v1 + 8);
  Swift::UInt v22 = *(void *)AGGraphGetValue();
  Swift::UInt v23 = *(void *)AGGraphGetValue();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    swift_beginAccess();
    outlined init with take of _LazyLayout_PlacementContext?(Strong + 16, (uint64_t)v47, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    outlined retain of NavigationState?((uint64_t)v47, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?);
    swift_release();
    outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v47, (uint64_t)&v48, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)&v48) == 1)
    {
      LOBYTE(Strong) = 0;
    }
    else
    {
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v47, (uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
      long long v41 = v45[6];
      long long v42 = v45[7];
      long long v43 = v45[8];
      __int16 v44 = v46;
      long long v37 = v45[2];
      long long v38 = v45[3];
      long long v39 = v45[4];
      long long v40 = v45[5];
      long long v35 = v45[0];
      long long v36 = v45[1];
      LOBYTE(Strong) = NavigationState.canDismissRoot(of:)(v22, v21, v23);
      outlined retain of NavigationState?((uint64_t)v47, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
    }
  }
  outlined destroy of NavigationAuthority((uint64_t)v54);
  uint64_t v25 = *((unsigned __int8 *)v1 + 8);
  *(void *)&long long v34 = *(void *)AGGraphGetValue();
  uint64_t v33 = *(void *)AGGraphGetValue();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v26 = *((void *)v1 + 4);
  uint64_t v27 = swift_allocObject();
  *(unsigned char *)(v27 + 16) = (v25 - 1) < 2;
  *(void *)(v27 + 24) = v26;
  *(unsigned char *)(v27 + 32) = Strong & 1;
  uint64_t v28 = swift_getKeyPath();
  long long v29 = v1[1];
  v47[0] = *v1;
  v47[1] = v29;
  long long v31 = *v1;
  long long v30 = v1[1];
  v47[2] = v1[2];
  long long v48 = v31;
  long long v49 = v30;
  long long v50 = v1[2];
  MEMORY[0x1F4188790](v28);
  *(&KeyPath - 2) = (uint64_t)v47;
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Content, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
  lazy protocol witness table accessor for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content> and conformance _NavigationSplitReader.PreparedColumn<A>();
  swift_retain();
  StatefulRule.withObservation<A>(do:)();
  *(void *)&long long v48 = v34;
  *((void *)&v48 + 1) = v25;
  *(void *)&long long v49 = v33;
  *((void *)&v49 + 1) = -1;
  *(void *)&long long v50 = KeyPath;
  *((void *)&v50 + 1) = closure #1 in _NavigationSplitReader.PreparedColumn.updateValue()specialized partial apply;
  uint64_t v51 = v27;
  uint64_t v52 = v28;
  int v53 = v45[0];
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content);
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  return swift_release();
}

{
  long long *v0;
  long long *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  void *WeakValue;
  long long v11;
  uint64_t v12;
  uint64_t (*v13)(void, uint64_t);
  uint64_t Value;
  uint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void, uint64_t);
  uint64_t v20;
  unsigned __int8 v21;
  Swift::UInt v22;
  Swift::UInt v23;
  uint64_t Strong;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  long long v29;
  long long v30;
  long long v31;
  uint64_t KeyPath;
  uint64_t v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  __int16 v44;
  _OWORD v45[9];
  __int16 v46;
  _OWORD v47[10];
  long long v48;
  long long v49;
  long long v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned char v54[8];
  uint64_t v55;
  uint64_t v56;

  uint64_t v1 = v0;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&KeyPath - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0 && !*((void *)v0 + 4))
  {
    Weakuint64_t Value = (void *)AGGraphGetWeakValue();
    if (WeakValue)
    {
      *(void *)&long long v11 = *WeakValue;
    }
    else
    {
      *(void *)&long long v11 = -1;
      *((void *)&v11 + 1) = -1;
    }
    long long v34 = v11;
    type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for MutableBox<NavigationState.Seeds>, (uint64_t)&type metadata for NavigationState.Seeds, MEMORY[0x1E4F3F398]);
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v34;
    swift_release();
    *((void *)v1 + 5) = v12;
    uint64_t v13 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
    uint64_t Value = AGGraphGetValue();
    uint64_t result = outlined init with copy of AccessibilityScrollableContext?(Value, (uint64_t)&v48, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, v13);
    if (*((void *)&v48 + 1) == 1)
    {
      __break(1u);
      return result;
    }
    char v16 = *((unsigned char *)v1 + 8);
    uint64_t v17 = *(void *)AGGraphGetValue();
    uint64_t v18 = *(void *)AGGraphGetValue();
    outlined init with take of NavigationAuthority((uint64_t)&v48, (uint64_t)v4);
    *((void *)v4 + 3) = v17;
    v4[32] = v16;
    *((void *)v4 + 5) = v18;
    swift_retain();
    UUID.init()();
    *(void *)&v4[*(int *)(v2 + 28)] = v12;
    type metadata accessor for LocationBox<_NavigationSplitReader.SplitPresentationModeLocation>();
    swift_allocObject();
    *((void *)v1 + 4) = LocationBox.init(_:)();
  }
  else
  {
    uint64_t v5 = *((void *)v0 + 5);
    if (v5)
    {
      uint64_t v6 = (int *)AGGraphGetWeakValue();
      if (v6)
      {
        int v7 = *v6;
        int v8 = v6[1];
        swift_beginAccess();
        if (*(_DWORD *)(v5 + 16) != v7 || *(_DWORD *)(v5 + 20) != v8)
        {
          *(_DWORD *)(v5 + 16) = v7;
          *(_DWORD *)(v5 + 20) = v8;
        }
      }
    }
  }
  unint64_t v19 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  uint64_t v20 = AGGraphGetValue();
  outlined init with copy of AccessibilityScrollableContext?(v20, (uint64_t)v54, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, v19);
  if (v55 == 1) {
    __break(1u);
  }
  unsigned __int8 v21 = *((unsigned char *)v1 + 8);
  Swift::UInt v22 = *(void *)AGGraphGetValue();
  Swift::UInt v23 = *(void *)AGGraphGetValue();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    swift_beginAccess();
    outlined init with take of _LazyLayout_PlacementContext?(Strong + 16, (uint64_t)v47, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    outlined retain of NavigationState?((uint64_t)v47, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?);
    swift_release();
    outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v47, (uint64_t)&v48, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)&v48) == 1)
    {
      LOBYTE(Strong) = 0;
    }
    else
    {
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v47, (uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
      long long v41 = v45[6];
      long long v42 = v45[7];
      long long v43 = v45[8];
      __int16 v44 = v46;
      long long v37 = v45[2];
      long long v38 = v45[3];
      long long v39 = v45[4];
      long long v40 = v45[5];
      long long v35 = v45[0];
      long long v36 = v45[1];
      LOBYTE(Strong) = NavigationState.canDismissRoot(of:)(v22, v21, v23);
      outlined retain of NavigationState?((uint64_t)v47, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
    }
  }
  outlined destroy of NavigationAuthority((uint64_t)v54);
  uint64_t v25 = *((unsigned __int8 *)v1 + 8);
  *(void *)&long long v34 = *(void *)AGGraphGetValue();
  uint64_t v33 = *(void *)AGGraphGetValue();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v26 = *((void *)v1 + 4);
  uint64_t v27 = swift_allocObject();
  *(unsigned char *)(v27 + 16) = (v25 - 1) < 2;
  *(void *)(v27 + 24) = v26;
  *(unsigned char *)(v27 + 32) = Strong & 1;
  uint64_t v28 = swift_getKeyPath();
  long long v29 = v1[1];
  v47[0] = *v1;
  v47[1] = v29;
  long long v31 = *v1;
  long long v30 = v1[1];
  v47[2] = v1[2];
  long long v48 = v31;
  long long v49 = v30;
  long long v50 = v1[2];
  MEMORY[0x1F4188790](v28);
  *(&KeyPath - 2) = (uint64_t)v47;
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Detail, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
  lazy protocol witness table accessor for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail> and conformance _NavigationSplitReader.PreparedColumn<A>();
  swift_retain();
  StatefulRule.withObservation<A>(do:)();
  *(void *)&long long v48 = v34;
  *((void *)&v48 + 1) = v25;
  *(void *)&long long v49 = v33;
  *((void *)&v49 + 1) = -1;
  *(void *)&long long v50 = KeyPath;
  *((void *)&v50 + 1) = partial apply for specialized closure #1 in _NavigationSplitReader.PreparedColumn.updateValue();
  uint64_t v51 = v27;
  uint64_t v52 = v28;
  int v53 = v45[0];
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail);
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  return swift_release();
}

{
  long long *v0;
  long long *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  void *WeakValue;
  long long v11;
  uint64_t v12;
  uint64_t (*v13)(void, uint64_t);
  uint64_t Value;
  uint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void, uint64_t);
  uint64_t v20;
  unsigned __int8 v21;
  Swift::UInt v22;
  Swift::UInt v23;
  uint64_t Strong;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  long long v29;
  long long v30;
  long long v31;
  uint64_t KeyPath;
  uint64_t v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  __int16 v44;
  _OWORD v45[9];
  __int16 v46;
  _OWORD v47[10];
  long long v48;
  long long v49;
  long long v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned char v54[8];
  uint64_t v55;
  uint64_t v56;

  uint64_t v1 = v0;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&KeyPath - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0 && !*((void *)v0 + 4))
  {
    Weakuint64_t Value = (void *)AGGraphGetWeakValue();
    if (WeakValue)
    {
      *(void *)&long long v11 = *WeakValue;
    }
    else
    {
      *(void *)&long long v11 = -1;
      *((void *)&v11 + 1) = -1;
    }
    long long v34 = v11;
    type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for MutableBox<NavigationState.Seeds>, (uint64_t)&type metadata for NavigationState.Seeds, MEMORY[0x1E4F3F398]);
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v34;
    swift_release();
    *((void *)v1 + 5) = v12;
    uint64_t v13 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
    uint64_t Value = AGGraphGetValue();
    uint64_t result = outlined init with copy of AccessibilityScrollableContext?(Value, (uint64_t)&v48, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, v13);
    if (*((void *)&v48 + 1) == 1)
    {
      __break(1u);
      return result;
    }
    char v16 = *((unsigned char *)v1 + 8);
    uint64_t v17 = *(void *)AGGraphGetValue();
    uint64_t v18 = *(void *)AGGraphGetValue();
    outlined init with take of NavigationAuthority((uint64_t)&v48, (uint64_t)v4);
    *((void *)v4 + 3) = v17;
    v4[32] = v16;
    *((void *)v4 + 5) = v18;
    swift_retain();
    UUID.init()();
    *(void *)&v4[*(int *)(v2 + 28)] = v12;
    type metadata accessor for LocationBox<_NavigationSplitReader.SplitPresentationModeLocation>();
    swift_allocObject();
    *((void *)v1 + 4) = LocationBox.init(_:)();
  }
  else
  {
    uint64_t v5 = *((void *)v0 + 5);
    if (v5)
    {
      uint64_t v6 = (int *)AGGraphGetWeakValue();
      if (v6)
      {
        int v7 = *v6;
        int v8 = v6[1];
        swift_beginAccess();
        if (*(_DWORD *)(v5 + 16) != v7 || *(_DWORD *)(v5 + 20) != v8)
        {
          *(_DWORD *)(v5 + 16) = v7;
          *(_DWORD *)(v5 + 20) = v8;
        }
      }
    }
  }
  unint64_t v19 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  uint64_t v20 = AGGraphGetValue();
  outlined init with copy of AccessibilityScrollableContext?(v20, (uint64_t)v54, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, v19);
  if (v55 == 1) {
    __break(1u);
  }
  unsigned __int8 v21 = *((unsigned char *)v1 + 8);
  Swift::UInt v22 = *(void *)AGGraphGetValue();
  Swift::UInt v23 = *(void *)AGGraphGetValue();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    swift_beginAccess();
    outlined init with take of _LazyLayout_PlacementContext?(Strong + 16, (uint64_t)v47, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    outlined retain of NavigationState?((uint64_t)v47, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?);
    swift_release();
    outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v47, (uint64_t)&v48, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)&v48) == 1)
    {
      LOBYTE(Strong) = 0;
    }
    else
    {
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v47, (uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
      long long v41 = v45[6];
      long long v42 = v45[7];
      long long v43 = v45[8];
      __int16 v44 = v46;
      long long v37 = v45[2];
      long long v38 = v45[3];
      long long v39 = v45[4];
      long long v40 = v45[5];
      long long v35 = v45[0];
      long long v36 = v45[1];
      LOBYTE(Strong) = NavigationState.canDismissRoot(of:)(v22, v21, v23);
      outlined retain of NavigationState?((uint64_t)v47, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
    }
  }
  outlined destroy of NavigationAuthority((uint64_t)v54);
  uint64_t v25 = *((unsigned __int8 *)v1 + 8);
  *(void *)&long long v34 = *(void *)AGGraphGetValue();
  uint64_t v33 = *(void *)AGGraphGetValue();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v26 = *((void *)v1 + 4);
  uint64_t v27 = swift_allocObject();
  *(unsigned char *)(v27 + 16) = (v25 - 1) < 2;
  *(void *)(v27 + 24) = v26;
  *(unsigned char *)(v27 + 32) = Strong & 1;
  uint64_t v28 = swift_getKeyPath();
  long long v29 = v1[1];
  v47[0] = *v1;
  v47[1] = v29;
  long long v31 = *v1;
  long long v30 = v1[1];
  v47[2] = v1[2];
  long long v48 = v31;
  long long v49 = v30;
  long long v50 = v1[2];
  MEMORY[0x1F4188790](v28);
  *(&KeyPath - 2) = (uint64_t)v47;
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>(0, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
  lazy protocol witness table accessor for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar> and conformance _NavigationSplitReader.PreparedColumn<A>();
  swift_retain();
  StatefulRule.withObservation<A>(do:)();
  *(void *)&long long v48 = v34;
  *((void *)&v48 + 1) = v25;
  *(void *)&long long v49 = v33;
  *((void *)&v49 + 1) = -1;
  *(void *)&long long v50 = KeyPath;
  *((void *)&v50 + 1) = closure #1 in _NavigationSplitReader.PreparedColumn.updateValue()specialized partial apply;
  uint64_t v51 = v27;
  uint64_t v52 = v28;
  int v53 = v45[0];
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar);
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content> and conformance _NavigationSplitReader.PreparedColumn<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content> and conformance _NavigationSplitReader.PreparedColumn<A>;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content> and conformance _NavigationSplitReader.PreparedColumn<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Content, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content> and conformance _NavigationSplitReader.PreparedColumn<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content> and conformance _NavigationSplitReader.PreparedColumn<A>;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content> and conformance _NavigationSplitReader.PreparedColumn<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>(255, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Content, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content> and conformance _NavigationSplitReader.PreparedColumn<A>);
  }
  return result;
}

uint64_t NavigationState.canDismissRoot(of:)(Swift::UInt a1, unsigned __int8 a2, Swift::UInt a3)
{
  if ((a2 - 1) > 1u) {
    goto LABEL_26;
  }
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v3 + 96);
  uint64_t v9 = *(void *)(v3 + 136);
  unsigned int v10 = *(unsigned __int16 *)(v3 + 144);
  if (v8 == 1)
  {
LABEL_11:
    long long v25 = *(_OWORD *)(v3 + 120);
    long long v26 = *(_OWORD *)(v3 + 104);
    long long v27 = *(_OWORD *)(v3 + 80);
    if (*(void *)(v7 + 16))
    {
      unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, a3);
      if (v14)
      {
        memcpy(__dst, (const void *)(*(void *)(v7 + 56) + 304 * v13), 0x12BuLL);
        if (NavigationColumnState.hasDismissableColumnContent.getter()) {
          goto LABEL_24;
        }
      }
      if (*(void *)(v7 + 16))
      {
        BOOL v15 = a2 == 2 && a3 == 3;
        unsigned __int8 v16 = v15;
        unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a1, v16, a3);
        if (v18)
        {
          uint64_t v19 = *(void *)(v7 + 56) + 304 * v17;
          uint64_t v20 = *(void *)(v19 + 48);
          if (v20)
          {
            int v21 = *(_DWORD *)(v19 + 80);
            uint64_t v22 = *(void *)(v19 + 72);
            LODWORD(__dst[0]) = *(void *)(v19 + 40);
            *((void *)&__dst[0] + 1) = v20;
            __dst[1] = *(_OWORD *)(v19 + 56);
            *(void *)&__dst[2] = v22;
            DWORD2(__dst[2]) = v21;
            if (NavigationListState.hasNonEmptySelection.getter())
            {
LABEL_24:
              char v12 = 1;
              return v12 & 1;
            }
          }
        }
      }
    }
    if ((a2 - 2) >= 4u)
    {
      __dst[0] = *(_OWORD *)v3;
      *(void *)&__dst[1] = *(void *)(v3 + 16);
      *((void *)&__dst[1] + 1) = v7;
      long long v24 = *(_OWORD *)(v3 + 48);
      __dst[2] = *(_OWORD *)(v3 + 32);
      __dst[3] = v24;
      __dst[4] = *(_OWORD *)(v3 + 64);
      __dst[5] = v27;
      *(void *)&__dst[6] = v8;
      *(_OWORD *)((char *)&__dst[6] + 8) = v26;
      *(_OWORD *)((char *)&__dst[7] + 8) = v25;
      *((void *)&__dst[8] + 1) = v9;
      LOWORD(__dst[9]) = v10;
      char v12 = NavigationState.canDismissRoot(of:)(a1, 2, a3);
      return v12 & 1;
    }
LABEL_26:
    char v12 = 0;
    return v12 & 1;
  }
  unsigned int v11 = v10 >> 8;
  char v12 = 1;
  switch(BYTE1(*(_OWORD *)(v3 + 104)))
  {
    case 1u:
      if (a2 == 2) {
        goto LABEL_5;
      }
      break;
    case 2u:
      return v12 & 1;
    default:
LABEL_5:
      if (v11 == 3) {
        goto LABEL_11;
      }
      if (a2 == 2)
      {
        if (v11 != 2) {
          goto LABEL_11;
        }
      }
      else if (a2 != 1 || v11 - 1 >= 2)
      {
        goto LABEL_11;
      }
      break;
  }
  return v12 & 1;
}

unint64_t lazy protocol witness table accessor for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail> and conformance _NavigationSplitReader.PreparedColumn<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail> and conformance _NavigationSplitReader.PreparedColumn<A>;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail> and conformance _NavigationSplitReader.PreparedColumn<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Detail, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail> and conformance _NavigationSplitReader.PreparedColumn<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail> and conformance _NavigationSplitReader.PreparedColumn<A>;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail> and conformance _NavigationSplitReader.PreparedColumn<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>(255, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Detail, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail> and conformance _NavigationSplitReader.PreparedColumn<A>);
  }
  return result;
}

uint64_t type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation()
{
  uint64_t result = type metadata singleton initialization cache for _NavigationSplitReader.SplitPresentationModeLocation;
  if (!type metadata singleton initialization cache for _NavigationSplitReader.SplitPresentationModeLocation) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar> and conformance _NavigationSplitReader.PreparedColumn<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar> and conformance _NavigationSplitReader.PreparedColumn<A>;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar> and conformance _NavigationSplitReader.PreparedColumn<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar> and conformance _NavigationSplitReader.PreparedColumn<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar> and conformance _NavigationSplitReader.PreparedColumn<A>;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar> and conformance _NavigationSplitReader.PreparedColumn<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>(255, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar> and conformance _NavigationSplitReader.PreparedColumn<A>);
  }
  return result;
}

uint64_t NavigationColumnState.hasDismissableColumnContent.getter()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[18];
  uint64_t v6 = v0[19];
  uint64_t v8 = v0[20];
  uint64_t v7 = v0[21];
  uint64_t v9 = v0[22];
  if (v0[6])
  {
    uint64_t v25 = v0[21];
    uint64_t v10 = v0[22];
    uint64_t v11 = v0[14];
    uint64_t v12 = v0[20];
    uint64_t v13 = v0[19];
    uint64_t v14 = v0[18];
    uint64_t v15 = v0[17];
    uint64_t v16 = v0[16];
    uint64_t v17 = v0[15];
    char v18 = NavigationListState.hasNonEmptySelection.getter();
    uint64_t v1 = v17;
    uint64_t v3 = v16;
    uint64_t v4 = v15;
    uint64_t v5 = v14;
    uint64_t v6 = v13;
    uint64_t v8 = v12;
    uint64_t v2 = v11;
    uint64_t v9 = v10;
    uint64_t v7 = v25;
    if (v18) {
      return 1;
    }
  }
  unint64_t v19 = v2 & 0xF000000000000007;
  if (v7 < 0)
  {
    uint64_t result = 1;
    if (v19 != 0xF000000000000007) {
      return result;
    }
    return result > 1;
  }
  if (v19 != 0xF000000000000007) {
    return 1;
  }
  long long v26 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 88);
  uint64_t v24 = v1;
  outlined copy of NavigationColumnState.ColumnContent(v2, v1, v3, v4, v5, v6, v8, v7);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v20 = swift_bridgeObjectRetain();
  uint64_t v21 = v26(v20);
  uint64_t result = swift_release();
  uint64_t v27 = v21 + 1;
  if (__OFADD__(v21, 1))
  {
    __break(1u);
    return result;
  }
  uint64_t v23 = *(void *)(v9 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NavigationColumnState.ColumnContent(v2, v24, v3, v4, v5, v6, v8, v7);
  uint64_t result = v27 + v23;
  if (__OFADD__(v27, v23))
  {
    __break(1u);
    return 1;
  }
  return result > 1;
}

uint64_t destroy for _NavigationSplitReader.SplitPresentationModeLocation(uint64_t a1, uint64_t a2)
{
  swift_weakDestroy();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_release();
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.count.getter()
{
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  unint64_t v3 = *(void *)(v0 + 32);
  char v4 = *(unsigned char *)(v0 + 40);
  unint64_t v5 = *(void *)(v0 + 48);
  if ((v4 & 1) == 0) {
    goto LABEL_10;
  }
  if (v1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v6 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  outlined copy of NavigationPath.Representation(v1, v2, v3, 1);
  swift_bridgeObjectRetain();
  outlined copy of NavigationPath.Representation(v1, v2, v3, 1);
  while (1)
  {
    uint64_t v7 = *(void *)(v2 + 16);
    uint64_t v8 = v6 + v7;
    if (__OFADD__(v6, v7))
    {
      __break(1u);
    }
    else if (!(v3 >> 62))
    {
      uint64_t v9 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_7;
    }
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_7:
    outlined consume of NavigationPath.Representation(v1, v2, v3, 1);
    BOOL v10 = __OFADD__(v8, v9);
    uint64_t v11 = v8 + v9;
    if (!v10) {
      goto LABEL_12;
    }
    __break(1u);
LABEL_10:
    if (!(v1 >> 62))
    {
      uint64_t v11 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      outlined copy of NavigationPath.Representation(v1, v2, v3, 0);
      swift_bridgeObjectRetain();
LABEL_12:
      if (!(v5 >> 62)) {
        goto LABEL_13;
      }
      goto LABEL_21;
    }
    outlined copy of NavigationPath.Representation(v1, v2, v3, 0);
    swift_bridgeObjectRetain();
    outlined copy of NavigationPath.Representation(v1, v2, v3, 0);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    outlined consume of NavigationPath.Representation(v1, v2, v3, 0);
    if (!(v5 >> 62))
    {
LABEL_13:
      uint64_t v12 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_14;
    }
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_14:
    outlined consume of NavigationPath.Representation(v1, v2, v3, v4);
    swift_bridgeObjectRelease();
    uint64_t result = v11 + v12;
    if (!__OFADD__(v11, v12)) {
      return result;
    }
    __break(1u);
LABEL_17:
    outlined copy of NavigationPath.Representation(v1, v2, v3, 1);
    swift_bridgeObjectRetain();
    outlined copy of NavigationPath.Representation(v1, v2, v3, 1);
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
}

void type metadata accessor for LocationBox<_NavigationSplitReader.SplitPresentationModeLocation>()
{
  if (!lazy cache variable for type metadata for LocationBox<_NavigationSplitReader.SplitPresentationModeLocation>)
  {
    type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation();
    lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type _NavigationSplitReader.SplitPresentationModeLocation and conformance _NavigationSplitReader.SplitPresentationModeLocation, (void (*)(uint64_t))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
    unint64_t v0 = type metadata accessor for LocationBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LocationBox<_NavigationSplitReader.SplitPresentationModeLocation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children()
{
  unint64_t result = lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children);
  }
  return result;
}

uint64_t PlatformFallbackToggleStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v20 = *(unsigned char *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v7 = *(void **)(a1 + 72);
  uint64_t v9 = v8 & 1;
  if (v7) {
    uint64_t v10 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v10 = 0;
  }
  if (v7) {
    uint64_t v11 = *(void *)(a1 + 56);
  }
  else {
    uint64_t v11 = 0;
  }
  if (!v7) {
    uint64_t v9 = 0;
  }
  uint64_t v21 = v9;
  uint64_t v22 = v11;
  if (v7) {
    uint64_t v12 = *(void *)(a1 + 80);
  }
  else {
    uint64_t v12 = 0;
  }
  if (v7) {
    uint64_t v13 = *(void *)(a1 + 88);
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v18 = v13;
  uint64_t v19 = v12;
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v6, v5, v8, v7);
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v10, v22, v21, v7);
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v10, v22, v21, v7);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v15 = swift_getKeyPath();
  uint64_t v16 = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v20;
  *(void *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v22;
  *(void *)(a2 + 40) = v21;
  *(void *)(a2 + 48) = v7;
  *(void *)(a2 + 56) = v19;
  *(void *)(a2 + 64) = v18;
  *(void *)(a2 + 72) = KeyPath;
  *(unsigned char *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = v15;
  *(unsigned char *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = v16;
  *(unsigned char *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = result;
  *(unsigned char *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  return result;
}

uint64_t DefaultListToggleStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  char v23 = *(unsigned char *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v7 = *(void **)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v27);
  if (v27 == 1) {
    uint64_t v11 = static Text.System.on.getter();
  }
  else {
    uint64_t v11 = static Text.System.off.getter();
  }
  uint64_t v26 = v11;
  uint64_t v25 = v12;
  BOOL v14 = v7 == 0;
  if (v7) {
    uint64_t v15 = v6;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v22 = v15;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v3;
  uint64_t v16 = v7;
  if (v7) {
    uint64_t v17 = v5;
  }
  else {
    uint64_t v17 = 0;
  }
  char v21 = v8;
  if (v14) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v8 & 1;
  }
  *(unsigned char *)(a2 + 16) = v23;
  if (v14)
  {
    uint64_t v10 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = v9;
  }
  char v24 = v13 & 1;
  *(void *)(a2 + 24) = v15;
  *(void *)(a2 + 32) = v17;
  *(void *)(a2 + 40) = v18;
  *(void *)(a2 + 48) = v16;
  *(void *)(a2 + 56) = v10;
  *(void *)(a2 + 64) = v19;
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v6, v5, v21, v16);
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v22, v17, v18, v16);
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v22, v17, v18, v16);
  outlined consume of Text.Storage(v26, v25, v24);
  return swift_bridgeObjectRelease();
}

double protocol witness for ToggleStyle.makeBody(configuration:) in conformance DefaultToggleStyle@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DefaultToggleStyle.makeBody(configuration:)(a1, a2);
}

double DefaultToggleStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v21 = *(unsigned char *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v7 = *(void **)(a1 + 72);
  uint64_t v9 = v8 & 1;
  if (v7) {
    uint64_t v10 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v10 = 0;
  }
  if (v7) {
    uint64_t v11 = *(void *)(a1 + 56);
  }
  else {
    uint64_t v11 = 0;
  }
  if (!v7) {
    uint64_t v9 = 0;
  }
  uint64_t v22 = v9;
  uint64_t v23 = v10;
  if (v7) {
    uint64_t v12 = *(void *)(a1 + 80);
  }
  else {
    uint64_t v12 = 0;
  }
  if (v7) {
    uint64_t v13 = *(void *)(a1 + 88);
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v19 = v13;
  uint64_t v20 = v12;
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v5, v6, v8, v7);
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v23, v11, v22, v7);
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v23, v11, v22, v7);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v15 = swift_getKeyPath();
  uint64_t v16 = swift_getKeyPath();
  uint64_t v17 = swift_getKeyPath();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  double result = v28;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v21;
  *(void *)(a2 + 24) = v23;
  *(void *)(a2 + 32) = v11;
  *(void *)(a2 + 40) = v22;
  *(void *)(a2 + 48) = v7;
  *(void *)(a2 + 56) = v20;
  *(void *)(a2 + 64) = v19;
  *(void *)(a2 + 72) = KeyPath;
  *(unsigned char *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = v15;
  *(unsigned char *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = v16;
  *(unsigned char *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = v17;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(unsigned char *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = v24;
  *(unsigned char *)(a2 + 176) = v25;
  *(void *)(a2 + 184) = v26;
  *(unsigned char *)(a2 + 192) = v27;
  *(double *)(a2 + 200) = v28;
  *(unsigned char *)(a2 + 208) = v29;
  return result;
}

uint64_t static ToolbarContentBuilder.buildBlock<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  return TupleToolbarContent.init(_:)((uint64_t)v7, a2, a3);
}

uint64_t initializeWithCopy for ToolbarItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48) + 7;
  unint64_t v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned char *)(v9 + 40) == 1)
  {
    uint64_t v10 = *(void *)(v9 + 24);
    *(void *)(v8 + 24) = v10;
    *(void *)(v8 + 32) = *(void *)(v9 + 32);
    (**(void (***)(unint64_t, unint64_t))(v10 - 8))(v8, v9);
    *(unsigned char *)(v8 + 40) = 1;
  }
  else
  {
    long long v11 = *(_OWORD *)v9;
    long long v12 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)(v8 + 25) = *(_OWORD *)(v9 + 25);
    *(_OWORD *)unint64_t v8 = v11;
    *(_OWORD *)(v8 + 16) = v12;
  }
  uint64_t v13 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v14 = v13 + 16;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (v8 + v15 + 41) & ~v15;
  uint64_t v17 = (v9 + v15 + 41) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v16, v17);
  uint64_t v18 = *(void *)(v14 + 48);
  uint64_t v19 = (unsigned char *)(v16 + v18);
  uint64_t v20 = (unsigned char *)(v17 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  _OWORD v19[2] = v20[2];
  return a1;
}

uint64_t TupleToolbarContent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

void *assignWithCopy for ToolbarModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 40) + 7;
  long long v12 = (void *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = v13[1];
  if (v12[1] < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      *long long v12 = *v13;
      v12[1] = v13[1];
      v12[2] = v13[2];
      swift_retain();
      swift_retain();
      return a1;
    }
LABEL_7:
    long long v15 = *(_OWORD *)v13;
    v12[2] = v13[2];
    *(_OWORD *)long long v12 = v15;
    return a1;
  }
  if (v14 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    goto LABEL_7;
  }
  *long long v12 = *v13;
  swift_retain();
  swift_release();
  v12[1] = v13[1];
  swift_retain();
  swift_release();
  v12[2] = v13[2];
  return a1;
}

uint64_t assignWithCopy for ViewLeafView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  uint64_t v7 = (void **)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void **)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *v8;
  uint64_t v10 = *v7;
  char *v7 = *v8;
  id v11 = v9;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 24))(((unint64_t)v7 + *(unsigned __int8 *)(v13 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), ((unint64_t)v8 + *(unsigned __int8 *)(v13 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for OptionalFormatInputToString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithCopy for NavigationLinkButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 17);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a1 + 2;
    }
    if (v6 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v7 = *(unsigned __int8 *)(a2 + 17);
    if (v7 >= 2) {
      unsigned int v7 = *(_DWORD *)a2 + 2;
    }
    if (v7 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(unsigned char *)(a1 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 17) = 0;
    }
    swift_retain();
  }
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 | 7) + 18;
  long long v12 = (void *)((v11 + a1) & ~(v10 | 7));
  uint64_t v13 = (unsigned __int8 *)((v11 + a2) & ~(v10 | 7));
  uint64_t v14 = ~v10;
  uint64_t v15 = v10 + 17;
  uint64_t v16 = *(void *)(v9 + 64);
  unint64_t v17 = ((v10 + 17) & ~v10) + v16;
  uint64_t v18 = v16 + 7;
  unint64_t v19 = ((((((((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
      + 24;
  if (v19 <= v17) {
    unint64_t v20 = v17;
  }
  else {
    unint64_t v20 = v19;
  }
  unint64_t v21 = v20 + 1;
  unsigned int v22 = *((unsigned __int8 *)v12 + v20);
  unsigned int v23 = v13[v20];
  if (v22 > 1)
  {
    if (v23 <= 1)
    {
      unint64_t v53 = v20 + 1;
      if (v23 != 1)
      {
LABEL_58:
        *long long v12 = *(void *)v13;
        v12[1] = *((void *)v13 + 1);
        *((unsigned char *)v12 + 16) = v13[16];
        long long v50 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
        swift_retain();
        swift_retain();
        v50(((unint64_t)v12 + v15) & v14, (unint64_t)&v13[v15] & v14, v8);
        *((unsigned char *)v12 + v20) = 0;
LABEL_59:
        unint64_t v21 = v53;
        goto LABEL_60;
      }
LABEL_27:
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v9 + 16))(v12, v13, v8);
      char v25 = (void *)(((unint64_t)v12 + v18) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v26 = (void *)((unint64_t)&v13[v18] & 0xFFFFFFFFFFFFFFF8);
      *char v25 = *v26;
      unint64_t v27 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v28 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v27 = *(void *)v28;
      *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
      unint64_t v29 = ((unint64_t)v25 + 31) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v30 = ((unint64_t)v26 + 31) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v31 = *(void *)(v30 + 8);
      swift_retain();
      if (v31 < 0xFFFFFFFF)
      {
        long long v33 = *(_OWORD *)v30;
        *(unsigned char *)(v29 + 16) = *(unsigned char *)(v30 + 16);
        *(_OWORD *)unint64_t v29 = v33;
      }
      else
      {
        *(void *)unint64_t v29 = *(void *)v30;
        *(void *)(v29 + 8) = *(void *)(v30 + 8);
        *(unsigned char *)(v29 + 16) = *(unsigned char *)(v30 + 16);
        swift_retain();
        swift_retain();
      }
      unint64_t v34 = ((unint64_t)v25 + 55) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v35 = ((unint64_t)v26 + 55) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v36 = *(void *)(v35 + 8);
      if (v36 >= 0xFFFFFFFF) {
        LODWORD(v36) = -1;
      }
      if ((int)v36 - 1 < 0)
      {
        swift_weakCopyInit();
        *(void *)(v34 + 8) = *(void *)(v35 + 8);
        *(void *)(v34 + 16) = *(void *)(v35 + 16);
        swift_retain();
        swift_retain();
      }
      else
      {
        long long v37 = *(_OWORD *)v35;
        *(void *)(v34 + 16) = *(void *)(v35 + 16);
        *(_OWORD *)unint64_t v34 = v37;
      }
      long long v42 = (_OWORD *)((v34 + 31) & 0xFFFFFFFFFFFFFFF8);
      long long v43 = (long long *)((v35 + 31) & 0xFFFFFFFFFFFFFFF8);
      long long v44 = *v43;
      long long v45 = v43[2];
      v42[1] = v43[1];
      v42[2] = v45;
      *long long v42 = v44;
      unint64_t v46 = ((unint64_t)v42 + 55) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v47 = ((unint64_t)v43 + 55) & 0xFFFFFFFFFFFFFFF8;
      long long v48 = *(_OWORD *)v47;
      *(void *)(v46 + 16) = *(void *)(v47 + 16);
      *(_OWORD *)unint64_t v46 = v48;
      *((unsigned char *)v12 + v20) = 1;
      goto LABEL_59;
    }
    goto LABEL_37;
  }
  if (v23 > 1)
  {
    if (v22 == 1)
    {
      (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
      swift_release();
      if (*(void *)((((((unint64_t)v12 + v18) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        swift_release();
      }
      unint64_t v32 = *(void *)((((((unint64_t)v12 + v18) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v32 >= 0xFFFFFFFF) {
        LODWORD(v32) = -1;
      }
      if ((int)v32 - 1 < 0)
      {
        swift_weakDestroy();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v9 + 8))(((unint64_t)v12 + v15) & v14, v8);
    }
LABEL_37:
    memcpy(v12, v13, v20 + 1);
    goto LABEL_60;
  }
  if (v12 != (void *)v13)
  {
    unint64_t v53 = v20 + 1;
    if (v22 == 1)
    {
      (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
      unint64_t v52 = ((unint64_t)v12 + v18) & 0xFFFFFFFFFFFFFFF8;
      swift_release();
      if (*(void *)(((v52 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        swift_release();
      }
      unint64_t v24 = *(void *)(((v52 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v24 >= 0xFFFFFFFF) {
        LODWORD(v24) = -1;
      }
      if ((int)v24 - 1 < 0)
      {
        swift_weakDestroy();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v9 + 8))(((unint64_t)v12 + v15) & v14, v8);
    }
    unsigned int v38 = v13[v20];
    unsigned int v39 = v38 - 2;
    if (v38 >= 2)
    {
      if (v20 <= 3) {
        uint64_t v40 = v20;
      }
      else {
        uint64_t v40 = 4;
      }
      switch(v40)
      {
        case 1:
          int v41 = *v13;
          goto LABEL_55;
        case 2:
          int v41 = *(unsigned __int16 *)v13;
          goto LABEL_55;
        case 3:
          int v41 = *(unsigned __int16 *)v13 | (v13[2] << 16);
          goto LABEL_55;
        case 4:
          int v41 = *(_DWORD *)v13;
LABEL_55:
          int v49 = (v41 | (v39 << (8 * v20))) + 2;
          unsigned int v38 = v41 + 2;
          if (v20 < 4) {
            unsigned int v38 = v49;
          }
          break;
        default:
          break;
      }
    }
    if (v38 != 1) {
      goto LABEL_58;
    }
    goto LABEL_27;
  }
LABEL_60:
  *((unsigned char *)v12 + v21) = v13[v21];
  return a1;
}

void *assignWithCopy for ContentListItemNavigationLinkStyle(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  if (((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24 <= ((v7 + 17) & (unint64_t)~v7) + v9)
    unint64_t v10 = ((v7 + 17) & ~v7) + v9;
  else {
    unint64_t v10 = ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
  }
        + 24;
  unsigned int v11 = *((unsigned __int8 *)__dst + v10);
  unsigned int v12 = *((unsigned __int8 *)__src + v10);
  if (v11 > 1)
  {
    if (v12 <= 1)
    {
      if (v12 != 1)
      {
LABEL_48:
        unsigned char *__dst = *__src;
        __dst[1] = __src[1];
        *((unsigned char *)__dst + 16) = *((unsigned char *)__src + 16);
        uint64_t v40 = (char *)__src + v7;
        unint64_t v41 = ((unint64_t)__dst + v7 + 17) & v8;
        uint64_t v42 = (unint64_t)(v40 + 17) & v8;
        long long v43 = *(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16);
        swift_retain();
        swift_retain();
        v43(v41, v42, v5);
        *((unsigned char *)__dst + v10) = 0;
        return __dst;
      }
      goto LABEL_16;
    }
LABEL_26:
    memcpy(__dst, __src, v10 + 1);
    return __dst;
  }
  if (v12 > 1)
  {
    if (v11 == 1)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(__dst, v5);
      unint64_t v22 = ((unint64_t)__dst + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
      swift_release();
      if (*(void *)(((v22 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        swift_release();
      }
      unint64_t v23 = *(void *)(((v22 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v23 >= 0xFFFFFFFF) {
        LODWORD(v23) = -1;
      }
      if ((int)v23 - 1 < 0)
      {
        swift_weakDestroy();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)__dst + v7 + 17) & v8, v5);
    }
    goto LABEL_26;
  }
  if (__dst == __src) {
    return __dst;
  }
  if (v11 == 1)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(__dst, v5);
    unint64_t v13 = ((unint64_t)__dst + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
    swift_release();
    if (*(void *)(((v13 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
    {
      swift_release();
      swift_release();
    }
    unint64_t v14 = *(void *)(((v13 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    if ((int)v14 - 1 < 0)
    {
      swift_weakDestroy();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)__dst + v7 + 17) & v8, v5);
  }
  unsigned int v29 = *((unsigned __int8 *)__src + v10);
  unsigned int v30 = v29 - 2;
  if (v29 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v31 = v10;
    }
    else {
      uint64_t v31 = 4;
    }
    switch(v31)
    {
      case 1:
        int v32 = *(unsigned __int8 *)__src;
        goto LABEL_44;
      case 2:
        int v32 = *(unsigned __int16 *)__src;
        goto LABEL_44;
      case 3:
        int v32 = *(unsigned __int16 *)__src | (*((unsigned __int8 *)__src + 2) << 16);
        goto LABEL_44;
      case 4:
        int v32 = *(_DWORD *)__src;
LABEL_44:
        if (v10 < 4) {
          unsigned int v29 = (v32 | (v30 << (8 * v10))) + 2;
        }
        else {
          unsigned int v29 = v32 + 2;
        }
        break;
      default:
        break;
    }
  }
  if (v29 != 1) {
    goto LABEL_48;
  }
LABEL_16:
  (*(void (**)(void *, void *, uint64_t))(v6 + 16))(__dst, __src, v5);
  uint64_t v15 = (void *)(((unint64_t)__dst + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)(((unint64_t)__src + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  void *v15 = *v16;
  unint64_t v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  unint64_t v19 = ((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = *(void *)(v20 + 8);
  swift_retain();
  if (v21 < 0xFFFFFFFF)
  {
    long long v24 = *(_OWORD *)v20;
    *(unsigned char *)(v19 + 16) = *(unsigned char *)(v20 + 16);
    *(_OWORD *)unint64_t v19 = v24;
  }
  else
  {
    *(void *)unint64_t v19 = *(void *)v20;
    *(void *)(v19 + 8) = *(void *)(v20 + 8);
    *(unsigned char *)(v19 + 16) = *(unsigned char *)(v20 + 16);
    swift_retain();
    swift_retain();
  }
  unint64_t v25 = ((unint64_t)v15 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = ((unint64_t)v16 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = *(void *)(v26 + 8);
  if (v27 >= 0xFFFFFFFF) {
    LODWORD(v27) = -1;
  }
  if ((int)v27 - 1 < 0)
  {
    swift_weakCopyInit();
    *(void *)(v25 + 8) = *(void *)(v26 + 8);
    *(void *)(v25 + 16) = *(void *)(v26 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v28 = *(_OWORD *)v26;
    *(void *)(v25 + 16) = *(void *)(v26 + 16);
    *(_OWORD *)unint64_t v25 = v28;
  }
  long long v33 = (_OWORD *)((v25 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v34 = (long long *)((v26 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v35 = *v34;
  long long v36 = v34[2];
  v33[1] = v34[1];
  v33[2] = v36;
  _OWORD *v33 = v35;
  unint64_t v37 = ((unint64_t)v33 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = ((unint64_t)v34 + 55) & 0xFFFFFFFFFFFFFFF8;
  long long v39 = *(_OWORD *)v38;
  *(void *)(v37 + 16) = *(void *)(v38 + 16);
  *(_OWORD *)unint64_t v37 = v39;
  *((unsigned char *)__dst + v10) = 1;
  return __dst;
}

uint64_t assignWithCopy for ButtonStyleAdaptorMenuStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  LOBYTE(v5) = *(unsigned char *)(v8 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v8, v5);
  uint64_t v10 = *(void *)v7;
  uint64_t v11 = *(unsigned __int8 *)(v7 + 8);
  *(void *)unint64_t v7 = v9;
  *(unsigned char *)(v7 + 8) = v5;
  outlined consume of Environment<Bool?>.Content(v10, v11);
  return a1;
}

uint64_t *assignWithCopy for BorderlessButtonStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<HoverEffect?>.Content(*a2, v5);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  uint64_t v8 = v2[2];
  LOBYTE(v2) = *((unsigned char *)v2 + 24);
  outlined copy of Environment<Bool>.Content(v8, (char)v2);
  uint64_t v9 = a1[2];
  char v10 = *((unsigned char *)a1 + 24);
  a1[2] = v8;
  *((unsigned char *)a1 + 24) = (_BYTE)v2;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t *assignWithCopy for PlatformItemListButtonStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v5);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  uint64_t v8 = v2[2];
  char v9 = *((unsigned char *)v2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = a1[2];
  char v11 = *((unsigned char *)a1 + 24);
  a1[2] = v8;
  *((unsigned char *)a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  uint64_t v12 = v2[4];
  char v13 = *((unsigned char *)v2 + 40);
  outlined copy of Environment<Bool>.Content(v12, v13);
  uint64_t v14 = a1[4];
  char v15 = *((unsigned char *)a1 + 40);
  a1[4] = v12;
  *((unsigned char *)a1 + 40) = v13;
  outlined consume of Environment<Bool>.Content(v14, v15);
  uint64_t v16 = v2[6];
  LOBYTE(v2) = *((unsigned char *)v2 + 56);
  outlined copy of Environment<Bool>.Content(v16, (char)v2);
  uint64_t v17 = a1[6];
  char v18 = *((unsigned char *)a1 + 56);
  a1[6] = v16;
  *((unsigned char *)a1 + 56) = (_BYTE)v2;
  outlined consume of Environment<Bool>.Content(v17, v18);
  return a1;
}

uint64_t assignWithCopy for NavigationSplitRepresentable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)(a1 + 312);
  unsigned __int8 v5 = (char *)(a2 + 312);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  uint64_t v6 = *(void **)(a2 + 40);
  uint64_t v7 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v6;
  id v8 = v6;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
  char v9 = *(void **)(a2 + 96);
  uint64_t v10 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v9;
  id v11 = v9;

  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 112), (uint64_t *)(a2 + 112));
  uint64_t v12 = *(void **)(a2 + 152);
  char v13 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v12;
  id v14 = v12;

  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(unsigned char *)(a1 + 193) = *(unsigned char *)(a2 + 193);
  *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_retain();
  swift_release();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  *(_WORD *)(a1 + 218) = *(_WORD *)(a2 + 218);
  swift_weakCopyAssign();
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_retain();
  swift_release();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_retain();
  swift_release();
  uint64_t v15 = *(void *)(a2 + 288);
  if (!*(void *)(a1 + 288))
  {
    if (v15)
    {
      *(void *)(a1 + 288) = v15;
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 264, a2 + 264);
      goto LABEL_8;
    }
LABEL_7:
    long long v16 = *(_OWORD *)(a2 + 264);
    long long v17 = *(_OWORD *)(a2 + 280);
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    *(_OWORD *)(a1 + 264) = v16;
    *(_OWORD *)(a1 + 280) = v17;
    goto LABEL_8;
  }
  if (!v15)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 264);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 264), (uint64_t *)(a2 + 264));
LABEL_8:
  uint64_t v18 = *(void *)(a2 + 304);
  char v19 = *v5;
  outlined copy of Environment<Bool>.Content(v18, *v5);
  uint64_t v20 = *(void *)(a1 + 304);
  char v21 = *v4;
  *(void *)(a1 + 304) = v18;
  *uint64_t v4 = v19;
  outlined consume of Environment<Bool>.Content(v20, v21);
  uint64_t v22 = *(void *)(a2 + 320);
  char v23 = v5[16];
  outlined copy of Environment<Bool>.Content(v22, v23);
  uint64_t v24 = *(void *)(a1 + 320);
  char v25 = v4[16];
  *(void *)(a1 + 320) = v22;
  v4[16] = v23;
  outlined consume of Environment<Bool>.Content(v24, v25);
  uint64_t v26 = *(void *)(a2 + 336);
  uint64_t v27 = *(void *)(a2 + 344);
  uint64_t v29 = *(void *)(a2 + 352);
  uint64_t v28 = *(void *)(a2 + 360);
  char v30 = v5[56];
  outlined copy of Environment<NavigationEventHandlers>.Content(v26, v27, v29, v28, v30);
  uint64_t v31 = *(void *)(a1 + 336);
  uint64_t v32 = *(void *)(a1 + 344);
  uint64_t v33 = *(void *)(a1 + 352);
  uint64_t v34 = *(void *)(a1 + 360);
  char v35 = v4[56];
  *(void *)(a1 + 336) = v26;
  *(void *)(a1 + 344) = v27;
  *(void *)(a1 + 352) = v29;
  *(void *)(a1 + 360) = v28;
  v4[56] = v30;
  outlined consume of Environment<NavigationEventHandlers>.Content(v31, v32, v33, v34, v35);
  return a1;
}

ValueMetadata *type metadata accessor for PresentationSourceConfiguration()
{
  return &type metadata for PresentationSourceConfiguration;
}

uint64_t *assignWithCopy for LinearProgressViewStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v5);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  uint64_t v8 = a2[2];
  char v9 = *((unsigned char *)a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = a1[2];
  uint64_t v11 = *((unsigned __int8 *)a1 + 24);
  a1[2] = v8;
  *((unsigned char *)a1 + 24) = v9;
  outlined consume of Environment<Bool?>.Content(v10, v11);
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithCopy for NavigationStackRepresentable(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  uint64_t v4 = *(void **)(a2 + 64);
  unsigned __int8 v5 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v4;
  id v6 = v4;

  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_weakCopyAssign();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  uint64_t v7 = *(void *)(a2 + 144);
  if (!*(void *)(a1 + 144))
  {
    if (v7)
    {
      *(void *)(a1 + 144) = v7;
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
      goto LABEL_8;
    }
LABEL_7:
    long long v8 = *(_OWORD *)(a2 + 120);
    long long v9 = *(_OWORD *)(a2 + 136);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(_OWORD *)(a1 + 120) = v8;
    *(_OWORD *)(a1 + 136) = v9;
    goto LABEL_8;
  }
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 120);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 120), (uint64_t *)(a2 + 120));
LABEL_8:
  uint64_t v10 = *(void *)(a2 + 160);
  char v11 = *(unsigned char *)(a2 + 168);
  outlined copy of Environment<Bool>.Content(v10, v11);
  uint64_t v12 = *(void *)(a1 + 160);
  char v13 = *(unsigned char *)(a1 + 168);
  *(void *)(a1 + 160) = v10;
  *(unsigned char *)(a1 + 168) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  return a1;
}

uint64_t assignWithCopy for CircularUIKitProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  uint64_t v12 = *(void *)(a2 + 32);
  char v13 = *(unsigned char *)(a2 + 40);
  outlined copy of Environment<Bool>.Content(v12, v13);
  uint64_t v14 = *(void *)(a1 + 32);
  char v15 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = v12;
  *(unsigned char *)(a1 + 40) = v13;
  outlined consume of Environment<Bool>.Content(v14, v15);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v16 = *(void *)(a2 + 64);
  char v17 = *(unsigned char *)(a2 + 72);
  outlined copy of Environment<Bool>.Content(v16, v17);
  uint64_t v18 = *(void *)(a1 + 64);
  char v19 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = v16;
  *(unsigned char *)(a1 + 72) = v17;
  outlined consume of Environment<Bool>.Content(v18, v19);
  uint64_t v20 = *(void *)(a2 + 80);
  char v21 = *(unsigned char *)(a2 + 88);
  outlined copy of Environment<Bool>.Content(v20, v21);
  uint64_t v22 = *(void *)(a1 + 80);
  char v23 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 80) = v20;
  *(unsigned char *)(a1 + 88) = v21;
  outlined consume of Environment<Bool>.Content(v22, v23);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v24 = *(void *)(a2 + 112);
  char v25 = *(unsigned char *)(a2 + 120);
  outlined copy of Environment<Bool>.Content(v24, v25);
  uint64_t v26 = *(void *)(a1 + 112);
  char v27 = *(unsigned char *)(a1 + 120);
  *(void *)(a1 + 112) = v24;
  *(unsigned char *)(a1 + 120) = v25;
  outlined consume of Environment<Bool>.Content(v26, v27);
  uint64_t v28 = *(void *)(a2 + 128);
  char v29 = *(unsigned char *)(a2 + 136);
  outlined copy of Environment<Bool>.Content(v28, v29);
  uint64_t v30 = *(void *)(a1 + 128);
  char v31 = *(unsigned char *)(a1 + 136);
  *(void *)(a1 + 128) = v28;
  *(unsigned char *)(a1 + 136) = v29;
  outlined consume of Environment<Bool>.Content(v30, v31);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  return a1;
}

uint64_t assignWithCopy for BaseModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t *assignWithCopy for AutomaticLabeledContentStyle(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v4);
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((unsigned char *)a1 + 8) = v4;
  outlined consume of Environment<Bool?>.Content(v5, v6);
  return a1;
}

uint64_t assignWithCopy for SearchCompletionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(unsigned __int8 *)(a2 + 72);
  if (*(unsigned __int8 *)(a1 + 72) == 255)
  {
    if (v6 == 255)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      long long v10 = *(_OWORD *)(a2 + 16);
      long long v11 = *(_OWORD *)(a2 + 32);
      long long v12 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      *(_OWORD *)(a1 + 32) = v11;
      *(_OWORD *)(a1 + 48) = v12;
      *(_OWORD *)(a1 + 16) = v10;
      if (a1 == a2) {
        goto LABEL_21;
      }
      goto LABEL_12;
    }
    if (v6) {
      goto LABEL_10;
    }
  }
  else
  {
    if (v6 == 255)
    {
      outlined destroy of TextInputSuggestionCompletionKind(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      long long v8 = *(_OWORD *)(a2 + 32);
      long long v7 = *(_OWORD *)(a2 + 48);
      long long v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)(a1 + 16) = v9;
      if (a1 == a2) {
        goto LABEL_21;
      }
      goto LABEL_12;
    }
    if (a1 == a2)
    {
LABEL_11:
      if (a1 == a2) {
        goto LABEL_21;
      }
      goto LABEL_12;
    }
    outlined destroy of TextInputSuggestionCompletionKind(a1);
    if (*(unsigned char *)(a2 + 72))
    {
LABEL_10:
      uint64_t v13 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1, a2);
      uint64_t v14 = *(void *)(a2 + 56);
      *(void *)(a1 + 56) = v14;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 32, a2 + 32);
      *(unsigned char *)(a1 + 72) = 1;
      goto LABEL_11;
    }
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 72) = 0;
  swift_bridgeObjectRetain();
  if (a1 == a2) {
    goto LABEL_21;
  }
LABEL_12:
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v16 = (void *)(a1 + v15);
  char v17 = (void *)(a2 + v15);
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
  outlined destroy of Environment<DismissSearchAccessoryAction>.Content(a1 + v15, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, MEMORY[0x1E4F3F4D8]);
  _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, v18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v20 = v19;
    uint64_t v21 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v17, 1, v19))
    {
      _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, MEMORY[0x1E4FBB718]);
      memcpy(v16, v17, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      *uint64_t v16 = *v17;
      uint64_t v46 = v21;
      v16[1] = v17[1];
      uint64_t v23 = *(int *)(v20 + 32);
      uint64_t v24 = (char *)v16 + v23;
      char v25 = (char *)v17 + v23;
      *uint64_t v24 = *((unsigned char *)v17 + v23);
      v24[1] = *((unsigned char *)v17 + v23 + 1);
      void v24[2] = *((unsigned char *)v17 + v23 + 2);
      v24[3] = *((unsigned char *)v17 + v23 + 3);
      LODWORD(v23) = *(_DWORD *)((char *)v17 + v23 + 4);
      v24[8] = v25[8];
      *((_DWORD *)v24 + 1) = v23;
      uint64_t v26 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v27 = v26[9];
      long long v44 = &v25[v27];
      long long v45 = &v24[v27];
      uint64_t v28 = type metadata accessor for AttributedString();
      long long v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16);
      swift_retain();
      swift_retain();
      v43(v45, v44, v28);
      v24[v26[10]] = v25[v26[10]];
      uint64_t v29 = v26[11];
      uint64_t v30 = &v24[v29];
      char v31 = &v25[v29];
      char v32 = v31[4];
      *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
      v30[4] = v32;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v16, 0, 1, v20);
    }
  }
  else
  {
    *uint64_t v16 = *v17;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
LABEL_21:
  uint64_t v33 = *(int *)(a3 + 24);
  uint64_t v34 = a1 + v33;
  uint64_t v35 = a2 + v33;
  uint64_t v36 = *(void *)v35;
  uint64_t v37 = *(void *)(v35 + 8);
  char v38 = *(unsigned char *)(v35 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v35, v37, v38);
  uint64_t v39 = *(void *)v34;
  uint64_t v40 = *(void *)(v34 + 8);
  char v41 = *(unsigned char *)(v34 + 16);
  *(void *)uint64_t v34 = v36;
  *(void *)(v34 + 8) = v37;
  *(unsigned char *)(v34 + 16) = v38;
  _s7SwiftUI11EnvironmentV7ContentOyAA19TriggerSubmitActionVSg_GWOeTm_0(v39, v40, v41, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  return a1;
}

uint64_t assignWithCopy for InsetListLabelStyle.StyleView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  return a1;
}

uint64_t assignWithCopy for ToolbarButtonStyle(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    outlined destroy of Environment<ToolbarItemPlacement.Role>.Content(a1);
    if (*((unsigned char *)a2 + 41))
    {
      if (*((unsigned char *)a2 + 40) == 1)
      {
        uint64_t v4 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v4;
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
        *(unsigned char *)(a1 + 40) = 1;
      }
      else
      {
        long long v5 = *a2;
        long long v6 = a2[1];
        *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
        *(_OWORD *)a1 = v5;
        *(_OWORD *)(a1 + 16) = v6;
      }
      *(unsigned char *)(a1 + 41) = 1;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 41) = 0;
      swift_retain();
    }
  }
  uint64_t v7 = *((void *)a2 + 6);
  char v8 = *((unsigned char *)a2 + 56);
  outlined copy of Environment<Bool>.Content(v7, v8);
  uint64_t v9 = *(void *)(a1 + 48);
  char v10 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  uint64_t v11 = *((void *)a2 + 8);
  char v12 = *((unsigned char *)a2 + 72);
  outlined copy of Environment<Bool>.Content(v11, v12);
  uint64_t v13 = *(void *)(a1 + 64);
  char v14 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = v11;
  *(unsigned char *)(a1 + 72) = v12;
  outlined consume of Environment<Bool>.Content(v13, v14);
  return a1;
}

uint64_t outlined destroy of Environment<ToolbarItemPlacement.Role>.Content(uint64_t a1)
{
  type metadata accessor for Environment<ToolbarItemPlacement.Role>.Content(0, &lazy cache variable for type metadata for Environment<ToolbarItemPlacement.Role>.Content, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4F3F4D8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of Environment<DismissSearchAccessoryAction>.Content(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t assignWithCopy for ListRepresentable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>);
    _s7SwiftUI8StaticIfVyAA28StyleContextAcceptsPredicateVyAA07ToolbareF0VGAA0I21ButtonContentModifierVAA05EmptyL0VGACyxq_q0_GAA04ViewL0A2aOR_AaOR0_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (void (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, a2);
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI8StaticIfVyAA28StyleContextAcceptsPredicateVyAA07ToolbareF0VGAA0I21ButtonContentModifierVAA05EmptyL0VGACyxq_q0_GAA04ViewL0A2aOR_AaOR0_rlWlTm_0(unint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI8StaticIfVyAA28StyleContextAcceptsPredicateVyAA07ToolbareF0VGAA0I21ButtonContentModifierVAA05EmptyL0VGMaTm_0(255, a2);
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA5ColorVSgGACyxGAA04ViewF0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat?>, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E4FBC958]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat?>, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E4FBC958]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for Environment<ToolbarItemPlacement.Role>.Content(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Int?>(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA5ColorVSgGACyxGAA04ViewF0AAWlTm_0(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>(255, a2, a3, a4, MEMORY[0x1E4F411E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA5ColorVSgGACyxGAA04ViewF0AAWlTm_1(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_1(255, a2, a3, a4, MEMORY[0x1E4F411E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA5ColorVSgGACyxGAA04ViewF0AAWlTm_2(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat?>(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
    lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomHoverEffectModifier<HoverEffect> and conformance CustomHoverEffectModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomHoverEffectModifier<HoverEffect> and conformance CustomHoverEffectModifier<A>;
  if (!lazy protocol witness table cache variable for type CustomHoverEffectModifier<HoverEffect> and conformance CustomHoverEffectModifier<A>)
  {
    type metadata accessor for ToggleStyleModifier<ButtonToggleStyle>(255, &lazy cache variable for type metadata for CustomHoverEffectModifier<HoverEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type HoverEffect and conformance HoverEffect, (uint64_t)&type metadata for HoverEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CustomHoverEffectModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomHoverEffectModifier<HoverEffect> and conformance CustomHoverEffectModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for ToggleStyleModifier<ButtonToggleStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

void type metadata accessor for ToggleStyleModifier<ButtonToggleStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI19ToggleStyleModifierVyAA06ButtoncD0VGMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for ToggleStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for ToggleStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ToolbarToggleStyle and conformance ToolbarToggleStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarToggleStyle and conformance ToolbarToggleStyle;
  if (!lazy protocol witness table cache variable for type ToolbarToggleStyle and conformance ToolbarToggleStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarToggleStyle and conformance ToolbarToggleStyle);
  }
  return result;
}

uint64_t ToolbarButtonStyle.ResolvedBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v38 = a1;
  uint64_t v3 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v3 - 8);
  type metadata accessor for Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>();
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (_WORD *)((char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>();
  uint64_t v11 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>();
  uint64_t v37 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_11(v2, (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PrimitiveButtonStyleConfiguration);
  unint64_t v17 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v18 = swift_allocObject();
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWObTm_1((uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, type metadata accessor for PrimitiveButtonStyleConfiguration);
  *uint64_t v9 = 256;
  uint64_t v19 = (void *)((char *)v9 + *(int *)(v7 + 44));
  *uint64_t v19 = partial apply for implicit closure #2 in implicit closure #1 in PlatformItemListButtonStyle.makeBody(configuration:);
  v19[1] = v18;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = (uint64_t)v9 + *(int *)(v7 + 48);
  uint64_t v21 = static VerticalAlignment.center.getter();
  static AnyTransition.opacity.getter();
  static AnyTransition.identity.getter();
  uint64_t v22 = static AnyTransition.asymmetric(insertion:removal:)();
  swift_release();
  swift_release();
  specialized View.toolbarButtonLabel(ignoreEdge:)(0, v21, 0, 1, v22, v20);
  swift_release();
  uint64_t v23 = type metadata accessor for ToolbarButtonStyle.ResolvedBody();
  uint64_t v24 = v2 + *(int *)(v23 + 24);
  uint64_t v25 = *(void *)v24;
  LOBYTE(v19) = *(unsigned char *)(v24 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v24, (char)v19);
  int v26 = specialized Environment.wrappedValue.getter(v25, (char)v19);
  uint64_t result = outlined consume of Environment<Bool>.Content(v25, (char)v19);
  if ((v26 & 0xFF00) == 0x200)
  {
    __break(1u);
  }
  else
  {
    _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_11((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>);
    uint64_t v28 = &v13[*(int *)(v11 + 36)];
    *uint64_t v28 = v26;
    v28[1] = BYTE1(v26) & 1;
    _OWORD v28[2] = BYTE2(v26) & 1;
    _OWORD v28[3] = 0;
    *((void *)v28 + 1) = 8;
    outlined destroy of ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>);
    if (*(unsigned char *)(v2 + *(int *)(v23 + 20)) == 1)
    {
      uint64_t v30 = v37;
      uint64_t v29 = v38;
      if (one-time initialization token for lift != -1) {
        swift_once();
      }
      char v31 = &static HoverEffect.lift;
    }
    else
    {
      uint64_t v30 = v37;
      uint64_t v29 = v38;
      if (one-time initialization token for automatic != -1) {
        swift_once();
      }
      char v31 = &static HoverEffect.automatic;
    }
    uint64_t v32 = *v31;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v34 = swift_getKeyPath();
    _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_11((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>);
    uint64_t v35 = &v16[*(int *)(v30 + 36)];
    *(void *)uint64_t v35 = v32;
    v35[8] = 1;
    *((void *)v35 + 2) = KeyPath;
    v35[24] = 0;
    *((void *)v35 + 4) = v34;
    *((_WORD *)v35 + 20) = 0;
    *((void *)v35 + 6) = 0;
    v35[56] = 1;
    *((void *)v35 + 8) = 0;
    *((_WORD *)v35 + 36) = 513;
    *((void *)v35 + 10) = 0;
    swift_retain();
    outlined destroy of ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>);
    return _s7SwiftUI33PrimitiveButtonStyleConfigurationVWObTm_1((uint64_t)v16, v29, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>)
  {
    type metadata accessor for Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>();
    _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA08BordereddE0VGMaTm_0(255, &lazy cache variable for type metadata for _ContentShapeKindModifier<ToolbarButtonHoverShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape, (uint64_t)&type metadata for ToolbarButtonHoverShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeKindModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>);
    }
  }
}

void type metadata accessor for Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>()
{
  if (!lazy cache variable for type metadata for Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>)
  {
    type metadata accessor for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
    lazy protocol witness table accessor for type ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for Button();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>)
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>();
    _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA08BordereddE0VGMaTm_0(255, &lazy cache variable for type metadata for CustomHoverEffectModifier<HoverEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type HoverEffect and conformance HoverEffect, (uint64_t)&type metadata for HoverEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CustomHoverEffectModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>);
    }
  }
}

uint64_t specialized View.toolbarButtonLabel(ignoreEdge:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v12[0] = a1;
  uint64_t KeyPath = swift_getKeyPath();
  char v14 = 0;
  uint64_t v15 = swift_getKeyPath();
  char v16 = 0;
  uint64_t v17 = swift_getKeyPath();
  char v18 = 0;
  uint64_t v19 = swift_getKeyPath();
  char v20 = 0;
  outlined init with copy of ToolbarButtonLabelModifier((uint64_t)v12, (uint64_t)v21);
  outlined destroy of ToolbarButtonLabelModifier((uint64_t)v12);
  outlined init with copy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>((uint64_t)v21, a6 + 32);
  *(void *)a6 = a2;
  *(void *)(a6 + 8) = a3;
  *(unsigned char *)(a6 + 16) = a4 & 1;
  *(void *)(a6 + 24) = a5;
  swift_retain();
  return outlined destroy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>((uint64_t)v21);
}

uint64_t outlined init with copy of ToolbarButtonLabelModifier(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for ToolbarButtonLabelModifier(uint64_t a1, char *a2)
{
  char v5 = *a2;
  uint64_t v4 = a2 + 8;
  *(unsigned char *)a1 = v5;
  uint64_t v6 = (_OWORD *)(a1 + 8);
  if (a2[49])
  {
    if (a2[48] == 1)
    {
      long long v7 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 32) = v7;
      (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v6, v4);
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      long long v8 = v4[1];
      *uint64_t v6 = *v4;
      v6[1] = v8;
      *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v4 + 25);
    }
    *(unsigned char *)(a1 + 49) = 1;
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)v4;
    *(unsigned char *)(a1 + 49) = 0;
    swift_retain();
  }
  uint64_t v9 = *((void *)a2 + 7);
  char v10 = a2[64];
  outlined copy of Environment<Bool>.Content(v9, v10);
  *(void *)(a1 + 56) = v9;
  *(unsigned char *)(a1 + 64) = v10;
  uint64_t v11 = *((void *)a2 + 9);
  char v12 = a2[80];
  outlined copy of Environment<Bool>.Content(v11, v12);
  *(void *)(a1 + 72) = v11;
  *(unsigned char *)(a1 + 80) = v12;
  uint64_t v13 = *((void *)a2 + 11);
  char v14 = a2[96];
  outlined copy of Environment<Bool>.Content(v13, v14);
  *(void *)(a1 + 88) = v13;
  *(unsigned char *)(a1 + 96) = v14;
  return a1;
}

uint64_t outlined destroy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>(uint64_t a1)
{
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>(0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>(0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    _s7SwiftUI28StyleContextAcceptsPredicateVyAA07ToolbarcD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>, MEMORY[0x1E4F40520], MEMORY[0x1E4F410E8]);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    unint64_t v3 = type metadata accessor for StaticIf();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t outlined destroy of ToolbarButtonLabelModifier(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ToolbarButtonLabelModifier(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  if (*(unsigned char *)(a1 + 49))
  {
    if (*(unsigned char *)(a1 + 48) == 1) {
      __swift_destroy_boxed_opaque_existential_1(v2);
    }
  }
  else
  {
    swift_release();
  }
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
  uint64_t v3 = *(void *)(a1 + 88);
  char v4 = *(unsigned char *)(a1 + 96);

  return outlined consume of Environment<Bool>.Content(v3, v4);
}

uint64_t closure #2 in ToolbarButtonStyle.iosBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v5 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1F4188790](v5 - 8);
  long long v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ToolbarButtonStyle.ResolvedBody();
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for ToolbarButtonStyle.ResolvedBody;
  type metadata accessor for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ToolbarButtonStyle.ResolvedBody, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>);
  uint64_t v13 = v12 - 8;
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v32 - v14;
  type metadata accessor for ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>();
  uint64_t v17 = v16 - 8;
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_11(a1, (uint64_t)v7, type metadata accessor for PrimitiveButtonStyleConfiguration);
  uint64_t v20 = *(void *)(a2 + 64);
  LOBYTE(a2) = *(unsigned char *)(a2 + 72);
  outlined copy of Environment<Bool>.Content(v20, a2);
  char v21 = specialized Environment.wrappedValue.getter(v20, a2);
  outlined consume of Environment<Bool>.Content(v20, a2);
  uint64_t KeyPath = swift_getKeyPath();
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWObTm_1((uint64_t)v7, (uint64_t)v11, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v11[*(int *)(v9 + 28)] = v21 & 1;
  uint64_t v23 = &v11[*(int *)(v9 + 32)];
  *(void *)uint64_t v23 = KeyPath;
  long long v23[8] = 0;
  uint64_t v24 = swift_getKeyPath();
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_11((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ToolbarButtonStyle.ResolvedBody);
  uint64_t v25 = &v15[*(int *)(v13 + 44)];
  *uint64_t v25 = 0;
  *((void *)v25 + 1) = v24;
  v25[16] = 0;
  outlined destroy of ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ToolbarButtonStyle.ResolvedBody);
  int v26 = (void (*)(uint64_t))v32;
  outlined init with copy of ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>((uint64_t)v15, (uint64_t)v19, &lazy cache variable for type metadata for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, (void (*)(uint64_t))v32, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>);
  *(void *)&v19[*(int *)(v17 + 44)] = 1;
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>>((uint64_t)v15, &lazy cache variable for type metadata for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, v26, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>);
  uint64_t v27 = swift_getKeyPath();
  uint64_t v28 = v33;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_11((uint64_t)v19, v33, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>();
  uint64_t v30 = v28 + *(int *)(v29 + 36);
  *(void *)uint64_t v30 = v27;
  *(void *)(v30 + 8) = 0x402E000000000000;
  *(unsigned char *)(v30 + 16) = 0;
  return outlined destroy of ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>);
}

uint64_t outlined destroy of ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for ToolbarButtonStyle.ResolvedBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));

LABEL_6:
    swift_release();
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24), *(_WORD *)(v4 + 32), *(unsigned char *)(v4 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v4 + 40), *(void *)(v4 + 48), *(void *)(v4 + 56), *(void *)(v4 + 64), *(_WORD *)(v4 + 72), *(unsigned char *)(v4 + 74));
  uint64_t v6 = v4 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
LABEL_8:
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  uint64_t v9 = *(void *)v8;
  char v10 = *(unsigned char *)(v8 + 8);

  return outlined consume of Environment<Bool>.Content(v9, v10);
}

uint64_t type metadata accessor for ToolbarButtonStyle.ResolvedBody()
{
  uint64_t result = type metadata singleton initialization cache for ToolbarButtonStyle.ResolvedBody;
  if (!type metadata singleton initialization cache for ToolbarButtonStyle.ResolvedBody) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ToolbarButtonStyle.ResolvedBody, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>);
    }
  }
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4)
{
  type metadata accessor for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t), unint64_t *a5)
{
  type metadata accessor for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

void type metadata accessor for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4)
{
  if (!*a2)
  {
    a3(255);
    _s7SwiftUI8StaticIfVyAA28StyleContextAcceptsPredicateVyAA07ToolbareF0VGAA0I21ButtonContentModifierVAA05EmptyL0VGMaTm_0(255, a4);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    _s7SwiftUI7BindingVySbGMaTm_5(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>, MEMORY[0x1E4F40520], MEMORY[0x1E4F410E8]);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    unint64_t v3 = type metadata accessor for StaticIf();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void _s7SwiftUI8StaticIfVyAA28StyleContextAcceptsPredicateVyAA07ToolbareF0VGAA0I21ButtonContentModifierVAA05EmptyL0VGMaTm_0(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    type metadata accessor for Environment<ToolbarItemPlacement.Role>.Content(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>, MEMORY[0x1E4F40520], MEMORY[0x1E4F410E8]);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    unint64_t v3 = type metadata accessor for StaticIf();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void type metadata accessor for Environment<ToolbarItemPlacement.Role>.Content(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>;
  if (!lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<TextAlignment>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>, MEMORY[0x1E4F40520], MEMORY[0x1E4F410E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>(uint64_t a1)
{
}

void type metadata accessor for HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>()
{
  if (!lazy cache variable for type metadata for HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>)
  {
    type metadata accessor for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>();
    lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_7(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>, MEMORY[0x1E4F40358], MEMORY[0x1E4F40350], MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>();
    _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA08BordereddE0VGMaTm_0(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>();
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>> and conformance Button<A>, (void (*)(uint64_t))type metadata accessor for Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)> and conformance TupleView<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>();
    lazy protocol witness table accessor for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>, MEMORY[0x1E4F40358], MEMORY[0x1E4F40350], MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<PlaybackButtonTapAreaKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ToolbarButtonStyle.ResolvedBody, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type ToolbarButtonStyle.ResolvedBody and conformance ToolbarButtonStyle.ResolvedBody, (void (*)(uint64_t))type metadata accessor for ToolbarButtonStyle.ResolvedBody);
    _s7SwiftUI8StaticIfVyAA28StyleContextAcceptsPredicateVyAA07ToolbareF0VGAA0I21ButtonContentModifierVAA05EmptyL0VGACyxq_q0_GAA04ViewL0A2aOR_AaOR0_rlWlTm_0(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonContentModifier, (void (*)(void))lazy protocol witness table accessor for type ToolbarButtonContentModifier and conformance ToolbarButtonContentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>)
  {
    _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA08BordereddE0VGMaTm_0(255, &lazy cache variable for type metadata for _ViewModifier_Content<ToolbarButtonContentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonContentModifier and conformance ToolbarButtonContentModifier, (uint64_t)&type metadata for ToolbarButtonContentModifier, MEMORY[0x1E4F408E0]);
    type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>, &lazy cache variable for type metadata for ToolbarButtonHoverShape?, (uint64_t)&type metadata for ToolbarButtonHoverShape);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TextAlignment>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformFallbackToggleStyle and conformance PlatformFallbackToggleStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformFallbackToggleStyle and conformance PlatformFallbackToggleStyle;
  if (!lazy protocol witness table cache variable for type PlatformFallbackToggleStyle and conformance PlatformFallbackToggleStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformFallbackToggleStyle and conformance PlatformFallbackToggleStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityToggleStyle and conformance AccessibilityToggleStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityToggleStyle and conformance AccessibilityToggleStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleStyle and conformance AccessibilityToggleStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleStyle and conformance AccessibilityToggleStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultListToggleStyle and conformance DefaultListToggleStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultListToggleStyle and conformance DefaultListToggleStyle;
  if (!lazy protocol witness table cache variable for type DefaultListToggleStyle and conformance DefaultListToggleStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultListToggleStyle and conformance DefaultListToggleStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle;
  if (!lazy protocol witness table cache variable for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwitchToggleStyle and conformance SwitchToggleStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type SwitchToggleStyle and conformance SwitchToggleStyle;
  if (!lazy protocol witness table cache variable for type SwitchToggleStyle and conformance SwitchToggleStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwitchToggleStyle and conformance SwitchToggleStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonToggleStyle and conformance ButtonToggleStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonToggleStyle and conformance ButtonToggleStyle;
  if (!lazy protocol witness table cache variable for type ButtonToggleStyle and conformance ButtonToggleStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonToggleStyle and conformance ButtonToggleStyle);
  }
  return result;
}

uint64_t assignWithCopy for ToolbarItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40) + 7;
  unint64_t v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (v8 != v9)
  {
    outlined destroy of ToolbarItemPlacement.Role(v8);
    if (*(unsigned char *)(v9 + 40) == 1)
    {
      uint64_t v10 = *(void *)(v9 + 24);
      *(void *)(v8 + 24) = v10;
      *(void *)(v8 + 32) = *(void *)(v9 + 32);
      (**(void (***)(unint64_t, unint64_t))(v10 - 8))(v8, v9);
      *(unsigned char *)(v8 + 40) = 1;
    }
    else
    {
      long long v11 = *(_OWORD *)v9;
      long long v12 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)(v8 + 25) = *(_OWORD *)(v9 + 25);
      *(_OWORD *)unint64_t v8 = v11;
      *(_OWORD *)(v8 + 16) = v12;
    }
  }
  uint64_t v13 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v14 = v13 + 24;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (v8 + v15 + 41) & ~v15;
  uint64_t v17 = (v9 + v15 + 41) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v16, v17);
  uint64_t v18 = *(void *)(v14 + 40);
  uint64_t v19 = (unsigned char *)(v16 + v18);
  uint64_t v20 = (unsigned char *)(v17 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  _OWORD v19[2] = v20[2];
  return a1;
}

uint64_t NavigationStackReader.ExtractedRoot.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  v28[0] = a2;
  v28[4] = a5;
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[1] = v10;
  uint64_t v40 = v10;
  uint64_t v41 = v11;
  _OWORD v28[2] = v12;
  uint64_t v42 = v12;
  uint64_t v43 = v13;
  uint64_t v14 = type metadata accessor for NavigationStackReader.ExtractedRoot();
  type metadata accessor for ReadDestinationsModifier();
  uint64_t v15 = type metadata accessor for ModifiedContent();
  type metadata accessor for _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationDestinationKey>, (uint64_t)&type metadata for NavigationDestinationKey, (uint64_t)&protocol witness table for NavigationDestinationKey, MEMORY[0x1E4F41108]);
  _OWORD v28[3] = v15;
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v28 - v18;
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, Value, a3);
  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, MEMORY[0x1E4FBB718]);
  uint64_t result = AGGraphGetValue();
  uint64_t v22 = *(unsigned __int8 *)(result + 8);
  if (v22 == 6)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = *(void *)(result + 16);
    uint64_t v24 = *(void *)result;
    uint64_t v40 = 0;
    uint64_t v41 = v24;
    uint64_t v42 = v22;
    uint64_t v43 = v23;
    uint64_t v44 = 0;
    char v45 = 1;
    View.readNavigationDestinations<A>(position:isActive:reader:)((uint64_t)&v40, 1, v14, a3, v14, a4);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
    NavigationStackReader.ExtractedRoot.authority.getter((uint64_t)v36);
    if (v37 == 2)
    {
      outlined destroy of NavigationAuthority??((uint64_t)v36);
      long long v38 = xmmword_18834BB90;
      uint64_t v39 = 0;
    }
    else
    {
      outlined init with copy of NavigationAuthority?((uint64_t)v36, (uint64_t)v30);
      if (v31 == 1)
      {
        long long v38 = xmmword_18834BB90;
        uint64_t v39 = 0;
      }
      else
      {
        outlined init with take of NavigationAuthority((uint64_t)v30, (uint64_t)v29);
        outlined init with copy of NavigationAuthority((uint64_t)v29, (uint64_t)&v38);
        outlined destroy of NavigationAuthority((uint64_t)v29);
      }
      outlined destroy of NavigationAuthority?((uint64_t)v36);
    }
    uint64_t v34 = a4;
    uint64_t v35 = &protocol witness table for ReadDestinationsModifier<A>;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v26 = lazy protocol witness table accessor for type _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey> and conformance _PreferenceTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationDestinationKey>, (uint64_t)&type metadata for NavigationDestinationKey, (uint64_t)&protocol witness table for NavigationDestinationKey);
    uint64_t v32 = WitnessTable;
    uint64_t v33 = v26;
    uint64_t v27 = swift_getWitnessTable();
    View.processNavigationDestinations<A>(authority:processor:)((uint64_t)&v38, v14, v16, v14, v27);
    outlined destroy of NavigationAuthority?((uint64_t)&v38);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }
  return result;
}

uint64_t View.readNavigationDestinations<A>(position:isActive:reader:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t DestinationsModifier = type metadata accessor for ReadDestinationsModifier();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v16 - v13;
  outlined init with take of NavigationStackViewPosition?(a1, (uint64_t)&v17, &lazy cache variable for type metadata for NavigationStackViewPosition?, (uint64_t)&type metadata for NavigationStackViewPosition);
  char v18 = a2;
  MEMORY[0x18C113660](&v17, a4, DestinationsModifier, a6);
  *(unsigned char *)(swift_allocObject() + 16) = a2;
  v16[0] = a6;
  v16[1] = &protocol witness table for ReadDestinationsModifier<A>;
  swift_getWitnessTable();
  View.transformPreference<A>(_:_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

double NavigationStackReader.ExtractedRoot.authority.getter@<D0>(uint64_t a1@<X8>)
{
  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of NavigationAuthority?(WeakValue, a1);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a1 = xmmword_18834C6B0;
    *(void *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>, _SafeAreaRegionsIgnoringLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>, _SafeAreaRegionsIgnoringLayout>)
  {
    type metadata accessor for StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>, _SafeAreaRegionsIgnoringLayout>);
    }
  }
}

void *specialized closure #4 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  AGGraphClearUpdate();
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  uint64_t v21 = *((void *)&static RepresentableContextValues.current + 1);
  uint64_t v22 = static RepresentableContextValues.current;
  uint64_t v19 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v20 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v9;
  *(void *)&xmmword_1EB2E8DA0 = v10;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v11;
  char v13 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v12;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  outlined copy of RepresentableContextValues?(v22, v21, v20, v19, v13);
  outlined consume of RepresentableContextValues?(v22, v21, v20, v19, v13);
  uint64_t v14 = specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(a2, a1, a3, a4, a5, a6, a7, a8);
  long long v15 = static RepresentableContextValues.current;
  long long v16 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v22;
  *((void *)&static RepresentableContextValues.current + 1) = v21;
  *(void *)&xmmword_1EB2E8DA0 = v20;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v19;
  char v17 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v13;
  outlined consume of RepresentableContextValues?(v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  AGGraphSetUpdate();
  return v14;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  void *v14;
  long long v15;
  long long v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  AGGraphClearUpdate();
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  uint64_t v21 = *((void *)&static RepresentableContextValues.current + 1);
  uint64_t v22 = static RepresentableContextValues.current;
  uint64_t v19 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v20 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v9;
  *(void *)&xmmword_1EB2E8DA0 = v10;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v11;
  char v13 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v12;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  outlined copy of RepresentableContextValues?(v22, v21, v20, v19, v13);
  outlined consume of RepresentableContextValues?(v22, v21, v20, v19, v13);
  uint64_t v14 = specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(a2, a1, a3, a4, a5, a6, a7, a8);
  long long v15 = static RepresentableContextValues.current;
  long long v16 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v22;
  *((void *)&static RepresentableContextValues.current + 1) = v21;
  *(void *)&xmmword_1EB2E8DA0 = v20;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v19;
  char v17 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v13;
  outlined consume of RepresentableContextValues?(v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  AGGraphSetUpdate();
  return v14;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  long long v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  Class v22;
  id v23;
  void *v24;
  long long v25;
  long long v26;
  char v27;
  unsigned int v29;
  uint64_t v34;
  uint64_t v35;
  char v37;

  AGGraphClearUpdate();
  uint64_t v10 = *(void *)(a1 + 8);
  char v12 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v13 = *(unsigned char *)(a1 + 32);
  uint64_t v14 = static RepresentableContextValues.current;
  uint64_t v34 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v35 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v10;
  *(void *)&xmmword_1EB2E8DA0 = v12;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v11;
  uint64_t v37 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v13;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v11, v13);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v11, v13);
  outlined copy of RepresentableContextValues?(v14, *((uint64_t *)&v14 + 1), v35, v34, v37);
  outlined consume of RepresentableContextValues?(v14, *((uint64_t *)&v14 + 1), v35, v34, v37);
  long long v15 = *(void *)(a2 + 64);
  long long v16 = *(unsigned __int8 *)(a2 + 72);
  uint64_t v29 = *(unsigned __int8 *)(a2 + 72);
  char v17 = *(void **)(a1 + 40);
  char v18 = objc_allocWithZone(MEMORY[0x1E4FB1C38]);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<HoverEffect?>.Content(v15, v16);
  uint64_t v19 = v17;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v11, v13);
  uint64_t v20 = objc_msgSend(v18, sel_init);
  objc_msgSend(v20, sel_addTarget_action_forControlEvents_, v19, sel_valueChanged_, 4096);
  objc_msgSend(v20, sel_addTarget_action_forControlEvents_, v19, sel_editingEnded_, 448);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v12, v11, v13);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  outlined consume of Environment<AnyShapeStyle?>.Content(v15, v29);
  uint64_t v21 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<SystemSlider>>();
  uint64_t v23 = objc_allocWithZone(v22);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v24 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v20, a3, a4, a5, 0, a7, v21);
  swift_release();
  uint64_t v25 = static RepresentableContextValues.current;
  uint64_t v26 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v14;
  *(void *)&xmmword_1EB2E8DA0 = v35;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v34;
  uint64_t v27 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v37;
  outlined consume of RepresentableContextValues?(v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v12, v11, v13);
  AGGraphSetUpdate();
  return v24;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  void *v14;
  long long v15;
  long long v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  AGGraphClearUpdate();
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  uint64_t v21 = *((void *)&static RepresentableContextValues.current + 1);
  uint64_t v22 = static RepresentableContextValues.current;
  uint64_t v19 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v20 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v9;
  *(void *)&xmmword_1EB2E8DA0 = v10;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v11;
  char v13 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v12;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  outlined copy of RepresentableContextValues?(v22, v21, v20, v19, v13);
  outlined consume of RepresentableContextValues?(v22, v21, v20, v19, v13);
  uint64_t v14 = specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(a2, a1, a3, a4, a5, a6, a7, a8);
  long long v15 = static RepresentableContextValues.current;
  long long v16 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = v22;
  *((void *)&static RepresentableContextValues.current + 1) = v21;
  *(void *)&xmmword_1EB2E8DA0 = v20;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v19;
  char v17 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v13;
  outlined consume of RepresentableContextValues?(v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  AGGraphSetUpdate();
  return v14;
}

{
  char v11;
  long long v12;
  long long v13;
  long long v14;
  char v15;
  void *v16;
  long long v17;
  long long v18;
  char v19;

  AGGraphClearUpdate();
  uint64_t v11 = *(unsigned char *)(a1 + 32);
  char v12 = static RepresentableContextValues.current;
  char v13 = xmmword_1EB2E8DA0;
  uint64_t v14 = *(_OWORD *)(a1 + 16);
  static RepresentableContextValues.current = *(_OWORD *)a1;
  xmmword_1EB2E8DA0 = v14;
  long long v15 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v11;
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined copy of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v15);
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v15);
  long long v16 = specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(a2, a1, a3, a4, a5, a6, a7, a8);
  char v17 = static RepresentableContextValues.current;
  char v18 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v12;
  xmmword_1EB2E8DA0 = v13;
  uint64_t v19 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v15;
  outlined consume of RepresentableContextValues?(v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19);
  outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  AGGraphSetUpdate();
  return v16;
}

{
  uint64_t v10;
  long long v11;
  long long v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void *result;
  uint64_t v18;
  uint64_t v19;
  Class v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  long long v25;
  char v26;
  char v30;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;

  AGGraphClearUpdate();
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v34 = *(void *)(a1 + 16);
  uint64_t v33 = *(void *)(a1 + 24);
  uint64_t v35 = *(unsigned char *)(a1 + 32);
  uint64_t v11 = static RepresentableContextValues.current;
  char v12 = xmmword_1EB2E8DA0;
  char v13 = byte_1EB2E8DB0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v10;
  *(void *)&xmmword_1EB2E8DA0 = v34;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v33;
  byte_1EB2E8DB0 = v35;
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined copy of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13);
  uint64_t v30 = v13;
  outlined consume of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13);
  uint64_t v14 = *(void *)a2;
  long long v15 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(v14, v15);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v34, v33, v35);
  specialized Environment.wrappedValue.getter(v14, v15, &v36);
  if (v36) {
    long long v16 = 2030;
  }
  else {
    long long v16 = 3901;
  }
  unint64_t result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB18C8]), sel_initWithFrame_style_, v16, 0.0, 0.0, 0.0, 0.0);
  if (result)
  {
    char v18 = (uint64_t)result;
    outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
    outlined consume of Environment<Bool>.Content(v14, v15);
    uint64_t v19 = *(void *)(a8 + 48);
    type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>();
    uint64_t v21 = objc_allocWithZone(v20);
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    uint64_t v22 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)(v18, a3, a4, a5, 0, a7, v19);
    swift_release();
    uint64_t v24 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v23 = static RepresentableContextValues.current;
    uint64_t v25 = xmmword_1EB2E8DA0;
    static RepresentableContextValues.current = v11;
    xmmword_1EB2E8DA0 = v12;
    uint64_t v26 = byte_1EB2E8DB0;
    byte_1EB2E8DB0 = v30;
    outlined consume of RepresentableContextValues?(v23, v24, v25, *((uint64_t *)&v25 + 1), v26);
    outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
    AGGraphSetUpdate();
    return v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  long long v13;
  long long v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  Class v20;
  id v21;
  void *v22;
  long long v23;
  long long v24;
  char v25;
  char v32;

  AGGraphClearUpdate();
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  char v13 = static RepresentableContextValues.current;
  uint64_t v14 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v9;
  *(void *)&xmmword_1EB2E8DA0 = v11;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v10;
  uint64_t v32 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v12;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v10, v12);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v10, v12);
  outlined copy of RepresentableContextValues?(v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v32);
  outlined consume of RepresentableContextValues?(v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v32);
  long long v15 = *(void **)(a1 + 40);
  long long v16 = objc_allocWithZone(MEMORY[0x1E4FB1C10]);
  swift_bridgeObjectRetain();
  char v17 = v15;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v10, v12);
  char v18 = objc_msgSend(v16, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v18, sel_setAutoresizingMask_, 2);
  objc_msgSend(v18, sel_setMomentary_, 1);
  objc_msgSend(v18, sel_addTarget_action_forControlEvents_, v17, sel_primaryActionTriggered_, 4096);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v11, v10, v12);
  swift_bridgeObjectRelease();

  uint64_t v19 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>();
  uint64_t v21 = objc_allocWithZone(v20);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v22 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v18, a3, a4, a5, 0, a7, v19);
  swift_release();
  uint64_t v23 = static RepresentableContextValues.current;
  uint64_t v24 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v13;
  xmmword_1EB2E8DA0 = v14;
  uint64_t v25 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v32;
  outlined consume of RepresentableContextValues?(v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v11, v10, v12);
  AGGraphSetUpdate();
  return v22;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  long long v13;
  char v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  Class v20;
  id v21;
  void *v22;
  long long v23;
  long long v24;
  char v25;
  uint64_t v27;
  uint64_t v33;
  uint64_t v34;

  AGGraphClearUpdate();
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  char v13 = static RepresentableContextValues.current;
  uint64_t v33 = *((void *)&xmmword_1EB2E8DA0 + 1);
  uint64_t v34 = xmmword_1EB2E8DA0;
  *(void *)&static RepresentableContextValues.current = *(void *)a1;
  *((void *)&static RepresentableContextValues.current + 1) = v9;
  *(void *)&xmmword_1EB2E8DA0 = v10;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v11;
  uint64_t v14 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v12;
  swift_retain();
  swift_retain();
  uint64_t v27 = v10;
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  outlined copy of RepresentableContextValues?(v13, *((uint64_t *)&v13 + 1), v34, v33, v14);
  outlined consume of RepresentableContextValues?(v13, *((uint64_t *)&v13 + 1), v34, v33, v14);
  long long v15 = *(void **)(a1 + 40);
  long long v16 = objc_allocWithZone(MEMORY[0x1E4FB14E8]);
  char v17 = v15;
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v27, v11, v12);
  char v18 = objc_msgSend(v16, sel_init);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v27, v11, v12);

  uint64_t v19 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>();
  uint64_t v21 = objc_allocWithZone(v20);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v22 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v18, a3, a4, a5, 0, a7, v19);
  swift_release();
  uint64_t v23 = static RepresentableContextValues.current;
  uint64_t v24 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v13;
  *(void *)&xmmword_1EB2E8DA0 = v34;
  *((void *)&xmmword_1EB2E8DA0 + 1) = v33;
  uint64_t v25 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v14;
  outlined consume of RepresentableContextValues?(v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v27, v11, v12);
  AGGraphSetUpdate();
  return v22;
}

{
  char v11;
  long long v12;
  long long v13;
  long long v14;
  char v15;
  void *v16;
  long long v17;
  long long v18;
  char v19;

  AGGraphClearUpdate();
  uint64_t v11 = *(unsigned char *)(a1 + 32);
  char v12 = static RepresentableContextValues.current;
  char v13 = xmmword_1EB2E8DA0;
  uint64_t v14 = *(_OWORD *)(a1 + 16);
  static RepresentableContextValues.current = *(_OWORD *)a1;
  xmmword_1EB2E8DA0 = v14;
  long long v15 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v11;
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  outlined copy of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v15);
  outlined consume of RepresentableContextValues?(v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v15);
  long long v16 = specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(a2, a1, a3, a4, a5, a6, a7, a8);
  char v17 = static RepresentableContextValues.current;
  char v18 = xmmword_1EB2E8DA0;
  static RepresentableContextValues.current = v12;
  xmmword_1EB2E8DA0 = v13;
  uint64_t v19 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v15;
  outlined consume of RepresentableContextValues?(v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19);
  outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a1);
  AGGraphSetUpdate();
  return v16;
}

void *specialized closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>(a1, (uint64_t)v30);
  char v12 = *(void **)(a2 + 40);
  long long v13 = *(_OWORD *)(a2 + 16);
  long long v31 = *(_OWORD *)a2;
  long long v32 = v13;
  char v33 = *(unsigned char *)(a2 + 32);
  uint64_t v14 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3FD08];
  outlined init with take of CGSize?((uint64_t)&v31, (uint64_t)v36, &lazy cache variable for type metadata for PreferenceBridge?, MEMORY[0x1E4F3FD08]);
  outlined init with take of CGSize?((uint64_t)v36, (uint64_t)&v27, &lazy cache variable for type metadata for PreferenceBridge?, v14);
  uint64_t v35 = *((void *)&v31 + 1);
  uint64_t v26 = *((void *)&v31 + 1);
  outlined init with take of RepresentableContextValues.EnvironmentStorage((uint64_t)&v32, (uint64_t)v34);
  uint64_t v15 = outlined init with take of RepresentableContextValues.EnvironmentStorage((uint64_t)v34, (uint64_t)&v37);
  if (v38)
  {
    vrev64_s32(COERCE_INT32X2_T(MEMORY[0x1F4188790](v15)));
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(a2);
    id v16 = v12;
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v36);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v35);
    outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)&v31);
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)&v31);
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(a2);
  }
  else
  {
    v28[0] = v37;
    id v17 = v12;
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v36);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v35);
    outlined retain of RepresentableContextValues.EnvironmentStorage((uint64_t)v34);
  }
  long long v18 = v28[0];
  *(void *)&v28[0] = v12;
  *((void *)&v28[0] + 1) = v26;
  v28[1] = v18;
  uint64_t v29 = v27;
  uint64_t v19 = NavigationStackRepresentable.makeUIViewController(context:)((uint64_t)v28);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>((uint64_t)v30);
  uint64_t v20 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
  objc_allocWithZone(v21);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v22 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v19, a3, a4, a5, 0, a7, v20, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1ED478EF0, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(void, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
  swift_release();
  return v22;
}

{
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  Class v14;
  id v15;
  void *v16;
  char v18;
  uint64_t v19;

  uint64_t v8 = *(void **)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v19 = *(void *)(a2 + 24);
  long long v18 = *(unsigned char *)(a2 + 32);
  uint64_t v10 = objc_allocWithZone(MEMORY[0x1E4FB1CD0]);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v11 = v8;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v9, v19, v18);
  char v12 = objc_msgSend(v10, sel_init);
  objc_msgSend(v12, sel_addTarget_action_forControlEvents_, v11, sel_isOnChanged_, 4096);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v9, v19, v18);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  long long v13 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<Switch>>();
  uint64_t v15 = objc_allocWithZone(v14);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  id v16 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v12, a3, a4, a5, 0, a7, v13);
  swift_release();
  return v16;
}

{
  long long v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  Class v18;
  void *v19;
  long long v23;
  long long v24;
  uint64_t v25;
  void v26[47];
  long long v27;
  long long v28;
  char v29;
  unsigned char v30[24];
  uint64_t v31;
  unsigned char v32[8];
  long long v33;
  char v34;

  outlined init with copy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>(a1, (uint64_t)v26);
  *(void *)&uint64_t v24 = *(void *)(a2 + 40);
  char v12 = *(_OWORD *)(a2 + 16);
  uint64_t v27 = *(_OWORD *)a2;
  uint64_t v28 = v12;
  uint64_t v29 = *(unsigned char *)(a2 + 32);
  long long v13 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3FD08];
  outlined init with take of CGSize?((uint64_t)&v27, (uint64_t)v32, &lazy cache variable for type metadata for PreferenceBridge?, MEMORY[0x1E4F3FD08]);
  outlined init with take of CGSize?((uint64_t)v32, (uint64_t)&v25, &lazy cache variable for type metadata for PreferenceBridge?, v13);
  long long v31 = *((void *)&v27 + 1);
  *((void *)&v24 + 1) = *((void *)&v27 + 1);
  outlined init with take of RepresentableContextValues.EnvironmentStorage((uint64_t)&v28, (uint64_t)v30);
  uint64_t v14 = outlined init with take of RepresentableContextValues.EnvironmentStorage((uint64_t)v30, (uint64_t)&v33);
  if (v34)
  {
    vrev64_s32(COERCE_INT32X2_T(MEMORY[0x1F4188790](v14)));
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(a2);
    swift_retain();
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v32);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v31);
    outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)&v27);
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)&v27);
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(a2);
  }
  else
  {
    uint64_t v23 = v33;
    swift_retain();
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v32);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v31);
    outlined retain of RepresentableContextValues.EnvironmentStorage((uint64_t)v30);
  }
  uint64_t v24 = v23;
  uint64_t v15 = v26[32];
  swift_retain();
  swift_retain();
  id v16 = specialized NavigationSplitCoordinator.makeSplitViewController(environment:seeds:splitViewControllerProxyStorage:)((uint64_t *)&v24, v15);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>((uint64_t)v26);
  id v17 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
  objc_allocWithZone(v18);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v19 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v16, a3, a4, a5, 0, a7, v17, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1ED479030, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(void, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
  swift_release();
  return v19;
}

{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  id v18;
  uint64_t v19;
  Class v20;
  void *v21;
  void v25[4];
  char v26;
  void *v27;
  unsigned char v28[80];

  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitPagingView>(a1, (uint64_t)v28);
  char v12 = *(void **)(a2 + 40);
  long long v13 = *(void *)(a2 + 8);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = *(void *)(a2 + 24);
  id v16 = *(unsigned char *)(a2 + 32);
  v25[0] = *(void *)a2;
  v25[1] = v13;
  v25[2] = v14;
  v25[3] = v15;
  uint64_t v26 = v16;
  uint64_t v27 = v12;
  swift_retain();
  id v17 = v12;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v14, v15, v16);
  long long v18 = UIKitPagingView.makeUIView(context:)((uint64_t)v25);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v14, v15, v16);

  outlined destroy of PlatformViewRepresentableAdaptor<UIKitPagingView>((uint64_t)v28);
  uint64_t v19 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
  objc_allocWithZone(v20);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  Class v21 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v18, a3, a4, a5, 0, a7, v19);
  swift_release();
  return v21;
}

{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  Class v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  uint64_t v30 = a8;
  long long v31 = a5;
  uint64_t v34 = a7;
  long long v32 = a3;
  char v33 = a4;
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
  MEMORY[0x1F4188790](v10 - 8);
  char v12 = (char *)&v29 - v11;
  outlined init with copy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(a1, (uint64_t)&v29 - v11);
  long long v13 = *(void **)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = *(void *)(a2 + 24);
  id v16 = *(unsigned char *)(a2 + 32);
  type metadata accessor for TextEditorTextView();
  id v17 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  swift_retain();
  long long v18 = v13;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v14, v15, v16);
  uint64_t v19 = objc_msgSend(v17, sel_init);
  objc_msgSend(v19, sel_setAllowsEditingTextAttributes_, 0);
  objc_msgSend(v19, sel_setDelegate_, v18);
  uint64_t v20 = *(void *)v12;
  LOBYTE(v13) = v12[8];
  Class v21 = v19;
  outlined copy of Environment<Bool>.Content(v20, (char)v13);
  specialized Environment.wrappedValue.getter(v20, (char)v13);
  outlined consume of Environment<Bool>.Content(v20, (char)v13);
  objc_msgSend(v21, sel_setBorderStyle_, 0);
  swift_release();
  swift_release();

  outlined consume of RepresentableContextValues.EnvironmentStorage(v14, v15, v16);
  outlined destroy of PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>((uint64_t)v12);
  uint64_t v22 = *(void *)(v30 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>();
  uint64_t v24 = objc_allocWithZone(v23);
  uint64_t v25 = v31;
  swift_retain();
  swift_retain();
  uint64_t v26 = v32;
  swift_unknownObjectRetain();
  uint64_t v27 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v21, v26, v33, v25, 0, v34, v22);
  swift_release();
  return v27;
}

{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  Class v18;
  id v19;
  void *v20;

  uint64_t v10 = *(void **)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 16);
  char v12 = *(void *)(a2 + 24);
  long long v13 = *(unsigned char *)(a2 + 32);
  uint64_t v14 = objc_allocWithZone(MEMORY[0x1E4FB1C00]);
  swift_retain();
  uint64_t v15 = v10;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);
  id v16 = objc_msgSend(v14, sel_init);
  objc_msgSend(v16, sel_setDelegate_, v15);
  objc_msgSend(v16, sel_addTarget_action_forControlEvents_, v15, sel_textDidChange_, 0x20000);
  objc_msgSend(v16, sel_addTarget_action_forControlEvents_, v15, sel_editingDidBegin_, 0x10000);
  objc_msgSend(v16, sel_addTarget_action_forControlEvents_, v15, sel_editingDidEnd_, 0x40000);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v11, v12, v13);

  id v17 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<KitRepresentable>>();
  uint64_t v19 = objc_allocWithZone(v18);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v20 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v16, a3, a4, a5, 0, a7, v17);
  swift_release();
  return v20;
}

{
  void *v8;
  void *v9;
  uint64_t v10;
  char v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  Class v16;
  id v17;
  void *v18;
  uint64_t v20;
  id v21;

  uint64_t v8 = *(void **)(a1 + 16);
  uint64_t v9 = *(void **)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v20 = *(void *)(a2 + 24);
  uint64_t v11 = *(unsigned char *)(a2 + 32);
  char v12 = objc_allocWithZone(MEMORY[0x1E4FB1630]);
  swift_retain();
  swift_retain();
  swift_retain();
  Class v21 = v8;
  swift_bridgeObjectRetain();
  long long v13 = v9;
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v20, v11);
  uint64_t v14 = objc_msgSend(v12, sel_init);
  objc_msgSend(v14, sel_addTarget_action_forControlEvents_, v13, sel_colorChanged_, 4096);
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(v10, v20, v11);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  uint64_t v15 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<BridgedColorPicker>>();
  id v17 = objc_allocWithZone(v16);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  long long v18 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v14, a3, a4, a5, 0, a7, v15);
  swift_release();
  return v18;
}

{
  long long v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  id v17;
  uint64_t v18;
  Class v19;
  void *v20;
  uint64_t v22;
  unsigned char v23[72];
  long long v24;
  long long v25;
  char v26;
  unsigned char v27[24];
  uint64_t v28;
  unsigned char v29[8];
  long long v30;
  char v31;

  outlined init with copy of PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>(a1, (uint64_t)v23);
  uint64_t v14 = *(_OWORD *)(a2 + 16);
  uint64_t v24 = *(_OWORD *)a2;
  uint64_t v25 = v14;
  uint64_t v26 = *(unsigned char *)(a2 + 32);
  uint64_t v15 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3FD08];
  outlined init with take of CGSize?((uint64_t)&v24, (uint64_t)v29, &lazy cache variable for type metadata for PreferenceBridge?, MEMORY[0x1E4F3FD08]);
  outlined init with take of CGSize?((uint64_t)v29, (uint64_t)&v22, &lazy cache variable for type metadata for PreferenceBridge?, v15);
  uint64_t v28 = *((void *)&v24 + 1);
  outlined init with take of RepresentableContextValues.EnvironmentStorage((uint64_t)&v25, (uint64_t)v27);
  id v16 = outlined init with take of RepresentableContextValues.EnvironmentStorage((uint64_t)v27, (uint64_t)&v30);
  if (v31)
  {
    vrev64_s32(COERCE_INT32X2_T(MEMORY[0x1F4188790](v16)));
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v29);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v28);
    outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a2);
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a2);
  }
  else
  {
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v29);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v28);
    outlined retain of RepresentableContextValues.EnvironmentStorage((uint64_t)v27);
  }
  id v17 = BridgedNavigationView.makeUIViewController(context:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>((uint64_t)v23);
  long long v18 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
  objc_allocWithZone(v19);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v20 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v17, a3, a4, a5, 0, a7, v18, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1ED478D38, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(void, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
  swift_release();
  return v20;
}

{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  long long v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  id v20;
  id v21;
  long long v22;
  void *v23;
  id v24;
  uint64_t v25;
  Class v26;
  void *v27;
  uint64_t v29;
  int v30;
  long long v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  long long v35;
  long long v36;
  char v37;
  unsigned char v38[24];
  uint64_t v39;
  unsigned char v40[8];
  long long v41;
  char v42;

  uint64_t v30 = a7;
  uint64_t v29 = a4;
  type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v29 - v14;
  outlined init with copy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(a1, (uint64_t)&v29 - v14);
  id v16 = *(void **)(a2 + 40);
  *(void *)&long long v31 = v16;
  id v17 = *(_OWORD *)(a2 + 16);
  uint64_t v35 = *(_OWORD *)a2;
  uint64_t v36 = v17;
  long long v37 = *(unsigned char *)(a2 + 32);
  long long v18 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3FD08];
  outlined init with take of CGSize?((uint64_t)&v35, (uint64_t)v40, &lazy cache variable for type metadata for PreferenceBridge?, MEMORY[0x1E4F3FD08]);
  outlined init with take of CGSize?((uint64_t)v40, (uint64_t)&v32, &lazy cache variable for type metadata for PreferenceBridge?, v18);
  uint64_t v39 = *((void *)&v35 + 1);
  *((void *)&v31 + 1) = *((void *)&v35 + 1);
  outlined init with take of RepresentableContextValues.EnvironmentStorage((uint64_t)&v36, (uint64_t)v38);
  uint64_t v19 = outlined init with take of RepresentableContextValues.EnvironmentStorage((uint64_t)v38, (uint64_t)&v41);
  if (v42)
  {
    vrev64_s32(COERCE_INT32X2_T(MEMORY[0x1F4188790](v19)));
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(a2);
    uint64_t v20 = v16;
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v40);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v39);
    outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)&v35);
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)&v35);
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(a2);
  }
  else
  {
    v33[0] = v41;
    Class v21 = v16;
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v40);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v39);
    outlined retain of RepresentableContextValues.EnvironmentStorage((uint64_t)v38);
  }
  uint64_t v22 = v33[0];
  uint64_t v23 = (void *)v31;
  v33[0] = v31;
  v33[1] = v22;
  uint64_t v34 = v32;
  uint64_t v24 = UIKitAdaptableTabView.makeUIViewController(context:)((uint64_t *)v33);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>((uint64_t)v15);
  uint64_t v25 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>();
  objc_allocWithZone(v26);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v27 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v24, a3, v29, a5, 0, v30, v25, (uint64_t)closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)partial apply, (uint64_t)&unk_1ED478EA0, (uint64_t)closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)partial apply, (void (*)(void, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
  swift_release();
  return v27;
}

{
  long long v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  long long v16;
  id v17;
  uint64_t v18;
  Class v19;
  void *v20;
  uint64_t v23;
  uint64_t v24;
  unsigned char v25[24];
  uint64_t v26;
  unsigned char v27[240];
  long long v28;
  long long v29;
  char v30;
  unsigned char v31[24];
  uint64_t v32;
  unsigned char v33[8];
  long long v34;
  char v35;

  outlined init with copy of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>(a1, (uint64_t)v27);
  long long v13 = *(_OWORD *)(a2 + 16);
  uint64_t v28 = *(_OWORD *)a2;
  uint64_t v29 = v13;
  uint64_t v30 = *(unsigned char *)(a2 + 32);
  uint64_t v14 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3FD08];
  outlined init with take of CGSize?((uint64_t)&v28, (uint64_t)v33, &lazy cache variable for type metadata for PreferenceBridge?, MEMORY[0x1E4F3FD08]);
  outlined init with take of CGSize?((uint64_t)v33, (uint64_t)&v24, &lazy cache variable for type metadata for PreferenceBridge?, v14);
  long long v32 = *((void *)&v28 + 1);
  uint64_t v23 = *((void *)&v28 + 1);
  outlined init with take of RepresentableContextValues.EnvironmentStorage((uint64_t)&v29, (uint64_t)v31);
  uint64_t v15 = outlined init with take of RepresentableContextValues.EnvironmentStorage((uint64_t)v31, (uint64_t)&v34);
  if (v35)
  {
    vrev64_s32(COERCE_INT32X2_T(MEMORY[0x1F4188790](v15)));
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v33);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v32);
    outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a2);
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(a2);
  }
  else
  {
    *(_OWORD *)uint64_t v25 = v34;
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v33);
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v32);
    outlined retain of RepresentableContextValues.EnvironmentStorage((uint64_t)v31);
  }
  id v16 = *(_OWORD *)v25;
  *(void *)uint64_t v25 = v23;
  *(_OWORD *)&v25[8] = v16;
  uint64_t v26 = v24;
  id v17 = CustomizableDocumentViewControllerRepresentable.makeUIViewController(context:)((uint64_t)v25);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>((uint64_t)v27);
  long long v18 = *(void *)(a8 + 48);
  type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
  objc_allocWithZone(v19);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v20 = specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)((uint64_t)v17, a3, a4, a5, 0, a7, v18, (uint64_t)partial apply for closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:), (uint64_t)&unk_1ED478BD0, (uint64_t)partial apply for closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:), (void (*)(void, uint64_t, uint64_t, uint64_t))specialized PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:));
  swift_release();
  return v20;
}

void type metadata accessor for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
    }
  }
}

UINavigationController *NavigationStackRepresentable.makeUIViewController(context:)(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  static Log.navigation.getter();
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UINavigationPresentationAdaptor?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Logger?);
  }
  else
  {
    char v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_1872C6000, v12, v13, "Creating stack navigation controller", v14, 2u);
      MEMORY[0x18C119C60](v14, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v6, v10);
  }
  type metadata accessor for PPTTestCase?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_VariadicView_Children>, MEMORY[0x1E4F40A38], MEMORY[0x1E4FBBE00]);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_18834BB80;
  outlined init with copy of _VariadicView_Children(v2 + 24, v15 + 32);
  uint64_t v16 = *(void *)(v2 + 160);
  char v17 = *(unsigned char *)(v2 + 168);
  swift_retain_n();
  swift_retain_n();
  id v18 = v7;
  outlined copy of Environment<Bool>.Content(v16, v17);
  char v19 = specialized Environment.wrappedValue.getter(v16, v17);
  outlined consume of Environment<Bool>.Content(v16, v17);
  uint64_t v20 = specialized NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:)(v8, v9, v19 & 1, v8, v9, v15);
  type metadata accessor for UIKitNavigationController();
  *(void *)&long long v30 = v8;
  *((void *)&v30 + 1) = v9;
  outlined init with copy of NavigationAuthority(v2 + 80, (uint64_t)v32);
  char v21 = *(unsigned char *)(v2 + 104);
  swift_retain();
  swift_retain();
  uint64_t v22 = v20;
  uint64_t v23 = (UINavigationController *)UIKitNavigationController.__allocating_init(rootViewController:environment:navigationAuthority:isSecure:)(v22, (uint64_t *)&v30, (uint64_t)v32, v21);
  outlined init with copy of UINavigationPresentationAdaptor?(v2 + 120, (uint64_t)&v30, (uint64_t (*)(void))type metadata accessor for UINavigationPresentationAdaptor?);
  if (v31)
  {
    outlined init with take of OptionalBinaryInteger(&v30, (uint64_t)v32);
    outlined init with copy of TableColumnList((uint64_t)v32, (uint64_t)&v30);
    uint64_t v24 = (uint64_t)v23 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_platformNavigationPresentationStrategy;
    swift_beginAccess();
    outlined assign with take of UIKitNavigationController.PlatformNavigationRequestStrategy((uint64_t)&v30, v24);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  }
  else
  {
    outlined destroy of UINavigationPresentationAdaptor?((uint64_t)&v30, (uint64_t (*)(void))type metadata accessor for UINavigationPresentationAdaptor?);
  }
  uint64_t v25 = *(unsigned __int8 *)(v2 + 8);
  uint64_t v26 = *(void *)(v2 + 16);
  uint64_t v27 = (Class *)((char *)&v23->super.super.super.isa + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_context);
  *uint64_t v27 = *(void *)v2;
  v27[1] = v25;
  v27[2] = v26;
  [(UINavigationController *)v23 setDelegate:v18];
  specialized UIHostingController.prepareNavigationBar(in:navigationController:isRoot:)(v8, v9, v23, 1);

  swift_bridgeObjectRelease();
  swift_release_n();
  swift_release_n();

  return v23;
}

unsigned char *UIKitNavigationController.__allocating_init(rootViewController:environment:navigationAuthority:isSecure:)(void *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  id v10 = objc_msgSend(objc_allocWithZone(v4), sel_initWithRootViewController_, a1);
  outlined init with copy of NavigationAuthority(a3, (uint64_t)v14);
  uint64_t v11 = (uint64_t)v10 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_navigationAuthority;
  swift_beginAccess();
  char v12 = v10;
  outlined assign with take of NavigationAuthority?((uint64_t)v14, v11);
  swift_endAccess();
  v12[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isSecure] = a4;
  v14[0] = v9;
  v14[1] = v8;
  UIKitNavigationController.configure(environment:)((uint64_t)v14);

  outlined destroy of NavigationAuthority(a3);
  swift_release();
  swift_release();
  return v12;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>>();
    lazy protocol witness table accessor for type ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?> and conformance _BackgroundPreferenceModifier<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?> and conformance _BackgroundPreferenceModifier<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?> and conformance _BackgroundPreferenceModifier<A, B>;
  if (!lazy protocol witness table cache variable for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?> and conformance _BackgroundPreferenceModifier<A, B>)
  {
    type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?> and conformance _BackgroundPreferenceModifier<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>>)
  {
    type metadata accessor for ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>();
    type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>>);
    }
  }
}

void type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>()
{
  if (!lazy cache variable for type metadata for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>)
  {
    type metadata accessor for Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E4F41618], MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for _BackgroundPreferenceModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationSplitViewKey, ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?)
  {
    uint64_t v1 = MEMORY[0x1E4F41618];
    type metadata accessor for Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>?, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E4F41618], MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>, v1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>? and conformance <A> A?);
  }
  return result;
}

uint64_t NavigableListModifier.EnsureNavigationAuthority.updateValue()(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v17 = *(void *)(a1 + 16);
  type metadata accessor for SelectionManagerBox();
  uint64_t v3 = type metadata accessor for Binding();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v8 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v16 - v10;
  NavigableListModifier.EnsureNavigationAuthority.selection.getter((uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v3) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v7, v3);
    NavigableListModifier.EnsureNavigationAuthority.inheritedAuthority.getter((uint64_t)&v26);
    if (*((void *)&v26 + 1) == 1)
    {
      outlined destroy of NavigationAuthority?((uint64_t)&v26);
    }
    else
    {
      if (*((void *)&v26 + 1) != 2)
      {
LABEL_12:
        outlined init with take of NavigationAuthority((uint64_t)&v26, (uint64_t)v36);
        if (*(unsigned char *)(v1 + 48))
        {
LABEL_17:
          outlined init with copy of NavigationAuthority((uint64_t)v36, (uint64_t)&v26);
          type metadata accessor for _GraphValue<Namespace.ID>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
          AGGraphSetOutputValue();
          outlined destroy of NavigationAuthority?((uint64_t)&v26);
          outlined destroy of NavigationAuthority((uint64_t)v36);
          return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v3);
        }
        *(unsigned char *)(v1 + 48) = 1;
        outlined init with copy of NavigationAuthority((uint64_t)v36, (uint64_t)v35);
        type metadata accessor for _GraphValue<Namespace.ID>(0, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, MEMORY[0x1E4FBB718]);
        uint64_t Value = (_OWORD *)AGGraphGetValue();
        long long v15 = Value[1];
        v37[0] = *Value;
        v37[1] = v15;
        v37[2] = Value[2];
        uint64_t result = _s7SwiftUI19NavigationAuthorityVSgWObTm_0((uint64_t)v37, (uint64_t)v38, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey);
        if (v39.n128_u64[1] != 1)
        {
          v40[0] = (__n128)v38[0];
          v40[1] = (__n128)v38[1];
          _OWORD v40[2] = v39;
          static NavigationRequest.setSelection<A>(_:list:)((uint64_t)v11, v40, v17, v2, (uint64_t)&v26);
          if (*(unsigned char *)(v1 + 20) != 1)
          {
            long long v23 = v32;
            long long v24 = v33;
            uint64_t v25 = v34;
            long long v19 = v28;
            long long v20 = v29;
            long long v21 = v30;
            long long v22 = v31;
            *(_OWORD *)id v18 = v26;
            *(_OWORD *)&unsigned char v18[16] = v27;
            NavigationAuthority.enqueueRequest(_:)((long long *)v18);
          }
          outlined release of NavigationRequest((uint64_t)&v26);
          outlined destroy of NavigationAuthority((uint64_t)v35);
          goto LABEL_17;
        }
        __break(1u);
LABEL_20:
        __break(1u);
        return result;
      }
      outlined destroy of NavigationAuthority??((uint64_t)&v26);
    }
    outlined init with copy of NavigationAuthority?(v1 + 24, (uint64_t)&v26);
    if (*((void *)&v26 + 1) == 1)
    {
      outlined destroy of NavigationAuthority?((uint64_t)&v26);
      type metadata accessor for NavigationStateHost();
      AGGraphGetValue();
      swift_retain();
      EnvironmentValues.init()();
      __n128 v13 = v40[0];
      swift_weakInit();
      swift_weakAssign();
      swift_release();
      *(__n128 *)&v18[8] = v13;
      outlined init with take of NavigationAuthority((uint64_t)v18, (uint64_t)&v26);
      outlined assign with take of NavigationAuthority?((uint64_t)&v26, v1 + 24);
      uint64_t result = outlined init with copy of NavigationAuthority?(v1 + 24, (uint64_t)&v26);
      if (*((void *)&v26 + 1) == 1) {
        goto LABEL_20;
      }
    }
    goto LABEL_12;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  NavigableListModifier.EnsureNavigationAuthority.inheritedAuthority.getter((uint64_t)v18);
  if (*(void *)&v18[8] == 2)
  {
    long long v26 = xmmword_18834BB90;
    *(void *)&long long v27 = 0;
    outlined destroy of NavigationAuthority??((uint64_t)v18);
  }
  else
  {
    _s7SwiftUI19NavigationAuthorityVSgWObTm_0((uint64_t)v18, (uint64_t)&v26, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  }
  type metadata accessor for _GraphValue<Namespace.ID>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  AGGraphSetOutputValue();
  return outlined destroy of NavigationAuthority?((uint64_t)&v26);
}

uint64_t NavigableListModifier.EnsureNavigationAuthority.selection.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for SelectionManagerBox();
  type metadata accessor for Binding();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

double NavigableListModifier.EnsureNavigationAuthority.inheritedAuthority.getter@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for _GraphValue<Namespace.ID>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of NavigationAuthority?(WeakValue, a1);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a1 = xmmword_18834C6B0;
    *(void *)(a1 + 16) = 0;
  }
  return result;
}

__n128 static NavigationRequest.setSelection<A>(_:list:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __n128 v14 = *a2;
  unint64_t v8 = a2[1].n128_u64[0];
  unint64_t v9 = a2[1].n128_u64[1];
  unsigned __int8 v10 = a2[2].n128_u8[0];
  unint64_t v11 = a2[2].n128_u64[1];
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a3, a4, a3, a4);
  type metadata accessor for SelectionManagerBox();
  type metadata accessor for Binding();
  type metadata accessor for ToAnyListSelection();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  uint64_t v12 = *(void *)(a1 + 8);
  *(void *)a5 = v15;
  *(_OWORD *)(a5 + 8) = v16;
  *(void *)(a5 + 24) = v12;
  *(void *)(a5 + 32) = a3;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + 56) = 0;
  *(void *)(a5 + 40) = 0;
  *(unsigned char *)(a5 + 64) = 2;
  __n128 result = v14;
  *(__n128 *)(a5 + 72) = v14;
  *(void *)(a5 + 88) = v8;
  *(void *)(a5 + 96) = v9;
  *(void *)(a5 + 104) = v10 & 1 | 0x4000000000000000;
  *(void *)(a5 + 112) = v11;
  *(unsigned char *)(a5 + 120) = 0;
  *(void *)(a5 + 128) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>();
    lazy protocol witness table accessor for type Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>> and conformance <A> Group<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>> and conformance <A> Group<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>> and conformance <A> Group<A>;
  if (!lazy protocol witness table cache variable for type Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>> and conformance <A> Group<A>)
  {
    type metadata accessor for Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>(255, &lazy cache variable for type metadata for Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>, (uint64_t)&type metadata for NavigationSplitRepresentable, MEMORY[0x1E4F414E8]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>, (uint64_t)&type metadata for NavigationSplitRepresentable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>> and conformance <A> Group<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>(255, a2, a3, MEMORY[0x1E4F41208], MEMORY[0x1E4F3FBA0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t NavigationSplitCore.uikitSplitRepresentable.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  outlined init with copy of _VariadicView_Children(v1, (uint64_t)v16);
  outlined init with copy of _VariadicView_Children(v1 + 56, (uint64_t)&v17);
  outlined init with copy of _VariadicView_Children(v1 + 112, (uint64_t)v18);
  uint64_t v3 = *(void *)(v1 + 168);
  char v4 = *(unsigned char *)(v1 + 176);
  uint64_t v5 = *(void *)(v1 + 184);
  char v6 = *(unsigned char *)(v1 + 192);
  char v13 = *(unsigned char *)(v1 + 194);
  char v14 = *(unsigned char *)(v1 + 193);
  uint64_t v7 = *(void *)(v1 + 200);
  uint64_t v8 = *(void *)(v2 + 208);
  int v9 = *(_DWORD *)(v2 + 216);
  outlined init with copy of NavigationAuthority(v2 + 224, (uint64_t)v27);
  uint64_t v10 = *(void *)(v2 + 256);
  uint64_t v11 = *(void *)(v2 + 248);
  outlined init with copy of ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>(v2 + 264, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for UINavigationPresentationAdaptor?);
  v18[7] = v3;
  char v19 = v4;
  uint64_t v20 = v5;
  char v21 = v6;
  char v22 = v14;
  char v23 = v13;
  uint64_t v24 = v7;
  uint64_t v25 = v8;
  int v26 = v9;
  v27[3] = v11;
  v27[4] = v10;
  void v28[5] = swift_getKeyPath();
  char v29 = 0;
  uint64_t KeyPath = swift_getKeyPath();
  char v31 = 0;
  uint64_t v32 = swift_getKeyPath();
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  char v36 = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  LOBYTE(v7) = static Edge.Set.all.getter();
  outlined init with copy of NavigationSplitRepresentable((uint64_t)v16, a1);
  *(void *)(a1 + 376) = -1;
  *(unsigned char *)(a1 + 384) = v7;
  return outlined destroy of NavigationSplitRepresentable((uint64_t)v16);
}

uint64_t outlined destroy of NavigationSplitRepresentable(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of NavigationSplitRepresentable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t protocol witness for View.body.getter in conformance NavigationSplitCore@<X0>(void *a1@<X8>)
{
  NavigationSplitCore.uikitSplitRepresentable.getter((uint64_t)v9);
  uint64_t KeyPath = swift_getKeyPath();
  outlined init with copy of Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>((uint64_t)v9, (uint64_t)v7);
  uint64_t v8 = KeyPath;
  swift_retain();
  uint64_t v3 = static Alignment.center.getter();
  uint64_t v5 = v4;
  outlined init with copy of ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>((uint64_t)v7, (uint64_t)a1, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>);
  a1[50] = closure #1 in View.renderContainerBackground<A>(_:key:);
  a1[51] = 0;
  a1[52] = v3;
  a1[53] = v5;
  outlined destroy of ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>((uint64_t)v7);
  swift_release();
  return outlined destroy of Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>((uint64_t)v9);
}

uint64_t outlined init with copy of ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>)
  {
    type metadata accessor for Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>(255, &lazy cache variable for type metadata for Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>, (uint64_t)&type metadata for NavigationSplitRepresentable, MEMORY[0x1E4F414E8]);
    type metadata accessor for ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>(255, &lazy cache variable for type metadata for ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.NavigationSplitViewKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.NavigationSplitViewKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ContainerBackgroundRendererModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, ContainerBackgroundRendererModifier<ContainerBackgroundKeys.NavigationSplitViewKey>>);
    }
  }
}

uint64_t outlined destroy of Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>(uint64_t a1)
{
  type metadata accessor for Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>(0, &lazy cache variable for type metadata for Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>, (uint64_t)&type metadata for NavigationSplitRepresentable, MEMORY[0x1E4F414E8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>(0, &lazy cache variable for type metadata for Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>, (uint64_t)&type metadata for NavigationSplitRepresentable, MEMORY[0x1E4F414E8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Group<ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>(255, a3, a4, MEMORY[0x1E4F41208], MEMORY[0x1E4F3FBA0]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<NavigationSplitRepresentable, _SafeAreaRegionsIgnoringLayout>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void NavigationSplitCoordinator.makeNavigationControllers(splitController:environment:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = *(void *)(v2 + 232);
  __int16 v7 = *(_WORD *)(v2 + 240);
  v34[0] = *(void *)(v2 + 224);
  v34[1] = v6;
  __int16 v35 = v7;
  type metadata accessor for Environment<NavigationEventHandlers>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationSplitVisibility>, (uint64_t)&type metadata for AnyNavigationSplitVisibility, MEMORY[0x1E4F41638]);
  uint64_t v9 = v8;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v32, v9);
  unsigned int v10 = (unsigned __int16)v32 >> 14;
  BOOL v30 = v10 >= 2 && (v10 != 3 || (unsigned __int16)v32 != 49152);
  swift_release();
  swift_release();
  uint64_t v31 = v2 + 280;
  uint64_t v11 = v2 + 304;
LABEL_7:
  uint64_t v12 = 0;
  if (v30) {
    uint64_t v13 = 1;
  }
  else {
LABEL_18:
  }
    uint64_t v13 = 2;
  char v22 = 0;
  uint64_t v23 = v12;
  while (1)
  {
    char v14 = a1;
    uint64_t v12 = v13;
    outlined init with copy of NavigationAuthority(v31, (uint64_t)v34);
    uint64_t v15 = (objc_class *)type metadata accessor for UIKitNavigationController();
    id v16 = objc_allocWithZone(v15);
    swift_retain();
    swift_retain();
    id v17 = objc_msgSend(v16, sel_initWithRootViewController_, 0);
    outlined init with copy of NavigationAuthority((uint64_t)v34, (uint64_t)&v32);
    uint64_t v18 = (uint64_t)v17 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_navigationAuthority;
    swift_beginAccess();
    id v19 = v17;
    outlined assign with take of NavigationAuthority?((uint64_t)&v32, v18);
    swift_endAccess();
    *(void *)&long long v32 = v4;
    *((void *)&v32 + 1) = v5;
    UIKitNavigationController.configure(environment:)((uint64_t)&v32);

    outlined destroy of NavigationAuthority((uint64_t)v34);
    swift_release();
    swift_release();
    swift_beginAccess();
    outlined init with copy of UINavigationPresentationAdaptor?(v11, (uint64_t)&v32);
    if (v33)
    {
      outlined init with take of OptionalBinaryInteger(&v32, (uint64_t)v34);
      outlined init with copy of TableColumnList((uint64_t)v34, (uint64_t)&v32);
      uint64_t v20 = (uint64_t)v19 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_platformNavigationPresentationStrategy;
      swift_beginAccess();
      outlined assign with take of UIKitNavigationController.PlatformNavigationRequestStrategy((uint64_t)&v32, v20);
      swift_endAccess();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
    }
    else
    {
      outlined destroy of UINavigationPresentationAdaptor?((uint64_t)&v32);
    }
    id v21 = v19;
    a1 = v14;
    if (objc_msgSend(v14, sel_style)) {
      objc_msgSend(v14, sel_setViewController_forColumn_, v21, v23);
    }

    if (v22) {
      break;
    }
    if (v12 == 1) {
      goto LABEL_18;
    }
    uint64_t v13 = 0;
    char v22 = 1;
    uint64_t v23 = 2;
    if (!v12) {
      goto LABEL_7;
    }
  }
  outlined init with copy of NavigationAuthority(v31, (uint64_t)v34);
  id v24 = objc_allocWithZone(v15);
  swift_retain();
  swift_retain();
  id v25 = objc_msgSend(v24, sel_initWithRootViewController_, 0);
  outlined init with copy of NavigationAuthority((uint64_t)v34, (uint64_t)&v32);
  uint64_t v26 = (uint64_t)v25 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_navigationAuthority;
  swift_beginAccess();
  id v27 = v25;
  outlined assign with take of NavigationAuthority?((uint64_t)&v32, v26);
  swift_endAccess();
  *(void *)&long long v32 = v4;
  *((void *)&v32 + 1) = v5;
  UIKitNavigationController.configure(environment:)((uint64_t)&v32);

  outlined destroy of NavigationAuthority((uint64_t)v34);
  swift_release();
  swift_release();
  outlined init with copy of UINavigationPresentationAdaptor?(v11, (uint64_t)&v32);
  if (v33)
  {
    outlined init with take of OptionalBinaryInteger(&v32, (uint64_t)v34);
    outlined init with copy of TableColumnList((uint64_t)v34, (uint64_t)&v32);
    uint64_t v28 = (uint64_t)v27 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_platformNavigationPresentationStrategy;
    swift_beginAccess();
    outlined assign with take of UIKitNavigationController.PlatformNavigationRequestStrategy((uint64_t)&v32, v28);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  }
  else
  {
    outlined destroy of UINavigationPresentationAdaptor?((uint64_t)&v32);
  }
  id v29 = v27;
  if (objc_msgSend(a1, sel_style)) {
    objc_msgSend(a1, sel_setViewController_forColumn_, v29, 3);
  }
}

uint64_t outlined init with copy of NavigationAuthority(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for NavigationAuthority(uint64_t a1, uint64_t a2)
{
  swift_weakCopyInit();
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined assign with take of NavigationAuthority?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of UINavigationPresentationAdaptor?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UINavigationPresentationAdaptor?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

char *specialized NavigationStrategy.viewControllerCommon(for:entering:canPop:isRoot:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = MEMORY[0x1E4F41618];
  uint64_t v8 = MEMORY[0x1E4F41610];
  type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
  unsigned int v10 = objc_allocWithZone(v9);
  uint64_t v11 = (void *)MEMORY[0x1E4FBC8C8];
  *((unsigned char *)v10 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v10) + 0x3D0)) = 6;
  *(void *)((char *)v10 + *(void *)((*v11 & *v10) + 0x3D8)) = 0;
  type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>.HostingView, v7, v8, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController.HostingView);
  id v13 = objc_allocWithZone(v12);
  uint64_t v14 = swift_retain();
  uint64_t v15 = (void *)specialized _UIHostingView.init(rootView:)(v14);
  swift_release();
  id v16 = (char *)specialized UIHostingController.init(_hostingView:)(v15);
  uint64_t result = (char *)objc_msgSend(v16, sel_view);
  if (result)
  {
    uint64_t v18 = result;
    objc_msgSend(result, sel_setClipsToBounds_, 1);

    id v19 = *(id *)&v16[direct field offset for UIHostingController.host];
    specialized NavigationStrategy.inheritedEnvironment<A>(from:for:canPop:)(1, 0, a2 & 1, a3, a4, (uint64_t *)&v25);
    uint64_t v20 = *(void *)((char *)v19 + *(void *)((*v11 & *v19) + 0x68));
    uint64_t v21 = *(void *)(v20 + 136);
    *(_OWORD *)(v20 + 136) = v25;
    outlined consume of EnvironmentValues?(v21);
    if (MEMORY[0x18C119DF0](v20 + 24))
    {
      swift_getObjectType();
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      swift_unknownObjectRelease();
    }
    *(void *)&long long v25 = a3;
    *((void *)&v25 + 1) = a4;
    uint64_t v22 = EnvironmentValues.preferenceBridge.getter();
    if (v22)
    {
      uint64_t v23 = v22;
      swift_retain();
      swift_retain();
      uint64_t v24 = ViewGraph.preferenceBridge.getter();
      swift_release();
      if (v24 && (swift_release(), v23 == v24))
      {

        swift_release_n();
      }
      else
      {
        swift_retain();
        swift_retain();
        ViewGraph.preferenceBridge.setter();

        swift_release_n();
        swift_release();
      }
    }
    else
    {
    }
    return v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized NavigationStrategy.inheritedEnvironment<A>(from:for:canPop:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v8 = a1;
  if (a1 == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v8 = a4;
    a2 = a5;
  }
  uint64_t v21 = a2;
  type metadata accessor for MainActor();
  outlined copy of EnvironmentValues?(a1);
  uint64_t v12 = static MainActor.shared.getter();
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = MEMORY[0x1E4FBCFD8];
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = v14;
  *(unsigned char *)(v13 + 32) = a3 & 1;
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  uint64_t v16 = static MainActor.shared.getter();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  *(void *)(v17 + 24) = v14;
  *(unsigned char *)(v17 + 32) = a3 & 1;
  *(void *)(v17 + 40) = v15;
  swift_release();
  Binding.init(get:set:)();
  type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>, (uint64_t)&type metadata for PresentationModeKey, (uint64_t)&protocol witness table for PresentationModeKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (v21)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    uint64_t v19 = v21;
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    uint64_t v19 = 0;
  }
  *a6 = v8;
  a6[1] = v19;
  return result;
}

void @objc _UIHostingView.clipsToBounds.setter(void *a1, uint64_t a2, char a3)
{
  id v4 = a1;
  _UIHostingView.clipsToBounds.setter(a3);
}

void _UIHostingView.clipsToBounds.setter(char a1)
{
  uint64_t v3 = (objc_class *)type metadata accessor for _UIHostingView();
  v6.receiver = v1;
  v6.super_class = v3;
  int v4 = objc_msgSendSuper2(&v6, sel_clipsToBounds);
  v5.receiver = v1;
  v5.super_class = v3;
  objc_msgSendSuper2(&v5, sel_setClipsToBounds_, a1 & 1);
  _UIHostingView.clipsToBounds.didset(v4);
}

void _UIHostingView.clipsToBounds.didset(int a1)
{
  uint64_t v2 = _UIHostingView.base.getter();
  uint64_t v3 = MEMORY[0x18C119DF0](v2 + 2);
  if (v3)
  {
    id v4 = (id)v3;
    if (MEMORY[0x18C119DF0](v2 + 3))
    {
      if ((objc_msgSend(v4, sel_clipsToBounds) ^ a1))
      {
        swift_getObjectType();
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      }
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    swift_release();
  }
}

uint64_t UIKitNavigationController.configure(environment:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey>, (uint64_t)&type metadata for EnvironmentValues.AllowsToolbarConversionKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowsToolbarConversionKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if ((v10[0] & 1) == 0)
  {
    id v4 = objc_msgSend(v2, sel_navigationBar);
    objc_msgSend(v4, sel_setPreferredBehavioralStyle_, 1);
  }
  type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>, (uint64_t)&type metadata for PlatformNavigationPresentationBridgingEnabledKey, (uint64_t)&protocol witness table for PlatformNavigationPresentationBridgingEnabledKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v5 = LOBYTE(v10[0]);
  memset(v10, 0, 24);
  v10[3] = v5;
  v10[4] = 0;
  uint64_t v6 = (uint64_t)v2 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_platformNavigationPresentationStrategy;
  swift_beginAccess();
  outlined assign with take of UIKitNavigationController.PlatformNavigationRequestStrategy((uint64_t)v10, v6);
  uint64_t result = swift_endAccess();
  char v8 = 1;
  *((unsigned char *)v2 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isDataDriven) = 1;
  uint64_t v9 = OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isSecure;
  if ((*((unsigned char *)v2 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isSecure) & 1) == 0)
  {
    type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>, (uint64_t)&type metadata for SceneAllowsSecureDrawingKey, (uint64_t)&protocol witness table for SceneAllowsSecureDrawingKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v3)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    uint64_t result = swift_release_n();
    char v8 = v10[0];
  }
  *((unsigned char *)v2 + v9) = v8;
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<ToolbarItemViewHiddenKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>, (uint64_t)&type metadata for SceneAllowsSecureDrawingKey, (uint64_t)&protocol witness table for SceneAllowsSecureDrawingKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined assign with take of UIKitNavigationController.PlatformNavigationRequestStrategy(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t assignWithTake for _PresentationTransitionOutputs.Content(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey>, (uint64_t)&type metadata for EnvironmentValues.AllowsToolbarConversionKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowsToolbarConversionKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>, (uint64_t)&type metadata for PlatformNavigationPresentationBridgingEnabledKey, (uint64_t)&protocol witness table for PlatformNavigationPresentationBridgingEnabledKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined destroy of UINavigationPresentationAdaptor?(uint64_t a1)
{
  type metadata accessor for UINavigationPresentationAdaptor?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t NavigationStackCore.NavigationStackRepresentableRoot.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1;
  closure #1 in NavigationStackCore.NavigationStackRepresentableRoot.body(children:)(v2, a1, 1, (uint64_t)v6);
  closure #1 in NavigationStackCore.NavigationStackRepresentableRoot.body(children:)(v2, v3, 0, (uint64_t)&v7);
  LOBYTE(v3) = static Edge.Set.all.getter();
  outlined init with copy of UINavigationPresentationAdaptor?((uint64_t)v6, a2, (uint64_t (*)(void))type metadata accessor for StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>);
  *(void *)(a2 + 352) = -1;
  *(unsigned char *)(a2 + 360) = v3;
  return outlined destroy of UINavigationPresentationAdaptor?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>);
}

uint64_t closure #1 in NavigationStackCore.NavigationStackRepresentableRoot.body(children:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W4>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  char v8 = *((unsigned char *)a1 + 8);
  uint64_t v9 = a1[2];
  outlined init with copy of _VariadicView_Children(a2, a4 + 24);
  outlined init with copy of NavigationAuthority((uint64_t)(a1 + 3), a4 + 80);
  uint64_t v10 = a1[6];
  outlined init with copy of UINavigationPresentationAdaptor?((uint64_t)(a1 + 7), a4 + 120, (uint64_t (*)(void))type metadata accessor for UINavigationPresentationAdaptor?);
  *(void *)a4 = v7;
  *(unsigned char *)(a4 + 8) = v8;
  *(void *)(a4 + 16) = v9;
  *(unsigned char *)(a4 + 104) = a3;
  *(void *)(a4 + 108) = v10;
  uint64_t result = swift_getKeyPath();
  *(void *)(a4 + 160) = result;
  *(unsigned char *)(a4 + 168) = 0;
  return result;
}

uint64_t outlined init with copy of UINavigationPresentationAdaptor?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for UINavigationPresentationAdaptor?()
{
  if (!lazy cache variable for type metadata for UINavigationPresentationAdaptor?)
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for UINavigationPresentationAdaptor);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UINavigationPresentationAdaptor?);
    }
  }
}

void type metadata accessor for StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>()
{
  if (!lazy cache variable for type metadata for StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>)
  {
    lazy protocol witness table accessor for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>);
    }
  }
}

void type metadata accessor for NavigationAuthority??()
{
  if (!lazy cache variable for type metadata for NavigationAuthority??)
  {
    type metadata accessor for PPTTestCase?(255, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NavigationAuthority??);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>();
    type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationDestinationKey>, (uint64_t)&type metadata for NavigationDestinationKey, (uint64_t)&protocol witness table for NavigationDestinationKey, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>)
  {
    type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>();
    type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>(255, &lazy cache variable for type metadata for ReadDestinationsModifier<ResolvedNavigationDestinations>, (uint64_t)&type metadata for ResolvedNavigationDestinations, (uint64_t)&protocol witness table for ResolvedNavigationDestinations, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ReadDestinationsModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
    }
  }
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>)
  {
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
    }
  }
}

uint64_t type metadata accessor for NavigationStackHostingController()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for NavigationStackHostingController.HostingView()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void static KeyboardShortcut.defaultAction.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 13;
  *(void *)(a1 + 8) = 0xE100000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
}

uint64_t assignWithCopy for AccessibilityProxyModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 24))((*(unsigned __int8 *)(v10 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 9 + a2) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t ScrollViewCommitMutation.combine<A>(with:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  if (swift_dynamicCast())
  {
    v8[8] = v18;
    v8[9] = v19;
    v8[10] = v20;
    void v8[4] = v14;
    v8[5] = v15;
    v8[6] = v16;
    v8[7] = v17;
    v8[0] = v10;
    v8[1] = v11;
    _OWORD v8[2] = v12;
    v8[3] = v13;
    unsigned char v6[8] = v18;
    v6[9] = v19;
    v6[10] = v20;
    v6[4] = v14;
    _OWORD v6[5] = v15;
    void v6[6] = v16;
    v6[7] = v17;
    v6[0] = v10;
    v6[1] = v11;
    __int16 v9 = v21;
    __int16 v7 = v21;
    void v6[2] = v12;
    v6[3] = v13;
    char v4 = ScrollViewCommitMutation.merge(_:)((uint64_t *)v6);
    outlined release of ScrollViewCommitMutation((uint64_t)v8);
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t initializeWithCopy for ScrollViewCommitMutation(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 96);
  if ((~v4 & 0xF000000000000004) != 0)
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    long long v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
    long long v10 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v10;
    outlined copy of SystemScrollLayoutState.ContentOffsetMode(v4);
    *(void *)(a1 + 96) = v4;
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
    *(void *)(a1 + 108) = *(void *)(a2 + 108);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v5;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    long long v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
  *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
  return a1;
}

uint64_t outlined release of ScrollViewCommitMutation(uint64_t a1)
{
  return a1;
}

uint64_t ScrollViewCommitMutation.merge(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v32 = a1[2];
  uint64_t v33 = a1[1];
  uint64_t v30 = a1[4];
  uint64_t v31 = a1[3];
  uint64_t v28 = a1[6];
  uint64_t v29 = a1[5];
  uint64_t v27 = a1[7];
  uint64_t v25 = a1[9];
  uint64_t v26 = a1[8];
  uint64_t v23 = a1[11];
  uint64_t v24 = a1[10];
  uint64_t v35 = a1[13];
  int v3 = *((_DWORD *)a1 + 28);
  long long v36 = *(_OWORD *)(a1 + 15);
  uint64_t v4 = a1[17];
  uint64_t v5 = a1[18];
  long long v34 = *(_OWORD *)(a1 + 19);
  uint64_t v6 = a1[21];
  int v7 = *((unsigned __int8 *)a1 + 176);
  char v8 = *((unsigned char *)a1 + 177);
  unint64_t v22 = a1[12];
  unint64_t v9 = v22 & 0xF000000000000004;
  if ((~*(void *)(v1 + 96) & 0xF000000000000004) != 0
    && v9 != 0xF000000000000004
    && (static WeakAttribute.== infix(_:_:)() & 1) == 0)
  {
    return 0;
  }
  if (*(unsigned char *)(v1 + 120) != 5 && v36 != 5 && (static WeakAttribute.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  if (((*(unsigned __int8 *)(v1 + 176) | v7) & 1) == 0)
  {
    type metadata accessor for CGSize(0);
    if ((static WeakAttribute.== infix(_:_:)() & 1) == 0) {
      return 0;
    }
  }
  if (*(unsigned char *)(v1 + 177) == 1)
  {
    if (v8) {
      return 0;
    }
  }
  else
  {
    if (v9 != 0xF000000000000004)
    {
      uint64_t v20 = *(void *)(v1 + 8);
      uint64_t v21 = *(void *)v1;
      uint64_t v18 = *(void *)(v1 + 24);
      uint64_t v19 = *(void *)(v1 + 16);
      uint64_t v16 = *(void *)(v1 + 40);
      uint64_t v17 = *(void *)(v1 + 32);
      uint64_t v14 = *(void *)(v1 + 56);
      uint64_t v15 = *(void *)(v1 + 48);
      long long v12 = *(_OWORD *)(v1 + 80);
      long long v13 = *(_OWORD *)(v1 + 64);
      unint64_t v11 = *(void *)(v1 + 96);
      outlined copy of SystemScrollLayoutState.ContentOffsetMode(v22);
      outlined consume of SystemScrollLayoutState?(v21, v20, v19, v18, v17, v16, v15, v14, v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11);
      *(void *)uint64_t v1 = v2;
      *(void *)(v1 + 8) = v33;
      *(void *)(v1 + 16) = v32;
      *(void *)(v1 + 24) = v31;
      *(void *)(v1 + 32) = v30;
      *(void *)(v1 + 40) = v29;
      *(void *)(v1 + 48) = v28;
      *(void *)(v1 + 56) = v27;
      *(void *)(v1 + 64) = v26;
      *(void *)(v1 + 72) = v25;
      *(void *)(v1 + 80) = v24;
      *(void *)(v1 + 88) = v23;
      *(void *)(v1 + 96) = v22;
      *(void *)(v1 + 104) = v35;
      *(_DWORD *)(v1 + 112) = v3;
    }
    if (v36 != 5)
    {
      *(_OWORD *)(v1 + 120) = v36;
      *(void *)(v1 + 136) = v4;
      *(void *)(v1 + 144) = v5;
    }
    if ((v7 & 1) == 0)
    {
      *(_OWORD *)(v1 + 152) = v34;
      *(void *)(v1 + 168) = v6;
      *(unsigned char *)(v1 + 176) = 0;
    }
    *(unsigned char *)(v1 + 177) = v8;
  }
  return 1;
}

uint64_t implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost()
{
  return NavigationStateHost.init()();
}

uint64_t NavigationStateHost.init()()
{
  _s7SwiftUI15NavigationStateVSgWOi0_((uint64_t)v4);
  outlined init with take of NavigationState?((uint64_t)v4, v0 + 16);
  *(void *)(v0 + 168) = 0;
  type metadata accessor for NavigationSelectionHost(0);
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  ObservationRegistrar.init()();
  *(void *)(v0 + 176) = v1;
  type metadata accessor for NavigationSeedHost(0);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0;
  ObservationRegistrar.init()();
  *(void *)(v0 + 184) = v2;
  *(void *)(v0 + 192) = 0;
  *(unsigned char *)(v0 + 200) = 0;
  return v0;
}

uint64_t type metadata accessor for NavigationSelectionHost(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for NavigationSelectionHost);
}

double _s7SwiftUI15NavigationStateVSgWOi0_(uint64_t a1)
{
  *(_WORD *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t NavigationStateHost.createState(environment:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
  *(void *)(v1 + 168) = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease();
  v10[0] = v2;
  v10[1] = v3;
  v10[2] = 0;
  v10[3] = specialized Dictionary.init(dictionaryLiteral:)(v4);
  long long v11 = 0u;
  memset(v12, 0, sizeof(v12));
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 1;
  long long v16 = 0u;
  memset(v17, 0, sizeof(v17));
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v10, v5, v6, v7);
  swift_beginAccess();
  outlined init with take of NavigationState?(v1 + 16, (uint64_t)v18);
  outlined init with take of NavigationState?((uint64_t)v10, v1 + 16);
  swift_retain();
  swift_retain();
  outlined release of NavigationState?(v18);
  type metadata accessor for NavigationHostingControllerCache_UIKit();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v4);
  *(void *)(v8 + 24) = 0;
  *(void *)(v1 + 192) = v8;
  uint64_t result = swift_release();
  *(unsigned char *)(v1 + 200) = 1;
  return result;
}

uint64_t type metadata accessor for NavigationHostingControllerCache_UIKit()
{
  return self;
}

BOOL PresentationState.hasIdentityMatching(_:)(uint64_t a1)
{
  PresentationState.Base.lastPresentation.getter((uint64_t)v15);
  if (v15[0])
  {
    outlined init with copy of SheetPreference?((uint64_t)&v17, (uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
    outlined destroy of SheetPreference((uint64_t)v15);
  }
  else
  {
    _ss11AnyHashableVSgWOhTm_3((uint64_t)v15, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    memset(v21, 0, sizeof(v21));
    uint64_t v22 = 0;
  }
  outlined init with copy of SheetPreference?(a1, (uint64_t)v15, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
  if (v15[0])
  {
    outlined init with copy of SheetPreference?((uint64_t)&v17, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
    outlined destroy of SheetPreference((uint64_t)v15);
  }
  else
  {
    _ss11AnyHashableVSgWOhTm_3((uint64_t)v15, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    memset(v13, 0, sizeof(v13));
    uint64_t v14 = 0;
  }
  uint64_t v2 = MEMORY[0x1E4FBB960];
  outlined init with copy of SheetPreference?((uint64_t)v21, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
  outlined init with copy of SheetPreference?((uint64_t)v13, (uint64_t)&v18, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v2);
  if (!v16)
  {
    uint64_t v4 = MEMORY[0x1E4FBB960];
    _ss11AnyHashableVSgWOhTm_3((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
    _ss11AnyHashableVSgWOhTm_3((uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v4);
    if (!*((void *)&v19 + 1))
    {
      _ss11AnyHashableVSgWOhTm_3((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
      goto LABEL_13;
    }
LABEL_17:
    _s2os6LoggerVSgWOhTm_2((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for (AnyHashable?, AnyHashable?));
    return 0;
  }
  outlined init with copy of SheetPreference?((uint64_t)v15, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
  if (!*((void *)&v19 + 1))
  {
    uint64_t v7 = MEMORY[0x1E4FBB960];
    _ss11AnyHashableVSgWOhTm_3((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
    _ss11AnyHashableVSgWOhTm_3((uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v7);
    outlined destroy of AnyHashable((uint64_t)v12);
    goto LABEL_17;
  }
  v10[0] = v18;
  v10[1] = v19;
  uint64_t v11 = v20;
  char v3 = MEMORY[0x18C1174E0](v12, v10);
  outlined destroy of AnyHashable((uint64_t)v10);
  _ss11AnyHashableVSgWOhTm_3((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v2);
  _ss11AnyHashableVSgWOhTm_3((uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v2);
  outlined destroy of AnyHashable((uint64_t)v12);
  _ss11AnyHashableVSgWOhTm_3((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v2);
  if ((v3 & 1) == 0) {
    return 0;
  }
LABEL_13:
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0) {
    return 1;
  }
  PresentationState.Base.lastPresentation.getter((uint64_t)v15);
  uint64_t v5 = v15[0];
  if (v15[0])
  {
    uint64_t v6 = v16;
    outlined destroy of SheetPreference((uint64_t)v15);
  }
  else
  {
    _ss11AnyHashableVSgWOhTm_3((uint64_t)v15, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    uint64_t v6 = 0;
  }
  outlined init with copy of SheetPreference?(a1, (uint64_t)v15, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
  if (!v15[0])
  {
    _ss11AnyHashableVSgWOhTm_3((uint64_t)v15, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    return !v5;
  }
  uint64_t v9 = v16;
  outlined destroy of SheetPreference((uint64_t)v15);
  BOOL result = 0;
  if (v5 && v6 == v9) {
    return 1;
  }
  return result;
}

uint64_t outlined destroy of AnyHashable?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for AnyHashable?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _ss11AnyHashableVSgWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for Alert?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _ss11AnyHashableVSgWOhTm_1(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for EmptyCollection<Character>(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _ss11AnyHashableVSgWOhTm_2(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_1(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _ss11AnyHashableVSgWOhTm_3(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for Data?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined init with copy of SheetPreference?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for Data?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void _s10Foundation4DataVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

__n128 PresentationState.Base.lastPresentation.getter@<Q0>(uint64_t a1@<X8>)
{
  outlined init with copy of PresentationState.Base(v1, (uint64_t)v12);
  switch(v19)
  {
    case 2:
    case 3:
    case 5:

      __n128 v4 = *(__n128 *)&v12[56];
      long long v24 = *(_OWORD *)&v12[72];
      v25[0] = *(_OWORD *)&v12[88];
      *(_OWORD *)((char *)v25 + 9) = *(_OWORD *)&v12[97];
      long long v20 = *(_OWORD *)&v12[8];
      long long v21 = *(_OWORD *)&v12[24];
      long long v5 = *(_OWORD *)&v12[40];
      goto LABEL_6;
    case 4:
      long long v24 = *(_OWORD *)&v12[64];
      v25[0] = *(_OWORD *)&v12[80];
      *(_OWORD *)((char *)v25 + 9) = *(_OWORD *)&v12[89];
      long long v20 = *(_OWORD *)v12;
      long long v21 = *(_OWORD *)&v12[16];
      long long v5 = *(_OWORD *)&v12[32];
      __n128 v4 = *(__n128 *)&v12[48];
LABEL_6:
      long long v22 = v5;
      __n128 v23 = v4;
      goto LABEL_10;
    case 6:
    case 9:
      goto LABEL_4;
    case 7:
      outlined destroy of PresentationState.Base((uint64_t)v12);
      goto LABEL_8;
    case 8:

      long long v24 = v17;
      v25[0] = *(_OWORD *)v18;
      *(_OWORD *)((char *)v25 + 9) = *(_OWORD *)&v18[9];
      long long v20 = v13;
      long long v21 = v14;
      long long v22 = v15;
      __n128 v23 = v16;
      outlined destroy of SheetPreference((uint64_t)v12);
LABEL_10:
      long long v10 = v25[0];
      *(_OWORD *)(a1 + 64) = v24;
      *(_OWORD *)(a1 + 80) = v10;
      *(_OWORD *)(a1 + 89) = *(_OWORD *)((char *)v25 + 9);
      long long v11 = v21;
      *(_OWORD *)a1 = v20;
      *(_OWORD *)(a1 + 16) = v11;
      __n128 result = v23;
      *(_OWORD *)(a1 + 32) = v22;
      *(__n128 *)(a1 + 48) = result;
      break;
    case 10:
LABEL_8:
      result.n128_u64[0] = 0;
      *(_OWORD *)(a1 + 89) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      break;
    default:

LABEL_4:
      *(_OWORD *)((char *)v25 + 9) = *(_OWORD *)&v12[89];
      long long v24 = *(_OWORD *)&v12[64];
      v25[0] = *(_OWORD *)&v12[80];
      __n128 result = *(__n128 *)v12;
      long long v6 = *(_OWORD *)&v12[16];
      long long v20 = *(_OWORD *)v12;
      long long v21 = *(_OWORD *)&v12[16];
      long long v8 = *(_OWORD *)&v12[32];
      long long v7 = *(_OWORD *)&v12[48];
      long long v22 = *(_OWORD *)&v12[32];
      __n128 v23 = *(__n128 *)&v12[48];
      long long v9 = *(_OWORD *)&v12[80];
      *(_OWORD *)(a1 + 64) = *(_OWORD *)&v12[64];
      *(_OWORD *)(a1 + 80) = v9;
      *(_OWORD *)(a1 + 89) = *(_OWORD *)((char *)v25 + 9);
      *(__n128 *)a1 = result;
      *(_OWORD *)(a1 + 16) = v6;
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)(a1 + 48) = v7;
      break;
  }
  return result;
}

uint64_t View.alert(isPresented:content:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(void *__return_ptr, void *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  v23[0] = a1;
  v23[1] = a2;
  char v24 = a3;
  char v12 = a3 & 1;
  type metadata accessor for Alert?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  long long v13 = MEMORY[0x18C113DA0](v22);
  if (LOBYTE(v22[0]) == 1)
  {
    a4(v22, v13);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v22, v14, v15, v16);
  }
  else
  {
    _s7SwiftUI5AlertVSgWOi0_((uint64_t)v22);
  }
  outlined init with take of Alert?((uint64_t)v22, (uint64_t)v23, &lazy cache variable for type metadata for Alert?, (uint64_t)&type metadata for Alert);
  outlined init with take of Alert?((uint64_t)v23, (uint64_t)v21, &lazy cache variable for type metadata for Alert?, (uint64_t)&type metadata for Alert);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  *(unsigned char *)(v17 + 32) = v12;
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  swift_retain();
  swift_retain();
  View.presentationCommon(_:onDismiss:id:)((uint64_t)v21, (uint64_t)partial apply for closure #1 in View.actionSheet(isPresented:content:), v17, (uint64_t)v19, a6, a7);
  swift_release();
  _ss11AnyHashableVSgWOhTm_0((uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
  outlined init with take of Alert?((uint64_t)v21, (uint64_t)v22, &lazy cache variable for type metadata for Alert?, (uint64_t)&type metadata for Alert);
  return outlined release of Alert?((uint64_t)v22, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of Alert?);
}

uint64_t outlined init with take of Alert?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for Alert?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void type metadata accessor for Alert?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t partial apply for specialized closure #1 in AlertTransformModifier.Transform.updateValue()(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void, double, double, double, double))(v1 + 32))(a1, *(unsigned int *)(v1 + 48), *(double *)(v1 + 56), *(double *)(v1 + 64), *(double *)(v1 + 72), *(double *)(v1 + 80));
}

uint64_t partial apply for closure #1 in View.presentationCommon(_:onDismiss:id:)(uint64_t a1, int a2, double a3, double a4, double a5, double a6)
{
  return closure #1 in View.presentationCommon(_:onDismiss:id:)(a1, a2, v6 + 16, *(void *)(v6 + 200), *(void *)(v6 + 208), v6 + 216, a3, a4, a5, a6);
}

{
  uint64_t v6;

  return closure #1 in View.presentationCommon(_:onDismiss:id:)(a1, a2, v6 + 16, *(void *)(v6 + 88), *(void *)(v6 + 96), v6 + 104, a3, a4, a5, a6);
}

uint64_t closure #1 in View.presentationCommon(_:onDismiss:id:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  _ss11AnyHashableVSgWOhTm_0(a1, &lazy cache variable for type metadata for Alert.Presentation?, (uint64_t)&type metadata for Alert.Presentation);
  outlined init with take of Alert?(a3, (uint64_t)v26, &lazy cache variable for type metadata for Alert?, (uint64_t)&type metadata for Alert);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v26) == 1)
  {
    *(void *)(a1 + 272) = 0;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    long long v36 = v26[8];
    long long v37 = v26[9];
    long long v38 = v26[10];
    char v39 = v27;
    long long v32 = v26[4];
    long long v33 = v26[5];
    long long v34 = v26[6];
    long long v35 = v26[7];
    long long v28 = v26[0];
    long long v29 = v26[1];
    long long v30 = v26[2];
    long long v31 = v26[3];
    outlined init with copy of AnyHashable?(a6, a1 + 208);
    long long v20 = v37;
    *(_OWORD *)(a1 + 128) = v36;
    *(_OWORD *)(a1 + 144) = v20;
    *(_OWORD *)(a1 + 160) = v38;
    *(unsigned char *)(a1 + 176) = v39;
    long long v21 = v33;
    *(_OWORD *)(a1 + 64) = v32;
    *(_OWORD *)(a1 + 80) = v21;
    long long v22 = v35;
    *(_OWORD *)(a1 + 96) = v34;
    *(_OWORD *)(a1 + 112) = v22;
    long long v23 = v29;
    *(_OWORD *)a1 = v28;
    *(_OWORD *)(a1 + 16) = v23;
    long long v24 = v31;
    *(_OWORD *)(a1 + 32) = v30;
    *(_OWORD *)(a1 + 48) = v24;
    *(void *)(a1 + 184) = a4;
    *(void *)(a1 + 192) = a5;
    *(_DWORD *)(a1 + 200) = a2;
    *(double *)(a1 + 248) = a7;
    *(double *)(a1 + 256) = a8;
    *(double *)(a1 + 264) = a9;
    *(double *)(a1 + 272) = a10;
    outlined copy of AppIntentExecutor?(a4);
  }
  return outlined release of Alert?(a3, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of Alert?);
}

{
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;
  long long v29;
  long long v30;
  _OWORD v31[2];
  uint64_t v32;
  long long v33;
  long long v34;
  uint64_t v35;
  unsigned char v36[24];
  uint64_t v37[4];
  uint64_t v38;

  outlined destroy of AnyHashable?(a1, &lazy cache variable for type metadata for ActionSheet.Presentation?, (uint64_t)&type metadata for ActionSheet.Presentation);
  __n128 result = outlined init with take of ActionSheet.Presentation?(a3, (uint64_t)&v24, &lazy cache variable for type metadata for ActionSheet?, (uint64_t)&type metadata for ActionSheet);
  if (*((void *)&v25 + 1))
  {
    v31[0] = v26;
    v31[1] = v27;
    long long v32 = v28;
    long long v29 = v24;
    long long v30 = v25;
    long long v33 = v24;
    long long v34 = v25;
    outlined init with take of Text.Storage((uint64_t)&v33, (uint64_t)v36);
    long long v35 = *((void *)&v34 + 1);
    long long v21 = MEMORY[0x1E4F41420];
    outlined init with take of ActionSheet.Presentation?((uint64_t)v31, (uint64_t)v37, &lazy cache variable for type metadata for Text?, MEMORY[0x1E4F41420]);
    long long v22 = v32;
    long long v38 = v32;
    outlined init with copy of AnyHashable?(a6, a1 + 96);
    long long v23 = v34;
    *(_OWORD *)a1 = v33;
    *(_OWORD *)(a1 + 16) = v23;
    outlined init with take of ActionSheet.Presentation?((uint64_t)v37, a1 + 32, &lazy cache variable for type metadata for Text?, v21);
    *(void *)(a1 + 64) = v22;
    *(void *)(a1 + 72) = a4;
    *(void *)(a1 + 80) = a5;
    *(_DWORD *)(a1 + 88) = a2;
    *(double *)(a1 + 136) = a7;
    *(double *)(a1 + 144) = a8;
    *(double *)(a1 + 152) = a9;
    *(double *)(a1 + 160) = a10;
    outlined retain of Text.Storage((uint64_t)v36);
    outlined retain of [Text.Modifier]((uint64_t)&v35);
    outlined retain of Text?(v37);
    outlined retain of [Text.Modifier]((uint64_t)&v38);
    return outlined copy of AppIntentExecutor?(a4);
  }
  else
  {
    *(void *)(a1 + 160) = 0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t outlined release of Alert?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 176);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    v4);
  return a1;
}

void outlined copy of Alert?(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21)
{
  if (a4)
  {
    outlined copy of Text.Storage(a1, a2, a3 & 1);
    swift_bridgeObjectRetain();
    outlined copy of Text?(a5, a6, a7, a8);
    outlined copy of Text.Storage(a10, a11, a12 & 1);
    swift_bridgeObjectRetain();
    outlined copy of AppIntentExecutor?(a14);
    outlined copy of Alert.Button?(a16, a17, a18, a19, a20, a21);
  }
}

double _s7SwiftUI5AlertVSgWOi0_(uint64_t a1)
{
  *(unsigned char *)(a1 + 176) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void outlined consume of Alert?(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21)
{
  if (a4)
  {
    outlined consume of Text.Storage(a1, a2, a3 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text?(a5, a6, a7, a8);
    outlined consume of Text.Storage(a10, a11, a12 & 1);
    swift_bridgeObjectRelease();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a14);
    outlined consume of Alert.Button?(a16, a17, a18, a19, a20, a21);
  }
}

uint64_t View.presentationCommon(_:onDismiss:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  outlined init with take of Alert?(a1, (uint64_t)v15, &lazy cache variable for type metadata for Alert?, (uint64_t)&type metadata for Alert);
  outlined init with copy of AnyHashable?(a4, (uint64_t)v14);
  uint64_t v11 = swift_allocObject();
  outlined init with take of Alert?((uint64_t)v15, v11 + 16, &lazy cache variable for type metadata for Alert?, (uint64_t)&type metadata for Alert);
  *(void *)(v11 + 200) = a2;
  *(void *)(v11 + 208) = a3;
  outlined init with take of Alert?((uint64_t)v14, v11 + 216, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
  v14[0] = partial apply for closure #1 in View.presentationCommon(_:onDismiss:id:);
  v14[1] = v11;
  outlined release of Alert?((uint64_t)v15, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of Alert?);
  outlined copy of AppIntentExecutor?(a2);
  type metadata accessor for AlertTransformModifier<Alert.Presentation.Key>();
  MEMORY[0x18C113660](v14, a5, v12, a6);
  return swift_release();
}

{
  uint64_t v11;
  uint64_t v12;
  void v14[5];
  uint64_t v15[9];

  outlined init with take of ActionSheet.Presentation?(a1, (uint64_t)v15, &lazy cache variable for type metadata for ActionSheet?, (uint64_t)&type metadata for ActionSheet);
  outlined init with copy of AnyHashable?(a4, (uint64_t)v14);
  uint64_t v11 = swift_allocObject();
  outlined init with take of ActionSheet.Presentation?((uint64_t)v15, v11 + 16, &lazy cache variable for type metadata for ActionSheet?, (uint64_t)&type metadata for ActionSheet);
  *(void *)(v11 + 88) = a2;
  *(void *)(v11 + 96) = a3;
  outlined init with take of ActionSheet.Presentation?((uint64_t)v14, v11 + 104, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
  v14[0] = partial apply for closure #1 in View.presentationCommon(_:onDismiss:id:);
  v14[1] = v11;
  outlined retain of ActionSheet?(v15);
  outlined copy of AppIntentExecutor?(a2);
  type metadata accessor for AlertTransformModifier<ActionSheet.Presentation.Key>();
  MEMORY[0x18C113660](v14, a5, v12, a6);
  return swift_release();
}

uint64_t outlined init with copy of AnyHashable?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyHashable?(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AlertTransformModifier<Alert.Presentation.Key>()
{
  if (!lazy cache variable for type metadata for AlertTransformModifier<Alert.Presentation.Key>)
  {
    unint64_t v0 = type metadata accessor for AlertTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AlertTransformModifier<Alert.Presentation.Key>);
    }
  }
}

uint64_t NavigationAuthority.flushRequestQueue()()
{
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v2 = result + 16;
  swift_beginAccess();
  outlined init with take of NavigationState?(v2, (uint64_t)v38);
  outlined init with take of NavigationState?((uint64_t)v38, (uint64_t)v39);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v39) == 1) {
    goto LABEL_21;
  }
  uint64_t v3 = v40;
  uint64_t v4 = *(void *)(v1 + 176);
  swift_getKeyPath();
  v28[0] = (char *)v4;
  _s7SwiftUI23NavigationSelectionHostCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type NavigationSelectionHost and conformance NavigationSelectionHost, (void (*)(uint64_t))type metadata accessor for NavigationSelectionHost);
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  if (!*(void *)(v1 + 168))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v28[0] = *(char **)(v1 + 168);
  swift_bridgeObjectRetain_n();
  specialized MutableCollection<>.sort(by:)(v28);
  swift_bridgeObjectRelease();
  if (!*(void *)(v1 + 168))
  {
LABEL_23:
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  uint64_t v6 = v28[0];
  *(void *)(v1 + 168) = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease();
  uint64_t v7 = *((void *)v6 + 2);
  if (v7)
  {
    uint64_t v24 = v5;
    long long v8 = *((_OWORD *)v6 + 8);
    long long v34 = *((_OWORD *)v6 + 7);
    long long v35 = v8;
    long long v36 = *((_OWORD *)v6 + 9);
    uint64_t v37 = *((void *)v6 + 20);
    long long v9 = *((_OWORD *)v6 + 3);
    long long v10 = *((_OWORD *)v6 + 5);
    long long v11 = *((_OWORD *)v6 + 6);
    long long v31 = *((_OWORD *)v6 + 4);
    long long v32 = v10;
    long long v33 = v11;
    long long v29 = *((_OWORD *)v6 + 2);
    long long v30 = v9;
    uint64_t v12 = v7 - 1;
    for (uint64_t i = 168; ; i += 136)
    {
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        uint64_t v15 = Strong;
        v25[6] = v35;
        v25[7] = v36;
        uint64_t v26 = v37;
        _OWORD v25[2] = v31;
        v25[3] = v32;
        _OWORD v25[4] = v33;
        v25[5] = v34;
        v25[0] = v29;
        v25[1] = v30;
        if (!*(void *)(Strong + 192))
        {
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
        swift_beginAccess();
        outlined init with take of NavigationState?(v15 + 16, (uint64_t)v27);
        outlined init with take of NavigationState?((uint64_t)v27, (uint64_t)v28);
        if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v28) == 1) {
          goto LABEL_20;
        }
        outlined retain of NavigationRequest((uint64_t)&v29);
        swift_retain();
        NavigationState.update(for:controllerCache:)((uint64_t)v25);
        swift_endAccess();
        swift_release();
        swift_release();
        outlined release of NavigationRequest((uint64_t)&v29);
      }
      if (!v12)
      {
        swift_release();
        uint64_t v5 = v24;
        goto LABEL_15;
      }
      long long v29 = *(_OWORD *)&v6[i];
      long long v16 = *(_OWORD *)&v6[i + 16];
      long long v17 = *(_OWORD *)&v6[i + 32];
      long long v18 = *(_OWORD *)&v6[i + 64];
      long long v32 = *(_OWORD *)&v6[i + 48];
      long long v33 = v18;
      long long v30 = v16;
      long long v31 = v17;
      long long v19 = *(_OWORD *)&v6[i + 80];
      long long v20 = *(_OWORD *)&v6[i + 96];
      long long v21 = *(_OWORD *)&v6[i + 112];
      uint64_t v37 = *(void *)&v6[i + 128];
      long long v35 = v20;
      long long v36 = v21;
      long long v34 = v19;
      --v12;
    }
  }
  swift_release();
LABEL_15:
  long long v22 = NavigationStateHost.navigationState.modify();
  outlined init with take of NavigationState?(v23, (uint64_t)v27);
  outlined init with take of NavigationState?((uint64_t)v27, (uint64_t)v28);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v28) != 1) {
    NavigationState.finalizeFlush()();
  }
  ((void (*)(long long *, void))v22)(&v29, 0);
  $defer #1 () in NavigationAuthority.flushRequestQueue()(v1, v3, v5);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t getEnumTag for AccessibilityActionCategory.Category(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t outlined init with take of NavigationState?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NavigationState?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for NavigationState?()
{
  if (!lazy cache variable for type metadata for NavigationState?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NavigationState?);
    }
  }
}

uint64_t outlined release of NavigationRequest(uint64_t a1)
{
  return a1;
}

Swift::Int specialized MutableCollection<>.sort(by:)(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  }
  uint64_t v3 = (uint64_t *)*((void *)v2 + 2);
  v5[0] = (uint64_t *)(v2 + 32);
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  char *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  char *v2;
  uint64_t v3;
  Swift::Int result;
  void v5[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  char *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  char *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t **a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = (Swift::Int)a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_310;
    }
    if ((unint64_t)v3 >= 2)
    {
      v138 = *v2;
      uint64_t v139 = -1;
      uint64_t v140 = 1;
      long long v141 = *v2;
LABEL_217:
      uint64_t v142 = v139;
      uint64_t v143 = v141;
      while (2)
      {
        uint64_t v144 = (long long *)(v143 + 17);
        uint64_t v145 = v143[17];
        uint64_t v146 = *v143;
        uint64_t v147 = v143[1];
        uint64_t v148 = v143[2];
        Swift::Int result = v143[3];
        uint64_t v149 = v143[7];
        unsigned int v150 = *((unsigned __int8 *)v143 + 64);
        unint64_t v151 = 5;
        switch(*((unsigned char *)v143 + 200))
        {
          case 0:
            goto LABEL_243;
          case 1:
          case 2:
          case 4:
            unint64_t v151 = 20;
            if (v150 > 0x16) {
              goto LABEL_268;
            }
            goto LABEL_243;
          case 3:
          case 5:
            unint64_t v151 = 15;
            if (v150 > 0x16) {
              goto LABEL_268;
            }
            goto LABEL_243;
          case 6:
          case 7:
            unint64_t v151 = 30;
            if (v150 > 0x16) {
              goto LABEL_268;
            }
            goto LABEL_243;
          case 8:
            unint64_t v151 = 25;
            goto LABEL_243;
          case 9:
            unint64_t v151 = 60;
            if (v150 > 0x16) {
              goto LABEL_268;
            }
            goto LABEL_243;
          case 0xA:
          case 0xD:
          case 0x11:
            unint64_t v151 = 40;
            if (v150 > 0x16) {
              goto LABEL_268;
            }
            goto LABEL_243;
          case 0xE:
          case 0x15:
            unint64_t v151 = 80;
            if (v150 > 0x16) {
              goto LABEL_268;
            }
            goto LABEL_243;
          case 0x12:
          case 0x13:
            unint64_t v151 = 50;
            if (v150 > 0x16) {
              goto LABEL_268;
            }
            goto LABEL_243;
          case 0x14:
            unint64_t v151 = 70;
            if (v150 > 0x16) {
              goto LABEL_268;
            }
            goto LABEL_243;
          case 0x16:
            uint64_t v152 = v143[22];
            uint64_t v153 = v143[18];
            uint64_t v154 = v143[23] | v143[24];
            uint64_t v155 = v143[21] | v143[20] | v143[19];
            if (v154 | v145 | v152 | v155 | v153)
            {
              if (v145 != 1 || v154 | v152 | v155 | v153)
              {
LABEL_236:
                unint64_t v151 = 0x7FFFFFFFFFFFFFFFLL;
                if (v150 <= 0x16) {
                  goto LABEL_243;
                }
              }
              else
              {
                unint64_t v151 = 6;
                if (v150 <= 0x16) {
                  goto LABEL_243;
                }
              }
            }
            else
            {
              unint64_t v151 = 0;
              if (v150 <= 0x16)
              {
LABEL_243:
                unint64_t v156 = 5;
                switch(*((unsigned char *)v143 + 64))
                {
                  case 0:
                    goto LABEL_269;
                  case 1:
                  case 2:
                  case 4:
                    if (v151 >= 0x14) {
                      goto LABEL_216;
                    }
                    goto LABEL_270;
                  case 3:
                  case 5:
                    if (v151 >= 0xF) {
                      goto LABEL_216;
                    }
                    goto LABEL_270;
                  case 6:
                  case 7:
                    if (v151 >= 0x1E) {
                      goto LABEL_216;
                    }
                    goto LABEL_270;
                  case 8:
                    if (v151 >= 0x19) {
                      goto LABEL_216;
                    }
                    goto LABEL_270;
                  case 9:
                    if (v151 >= 0x3C) {
                      goto LABEL_216;
                    }
                    goto LABEL_270;
                  case 0xA:
                  case 0xD:
                  case 0x11:
                    if (v151 >= 0x28) {
                      goto LABEL_216;
                    }
                    goto LABEL_270;
                  case 0xE:
                  case 0x15:
                    if (v151 >= 0x50) {
                      goto LABEL_216;
                    }
                    goto LABEL_270;
                  case 0x12:
                  case 0x13:
                    if (v151 >= 0x32) {
                      goto LABEL_216;
                    }
                    goto LABEL_270;
                  case 0x14:
                    if (v151 >= 0x46) {
                      goto LABEL_216;
                    }
                    goto LABEL_270;
                  case 0x16:
                    uint64_t v157 = v143[4] | v143[5] | v143[6];
                    if (!(v148 | v147 | v146 | result | v157 | v149)) {
                      goto LABEL_216;
                    }
                    if (v146 != 1 || v148 | v147 | result | v157 | v149) {
                      break;
                    }
                    if (v151 >= 6) {
                      goto LABEL_216;
                    }
                    goto LABEL_270;
                  default:
                    break;
                }
              }
            }
LABEL_268:
            unint64_t v156 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_269:
            if (v151 >= v156) {
              goto LABEL_216;
            }
LABEL_270:
            if (!v138) {
              goto LABEL_314;
            }
            long long v201 = *(_OWORD *)(v143 + 29);
            long long v204 = *(_OWORD *)(v143 + 31);
            long long v189 = *(_OWORD *)(v143 + 21);
            long long v192 = *(_OWORD *)(v143 + 23);
            long long v195 = *(_OWORD *)(v143 + 25);
            long long v198 = *(_OWORD *)(v143 + 27);
            long long v183 = *v144;
            long long v186 = *(_OWORD *)(v143 + 19);
            long long v158 = *((_OWORD *)v143 + 5);
            *(_OWORD *)(v143 + 25) = *((_OWORD *)v143 + 4);
            *(_OWORD *)(v143 + 27) = v158;
            long long v159 = *((_OWORD *)v143 + 7);
            *(_OWORD *)(v143 + 29) = *((_OWORD *)v143 + 6);
            *(_OWORD *)(v143 + 31) = v159;
            long long v160 = *((_OWORD *)v143 + 3);
            *(_OWORD *)(v143 + 21) = *((_OWORD *)v143 + 2);
            *(_OWORD *)(v143 + 23) = v160;
            long long v162 = *(_OWORD *)v143;
            long long v161 = *((_OWORD *)v143 + 1);
            *((_OWORD *)v143 + 4) = v195;
            *((_OWORD *)v143 + 5) = v198;
            *((_OWORD *)v143 + 6) = v201;
            *((_OWORD *)v143 + 7) = v204;
            *((_OWORD *)v143 + 2) = v189;
            *((_OWORD *)v143 + 3) = v192;
            *(_OWORD *)uint64_t v143 = v183;
            *((_OWORD *)v143 + 1) = v186;
            uint64_t v163 = v143[16];
            v143[16] = v143[33];
            v143 -= 17;
            *((void *)v144 + 16) = v163;
            *uint64_t v144 = v162;
            v144[1] = v161;
            if (!__CFADD__(v142++, 1)) {
              continue;
            }
LABEL_216:
            ++v140;
            v141 += 17;
            --v139;
            if (v140 != v3) {
              goto LABEL_217;
            }
            return result;
          default:
            goto LABEL_236;
        }
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_319;
  }
  Swift::Int v177 = result;
  Swift::Int v178 = v3;
  uint64_t v206 = v1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
    uint64_t v179 = (char *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      long long v11 = (char *)MEMORY[0x1E4FBC860];
LABEL_276:
      uint64_t v176 = v8;
      if (v13 >= 2)
      {
        v165 = *v2;
        do
        {
          unint64_t v166 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_305;
          }
          if (!v165) {
            goto LABEL_318;
          }
          uint64_t v167 = v11;
          uint64_t v168 = v11 + 32;
          uint64_t v169 = *(void *)&v11[16 * v166 + 32];
          uint64_t v170 = *(void *)&v168[16 * v13 - 8];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)&v165[17 * v169], (char *)&v165[17 * *(void *)&v168[16 * v13 - 16]], (unint64_t)&v165[17 * v170], v179);
          if (v206) {
            break;
          }
          if (v170 < v169) {
            goto LABEL_306;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v167 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v167);
          }
          if (v166 >= *((void *)v167 + 2)) {
            goto LABEL_307;
          }
          id v171 = &v167[16 * v166 + 32];
          *(void *)id v171 = v169;
          *((void *)v171 + 1) = v170;
          unint64_t v172 = *((void *)v167 + 2);
          if (v13 > v172) {
            goto LABEL_308;
          }
          long long v11 = v167;
          memmove(&v167[16 * v13 + 16], &v167[16 * v13 + 32], 16 * (v172 - v13));
          *((void *)v167 + 2) = v172 - 1;
          unint64_t v13 = v172 - 1;
        }
        while (v172 > 2);
      }
LABEL_287:
      swift_bridgeObjectRelease();
      *(void *)(v176 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v176 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v176 = v7;
    uint64_t v179 = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  long long v10 = *v2;
  uint64_t v175 = (uint64_t)(*v2 + 21);
  uint64_t v173 = v2;
  uint64_t v174 = (uint64_t)(*v2 - 17);
  long long v11 = (char *)MEMORY[0x1E4FBC860];
  Swift::Int v12 = v3;
  uint64_t v180 = *v2;
  while (1)
  {
    Swift::Int v14 = v9++;
    if (v9 < v12)
    {
      uint64_t v15 = &v10[17 * v9];
      uint64_t v16 = *v15;
      unsigned __int8 v17 = *((unsigned char *)v15 + 64);
      long long v18 = &v10[17 * v14];
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      uint64_t v21 = v18[2];
      uint64_t v22 = v18[3];
      uint64_t v23 = v18[4];
      uint64_t v24 = v18[5];
      uint64_t v25 = v18[6];
      uint64_t v26 = v18[7];
      int v27 = *((unsigned __int8 *)v18 + 64);
      unint64_t v28 = 5;
      switch(v17)
      {
        case 0u:
          break;
        case 1u:
        case 2u:
        case 4u:
          unint64_t v28 = 20;
          break;
        case 3u:
        case 5u:
          unint64_t v28 = 15;
          break;
        case 6u:
        case 7u:
          unint64_t v28 = 30;
          break;
        case 8u:
          unint64_t v28 = 25;
          break;
        case 9u:
          unint64_t v28 = 60;
          break;
        case 0xAu:
        case 0xDu:
        case 0x11u:
          unint64_t v28 = 40;
          break;
        case 0xEu:
        case 0x15u:
          unint64_t v28 = 80;
          break;
        case 0x12u:
        case 0x13u:
          unint64_t v28 = 50;
          break;
        case 0x14u:
          unint64_t v28 = 70;
          break;
        case 0x16u:
          uint64_t v30 = v15[6];
          uint64_t v29 = v15[7];
          uint64_t v31 = v15[4];
          uint64_t v32 = v15[5];
          uint64_t v34 = v15[2];
          uint64_t v33 = v15[3];
          uint64_t v35 = v15[1];
          uint64_t v36 = v30 | v29;
          uint64_t v37 = v31 | v33 | v34;
          if (v36 | v16 | v32 | v37 | v35)
          {
            uint64_t v38 = v36 | v32 | v37 | v35;
            if (v16 != 1 || v38 != 0) {
              goto LABEL_29;
            }
            unint64_t v28 = 6;
          }
          else
          {
            unint64_t v28 = 0;
          }
          break;
        default:
LABEL_29:
          unint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
          break;
      }
      unint64_t v40 = 5;
      switch(v27)
      {
        case 0:
          break;
        case 1:
        case 2:
        case 4:
          unint64_t v40 = 20;
          break;
        case 3:
        case 5:
          unint64_t v40 = 15;
          break;
        case 6:
        case 7:
          unint64_t v40 = 30;
          break;
        case 8:
          unint64_t v40 = 25;
          break;
        case 9:
          unint64_t v40 = 60;
          break;
        case 10:
        case 13:
        case 17:
          unint64_t v40 = 40;
          break;
        case 14:
        case 21:
          unint64_t v40 = 80;
          break;
        case 18:
        case 19:
          unint64_t v40 = 50;
          break;
        case 20:
          unint64_t v40 = 70;
          break;
        case 22:
          uint64_t v41 = v23 | v24 | v25;
          if (v21 | v20 | v19 | v22 | v41 | v26)
          {
            if (v19 != 1 || (v21 | v20 | v22 | v41 | v26) != 0) {
              goto LABEL_47;
            }
            unint64_t v40 = 6;
          }
          else
          {
            unint64_t v40 = 0;
          }
          break;
        default:
LABEL_47:
          unint64_t v40 = 0x7FFFFFFFFFFFFFFFLL;
          break;
      }
      Swift::Int v9 = v14 + 2;
      if (v14 + 2 < v12)
      {
        uint64_t v43 = v175 + 136 * v14;
        unsigned __int8 v44 = v17;
        while (1)
        {
          uint64_t v45 = *(void *)(v43 + 104);
          unsigned __int8 v46 = *(unsigned char *)(v43 + 168);
          uint64_t v47 = *(void *)(v43 - 24);
          uint64_t v48 = *(void *)(v43 - 16);
          uint64_t v49 = *(void *)(v43 - 8);
          uint64_t v50 = *(void *)(v43 + 24);
          unint64_t v51 = 5;
          switch(v46)
          {
            case 0u:
              break;
            case 1u:
            case 2u:
            case 4u:
              unint64_t v51 = 20;
              break;
            case 3u:
            case 5u:
              unint64_t v51 = 15;
              break;
            case 6u:
            case 7u:
              unint64_t v51 = 30;
              break;
            case 8u:
              unint64_t v51 = 25;
              break;
            case 9u:
              unint64_t v51 = 60;
              break;
            case 0xAu:
            case 0xDu:
            case 0x11u:
              unint64_t v51 = 40;
              break;
            case 0xEu:
            case 0x15u:
              unint64_t v51 = 80;
              break;
            case 0x12u:
            case 0x13u:
              unint64_t v51 = 50;
              break;
            case 0x14u:
              unint64_t v51 = 70;
              break;
            case 0x16u:
              uint64_t v52 = *(void *)(v43 + 144);
              uint64_t v53 = *(void *)(v43 + 112);
              uint64_t v54 = *(void *)(v43 + 152) | *(void *)(v43 + 160);
              uint64_t v55 = *(void *)(v43 + 136) | *(void *)(v43 + 128) | *(void *)(v43 + 120);
              if (v54 | v45 | v52 | v55 | v53)
              {
                if (v45 != 1 || v54 | v52 | v55 | v53) {
                  goto LABEL_66;
                }
                unint64_t v51 = 6;
              }
              else
              {
                unint64_t v51 = 0;
              }
              break;
            default:
LABEL_66:
              unint64_t v51 = 0x7FFFFFFFFFFFFFFFLL;
              break;
          }
          int v56 = v44;
          unint64_t v57 = 5;
          switch(v56)
          {
            case 0:
              break;
            case 1:
            case 2:
            case 4:
              unint64_t v57 = 20;
              break;
            case 3:
            case 5:
              unint64_t v57 = 15;
              break;
            case 6:
            case 7:
              unint64_t v57 = 30;
              break;
            case 8:
              unint64_t v57 = 25;
              break;
            case 9:
              unint64_t v57 = 60;
              break;
            case 10:
            case 13:
            case 17:
              unint64_t v57 = 40;
              break;
            case 14:
            case 21:
              unint64_t v57 = 80;
              break;
            case 18:
            case 19:
              unint64_t v57 = 50;
              break;
            case 20:
              unint64_t v57 = 70;
              break;
            case 22:
              uint64_t v58 = *(void *)v43 | *(void *)(v43 + 8) | *(void *)(v43 + 16);
              if (v48 | v47 | v16 | v49 | v58 | v50)
              {
                if (v16 != 1 || v48 | v47 | v49 | v58 | v50) {
                  goto LABEL_82;
                }
                unint64_t v57 = 6;
              }
              else
              {
                unint64_t v57 = 0;
              }
              break;
            default:
LABEL_82:
              unint64_t v57 = 0x7FFFFFFFFFFFFFFFLL;
              break;
          }
          if (v28 < v40 == v51 >= v57) {
            break;
          }
          v43 += 136;
          ++v9;
          unsigned __int8 v44 = v46;
          uint64_t v16 = v45;
          if (v12 == v9)
          {
            Swift::Int v9 = v12;
            break;
          }
        }
      }
      if (v28 < v40)
      {
        if (v9 < v14) {
          goto LABEL_311;
        }
        if (v14 < v9)
        {
          uint64_t v59 = (_OWORD *)(v174 + 136 * v9);
          Swift::Int v60 = v9;
          Swift::Int v61 = v14;
          BOOL v62 = &v10[17 * v14];
          do
          {
            if (v61 != --v60)
            {
              if (!v10) {
                goto LABEL_317;
              }
              long long v199 = *((_OWORD *)v62 + 6);
              long long v202 = *((_OWORD *)v62 + 7);
              uint64_t v205 = v62[16];
              long long v187 = *((_OWORD *)v62 + 2);
              long long v190 = *((_OWORD *)v62 + 3);
              long long v193 = *((_OWORD *)v62 + 4);
              long long v196 = *((_OWORD *)v62 + 5);
              long long v181 = *(_OWORD *)v62;
              long long v184 = *((_OWORD *)v62 + 1);
              memmove(v62, v59, 0x88uLL);
              v59[6] = v199;
              v59[7] = v202;
              *((void *)v59 + 16) = v205;
              v59[2] = v187;
              v59[3] = v190;
              v59[4] = v193;
              v59[5] = v196;
              _OWORD *v59 = v181;
              v59[1] = v184;
              long long v10 = v180;
            }
            ++v61;
            uint64_t v59 = (_OWORD *)((char *)v59 - 136);
            v62 += 17;
          }
          while (v61 < v60);
          Swift::Int v12 = v178;
        }
      }
    }
    if (v9 >= v12) {
      goto LABEL_168;
    }
    if (__OFSUB__(v9, v14)) {
      goto LABEL_309;
    }
    if (v9 - v14 >= v177) {
      goto LABEL_168;
    }
    if (__OFADD__(v14, v177)) {
      goto LABEL_312;
    }
    Swift::Int v63 = v14 + v177 >= v12 ? v12 : v14 + v177;
    if (v63 < v14) {
      break;
    }
    if (v9 != v63)
    {
      uint64_t v64 = v174 + 136 * v9;
LABEL_110:
      Swift::Int v65 = v14;
      uint64_t v66 = v64;
      while (2)
      {
        uint64_t v68 = (long long *)(v66 + 136);
        uint64_t v67 = *(void *)(v66 + 136);
        uint64_t v70 = *(void *)v66;
        uint64_t v69 = *(void *)(v66 + 8);
        uint64_t v71 = *(void *)(v66 + 16);
        uint64_t v72 = *(void *)(v66 + 24);
        uint64_t v73 = *(void *)(v66 + 56);
        unsigned int v74 = *(unsigned __int8 *)(v66 + 64);
        unint64_t v75 = 5;
        switch(*(unsigned char *)(v66 + 200))
        {
          case 0:
            goto LABEL_136;
          case 1:
          case 2:
          case 4:
            unint64_t v75 = 20;
            if (v74 > 0x16) {
              goto LABEL_161;
            }
            goto LABEL_136;
          case 3:
          case 5:
            unint64_t v75 = 15;
            if (v74 > 0x16) {
              goto LABEL_161;
            }
            goto LABEL_136;
          case 6:
          case 7:
            unint64_t v75 = 30;
            if (v74 > 0x16) {
              goto LABEL_161;
            }
            goto LABEL_136;
          case 8:
            unint64_t v75 = 25;
            goto LABEL_136;
          case 9:
            unint64_t v75 = 60;
            if (v74 > 0x16) {
              goto LABEL_161;
            }
            goto LABEL_136;
          case 0xA:
          case 0xD:
          case 0x11:
            unint64_t v75 = 40;
            if (v74 > 0x16) {
              goto LABEL_161;
            }
            goto LABEL_136;
          case 0xE:
          case 0x15:
            unint64_t v75 = 80;
            if (v74 > 0x16) {
              goto LABEL_161;
            }
            goto LABEL_136;
          case 0x12:
          case 0x13:
            unint64_t v75 = 50;
            if (v74 > 0x16) {
              goto LABEL_161;
            }
            goto LABEL_136;
          case 0x14:
            unint64_t v75 = 70;
            if (v74 > 0x16) {
              goto LABEL_161;
            }
            goto LABEL_136;
          case 0x16:
            uint64_t v76 = *(void *)(v66 + 176);
            uint64_t v77 = *(void *)(v66 + 144);
            uint64_t v78 = *(void *)(v66 + 184) | *(void *)(v66 + 192);
            uint64_t v79 = *(void *)(v66 + 168) | *(void *)(v66 + 160) | *(void *)(v66 + 152);
            if (v78 | v67 | v76 | v79 | v77)
            {
              if (v67 != 1 || v78 | v76 | v79 | v77)
              {
LABEL_129:
                unint64_t v75 = 0x7FFFFFFFFFFFFFFFLL;
                if (v74 <= 0x16) {
                  goto LABEL_136;
                }
              }
              else
              {
                unint64_t v75 = 6;
                if (v74 <= 0x16) {
                  goto LABEL_136;
                }
              }
            }
            else
            {
              unint64_t v75 = 0;
              if (v74 <= 0x16)
              {
LABEL_136:
                unint64_t v80 = 5;
                switch(*(unsigned char *)(v66 + 64))
                {
                  case 0:
                    goto LABEL_162;
                  case 1:
                  case 2:
                  case 4:
                    if (v75 >= 0x14) {
                      goto LABEL_109;
                    }
                    goto LABEL_163;
                  case 3:
                  case 5:
                    if (v75 >= 0xF) {
                      goto LABEL_109;
                    }
                    goto LABEL_163;
                  case 6:
                  case 7:
                    if (v75 >= 0x1E) {
                      goto LABEL_109;
                    }
                    goto LABEL_163;
                  case 8:
                    if (v75 >= 0x19) {
                      goto LABEL_109;
                    }
                    goto LABEL_163;
                  case 9:
                    if (v75 >= 0x3C) {
                      goto LABEL_109;
                    }
                    goto LABEL_163;
                  case 0xA:
                  case 0xD:
                  case 0x11:
                    if (v75 >= 0x28) {
                      goto LABEL_109;
                    }
                    goto LABEL_163;
                  case 0xE:
                  case 0x15:
                    if (v75 >= 0x50) {
                      goto LABEL_109;
                    }
                    goto LABEL_163;
                  case 0x12:
                  case 0x13:
                    if (v75 >= 0x32) {
                      goto LABEL_109;
                    }
                    goto LABEL_163;
                  case 0x14:
                    if (v75 >= 0x46) {
                      goto LABEL_109;
                    }
                    goto LABEL_163;
                  case 0x16:
                    uint64_t v81 = *(void *)(v66 + 32) | *(void *)(v66 + 40) | *(void *)(v66 + 48);
                    if (!(v71 | v69 | v70 | v72 | v81 | v73)) {
                      goto LABEL_109;
                    }
                    if (v70 != 1 || v71 | v69 | v72 | v81 | v73) {
                      break;
                    }
                    if (v75 >= 6) {
                      goto LABEL_109;
                    }
                    goto LABEL_163;
                  default:
                    break;
                }
              }
            }
LABEL_161:
            unint64_t v80 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_162:
            if (v75 >= v80) {
              goto LABEL_109;
            }
LABEL_163:
            if (!v10) {
              goto LABEL_315;
            }
            long long v200 = *(_OWORD *)(v66 + 232);
            long long v203 = *(_OWORD *)(v66 + 248);
            long long v188 = *(_OWORD *)(v66 + 168);
            long long v191 = *(_OWORD *)(v66 + 184);
            long long v194 = *(_OWORD *)(v66 + 200);
            long long v197 = *(_OWORD *)(v66 + 216);
            long long v182 = *v68;
            long long v185 = *(_OWORD *)(v66 + 152);
            long long v82 = *(_OWORD *)(v66 + 80);
            *(_OWORD *)(v66 + 200) = *(_OWORD *)(v66 + 64);
            *(_OWORD *)(v66 + 216) = v82;
            long long v83 = *(_OWORD *)(v66 + 112);
            *(_OWORD *)(v66 + 232) = *(_OWORD *)(v66 + 96);
            *(_OWORD *)(v66 + 248) = v83;
            long long v84 = *(_OWORD *)(v66 + 48);
            *(_OWORD *)(v66 + 168) = *(_OWORD *)(v66 + 32);
            *(_OWORD *)(v66 + 184) = v84;
            long long v86 = *(_OWORD *)v66;
            long long v85 = *(_OWORD *)(v66 + 16);
            *(_OWORD *)(v66 + 64) = v194;
            *(_OWORD *)(v66 + 80) = v197;
            *(_OWORD *)(v66 + 96) = v200;
            *(_OWORD *)(v66 + 112) = v203;
            *(_OWORD *)(v66 + 32) = v188;
            *(_OWORD *)(v66 + 48) = v191;
            *(_OWORD *)uint64_t v66 = v182;
            *(_OWORD *)(v66 + 16) = v185;
            uint64_t v87 = *(void *)(v66 + 128);
            *(void *)(v66 + 128) = *(void *)(v66 + 264);
            v66 -= 136;
            *((void *)v68 + 16) = v87;
            ++v65;
            long long *v68 = v86;
            v68[1] = v85;
            if (v9 != v65) {
              continue;
            }
LABEL_109:
            ++v9;
            v64 += 136;
            if (v9 != v63) {
              goto LABEL_110;
            }
            Swift::Int v9 = v63;
            break;
          default:
            goto LABEL_129;
        }
        break;
      }
    }
LABEL_168:
    if (v9 < v14) {
      goto LABEL_304;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v89 = *((void *)v11 + 2);
    unint64_t v88 = *((void *)v11 + 3);
    unint64_t v13 = v89 + 1;
    long long v10 = v180;
    if (v89 >= v88 >> 1)
    {
      long long v10 = v180;
      long long v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v88 > 1), v89 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v13;
    long long v90 = v11 + 32;
    long long v91 = &v11[16 * v89 + 32];
    *(void *)long long v91 = v14;
    *((void *)v91 + 1) = v9;
    if (v89)
    {
      while (1)
      {
        unint64_t v92 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v97 = &v90[16 * v13];
          uint64_t v98 = *((void *)v97 - 8);
          uint64_t v99 = *((void *)v97 - 7);
          BOOL v103 = __OFSUB__(v99, v98);
          uint64_t v100 = v99 - v98;
          if (v103) {
            goto LABEL_293;
          }
          uint64_t v102 = *((void *)v97 - 6);
          uint64_t v101 = *((void *)v97 - 5);
          BOOL v103 = __OFSUB__(v101, v102);
          uint64_t v95 = v101 - v102;
          char v96 = v103;
          if (v103) {
            goto LABEL_294;
          }
          unint64_t v104 = v13 - 2;
          uint64_t v105 = &v90[16 * v13 - 32];
          uint64_t v107 = *(void *)v105;
          uint64_t v106 = *((void *)v105 + 1);
          BOOL v103 = __OFSUB__(v106, v107);
          uint64_t v108 = v106 - v107;
          if (v103) {
            goto LABEL_296;
          }
          BOOL v103 = __OFADD__(v95, v108);
          uint64_t v109 = v95 + v108;
          if (v103) {
            goto LABEL_299;
          }
          if (v109 >= v100)
          {
            uint64_t v127 = &v90[16 * v92];
            uint64_t v129 = *(void *)v127;
            uint64_t v128 = *((void *)v127 + 1);
            BOOL v103 = __OFSUB__(v128, v129);
            uint64_t v130 = v128 - v129;
            if (v103) {
              goto LABEL_303;
            }
            BOOL v120 = v95 < v130;
            goto LABEL_205;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v121 = *((void *)v11 + 4);
            uint64_t v122 = *((void *)v11 + 5);
            BOOL v103 = __OFSUB__(v122, v121);
            uint64_t v114 = v122 - v121;
            char v115 = v103;
            goto LABEL_199;
          }
          uint64_t v94 = *((void *)v11 + 4);
          uint64_t v93 = *((void *)v11 + 5);
          BOOL v103 = __OFSUB__(v93, v94);
          uint64_t v95 = v93 - v94;
          char v96 = v103;
        }
        if (v96) {
          goto LABEL_295;
        }
        unint64_t v104 = v13 - 2;
        int v110 = &v90[16 * v13 - 32];
        uint64_t v112 = *(void *)v110;
        uint64_t v111 = *((void *)v110 + 1);
        BOOL v113 = __OFSUB__(v111, v112);
        uint64_t v114 = v111 - v112;
        char v115 = v113;
        if (v113) {
          goto LABEL_298;
        }
        uint64_t v116 = &v90[16 * v92];
        uint64_t v118 = *(void *)v116;
        uint64_t v117 = *((void *)v116 + 1);
        BOOL v103 = __OFSUB__(v117, v118);
        uint64_t v119 = v117 - v118;
        if (v103) {
          goto LABEL_301;
        }
        if (__OFADD__(v114, v119)) {
          goto LABEL_302;
        }
        if (v114 + v119 >= v95)
        {
          BOOL v120 = v95 < v119;
LABEL_205:
          if (v120) {
            unint64_t v92 = v104;
          }
          goto LABEL_207;
        }
LABEL_199:
        if (v115) {
          goto LABEL_297;
        }
        uint64_t v123 = &v90[16 * v92];
        uint64_t v125 = *(void *)v123;
        uint64_t v124 = *((void *)v123 + 1);
        BOOL v103 = __OFSUB__(v124, v125);
        uint64_t v126 = v124 - v125;
        if (v103) {
          goto LABEL_300;
        }
        if (v126 < v114) {
          goto LABEL_15;
        }
LABEL_207:
        uint64_t v131 = v11;
        unint64_t v132 = v92 - 1;
        if (v92 - 1 >= v13)
        {
          __break(1u);
LABEL_290:
          __break(1u);
LABEL_291:
          __break(1u);
LABEL_292:
          __break(1u);
LABEL_293:
          __break(1u);
LABEL_294:
          __break(1u);
LABEL_295:
          __break(1u);
LABEL_296:
          __break(1u);
LABEL_297:
          __break(1u);
LABEL_298:
          __break(1u);
LABEL_299:
          __break(1u);
LABEL_300:
          __break(1u);
LABEL_301:
          __break(1u);
LABEL_302:
          __break(1u);
LABEL_303:
          __break(1u);
LABEL_304:
          __break(1u);
LABEL_305:
          __break(1u);
LABEL_306:
          __break(1u);
LABEL_307:
          __break(1u);
LABEL_308:
          __break(1u);
LABEL_309:
          __break(1u);
LABEL_310:
          __break(1u);
LABEL_311:
          __break(1u);
LABEL_312:
          __break(1u);
          goto LABEL_313;
        }
        if (!v180) {
          goto LABEL_316;
        }
        long long v133 = &v90[16 * v132];
        uint64_t v134 = *(void *)v133;
        uint64_t v135 = &v90[16 * v92];
        uint64_t v136 = *((void *)v135 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)&v180[17 * *(void *)v133], (char *)&v180[17 * *(void *)v135], (unint64_t)&v180[17 * v136], v179);
        if (v206) {
          goto LABEL_287;
        }
        if (v136 < v134) {
          goto LABEL_290;
        }
        if (v92 > *((void *)v131 + 2)) {
          goto LABEL_291;
        }
        *(void *)long long v133 = v134;
        *(void *)&v90[16 * v132 + 8] = v136;
        unint64_t v137 = *((void *)v131 + 2);
        if (v92 >= v137) {
          goto LABEL_292;
        }
        long long v11 = v131;
        unint64_t v13 = v137 - 1;
        memmove(&v90[16 * v92], v135 + 16, 16 * (v137 - 1 - v92));
        *((void *)v131 + 2) = v137 - 1;
        long long v10 = v180;
        if (v137 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v12 = v178;
    if (v9 >= v178)
    {
      uint64_t v8 = v176;
      uint64_t v2 = v173;
      goto LABEL_276;
    }
  }
LABEL_313:
  __break(1u);
LABEL_314:
  __break(1u);
LABEL_315:
  __break(1u);
LABEL_316:
  __break(1u);
LABEL_317:
  __break(1u);
LABEL_318:
  __break(1u);
LABEL_319:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*NavigationStateHost.navigationState.modify())()
{
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t $defer #1 () in NavigationAuthority.flushRequestQueue()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 16;
  swift_beginAccess();
  outlined init with take of NavigationState?(v6, (uint64_t)v17);
  outlined init with take of NavigationState?((uint64_t)v17, (uint64_t)v18);
  uint64_t result = getEnumTag for AccessibilityActionCategory.Category((uint64_t)v18);
  if (result == 1)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  if (v19 != a2 || v20 != HIDWORD(a2))
  {
    uint64_t v9 = *(void *)(a1 + 184);
    outlined init with take of NavigationState?((uint64_t)v17, (uint64_t)v16);
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    v15[0] = v9;
    _s7SwiftUI23NavigationSelectionHostCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type NavigationSeedHost and conformance NavigationSeedHost, (void (*)(uint64_t))type metadata accessor for NavigationSeedHost);
    swift_retain();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
  }
  outlined init with take of NavigationState?(v6, (uint64_t)v15);
  outlined init with take of NavigationState?((uint64_t)v15, (uint64_t)v16);
  uint64_t result = getEnumTag for AccessibilityActionCategory.Category((uint64_t)v16);
  if (result == 1) {
    goto LABEL_12;
  }
  uint64_t v11 = v16[3];
  outlined init with take of NavigationState?((uint64_t)v15, (uint64_t)v14);
  outlined retain of NavigationState((uint64_t)v14);
  unint64_t v12 = specialized Dictionary.compactMapValues<A>(_:)(v11);
  outlined release of NavigationState?(v15);
  if ((specialized static Dictionary<>.== infix(_:_:)(v12, a3) & 1) == 0)
  {
    uint64_t v13 = swift_getKeyPath();
    MEMORY[0x1F4188790](v13);
    _s7SwiftUI23NavigationSelectionHostCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type NavigationSelectionHost and conformance NavigationSelectionHost, (void (*)(uint64_t))type metadata accessor for NavigationSelectionHost);
    swift_retain();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t *outlined release of NavigationState?(uint64_t *a1)
{
  return a1;
}

unint64_t specialized static Dictionary<>.== infix(_:_:)(unint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  unint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  unint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v11 = v10 | (v4 << 6);
LABEL_24:
    int v15 = *(_DWORD *)(*(void *)(v3 + 56) + 4 * v11);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(*(void *)(v3 + 48) + 24 * v11), *(unsigned char *)(*(void *)(v3 + 48) + 24 * v11 + 8), *(void *)(*(void *)(v3 + 48) + 24 * v11 + 16));
    if (v16)
    {
      int v17 = *(_DWORD *)(*(void *)(a2 + 56) + 4 * result);
      if (v17 != -1 && v15 != -1 && v17 == v15) {
        continue;
      }
    }
    return 0;
  }
  int64_t v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v12 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v12);
  ++v4;
  if (v13) {
    goto LABEL_23;
  }
  int64_t v4 = v12 + 1;
  if (v12 + 1 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v4);
  if (v13) {
    goto LABEL_23;
  }
  int64_t v4 = v12 + 2;
  if (v12 + 2 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v4);
  if (v13) {
    goto LABEL_23;
  }
  int64_t v4 = v12 + 3;
  if (v12 + 3 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v4);
  if (v13)
  {
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
    goto LABEL_24;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  double v15;
  char v16;

  if (result == a2) {
    return 1;
  }
  unint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  unint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    int v15 = *(double *)(*(void *)(v3 + 56) + 8 * v11);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned char *)(*(void *)(v3 + 48) + v11));
    if ((v16 & 1) == 0 || *(double *)(*(void *)(a2 + 56) + 8 * result) != v15) {
      return 0;
    }
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  if (result == a2) {
    return 1;
  }
  unint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  unint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    int v15 = 8 * v11;
    char v16 = *(void *)(*(void *)(v3 + 56) + v15);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(double *)(*(void *)(v3 + 48) + v15));
    if ((v17 & 1) == 0 || *(void *)(*(void *)(a2 + 56) + 8 * result) != v16) {
      return 0;
    }
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  char v16;

  if (result == a2) {
    return 1;
  }
  unint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  unint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    int v15 = *(void *)(*(void *)(v3 + 56) + 8 * v11);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(*(void *)(v3 + 48) + 12 * v11), *(unsigned char *)(*(void *)(v3 + 48) + 12 * v11 + 8));
    if ((v16 & 1) == 0 || *(void *)(*(void *)(a2 + 56) + 8 * result) != v15) {
      return 0;
    }
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int v15;
  char v16;

  if (result == a2) {
    return 1;
  }
  unint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  unint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    int v15 = *(unsigned __int8 *)(*(void *)(v3 + 56) + v11);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned char *)(*(void *)(v3 + 48) + v11));
    if ((v16 & 1) == 0 || *(unsigned __int8 *)(*(void *)(a2 + 56) + result) != v15) {
      return 0;
    }
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.compactMapValues<A>(_:)(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBC868];
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v36 = a1 + 64;
  uint64_t v39 = MEMORY[0x1E4FBC868];
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & v3;
  int64_t v35 = (unint64_t)(63 - v4) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v37 = 0;
  while (v6)
  {
    unint64_t v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v11 = v10 | (v37 << 6);
LABEL_25:
    uint64_t v16 = *(void *)(a1 + 48) + 24 * v11;
    Swift::UInt v17 = *(void *)v16;
    Swift::UInt v18 = *(unsigned __int8 *)(v16 + 8);
    Swift::UInt v19 = *(void *)(v16 + 16);
    memcpy(__dst, (const void *)(*(void *)(a1 + 56) + 304 * v11), 0x12BuLL);
    if (__dst[6] && LODWORD(__dst[1]) != -1 && (int v20 = __dst[10]) != 0)
    {
      if (LODWORD(__dst[1]))
      {
        unint64_t v21 = (LODWORD(__dst[10]) | ((unint64_t)LODWORD(__dst[1]) << 32))
            + ~((unint64_t)LODWORD(__dst[10]) << 32);
        unint64_t v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
        unint64_t v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
        int v24 = ((v23 + ~(v23 << 27)) >> 31) ^ (v23 + ~(v23 << 27));
        if (LODWORD(__dst[10]) == -1) {
          int v20 = -1;
        }
        else {
          int v20 = v24;
        }
      }
    }
    else
    {
      int v20 = __dst[1];
    }
    unint64_t v25 = *(void *)(v2 + 16);
    if (*(void *)(v2 + 24) <= v25)
    {
      uint64_t v26 = v25 + 1;
      outlined retain of NavigationColumnState(__dst);
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, 1);
      uint64_t v2 = v39;
    }
    else
    {
      outlined retain of NavigationColumnState(__dst);
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v17);
    Hasher._combine(_:)(v18);
    Hasher._combine(_:)(v19);
    uint64_t result = Hasher._finalize()();
    uint64_t v27 = v2 + 64;
    uint64_t v28 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v2 + 64 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v29) & ~*(void *)(v2 + 64 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v27 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v8 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v27 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    uint64_t v9 = *(void *)(v2 + 48) + 24 * v8;
    *(void *)uint64_t v9 = v17;
    *(unsigned char *)(v9 + 8) = v18;
    *(void *)(v9 + 16) = v19;
    *(_DWORD *)(*(void *)(v2 + 56) + 4 * v8) = v20;
    ++*(void *)(v2 + 16);
    uint64_t result = (uint64_t)outlined release of NavigationColumnState(__dst);
  }
  int64_t v12 = v37 + 1;
  if (__OFADD__(v37, 1))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v12 >= v35) {
    goto LABEL_45;
  }
  unint64_t v13 = *(void *)(v36 + 8 * v12);
  int64_t v14 = v37 + 1;
  if (v13) {
    goto LABEL_24;
  }
  int64_t v14 = v37 + 2;
  if (v37 + 2 >= v35) {
    goto LABEL_45;
  }
  unint64_t v13 = *(void *)(v36 + 8 * v14);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v14 = v37 + 3;
  if (v37 + 3 >= v35) {
    goto LABEL_45;
  }
  unint64_t v13 = *(void *)(v36 + 8 * v14);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v14 = v37 + 4;
  if (v37 + 4 >= v35) {
    goto LABEL_45;
  }
  unint64_t v13 = *(void *)(v36 + 8 * v14);
  if (v13)
  {
LABEL_24:
    unint64_t v6 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    int64_t v37 = v14;
    goto LABEL_25;
  }
  int64_t v15 = v37 + 5;
  if (v37 + 5 >= v35)
  {
LABEL_45:
    outlined consume of Set<UIPress>.Iterator._Variant();
    return v2;
  }
  unint64_t v13 = *(void *)(v36 + 8 * v15);
  if (v13)
  {
    int64_t v14 = v37 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v14 >= v35) {
      goto LABEL_45;
    }
    unint64_t v13 = *(void *)(v36 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_24;
    }
  }
LABEL_47:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  Swift::UInt v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  long long v32;
  char v33;
  uint64_t v34;
  long long v35;
  uint64_t v36;

  uint64_t v2 = MEMORY[0x1E4FBC868];
  uint64_t v3 = a1 + 64;
  uint64_t v36 = MEMORY[0x1E4FBC868];
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  uint64_t v7 = (unint64_t)(63 - v4) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  if (!v6) {
    goto LABEL_8;
  }
LABEL_5:
  unint64_t v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v11 = v10 | (v9 << 6);
  while (1)
  {
    int64_t v12 = *(void *)(a1 + 56) + 80 * v11;
    if (*(unsigned char *)(v12 + 40))
    {
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      Swift::UInt v17 = *(void *)(*(void *)(a1 + 48) + 8 * v11);
      char v31 = *(void *)v12;
      Swift::UInt v18 = *(void *)(v12 + 8);
      unint64_t v30 = *(unsigned char *)(v12 + 16);
      unint64_t v32 = *(_OWORD *)(v12 + 24);
      int64_t v35 = *(_OWORD *)(v12 + 48);
      uint64_t v34 = *(void *)(v12 + 64);
      BOOL v33 = *(unsigned char *)(v12 + 72);
      Swift::UInt v19 = *(void *)(v2 + 16);
      if (*(void *)(v2 + 24) <= v19)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19 + 1, 1);
        uint64_t v2 = v36;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v17);
      uint64_t result = Hasher._finalize()();
      int v20 = v2 + 64;
      unint64_t v21 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v2 + 64 + 8 * (v22 >> 6))) == 0)
      {
        unint64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v21) >> 6;
        while (++v23 != v26 || (v25 & 1) == 0)
        {
          uint64_t v27 = v23 == v26;
          if (v23 == v26) {
            unint64_t v23 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v20 + 8 * v23);
          if (v28 != -1)
          {
            int v24 = __clz(__rbit64(~v28)) + (v23 << 6);
            goto LABEL_36;
          }
        }
        goto LABEL_40;
      }
      int v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v2 + 64 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
LABEL_36:
      *(void *)(v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      *(void *)(*(void *)(v2 + 48) + 8 * v24) = v17;
      unint64_t v29 = *(void *)(v2 + 56) + 80 * v24;
      *(void *)unint64_t v29 = v31;
      *(void *)(v29 + 8) = v18;
      *(unsigned char *)(v29 + 16) = v30;
      *(_OWORD *)(v29 + 24) = v32;
      *(unsigned char *)(v29 + 40) = 0;
      *(_OWORD *)(v29 + 48) = v35;
      *(void *)(v29 + 64) = v34;
      *(unsigned char *)(v29 + 72) = v33;
      ++*(void *)(v2 + 16);
      if (v6) {
        goto LABEL_5;
      }
    }
LABEL_8:
    unint64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v13 >= v7) {
      goto LABEL_38;
    }
    int64_t v14 = *(void *)(v3 + 8 * v13);
    int64_t v15 = v9 + 1;
    if (!v14)
    {
      int64_t v15 = v9 + 2;
      if (v9 + 2 >= v7) {
        goto LABEL_38;
      }
      int64_t v14 = *(void *)(v3 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v9 + 3;
        if (v9 + 3 >= v7) {
          goto LABEL_38;
        }
        int64_t v14 = *(void *)(v3 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v9 + 4;
          if (v9 + 4 >= v7) {
            goto LABEL_38;
          }
          int64_t v14 = *(void *)(v3 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v15 << 6);
    uint64_t v9 = v15;
  }
  uint64_t v16 = v9 + 5;
  if (v9 + 5 >= v7)
  {
LABEL_38:
    outlined consume of Set<UIPress>.Iterator._Variant();
    return v2;
  }
  int64_t v14 = *(void *)(v3 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v9 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v7) {
      goto LABEL_38;
    }
    int64_t v14 = *(void *)(v3 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_23;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

Swift::Void __swiftcall NavigationState.finalizeFlush()()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v20 = v1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(v1 + 64);
  int64_t v21 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v5 = 0;
  if (v4) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v8 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v8 < v21)
    {
      unint64_t v9 = *(void *)(v20 + 8 * v8);
      ++v5;
      if (v9) {
        goto LABEL_24;
      }
      int64_t v5 = v8 + 1;
      if (v8 + 1 >= v21) {
        goto LABEL_37;
      }
      unint64_t v9 = *(void *)(v20 + 8 * v5);
      if (v9) {
        goto LABEL_24;
      }
      int64_t v5 = v8 + 2;
      if (v8 + 2 >= v21) {
        goto LABEL_37;
      }
      unint64_t v9 = *(void *)(v20 + 8 * v5);
      if (v9) {
        goto LABEL_24;
      }
      int64_t v5 = v8 + 3;
      if (v8 + 3 >= v21) {
        goto LABEL_37;
      }
      unint64_t v9 = *(void *)(v20 + 8 * v5);
      if (v9) {
        goto LABEL_24;
      }
      int64_t v5 = v8 + 4;
      if (v8 + 4 >= v21) {
        goto LABEL_37;
      }
      unint64_t v9 = *(void *)(v20 + 8 * v5);
      if (v9)
      {
LABEL_24:
        unint64_t v4 = (v9 - 1) & v9;
        for (unint64_t i = __clz(__rbit64(v9)) + (v5 << 6); ; unint64_t i = v6 | (v5 << 6))
        {
          unint64_t v11 = specialized Dictionary.subscript.modify(v22, *(void *)(*(void *)(v1 + 48) + 24 * i), *(unsigned char *)(*(void *)(v1 + 48) + 24 * i + 8), *(void *)(*(void *)(v1 + 48) + 24 * i + 16));
          uint64_t v13 = v12;
          outlined init with take of NavigationState.StackContent.Key?(v12, (uint64_t)v23, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
          outlined init with take of NavigationState.StackContent.Key?((uint64_t)v23, (uint64_t)v24, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
          if (_s7SwiftUI21NavigationColumnStateVSgWOg((uint64_t)v24) == 1)
          {
            ((void (*)(void *, void))v11)(v22, 0);
            if (!v4) {
              goto LABEL_7;
            }
          }
          else
          {
            __int16 v14 = *(_WORD *)(v13 + 297);
            if (v14 != 2)
            {
              if ((v14 & 1) == 0)
              {
                if (*(void *)(v13 + 96))
                {
                  uint64_t v15 = Transaction.animation.getter();
                  if (v15)
                  {
                    uint64_t v16 = v15;
                    if (*(unsigned char *)(v13 + 298) == 1)
                    {
                      swift_release();
                    }
                    else
                    {
                      swift_release();
                      *(void *)(v13 + 288) = v16;
                      int v17 = *(_DWORD *)(v13 + 284);
                      BOOL v18 = __CFADD__(v17, 1);
                      int v19 = v17 + 1;
                      if (v18) {
                        goto LABEL_39;
                      }
                      *(_DWORD *)(v13 + 284) = v19;
                    }
                  }
                }
              }
              *(_WORD *)(v13 + 297) = 2;
            }
            ((void (*)(void *, void))v11)(v22, 0);
            if (!v4) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v6 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }
      int64_t v10 = v8 + 5;
      if (v10 < v21)
      {
        unint64_t v9 = *(void *)(v20 + 8 * v10);
        if (v9)
        {
          int64_t v5 = v10;
          goto LABEL_24;
        }
        while (1)
        {
          int64_t v5 = v10 + 1;
          if (__OFADD__(v10, 1)) {
            goto LABEL_40;
          }
          if (v5 >= v21) {
            break;
          }
          unint64_t v9 = *(void *)(v20 + 8 * v5);
          ++v10;
          if (v9) {
            goto LABEL_24;
          }
        }
      }
    }
LABEL_37:
    swift_release();
    return;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
}

uint64_t (*specialized Dictionary.subscript.modify(void *a1, Swift::UInt a2, unsigned __int8 a3, Swift::UInt a4))()
{
  int64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  void v8[4] = specialized Dictionary._Variant.subscript.modify(v8, a2, a3, a4);
  return Dictionary.subscript.modifyspecialized ;
}

void *specialized Dictionary.init(dictionaryLiteral:)(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.StackContent.Key, NavigationColumnState>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  memcpy(v16, a1 + 4, 0x143uLL);
  uint64_t v4 = v16[0];
  char v5 = v16[1];
  uint64_t v6 = v16[2];
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v16[0], v16[1], v16[2]);
  if (v8)
  {
LABEL_7:
    __break(1u);
    return (void *)MEMORY[0x1E4FBC868];
  }
  unint64_t v9 = (char *)(a1 + 45);
  while (1)
  {
    *(void *)((char *)v3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
    uint64_t v10 = v3[6] + 24 * v7;
    *(void *)uint64_t v10 = v4;
    *(unsigned char *)(v10 + 8) = v5;
    *(void *)(v10 + 16) = v6;
    uint64_t result = memcpy((void *)(v3[7] + 304 * v7), &v16[3], 0x12BuLL);
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      break;
    }
    v3[2] = v14;
    outlined retain of (NavigationState.StackContent.Key, NavigationColumnState)(v16);
    if (!--v1) {
      return v3;
    }
    memcpy(v16, v9, 0x143uLL);
    uint64_t v4 = v16[0];
    char v5 = v16[1];
    uint64_t v6 = v16[2];
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v16[0], v16[1], v16[2]);
    v9 += 328;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return ScrollViewAdjustedState.updateValue()();
}

unint64_t ScrollViewAdjustedState.updateValue()()
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t Value = AGGraphGetValue();
  unsigned __int8 v3 = v2;
  double v5 = *(double *)Value;
  double v4 = *(double *)(Value + 8);
  uint64_t v6 = *(void *)(Value + 16);
  uint64_t v7 = *(void *)(Value + 24);
  uint64_t v8 = *(void *)(Value + 32);
  uint64_t v9 = *(void *)(Value + 40);
  uint64_t v10 = *(void *)(Value + 48);
  uint64_t v11 = *(void *)(Value + 56);
  uint64_t v12 = *(void *)(Value + 64);
  uint64_t v13 = *(void *)(Value + 72);
  uint64_t v14 = *(void *)(Value + 80);
  uint64_t v15 = *(void *)(Value + 88);
  unint64_t v16 = *(void *)(Value + 96);
  uint64_t v17 = *(unsigned int *)(Value + 104);
  double v49 = *(double *)Value;
  double v50 = v4;
  uint64_t v32 = v7;
  uint64_t v33 = v6;
  uint64_t v51 = v6;
  uint64_t v52 = v7;
  uint64_t v30 = v9;
  uint64_t v31 = v8;
  uint64_t v53 = v8;
  uint64_t v54 = v9;
  uint64_t v55 = v10;
  uint64_t v56 = v11;
  uint64_t v57 = v12;
  uint64_t v58 = v13;
  uint64_t v28 = v15;
  uint64_t v29 = v14;
  uint64_t v59 = v14;
  uint64_t v60 = v15;
  unint64_t v61 = v16;
  int v62 = v17;
  int v18 = v2 & (v16 == 0x8000000000000000);
  unsigned __int8 v34 = 4;
  outlined copy of SystemScrollLayoutState.ContentOffsetMode(v16);
  char v19 = ScrollViewAdjustedState.resetIfNeeded(state:reason:)((uint64_t)&v49, &v34);
  if (ScrollViewAdjustedState.adjustOffsetIfNeeded(state:reason:)(&v49, &v34))
  {
    double v20 = v49;
    double v21 = v50;
    char v22 = 1;
    if (v49 == v5 && v50 == v4) {
      goto LABEL_8;
    }
  }
  else
  {
    char v22 = v3 | v19;
    double v20 = v49;
    double v21 = v50;
    if (v49 == v5 && v50 == v4) {
      goto LABEL_8;
    }
  }
  unint64_t v23 = v34;
  if (v34 == 4)
  {
LABEL_8:
    unint64_t v23 = v16;
    goto LABEL_9;
  }
  uint64_t v26 = *(void *)(v0 + 112);
  int v18 = 1;
  swift_beginAccess();
  uint64_t v27 = (*(_DWORD *)(v26 + 16) + 1);
  *(_DWORD *)(v26 + 16) = v27;
  outlined consume of SystemScrollLayoutState.ContentOffsetMode(v16);
  if (v17 != -1)
  {
    if (v17) {
      uint64_t v27 = merge32(_:_:)(v17, v27);
    }
    if (v27 == -1)
    {
      LODWORD(v17) = -1;
    }
    else
    {
      LODWORD(v17) = v23 + 1;
      if (v27) {
        LODWORD(v17) = merge32(_:_:)(v27, (int)v23 + 1);
      }
    }
    int v18 = 1;
  }
LABEL_9:
  BOOL v24 = *(double *)(v0 + 96) == v21 && *(double *)(v0 + 88) == v20;
  if (!v24 && v18)
  {
    *(double *)(v0 + 88) = v20;
    *(double *)(v0 + 96) = v21;
  }
  if ((AGGraphGetOutputValue() == 0) | v22 & 1)
  {
    double v35 = v20;
    double v36 = v21;
    uint64_t v37 = v33;
    uint64_t v38 = v32;
    uint64_t v39 = v31;
    uint64_t v40 = v30;
    uint64_t v41 = v10;
    uint64_t v42 = v11;
    uint64_t v43 = v12;
    uint64_t v44 = v13;
    uint64_t v45 = v29;
    uint64_t v46 = v28;
    unint64_t v47 = v23;
    int v48 = v17;
    AGGraphSetOutputValue();
  }
  return outlined consume of SystemScrollLayoutState.ContentOffsetMode(v23);
}

uint64_t ScrollViewAdjustedState.resetIfNeeded(state:reason:)(uint64_t a1, unsigned char *a2)
{
  int v5 = *(_DWORD *)(v2 + 108);
  int v6 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v5 == v6 && AGGraphGetOutputValue()) {
    return 0;
  }
  *(double *)a1 = ScrollViewAdjustedState.initialOffset()();
  *(void *)(a1 + 8) = v8;
  *a2 = 3;
  if (v5 != v6)
  {
    *(_DWORD *)(v2 + 108) = *(_DWORD *)AGGraphGetValue() >> 1;
    *(unsigned char *)(v2 + 104) = 0;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
  }
  return 1;
}

uint64_t ScrollViewAdjustedState.adjustOffsetIfNeeded(state:reason:)(double *a1, unsigned char *a2)
{
  unsigned __int8 v3 = v2;
  AGGraphClearUpdate();
  unsigned int v70 = v2[8];
  AGGraphGetValue();
  swift_retain();
  Transaction.scrollContentOffsetAdjustmentBehavior.getter();
  swift_release();
  AGGraphSetUpdate();
  int v6 = v89;
  unsigned int v7 = *v2;
  uint64_t Value = (long long *)AGGraphGetValue();
  long long v9 = Value[1];
  long long v89 = *Value;
  long long v90 = v9;
  MEMORY[0x18C114450]();
  CGSize.inset(by:)();
  double v11 = v10;
  CGFloat v13 = v12;
  unsigned int v14 = v2[5];
  uint64_t v15 = (long long *)AGGraphGetValue();
  long long v16 = v15[1];
  long long v89 = *v15;
  long long v90 = v16;
  *(_OWORD *)long long v91 = v15[2];
  CGRect.init(_:)();
  rect1.origin.double x = v19;
  CGFloat v21 = v20;
  double v68 = *((double *)v2 + 12);
  double v69 = *((double *)v2 + 11);
  BOOL v22 = a1[1] != v68 || *a1 != v69;
  double v23 = *((double *)v3 + 7);
  double v24 = *((double *)v3 + 8);
  CGFloat v25 = v17;
  double v26 = v18;
  BOOL v27 = v18 == v24 && v17 == v23;
  unsigned int v28 = v3[4];
  uint64_t v29 = (unsigned __int8 *)AGGraphGetValue();
  CGFloat v30 = v11;
  uint64_t v66 = *((void *)v3 + 10);
  double v67 = *((double *)v3 + 9);
  int v71 = *v29;
  if (v11 == v67 && v13 == *((double *)v3 + 10))
  {
    v102.origin.double x = *((CGFloat *)v3 + 5);
    v102.origin.y = *((CGFloat *)v3 + 6);
    v100.origin.double x = rect1.origin.x;
    double v31 = v21;
    v100.origin.y = v21;
    v100.size.width = v25;
    v100.size.height = v26;
    v102.size.width = v23;
    v102.size.height = v24;
    if (!CGRectEqualToRect(v100, v102) && v6 != 2)
    {
LABEL_11:
      BOOL v64 = v27;
      BOOL v65 = v22;
      unsigned int v61 = v3[1];
      int v32 = *(unsigned __int8 *)AGGraphGetValue();
      unsigned int v33 = v3[2];
      uint64_t v34 = AGGraphGetValue();
      CGFloat v35 = *(double *)v34;
      int v36 = *(unsigned __int8 *)(v34 + 24);
      char v62 = *(unsigned char *)(v34 + 24);
      if (v32 == 2)
      {
        int v42 = v36 ^ 1;
        if (*(void *)(*(void *)&v35 + 16)) {
          int v42 = 1;
        }
      }
      else
      {
        if (v32 == 1)
        {
          if (*(void *)(*(void *)&v35 + 16)) {
            int v37 = 1;
          }
          else {
            int v37 = v36 ^ 1;
          }
          int v63 = 1;
LABEL_25:
          double x = rect1.origin.x;
          rect1.origin.double x = *(CGFloat *)(v34 + 8);
          CGFloat v60 = *(double *)(v34 + 16);
          swift_bridgeObjectRetain();
          v103.origin.double x = 0.0;
          v103.origin.y = 0.0;
          v103.size.width = 0.0;
          v103.size.height = 0.0;
          v101.origin.double x = x;
          v101.origin.y = v31;
          v101.size.width = v25;
          v101.size.height = v26;
          BOOL v44 = CGRectEqualToRect(v101, v103);
          if (v37)
          {
            if (!v44)
            {
              uint64_t v59 = a2;
              unsigned int v45 = v3[3];
              unsigned int v46 = v3[9];
              char v47 = *((unsigned char *)v3 + 104);
              unsigned int v48 = v3[27];
              uint64_t v49 = *((void *)v3 + 14);
              *(void *)&long long v89 = __PAIR64__(v61, v7);
              *((void *)&v89 + 1) = __PAIR64__(v45, v33);
              *(void *)&long long v90 = __PAIR64__(v14, v28);
              *((void *)&v90 + 1) = *((void *)v3 + 3);
              *(_DWORD *)long long v91 = v70;
              *(_DWORD *)&v91[4] = v46;
              *(_OWORD *)&v91[8] = *(_OWORD *)(v3 + 10);
              long long v92 = *(_OWORD *)(v3 + 14);
              double v93 = v67;
              uint64_t v94 = v66;
              double v95 = v69;
              double v96 = v68;
              char v97 = v47;
              unsigned int v98 = v48;
              uint64_t v99 = v49;
              unint64_t v74 = *(void *)&v35;
              CGFloat v75 = rect1.origin.x;
              unint64_t v76 = *(void *)&v60;
              LOBYTE(v77) = v62;
              swift_retain();
              BOOL v50 = ScrollViewAdjustedState.alignIfNeeded(_:axis:newSize:newContentFrame:anchors:)(a1, 0, (uint64_t)&v74, v30, v13, x, v31, v25, v26);
              swift_release();
              if (v50)
              {
                if ((v63 & 1) == 0)
                {
                  swift_bridgeObjectRelease();
LABEL_47:
                  unsigned char *v59 = 2;
                  uint64_t result = 1;
                  goto LABEL_40;
                }
                char v51 = 1;
                goto LABEL_35;
              }
              if (v63)
              {
LABEL_34:
                char v51 = 0;
LABEL_35:
                unsigned int v52 = v3[3];
                unsigned int v53 = v3[9];
                char v54 = *((unsigned char *)v3 + 104);
                unsigned int v55 = v3[27];
                uint64_t v56 = *((void *)v3 + 14);
                unint64_t v74 = __PAIR64__(v61, v7);
                CGFloat v75 = COERCE_DOUBLE(__PAIR64__(v52, v33));
                unint64_t v76 = __PAIR64__(v14, v28);
                uint64_t v77 = *((void *)v3 + 3);
                unsigned int v78 = v70;
                unsigned int v79 = v53;
                long long v57 = *(_OWORD *)(v3 + 14);
                long long v80 = *(_OWORD *)(v3 + 10);
                long long v81 = v57;
                double v82 = v67;
                uint64_t v83 = v66;
                double v84 = v69;
                double v85 = v68;
                char v86 = v54;
                unsigned int v87 = v55;
                uint64_t v88 = v56;
                rect1.origin.y = v35;
                rect1.size.width = rect1.origin.x;
                rect1.size.height = v60;
                char v73 = v62;
                swift_retain();
                BOOL v58 = ScrollViewAdjustedState.alignIfNeeded(_:axis:newSize:newContentFrame:anchors:)(a1, 1, (uint64_t)&rect1.origin.y, v30, v13, x, v31, v25, v26);
                swift_bridgeObjectRelease();
                swift_release();
                if ((v51 & 1) != 0 || v58) {
                  goto LABEL_47;
                }
LABEL_39:
                uint64_t result = 0;
LABEL_40:
                *((CGFloat *)v3 + 9) = v30;
                *((CGFloat *)v3 + 10) = v13;
                *((double *)v3 + 5) = x;
                *((double *)v3 + 6) = v31;
                *((CGFloat *)v3 + 7) = v25;
                *((double *)v3 + 8) = v26;
                uint64_t v38 = (char *)(v3 + 26);
                if (v3[26])
                {
                  char v40 = 1;
                  goto LABEL_45;
                }
                BOOL v41 = v71 == 0;
                char v40 = v65 && v64;
                goto LABEL_43;
              }
            }
          }
          else if (v63 && !v44)
          {
            uint64_t v59 = a2;
            goto LABEL_34;
          }
          swift_bridgeObjectRelease();
          goto LABEL_39;
        }
        int v42 = 1;
      }
      int v63 = v42;
      int v37 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    double v31 = v21;
    if (v6 != 2) {
      goto LABEL_11;
    }
  }
  *((CGFloat *)v3 + 9) = v30;
  *((CGFloat *)v3 + 10) = v13;
  *((void *)v3 + 5) = *(void *)&rect1.origin.x;
  *((double *)v3 + 6) = v31;
  *((CGFloat *)v3 + 7) = v25;
  *((double *)v3 + 8) = v26;
  uint64_t v38 = (char *)(v3 + 26);
  if (v3[26])
  {
    uint64_t result = 0;
    char v40 = 1;
    goto LABEL_45;
  }
  uint64_t result = 0;
  BOOL v41 = v71 == 0;
  char v40 = v22 && v27;
LABEL_43:
  if (!v41) {
    char v40 = 1;
  }
LABEL_45:
  *uint64_t v38 = v40;
  return result;
}

BOOL ScrollViewAdjustedState.alignIfNeeded(_:axis:newSize:newContentFrame:anchors:)(double *a1, char a2, uint64_t a3, CGFloat a4, CGFloat a5, double a6, double a7, CGFloat a8, double a9)
{
  uint64_t v10 = v9;
  v100.double width = a4;
  v100.double height = a5;
  CGRect v103 = a1;
  uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v101 = *(void *)(v15 - 8);
  uint64_t v102 = v15;
  MEMORY[0x1F4188790](v15);
  double v17 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v18 = a2 & 1;
  double v19 = *(double *)a3;
  uint64_t v20 = *(void *)(a3 + 8);
  uint64_t v21 = *(void *)(a3 + 16);
  char v22 = *(unsigned char *)(a3 + 24);
  double v23 = *(double *)(v10 + 88);
  double v24 = *(double *)(v10 + 96);
  double v99 = v23;
  double v98 = v24;
  if (v18) {
    double v23 = v24;
  }
  double v106 = v23;
  AGGraphClearUpdate();
  char v25 = *(unsigned char *)AGGraphGetValue();
  AGGraphSetUpdate();
  double v109 = v19;
  uint64_t v110 = v20;
  uint64_t v111 = v21;
  char v112 = v22;
  char v108 = 0;
  char v107 = v25;
  ScrollAnchorStorage.adjustedAnchor(role:layoutDirection:)();
  double v109 = v19;
  uint64_t v110 = v20;
  uint64_t v111 = v21;
  char v112 = v22;
  char v108 = 1;
  char v107 = v25;
  ScrollAnchorStorage.adjustedAnchor(role:layoutDirection:)();
  uint64_t v104 = v27;
  uint64_t v105 = v26;
  double v109 = v19;
  uint64_t v110 = v20;
  uint64_t v111 = v21;
  char v112 = v22;
  char v108 = 2;
  char v107 = v25;
  ScrollAnchorStorage.adjustedAnchor(role:layoutDirection:)();
  char v108 = 2;
  UnitPoint.subscript.getter();
  if (v28 != 0.0 && (*(unsigned char *)(v10 + 104) & 1) == 0)
  {
    if ((double v29 = a8,
          double v30 = *(double *)(v10 + 72),
          double v31 = *(double *)(v10 + 80),
          static CGSize.invalidValue.getter(),
          BOOL v39 = v30 == v33,
          a8 = v29,
          v39)
      && v31 == v32
      || specialized getter of contentSizeChanged #1 in ScrollViewAdjustedState.alignIfNeeded(_:axis:newSize:newContentFrame:anchors:)(&v108, v10, v18, v29, a9)&& (static Semantics.v6.getter(), (isLinkedOnOrAfter(_:)() & 1) != 0))
    {
      CGPoint v34 = UnitPoint.in(_:)((CGSize)__PAIR128__(*(unint64_t *)&a9, *(unint64_t *)&v29));
      CGSize v35 = v100;
      CGPoint v38 = UnitPoint.in(_:)(v100);
      double y = v38.y;
      double x = v38.x;
      BOOL v39 = v18 == 0;
      BOOL v40 = v18 != 0;
      if ((_BYTE)v18) {
        double v41 = v34.y;
      }
      else {
        double v41 = v34.x;
      }
      if ((_BYTE)v18) {
        double height = v35.height;
      }
      else {
        double height = v35.width;
      }
      if ((_BYTE)v18) {
        double width = a9;
      }
      else {
        double width = v29;
      }
LABEL_68:
      if (!v39) {
        double x = y;
      }
      double v71 = v41 - x;
      double v72 = width - height;
      if (width - height <= 0.0) {
        double v72 = 0.0;
      }
      if (v71 < 0.0) {
        double v71 = 0.0;
      }
      if (v72 >= v71) {
        double v73 = v71;
      }
      else {
        double v73 = v72;
      }
      uint64_t v74 = v40;
      CGFloat v75 = v103;
      v103[v74] = v73;
      double v76 = *(double *)AGGraphGetValue();
      double v109 = v76 * 0.5 + v73;
      uint64_t v78 = v101;
      uint64_t v77 = v102;
      (*(void (**)(char *, void, uint64_t))(v101 + 104))(v17, *MEMORY[0x1E4FBBEB0], v102);
      specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v17, v76);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v17, v77);
      double v79 = v109;
      v75[v74] = v109;
      BOOL v80 = vabdd_f64(v106, v79) < 0.5;
      return !v80;
    }
  }
  UnitPoint.subscript.getter();
  if (v44 != 0.0)
  {
    uint64_t v45 = 80;
    if (!(_BYTE)v18) {
      uint64_t v45 = 72;
    }
    uint64_t v46 = 64;
    if (!(_BYTE)v18) {
      uint64_t v46 = 56;
    }
    if (*(double *)(v10 + v46) < *(double *)(v10 + v45))
    {
      CGPoint v47 = UnitPoint.in(_:)((CGSize)__PAIR128__(*(unint64_t *)&a9, *(unint64_t *)&a8));
      CGSize v48 = v100;
      CGPoint v49 = UnitPoint.in(_:)(v100);
      double y = v49.y;
      double x = v49.x;
      BOOL v39 = v18 == 0;
      BOOL v40 = v18 != 0;
      if ((_BYTE)v18) {
        double v41 = v47.y;
      }
      else {
        double v41 = v47.x;
      }
      if ((_BYTE)v18) {
        double height = v48.height;
      }
      else {
        double height = v48.width;
      }
      if ((_BYTE)v18) {
        double width = a9;
      }
      else {
        double width = a8;
      }
      goto LABEL_68;
    }
  }
  v97.double width = a8;
  v97.double height = a9;
  double v50 = *(double *)(v10 + 56);
  double v51 = *(double *)(v10 + 64);
  double v52 = *(double *)(v10 + 72);
  double v53 = *(double *)(v10 + 80);
  CGPoint v54 = UnitPoint.in(_:)(*(CGSize *)(v10 + 56));
  CGPoint v56 = UnitPoint.in(_:)((CGSize)__PAIR128__(*(unint64_t *)&v53, *(unint64_t *)&v52));
  double v55 = v56.x;
  if ((_BYTE)v18) {
    double v57 = v54.y;
  }
  else {
    double v57 = v54.x;
  }
  if ((_BYTE)v18) {
    double v58 = v53;
  }
  else {
    double v58 = v52;
  }
  double v96 = v50;
  if ((_BYTE)v18) {
    double v59 = v51;
  }
  else {
    double v59 = v50;
  }
  if ((_BYTE)v18) {
    double v55 = v56.y;
  }
  double v60 = v57 - v55;
  double v61 = v59 - v58;
  if (v59 - v58 >= v60) {
    double v62 = v60;
  }
  else {
    double v62 = v59 - v58;
  }
  double v63 = fmin(v61, 0.0);
  BOOL v64 = v60 < 0.0;
  if (v60 < 0.0) {
    double v62 = v63;
  }
  if (v60 > 0.0) {
    double v60 = 0.0;
  }
  if (v64) {
    double v60 = 0.0;
  }
  if (v61 <= 0.0) {
    double v65 = v60;
  }
  else {
    double v65 = v62;
  }
  UnitPoint.subscript.getter();
  if (v66 != 0.0 && vabdd_f64(v106, v65) < 0.5)
  {
    CGSize v67 = v97;
    CGPoint v68 = UnitPoint.in(_:)(v97);
    CGSize v69 = v100;
    CGPoint v70 = UnitPoint.in(_:)(v100);
    double y = v70.y;
    double x = v70.x;
    BOOL v39 = v18 == 0;
    BOOL v40 = v18 != 0;
    if ((_BYTE)v18) {
      double v41 = v68.y;
    }
    else {
      double v41 = v68.x;
    }
    if ((_BYTE)v18) {
      double height = v69.height;
    }
    else {
      double height = v69.width;
    }
    if ((_BYTE)v18) {
      double width = v67.height;
    }
    else {
      double width = v67.width;
    }
    goto LABEL_68;
  }
  double v109 = v19;
  uint64_t v110 = v20;
  uint64_t v111 = v21;
  char v112 = v22;
  ScrollAnchorStorage.sizeChanges.getter();
  UnitPoint.subscript.getter();
  BOOL result = 0;
  if (v82 == 0.5)
  {
    BOOL v83 = (*(void *)&v59 & 0xFFFFFFFFFFFFFLL) == 0 || (~*(void *)&v59 & 0x7FF0000000000000) != 0;
    if (v59 < v58 && v59 > 0.0 && v83)
    {
      if (v59 < 0.0)
      {
        __break(1u);
        return result;
      }
      double v84 = v51 - v53;
      if (!(_BYTE)v18) {
        double v84 = v96 - v52;
      }
      double v85 = 0.0;
      if (v84 < 0.0) {
        double v84 = 0.0;
      }
      if (v59 < v84) {
        double v84 = v59;
      }
      char v86 = v103;
      if (v84 <= 0.0)
      {
        if (!(_BYTE)v18) {
          goto LABEL_96;
        }
      }
      else
      {
        if (!(_BYTE)v18)
        {
          double v85 = v99 / v84;
LABEL_96:
          double v87 = (v97.width - v100.width) * v85;
          *CGRect v103 = v87;
          double v88 = v86[1];
LABEL_99:
          BOOL v89 = v18 != 0;
          double v90 = *(double *)AGGraphGetValue();
          if ((_BYTE)v18) {
            double v91 = v88;
          }
          else {
            double v91 = v87;
          }
          double v109 = v90 * 0.5 + v91;
          uint64_t v93 = v101;
          uint64_t v92 = v102;
          (*(void (**)(char *, void, uint64_t))(v101 + 104))(v17, *MEMORY[0x1E4FBBEB0], v102);
          specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v17, v90);
          (*(void (**)(char *, uint64_t))(v93 + 8))(v17, v92);
          double v94 = v109;
          v86[v89] = v109;
          BOOL v80 = vabdd_f64(v106, v94) < 0.5;
          return !v80;
        }
        double v85 = v98 / v84;
      }
      double v88 = (v97.height - v100.height) * v85;
      v103[1] = v88;
      double v87 = *v86;
      goto LABEL_99;
    }
  }
  return result;
}

uint64_t initializeWithCopy for SystemScrollLayoutState(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  unint64_t v7 = *(void *)(a2 + 96);
  outlined copy of SystemScrollLayoutState.ContentOffsetMode(v7);
  *(void *)(a1 + 96) = v7;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

BOOL specialized getter of contentSizeChanged #1 in ScrollViewAdjustedState.alignIfNeeded(_:axis:newSize:newContentFrame:anchors:)(unsigned char *a1, uint64_t a2, char a3, double a4, double a5)
{
  int v5 = *a1;
  if (v5 != 2) {
    return v5 & 1;
  }
  if (a3) {
    a4 = a5;
  }
  uint64_t v7 = 64;
  if ((a3 & 1) == 0) {
    uint64_t v7 = 56;
  }
  BOOL v8 = *(double *)(a2 + v7) != a4;
  swift_beginAccess();
  *a1 = v8;
  return v8;
}

double ScrollViewAdjustedState.initialOffset()()
{
  AGGraphClearUpdate();
  AGGraphGetValue();
  AGGraphSetUpdate();
  AGGraphGetValue();
  ScrollAnchorStorage.adjustedAnchor(role:layoutDirection:)();
  AGGraphGetValue();
  double v0 = 0.0;
  if (Axis.Set.contains(_:)())
  {
    AGGraphGetValue();
    CGRect.init(_:)();
    double v2 = v1;
    unint64_t v4 = v3;
    uint64_t Value = AGGraphGetValue();
    double v11 = MEMORY[0x18C114450](Value, v6, v7, v8, v9, v10);
    unint64_t v13 = v12;
    double x = UnitPoint.in(_:)((CGSize)__PAIR128__(v4, *(unint64_t *)&v2)).x;
    double v15 = x - UnitPoint.in(_:)((CGSize)__PAIR128__(v13, *(unint64_t *)&v11)).x;
    double v16 = v2 - v11;
    if (v2 - v11 <= 0.0) {
      double v16 = 0.0;
    }
    if (v15 < 0.0) {
      double v15 = 0.0;
    }
    if (v16 >= v15) {
      double v0 = v15;
    }
    else {
      double v0 = v16;
    }
  }
  AGGraphGetValue();
  if (Axis.Set.contains(_:)())
  {
    AGGraphGetValue();
    CGRect.init(_:)();
    unint64_t v18 = v17;
    unint64_t v20 = v19;
    uint64_t v21 = AGGraphGetValue();
    double v27 = MEMORY[0x18C114450](v21, v22, v23, v24, v25, v26);
    unint64_t v29 = v28;
    UnitPoint.in(_:)((CGSize)__PAIR128__(v20, v18));
    UnitPoint.in(_:)((CGSize)__PAIR128__(v29, *(unint64_t *)&v27));
  }
  return v0;
}

uint64_t initializeWithCopy for PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 12) = *(void *)(a2 + 12);
  *(void *)(a1 + 17) = *(void *)(a2 + 17);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithCopy for GridRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((*(unsigned __int8 *)(v4 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 9 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t initializeWithCopy for UIKitSystemButtonConfigurationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)v9;
  LOBYTE(a2) = *(unsigned char *)(v9 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v9, a2);
  *(void *)uint64_t v8 = v10;
  *(unsigned char *)(v8 + 8) = a2;
  return a1;
}

unint64_t lazy protocol witness table accessor for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions;
  if (!lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions;
  if (!lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions;
  if (!lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions;
  if (!lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDirectTouchOptions and conformance AccessibilityDirectTouchOptions);
  }
  return result;
}

uint64_t type metadata accessor for SceneStorageValues.Entry()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TableColumnForEachState.forEachItem(from:do:)(uint64_t *a1, uint64_t (*a2)(uint64_t *, uint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v130 = a3;
  uint64_t v129 = a2;
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = *(void **)v3;
  uint64_t v137 = *(void *)(*(void *)v3 + 104);
  uint64_t v8 = *(void *)(*(void *)(v137 + 8) + 8);
  uint64_t v9 = v6[10];
  uint64_t AssociatedTypeWitness = (void (**)(void, void))swift_getAssociatedTypeWitness();
  uint64_t v122 = (void (*)(char *, uint64_t, uint64_t))*(AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  BOOL v120 = (char *)v114 - v10;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v118 = *(char **)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v139 = (uint64_t)v114 - v13;
  uint64_t v138 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v143 = (char *)v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  unint64_t v18 = (char *)v114 - v17;
  uint64_t v135 = v11;
  uint64_t v19 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)v114 - v24;
  MEMORY[0x1F4188790](v26);
  uint64_t v119 = (char *)v114 - v27;
  MEMORY[0x1F4188790](v28);
  uint64_t v134 = (char *)v114 - v29;
  MEMORY[0x1F4188790](v30);
  uint64_t v117 = (char *)v114 - v31;
  uint64_t result = AGSubgraphIsValid();
  if (result)
  {
    uint64_t v142 = v25;
    uint64_t v136 = v19;
    uint64_t v153 = 0;
    uint64_t v33 = TableColumnForEachState.fetchColumnsPerElement()();
    uint64_t v131 = a1;
    uint64_t v121 = v9;
    uint64_t v133 = v8;
    uint64_t v128 = v22;
    if (v34)
    {
      v114[0] = v12;
      uint64_t v144 = 0;
      double v58 = &v4[*(void *)(*(void *)v4 + 160)];
      swift_beginAccess();
      uint64_t v59 = v7[15];
      uint64_t v60 = v7[11];
      uint64_t v61 = v7[12];
      uint64_t v62 = swift_getAssociatedTypeWitness();
      uint64_t v63 = swift_getAssociatedTypeWitness();
      uint64_t v64 = v7[14];
      uint64_t v145 = v9;
      uint64_t v146 = v60;
      uint64_t v126 = v60;
      uint64_t v147 = v62;
      uint64_t v148 = v63;
      uint64_t v125 = v61;
      uint64_t v149 = v61;
      uint64_t v150 = v137;
      uint64_t v124 = v64;
      uint64_t v151 = v64;
      uint64_t v152 = v59;
      uint64_t v127 = v59;
      uint64_t v65 = type metadata accessor for TableColumnForEach();
      uint64_t v66 = *(void *)(v65 - 8);
      char v115 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
      v114[1] = v66 + 48;
      uint64_t result = v115(v58, 1, v65);
      if (result == 1)
      {
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v67 = v138;
      CGPoint v68 = *(void (**)(char *, char *, uint64_t))(v138 + 16);
      CGSize v69 = v143;
      uint64_t v123 = v138 + 16;
      long long v141 = v68;
      v68(v143, v58, v9);
      CGPoint v70 = v120;
      dispatch thunk of Collection.indices.getter();
      double v71 = *(void (**)(char *, uint64_t))(v67 + 8);
      uint64_t v138 = v67 + 8;
      uint64_t v140 = v71;
      uint64_t v72 = ((uint64_t (*)(char *, uint64_t))v71)(v69, v9);
      MEMORY[0x1F4188790](v72);
      v114[-4] = v4;
      v114[-3] = &v153;
      v114[-2] = v131;
      v114[-1] = &v144;
      double v73 = AssociatedTypeWitness;
      swift_getAssociatedConformanceWitness();
      uint64_t v74 = v139;
      Sequence.first(where:)();
      (*((void (**)(char *, void))v122 + 1))(v70, v73);
      uint64_t v75 = v136;
      uint64_t v54 = v135;
      int v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v136 + 48))(v74, 1, v135);
      uint64_t v116 = 0;
      if (v76 == 1)
      {
        uint64_t result = v115(v58, 1, v65);
        if (result == 1)
        {
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        uint64_t v77 = v143;
        uint64_t v78 = v58;
        uint64_t v79 = v121;
        uint64_t v57 = v123;
        v141(v143, v78, v121);
        BOOL v80 = v119;
        dispatch thunk of Collection.endIndex.getter();
        uint64_t v9 = v79;
        v140(v77, v79);
        (*((void (**)(uint64_t, void))v118 + 1))(v139, v114[0]);
        a1 = v131;
        uint64_t v56 = (uint64_t)v142;
        uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v136 + 32))(v117, v80, v54);
      }
      else
      {
        long long v81 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 32);
        double v82 = v119;
        v81(v119, v74, v54);
        a1 = v131;
        uint64_t v9 = v121;
        uint64_t v56 = (uint64_t)v142;
        uint64_t v57 = v123;
        uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v81)(v117, v82, v54);
      }
      uint64_t v55 = *a1 - v144;
      if (__OFSUB__(*a1, v144))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      uint64_t v52 = v136;
    }
    else if (v33 < 1)
    {
      uint64_t v153 = 0;
      BOOL v83 = &v4[*(void *)(*(void *)v4 + 160)];
      swift_beginAccess();
      uint64_t v84 = v7[15];
      uint64_t v85 = v7[11];
      uint64_t v86 = v7[12];
      uint64_t v87 = swift_getAssociatedTypeWitness();
      uint64_t v88 = swift_getAssociatedTypeWitness();
      uint64_t v89 = v7[14];
      uint64_t v145 = v9;
      uint64_t v146 = v85;
      uint64_t v126 = v85;
      uint64_t v147 = v87;
      uint64_t v148 = v88;
      uint64_t v125 = v86;
      uint64_t v149 = v86;
      uint64_t v150 = v137;
      uint64_t v124 = v89;
      uint64_t v151 = v89;
      uint64_t v152 = v84;
      uint64_t v127 = v84;
      uint64_t v90 = type metadata accessor for TableColumnForEach();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v90 - 8) + 48))(v83, 1, v90);
      if (result == 1)
      {
LABEL_32:
        __break(1u);
        return result;
      }
      uint64_t v91 = v138;
      uint64_t v57 = v138 + 16;
      uint64_t v92 = v143;
      long long v141 = *(void (**)(char *, char *, uint64_t))(v138 + 16);
      v141(v143, v83, v9);
      dispatch thunk of Collection.endIndex.getter();
      uint64_t v93 = *(void (**)(char *, uint64_t))(v91 + 8);
      uint64_t v138 = v91 + 8;
      uint64_t v140 = v93;
      v93(v92, v9);
      uint64_t v55 = 0;
      uint64_t v116 = 0;
      uint64_t v54 = v135;
      uint64_t v52 = v136;
      uint64_t v56 = (uint64_t)v142;
    }
    else
    {
      uint64_t v35 = *a1 / v33;
      uint64_t v139 = v33;
      uint64_t v140 = (void (*)(char *, uint64_t))v35;
      uint64_t v153 = v35;
      int v36 = &v4[*(void *)(*(void *)v4 + 160)];
      swift_beginAccess();
      int v37 = v7;
      uint64_t v38 = v7[15];
      uint64_t v39 = v7[11];
      uint64_t v40 = v7[12];
      uint64_t v41 = swift_getAssociatedTypeWitness();
      uint64_t v42 = swift_getAssociatedTypeWitness();
      uint64_t v43 = v37[14];
      uint64_t v145 = v9;
      uint64_t v146 = v39;
      uint64_t v126 = v39;
      uint64_t v147 = v41;
      uint64_t v148 = v42;
      uint64_t v125 = v40;
      uint64_t v149 = v40;
      uint64_t v150 = v137;
      uint64_t v124 = v43;
      uint64_t v151 = v43;
      uint64_t v152 = v38;
      uint64_t v127 = v38;
      uint64_t v44 = type metadata accessor for TableColumnForEach();
      uint64_t v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48);
      uint64_t result = v45(v36, 1, v44);
      if (result == 1)
      {
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      uint64_t v46 = v138;
      uint64_t v47 = v138 + 16;
      CGSize v48 = *(void (**)(char *, char *, uint64_t))(v138 + 16);
      v48(v18, v36, v9);
      uint64_t result = v45(v36, 1, v44);
      if (result == 1)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      CGPoint v49 = v143;
      long long v141 = v48;
      v48(v143, v36, v9);
      double v50 = v134;
      dispatch thunk of Collection.startIndex.getter();
      double v51 = *(void (**)(char *, uint64_t))(v46 + 8);
      v51(v49, v9);
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      uint64_t v52 = v136;
      double v53 = v50;
      uint64_t v54 = v135;
      (*(void (**)(char *, uint64_t))(v136 + 8))(v53, v135);
      uint64_t v138 = v46 + 8;
      uint64_t v140 = v51;
      v51(v18, v9);
      uint64_t v116 = 0;
      a1 = v131;
      uint64_t v55 = *v131 % v139;
      uint64_t v56 = (uint64_t)v142;
      uint64_t v57 = v47;
    }
    uint64_t v94 = v9;
    *a1 = v55;
    double v96 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
    uint64_t v95 = v52 + 16;
    uint64_t v122 = v96;
    v96((char *)v56, (uint64_t)v117, v54);
    uint64_t v97 = *(void *)(*(void *)v4 + 160);
    BOOL v120 = v4;
    double v98 = &v4[v97];
    swift_beginAccess();
    uint64_t AssociatedTypeWitness = (void (**)(void, void))(v95 - 8);
    uint64_t v119 = (char *)(v55 & ~(v55 >> 63));
    uint64_t v136 = v95;
    uint64_t v123 = v57;
    uint64_t v118 = v98;
    while (1)
    {
      double v99 = v128;
      v122(v128, v56, v54);
      uint64_t v100 = v127;
      uint64_t v101 = v125;
      uint64_t v102 = swift_getAssociatedTypeWitness();
      uint64_t v103 = swift_getAssociatedTypeWitness();
      uint64_t v145 = v94;
      uint64_t v146 = v126;
      uint64_t v147 = v102;
      uint64_t v148 = v103;
      uint64_t v149 = v101;
      uint64_t v150 = v137;
      uint64_t v151 = v124;
      uint64_t v152 = v100;
      uint64_t v104 = type metadata accessor for TableColumnForEach();
      uint64_t v139 = *(void *)(*(void *)(v104 - 8) + 48);
      uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v139)(v98, 1, v104);
      if (result == 1) {
        goto LABEL_26;
      }
      uint64_t v105 = v143;
      v141(v143, v98, v94);
      double v106 = v134;
      dispatch thunk of Collection.endIndex.getter();
      v140(v105, v94);
      swift_getAssociatedConformanceWitness();
      char v107 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v108 = (void (*)(char *, uint64_t))*AssociatedTypeWitness;
      (*AssociatedTypeWitness)(v106, v54);
      v108(v99, v54);
      if (v107)
      {
        v108(v142, v54);
        v108(v117, v54);
        return 1;
      }
      uint64_t v109 = v153;
      uint64_t v110 = TableColumnForEachState.item(at:offset:)((uint64_t)v142, v153);
      uint64_t v111 = v131;
      *uint64_t v131 = (uint64_t)v119;
      if ((v129(v111, v110) & 1) == 0)
      {
        swift_release();
        uint64_t v113 = v135;
        v108(v142, v135);
        v108(v117, v113);
        return 0;
      }
      uint64_t v153 = v109 + 1;
      uint64_t *v111 = 0;
      double v98 = v118;
      uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v139)(v118, 1, v104);
      if (result == 1) {
        goto LABEL_27;
      }
      char v112 = v143;
      uint64_t v94 = v121;
      v141(v143, v98, v121);
      uint64_t v56 = (uint64_t)v142;
      dispatch thunk of Collection.formIndex(after:)();
      swift_release();
      v140(v112, v94);
      uint64_t v54 = v135;
    }
  }
  return result;
}

uint64_t type metadata accessor for TableColumnForEach()
{
  return swift_getGenericMetadata();
}

uint64_t RawRepresentableTransform.readValue(from:key:read:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v27[0] = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v27 - v16;
  *a4 = 1;
  *(void *)&v28[0] = a2;
  *((void *)&v28[0] + 1) = a3;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v29), (v19 & 1) != 0)) {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v18, (uint64_t)v28);
  }
  else {
    memset(v28, 0, sizeof(v28));
  }
  outlined destroy of AnyHashable((uint64_t)v29);
  uint64_t v20 = MEMORY[0x1E4FBC840] + 8;
  type metadata accessor for PropertyListTransform<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  int v21 = swift_dynamicCast();
  uint64_t v22 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v17, v21 ^ 1u, 1, AssociatedTypeWitness);
  MEMORY[0x1F4188790](v22);
  v27[-2] = a5;
  v27[-1] = a6;
  MEMORY[0x1F4188790](v23);
  v27[-4] = a5;
  v27[-3] = a6;
  v27[-2] = (uint64_t)partial apply for closure #1 in RawRepresentableTransform.readValue(from:key:read:);
  v27[-1] = v24;
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed A.RawRepresentable.RawValue) -> (@out A?), (uint64_t)&v27[-6], MEMORY[0x1E4FBC248], v20, v25, v27[0]);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

unint64_t lazy protocol witness table accessor for type AnyView?? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyView?? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AnyView?? and conformance <A> A?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<ContainerBackgroundKind?>(255, &lazy cache variable for type metadata for AnyView??, &lazy cache variable for type metadata for AnyView?, MEMORY[0x1E4F41618], MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type AnyView? and conformance <A> A?();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyView?? and conformance <A> A?);
  }
  return result;
}

uint64_t closure #1 in View.containerBackground<A>(_:for:allowsVibrancy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v37 = a5;
  uint64_t v38 = a7;
  int v34 = a4;
  v30[0] = a3;
  uint64_t v31 = a2;
  uint64_t v35 = a9;
  uint64_t v36 = a1;
  uint64_t v33 = *(void *)(a6 - 8);
  double v14 = MEMORY[0x1F4188790](a1);
  double v32 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = v16(v14);
  uint64_t v41 = a11;
  uint64_t v42 = a6;
  uint64_t v43 = v17;
  uint64_t v44 = a8;
  v30[1] = a8;
  uint64_t v18 = type metadata accessor for _ShapeView();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  int v21 = (char *)v30 - v20;
  type metadata accessor for _EnvironmentKeyWritingModifier<ContainerBackgroundKind?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ContainerBackgroundKind?>, &lazy cache variable for type metadata for ContainerBackgroundKind?, MEMORY[0x1E4F40C18], MEMORY[0x1E4F411E8]);
  uint64_t v22 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v22);
  Shape.fill<A>(_:style:)(a3, 256, a11, a6);
  swift_getKeyPath();
  uint64_t v23 = v31;
  if (v31 < 0) {
    char v24 = v31;
  }
  else {
    char v24 = 5;
  }
  LOBYTE(v41) = v24;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  unint64_t v26 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ContainerBackgroundKind?> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v39 = WitnessTable;
  unint64_t v40 = v26;
  swift_getWitnessTable();
  uint64_t v27 = AnyView.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v33 + 16))(v32, v30[0], a6);
  uint64_t v28 = AnyShapeStyle.init<A>(_:)();
  uint64_t v41 = v23;
  uint64_t v42 = v27;
  uint64_t v43 = v28;
  LOBYTE(v44) = v34;
  MEMORY[0x18C113660](&v41, v37, &type metadata for ContainerBackgroundModifier, v38);
  swift_release();
  return swift_release();
}

uint64_t getEnumTagSinglePayload for TaskPhase(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_20;
  }
  uint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    if (v8 < 2)
    {
LABEL_20:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 3) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_20;
  }
LABEL_12:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 254;
}

void storeEnumTagSinglePayload for TaskPhase(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v8 = a2 - 254;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_32:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_21;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_20;
      case 3:
        goto LABEL_32;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_21;
      default:
LABEL_20:
        if (a2) {
LABEL_21:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

unsigned __int8 *assignWithCopy for TaskPhase(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 + 64);
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    unsigned int v9 = a2[v8];
    if (v9 >= 3)
    {
      if (v8 <= 3) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a2;
          goto LABEL_11;
        case 2:
          int v11 = *(unsigned __int16 *)a2;
          goto LABEL_11;
        case 3:
          int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_11;
        case 4:
          int v11 = *(_DWORD *)a2;
LABEL_11:
          int v12 = (v11 | ((v9 - 3) << (8 * v8))) + 3;
          char v13 = v11 + 3;
          if (v8 >= 4) {
            LOBYTE(v9) = v13;
          }
          else {
            LOBYTE(v9) = v12;
          }
          break;
        default:
          break;
      }
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v5);
    a1[v8] = v9;
  }
  return a1;
}

void *initializeBufferWithCopyOfBuffer for TaskPhase(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(_DWORD *)(v4 + 80);
  if (v6 <= 7 && (unint64_t)(v5 + 1) <= 0x18 && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    unsigned int v10 = a2[v5];
    unsigned int v11 = v10 - 3;
    if (v10 >= 3)
    {
      if (v5 <= 3) {
        uint64_t v12 = v5;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a2;
          goto LABEL_18;
        case 2:
          int v13 = *(unsigned __int16 *)a2;
          goto LABEL_18;
        case 3:
          int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_18;
        case 4:
          int v13 = *(_DWORD *)a2;
LABEL_18:
          int v14 = (v13 | (v11 << (8 * v5))) + 3;
          unsigned int v10 = v13 + 3;
          if (v5 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 2)
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v5) = 2;
    }
    else if (v10 == 1)
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v5) = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v5) = 0;
    }
  }
  else
  {
    uint64_t v9 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return v3;
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed A.RawRepresentable.RawValue) -> (@out A?)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, double)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Optional();
  double v9 = MEMORY[0x1F4188790](v8 - 8);
  unsigned int v11 = (char *)&v15 - v10;
  a2(a1, v9);
  uint64_t v12 = *(void *)(a3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3);
  if (result == 1)
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    *(void *)(a4 + 24) = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a4);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, a3);
  }
  return result;
}

{
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;

  uint64_t v8 = type metadata accessor for Optional();
  double v9 = MEMORY[0x1F4188790](v8 - 8);
  unsigned int v11 = (char *)&v15 - v10;
  a2(a1, v9);
  uint64_t v12 = *(void *)(a3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3);
  if (result == 1)
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    *(void *)(a4 + 24) = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a4);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, a3);
  }
  return result;
}

uint64_t TransformBox.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 112) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 128));

  return swift_deallocClassInstance();
}

uint64_t TransformBox.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 112) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 128));
}

uint64_t initializeWithCopy for TaskPhase(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unsigned int v5 = a2[v4];
  if (v5 >= 3)
  {
    if (v4 <= 3) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a2;
        goto LABEL_10;
      case 2:
        int v7 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v7 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v7 = *(_DWORD *)a2;
LABEL_10:
        int v8 = (v7 | ((v5 - 3) << (8 * v4))) + 3;
        char v9 = v7 + 3;
        if (v4 >= 4) {
          LOBYTE(v5) = v9;
        }
        else {
          LOBYTE(v5) = v8;
        }
        break;
      default:
        break;
    }
  }
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
  *(unsigned char *)(a1 + v4) = v5;
  return a1;
}

void TaskGesturePhase.Handler.enqueue(phase:)(uint64_t a1)
{
  double v2 = v1;
  uint64_t v32 = a1;
  uint64_t v30 = *v1;
  uint64_t v3 = v30;
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for TaskPhase();
  uint64_t v29 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v31 = (char *)&v25 - v5;
  uint64_t v6 = type metadata accessor for AsyncStream.Continuation.YieldResult();
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v28 = v6;
  MEMORY[0x1F4188790](v6);
  int v8 = (char *)&v25 - v7;
  uint64_t v9 = type metadata accessor for AsyncStream.Continuation();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  int v13 = (char *)&v25 - v12;
  uint64_t v14 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v25 - v16;
  if ((*((unsigned char *)v2 + *(void *)(v3 + 112)) & 1) == 0)
  {
    uint64_t v26 = *(void *)(v3 + 112);
    uint64_t v18 = (char *)v2 + *(void *)(v30 + 96);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v18, v10);
    int v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v9);
    uint64_t v20 = (void (**)(char *, uint64_t, uint64_t))(v29 + 16);
    if (v19 == 1)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      (*v20)(v31, v32, v4);
      swift_beginAccess();
      type metadata accessor for Array();
      Array.append(_:)();
      swift_endAccess();
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v13, v9);
      (*v20)(v31, v32, v4);
      AsyncStream.Continuation.yield(_:)();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v9);
      uint64_t v22 = v27;
      uint64_t v21 = v28;
      int v23 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v8, v28);
      int v24 = *MEMORY[0x1E4FBD008];
      (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v21);
      if (v23 == v24) {
        *((unsigned char *)v2 + v26) = 1;
      }
    }
  }
}

uint64_t View.applyContainerBackground<A>(for:isEnabled:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  *(void *)(v9 + 32) = a5;
  *(unsigned char *)(v9 + 40) = a2;
  static Alignment.center.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<ContainerBackgroundKind?>(0, &lazy cache variable for type metadata for AnyView??, &lazy cache variable for type metadata for AnyView?, MEMORY[0x1E4F41618], MEMORY[0x1E4FBB718]);
  lazy protocol witness table accessor for type AnyView?? and conformance <A> A?();
  View.backgroundPreferenceValue<A, B>(_:alignment:_:)();

  return swift_release();
}

uint64_t View.containerBackground<A>(for:allowsVibrancy:alignment:content:)@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v25 = a8;
  uint64_t v28 = a7;
  uint64_t v30 = a6;
  uint64_t v29 = a5;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  int v33 = a2;
  uint64_t v34 = a9;
  uint64_t v26 = a11;
  uint64_t v27 = a10;
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for ZStack();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v24 - v15;
  type metadata accessor for _EnvironmentKeyWritingModifier<ContainerBackgroundKind?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ContainerBackgroundKind?>, &lazy cache variable for type metadata for ContainerBackgroundKind?, MEMORY[0x1E4F40C18], MEMORY[0x1E4F411E8]);
  uint64_t v17 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v17);
  uint64_t v18 = *a1;
  uint64_t v35 = a7;
  uint64_t v36 = v25;
  uint64_t v37 = a10;
  uint64_t v38 = v26;
  uint64_t v39 = v29;
  uint64_t v40 = v30;
  ZStack.init(alignment:content:)();
  swift_getKeyPath();
  if (v18 < 0) {
    char v19 = v18;
  }
  else {
    char v19 = 5;
  }
  LOBYTE(v41[0]) = v19;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  unint64_t v21 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ContainerBackgroundKind?> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v43 = WitnessTable;
  unint64_t v44 = v21;
  swift_getWitnessTable();
  uint64_t v22 = AnyView.init<A>(_:)();
  v41[0] = v18;
  v41[1] = v22;
  v41[2] = 0;
  char v42 = v33;
  MEMORY[0x18C113660](v41, v28, &type metadata for ContainerBackgroundModifier, v27);
  return swift_release();
}

uint64_t closure #1 in RawRepresentableTransform.readValue(from:key:read:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v3 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - v4, a1, v3);
  return dispatch thunk of RawRepresentable.init(rawValue:)();
}

uint64_t SceneStorage.init<A>(wrappedValue:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  type metadata accessor for TransformBox<PropertyListTransform<Bool>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Double>>, &lazy cache variable for type metadata for PropertyListTransform<Double>, MEMORY[0x1E4FBB3D0]);
  uint64_t result = swift_allocObject();
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(double *)(a3 + 32) = a4;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = result;
  return result;
}

uint64_t GroupBox<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v26 = a3;
  uint64_t v27 = a2;
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1E4F41420];
  uint64_t v29 = v18;
  uint64_t v30 = MEMORY[0x1E4F41418];
  uint64_t v31 = v19;
  uint64_t v20 = type metadata accessor for GroupBox();
  *(uint64_t *)((char *)a6 + *(int *)(v20 + 56)) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a1, a5);
  uint64_t v21 = Text.init<A>(_:)();
  *a6 = v21;
  a6[1] = v22;
  a6[2] = v23 & 1;
  a6[3] = v24;
  v27(v21, v22);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, a5);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))((char *)a6 + *(int *)(v20 + 52), v12, a4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<ContainerBackgroundKind?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for ContainerBackgroundKind?(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t specialized RawRepresentableTransform.writeValue(_:to:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = a2;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v21[-1] - v11;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v21[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)v22);
  int v17 = swift_dynamicCast();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if (v17)
  {
    v18(v12, 0, 1, a5);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, a5);
    v21[0] = a3;
    v21[1] = a4;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    v21[3] = swift_getAssociatedTypeWitness();
    __swift_allocate_boxed_opaque_existential_1(v21);
    dispatch thunk of RawRepresentable.rawValue.getter();
    specialized Dictionary.subscript.setter((uint64_t)v21, (uint64_t)v22);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, a5);
  }
  else
  {
    v18(v12, 1, 1, a5);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

uint64_t GroupBox<>.init(_:content:)@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t *a2@<X8>)
{
  *(uint64_t *)((char *)a2 + *(int *)(type metadata accessor for GroupBox() + 56)) = 0;
  uint64_t v4 = Text.init(_:tableName:bundle:comment:)();
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v5 & 1;
  a2[3] = v7;
  return a1(v4, v6, v5, v7, v8, v9);
}

uint64_t type metadata accessor for GroupBox()
{
  return swift_getGenericMetadata();
}

uint64_t destroy for CommandGroup(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CommandOperation();
  uint64_t v3 = a1 + *(int *)(v2 + 20);
  outlined consume of Text.Storage(*(void *)v3, *(void *)(v3 + 8), *(unsigned char *)(v3 + 16));
  swift_bridgeObjectRelease();
  uint64_t v4 = v3 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  if (*(void *)(a1 + *(int *)(v2 + 24)))
  {
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for PlatformViewResponderBase()
{
  uint64_t result = type metadata singleton initialization cache for PlatformViewResponderBase;
  if (!type metadata singleton initialization cache for PlatformViewResponderBase) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance DetachedGeometryModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  _ViewInputs.withoutGeometryDependencies.getter();
  v7 &= v7 & 0xFFFFFFBF ^ 0x80;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v4 = swift_bridgeObjectRetain();
  a3(v4, &v6);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;
  int v17;
  long long v18;
  unsigned char v19[32];
  unsigned char v20[32];
  int v21;

  uint64_t v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v20[16] = v5;
  uint64_t v21 = *(_DWORD *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v18 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<PresentedSceneValueInputModifier>);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type PresentedSceneValueInput and conformance PresentedSceneValueInput();
  PropertyList.subscript.setter();
  uint64_t v9 = v18;
  uint64_t v10 = DWORD2(v18);
  uint64_t v11 = *(void *)v19;
  uint64_t v12 = *(_OWORD *)&v19[8];
  uint64_t v13 = *(void *)&v19[24];
  uint64_t v14 = *(void *)v20;
  uint64_t v15 = *(_OWORD *)&v20[8];
  uint64_t v16 = *(void *)&v20[24];
  int v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  int v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;
  int v17;
  long long v18;
  unsigned char v19[32];
  unsigned char v20[32];
  int v21;
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v19[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)uint64_t v20 = v4;
  *(_OWORD *)&v20[16] = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  uint64_t v18 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v19 = v5;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<CoordinateSpaceNameModifier>);
  _GraphValue.value.getter();
  _ViewInputs.transform.getter();
  _ViewInputs.animatedPosition()();
  uint64_t v10 = _ViewInputs.animatedCGSize()();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type CoordinateSpaceNameTransform and conformance CoordinateSpaceNameTransform();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.transform.setter();
  int v8 = v18;
  uint64_t v9 = DWORD2(v18);
  uint64_t v11 = *(void *)v19;
  uint64_t v12 = *(_OWORD *)&v19[8];
  uint64_t v13 = *(void *)&v19[24];
  uint64_t v14 = *(void *)v20;
  uint64_t v15 = *(_OWORD *)&v20[8];
  uint64_t v16 = *(void *)&v20[24];
  int v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v6 = swift_bridgeObjectRetain();
  a3(v6, &v8);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;
  int v17;
  long long v18;
  unsigned char v19[32];
  unsigned char v20[32];
  int v21;

  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(_DWORD *)(a2 + 56);
  uint64_t v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v20[16] = v5;
  uint64_t v21 = *(_DWORD *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v18 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)()) {
    PreferencesInputs.remove<A>(_:)();
  }
  uint64_t v9 = v18;
  uint64_t v10 = DWORD2(v18);
  uint64_t v11 = *(void *)v19;
  uint64_t v12 = *(_OWORD *)&v19[8];
  uint64_t v13 = *(void *)&v19[24];
  uint64_t v14 = *(void *)v20;
  uint64_t v15 = *(_OWORD *)&v20[8];
  uint64_t v16 = *(void *)&v20[24];
  int v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  int v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;
  int v17;
  long long v18;
  unsigned char v19[32];
  unsigned char v20[32];
  int v21;

  uint64_t v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v20[16] = v5;
  uint64_t v21 = *(_DWORD *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v18 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  LOBYTE(v9) = 1;
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  if (static SemanticFeature.isEnabled.getter()) {
    PreferencesInputs.remove<A>(_:)();
  }
  uint64_t v9 = v18;
  uint64_t v10 = DWORD2(v18);
  uint64_t v11 = *(void *)v19;
  uint64_t v12 = *(_OWORD *)&v19[8];
  uint64_t v13 = *(void *)&v19[24];
  uint64_t v14 = *(void *)v20;
  uint64_t v15 = *(_OWORD *)&v20[8];
  uint64_t v16 = *(void *)&v20[24];
  int v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  int v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;
  int v17;
  long long v18;
  unsigned char v19[32];
  unsigned char v20[32];
  int v21;

  uint64_t v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v20[16] = v5;
  uint64_t v21 = *(_DWORD *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v18 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  PreferencesInputs.remove<A>(_:)();
  PreferencesInputs.remove<A>(_:)();
  PreferencesInputs.remove<A>(_:)();
  PreferencesInputs.remove<A>(_:)();
  uint64_t v9 = v18;
  uint64_t v10 = DWORD2(v18);
  uint64_t v11 = *(void *)v19;
  uint64_t v12 = *(_OWORD *)&v19[8];
  uint64_t v13 = *(void *)&v19[24];
  uint64_t v14 = *(void *)v20;
  uint64_t v15 = *(_OWORD *)&v20[8];
  uint64_t v16 = *(void *)&v20[24];
  int v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  int v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;
  int v17;
  long long v18;
  unsigned char v19[32];
  unsigned char v20[32];
  int v21;

  uint64_t v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v20[16] = v5;
  uint64_t v21 = *(_DWORD *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v18 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<IndexViewPlacementModifier>);
  _GraphValue.value.getter();
  AGGraphGetValue();
  lazy protocol witness table accessor for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input();
  PropertyList.subscript.setter();
  uint64_t v9 = v18;
  uint64_t v10 = DWORD2(v18);
  uint64_t v11 = *(void *)v19;
  uint64_t v12 = *(_OWORD *)&v19[8];
  uint64_t v13 = *(void *)&v19[24];
  uint64_t v14 = *(void *)v20;
  uint64_t v15 = *(_OWORD *)&v20[8];
  uint64_t v16 = *(void *)&v20[24];
  int v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  int v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t associated type witness table accessor for View.Body : View in <> LabeledContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for OnScrollGeometryChangeModifier<A>.GeometryActionProvider(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t partial apply for closure #1 in ResolvedButtonStyleBody.StyleBodyAccessor.updateBody(of:changed:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[5];
  uint64_t v4 = (char *)(v3 + *(int *)(type metadata accessor for ResolvedButtonStyleBody() + 36));
  char v5 = *v4;
  char v6 = v4[1];
  LOBYTE(v4) = v4[2];
  v8[0] = v5;
  v8[1] = v6;
  _OWORD v8[2] = (_BYTE)v4;
  return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v2 + 24))(v8, v1, v2);
}

uint64_t protocol witness for ButtonStyle.makeBody(configuration:) in conformance PlainButtonStyleBase@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)v2;
  char v5 = *(unsigned char *)(v2 + 8);
  int v6 = *(unsigned __int8 *)(a1 + 2);
  outlined copy of Environment<Bool>.Content(v4, v5);
  char v7 = specialized Environment.wrappedValue.getter(v4, v5);
  outlined consume of Environment<Bool>.Content(v4, v5);
  double v8 = 1.0;
  if (v6) {
    double v8 = 0.75;
  }
  if (v7) {
    double v9 = v8;
  }
  else {
    double v9 = 0.5;
  }
  uint64_t result = static VerticalAlignment.center.getter();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  *(double *)(a2 + 24) = v9;
  return result;
}

__n128 BorderlessButtonStyleBase.makeBody(configuration:)@<Q0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v27 = a1[1];
  __int16 v28 = *a1;
  unsigned __int8 v29 = a1[2];
  long long v4 = v2[1];
  v50[0] = *v2;
  v50[1] = v4;
  *(_OWORD *)double v51 = v2[2];
  *(_OWORD *)&v51[9] = *(_OWORD *)((char *)v2 + 41);
  uint64_t v5 = static VerticalAlignment.center.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = swift_getKeyPath();
  uint64_t v8 = *(void *)v51;
  char v9 = v51[8];
  outlined copy of Environment<Bool>.Content(*(uint64_t *)v51, v51[8]);
  specialized Environment.wrappedValue.getter(*(uint64_t *)v51, v51[8], (void (*)(uint64_t, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, 0x536C6F72746E6F43, 0xEB00000000657A69, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content, &v30);
  outlined consume of Environment<Bool>.Content(v8, v9);
  if (v30 < 2u) {
    char v10 = 5;
  }
  else {
    char v10 = 6;
  }
  LOBYTE(v40) = v10;
  char v49 = 4;
  long long v11 = v2[1];
  long long v30 = *v2;
  long long v31 = v11;
  *(_OWORD *)uint64_t v32 = v2[2];
  *(_OWORD *)&v32[9] = *(_OWORD *)((char *)v2 + 41);
  BorderlessButtonStyleBase.defaultWeight.getter();
  uint64_t v12 = static Font.system(_:design:weight:)();
  static Semantics.v3.getter();
  char v13 = isLinkedOnOrAfter(_:)() & 1;
  uint64_t v14 = swift_getKeyPath();
  uint64_t v15 = *(void *)&v51[16];
  char v16 = v51[24];
  outlined copy of Environment<Bool>.Content(*(uint64_t *)&v51[16], v51[24]);
  char v17 = specialized Environment.wrappedValue.getter(v15, v16);
  outlined consume of Environment<Bool>.Content(v15, v16);
  if (v27) {
    __int16 v18 = 256;
  }
  else {
    __int16 v18 = 0;
  }
  long long v40 = (unint64_t)v5;
  __int16 v19 = v18 | v28;
  LOBYTE(v41) = 1;
  BYTE8(v41) = v29;
  if (v17) {
    unsigned int v20 = 0x10000;
  }
  else {
    unsigned int v20 = 0;
  }
  *(void *)&long long v42 = KeyPath;
  WORD4(v42) = 0;
  v43.n128_u64[0] = v7;
  v43.n128_u64[1] = v12;
  *(void *)&long long v44 = v14;
  BYTE8(v44) = v13;
  unsigned int v21 = HIWORD(v20);
  BYTE11(v44) = BYTE2(v20);
  *(_WORD *)((char *)&v44 + 9) = v19;
  outlined copy of Environment<Bool>.Content(KeyPath, 0);
  swift_retain();
  swift_retain();
  swift_retain();
  closure #2 in BorderlessButtonStyleBase.makeBody(configuration:)((uint64_t *)&v40, (uint64_t)v50, (uint64_t)&v30);
  outlined consume of Environment<Bool>.Content(KeyPath, 0);
  swift_release();
  swift_release();
  swift_release();
  *(_OWORD *)CGSize v48 = v38[0];
  *(_OWORD *)&v48[9] = *(_OWORD *)((char *)v38 + 9);
  long long v44 = v33;
  long long v45 = v34;
  long long v46 = v35;
  long long v47 = v36;
  long long v40 = v30;
  long long v41 = v31;
  long long v42 = *(_OWORD *)v32;
  __n128 v43 = *(__n128 *)&v32[16];
  char v49 = 1;
  char v39 = 0;
  long long v22 = *(_OWORD *)v48;
  *(_OWORD *)(a2 + 128) = v37;
  *(_OWORD *)(a2 + 144) = v22;
  *(_OWORD *)(a2 + 160) = *(_OWORD *)&v48[16];
  long long v23 = v45;
  *(_OWORD *)(a2 + 64) = v44;
  *(_OWORD *)(a2 + 80) = v23;
  long long v24 = v47;
  *(_OWORD *)(a2 + 96) = v46;
  *(_OWORD *)(a2 + 112) = v24;
  long long v25 = v41;
  *(_OWORD *)a2 = v40;
  *(_OWORD *)(a2 + 16) = v25;
  __n128 result = v43;
  *(_OWORD *)(a2 + 32) = v42;
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 176) = v5;
  *(void *)(a2 + 184) = 0;
  *(unsigned char *)(a2 + 192) = v49;
  *(unsigned char *)(a2 + 200) = v29;
  *(void *)(a2 + 208) = KeyPath;
  *(unsigned char *)(a2 + 216) = v39;
  *(unsigned char *)(a2 + 217) = 0;
  *(void *)(a2 + 224) = v7;
  *(void *)(a2 + 232) = v12;
  *(void *)(a2 + 240) = v14;
  *(unsigned char *)(a2 + 248) = v13;
  *(unsigned char *)(a2 + 251) = v21;
  *(_WORD *)(a2 + 249) = v19;
  return result;
}

uint64_t closure #2 in BorderlessButtonStyleBase.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = a1[1];
  uint64_t v23 = *a1;
  uint64_t v16 = a1[4];
  char v4 = *((unsigned char *)a1 + 40);
  char v20 = *((unsigned char *)a1 + 41);
  char v21 = *((unsigned char *)a1 + 24);
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  uint64_t v7 = a1[8];
  char v19 = *((unsigned char *)a1 + 72);
  __int16 v24 = *(_WORD *)((char *)a1 + 73);
  char v17 = *((unsigned char *)a1 + 16);
  char v18 = *((unsigned char *)a1 + 75);
  uint64_t v8 = *(void *)(a2 + 32);
  char v9 = *(unsigned char *)(a2 + 40);
  outlined copy of Environment<Bool>.Content(v16, v4);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v8, v9);
  specialized Environment.wrappedValue.getter(v8, v9, (void (*)(uint64_t, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, 0x536C6F72746E6F43, 0xEB00000000657A69, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content, &v25);
  outlined consume of Environment<Bool>.Content(v8, v9);
  char v10 = v25;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v12 = swift_getKeyPath();
  uint64_t v13 = swift_getKeyPath();
  uint64_t v14 = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  char v30 = 0;
  char v29 = 0;
  char v28 = 0;
  char v27 = 0;
  char v26 = 0;
  *(void *)a3 = v23;
  *(void *)(a3 + 8) = v22;
  *(unsigned char *)(a3 + 16) = v17;
  *(unsigned char *)(a3 + 24) = v21;
  *(void *)(a3 + 32) = v16;
  *(unsigned char *)(a3 + 40) = v4;
  *(unsigned char *)(a3 + 41) = v20;
  *(void *)(a3 + 48) = v5;
  *(void *)(a3 + 56) = v6;
  *(void *)(a3 + 64) = v7;
  *(unsigned char *)(a3 + 72) = v19;
  *(unsigned char *)(a3 + 75) = v18;
  *(_WORD *)(a3 + 73) = v24;
  *(unsigned char *)(a3 + 76) = v10;
  *(void *)(a3 + 80) = KeyPath;
  *(unsigned char *)(a3 + 88) = v30;
  *(void *)(a3 + 96) = v12;
  *(unsigned char *)(a3 + 104) = 0;
  *(unsigned char *)(a3 + 105) = v29;
  *(void *)(a3 + 112) = v13;
  *(unsigned char *)(a3 + 120) = v28;
  *(void *)(a3 + 128) = v14;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(unsigned char *)(a3 + 152) = 0;
  *(unsigned char *)(a3 + 153) = v27;
  *(void *)(a3 + 160) = result;
  *(unsigned char *)(a3 + 168) = v26;
  return result;
}

uint64_t BorderlessButtonStyleBase.defaultWeight.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 24);
  int v5 = *(unsigned __int8 *)(v0 + 25);
  outlined copy of Environment<KeyboardShortcut?>.Content(v1, v2, v3, v4, v5);
  specialized Environment.wrappedValue.getter(v1, v2, v3, v4 | (v5 << 8), (uint64_t)&v10);
  outlined consume of Environment<KeyboardShortcut?>.Content(v1, v2, v3, v4, v5);
  if (!v11)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v6 = v12;
  int v7 = v13;
  BOOL v8 = v10 == 13 && v11 == 0xE100000000000000;
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  if (!v6 && !v7)
  {
    return static Font.Weight.semibold.getter();
  }
LABEL_14:

  return static Font.Weight.regular.getter();
}

double BorderedButtonStyle_Phone.makeBody(configuration:)@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = *a1;
  char v5 = a1[1];
  char v6 = a1[2];
  uint64_t v7 = *(void *)v2;
  char v8 = *(unsigned char *)(v2 + 8);
  uint64_t v9 = *(void *)(v2 + 16);
  uint64_t v10 = *(unsigned __int8 *)(v2 + 24);
  uint64_t v11 = *(void *)(v2 + 32);
  uint64_t v12 = *(unsigned __int8 *)(v2 + 40);
  int v13 = *(unsigned __int8 *)(v2 + 41);
  uint64_t v14 = *(void *)(v2 + 48);
  uint64_t v15 = *(unsigned __int8 *)(v2 + 56);
  uint64_t v16 = *(void *)(v2 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v2 + 72);
  v60[0] = v4;
  v60[1] = v5;
  v60[2] = v6;
  uint64_t v49 = v7;
  char v50 = v8;
  uint64_t v51 = v9;
  char v52 = v10;
  uint64_t v53 = v11;
  char v54 = v12;
  char v55 = v13;
  uint64_t v56 = v14;
  char v57 = v15;
  uint64_t v58 = v16;
  uint64_t v18 = v16;
  uint64_t v29 = v16;
  char v59 = v17;
  swift_retain();
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v9, v10);
  outlined copy of Environment<CGFloat?>.Content(v11, v12, v13);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v14, v15);
  outlined copy of Environment<Color?>.Content(v18, v17);
  outlined copy of Environment<CGFloat?>.Content(v11, v12, v13);
  specialized Environment.wrappedValue.getter(v11, v12 | (v13 << 8), (uint64_t)&v47);
  outlined consume of Environment<CGFloat?>.Content(v11, v12, v13);
  uint64_t v45 = v47;
  char v46 = v48;
  ResolvedBorderedButton.init(configuration:style:borderShape:)(v60, &v49, &v45, (uint64_t)v30);
  swift_retain();
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v9, v10);
  outlined copy of Environment<CGFloat?>.Content(v11, v12, v13);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v14, v15);
  outlined copy of Environment<Color?>.Content(v29, v17);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v14, v15);
  specialized Environment.wrappedValue.getter(v14, v15, &v49);
  outlined consume of Environment<Bool?>.Content(v14, v15);
  swift_release();
  outlined consume of Environment<Bool?>.Content(v9, v10);
  outlined consume of Environment<CGFloat?>.Content(v11, v12, v13);
  outlined consume of Environment<Bool?>.Content(v14, v15);
  outlined consume of Environment<Color?>.Content(v29, v17);
  LOBYTE(v18) = v49 < 7u;
  uint64_t KeyPath = swift_getKeyPath();
  long long v20 = v42;
  *(_OWORD *)(a2 + 192) = v41;
  *(_OWORD *)(a2 + 208) = v20;
  *(_OWORD *)(a2 + 224) = v43;
  uint64_t v21 = v44;
  long long v22 = v38;
  *(_OWORD *)(a2 + 128) = v37;
  *(_OWORD *)(a2 + 144) = v22;
  long long v23 = v40;
  *(_OWORD *)(a2 + 160) = v39;
  *(_OWORD *)(a2 + 176) = v23;
  long long v24 = v34;
  *(_OWORD *)(a2 + 64) = v33;
  *(_OWORD *)(a2 + 80) = v24;
  long long v25 = v36;
  *(_OWORD *)(a2 + 96) = v35;
  *(_OWORD *)(a2 + 112) = v25;
  long long v26 = v30[1];
  *(_OWORD *)a2 = v30[0];
  *(_OWORD *)(a2 + 16) = v26;
  double result = *(double *)&v31;
  long long v28 = v32;
  *(_OWORD *)(a2 + 32) = v31;
  *(_OWORD *)(a2 + 48) = v28;
  *(void *)(a2 + 240) = v21;
  *(void *)(a2 + 248) = KeyPath;
  *(unsigned char *)(a2 + 256) = v18;
  return result;
}

uint64_t ResolvedBorderedButton.init(configuration:style:borderShape:)@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char v5 = *a1;
  char v6 = a1[1];
  char v7 = a1[2];
  uint64_t v8 = *a2;
  char v9 = *((unsigned char *)a2 + 8);
  uint64_t v10 = a2[2];
  char v11 = *((unsigned char *)a2 + 24);
  uint64_t v12 = a2[4];
  char v13 = *((unsigned char *)a2 + 40);
  char v23 = *((unsigned char *)a2 + 41);
  uint64_t v22 = a2[6];
  char v21 = *((unsigned char *)a2 + 56);
  uint64_t v20 = a2[8];
  char v19 = *((unsigned char *)a2 + 72);
  uint64_t v18 = *a3;
  char v17 = *((unsigned char *)a3 + 8);
  *(void *)a4 = swift_getKeyPath();
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = swift_getKeyPath();
  *(unsigned char *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = swift_getKeyPath();
  *(unsigned char *)(a4 + 48) = 0;
  *(void *)(a4 + 56) = swift_getKeyPath();
  *(unsigned char *)(a4 + 64) = 0;
  *(void *)(a4 + 72) = swift_getKeyPath();
  *(unsigned char *)(a4 + 80) = 0;
  *(unsigned char *)(a4 + 81) = v5;
  *(unsigned char *)(a4 + 82) = v6;
  *(unsigned char *)(a4 + 83) = v7;
  *(void *)(a4 + 88) = v8;
  *(unsigned char *)(a4 + 96) = v9;
  *(void *)(a4 + 104) = v10;
  *(unsigned char *)(a4 + 112) = v11;
  *(void *)(a4 + 120) = v12;
  *(unsigned char *)(a4 + 128) = v13;
  *(unsigned char *)(a4 + 129) = v23;
  *(void *)(a4 + 136) = v22;
  *(unsigned char *)(a4 + 144) = v21;
  *(void *)(a4 + 152) = v20;
  *(unsigned char *)(a4 + 160) = v19;
  *(void *)(a4 + 168) = v18;
  *(unsigned char *)(a4 + 176) = v17;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v15 = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)(a4 + 184) = KeyPath;
  *(unsigned char *)(a4 + 192) = 0;
  *(void *)(a4 + 208) = 0;
  *(void *)(a4 + 216) = 0;
  *(void *)(a4 + 200) = v15;
  *(_WORD *)(a4 + 224) = 0;
  *(void *)(a4 + 232) = result;
  *(unsigned char *)(a4 + 240) = 0;
  return result;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  if ((a2 & 0x100) != 0)
  {
    *(void *)a3 = result;
    *(unsigned char *)(a3 + 8) = a2 & 1;
  }
  else
  {
    outlined copy of Environment<CGFloat?>.Content(result, a2, 0);
    os_log_type_t v5 = static os_log_type_t.fault.getter();
    char v6 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v7 = v5;
    if (os_log_type_enabled(v6, v5))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x8000000188327EC0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v6, v7, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v9, -1, -1);
      MEMORY[0x18C119C60](v8, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<CGFloat?>.Content(v4, a2, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  os_log_type_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v4 = result;
  if ((a2 & 0x100) != 0)
  {
    *(void *)a3 = result;
    *(unsigned char *)(a3 + 8) = a2 & 1;
  }
  else
  {
    outlined copy of Environment<CGFloat?>.Content(result, a2, 0);
    os_log_type_t v5 = static os_log_type_t.fault.getter();
    char v6 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v7 = v5;
    if (os_log_type_enabled(v6, v5))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, 0x8000000188327F90, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v6, v7, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v9, -1, -1);
      MEMORY[0x18C119C60](v8, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<CGFloat?>.Content(v4, a2, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in Toggle.init<A>(toggledOn:label:)()
{
  return static ToggleState.stateFor<A, B>(item:in:)();
}

id specialized UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Binding();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v35 - v9;
  _s5UIKit25UIBackgroundConfigurationVSgMaTm_0(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v11 - 8);
  char v13 = (char *)&v35 - v12;
  uint64_t v39 = a2;
  if (*(void *)(a2 + 16) == 1)
  {
    uint64_t v14 = type metadata accessor for IndexPath();
    uint64_t v37 = *(void *)(v14 - 8);
    uint64_t v38 = v14;
    uint64_t v36 = v39 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80));
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    id v16 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

    if (v16)
    {
      type metadata accessor for AnyListCollectionViewCell();
      char v17 = (void *)swift_dynamicCastClass();
      if (v17)
      {
        id v18 = (id)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v17) + 0x70))();

        if (v18)
        {
          id v19 = objc_msgSend(v18, sel_identifier);
          type metadata accessor for ContextMenuIdentity();
          uint64_t v20 = swift_dynamicCastClass();
          if (v20)
          {
            uint64_t v21 = v20;
            uint64_t v22 = v37;
            uint64_t v23 = v38;
            (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v13, v36, v38);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v13, 0, 1, v23);
            uint64_t v24 = v21 + OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_sourceIndexPath;
            swift_beginAccess();
            outlined assign with take of UICellConfigurationState?((uint64_t)v13, v24, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
            swift_endAccess();
          }
          swift_unknownObjectRelease();
          return v18;
        }
      }
      else
      {
      }
    }
  }
  long long v25 = (void *)MEMORY[0x1E4FBC8C8];
  long long v26 = (char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x100);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v26, v7);
  int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v10, 1, v6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  id v18 = 0;
  if (v27 != 1)
  {
    UICollectionViewListCoordinatorBase.selectionStorage.getter();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    unint64_t v28 = WeakSelectionBasedStorage.$menu.getter();
    id v18 = 0;
    if ((v28 & 0x100000000) == 0)
    {
      int v29 = v28;
      uint64_t v30 = swift_allocObject();
      *(void *)(v30 + 16) = v39;
      *(void *)(v30 + 24) = v3;
      *(_DWORD *)(v30 + 32) = v29;
      long long v31 = self;
      aBlock[4] = partial apply for closure #1 in UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:);
      aBlock[5] = v30;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?);
      aBlock[3] = &block_descriptor_40_1;
      long long v32 = _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      long long v33 = v3;
      swift_retain();
      swift_release();
      id v18 = objc_msgSend(v31, sel_configurationWithIdentifier_previewProvider_actionProvider_, 0, 0, v32);
      swift_release();
      _Block_release(v32);
      objc_msgSend(v18, sel_setPreferredMenuElementOrder_, qword_188391BA8[*((char *)v33 + *(void *)((*v25 & *v33) + 0x120))]);
    }
  }
  return v18;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v82 = *a1;
      uint64_t v83 = -1;
      uint64_t v84 = 1;
      uint64_t v85 = *a1;
      do
      {
        double v86 = *(double *)(v82 + 16 * v84);
        uint64_t v87 = v83;
        uint64_t v88 = v85;
        do
        {
          if (v86 >= *(double *)v88) {
            break;
          }
          if (!v82) {
            goto LABEL_141;
          }
          uint64_t v89 = *(void *)(v88 + 24);
          *(_OWORD *)(v88 + 16) = *(_OWORD *)v88;
          *(double *)uint64_t v88 = v86;
          *(void *)(v88 + 8) = v89;
          v88 -= 16;
        }
        while (!__CFADD__(v87++, 1));
        ++v84;
        v85 += 16;
        --v83;
      }
      while (v84 != v3);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v6 = result;
  double v99 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    __dst = (double *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
LABEL_103:
      uint64_t v91 = v12;
      uint64_t v102 = v9;
      if (v13 >= 2)
      {
        uint64_t v92 = *v99;
        do
        {
          unint64_t v93 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_132;
          }
          if (!v92) {
            goto LABEL_145;
          }
          uint64_t v94 = v91;
          uint64_t v95 = *(void *)&v91[16 * v93 + 32];
          uint64_t v96 = *(void *)&v91[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v92 + 16 * v95), (double *)(v92 + 16 * *(void *)&v91[16 * v13 + 16]), v92 + 16 * v96, __dst);
          if (v1) {
            break;
          }
          if (v96 < v95) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v94 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v94);
          }
          if (v93 >= *((void *)v94 + 2)) {
            goto LABEL_134;
          }
          uint64_t v97 = &v94[16 * v93 + 32];
          *(void *)uint64_t v97 = v95;
          *((void *)v97 + 1) = v96;
          unint64_t v98 = *((void *)v94 + 2);
          if (v13 > v98) {
            goto LABEL_135;
          }
          memmove(&v94[16 * v13 + 16], &v94[16 * v13 + 32], 16 * (v98 - v13));
          uint64_t v91 = v94;
          *((void *)v94 + 2) = v98 - 1;
          unint64_t v13 = v98 - 1;
        }
        while (v98 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v102 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v102 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    type metadata accessor for ClosedRange<CGFloat>();
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v102 = v8;
    __dst = (double *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v100 = *a1 - 16;
  uint64_t v101 = *a1 + 32;
  uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  Swift::Int v103 = v6;
  Swift::Int v104 = v3;
  uint64_t v105 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      double v15 = *(double *)(v11 + 16 * v10);
      double v16 = *(double *)(v11 + 16 * v14);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        char v17 = (double *)(v101 + 16 * v14);
        double v18 = v15;
        while (1)
        {
          double v19 = v18;
          double v18 = *v17;
          if (v15 < v16 == *v17 >= v19) {
            break;
          }
          ++v10;
          v17 += 2;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_138;
        }
        if (v14 < v10)
        {
          uint64_t v20 = (long long *)(v100 + 16 * v10);
          Swift::Int v21 = v10;
          Swift::Int v22 = v14;
          uint64_t v23 = (long long *)(v11 + 16 * v14);
          do
          {
            if (v22 != --v21)
            {
              if (!v11) {
                goto LABEL_144;
              }
              long long v24 = *v23;
              *uint64_t v23 = *v20;
              *uint64_t v20 = v24;
            }
            ++v22;
            --v20;
            ++v23;
          }
          while (v22 < v21);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_136;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    Swift::Int v25 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_139;
    }
    if (v25 >= v3) {
      Swift::Int v25 = v3;
    }
    if (v25 < v14) {
      break;
    }
    if (v10 != v25)
    {
      uint64_t v26 = v100 + 16 * v10;
      do
      {
        double v27 = *(double *)(v11 + 16 * v10);
        Swift::Int v28 = v14;
        uint64_t v29 = v26;
        do
        {
          if (v27 >= *(double *)v29) {
            break;
          }
          if (!v11) {
            goto LABEL_142;
          }
          uint64_t v30 = *(void *)(v29 + 24);
          *(_OWORD *)(v29 + 16) = *(_OWORD *)v29;
          *(double *)uint64_t v29 = v27;
          *(void *)(v29 + 8) = v30;
          v29 -= 16;
          ++v28;
        }
        while (v10 != v28);
        ++v10;
        v26 += 16;
      }
      while (v10 != v25);
      Swift::Int v10 = v25;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v32 = *((void *)v12 + 2);
    unint64_t v31 = *((void *)v12 + 3);
    unint64_t v13 = v32 + 1;
    uint64_t v11 = v105;
    if (v32 >= v31 >> 1)
    {
      long long v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v12);
      uint64_t v11 = v105;
      uint64_t v12 = v81;
    }
    *((void *)v12 + 2) = v13;
    long long v33 = v12 + 32;
    long long v34 = &v12[16 * v32 + 32];
    *(void *)long long v34 = v14;
    *((void *)v34 + 1) = v10;
    if (v32)
    {
      while (1)
      {
        unint64_t v35 = v13 - 1;
        if (v13 >= 4)
        {
          long long v40 = &v33[16 * v13];
          uint64_t v41 = *((void *)v40 - 8);
          uint64_t v42 = *((void *)v40 - 7);
          BOOL v46 = __OFSUB__(v42, v41);
          uint64_t v43 = v42 - v41;
          if (v46) {
            goto LABEL_120;
          }
          uint64_t v45 = *((void *)v40 - 6);
          uint64_t v44 = *((void *)v40 - 5);
          BOOL v46 = __OFSUB__(v44, v45);
          uint64_t v38 = v44 - v45;
          char v39 = v46;
          if (v46) {
            goto LABEL_121;
          }
          unint64_t v47 = v13 - 2;
          char v48 = &v33[16 * v13 - 32];
          uint64_t v50 = *(void *)v48;
          uint64_t v49 = *((void *)v48 + 1);
          BOOL v46 = __OFSUB__(v49, v50);
          uint64_t v51 = v49 - v50;
          if (v46) {
            goto LABEL_123;
          }
          BOOL v46 = __OFADD__(v38, v51);
          uint64_t v52 = v38 + v51;
          if (v46) {
            goto LABEL_126;
          }
          if (v52 >= v43)
          {
            CGPoint v70 = &v33[16 * v35];
            uint64_t v72 = *(void *)v70;
            uint64_t v71 = *((void *)v70 + 1);
            BOOL v46 = __OFSUB__(v71, v72);
            uint64_t v73 = v71 - v72;
            if (v46) {
              goto LABEL_130;
            }
            BOOL v63 = v38 < v73;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v64 = *((void *)v12 + 4);
            uint64_t v65 = *((void *)v12 + 5);
            BOOL v46 = __OFSUB__(v65, v64);
            uint64_t v57 = v65 - v64;
            char v58 = v46;
            goto LABEL_77;
          }
          uint64_t v37 = *((void *)v12 + 4);
          uint64_t v36 = *((void *)v12 + 5);
          BOOL v46 = __OFSUB__(v36, v37);
          uint64_t v38 = v36 - v37;
          char v39 = v46;
        }
        if (v39) {
          goto LABEL_122;
        }
        unint64_t v47 = v13 - 2;
        uint64_t v53 = &v33[16 * v13 - 32];
        uint64_t v55 = *(void *)v53;
        uint64_t v54 = *((void *)v53 + 1);
        BOOL v56 = __OFSUB__(v54, v55);
        uint64_t v57 = v54 - v55;
        char v58 = v56;
        if (v56) {
          goto LABEL_125;
        }
        char v59 = &v33[16 * v35];
        uint64_t v61 = *(void *)v59;
        uint64_t v60 = *((void *)v59 + 1);
        BOOL v46 = __OFSUB__(v60, v61);
        uint64_t v62 = v60 - v61;
        if (v46) {
          goto LABEL_128;
        }
        if (__OFADD__(v57, v62)) {
          goto LABEL_129;
        }
        if (v57 + v62 >= v38)
        {
          BOOL v63 = v38 < v62;
LABEL_83:
          if (v63) {
            unint64_t v35 = v47;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v58) {
          goto LABEL_124;
        }
        uint64_t v66 = &v33[16 * v35];
        uint64_t v68 = *(void *)v66;
        uint64_t v67 = *((void *)v66 + 1);
        BOOL v46 = __OFSUB__(v67, v68);
        uint64_t v69 = v67 - v68;
        if (v46) {
          goto LABEL_127;
        }
        if (v69 < v57) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v74 = v35 - 1;
        if (v35 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11) {
          goto LABEL_143;
        }
        uint64_t v75 = v12;
        int v76 = &v33[16 * v74];
        uint64_t v77 = *(void *)v76;
        uint64_t v78 = &v33[16 * v35];
        uint64_t v79 = *((void *)v78 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + 16 * *(void *)v76), (double *)(v11 + 16 * *(void *)v78), v11 + 16 * v79, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v79 < v77) {
          goto LABEL_117;
        }
        if (v35 > *((void *)v75 + 2)) {
          goto LABEL_118;
        }
        *(void *)int v76 = v77;
        *(void *)&v33[16 * v74 + 8] = v79;
        unint64_t v80 = *((void *)v75 + 2);
        if (v35 >= v80) {
          goto LABEL_119;
        }
        uint64_t v12 = v75;
        unint64_t v13 = v80 - 1;
        memmove(&v33[16 * v35], v78 + 16, 16 * (v80 - 1 - v35));
        *((void *)v75 + 2) = v80 - 1;
        uint64_t v11 = v105;
        if (v80 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v103;
    Swift::Int v3 = v104;
    if (v10 >= v104)
    {
      uint64_t v9 = v102;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  Swift::Int v16;
  uint64_t v17;
  Swift::Int v18;
  unint64_t v19;
  Swift::Int v20;
  int v21;
  int v22;
  int v23;
  uint64_t *v24;
  Swift::Int v25;
  Swift::Int v26;
  uint64_t *v27;
  uint64_t v28;
  Swift::Int v29;
  void *v30;
  uint64_t v31;
  Swift::Int v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  uint64_t *v117;
  Swift::Int v118;
  Swift::Int v119;
  uint64_t v120;
  Swift::Int v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *__dst;
  char *v126;
  char *v127;
  unint64_t v128;
  int64_t v129;
  uint64_t v130;

  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
    {
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      __break(1u);
LABEL_191:
      __break(1u);
LABEL_192:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_193;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v9 = 0;
      Swift::Int v10 = *a1;
      for (unint64_t i = 1; i != v3; ++i)
      {
        uint64_t v12 = *(void *)(v10 + 8 * i);
        unint64_t v13 = v9;
        do
        {
          Swift::Int v14 = *(void *)(v10 + v13);
          if (*(_DWORD *)(v12 + 184) - *(_DWORD *)(v14 + 184) >= 0) {
            break;
          }
          if (!v10) {
            goto LABEL_188;
          }
          *(void *)(v10 + v13 + 8) = v14;
          *(void *)(v10 + v13) = v12;
          v13 -= 8;
        }
        while (v13 != -8);
        v9 += 8;
      }
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1)
    {
LABEL_193:
      Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v117 = a1;
    uint64_t v118 = result;
    BOOL v120 = v1;
    if (v3 >= 2)
    {
      Swift::Int v6 = v5 >> 1;
      type metadata accessor for LazyLayoutCacheItem();
      uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
      uint64_t v8 = (char *)((v7 & 0xFFFFFFFFFFFFFF8) + 32);
      uint64_t v130 = v7;
      goto LABEL_18;
    }
    double v15 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v130 = MEMORY[0x1E4FBC860];
    uint64_t v8 = (char *)((MEMORY[0x1E4FBC860] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 == 1)
    {
LABEL_18:
      double v16 = 0;
      char v17 = *a1;
      uint64_t v122 = v17 - 8;
      double v15 = (char *)MEMORY[0x1E4FBC860];
      double v18 = v3;
      uint64_t v119 = v3;
      __dst = v8;
      while (1)
      {
        uint64_t v20 = v16 + 1;
        if (v16 + 1 < v18)
        {
          Swift::Int v21 = *(_DWORD *)(*(void *)(v17 + 8 * v20) + 184);
          Swift::Int v22 = v21 - *(_DWORD *)(*(void *)(v17 + 8 * v16) + 184);
          uint64_t v20 = v16 + 2;
          if (v16 + 2 < v18)
          {
            while (1)
            {
              uint64_t v23 = *(_DWORD *)(*(void *)(v17 + 8 * v20) + 184);
              if (((v23 - v21) ^ v22) < 0) {
                break;
              }
              ++v20;
              Swift::Int v21 = v23;
              if (v18 == v20)
              {
                uint64_t v20 = v18;
                break;
              }
            }
          }
          if (v22 < 0)
          {
            if (v20 < v16) {
              goto LABEL_185;
            }
            if (v16 < v20)
            {
              long long v24 = (uint64_t *)(v122 + 8 * v20);
              Swift::Int v25 = v20;
              uint64_t v26 = v16;
              double v27 = (uint64_t *)(v17 + 8 * v16);
              do
              {
                if (v26 != --v25)
                {
                  if (!v17) {
                    goto LABEL_190;
                  }
                  Swift::Int v28 = *v27;
                  *double v27 = *v24;
                  *long long v24 = v28;
                }
                ++v26;
                --v24;
                ++v27;
              }
              while (v26 < v25);
            }
          }
        }
        if (v20 < v18)
        {
          if (__OFSUB__(v20, v16)) {
            goto LABEL_178;
          }
          if (v20 - v16 < v118)
          {
            uint64_t v29 = v16 + v118;
            if (__OFADD__(v16, v118)) {
              goto LABEL_183;
            }
            if (v29 >= v18) {
              uint64_t v29 = v18;
            }
            if (v29 < v16) {
              goto LABEL_184;
            }
            if (v20 != v29)
            {
              uint64_t v30 = (void *)(v122 + 8 * v20);
              do
              {
                unint64_t v31 = *(void *)(v17 + 8 * v20);
                unint64_t v32 = v16;
                long long v33 = v30;
                do
                {
                  long long v34 = *v33;
                  if (*(_DWORD *)(v31 + 184) - *(_DWORD *)(*v33 + 184) >= 0) {
                    break;
                  }
                  if (!v17) {
                    goto LABEL_186;
                  }
                  char *v33 = v31;
                  v33[1] = v34;
                  --v33;
                  ++v32;
                }
                while (v20 != v32);
                ++v20;
                ++v30;
              }
              while (v20 != v29);
              uint64_t v20 = v29;
            }
          }
        }
        if (v20 < v16) {
          goto LABEL_177;
        }
        uint64_t v121 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v15 + 2) + 1, 1, v15);
        }
        uint64_t v8 = __dst;
        uint64_t v36 = *((void *)v15 + 2);
        unint64_t v35 = *((void *)v15 + 3);
        double v19 = v36 + 1;
        if (v36 >= v35 >> 1)
        {
          uint64_t v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v15);
          uint64_t v8 = __dst;
          double v15 = v109;
        }
        *((void *)v15 + 2) = v19;
        uint64_t v37 = v15 + 32;
        uint64_t v38 = &v15[16 * v36 + 32];
        *(void *)uint64_t v38 = v16;
        *((void *)v38 + 1) = v121;
        if (v36) {
          break;
        }
        double v19 = 1;
LABEL_20:
        double v18 = v119;
        double v16 = v121;
        if (v121 >= v119) {
          goto LABEL_149;
        }
      }
      uint64_t v123 = v15 + 32;
      uint64_t v124 = v15;
      while (1)
      {
        char v39 = v19 - 1;
        if (v19 >= 4)
        {
          uint64_t v44 = &v37[16 * v19];
          uint64_t v45 = *((void *)v44 - 8);
          BOOL v46 = *((void *)v44 - 7);
          uint64_t v50 = __OFSUB__(v46, v45);
          unint64_t v47 = v46 - v45;
          if (v50) {
            goto LABEL_166;
          }
          uint64_t v49 = *((void *)v44 - 6);
          char v48 = *((void *)v44 - 5);
          uint64_t v50 = __OFSUB__(v48, v49);
          uint64_t v42 = v48 - v49;
          uint64_t v43 = v50;
          if (v50) {
            goto LABEL_167;
          }
          uint64_t v51 = v19 - 2;
          uint64_t v52 = &v37[16 * v19 - 32];
          uint64_t v54 = *(void *)v52;
          uint64_t v53 = *((void *)v52 + 1);
          uint64_t v50 = __OFSUB__(v53, v54);
          uint64_t v55 = v53 - v54;
          if (v50) {
            goto LABEL_169;
          }
          uint64_t v50 = __OFADD__(v42, v55);
          BOOL v56 = v42 + v55;
          if (v50) {
            goto LABEL_172;
          }
          if (v56 >= v47)
          {
            unint64_t v74 = &v37[16 * v39];
            int v76 = *(void *)v74;
            uint64_t v75 = *((void *)v74 + 1);
            uint64_t v50 = __OFSUB__(v75, v76);
            uint64_t v77 = v75 - v76;
            if (v50) {
              goto LABEL_176;
            }
            uint64_t v67 = v42 < v77;
            goto LABEL_89;
          }
        }
        else
        {
          if (v19 != 3)
          {
            uint64_t v68 = *((void *)v15 + 4);
            uint64_t v69 = *((void *)v15 + 5);
            uint64_t v50 = __OFSUB__(v69, v68);
            uint64_t v61 = v69 - v68;
            uint64_t v62 = v50;
            goto LABEL_83;
          }
          uint64_t v41 = *((void *)v15 + 4);
          long long v40 = *((void *)v15 + 5);
          uint64_t v50 = __OFSUB__(v40, v41);
          uint64_t v42 = v40 - v41;
          uint64_t v43 = v50;
        }
        if (v43) {
          goto LABEL_168;
        }
        uint64_t v51 = v19 - 2;
        uint64_t v57 = &v37[16 * v19 - 32];
        char v59 = *(void *)v57;
        char v58 = *((void *)v57 + 1);
        uint64_t v60 = __OFSUB__(v58, v59);
        uint64_t v61 = v58 - v59;
        uint64_t v62 = v60;
        if (v60) {
          goto LABEL_171;
        }
        BOOL v63 = &v37[16 * v39];
        uint64_t v65 = *(void *)v63;
        uint64_t v64 = *((void *)v63 + 1);
        uint64_t v50 = __OFSUB__(v64, v65);
        uint64_t v66 = v64 - v65;
        if (v50) {
          goto LABEL_174;
        }
        if (__OFADD__(v61, v66)) {
          goto LABEL_175;
        }
        if (v61 + v66 >= v42)
        {
          uint64_t v67 = v42 < v66;
LABEL_89:
          if (v67) {
            char v39 = v51;
          }
          goto LABEL_91;
        }
LABEL_83:
        if (v62) {
          goto LABEL_170;
        }
        CGPoint v70 = &v37[16 * v39];
        uint64_t v72 = *(void *)v70;
        uint64_t v71 = *((void *)v70 + 1);
        uint64_t v50 = __OFSUB__(v71, v72);
        uint64_t v73 = v71 - v72;
        if (v50) {
          goto LABEL_173;
        }
        if (v73 < v61) {
          goto LABEL_20;
        }
LABEL_91:
        if (v39 - 1 >= v19)
        {
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
          goto LABEL_179;
        }
        if (!v17) {
          goto LABEL_189;
        }
        uint64_t v128 = v39 - 1;
        uint64_t v127 = &v37[16 * v39 - 16];
        uint64_t v78 = *(void *)v127;
        uint64_t v129 = v39;
        uint64_t v79 = &v37[16 * v39];
        long long v81 = *(void *)v79;
        unint64_t v80 = *((void *)v79 + 1);
        uint64_t v126 = v79;
        uint64_t v82 = (char *)(v17 + 8 * *(void *)v127);
        uint64_t v83 = (char *)(v17 + 8 * *(void *)v79);
        uint64_t v84 = v17;
        uint64_t v85 = v17 + 8 * v80;
        double v86 = v83 - v82;
        uint64_t v87 = v83 - v82 + 7;
        if (v83 - v82 >= 0) {
          uint64_t v87 = v83 - v82;
        }
        uint64_t v88 = v87 >> 3;
        uint64_t v89 = v85 - (void)v83;
        uint64_t v90 = v85 - (void)v83 + 7;
        if ((uint64_t)(v85 - (void)v83) >= 0) {
          uint64_t v90 = v85 - (void)v83;
        }
        uint64_t v91 = v90 >> 3;
        if (v88 >= v90 >> 3)
        {
          if (v89 < -7) {
            goto LABEL_192;
          }
          if ((unint64_t)v8 >= v85 || v8 != v83)
          {
            uint64_t v97 = v80;
            memmove(v8, v83, 8 * v91);
            unint64_t v80 = v97;
            uint64_t v8 = __dst;
          }
          unint64_t v93 = &v8[8 * v91];
          if (v78 >= v81 || v89 < 8)
          {
            uint64_t v94 = v8;
            char v17 = v84;
            goto LABEL_137;
          }
          unint64_t v98 = (char *)(v122 + 8 * v80);
          double v99 = v83;
          char v17 = v84;
          while (2)
          {
            uint64_t v100 = v98 + 8;
            uint64_t v102 = *((void *)v99 - 1);
            v99 -= 8;
            uint64_t v101 = v102;
            if (*(_DWORD *)(*((void *)v93 - 1) + 184) - *(_DWORD *)(v102 + 184) < 0)
            {
              if (v100 != v83 || v98 >= v83) {
                goto LABEL_130;
              }
            }
            else
            {
              uint64_t v101 = *((void *)v93 - 1);
              double v99 = v83;
              if (v100 == v93)
              {
                Swift::Int v103 = v98 >= v93;
                v93 -= 8;
                if (!v103) {
                  goto LABEL_131;
                }
              }
              else
              {
                v93 -= 8;
              }
LABEL_130:
              *(void *)unint64_t v98 = v101;
            }
LABEL_131:
            if (v82 >= v99 || (v98 -= 8, uint64_t v83 = v99, v8 >= v93))
            {
              uint64_t v94 = v8;
              uint64_t v83 = v99;
              goto LABEL_137;
            }
            continue;
          }
        }
        if (v86 < -7) {
          goto LABEL_192;
        }
        char v17 = v84;
        if (v8 != v82 || v8 >= v83)
        {
          uint64_t v92 = v80;
          memmove(v8, v82, 8 * v88);
          unint64_t v80 = v92;
          uint64_t v8 = __dst;
        }
        unint64_t v93 = &v8[8 * v88];
        if (v81 < v80 && v86 >= 8)
        {
          uint64_t v94 = v8;
          while (1)
          {
            uint64_t v95 = *(void *)v83;
            if (*(_DWORD *)(*(void *)v83 + 184) - *(_DWORD *)(*(void *)v94 + 184) >= 0) {
              break;
            }
            uint64_t v96 = v82 == v83;
            v83 += 8;
            if (!v96) {
              goto LABEL_107;
            }
LABEL_108:
            v82 += 8;
            if (v94 >= v93 || (unint64_t)v83 >= v85) {
              goto LABEL_135;
            }
          }
          uint64_t v95 = *(void *)v94;
          uint64_t v96 = v82 == v94;
          v94 += 8;
          if (v96) {
            goto LABEL_108;
          }
LABEL_107:
          *(void *)uint64_t v82 = v95;
          goto LABEL_108;
        }
        uint64_t v94 = v8;
LABEL_135:
        uint64_t v83 = v82;
LABEL_137:
        Swift::Int v104 = v93 - v94;
        uint64_t v105 = v93 - v94 + 7;
        if (v104 >= 0) {
          uint64_t v105 = v104;
        }
        if (v104 <= -8) {
          goto LABEL_192;
        }
        double v106 = v105 >> 3;
        if (v83 != v94 || v83 >= &v94[8 * v106])
        {
          char v107 = v80;
          memmove(v83, v94, 8 * v106);
          unint64_t v80 = v107;
        }
        if (v80 < v78) {
          goto LABEL_163;
        }
        double v15 = v124;
        if (v129 > *((void *)v124 + 2)) {
          goto LABEL_164;
        }
        *(void *)uint64_t v127 = v78;
        uint64_t v37 = v123;
        *(void *)&v123[16 * v128 + 8] = v80;
        char v108 = *((void *)v124 + 2);
        if (v129 >= (uint64_t)v108) {
          goto LABEL_165;
        }
        double v19 = v108 - 1;
        memmove(v126, v126 + 16, 16 * (v108 - 1 - v129));
        *((void *)v124 + 2) = v108 - 1;
        uint64_t v8 = __dst;
        if (v108 <= 2) {
          goto LABEL_20;
        }
      }
    }
    double v19 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_149:
    if (v19 >= 2)
    {
      uint64_t v110 = *v117;
      while (1)
      {
        uint64_t v111 = v19 - 2;
        if (v19 < 2) {
          break;
        }
        if (!v110) {
          goto LABEL_191;
        }
        char v112 = v8;
        uint64_t v113 = *(void *)&v15[16 * v111 + 32];
        uint64_t v114 = *(void *)&v15[16 * v19 + 24];
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v110 + 8 * v113), (char *)(v110 + 8 * *(void *)&v15[16 * v19 + 16]), v110 + 8 * v114, v8);
        if (v120) {
          goto LABEL_160;
        }
        if (v114 < v113) {
          goto LABEL_180;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v15 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v15);
        }
        if (v111 >= *((void *)v15 + 2)) {
          goto LABEL_181;
        }
        char v115 = &v15[16 * v111 + 32];
        *(void *)char v115 = v113;
        *((void *)v115 + 1) = v114;
        uint64_t v116 = *((void *)v15 + 2);
        if (v19 > v116) {
          goto LABEL_182;
        }
        memmove(&v15[16 * v19 + 16], &v15[16 * v19 + 32], 16 * (v116 - v19));
        *((void *)v15 + 2) = v116 - 1;
        double v19 = v116 - 1;
        uint64_t v8 = v112;
        if (v116 <= 2) {
          goto LABEL_160;
        }
      }
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
      goto LABEL_187;
    }
LABEL_160:
    swift_bridgeObjectRelease();
    *(void *)((v130 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
    specialized Array._endMutation()();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  long long *v20;
  Swift::Int v21;
  Swift::Int v22;
  long long *v23;
  long long v24;
  Swift::Int v25;
  double *v26;
  double v27;
  Swift::Int v28;
  double *v29;
  double v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t i;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  Swift::Int v104;
  uint64_t v105;
  double *__dst;

  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v82 = *a1;
      uint64_t v83 = *a1 + 8;
      uint64_t v84 = -1;
      for (unint64_t i = 1; i != v3; ++i)
      {
        double v86 = *(double *)(v82 + 16 * i + 8);
        uint64_t v87 = v84;
        uint64_t v88 = v83;
        do
        {
          if (v86 > *(double *)v88) {
            break;
          }
          if (!v82) {
            goto LABEL_141;
          }
          uint64_t v89 = *(void *)(v88 + 8);
          *(_OWORD *)(v88 + 8) = *(_OWORD *)(v88 - 8);
          *(void *)(v88 - 8) = v89;
          *(double *)uint64_t v88 = v86;
          v88 -= 16;
        }
        while (!__CFADD__(v87++, 1));
        v83 += 16;
        --v84;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v6 = result;
  uint64_t v100 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    __dst = (double *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
LABEL_103:
      uint64_t v91 = v12;
      uint64_t v102 = v9;
      if (v13 >= 2)
      {
        uint64_t v92 = *v100;
        do
        {
          unint64_t v93 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_132;
          }
          if (!v92) {
            goto LABEL_145;
          }
          uint64_t v94 = v91;
          uint64_t v95 = *(void *)&v91[16 * v93 + 32];
          uint64_t v96 = *(void *)&v91[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v92 + 16 * v95), (double *)(v92 + 16 * *(void *)&v91[16 * v13 + 16]), v92 + 16 * v96, __dst);
          if (v1) {
            break;
          }
          if (v96 < v95) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v94 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v94);
          }
          if (v93 >= *((void *)v94 + 2)) {
            goto LABEL_134;
          }
          uint64_t v97 = &v94[16 * v93 + 32];
          *(void *)uint64_t v97 = v95;
          *((void *)v97 + 1) = v96;
          unint64_t v98 = *((void *)v94 + 2);
          if (v13 > v98) {
            goto LABEL_135;
          }
          memmove(&v94[16 * v13 + 16], &v94[16 * v13 + 32], 16 * (v98 - v13));
          uint64_t v91 = v94;
          *((void *)v94 + 2) = v98 - 1;
          unint64_t v13 = v98 - 1;
        }
        while (v98 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v102 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v102 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    type metadata accessor for ClosedRange<CGFloat>();
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v102 = v8;
    __dst = (double *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v101 = *a1 + 40;
  double v99 = *a1 - 16;
  uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  Swift::Int v103 = v6;
  Swift::Int v104 = v3;
  uint64_t v105 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      double v15 = *(double *)(v11 + 16 * v10 + 8);
      double v16 = *(double *)(v11 + 16 * v14 + 8);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        char v17 = (double *)(v101 + 16 * v14);
        double v18 = v15;
        while (1)
        {
          double v19 = v18;
          double v18 = *v17;
          if (v15 <= v16 == *v17 > v19) {
            break;
          }
          ++v10;
          v17 += 2;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v15 <= v16)
      {
        if (v10 < v14) {
          goto LABEL_138;
        }
        if (v14 < v10)
        {
          uint64_t v20 = (long long *)(v99 + 16 * v10);
          Swift::Int v21 = v10;
          Swift::Int v22 = v14;
          uint64_t v23 = (long long *)(v11 + 16 * v14);
          do
          {
            if (v22 != --v21)
            {
              if (!v11) {
                goto LABEL_144;
              }
              long long v24 = *v23;
              *uint64_t v23 = *v20;
              *uint64_t v20 = v24;
            }
            ++v22;
            --v20;
            ++v23;
          }
          while (v22 < v21);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_136;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    Swift::Int v25 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_139;
    }
    if (v25 >= v3) {
      Swift::Int v25 = v3;
    }
    if (v25 < v14) {
      break;
    }
    if (v10 != v25)
    {
      uint64_t v26 = (double *)(v11 + 16 * v10);
      do
      {
        double v27 = *(double *)(v11 + 16 * v10 + 8);
        Swift::Int v28 = v14;
        uint64_t v29 = v26;
        do
        {
          if (v27 > *(v29 - 1)) {
            break;
          }
          if (!v11) {
            goto LABEL_142;
          }
          uint64_t v30 = *v29;
          *(_OWORD *)uint64_t v29 = *((_OWORD *)v29 - 1);
          *(v29 - 1) = v27;
          *(v29 - 2) = v30;
          v29 -= 2;
          ++v28;
        }
        while (v10 != v28);
        ++v10;
        v26 += 2;
      }
      while (v10 != v25);
      Swift::Int v10 = v25;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v32 = *((void *)v12 + 2);
    unint64_t v31 = *((void *)v12 + 3);
    unint64_t v13 = v32 + 1;
    uint64_t v11 = v105;
    if (v32 >= v31 >> 1)
    {
      long long v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v12);
      uint64_t v11 = v105;
      uint64_t v12 = v81;
    }
    *((void *)v12 + 2) = v13;
    long long v33 = v12 + 32;
    long long v34 = &v12[16 * v32 + 32];
    *(void *)long long v34 = v14;
    *((void *)v34 + 1) = v10;
    if (v32)
    {
      while (1)
      {
        unint64_t v35 = v13 - 1;
        if (v13 >= 4)
        {
          long long v40 = &v33[16 * v13];
          uint64_t v41 = *((void *)v40 - 8);
          uint64_t v42 = *((void *)v40 - 7);
          BOOL v46 = __OFSUB__(v42, v41);
          uint64_t v43 = v42 - v41;
          if (v46) {
            goto LABEL_120;
          }
          uint64_t v45 = *((void *)v40 - 6);
          uint64_t v44 = *((void *)v40 - 5);
          BOOL v46 = __OFSUB__(v44, v45);
          uint64_t v38 = v44 - v45;
          char v39 = v46;
          if (v46) {
            goto LABEL_121;
          }
          unint64_t v47 = v13 - 2;
          char v48 = &v33[16 * v13 - 32];
          uint64_t v50 = *(void *)v48;
          uint64_t v49 = *((void *)v48 + 1);
          BOOL v46 = __OFSUB__(v49, v50);
          uint64_t v51 = v49 - v50;
          if (v46) {
            goto LABEL_123;
          }
          BOOL v46 = __OFADD__(v38, v51);
          uint64_t v52 = v38 + v51;
          if (v46) {
            goto LABEL_126;
          }
          if (v52 >= v43)
          {
            CGPoint v70 = &v33[16 * v35];
            uint64_t v72 = *(void *)v70;
            uint64_t v71 = *((void *)v70 + 1);
            BOOL v46 = __OFSUB__(v71, v72);
            uint64_t v73 = v71 - v72;
            if (v46) {
              goto LABEL_130;
            }
            BOOL v63 = v38 < v73;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v64 = *((void *)v12 + 4);
            uint64_t v65 = *((void *)v12 + 5);
            BOOL v46 = __OFSUB__(v65, v64);
            uint64_t v57 = v65 - v64;
            char v58 = v46;
            goto LABEL_77;
          }
          uint64_t v37 = *((void *)v12 + 4);
          uint64_t v36 = *((void *)v12 + 5);
          BOOL v46 = __OFSUB__(v36, v37);
          uint64_t v38 = v36 - v37;
          char v39 = v46;
        }
        if (v39) {
          goto LABEL_122;
        }
        unint64_t v47 = v13 - 2;
        uint64_t v53 = &v33[16 * v13 - 32];
        uint64_t v55 = *(void *)v53;
        uint64_t v54 = *((void *)v53 + 1);
        BOOL v56 = __OFSUB__(v54, v55);
        uint64_t v57 = v54 - v55;
        char v58 = v56;
        if (v56) {
          goto LABEL_125;
        }
        char v59 = &v33[16 * v35];
        uint64_t v61 = *(void *)v59;
        uint64_t v60 = *((void *)v59 + 1);
        BOOL v46 = __OFSUB__(v60, v61);
        uint64_t v62 = v60 - v61;
        if (v46) {
          goto LABEL_128;
        }
        if (__OFADD__(v57, v62)) {
          goto LABEL_129;
        }
        if (v57 + v62 >= v38)
        {
          BOOL v63 = v38 < v62;
LABEL_83:
          if (v63) {
            unint64_t v35 = v47;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v58) {
          goto LABEL_124;
        }
        uint64_t v66 = &v33[16 * v35];
        uint64_t v68 = *(void *)v66;
        uint64_t v67 = *((void *)v66 + 1);
        BOOL v46 = __OFSUB__(v67, v68);
        uint64_t v69 = v67 - v68;
        if (v46) {
          goto LABEL_127;
        }
        if (v69 < v57) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v74 = v35 - 1;
        if (v35 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11) {
          goto LABEL_143;
        }
        uint64_t v75 = v12;
        int v76 = &v33[16 * v74];
        uint64_t v77 = *(void *)v76;
        uint64_t v78 = &v33[16 * v35];
        uint64_t v79 = *((void *)v78 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + 16 * *(void *)v76), (double *)(v11 + 16 * *(void *)v78), v11 + 16 * v79, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v79 < v77) {
          goto LABEL_117;
        }
        if (v35 > *((void *)v75 + 2)) {
          goto LABEL_118;
        }
        *(void *)int v76 = v77;
        *(void *)&v33[16 * v74 + 8] = v79;
        unint64_t v80 = *((void *)v75 + 2);
        if (v35 >= v80) {
          goto LABEL_119;
        }
        uint64_t v12 = v75;
        unint64_t v13 = v80 - 1;
        memmove(&v33[16 * v35], v78 + 16, 16 * (v80 - 1 - v35));
        *((void *)v75 + 2) = v80 - 1;
        uint64_t v11 = v105;
        if (v80 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v103;
    Swift::Int v3 = v104;
    if (v10 >= v104)
    {
      uint64_t v9 = v102;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  long long *v20;
  Swift::Int v21;
  Swift::Int v22;
  long long *v23;
  long long v24;
  Swift::Int v25;
  uint64_t v26;
  double v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  Swift::Int v104;
  uint64_t v105;
  double *__dst;

  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v82 = *a1;
      uint64_t v83 = -1;
      uint64_t v84 = 1;
      uint64_t v85 = *a1;
      do
      {
        double v86 = *(double *)(v82 + 16 * v84);
        uint64_t v87 = v83;
        uint64_t v88 = v85;
        do
        {
          if (v86 > *(double *)v88) {
            break;
          }
          if (!v82) {
            goto LABEL_141;
          }
          uint64_t v89 = *(void *)(v88 + 24);
          *(_OWORD *)(v88 + 16) = *(_OWORD *)v88;
          *(double *)uint64_t v88 = v86;
          *(void *)(v88 + 8) = v89;
          v88 -= 16;
        }
        while (!__CFADD__(v87++, 1));
        ++v84;
        v85 += 16;
        --v83;
      }
      while (v84 != v3);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v6 = result;
  double v99 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    __dst = (double *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
LABEL_103:
      uint64_t v91 = v12;
      uint64_t v102 = v9;
      if (v13 >= 2)
      {
        uint64_t v92 = *v99;
        do
        {
          unint64_t v93 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_132;
          }
          if (!v92) {
            goto LABEL_145;
          }
          uint64_t v94 = v91;
          uint64_t v95 = *(void *)&v91[16 * v93 + 32];
          uint64_t v96 = *(void *)&v91[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v92 + 16 * v95), (double *)(v92 + 16 * *(void *)&v91[16 * v13 + 16]), v92 + 16 * v96, __dst);
          if (v1) {
            break;
          }
          if (v96 < v95) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v94 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v94);
          }
          if (v93 >= *((void *)v94 + 2)) {
            goto LABEL_134;
          }
          uint64_t v97 = &v94[16 * v93 + 32];
          *(void *)uint64_t v97 = v95;
          *((void *)v97 + 1) = v96;
          unint64_t v98 = *((void *)v94 + 2);
          if (v13 > v98) {
            goto LABEL_135;
          }
          memmove(&v94[16 * v13 + 16], &v94[16 * v13 + 32], 16 * (v98 - v13));
          uint64_t v91 = v94;
          *((void *)v94 + 2) = v98 - 1;
          unint64_t v13 = v98 - 1;
        }
        while (v98 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v102 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v102 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    type metadata accessor for ClosedRange<CGFloat>();
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v102 = v8;
    __dst = (double *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v100 = *a1 - 16;
  uint64_t v101 = *a1 + 32;
  uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  Swift::Int v103 = v6;
  Swift::Int v104 = v3;
  uint64_t v105 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      double v15 = *(double *)(v11 + 16 * v10);
      double v16 = *(double *)(v11 + 16 * v14);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        char v17 = (double *)(v101 + 16 * v14);
        double v18 = v15;
        while (1)
        {
          double v19 = v18;
          double v18 = *v17;
          if (v15 <= v16 == *v17 > v19) {
            break;
          }
          ++v10;
          v17 += 2;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v15 <= v16)
      {
        if (v10 < v14) {
          goto LABEL_138;
        }
        if (v14 < v10)
        {
          uint64_t v20 = (long long *)(v100 + 16 * v10);
          Swift::Int v21 = v10;
          Swift::Int v22 = v14;
          uint64_t v23 = (long long *)(v11 + 16 * v14);
          do
          {
            if (v22 != --v21)
            {
              if (!v11) {
                goto LABEL_144;
              }
              long long v24 = *v23;
              *uint64_t v23 = *v20;
              *uint64_t v20 = v24;
            }
            ++v22;
            --v20;
            ++v23;
          }
          while (v22 < v21);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_136;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    Swift::Int v25 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_139;
    }
    if (v25 >= v3) {
      Swift::Int v25 = v3;
    }
    if (v25 < v14) {
      break;
    }
    if (v10 != v25)
    {
      uint64_t v26 = v100 + 16 * v10;
      do
      {
        double v27 = *(double *)(v11 + 16 * v10);
        Swift::Int v28 = v14;
        uint64_t v29 = v26;
        do
        {
          if (v27 > *(double *)v29) {
            break;
          }
          if (!v11) {
            goto LABEL_142;
          }
          uint64_t v30 = *(void *)(v29 + 24);
          *(_OWORD *)(v29 + 16) = *(_OWORD *)v29;
          *(double *)uint64_t v29 = v27;
          *(void *)(v29 + 8) = v30;
          v29 -= 16;
          ++v28;
        }
        while (v10 != v28);
        ++v10;
        v26 += 16;
      }
      while (v10 != v25);
      Swift::Int v10 = v25;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v32 = *((void *)v12 + 2);
    unint64_t v31 = *((void *)v12 + 3);
    unint64_t v13 = v32 + 1;
    uint64_t v11 = v105;
    if (v32 >= v31 >> 1)
    {
      long long v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v12);
      uint64_t v11 = v105;
      uint64_t v12 = v81;
    }
    *((void *)v12 + 2) = v13;
    long long v33 = v12 + 32;
    long long v34 = &v12[16 * v32 + 32];
    *(void *)long long v34 = v14;
    *((void *)v34 + 1) = v10;
    if (v32)
    {
      while (1)
      {
        unint64_t v35 = v13 - 1;
        if (v13 >= 4)
        {
          long long v40 = &v33[16 * v13];
          uint64_t v41 = *((void *)v40 - 8);
          uint64_t v42 = *((void *)v40 - 7);
          BOOL v46 = __OFSUB__(v42, v41);
          uint64_t v43 = v42 - v41;
          if (v46) {
            goto LABEL_120;
          }
          uint64_t v45 = *((void *)v40 - 6);
          uint64_t v44 = *((void *)v40 - 5);
          BOOL v46 = __OFSUB__(v44, v45);
          uint64_t v38 = v44 - v45;
          char v39 = v46;
          if (v46) {
            goto LABEL_121;
          }
          unint64_t v47 = v13 - 2;
          char v48 = &v33[16 * v13 - 32];
          uint64_t v50 = *(void *)v48;
          uint64_t v49 = *((void *)v48 + 1);
          BOOL v46 = __OFSUB__(v49, v50);
          uint64_t v51 = v49 - v50;
          if (v46) {
            goto LABEL_123;
          }
          BOOL v46 = __OFADD__(v38, v51);
          uint64_t v52 = v38 + v51;
          if (v46) {
            goto LABEL_126;
          }
          if (v52 >= v43)
          {
            CGPoint v70 = &v33[16 * v35];
            uint64_t v72 = *(void *)v70;
            uint64_t v71 = *((void *)v70 + 1);
            BOOL v46 = __OFSUB__(v71, v72);
            uint64_t v73 = v71 - v72;
            if (v46) {
              goto LABEL_130;
            }
            BOOL v63 = v38 < v73;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v64 = *((void *)v12 + 4);
            uint64_t v65 = *((void *)v12 + 5);
            BOOL v46 = __OFSUB__(v65, v64);
            uint64_t v57 = v65 - v64;
            char v58 = v46;
            goto LABEL_77;
          }
          uint64_t v37 = *((void *)v12 + 4);
          uint64_t v36 = *((void *)v12 + 5);
          BOOL v46 = __OFSUB__(v36, v37);
          uint64_t v38 = v36 - v37;
          char v39 = v46;
        }
        if (v39) {
          goto LABEL_122;
        }
        unint64_t v47 = v13 - 2;
        uint64_t v53 = &v33[16 * v13 - 32];
        uint64_t v55 = *(void *)v53;
        uint64_t v54 = *((void *)v53 + 1);
        BOOL v56 = __OFSUB__(v54, v55);
        uint64_t v57 = v54 - v55;
        char v58 = v56;
        if (v56) {
          goto LABEL_125;
        }
        char v59 = &v33[16 * v35];
        uint64_t v61 = *(void *)v59;
        uint64_t v60 = *((void *)v59 + 1);
        BOOL v46 = __OFSUB__(v60, v61);
        uint64_t v62 = v60 - v61;
        if (v46) {
          goto LABEL_128;
        }
        if (__OFADD__(v57, v62)) {
          goto LABEL_129;
        }
        if (v57 + v62 >= v38)
        {
          BOOL v63 = v38 < v62;
LABEL_83:
          if (v63) {
            unint64_t v35 = v47;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v58) {
          goto LABEL_124;
        }
        uint64_t v66 = &v33[16 * v35];
        uint64_t v68 = *(void *)v66;
        uint64_t v67 = *((void *)v66 + 1);
        BOOL v46 = __OFSUB__(v67, v68);
        uint64_t v69 = v67 - v68;
        if (v46) {
          goto LABEL_127;
        }
        if (v69 < v57) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v74 = v35 - 1;
        if (v35 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11) {
          goto LABEL_143;
        }
        uint64_t v75 = v12;
        int v76 = &v33[16 * v74];
        uint64_t v77 = *(void *)v76;
        uint64_t v78 = &v33[16 * v35];
        uint64_t v79 = *((void *)v78 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + 16 * *(void *)v76), (double *)(v11 + 16 * *(void *)v78), v11 + 16 * v79, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v79 < v77) {
          goto LABEL_117;
        }
        if (v35 > *((void *)v75 + 2)) {
          goto LABEL_118;
        }
        *(void *)int v76 = v77;
        *(void *)&v33[16 * v74 + 8] = v79;
        unint64_t v80 = *((void *)v75 + 2);
        if (v35 >= v80) {
          goto LABEL_119;
        }
        uint64_t v12 = v75;
        unint64_t v13 = v80 - 1;
        memmove(&v33[16 * v35], v78 + 16, 16 * (v80 - 1 - v35));
        *((void *)v75 + 2) = v80 - 1;
        uint64_t v11 = v105;
        if (v80 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v103;
    Swift::Int v3 = v104;
    if (v10 >= v104)
    {
      uint64_t v9 = v102;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  char v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t i;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  long long v103;
  long long v104;
  long long v105;
  long long v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  Swift::Int v119;
  Swift::Int v120;
  uint64_t v121;
  char *__dst;

  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v96 = 0;
      uint64_t v97 = *a1;
      for (unint64_t i = 1; i != v3; ++i)
      {
        double v99 = *(void *)(v97 + 56 * i);
        uint64_t v100 = v96;
        do
        {
          uint64_t v101 = v97 + v100;
          if (v99 >= *(void *)(v97 + v100)) {
            break;
          }
          if (!v97) {
            goto LABEL_140;
          }
          uint64_t v102 = v97 + v100;
          Swift::Int v103 = *(_OWORD *)(v97 + v100 + 64);
          Swift::Int v104 = *(_OWORD *)(v97 + v100 + 80);
          uint64_t v105 = *(_OWORD *)(v97 + v100 + 96);
          double v106 = *(_OWORD *)(v101 + 16);
          *(_OWORD *)(v97 + v100 + 56) = *(_OWORD *)v101;
          *(_OWORD *)(v97 + v100 + 72) = v106;
          *(_OWORD *)(v97 + v100 + 88) = *(_OWORD *)(v101 + 32);
          *(void *)(v97 + v100 + 104) = *(void *)(v101 + 48);
          *(void *)uint64_t v102 = v99;
          *(_OWORD *)(v102 + 8) = v103;
          *(_OWORD *)(v102 + 24) = v104;
          v100 -= 56;
          *(_OWORD *)(v102 + 40) = v105;
        }
        while (v100 != -56);
        v96 += 56;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  Swift::Int v6 = result;
  uint64_t v116 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    __dst = (char *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
LABEL_102:
      char v107 = v12;
      uint64_t v118 = v9;
      if (v13 >= 2)
      {
        char v108 = *v116;
        do
        {
          uint64_t v109 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_131;
          }
          if (!v108) {
            goto LABEL_144;
          }
          uint64_t v110 = v107;
          uint64_t v111 = *(void *)&v107[16 * v109 + 32];
          char v112 = *(void *)&v107[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v108 + 56 * v111), (char *)(v108 + 56 * *(void *)&v107[16 * v13 + 16]), v108 + 56 * v112, __dst);
          if (v1) {
            break;
          }
          if (v112 < v111) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v110 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v110);
          }
          if (v109 >= *((void *)v110 + 2)) {
            goto LABEL_133;
          }
          uint64_t v113 = &v110[16 * v109 + 32];
          *(void *)uint64_t v113 = v111;
          *((void *)v113 + 1) = v112;
          uint64_t v114 = *((void *)v110 + 2);
          if (v13 > v114) {
            goto LABEL_134;
          }
          memmove(&v110[16 * v13 + 16], &v110[16 * v13 + 32], 16 * (v114 - v13));
          char v107 = v110;
          *((void *)v110 + 2) = v114 - 1;
          unint64_t v13 = v114 - 1;
        }
        while (v114 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v118 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v118 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    type metadata accessor for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)();
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v118 = v8;
    __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v117 = *a1 + 112;
  char v115 = *a1 - 56;
  uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v119 = v6;
  BOOL v120 = v3;
  uint64_t v121 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      double v15 = *(void *)(v11 + 56 * v10);
      double v16 = *(void *)(v11 + 56 * v14);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        char v17 = (uint64_t *)(v117 + 56 * v14);
        double v18 = v15;
        while (1)
        {
          uint64_t v20 = *v17;
          v17 += 7;
          double v19 = v20;
          if (v15 < v16 == v20 >= v18) {
            break;
          }
          ++v10;
          double v18 = v19;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_137;
        }
        if (v14 < v10)
        {
          Swift::Int v21 = 56 * v10;
          Swift::Int v22 = v10;
          uint64_t v23 = v14;
          long long v24 = 56 * v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11) {
                goto LABEL_143;
              }
              Swift::Int v25 = v11 + v24;
              uint64_t v26 = *(void *)(v11 + v24);
              double v27 = v11 + v21;
              Swift::Int v28 = *(_OWORD *)(v11 + v24 + 8);
              uint64_t v29 = *(_OWORD *)(v11 + v24 + 24);
              uint64_t v30 = *(_OWORD *)(v11 + v24 + 40);
              unint64_t v31 = *(_OWORD *)(v11 + v21 - 40);
              unint64_t v32 = *(_OWORD *)(v11 + v21 - 24);
              long long v33 = *(_OWORD *)(v11 + v21 - 56);
              *(void *)(v25 + 48) = *(void *)(v11 + v21 - 8);
              *(_OWORD *)(v25 + 16) = v31;
              *(_OWORD *)(v25 + 32) = v32;
              *(_OWORD *)Swift::Int v25 = v33;
              *(void *)(v27 - 56) = v26;
              *(_OWORD *)(v27 - 48) = v28;
              *(_OWORD *)(v27 - 32) = v29;
              *(_OWORD *)(v27 - 16) = v30;
            }
            ++v23;
            v21 -= 56;
            v24 += 56;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_135;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    long long v34 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_138;
    }
    if (v34 >= v3) {
      long long v34 = v3;
    }
    if (v34 < v14) {
      break;
    }
    if (v10 != v34)
    {
      unint64_t v35 = v115 + 56 * v10;
      do
      {
        uint64_t v36 = *(void *)(v11 + 56 * v10);
        uint64_t v37 = v14;
        uint64_t v38 = v35;
        do
        {
          char v39 = v38 + 56;
          if (v36 >= *(void *)v38) {
            break;
          }
          if (!v11) {
            goto LABEL_141;
          }
          long long v40 = *(_OWORD *)(v38 + 64);
          uint64_t v41 = *(_OWORD *)(v38 + 80);
          uint64_t v42 = *(_OWORD *)(v38 + 96);
          uint64_t v43 = *(_OWORD *)(v38 + 16);
          *(_OWORD *)char v39 = *(_OWORD *)v38;
          *(_OWORD *)(v38 + 72) = v43;
          *(_OWORD *)(v38 + 88) = *(_OWORD *)(v38 + 32);
          uint64_t v44 = *(void *)(v38 + 48);
          *(void *)uint64_t v38 = v36;
          *(_OWORD *)(v38 + 8) = v40;
          *(_OWORD *)(v38 + 24) = v41;
          *(_OWORD *)(v38 + 40) = v42;
          v38 -= 56;
          ++v37;
          *(void *)(v39 + 48) = v44;
        }
        while (v10 != v37);
        ++v10;
        v35 += 56;
      }
      while (v10 != v34);
      Swift::Int v10 = v34;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    BOOL v46 = *((void *)v12 + 2);
    uint64_t v45 = *((void *)v12 + 3);
    unint64_t v13 = v46 + 1;
    uint64_t v11 = v121;
    if (v46 >= v45 >> 1)
    {
      uint64_t v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v45 > 1), v46 + 1, 1, v12);
      uint64_t v11 = v121;
      uint64_t v12 = v95;
    }
    *((void *)v12 + 2) = v13;
    unint64_t v47 = v12 + 32;
    char v48 = &v12[16 * v46 + 32];
    *(void *)char v48 = v14;
    *((void *)v48 + 1) = v10;
    if (v46)
    {
      while (1)
      {
        uint64_t v49 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v54 = &v47[16 * v13];
          uint64_t v55 = *((void *)v54 - 8);
          BOOL v56 = *((void *)v54 - 7);
          uint64_t v60 = __OFSUB__(v56, v55);
          uint64_t v57 = v56 - v55;
          if (v60) {
            goto LABEL_119;
          }
          char v59 = *((void *)v54 - 6);
          char v58 = *((void *)v54 - 5);
          uint64_t v60 = __OFSUB__(v58, v59);
          uint64_t v52 = v58 - v59;
          uint64_t v53 = v60;
          if (v60) {
            goto LABEL_120;
          }
          uint64_t v61 = v13 - 2;
          uint64_t v62 = &v47[16 * v13 - 32];
          uint64_t v64 = *(void *)v62;
          BOOL v63 = *((void *)v62 + 1);
          uint64_t v60 = __OFSUB__(v63, v64);
          uint64_t v65 = v63 - v64;
          if (v60) {
            goto LABEL_122;
          }
          uint64_t v60 = __OFADD__(v52, v65);
          uint64_t v66 = v52 + v65;
          if (v60) {
            goto LABEL_125;
          }
          if (v66 >= v57)
          {
            uint64_t v84 = &v47[16 * v49];
            double v86 = *(void *)v84;
            uint64_t v85 = *((void *)v84 + 1);
            uint64_t v60 = __OFSUB__(v85, v86);
            uint64_t v87 = v85 - v86;
            if (v60) {
              goto LABEL_129;
            }
            uint64_t v77 = v52 < v87;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v78 = *((void *)v12 + 4);
            uint64_t v79 = *((void *)v12 + 5);
            uint64_t v60 = __OFSUB__(v79, v78);
            uint64_t v71 = v79 - v78;
            uint64_t v72 = v60;
            goto LABEL_77;
          }
          uint64_t v51 = *((void *)v12 + 4);
          uint64_t v50 = *((void *)v12 + 5);
          uint64_t v60 = __OFSUB__(v50, v51);
          uint64_t v52 = v50 - v51;
          uint64_t v53 = v60;
        }
        if (v53) {
          goto LABEL_121;
        }
        uint64_t v61 = v13 - 2;
        uint64_t v67 = &v47[16 * v13 - 32];
        uint64_t v69 = *(void *)v67;
        uint64_t v68 = *((void *)v67 + 1);
        CGPoint v70 = __OFSUB__(v68, v69);
        uint64_t v71 = v68 - v69;
        uint64_t v72 = v70;
        if (v70) {
          goto LABEL_124;
        }
        uint64_t v73 = &v47[16 * v49];
        uint64_t v75 = *(void *)v73;
        unint64_t v74 = *((void *)v73 + 1);
        uint64_t v60 = __OFSUB__(v74, v75);
        int v76 = v74 - v75;
        if (v60) {
          goto LABEL_127;
        }
        if (__OFADD__(v71, v76)) {
          goto LABEL_128;
        }
        if (v71 + v76 >= v52)
        {
          uint64_t v77 = v52 < v76;
LABEL_83:
          if (v77) {
            uint64_t v49 = v61;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v72) {
          goto LABEL_123;
        }
        unint64_t v80 = &v47[16 * v49];
        uint64_t v82 = *(void *)v80;
        long long v81 = *((void *)v80 + 1);
        uint64_t v60 = __OFSUB__(v81, v82);
        uint64_t v83 = v81 - v82;
        if (v60) {
          goto LABEL_126;
        }
        if (v83 < v71) {
          goto LABEL_15;
        }
LABEL_85:
        uint64_t v88 = v49 - 1;
        if (v49 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11) {
          goto LABEL_142;
        }
        uint64_t v89 = v12;
        uint64_t v90 = &v47[16 * v88];
        uint64_t v91 = *(void *)v90;
        uint64_t v92 = &v47[16 * v49];
        unint64_t v93 = *((void *)v92 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v11 + 56 * *(void *)v90), (char *)(v11 + 56 * *(void *)v92), v11 + 56 * v93, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v93 < v91) {
          goto LABEL_116;
        }
        if (v49 > *((void *)v89 + 2)) {
          goto LABEL_117;
        }
        *(void *)uint64_t v90 = v91;
        *(void *)&v47[16 * v88 + 8] = v93;
        uint64_t v94 = *((void *)v89 + 2);
        if (v49 >= v94) {
          goto LABEL_118;
        }
        uint64_t v12 = v89;
        unint64_t v13 = v94 - 1;
        memmove(&v47[16 * v49], v92 + 16, 16 * (v94 - 1 - v49));
        *((void *)v89 + 2) = v94 - 1;
        uint64_t v11 = v121;
        if (v94 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v119;
    Swift::Int v3 = v120;
    if (v10 >= v120)
    {
      uint64_t v9 = v118;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  BOOL v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  int v27;
  BOOL v28;
  Swift::Int v29;
  Swift::Int v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  BOOL v36;
  double v37;
  double v38;
  double v39;
  double v40;
  int v41;
  int v42;
  uint64_t v43;
  Swift::Int v44;
  Swift::Int v45;
  Swift::Int v46;
  long long v47;
  long long v48;
  long long v49;
  uint64_t v50;
  long long *v51;
  long long *v52;
  uint64_t v53;
  long long v54;
  long long v55;
  long long v56;
  char v57;
  Swift::Int v58;
  uint64_t v59;
  Swift::Int v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  double v65;
  double v66;
  int v67;
  double v68;
  double v69;
  BOOL v70;
  double v71;
  double v72;
  int v73;
  long long v74;
  long long v75;
  long long v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  char v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  Swift::Int v137;
  Swift::Int v138;
  uint64_t v139;
  double *__dst;
  uint64_t v141;

  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_178;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1)
  {
LABEL_186:
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  Swift::Int v6 = result;
  long long v141 = v1;
  uint64_t v134 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    __dst = (double *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
      goto LABEL_144;
    }
    uint64_t v136 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v136 = v8;
    __dst = (double *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v135 = *a1 + 32;
  uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v137 = v6;
  uint64_t v138 = v3;
  uint64_t v139 = v11;
  do
  {
    Swift::Int v14 = v10++;
    if (v10 >= v3) {
      goto LABEL_65;
    }
    double v15 = v11 + (v10 << 6);
    double v16 = *(double *)(v15 + 8);
    char v17 = v11 + (v14 << 6);
    double v18 = *(double *)(v17 + 8);
    if (v16 != v18)
    {
      if (v18 < v16) {
        goto LABEL_26;
      }
      goto LABEL_29;
    }
    double v19 = *(double *)(v15 + 32);
    uint64_t v20 = *(double *)(v17 + 32);
    Swift::Int v21 = v19 < v20;
    if (v19 != v20
      || (v22 = *(double *)(v15 + 40), uint64_t v23 = *(double *)(v17 + 40), v21 = v22 < v23, v22 != v23)
      || (v24 = *(double *)(v15 + 48), v25 = *(double *)(v17 + 48), Swift::Int v21 = v24 < v25, v24 != v25))
    {
      if (v21) {
        goto LABEL_26;
      }
LABEL_29:
      uint64_t v29 = v14 + 2;
      if (v14 + 2 >= v3)
      {
LABEL_64:
        Swift::Int v10 = v29;
        goto LABEL_65;
      }
      Swift::Int v28 = 0;
LABEL_31:
      if (v3 <= v29 + 1) {
        uint64_t v30 = v29 + 1;
      }
      else {
        uint64_t v30 = v3;
      }
      unint64_t v31 = v135 + (v29 << 6);
      while (1)
      {
        unint64_t v32 = *(double *)(v31 - 24);
        long long v33 = v11 + (v10 << 6);
        long long v34 = *(double *)(v33 + 8);
        if (v32 == v34)
        {
          unint64_t v35 = *(double *)(v33 + 32);
          uint64_t v36 = *(double *)v31 < v35;
          if (*(double *)v31 == v35
            && (v37 = *(double *)(v31 + 8), v38 = *(double *)(v33 + 40), uint64_t v36 = v37 < v38, v37 == v38)
            && (v39 = *(double *)(v31 + 16), v40 = *(double *)(v33 + 48), uint64_t v36 = v39 < v40, v39 == v40))
          {
            uint64_t v41 = *(char *)(v31 + 24);
            uint64_t v42 = *(char *)(v33 + 56);
            if (v41 == v42)
            {
              if (v28 == *(void *)(v31 - 32) >= *(void *)v33) {
                goto LABEL_52;
              }
              goto LABEL_36;
            }
            if (v41 < v42)
            {
LABEL_47:
              if (!v28) {
                goto LABEL_64;
              }
              goto LABEL_36;
            }
          }
          else if (v36)
          {
            goto LABEL_47;
          }
        }
        else if (v34 < v32)
        {
          goto LABEL_47;
        }
        if (v28) {
          goto LABEL_53;
        }
LABEL_36:
        Swift::Int v10 = v29;
        v31 += 64;
        if (++v29 >= v3)
        {
          uint64_t v29 = v30;
          goto LABEL_52;
        }
      }
    }
    uint64_t v26 = *(char *)(v15 + 56);
    double v27 = *(char *)(v17 + 56);
    if (v26 != v27)
    {
      if (v26 >= v27) {
        goto LABEL_29;
      }
LABEL_26:
      uint64_t v29 = v14 + 2;
      if (v14 + 2 >= v3) {
        goto LABEL_54;
      }
      Swift::Int v28 = 1;
      goto LABEL_31;
    }
    Swift::Int v28 = *(void *)v15 < *(void *)v17;
    uint64_t v29 = v14 + 2;
    if (v14 + 2 < v3) {
      goto LABEL_31;
    }
LABEL_52:
    Swift::Int v10 = v29;
    if (v28)
    {
LABEL_53:
      if (v29 < v14) {
        goto LABEL_179;
      }
LABEL_54:
      if (v14 < v29)
      {
        uint64_t v43 = (v29 << 6) - 64;
        uint64_t v44 = v14 << 6;
        uint64_t v45 = v29;
        BOOL v46 = v14;
        while (1)
        {
          if (v46 != --v45)
          {
            if (!v11) {
              goto LABEL_184;
            }
            uint64_t v51 = (long long *)(v11 + v44);
            uint64_t v52 = (long long *)(v11 + v43);
            uint64_t v53 = *(void *)(v11 + v44);
            uint64_t v54 = *(_OWORD *)(v11 + v44 + 8);
            uint64_t v55 = *(_OWORD *)(v11 + v44 + 24);
            BOOL v56 = *(_OWORD *)(v11 + v44 + 40);
            uint64_t v57 = *(unsigned char *)(v11 + v44 + 56);
            if (v44 != v43 || v51 >= v52 + 4)
            {
              unint64_t v47 = *v52;
              char v48 = v52[1];
              uint64_t v49 = v52[3];
              v51[2] = v52[2];
              v51[3] = v49;
              *uint64_t v51 = v47;
              v51[1] = v48;
            }
            uint64_t v50 = v11 + v43;
            *(void *)uint64_t v50 = v53;
            *(_OWORD *)(v50 + 8) = v54;
            *(_OWORD *)(v50 + 24) = v55;
            *(_OWORD *)(v50 + 40) = v56;
            *(unsigned char *)(v50 + 56) = v57;
          }
          ++v46;
          v43 -= 64;
          v44 += 64;
          if (v46 >= v45) {
            goto LABEL_64;
          }
        }
      }
      goto LABEL_64;
    }
LABEL_65:
    if (v10 >= v3) {
      goto LABEL_92;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_177;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_92;
    }
    char v58 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_180;
    }
    if (v58 >= v3) {
      char v58 = v3;
    }
    if (v58 < v14)
    {
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
      goto LABEL_186;
    }
    if (v10 != v58)
    {
      char v59 = v11 + (v10 << 6);
      do
      {
        uint64_t v60 = v14;
        uint64_t v61 = v59;
        do
        {
          uint64_t v62 = *(void *)v61;
          BOOL v63 = *(double *)(v61 + 8);
          uint64_t v64 = *(double *)(v61 + 32);
          uint64_t v65 = *(double *)(v61 + 40);
          uint64_t v66 = *(double *)(v61 + 48);
          uint64_t v67 = *(char *)(v61 + 56);
          uint64_t v68 = *(double *)(v61 - 56);
          if (v63 == v68)
          {
            uint64_t v69 = *(double *)(v61 - 32);
            CGPoint v70 = v64 < v69;
            if (v64 == v69
              && (v71 = *(double *)(v61 - 24), CGPoint v70 = v65 < v71, v65 == v71)
              && (v72 = *(double *)(v61 - 16), CGPoint v70 = v66 < v72, v66 == v72))
            {
              uint64_t v73 = *(char *)(v61 - 8);
              if (v67 == v73)
              {
                if (v62 >= *(void *)(v61 - 64)) {
                  break;
                }
              }
              else if (v67 >= v73)
              {
                break;
              }
            }
            else if (!v70)
            {
              break;
            }
          }
          else if (v68 >= v63)
          {
            break;
          }
          if (!v11) {
            goto LABEL_182;
          }
          unint64_t v74 = *(_OWORD *)(v61 + 16);
          uint64_t v75 = *(_OWORD *)(v61 - 48);
          *(_OWORD *)uint64_t v61 = *(_OWORD *)(v61 - 64);
          *(_OWORD *)(v61 + 16) = v75;
          int v76 = *(_OWORD *)(v61 - 16);
          *(_OWORD *)(v61 + 32) = *(_OWORD *)(v61 - 32);
          *(_OWORD *)(v61 + 48) = v76;
          *(double *)(v61 - 56) = v63;
          *(_OWORD *)(v61 - 48) = v74;
          *(double *)(v61 - 32) = v64;
          *(double *)(v61 - 24) = v65;
          *(double *)(v61 - 16) = v66;
          *(unsigned char *)(v61 - 8) = v67;
          ++v60;
          *(void *)(v61 - 64) = v62;
          v61 -= 64;
        }
        while (v10 != v60);
        ++v10;
        v59 += 64;
      }
      while (v10 != v58);
      Swift::Int v10 = v58;
    }
LABEL_92:
    if (v10 < v14) {
      goto LABEL_172;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    uint64_t v78 = *((void *)v12 + 2);
    uint64_t v77 = *((void *)v12 + 3);
    unint64_t v13 = v78 + 1;
    uint64_t v11 = v139;
    if (v78 >= v77 >> 1)
    {
      uint64_t v11 = v139;
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v77 > 1), v78 + 1, 1, v12);
    }
    *((void *)v12 + 2) = v13;
    uint64_t v79 = v12 + 32;
    unint64_t v80 = &v12[16 * v78 + 32];
    *(void *)unint64_t v80 = v14;
    *((void *)v80 + 1) = v10;
    if (v78)
    {
      while (1)
      {
        long long v81 = v13 - 1;
        if (v13 >= 4)
        {
          double v86 = &v79[16 * v13];
          uint64_t v87 = *((void *)v86 - 8);
          uint64_t v88 = *((void *)v86 - 7);
          uint64_t v92 = __OFSUB__(v88, v87);
          uint64_t v89 = v88 - v87;
          if (v92) {
            goto LABEL_161;
          }
          uint64_t v91 = *((void *)v86 - 6);
          uint64_t v90 = *((void *)v86 - 5);
          uint64_t v92 = __OFSUB__(v90, v91);
          uint64_t v84 = v90 - v91;
          uint64_t v85 = v92;
          if (v92) {
            goto LABEL_162;
          }
          unint64_t v93 = v13 - 2;
          uint64_t v94 = &v79[16 * v13 - 32];
          uint64_t v96 = *(void *)v94;
          uint64_t v95 = *((void *)v94 + 1);
          uint64_t v92 = __OFSUB__(v95, v96);
          uint64_t v97 = v95 - v96;
          if (v92) {
            goto LABEL_164;
          }
          uint64_t v92 = __OFADD__(v84, v97);
          unint64_t v98 = v84 + v97;
          if (v92) {
            goto LABEL_167;
          }
          if (v98 >= v89)
          {
            uint64_t v116 = &v79[16 * v81];
            uint64_t v118 = *(void *)v116;
            uint64_t v117 = *((void *)v116 + 1);
            uint64_t v92 = __OFSUB__(v117, v118);
            uint64_t v119 = v117 - v118;
            if (v92) {
              goto LABEL_171;
            }
            uint64_t v109 = v84 < v119;
            goto LABEL_129;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v110 = *((void *)v12 + 4);
            uint64_t v111 = *((void *)v12 + 5);
            uint64_t v92 = __OFSUB__(v111, v110);
            Swift::Int v103 = v111 - v110;
            Swift::Int v104 = v92;
            goto LABEL_123;
          }
          uint64_t v83 = *((void *)v12 + 4);
          uint64_t v82 = *((void *)v12 + 5);
          uint64_t v92 = __OFSUB__(v82, v83);
          uint64_t v84 = v82 - v83;
          uint64_t v85 = v92;
        }
        if (v85) {
          goto LABEL_163;
        }
        unint64_t v93 = v13 - 2;
        double v99 = &v79[16 * v13 - 32];
        uint64_t v101 = *(void *)v99;
        uint64_t v100 = *((void *)v99 + 1);
        uint64_t v102 = __OFSUB__(v100, v101);
        Swift::Int v103 = v100 - v101;
        Swift::Int v104 = v102;
        if (v102) {
          goto LABEL_166;
        }
        uint64_t v105 = &v79[16 * v81];
        char v107 = *(void *)v105;
        double v106 = *((void *)v105 + 1);
        uint64_t v92 = __OFSUB__(v106, v107);
        char v108 = v106 - v107;
        if (v92) {
          goto LABEL_169;
        }
        if (__OFADD__(v103, v108)) {
          goto LABEL_170;
        }
        if (v103 + v108 >= v84)
        {
          uint64_t v109 = v84 < v108;
LABEL_129:
          if (v109) {
            long long v81 = v93;
          }
          goto LABEL_131;
        }
LABEL_123:
        if (v104) {
          goto LABEL_165;
        }
        char v112 = &v79[16 * v81];
        uint64_t v114 = *(void *)v112;
        uint64_t v113 = *((void *)v112 + 1);
        uint64_t v92 = __OFSUB__(v113, v114);
        char v115 = v113 - v114;
        if (v92) {
          goto LABEL_168;
        }
        if (v115 < v103) {
          goto LABEL_15;
        }
LABEL_131:
        BOOL v120 = v81 - 1;
        if (v81 - 1 >= v13)
        {
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
          goto LABEL_181;
        }
        if (!v11) {
          goto LABEL_183;
        }
        uint64_t v121 = &v79[16 * v120];
        uint64_t v122 = *(void *)v121;
        uint64_t v123 = &v79[16 * v81];
        uint64_t v124 = *((void *)v123 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + (*(void *)v121 << 6)), (double *)(v11 + (*(void *)v123 << 6)), v11 + (v124 << 6), __dst);
        if (v141) {
          goto LABEL_141;
        }
        if (v124 < v122) {
          goto LABEL_158;
        }
        if (v81 > *((void *)v12 + 2)) {
          goto LABEL_159;
        }
        *(void *)uint64_t v121 = v122;
        *(void *)&v79[16 * v120 + 8] = v124;
        uint64_t v125 = *((void *)v12 + 2);
        if (v81 >= v125) {
          goto LABEL_160;
        }
        unint64_t v13 = v125 - 1;
        memmove(&v79[16 * v81], v123 + 16, 16 * (v125 - 1 - v81));
        *((void *)v12 + 2) = v125 - 1;
        uint64_t v11 = v139;
        if (v125 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v137;
    Swift::Int v3 = v138;
  }
  while (v10 < v138);
  uint64_t v9 = v136;
LABEL_144:
  uint64_t v126 = v12;
  uint64_t v136 = v9;
  if (v13 >= 2)
  {
    uint64_t v127 = *v134;
    do
    {
      uint64_t v128 = v13 - 2;
      if (v13 < 2) {
        goto LABEL_173;
      }
      if (!v127) {
        goto LABEL_185;
      }
      uint64_t v129 = v126;
      uint64_t v130 = *(void *)&v126[16 * v128 + 32];
      uint64_t v131 = *(void *)&v126[16 * v13 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v127 + (v130 << 6)), (double *)(v127 + (*(void *)&v126[16 * v13 + 16] << 6)), v127 + (v131 << 6), __dst);
      if (v141) {
        break;
      }
      if (v131 < v130) {
        goto LABEL_174;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v129 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v129);
      }
      if (v128 >= *((void *)v129 + 2)) {
        goto LABEL_175;
      }
      unint64_t v132 = &v129[16 * v128 + 32];
      *(void *)unint64_t v132 = v130;
      *((void *)v132 + 1) = v131;
      uint64_t v133 = *((void *)v129 + 2);
      if (v13 > v133) {
        goto LABEL_176;
      }
      memmove(&v129[16 * v13 + 16], &v129[16 * v13 + 32], 16 * (v133 - v13));
      uint64_t v126 = v129;
      *((void *)v129 + 2) = v133 - 1;
      unint64_t v13 = v133 - 1;
    }
    while (v133 > 2);
  }
LABEL_141:
  swift_bridgeObjectRelease();
  *(void *)(v136 + 16) = 0;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void **v20;
  void *v21;
  void *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  long long *v27;
  Swift::Int v28;
  Swift::Int v29;
  long long *v30;
  long long v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  void *v86;
  Swift::Int v87;
  uint64_t v88;
  void *v89;
  double v90;
  double v91;
  double v92;
  double v93;
  long long v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  Swift::Int v108;
  Swift::Int v109;
  Swift::Int v110;
  Swift::Int v111;
  void **v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  uint64_t v2 = v1;
  uint64_t v4 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_134;
    }
    if (v4) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1);
    }
    return result;
  }
  if (v4 >= 0) {
    Swift::Int v6 = v4;
  }
  else {
    Swift::Int v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_142;
  }
  uint64_t v111 = v4;
  char v108 = result;
  Swift::Int v104 = a1;
  if (v4 < 2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    char v112 = (void **)(MEMORY[0x1E4FBC860] + 32);
    if (v4 != 1)
    {
      uint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
LABEL_100:
      uint64_t v95 = v11;
      char v107 = v9;
      if (v12 >= 2)
      {
        uint64_t v96 = *v104;
        do
        {
          uint64_t v97 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_129;
          }
          if (!v96) {
            goto LABEL_141;
          }
          unint64_t v98 = v95;
          double v99 = *(void *)&v95[16 * v97 + 32];
          uint64_t v100 = *(void *)&v95[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v96 + 16 * v99), (void **)(v96 + 16 * *(void *)&v95[16 * v12 + 16]), v96 + 16 * v100, v112);
          if (v2) {
            break;
          }
          if (v100 < v99) {
            goto LABEL_130;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v98 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v98);
          }
          if (v97 >= *((void *)v98 + 2)) {
            goto LABEL_131;
          }
          uint64_t v101 = &v98[16 * v97 + 32];
          *(void *)uint64_t v101 = v99;
          *((void *)v101 + 1) = v100;
          uint64_t v102 = *((void *)v98 + 2);
          if (v12 > v102) {
            goto LABEL_132;
          }
          memmove(&v98[16 * v12 + 16], &v98[16 * v12 + 32], 16 * (v102 - v12));
          uint64_t v95 = v98;
          *((void *)v98 + 2) = v102 - 1;
          uint64_t v12 = v102 - 1;
        }
        while (v102 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      *(void *)(v107 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    char v107 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v7 = v6 >> 1;
    type metadata accessor for PlatformListCell & UIFocusItem();
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    char v107 = v8;
    char v112 = (void **)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v113 = *a1;
  uint64_t v105 = *a1 - 16;
  double v106 = *a1 + 32;
  uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  while (1)
  {
    unint64_t v13 = v10++;
    if (v10 >= v4) {
      goto LABEL_32;
    }
    Swift::Int v14 = *(void **)(v113 + 16 * v10);
    double v15 = *(void **)(v113 + 16 * v13);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    objc_msgSend(v14, sel_frame);
    char v17 = v16;
    objc_msgSend(v15, sel_frame);
    double v19 = v18;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    Swift::Int v10 = v13 + 2;
    if (v13 + 2 >= v4)
    {
LABEL_22:
      if (v17 >= v19) {
        goto LABEL_32;
      }
LABEL_25:
      if (v10 < v13) {
        goto LABEL_135;
      }
      if (v13 < v10)
      {
        double v27 = (long long *)(v105 + 16 * v10);
        Swift::Int v28 = v10;
        uint64_t v29 = v13;
        uint64_t v30 = (long long *)(v113 + 16 * v13);
        while (1)
        {
          if (v29 != --v28)
          {
            if (!v113) {
              goto LABEL_140;
            }
            unint64_t v31 = *v30;
            *uint64_t v30 = *v27;
            *double v27 = v31;
          }
          ++v29;
          --v27;
          ++v30;
          if (v29 >= v28) {
            goto LABEL_32;
          }
        }
      }
      goto LABEL_32;
    }
    uint64_t v20 = (void **)(v106 + 16 * v13);
    while (1)
    {
      Swift::Int v21 = *v20;
      Swift::Int v22 = *(v20 - 2);
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      objc_msgSend(v21, sel_frame);
      long long v24 = v23;
      objc_msgSend(v22, sel_frame);
      uint64_t v26 = v25;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (v17 < v19 == v24 >= v26) {
        break;
      }
      ++v10;
      v20 += 2;
      uint64_t v4 = v111;
      if (v111 == v10)
      {
        Swift::Int v10 = v111;
        goto LABEL_22;
      }
    }
    uint64_t v4 = v111;
    if (v17 < v19) {
      goto LABEL_25;
    }
LABEL_32:
    if (v10 >= v4) {
      goto LABEL_41;
    }
    if (__OFSUB__(v10, v13)) {
      goto LABEL_133;
    }
    if (v10 - v13 >= v108) {
      goto LABEL_41;
    }
    if (__OFADD__(v13, v108)) {
      goto LABEL_136;
    }
    unint64_t v32 = v13 + v108 >= v4 ? v4 : v13 + v108;
    if (v32 < v13) {
      break;
    }
    if (v10 != v32)
    {
      Swift::Int v103 = v11;
      char v115 = v2;
      uint64_t v85 = v105 + 16 * v10;
      long long v33 = v113;
      uint64_t v109 = v32;
      uint64_t v110 = v13;
      do
      {
        double v86 = *(void **)(v113 + 16 * v10);
        uint64_t v87 = v13;
        uint64_t v88 = v85;
        do
        {
          uint64_t v89 = *(void **)v88;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          objc_msgSend(v86, sel_frame);
          uint64_t v91 = v90;
          objc_msgSend(v89, sel_frame);
          unint64_t v93 = v92;
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          if (v91 >= v93) {
            break;
          }
          if (!v113) {
            goto LABEL_138;
          }
          uint64_t v94 = *(_OWORD *)(v88 + 16);
          *(_OWORD *)(v88 + 16) = *(_OWORD *)v88;
          *(_OWORD *)uint64_t v88 = v94;
          v88 -= 16;
          double v86 = (void *)v94;
          ++v87;
        }
        while (v10 != v87);
        ++v10;
        v85 += 16;
        unint64_t v13 = v110;
      }
      while (v10 != v109);
      Swift::Int v10 = v109;
      uint64_t v2 = v115;
      uint64_t v11 = v103;
      if (v109 < v110) {
        goto LABEL_128;
      }
      goto LABEL_42;
    }
LABEL_41:
    long long v33 = v113;
    if (v10 < v13) {
      goto LABEL_128;
    }
LABEL_42:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v35 = *((void *)v11 + 2);
    long long v34 = *((void *)v11 + 3);
    uint64_t v12 = v35 + 1;
    uint64_t v114 = v2;
    if (v35 >= v34 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v36 = v11 + 32;
    uint64_t v37 = &v11[16 * v35 + 32];
    *(void *)uint64_t v37 = v13;
    *((void *)v37 + 1) = v10;
    if (v35)
    {
      while (1)
      {
        uint64_t v38 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v43 = &v36[16 * v12];
          uint64_t v44 = *((void *)v43 - 8);
          uint64_t v45 = *((void *)v43 - 7);
          uint64_t v49 = __OFSUB__(v45, v44);
          BOOL v46 = v45 - v44;
          if (v49) {
            goto LABEL_117;
          }
          char v48 = *((void *)v43 - 6);
          unint64_t v47 = *((void *)v43 - 5);
          uint64_t v49 = __OFSUB__(v47, v48);
          uint64_t v41 = v47 - v48;
          uint64_t v42 = v49;
          if (v49) {
            goto LABEL_118;
          }
          uint64_t v50 = v12 - 2;
          uint64_t v51 = &v36[16 * v12 - 32];
          uint64_t v53 = *(void *)v51;
          uint64_t v52 = *((void *)v51 + 1);
          uint64_t v49 = __OFSUB__(v52, v53);
          uint64_t v54 = v52 - v53;
          if (v49) {
            goto LABEL_120;
          }
          uint64_t v49 = __OFADD__(v41, v54);
          uint64_t v55 = v41 + v54;
          if (v49) {
            goto LABEL_123;
          }
          if (v55 >= v46)
          {
            uint64_t v73 = &v36[16 * v38];
            uint64_t v75 = *(void *)v73;
            unint64_t v74 = *((void *)v73 + 1);
            uint64_t v49 = __OFSUB__(v74, v75);
            int v76 = v74 - v75;
            if (v49) {
              goto LABEL_127;
            }
            uint64_t v66 = v41 < v76;
            goto LABEL_78;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v67 = *((void *)v11 + 4);
            uint64_t v68 = *((void *)v11 + 5);
            uint64_t v49 = __OFSUB__(v68, v67);
            uint64_t v60 = v68 - v67;
            uint64_t v61 = v49;
            goto LABEL_72;
          }
          long long v40 = *((void *)v11 + 4);
          char v39 = *((void *)v11 + 5);
          uint64_t v49 = __OFSUB__(v39, v40);
          uint64_t v41 = v39 - v40;
          uint64_t v42 = v49;
        }
        if (v42) {
          goto LABEL_119;
        }
        uint64_t v50 = v12 - 2;
        BOOL v56 = &v36[16 * v12 - 32];
        char v58 = *(void *)v56;
        uint64_t v57 = *((void *)v56 + 1);
        char v59 = __OFSUB__(v57, v58);
        uint64_t v60 = v57 - v58;
        uint64_t v61 = v59;
        if (v59) {
          goto LABEL_122;
        }
        uint64_t v62 = &v36[16 * v38];
        uint64_t v64 = *(void *)v62;
        BOOL v63 = *((void *)v62 + 1);
        uint64_t v49 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v49) {
          goto LABEL_125;
        }
        if (__OFADD__(v60, v65)) {
          goto LABEL_126;
        }
        if (v60 + v65 >= v41)
        {
          uint64_t v66 = v41 < v65;
LABEL_78:
          if (v66) {
            uint64_t v38 = v50;
          }
          goto LABEL_80;
        }
LABEL_72:
        if (v61) {
          goto LABEL_121;
        }
        uint64_t v69 = &v36[16 * v38];
        uint64_t v71 = *(void *)v69;
        CGPoint v70 = *((void *)v69 + 1);
        uint64_t v49 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v49) {
          goto LABEL_124;
        }
        if (v72 < v60) {
          goto LABEL_15;
        }
LABEL_80:
        uint64_t v77 = v38 - 1;
        if (v38 - 1 >= v12)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        uint64_t v78 = v33;
        if (!v33) {
          goto LABEL_139;
        }
        uint64_t v79 = v11;
        unint64_t v80 = &v36[16 * v77];
        long long v81 = *(void *)v80;
        uint64_t v82 = &v36[16 * v38];
        uint64_t v83 = *((void *)v82 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v78 + 16 * *(void *)v80), (void **)(v78 + 16 * *(void *)v82), v78 + 16 * v83, v112);
        if (v114) {
          goto LABEL_97;
        }
        if (v83 < v81) {
          goto LABEL_114;
        }
        if (v38 > *((void *)v79 + 2)) {
          goto LABEL_115;
        }
        *(void *)unint64_t v80 = v81;
        *(void *)&v36[16 * v77 + 8] = v83;
        uint64_t v84 = *((void *)v79 + 2);
        if (v38 >= v84) {
          goto LABEL_116;
        }
        uint64_t v11 = v79;
        uint64_t v12 = v84 - 1;
        memmove(&v36[16 * v38], v82 + 16, 16 * (v84 - 1 - v38));
        *((void *)v79 + 2) = v84 - 1;
        long long v33 = v113;
        if (v84 <= 2) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v12 = 1;
LABEL_15:
    uint64_t v4 = v111;
    uint64_t v2 = v114;
    if (v10 >= v111)
    {
      uint64_t v9 = v107;
      goto LABEL_100;
    }
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in TabContent._dropDestination<A>(for:isTargeted:action:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v54 = a8;
  uint64_t v52 = a6;
  uint64_t v46 = a4;
  uint64_t v47 = a2;
  uint64_t v45 = a1;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  double v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v49 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  char v48 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_t v18 = dispatch_group_create();
  uint64_t v56 = static Array._allocateUninitialized(_:)();
  type metadata accessor for Array();
  AtomicBox.init(wrappedValue:)();
  uint64_t v19 = aBlock[0];
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v20 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t result = v20;
  }
  uint64_t v50 = v15;
  uint64_t v51 = v16;
  if (!result)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    uint64_t v34 = v46;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    unint64_t v35 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v36 = (void *)swift_allocObject();
    v36[2] = v52;
    v36[3] = a7;
    v36[4] = v54;
    v36[5] = a9;
    v36[6] = v34;
    v36[7] = a5;
    uint64_t v37 = v47;
    unsigned char v36[8] = v45;
    v36[9] = v37;
    v36[10] = v19;
    aBlock[4] = partial apply for closure #2 in closure #1 in TabContent._dropDestination<A>(for:isTargeted:action:);
    aBlock[5] = v36;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_22;
    uint64_t v38 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    char v39 = v48;
    static DispatchQoS.unspecified.getter();
    uint64_t v56 = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    type metadata accessor for [DispatchWorkItemFlags]();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (void (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags]);
    long long v40 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v38);
    swift_release();

    (*(void (**)(char *, uint64_t))(v13 + 8))(v40, v12);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v39, v51);
    return swift_release();
  }
  if (result >= 1)
  {
    uint64_t v42 = a5;
    uint64_t v43 = v13;
    uint64_t v44 = v12;
    unint64_t v22 = a3;
    uint64_t v53 = result;
    uint64_t v23 = 0;
    if ((a3 & 0xC000000000000001) != 0)
    {
      uint64_t v24 = v52;
      do
      {
        MEMORY[0x18C117680](v23++, v22);
        dispatch_group_enter(v18);
        Swift::Int v25 = (void *)swift_allocObject();
        _OWORD v25[2] = v24;
        v25[3] = a7;
        _OWORD v25[4] = v54;
        v25[5] = a9;
        v25[6] = v18;
        v25[7] = v19;
        swift_retain();
        uint64_t v26 = v18;
        double v27 = NSItemProvider.loadTransferable<A>(type:completionHandler:)();
        swift_unknownObjectRelease();

        swift_release();
      }
      while (v53 != v23);
    }
    else
    {
      uint64_t v28 = v52;
      do
      {
        uint64_t v29 = *(void **)(v22 + 8 * v23++ + 32);
        id v30 = v29;
        dispatch_group_enter(v18);
        unint64_t v31 = (void *)swift_allocObject();
        _OWORD v31[2] = v28;
        v31[3] = a7;
        v31[4] = v54;
        v31[5] = a9;
        v31[6] = v18;
        v31[7] = v19;
        swift_retain();
        unint64_t v32 = v18;
        long long v33 = NSItemProvider.loadTransferable<A>(type:completionHandler:)();

        swift_release();
      }
      while (v53 != v23);
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = v43;
    uint64_t v12 = v44;
    a5 = v42;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void __swiftcall DefaultWindowStyle.init()()
{
}

ValueMetadata *type metadata accessor for AnimatedValuePlaybackConfiguration.InterruptionBehavior.Behavior()
{
  return &type metadata for AnimatedValuePlaybackConfiguration.InterruptionBehavior.Behavior;
}

uint64_t View.contentMargins(_:_:for:)(char a1, char *a2, uint64_t a3, uint64_t a4)
{
  char v7 = *a2;
  static Edge.Set.all.getter();
  OptionalEdgeInsets.init(_:edges:)();
  uint64_t v8 = v17;
  char v9 = v18;
  uint64_t v10 = v19;
  char v11 = v20;
  uint64_t v12 = v21;
  char v13 = v22;
  uint64_t v14 = v23;
  char v15 = v24;
  LOBYTE(v17) = a1;
  uint64_t v18 = v8;
  LOBYTE(v19) = v9;
  uint64_t v20 = v10;
  LOBYTE(v21) = v11;
  uint64_t v22 = v12;
  LOBYTE(v23) = v13;
  uint64_t v24 = v14;
  char v25 = v15;
  char v26 = v7;
  return MEMORY[0x18C113660](&v17, a3, &type metadata for ContentMarginModifier, a4);
}

uint64_t assignWithCopy for ToolbarAppearanceModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(unsigned char *)(a1 + 59) = *(unsigned char *)(a2 + 59);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t objectdestroy_192Tm()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t _observableObjectProtocolDescriptor()
{
  return MEMORY[0x1E4F1AB60];
}

_UNKNOWN **base witness table accessor for View in LazyVGrid<A>()
{
  return &protocol witness table for LazyVGrid<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in PlatformItemListGeneratingViewModifier<A, B>()
{
  return &protocol witness table for PlatformItemListGeneratingViewModifier<A, B>;
}

_UNKNOWN **base witness table accessor for View in NavigationSplitViewStyleConfiguration.Sidebar()
{
  return &protocol witness table for NavigationSplitViewStyleConfiguration.Sidebar;
}

_UNKNOWN **base witness table accessor for View in NavigationSplitViewStyleConfiguration.Content()
{
  return &protocol witness table for NavigationSplitViewStyleConfiguration.Content;
}

_UNKNOWN **base witness table accessor for View in NavigationSplitViewStyleConfiguration.Detail()
{
  return &protocol witness table for NavigationSplitViewStyleConfiguration.Detail;
}

uint64_t partial apply for closure #1 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)(uint64_t a1)
{
  return closure #1 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #2 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)(uint64_t a1)
{
  return closure #2 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #5 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)(uint64_t a1)
{
  return closure #5 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #3 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)(uint64_t a1)
{
  return closure #3 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #4 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)(uint64_t a1)
{
  return closure #4 in UpdateCollectionViewListCoordinator.init<A>(viewList:view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ContainerBackgroundRendererModifier<A>@<X0>(uint64_t a1@<X1>, void (*a2)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return static ContainerBackgroundRendererModifier._makeView(modifier:inputs:body:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in SearchEnvironmentWritingModifier()
{
  return &protocol witness table for SearchEnvironmentWritingModifier;
}

_UNKNOWN **base witness table accessor for View in SearchFieldConfigurationReader<A, B>()
{
  return &protocol witness table for SearchFieldConfigurationReader<A, B>;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ProvidesContextMenuInteraction()
{
  return &protocol witness table for ProvidesContextMenuInteraction;
}

_UNKNOWN **base witness table accessor for View in ProgressViewStyleConfiguration.Label()
{
  return &protocol witness table for ProgressViewStyleConfiguration.Label;
}

_UNKNOWN **base witness table accessor for View in ProgressViewStyleConfiguration.CurrentValueLabel()
{
  return &protocol witness table for ProgressViewStyleConfiguration.CurrentValueLabel;
}

_UNKNOWN **base witness table accessor for ViewModifier in CaptureViewRespondersModifier()
{
  return &protocol witness table for CaptureViewRespondersModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in IgnoreViewRespondersModifier()
{
  return &protocol witness table for IgnoreViewRespondersModifier;
}

uint64_t associated type witness table accessor for ListDiffable.SectionIDs.Sequence.Element : Hashable in CollectionViewListDataSource<A>()
{
  return MEMORY[0x1E4FBC4D0];
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ProvidesEditMenuInteraction()
{
  return &protocol witness table for ProvidesEditMenuInteraction;
}

uint64_t type metadata completion function for _ContentShapeKindModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in SectionStyleConfiguration.Header()
{
  return &protocol witness table for SectionStyleConfiguration.Header;
}

_UNKNOWN **base witness table accessor for View in SectionStyleConfiguration.Footer()
{
  return &protocol witness table for SectionStyleConfiguration.Footer;
}

_UNKNOWN **base witness table accessor for View in SectionStyleConfiguration.RawContent()
{
  return &protocol witness table for SectionStyleConfiguration.RawContent;
}

_UNKNOWN **base witness table accessor for View in SearchFieldConfiguration.Control()
{
  return &protocol witness table for SearchFieldConfiguration.Control;
}

_UNKNOWN **base witness table accessor for View in SearchFieldConfiguration.Scopes()
{
  return &protocol witness table for SearchFieldConfiguration.Scopes;
}

_UNKNOWN **base witness table accessor for View in SearchFieldConfiguration.Suggestions()
{
  return &protocol witness table for SearchFieldConfiguration.Suggestions;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SearchPrimitiveModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static SearchPrimitiveModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t partial apply for implicit closure #2 in static SearchPrimitiveModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #2 in static SearchPrimitiveModifier._makeView(modifier:inputs:body:)(*(void *)(v0 + 32));
}

_UNKNOWN **base witness table accessor for View in LabelStyleConfiguration.Title()
{
  return &protocol witness table for LabelStyleConfiguration.Title;
}

_UNKNOWN **base witness table accessor for View in LabelStyleConfiguration.Icon()
{
  return &protocol witness table for LabelStyleConfiguration.Icon;
}

uint64_t protocol witness for View.body.getter in conformance ResolvedTextFieldStyle@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ResolvedTextFieldStyle(v1, a1);
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedTextFieldStyle@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of TextField<_TextFieldStyleLabel>(v1, a1);
}

_UNKNOWN **base witness table accessor for View in CollectionViewListRoot<A, B>()
{
  return &protocol witness table for CollectionViewListRoot<A, B>;
}

uint64_t partial apply for closure #6 in static NavigationStackReader._makeView(view:inputs:)(uint64_t a1)
{
  return closure #6 in static NavigationStackReader._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #1 in static NavigationStackReader._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static NavigationStackReader._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #2 in static NavigationStackReader._makeView(view:inputs:)(uint64_t a1)
{
  return closure #2 in static NavigationStackReader._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #5 in static NavigationStackReader._makeView(view:inputs:)(uint64_t a1)
{
  return closure #5 in static NavigationStackReader._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #3 in static NavigationStackReader._makeView(view:inputs:)(uint64_t a1)
{
  return closure #3 in static NavigationStackReader._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #4 in static NavigationStackReader._makeView(view:inputs:)(uint64_t a1)
{
  return closure #4 in static NavigationStackReader._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ContentMarginModifier()
{
  return &protocol witness table for ContentMarginModifier;
}

_UNKNOWN **base witness table accessor for View in _TextFieldStyleLabel()
{
  return &protocol witness table for _TextFieldStyleLabel;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in HasKeyboardShortcut()
{
  return &protocol witness table for HasKeyboardShortcut;
}

uint64_t partial apply for closure #1 in static VariadicViewForest.ListOutputsTreeVisitor.accumulateOutputs(view:inputs:)(uint64_t a1)
{
  return closure #1 in static VariadicViewForest.ListOutputsTreeVisitor.accumulateOutputs(view:inputs:)(a1);
}

double protocol witness for static View._makeView(view:inputs:) in conformance ListRepresentable<A, B>@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return static PlatformViewRepresentable._makeView(view:inputs:)(a1, a2, a3, (uint64_t)&protocol witness table for ListRepresentable<A, B>, a4);
}

{
  uint64_t WitnessTable;
  uint64_t vars8;

  uint64_t WitnessTable = swift_getWitnessTable();

  return static PlatformViewRepresentable._makeView(view:inputs:)(a1, a2, a3, WitnessTable, a4);
}

_UNKNOWN **base witness table accessor for View in EnvironmentValues.SearchCustomAccessory()
{
  return &protocol witness table for EnvironmentValues.SearchCustomAccessory;
}

_UNKNOWN **base witness table accessor for View in EnvironmentValues.SearchCustomScopeBar()
{
  return &protocol witness table for EnvironmentValues.SearchCustomScopeBar;
}

_UNKNOWN **base witness table accessor for View in EnvironmentValues.SearchSuggestions()
{
  return &protocol witness table for EnvironmentValues.SearchSuggestions;
}

_UNKNOWN **base witness table accessor for View in EnvironmentValues.SearchField()
{
  return &protocol witness table for EnvironmentValues.SearchField;
}

_UNKNOWN **base witness table accessor for View in ListStyleContent()
{
  return &protocol witness table for ListStyleContent;
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance SearchField<A>.IsNotConfiguredFromStyle(uint64_t a1, uint64_t a2)
{
  return static SearchField.IsNotConfiguredFromStyle.evaluate(inputs:)(a1, *(ValueMetadata **)(a2 + 16));
}

uint64_t implicit closure #1 in static CommandGroup._makeCommands(content:inputs:)()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  type metadata accessor for CommandGroup();
  type metadata accessor for _GraphValue();
  int v4 = _GraphValue.value.getter();
  uint64_t List = type metadata accessor for CommandGroup.MakeList();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<CommandsList>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<CommandsList>, (uint64_t)&type metadata for CommandsList, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v4, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_8, (uint64_t)v5, List, MEMORY[0x1E4FBC248], v0, MEMORY[0x1E4FBC278], v1);
  return v3;
}

uint64_t type metadata accessor for CommandGroup()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CommandGroup.MakeList()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<CommandsList>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance SearchFieldStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t destroy for TemporalStackChildren(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnyHoverEffectChild<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t static SystemScrollView._makeView(view:inputs:)@<X0>(long long *a1@<X1>, _OWORD *a2@<X8>)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  long long v2 = a1[3];
  long long v67 = a1[2];
  long long v68 = v2;
  long long v69 = a1[4];
  unsigned int v70 = *((_DWORD *)a1 + 20);
  long long v3 = a1[1];
  long long v65 = *a1;
  long long v66 = v3;
  static EdgeInsets.zero.getter();
  static EdgeInsets.zero.getter();
  *(void *)&v54[48] = v4;
  *(void *)&v54[56] = v5;
  *(void *)&v54[64] = v6;
  *(void *)&v54[72] = v7;
  uint64_t v56 = 0;
  unint64_t v55 = 0;
  unint64_t v57 = 0x8000000000000000;
  int v58 = 0;
  type metadata accessor for External<SystemScrollLayoutState>(0, &lazy cache variable for type metadata for External<SystemScrollLayoutState>, (uint64_t)&type metadata for SystemScrollLayoutState, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<SystemScrollLayoutState> and conformance External<A>(&lazy protocol witness table cache variable for type External<SystemScrollLayoutState> and conformance External<A>, &lazy cache variable for type metadata for External<SystemScrollLayoutState>, (uint64_t)&type metadata for SystemScrollLayoutState);
  int v48 = Attribute.init<A>(body:value:flags:update:)();
  long long v71 = v65;
  long long v72 = v66;
  int v73 = v67;
  *(_OWORD *)uint64_t v54 = v65;
  *(_OWORD *)&v54[16] = v66;
  char v50 = BYTE4(v67);
  *(_OWORD *)&v54[32] = v67;
  int v8 = _GraphInputs.scrollPhaseState.getter();
  int v9 = *MEMORY[0x1E4F4E7A0];
  if (v8 == *MEMORY[0x1E4F4E7A0])
  {
    default argument 1 of ScrollPhaseState.init(phase:velocity:)();
    ScrollPhaseState.init(phase:velocity:)();
    LOBYTE(v63[0]) = v54[0];
    *(_OWORD *)((char *)v63 + 8) = *(_OWORD *)&v54[8];
    uint64_t v10 = MEMORY[0x1E4F3FD68];
    type metadata accessor for External<SystemScrollLayoutState>(0, &lazy cache variable for type metadata for External<ScrollPhaseState>, MEMORY[0x1E4F3FD68], MEMORY[0x1E4F4E778]);
    lazy protocol witness table accessor for type External<SystemScrollLayoutState> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<ScrollPhaseState> and conformance External<A>, &lazy cache variable for type metadata for External<ScrollPhaseState>, v10);
    Attribute.init<A>(body:value:flags:update:)();
  }
  ScrollPrefetchState.init(deadline:)();
  uint64_t v11 = MEMORY[0x1E4F404B0];
  type metadata accessor for External<SystemScrollLayoutState>(0, &lazy cache variable for type metadata for External<ScrollPrefetchState>, MEMORY[0x1E4F404B0], MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<SystemScrollLayoutState> and conformance External<A>(&lazy protocol witness table cache variable for type External<ScrollPrefetchState> and conformance External<A>, &lazy cache variable for type metadata for External<ScrollPrefetchState>, v11);
  int v40 = Attribute.init<A>(body:value:flags:update:)();
  static CGSize.invalidValue.getter();
  type metadata accessor for CGSize(0);
  type metadata accessor for External<CGSize>(0, &lazy cache variable for type metadata for External<CGSize>, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<HostingScrollView> and conformance External<A>(&lazy protocol witness table cache variable for type External<CGSize> and conformance External<A>, &lazy cache variable for type metadata for External<CGSize>, (uint64_t (*)(uint64_t))type metadata accessor for CGSize);
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.time.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type MainThreadRequiringScrollPhase and conformance MainThreadRequiringScrollPhase();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  type metadata accessor for ViewGraph();
  uint64_t v43 = MEMORY[0x18C114EE0]();
  MEMORY[0x1F4188790](v43);
  type metadata accessor for SystemScrollView();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  type metadata accessor for External<SystemScrollLayoutState>(0, &lazy cache variable for type metadata for _GraphValue<ScrollViewConfiguration>, (uint64_t)&type metadata for ScrollViewConfiguration, MEMORY[0x1E4F3F590]);
  unsigned int v12 = _GraphValue.value.getter();
  outlined retain of _ViewInputs((uint64_t)&v65);
  specialized ScrollViewAdjustedConfiguration.init(configuration:inputs:)(v12);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewAdjustedConfiguration and conformance ScrollViewAdjustedConfiguration();
  unsigned int v13 = Attribute.init<A>(body:value:flags:update:)();
  outlined retain of _ViewInputs((uint64_t)&v65);
  specialized ScrollViewAdjustedProperties.init(configuration:inputs:)(v13);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewAdjustedProperties and conformance ScrollViewAdjustedProperties();
  Attribute.init<A>(body:value:flags:update:)();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  ScrollAnchorStorage.init()();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewDefaultAnchors and conformance ScrollViewDefaultAnchors();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  int v45 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  _ViewInputs.animatedPosition()();
  _ViewInputs.animatedSize()();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewContentFrameSize and conformance ScrollViewContentFrameSize();
  Attribute.init<A>(body:value:flags:update:)();
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewContentFrame and conformance ScrollViewContentFrame();
  int v47 = v9;
  Attribute.init<A>(body:value:flags:update:)();
  lazy protocol witness table accessor for type ViewFrame and conformance ViewFrame();
  Attribute<A>.animated(inputs:)();
  _ViewInputs.containerSize.getter();
  static ViewSize.invalidValue.getter();
  static CGSize.invalidValue.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewChildContainerSize and conformance ScrollViewChildContainerSize();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.size.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewAlignmentAdjustment and conformance ScrollViewAlignmentAdjustment();
  int v14 = Attribute.init<A>(body:value:flags:update:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewRTLAlignmentAdjustment and conformance ScrollViewRTLAlignmentAdjustment();
  int v15 = Attribute.init<A>(body:value:flags:update:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewAdjustedPosition and conformance ScrollViewAdjustedPosition();
  int v42 = Attribute.init<A>(body:value:flags:update:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewAdjustedSize and conformance ScrollViewAdjustedSize();
  int v46 = Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.getter();
  _ViewInputs.size.getter();
  _ViewInputs.position.getter();
  _ViewInputs.transform.getter();
  _ViewInputs.safeAreaInsets.getter();
  ResolvedSafeAreaInsets.init(regions:environment:size:position:transform:safeAreaInsets:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ResolvedSafeAreaInsets and conformance ResolvedSafeAreaInsets();
  Attribute.init<A>(body:value:flags:update:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewAdjustedSafeArea and conformance ScrollViewAdjustedSafeArea();
  Attribute.init<A>(body:value:flags:update:)();
  lazy protocol witness table accessor for type EdgeInsets and conformance EdgeInsets();
  int v49 = Attribute<A>.animated(inputs:)();
  _ViewInputs.viewPhase.getter();
  _ViewInputs.transaction.getter();
  static CGSize.invalidValue.getter();
  unsigned int v17 = v16;
  type metadata accessor for External<SystemScrollLayoutState>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<UInt32>, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4F3F398]);
  uint64_t v18 = swift_allocObject();
  *(_DWORD *)(v18 + 16) = 0;
  int v59 = 0;
  uint64_t v56 = 0;
  unint64_t v57 = 0;
  LOBYTE(v58) = 0;
  uint64_t v60 = v18;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewAdjustedState and conformance ScrollViewAdjustedState();
  int v41 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  char v44 = _GraphInputs.hasValueScrollPosition(kind:)();
  AGGraphCreateOffsetAttribute2();
  *(_OWORD *)&v54[32] = v67;
  *(_OWORD *)&v54[48] = v68;
  *(_OWORD *)&v54[64] = v69;
  unint64_t v55 = __PAIR64__(v17, v70);
  *(_OWORD *)&v54[16] = v66;
  swift_getKeyPath();
  outlined retain of _ViewInputs((uint64_t)&v65);
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  outlined release of _ViewInputs((uint64_t)&v65);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for External<SystemScrollLayoutState>(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, MEMORY[0x1E4FBB718]);
  lazy protocol witness table accessor for type ScrollViewAdjustedBehavior and conformance ScrollViewAdjustedBehavior();
  *(_DWORD *)uint64_t v54 = v48;
  *(_DWORD *)&v54[4] = v41;
  *(_DWORD *)&unsigned char v54[8] = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)&unsigned char v54[12] = v9;
  *(_DWORD *)&v54[16] = v9;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  lazy protocol witness table accessor for type ScrollableProvider and conformance ScrollableProvider();
  int v19 = Attribute.init<A>(body:value:flags:update:)();
  v63[2] = v67;
  v63[3] = v68;
  void v63[4] = v69;
  unsigned int v64 = v70;
  v63[0] = v65;
  v63[1] = v66;
  if ((v50 & 0x20) != 0)
  {
    *(void *)uint64_t v54 = v65;
    swift_getKeyPath();
    outlined retain of _ViewInputs((uint64_t)&v65);
    int v20 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    CoordinateSpace.ID.init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScrollViewChildSafeArea and conformance ScrollViewChildSafeArea();
    Attribute.init<A>(body:value:flags:update:)();
    int v21 = Attribute<A>.animated(inputs:)();
    DWORD1(v63[2]) |= 2u;
    AGGraphCreateOffsetAttribute2();
    _ViewInputs.size.setter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScrollViewChildPosition and conformance ScrollViewChildPosition();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.position.setter();
    ViewGraph.$zeroPoint.getter();
    _ViewInputs.containerPosition.setter();
    _ViewInputs.containerSize.setter();
    *(_OWORD *)&v54[48] = v68;
    *(_OWORD *)&v54[64] = v69;
    LODWORD(v55) = v70;
    *(_DWORD *)&v54[16] = _ViewInputs.transform.getter();
    *(_DWORD *)&v54[20] = v41;
    *(_DWORD *)&v54[24] = v49;
    *(_DWORD *)&v54[28] = v21;
    *(_DWORD *)&v54[32] = v14;
    *(_DWORD *)&v54[36] = v20;
    *(void *)&v54[40] = *(void *)v54;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScrollViewChildTransform and conformance ScrollViewChildTransform();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.transform.setter();
    *(_DWORD *)&v54[4] = v45;
    *(void *)&unsigned char v54[8] = *(void *)&v54[40];
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScrollViewChildSafeAreaInsets and conformance ScrollViewChildSafeAreaInsets();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.safeAreaInsets.setter();
    int v9 = v47;
    _GraphInputs.updateScrollStateRequest.setter();
    *(_DWORD *)uint64_t v54 = v40;
    PropertyList.subscript.setter();
  }
  else
  {
    outlined retain of _ViewInputs((uint64_t)&v65);
  }
  uint64_t v52 = v68;
  int v53 = DWORD2(v68);
  *(void *)uint64_t v54 = v68;
  *(_DWORD *)&unsigned char v54[8] = DWORD2(v68);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    PreferencesInputs.remove<A>(_:)();
    PreferenceKeys.add(_:)();
  }
  if (v44)
  {
    PreferenceKeys.add(_:)();
    PreferenceKeys.add(_:)();
  }
  PreferencesInputs.remove<A>(_:)();
  _GraphInputs.convertScrollStateInputsToContent()();
  _GraphInputs.resetScrollPosition(kind:)();
  _ViewInputs.scrollable.setter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for External<CGSize>(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIView>, (uint64_t (*)(uint64_t))type metadata accessor for UIView, MEMORY[0x1E4F41720]);
  lazy protocol witness table accessor for type ScrollViewHostProvider and conformance ScrollViewHostProvider();
  Attribute.init<A>(body:value:flags:update:)();
  lazy protocol witness table accessor for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput();
  PropertyList.subscript.setter();
  PreferencesInputs.remove<A>(_:)();
  PreferenceKeys.add(_:)();
  uint64_t v22 = PreferenceKeys.add(_:)();
  MEMORY[0x1F4188790](v22);
  _GraphValue.subscript.getter();
  *(void *)&v54[16] = *(void *)&v63[1];
  *(_OWORD *)&v54[24] = *(_OWORD *)((char *)&v63[1] + 8);
  *(_OWORD *)&v54[40] = *(_OWORD *)((char *)&v63[2] + 8);
  *(_OWORD *)&v54[56] = *(_OWORD *)((char *)&v63[3] + 8);
  *(void *)&v54[72] = *((void *)&v63[4] + 1);
  LODWORD(v55) = v64;
  uint64_t v23 = static View.makeDebuggableView(view:inputs:)();
  MEMORY[0x1F4188790](v23);
  MEMORY[0x1F4188790](v24);
  AGGraphMutateAttribute();
  *(void *)uint64_t v54 = v52;
  *(_DWORD *)&unsigned char v54[8] = v53;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    *(_DWORD *)uint64_t v54 = v19;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    _sSay7SwiftUI10Scrollable_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E4F3F3B0], MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type ScrollablePreferenceProvider and conformance ScrollablePreferenceProvider();
    Attribute.init<A>(body:value:flags:update:)();
    v54[0] = 0;
    _ViewOutputs.subscript.setter();
  }
  *(_OWORD *)uint64_t v54 = v51;
  uint64_t v25 = _ViewOutputs.layoutComputer.getter();
  if ((v25 & 0x100000000) == 0)
  {
    MEMORY[0x1F4188790](v25);
    MEMORY[0x1F4188790](v26);
    AGGraphMutateAttribute();
  }
  if ((v50 & 2) != 0)
  {
    *(_OWORD *)uint64_t v54 = v51;
    uint64_t v27 = _ViewOutputs.layoutComputer.getter();
    if ((v27 & 0x100000000) != 0) {
      int v28 = v9;
    }
    else {
      int v28 = v27;
    }
    *(_DWORD *)uint64_t v54 = v13;
    *(_DWORD *)&v54[4] = OffsetAttribute2;
    *(_DWORD *)&unsigned char v54[8] = v28;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer();
    Attribute.init<A>(body:value:flags:update:)();
    v54[0] = 0;
    _ViewOutputs.layoutComputer.setter();
  }
  char v29 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  *(void *)uint64_t v54 = v52;
  *(_DWORD *)&unsigned char v54[8] = v53;
  char v30 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (v29 & 1) != 0 || (v30)
  {
    _ViewOutputs.subscript.getter();
    _ViewOutputs.subscript.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for External<SystemScrollLayoutState>(0, &lazy cache variable for type metadata for FocusableBorder?, (uint64_t)&type metadata for FocusableBorder, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type ScrollViewFocusableBorder and conformance ScrollViewFocusableBorder();
    Attribute.init<A>(body:value:flags:update:)();
    swift_getKeyPath();
    int v31 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    uint64_t v62 = 0;
    uint64_t v61 = 0;
    swift_allocObject();
    uint64_t v32 = swift_weakInit();
    double v33 = MEMORY[0x1F4188790](v32);
    MEMORY[0x18C113CE0](partial apply for closure #8 in static SystemScrollView._makeView(view:inputs:), v33);
    swift_release();
    *(_OWORD *)&v54[32] = v67;
    *(_OWORD *)&v54[48] = v68;
    *(_OWORD *)&v54[64] = v69;
    LODWORD(v55) = v70;
    *(_DWORD *)uint64_t v54 = v13;
    *(_DWORD *)&v54[4] = v42;
    *(_DWORD *)&unsigned char v54[8] = _ViewInputs.containerPosition.getter();
    *(_DWORD *)&unsigned char v54[12] = v46;
    *(_DWORD *)&v54[16] = v49;
    *(_DWORD *)&v54[20] = v14;
    *(_DWORD *)&v54[24] = v15;
    *(_DWORD *)&v54[28] = v31;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for CGRect(0);
    lazy protocol witness table accessor for type ScrollViewDisplayListFrame and conformance ScrollViewDisplayListFrame();
    Attribute.init<A>(body:value:flags:update:)();
    uint64_t result = AGGraphCreateOffsetAttribute2();
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
  }
  else
  {
    uint64_t v35 = static ScrollTargetRole.ContentKey.defaultValue.getter();
    *(void *)uint64_t v54 = v52;
    *(_DWORD *)&unsigned char v54[8] = v53;
    MEMORY[0x1F4188790](v35);
    outlined retain of [Text.Modifier]((uint64_t)&v52);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    uint64_t v36 = swift_bridgeObjectRelease();
    *(void *)uint64_t v54 = v52;
    *(_DWORD *)&unsigned char v54[8] = v53;
    MEMORY[0x1F4188790](v36);
    outlined retain of [Text.Modifier]((uint64_t)&v52);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t v37 = swift_bridgeObjectRelease();
    *(void *)uint64_t v54 = v52;
    *(_DWORD *)&unsigned char v54[8] = v53;
    MEMORY[0x1F4188790](v37);
    outlined retain of [Text.Modifier]((uint64_t)&v52);
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    *a2 = v51;
  }
  return result;
}

void type metadata accessor for External<SystemScrollLayoutState>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void specialized UIView.SafeAreaHelper.updateSafeAreaInsets<A>(_:delegate:)(uint64_t a1, char *a2)
{
  outlined init with take of ResolvedScrollBehavior?(a1, (uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for UIEdgeInsets?, (uint64_t)type metadata accessor for UIEdgeInsets, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for External<CGSize>);
  float64x2_t v12 = (float64x2_t)v14[1];
  float64x2_t v13 = (float64x2_t)v14[0];
  if (*(unsigned char *)(v2 + 48))
  {
    outlined init with take of ResolvedScrollBehavior?(a1, (uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for UIEdgeInsets?, (uint64_t)type metadata accessor for UIEdgeInsets, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for External<CGSize>);
    if (v17 == 1) {
      return;
    }
  }
  else
  {
    float64x2_t v10 = *(float64x2_t *)(v2 + 16);
    float64x2_t v8 = *(float64x2_t *)(v2 + 32);
    outlined init with take of ResolvedScrollBehavior?(a1, (uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for UIEdgeInsets?, (uint64_t)type metadata accessor for UIEdgeInsets, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for External<CGSize>);
    if (v17 != 1
      && (~vaddv_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v10, v13), (int32x4_t)vceqq_f64(v8, v12))), 0xFuLL)), (int8x8_t)0x8000400020001)) & 0xF) == 0)
    {
      return;
    }
  }
  float64x2_t v9 = *(float64x2_t *)&a2[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 16];
  float64x2_t v11 = *(float64x2_t *)&a2[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets];
  outlined init with take of ResolvedScrollBehavior?(a1, (uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for UIEdgeInsets?, (uint64_t)type metadata accessor for UIEdgeInsets, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for External<CGSize>);
  if (v15[32] == 1
    || (~vaddv_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v11, v13), (int32x4_t)vceqq_f64(v9, v12))), 0xFuLL)), (int8x8_t)0x8000400020001)) & 0xF) != 0)
  {
    outlined init with take of ResolvedScrollBehavior?(a1, v2 + 16, (uint64_t)&lazy cache variable for type metadata for UIEdgeInsets?, (uint64_t)type metadata accessor for UIEdgeInsets, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for External<CGSize>);
    id v5 = objc_msgSend(a2, sel_superview);
    if (v5)
    {
      uint64_t v6 = v5;
      id v7 = objc_msgSend(v5, sel_layer);

      objc_msgSend(v7, sel_setNeedsLayout);
    }
  }
  else
  {
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(unsigned char *)(v2 + 48) = 1;
  }
}

uint64_t outlined init with take of ResolvedScrollBehavior?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

void type metadata accessor for External<CGSize>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type External<SystemScrollLayoutState> and conformance External<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for External<SystemScrollLayoutState>(255, a2, a3, MEMORY[0x1E4F4E778]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for [Scrollable](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void _sSay7SwiftUI10Scrollable_pGMaTm_0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for ContainerBackgroundHost(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ScrollViewRTLAlignmentAdjustment and conformance ScrollViewRTLAlignmentAdjustment()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewRTLAlignmentAdjustment and conformance ScrollViewRTLAlignmentAdjustment;
  if (!lazy protocol witness table cache variable for type ScrollViewRTLAlignmentAdjustment and conformance ScrollViewRTLAlignmentAdjustment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewRTLAlignmentAdjustment and conformance ScrollViewRTLAlignmentAdjustment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewRTLAlignmentAdjustment and conformance ScrollViewRTLAlignmentAdjustment;
  if (!lazy protocol witness table cache variable for type ScrollViewRTLAlignmentAdjustment and conformance ScrollViewRTLAlignmentAdjustment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewRTLAlignmentAdjustment and conformance ScrollViewRTLAlignmentAdjustment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewAdjustedConfiguration and conformance ScrollViewAdjustedConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewAdjustedConfiguration and conformance ScrollViewAdjustedConfiguration;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedConfiguration and conformance ScrollViewAdjustedConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedConfiguration and conformance ScrollViewAdjustedConfiguration);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewAdjustedConfiguration and conformance ScrollViewAdjustedConfiguration;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedConfiguration and conformance ScrollViewAdjustedConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedConfiguration and conformance ScrollViewAdjustedConfiguration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewChildSafeAreaInsets and conformance ScrollViewChildSafeAreaInsets()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewChildSafeAreaInsets and conformance ScrollViewChildSafeAreaInsets;
  if (!lazy protocol witness table cache variable for type ScrollViewChildSafeAreaInsets and conformance ScrollViewChildSafeAreaInsets)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewChildSafeAreaInsets and conformance ScrollViewChildSafeAreaInsets);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewChildSafeAreaInsets and conformance ScrollViewChildSafeAreaInsets;
  if (!lazy protocol witness table cache variable for type ScrollViewChildSafeAreaInsets and conformance ScrollViewChildSafeAreaInsets)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewChildSafeAreaInsets and conformance ScrollViewChildSafeAreaInsets);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewAlignmentAdjustment and conformance ScrollViewAlignmentAdjustment()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewAlignmentAdjustment and conformance ScrollViewAlignmentAdjustment;
  if (!lazy protocol witness table cache variable for type ScrollViewAlignmentAdjustment and conformance ScrollViewAlignmentAdjustment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAlignmentAdjustment and conformance ScrollViewAlignmentAdjustment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewAlignmentAdjustment and conformance ScrollViewAlignmentAdjustment;
  if (!lazy protocol witness table cache variable for type ScrollViewAlignmentAdjustment and conformance ScrollViewAlignmentAdjustment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAlignmentAdjustment and conformance ScrollViewAlignmentAdjustment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewChildContainerSize and conformance ScrollViewChildContainerSize()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewChildContainerSize and conformance ScrollViewChildContainerSize;
  if (!lazy protocol witness table cache variable for type ScrollViewChildContainerSize and conformance ScrollViewChildContainerSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewChildContainerSize and conformance ScrollViewChildContainerSize);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewChildContainerSize and conformance ScrollViewChildContainerSize;
  if (!lazy protocol witness table cache variable for type ScrollViewChildContainerSize and conformance ScrollViewChildContainerSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewChildContainerSize and conformance ScrollViewChildContainerSize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewAdjustedProperties and conformance ScrollViewAdjustedProperties()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewAdjustedProperties and conformance ScrollViewAdjustedProperties;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedProperties and conformance ScrollViewAdjustedProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedProperties and conformance ScrollViewAdjustedProperties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewAdjustedProperties and conformance ScrollViewAdjustedProperties;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedProperties and conformance ScrollViewAdjustedProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedProperties and conformance ScrollViewAdjustedProperties);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewResponderPosition and conformance ScrollViewResponderPosition()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewResponderPosition and conformance ScrollViewResponderPosition;
  if (!lazy protocol witness table cache variable for type ScrollViewResponderPosition and conformance ScrollViewResponderPosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewResponderPosition and conformance ScrollViewResponderPosition);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewResponderPosition and conformance ScrollViewResponderPosition;
  if (!lazy protocol witness table cache variable for type ScrollViewResponderPosition and conformance ScrollViewResponderPosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewResponderPosition and conformance ScrollViewResponderPosition);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewDisplayListFrame and conformance ScrollViewDisplayListFrame()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewDisplayListFrame and conformance ScrollViewDisplayListFrame;
  if (!lazy protocol witness table cache variable for type ScrollViewDisplayListFrame and conformance ScrollViewDisplayListFrame)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewDisplayListFrame and conformance ScrollViewDisplayListFrame);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewDisplayListFrame and conformance ScrollViewDisplayListFrame;
  if (!lazy protocol witness table cache variable for type ScrollViewDisplayListFrame and conformance ScrollViewDisplayListFrame)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewDisplayListFrame and conformance ScrollViewDisplayListFrame);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewContentFrameSize and conformance ScrollViewContentFrameSize()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewContentFrameSize and conformance ScrollViewContentFrameSize;
  if (!lazy protocol witness table cache variable for type ScrollViewContentFrameSize and conformance ScrollViewContentFrameSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewContentFrameSize and conformance ScrollViewContentFrameSize);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewContentFrameSize and conformance ScrollViewContentFrameSize;
  if (!lazy protocol witness table cache variable for type ScrollViewContentFrameSize and conformance ScrollViewContentFrameSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewContentFrameSize and conformance ScrollViewContentFrameSize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewAdjustedSafeArea and conformance ScrollViewAdjustedSafeArea()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewAdjustedSafeArea and conformance ScrollViewAdjustedSafeArea;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedSafeArea and conformance ScrollViewAdjustedSafeArea)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedSafeArea and conformance ScrollViewAdjustedSafeArea);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewAdjustedSafeArea and conformance ScrollViewAdjustedSafeArea;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedSafeArea and conformance ScrollViewAdjustedSafeArea)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedSafeArea and conformance ScrollViewAdjustedSafeArea);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewAdjustedPosition and conformance ScrollViewAdjustedPosition()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewAdjustedPosition and conformance ScrollViewAdjustedPosition;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedPosition and conformance ScrollViewAdjustedPosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedPosition and conformance ScrollViewAdjustedPosition);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewAdjustedPosition and conformance ScrollViewAdjustedPosition;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedPosition and conformance ScrollViewAdjustedPosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedPosition and conformance ScrollViewAdjustedPosition);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewDefaultAnchors and conformance ScrollViewDefaultAnchors()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewDefaultAnchors and conformance ScrollViewDefaultAnchors;
  if (!lazy protocol witness table cache variable for type ScrollViewDefaultAnchors and conformance ScrollViewDefaultAnchors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewDefaultAnchors and conformance ScrollViewDefaultAnchors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewDefaultAnchors and conformance ScrollViewDefaultAnchors;
  if (!lazy protocol witness table cache variable for type ScrollViewDefaultAnchors and conformance ScrollViewDefaultAnchors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewDefaultAnchors and conformance ScrollViewDefaultAnchors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewChildTransform and conformance ScrollViewChildTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewChildTransform and conformance ScrollViewChildTransform;
  if (!lazy protocol witness table cache variable for type ScrollViewChildTransform and conformance ScrollViewChildTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewChildTransform and conformance ScrollViewChildTransform);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewChildTransform and conformance ScrollViewChildTransform;
  if (!lazy protocol witness table cache variable for type ScrollViewChildTransform and conformance ScrollViewChildTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewChildTransform and conformance ScrollViewChildTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewResponderSize and conformance ScrollViewResponderSize()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewResponderSize and conformance ScrollViewResponderSize;
  if (!lazy protocol witness table cache variable for type ScrollViewResponderSize and conformance ScrollViewResponderSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewResponderSize and conformance ScrollViewResponderSize);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewResponderSize and conformance ScrollViewResponderSize;
  if (!lazy protocol witness table cache variable for type ScrollViewResponderSize and conformance ScrollViewResponderSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewResponderSize and conformance ScrollViewResponderSize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewChildSafeArea and conformance ScrollViewChildSafeArea()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewChildSafeArea and conformance ScrollViewChildSafeArea;
  if (!lazy protocol witness table cache variable for type ScrollViewChildSafeArea and conformance ScrollViewChildSafeArea)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewChildSafeArea and conformance ScrollViewChildSafeArea);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewChildSafeArea and conformance ScrollViewChildSafeArea;
  if (!lazy protocol witness table cache variable for type ScrollViewChildSafeArea and conformance ScrollViewChildSafeArea)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewChildSafeArea and conformance ScrollViewChildSafeArea);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewChildPosition and conformance ScrollViewChildPosition()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewChildPosition and conformance ScrollViewChildPosition;
  if (!lazy protocol witness table cache variable for type ScrollViewChildPosition and conformance ScrollViewChildPosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewChildPosition and conformance ScrollViewChildPosition);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewChildPosition and conformance ScrollViewChildPosition;
  if (!lazy protocol witness table cache variable for type ScrollViewChildPosition and conformance ScrollViewChildPosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewChildPosition and conformance ScrollViewChildPosition);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewAdjustedState and conformance ScrollViewAdjustedState()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewAdjustedState and conformance ScrollViewAdjustedState;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedState and conformance ScrollViewAdjustedState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedState and conformance ScrollViewAdjustedState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewAdjustedState and conformance ScrollViewAdjustedState;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedState and conformance ScrollViewAdjustedState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedState and conformance ScrollViewAdjustedState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewContentFrame and conformance ScrollViewContentFrame()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewContentFrame and conformance ScrollViewContentFrame;
  if (!lazy protocol witness table cache variable for type ScrollViewContentFrame and conformance ScrollViewContentFrame)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewContentFrame and conformance ScrollViewContentFrame);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewContentFrame and conformance ScrollViewContentFrame;
  if (!lazy protocol witness table cache variable for type ScrollViewContentFrame and conformance ScrollViewContentFrame)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewContentFrame and conformance ScrollViewContentFrame);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewAdjustedSize and conformance ScrollViewAdjustedSize()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewAdjustedSize and conformance ScrollViewAdjustedSize;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedSize and conformance ScrollViewAdjustedSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedSize and conformance ScrollViewAdjustedSize);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewAdjustedSize and conformance ScrollViewAdjustedSize;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedSize and conformance ScrollViewAdjustedSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedSize and conformance ScrollViewAdjustedSize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewDisplayList and conformance ScrollViewDisplayList()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewDisplayList and conformance ScrollViewDisplayList;
  if (!lazy protocol witness table cache variable for type ScrollViewDisplayList and conformance ScrollViewDisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewDisplayList and conformance ScrollViewDisplayList);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewDisplayList and conformance ScrollViewDisplayList;
  if (!lazy protocol witness table cache variable for type ScrollViewDisplayList and conformance ScrollViewDisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewDisplayList and conformance ScrollViewDisplayList);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider;
  if (!lazy protocol witness table cache variable for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider;
  if (!lazy protocol witness table cache variable for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedSafeAreaInsets and conformance ResolvedSafeAreaInsets()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedSafeAreaInsets and conformance ResolvedSafeAreaInsets;
  if (!lazy protocol witness table cache variable for type ResolvedSafeAreaInsets and conformance ResolvedSafeAreaInsets)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedSafeAreaInsets and conformance ResolvedSafeAreaInsets);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewFrame and conformance ViewFrame()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewFrame and conformance ViewFrame;
  if (!lazy protocol witness table cache variable for type ViewFrame and conformance ViewFrame)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewFrame and conformance ViewFrame);
  }
  return result;
}

unint64_t specialized ScrollViewAdjustedConfiguration.init(configuration:inputs:)(unsigned int a1)
{
  swift_getKeyPath();
  uint64_t v2 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return a1 | (unint64_t)(v2 << 32);
}

unint64_t lazy protocol witness table accessor for type MainThreadRequiringScrollPhase and conformance MainThreadRequiringScrollPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type MainThreadRequiringScrollPhase and conformance MainThreadRequiringScrollPhase;
  if (!lazy protocol witness table cache variable for type MainThreadRequiringScrollPhase and conformance MainThreadRequiringScrollPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MainThreadRequiringScrollPhase and conformance MainThreadRequiringScrollPhase);
  }
  return result;
}

unint64_t specialized ScrollViewAdjustedProperties.init(configuration:inputs:)(unsigned int a1)
{
  swift_getKeyPath();
  uint64_t v2 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return a1 | (unint64_t)(v2 << 32);
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for DisplayList.ArchiveIDs?(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4F41090]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UpdatedScrollViewContainer and conformance UpdatedScrollViewContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type UpdatedScrollViewContainer and conformance UpdatedScrollViewContainer;
  if (!lazy protocol witness table cache variable for type UpdatedScrollViewContainer and conformance UpdatedScrollViewContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdatedScrollViewContainer and conformance UpdatedScrollViewContainer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewAdjustedBehavior and conformance ScrollViewAdjustedBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewAdjustedBehavior and conformance ScrollViewAdjustedBehavior;
  if (!lazy protocol witness table cache variable for type ScrollViewAdjustedBehavior and conformance ScrollViewAdjustedBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewAdjustedBehavior and conformance ScrollViewAdjustedBehavior);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewFocusableBorder and conformance ScrollViewFocusableBorder()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewFocusableBorder and conformance ScrollViewFocusableBorder;
  if (!lazy protocol witness table cache variable for type ScrollViewFocusableBorder and conformance ScrollViewFocusableBorder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewFocusableBorder and conformance ScrollViewFocusableBorder);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UpdatedHostingScrollView and conformance UpdatedHostingScrollView()
{
  unint64_t result = lazy protocol witness table cache variable for type UpdatedHostingScrollView and conformance UpdatedHostingScrollView;
  if (!lazy protocol witness table cache variable for type UpdatedHostingScrollView and conformance UpdatedHostingScrollView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdatedHostingScrollView and conformance UpdatedHostingScrollView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewHostProvider and conformance ScrollViewHostProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewHostProvider and conformance ScrollViewHostProvider;
  if (!lazy protocol witness table cache variable for type ScrollViewHostProvider and conformance ScrollViewHostProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHostProvider and conformance ScrollViewHostProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollGeometryProvider and conformance ScrollGeometryProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollGeometryProvider and conformance ScrollGeometryProvider;
  if (!lazy protocol witness table cache variable for type ScrollGeometryProvider and conformance ScrollGeometryProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollGeometryProvider and conformance ScrollGeometryProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollGeometryProvider and conformance ScrollGeometryProvider;
  if (!lazy protocol witness table cache variable for type ScrollGeometryProvider and conformance ScrollGeometryProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollGeometryProvider and conformance ScrollGeometryProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewResponder and conformance ScrollViewResponder()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewResponder and conformance ScrollViewResponder;
  if (!lazy protocol witness table cache variable for type ScrollViewResponder and conformance ScrollViewResponder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewResponder and conformance ScrollViewResponder);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollableProvider and conformance ScrollableProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollableProvider and conformance ScrollableProvider;
  if (!lazy protocol witness table cache variable for type ScrollableProvider and conformance ScrollableProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollableProvider and conformance ScrollableProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EdgeInsets and conformance EdgeInsets()
{
  unint64_t result = lazy protocol witness table cache variable for type EdgeInsets and conformance EdgeInsets;
  if (!lazy protocol witness table cache variable for type EdgeInsets and conformance EdgeInsets)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EdgeInsets and conformance EdgeInsets);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollablePreferenceProvider and conformance ScrollablePreferenceProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollablePreferenceProvider and conformance ScrollablePreferenceProvider;
  if (!lazy protocol witness table cache variable for type ScrollablePreferenceProvider and conformance ScrollablePreferenceProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollablePreferenceProvider and conformance ScrollablePreferenceProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollStateEnqueueRequests and conformance ScrollStateEnqueueRequests()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollStateEnqueueRequests and conformance ScrollStateEnqueueRequests;
  if (!lazy protocol witness table cache variable for type ScrollStateEnqueueRequests and conformance ScrollStateEnqueueRequests)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollStateEnqueueRequests and conformance ScrollStateEnqueueRequests);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentObjectKey<PrimaryBarViewModel> and conformance EnvironmentObjectKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentObjectKey<PrimaryBarViewModel> and conformance EnvironmentObjectKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentObjectKey<PrimaryBarViewModel> and conformance EnvironmentObjectKey<A>)
  {
    type metadata accessor for EnvironmentObjectKey<PrimaryBarViewModel>(255, &lazy cache variable for type metadata for EnvironmentObjectKey<PrimaryBarViewModel>, type metadata accessor for PrimaryBarViewModel, MEMORY[0x1E4F40640]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentObjectKey<PrimaryBarViewModel> and conformance EnvironmentObjectKey<A>);
  }
  return result;
}

void type metadata accessor for EnvironmentObjectKey<PrimaryBarViewModel>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.copy()(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 192);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  id v5 = (char *)&v9 - v4;
  uint64_t v7 = v1 + *(void *)(v6 + 232);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
  return AnyNavigationPath.HomogeneousBoxBase.__allocating_init(path:)((uint64_t)v5);
}

uint64_t protocol witness for Projection.get(base:) in conformance AnyNavigationPath.ToHomogeneous<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized AnyNavigationPath.ToHomogeneous.get(base:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6]);
  *a3 = result;
  return result;
}

uint64_t specialized AnyNavigationPath.ToHomogeneous.get(base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v11 = MEMORY[0x1F4188790](a1);
  float64x2_t v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v14 + 16))(v13, v11);
  v16[1] = a2;
  void v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  v16[5] = a6;
  type metadata accessor for AnyNavigationPath.HomogeneousBoxBase();
  return AnyNavigationPath.HomogeneousBoxBase.__allocating_init(path:)((uint64_t)v13);
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.__allocating_init(path:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 192) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 232), a1);
  return v2;
}

uint64_t type metadata accessor for AnyNavigationPath.HomogeneousBoxBase()
{
  return swift_getGenericMetadata();
}

uint64_t HostingContentViewRootModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v53 = a1;
  uint64_t v2 = type metadata accessor for HostingContentViewRootModifier(0);
  uint64_t v3 = v2 - 8;
  MEMORY[0x1F4188790](v2);
  unint64_t v57 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ContentConfigurationBasedRootEnvironment();
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>();
  uint64_t v10 = v9 - 8;
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (double *)((char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v52 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, ViewInputFlagModifier<IsInHostingConfiguration>>();
  MEMORY[0x1F4188790](v15 - 8);
  long long v51 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = HostingContentViewRootModifier.effectivePadding.getter();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  int v56 = static Edge.Set.all.getter();
  long long v24 = *(_OWORD *)v1;
  long long v54 = *(_OWORD *)(v1 + 16);
  long long v55 = v24;
  uint64_t v25 = *(void *)(v1 + 32);
  uint64_t v50 = v1 + 32;
  uint64_t v27 = *(void *)(v1 + 40);
  uint64_t v26 = *(void *)(v1 + 48);
  char v28 = *(unsigned char *)(v1 + 56);
  uint64_t v29 = *(void *)(v1 + 64);
  uint64_t v30 = *(void *)(v1 + 72);
  uint64_t v31 = v1 + *(int *)(v3 + 40);
  LOBYTE(v3) = *(unsigned char *)(v1 + 80);
  outlined init with copy of UIHostingConfigurationStorage(v31, (uint64_t)&v8[*(int *)(v6 + 32)], (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
  long long v32 = v54;
  *(_OWORD *)unint64_t v8 = v55;
  *((_OWORD *)v8 + 1) = v32;
  *((void *)v8 + 4) = v25;
  *((void *)v8 + 5) = v27;
  *((void *)v8 + 6) = v26;
  v8[56] = v28;
  *((void *)v8 + 8) = v29;
  *((void *)v8 + 9) = v30;
  v8[80] = v3;
  v8[81] = 1;
  outlined init with copy of UIHostingConfigurationStorage((uint64_t)v8, (uint64_t)v12 + *(int *)(v10 + 44), (uint64_t (*)(void))type metadata accessor for ContentConfigurationBasedRootEnvironment);
  *(unsigned char *)uint64_t v12 = v56;
  v12[1] = v17;
  *((void *)v12 + 2) = v19;
  *((void *)v12 + 3) = v21;
  *((void *)v12 + 4) = v23;
  *((unsigned char *)v12 + 40) = 0;
  swift_retain();
  uint64_t v33 = (uint64_t)v57;
  swift_retain();
  outlined copy of Transaction?(v30);
  outlined destroy of UIHostingConfigurationStorage((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ContentConfigurationBasedRootEnvironment);
  double v34 = *(double *)(v1 + 152);
  char v35 = *(unsigned char *)(v1 + 160);
  int v36 = *(unsigned __int8 *)(v1 + 177);
  int v37 = *(unsigned __int8 *)(v1 + 176);
  outlined init with copy of UIHostingConfigurationStorage(v1, v33, type metadata accessor for HostingContentViewRootModifier);
  if (v37 == 1)
  {
    uint64_t v38 = (double *)v50;
    double v39 = *(double *)(v33 + 32);
    outlined destroy of UIHostingConfigurationStorage(v33, type metadata accessor for HostingContentViewRootModifier);
    uint64_t v41 = (uint64_t)v52;
    uint64_t v40 = v53;
    uint64_t v42 = (uint64_t)v51;
    if (v39 > 0.0)
    {
      char v43 = 0;
      char v44 = v38;
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of UIHostingConfigurationStorage(v33, type metadata accessor for HostingContentViewRootModifier);
    uint64_t v41 = (uint64_t)v52;
    uint64_t v40 = v53;
    uint64_t v42 = (uint64_t)v51;
  }
  char v44 = (double *)(v1 + 168);
  char v43 = *(unsigned char *)(v1 + 176);
LABEL_6:
  double v45 = *v44;
  if (*(unsigned char *)(v1 + 177)) {
    uint64_t v46 = static Alignment.leading.getter();
  }
  else {
    uint64_t v46 = static Alignment.center.getter();
  }
  if (v36) {
    double v48 = INFINITY;
  }
  else {
    double v48 = 0.0;
  }
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v34, v35, 0.0, 1, v48, v36 ^ 1, v45, v43, v41, 0.0, 1, 0.0, 1, v46, v47);
  outlined destroy of UIHostingConfigurationStorage((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>);
  outlined init with copy of UIHostingConfigurationStorage(v41, v42, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>);
  outlined destroy of UIHostingConfigurationStorage(v41, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>);
  return _s7SwiftUI29UIHostingConfigurationStorage33_57D99A1BF35446A09F91A1066009F644LLVWObTm_0(v42, v40, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, ViewInputFlagModifier<IsInHostingConfiguration>>);
}

double specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (void (*)(uint64_t, uint64_t))outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>).n128_u64[0];
  return result;
}

{
  double result;

  *(void *)&double result = specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (void (*)(uint64_t, uint64_t))outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent).n128_u64[0];
  return result;
}

{
  double result;

  *(void *)&double result = specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (void (*)(uint64_t, uint64_t))outlined init with copy of ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>).n128_u64[0];
  return result;
}

{
  double result;

  *(void *)&double result = specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (void (*)(uint64_t, uint64_t))outlined init with copy of ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>).n128_u64[0];
  return result;
}

__n128 specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, void (*a16)(uint64_t, uint64_t), uint64_t (*a17)(void))
{
  uint64_t v18 = v17;
  uint64_t v20 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v29 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  a16(v18, a9);
  uint64_t v30 = (_OWORD *)(a9 + *(int *)(v20(0) + 36));
  v30[4] = v36;
  v30[5] = v37;
  _OWORD v30[6] = v38;
  *uint64_t v30 = v32;
  v30[1] = v33;
  __n128 result = v35;
  _OWORD v30[2] = v34;
  _OWORD v30[3] = v35;
  return result;
}

double HostingContentViewRootModifier.effectivePadding.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for HostingContentViewRootModifier(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v47 - v6;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v47 - v9;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (double *)((char *)&v47 - v12);
  char v14 = *(unsigned char *)(v0 + 96);
  uint64_t v15 = *(void *)(v0 + 104);
  char v16 = *(unsigned char *)(v0 + 112);
  uint64_t v17 = *(void *)(v0 + 120);
  char v18 = *(unsigned char *)(v0 + 128);
  uint64_t v19 = *(void *)(v0 + 136);
  char v20 = *(unsigned char *)(v0 + 144);
  uint64_t v47 = *(void *)(v0 + 88);
  char v48 = v14;
  uint64_t v49 = v15;
  char v50 = v16;
  uint64_t v51 = v17;
  char v52 = v18;
  uint64_t v53 = v19;
  char v54 = v20;
  uint64_t v21 = OptionalEdgeInsets.top.getter();
  char v23 = v22;
  outlined init with copy of UIHostingConfigurationStorage(v1, (uint64_t)v13, type metadata accessor for HostingContentViewRootModifier);
  if (v23) {
    double v24 = *v13;
  }
  else {
    double v24 = *(double *)&v21;
  }
  outlined destroy of UIHostingConfigurationStorage((uint64_t)v13, type metadata accessor for HostingContentViewRootModifier);
  char v25 = *(unsigned char *)(v1 + 96);
  uint64_t v26 = *(void *)(v1 + 104);
  char v27 = *(unsigned char *)(v1 + 112);
  uint64_t v28 = *(void *)(v1 + 120);
  char v29 = *(unsigned char *)(v1 + 128);
  uint64_t v30 = *(void *)(v1 + 136);
  char v31 = *(unsigned char *)(v1 + 144);
  uint64_t v47 = *(void *)(v1 + 88);
  char v48 = v25;
  uint64_t v49 = v26;
  char v50 = v27;
  uint64_t v51 = v28;
  char v52 = v29;
  uint64_t v53 = v30;
  char v54 = v31;
  OptionalEdgeInsets.leading.getter();
  outlined init with copy of UIHostingConfigurationStorage(v1, (uint64_t)v10, type metadata accessor for HostingContentViewRootModifier);
  outlined destroy of UIHostingConfigurationStorage((uint64_t)v10, type metadata accessor for HostingContentViewRootModifier);
  char v32 = *(unsigned char *)(v1 + 96);
  uint64_t v33 = *(void *)(v1 + 104);
  char v34 = *(unsigned char *)(v1 + 112);
  uint64_t v35 = *(void *)(v1 + 120);
  char v36 = *(unsigned char *)(v1 + 128);
  uint64_t v37 = *(void *)(v1 + 136);
  char v38 = *(unsigned char *)(v1 + 144);
  uint64_t v47 = *(void *)(v1 + 88);
  char v48 = v32;
  uint64_t v49 = v33;
  char v50 = v34;
  uint64_t v51 = v35;
  char v52 = v36;
  uint64_t v53 = v37;
  char v54 = v38;
  OptionalEdgeInsets.bottom.getter();
  outlined init with copy of UIHostingConfigurationStorage(v1, (uint64_t)v7, type metadata accessor for HostingContentViewRootModifier);
  outlined destroy of UIHostingConfigurationStorage((uint64_t)v7, type metadata accessor for HostingContentViewRootModifier);
  char v39 = *(unsigned char *)(v1 + 96);
  uint64_t v40 = *(void *)(v1 + 104);
  char v41 = *(unsigned char *)(v1 + 112);
  uint64_t v42 = *(void *)(v1 + 120);
  char v43 = *(unsigned char *)(v1 + 128);
  uint64_t v44 = *(void *)(v1 + 136);
  char v45 = *(unsigned char *)(v1 + 144);
  uint64_t v47 = *(void *)(v1 + 88);
  char v48 = v39;
  uint64_t v49 = v40;
  char v50 = v41;
  uint64_t v51 = v42;
  char v52 = v43;
  uint64_t v53 = v44;
  char v54 = v45;
  OptionalEdgeInsets.trailing.getter();
  outlined init with copy of UIHostingConfigurationStorage(v1, (uint64_t)v4, type metadata accessor for HostingContentViewRootModifier);
  outlined destroy of UIHostingConfigurationStorage((uint64_t)v4, type metadata accessor for HostingContentViewRootModifier);
  return v24;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>(uint64_t a1, uint64_t a2)
{
  return _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_11(a1, a2, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>);
}

unsigned char *storeEnumTagSinglePayload for ToolbarCustomizationBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t key path setter for EnvironmentValues.tabBarPlacement : EnvironmentValues()
{
  return EnvironmentValues.tabBarPlacement.setter();
}

uint64_t EnvironmentValues.tabBarPlacement.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabBarPlacementKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabBarPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabBarPlacementKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t InputAccessoryGenerator.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance ExpandedSplitViewKey@<X0>(unsigned char *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static ExpandedSplitViewKey.defaultValue;
  return result;
}

uint64_t closure #2 in NavigationSplitCoordinator.updateSplitViewController(_:environment:transaction:seeds:wantsTransparentBackgroundWhenCollapsed:containerWantsTransparentBackground:navigationEventHandlers:columnVisibility:sidebar:content:detail:parameters:splitViewControllerProxyStorage:)(uint64_t a1, uint64_t a2, char a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    swift_beginAccess();
    uint64_t v7 = MEMORY[0x18C119DF0](a2 + 16);
    if (v7)
    {
      uint64_t v8 = (UISplitViewController *)v7;
      uint64_t v9 = *(void *)(v6 + 224);
      uint64_t v10 = *(void *)(v6 + 232);
      char v17 = a3;
      int v11 = *(_DWORD *)(v6 + 240);
      uint64_t v12 = *(void *)(v6 + 248);
      uint64_t v13 = *(void *)(v6 + 256);
      uint64_t v15 = *(void *)(v6 + 264);
      uint64_t v14 = *(void *)(v6 + 272);
      swift_beginAccess();
      char v16 = *(unsigned char *)(v6 + 192);
      v18[0] = v9;
      v18[1] = v10;
      int v19 = v11;
      uint64_t v20 = v12;
      uint64_t v21 = v13;
      uint64_t v22 = v15;
      uint64_t v23 = v14;
      char v24 = v16;
      swift_retain();
      swift_retain();
      swift_retain();
      outlined copy of NavigationEventHandlers?(v12, v13, v15);
      NavigationSplitSidebarStateMachine.dependenciesDidChange(visibilityEngine:splitController:isAnimated:)((uint64_t)v18, v8, v17 & 1);
      swift_release();
      swift_release();
      swift_release();

      swift_release();
      return outlined consume of NavigationEventHandlers?(v12, v13, v15);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

SwiftUI::NavigationSplitViewVisibility_optional NavigationSplitSidebarStateMachine.dependenciesDidChange(visibilityEngine:splitController:isAnimated:)(uint64_t a1, UISplitViewController *a2, int a3)
{
  uint64_t v40 = a2;
  int v39 = a3;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  int v9 = *(unsigned __int16 *)(a1 + 16);
  int v44 = *(unsigned __int16 *)(a1 + 18);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  LODWORD(v5) = *(unsigned __int8 *)(a1 + 56);
  int v42 = v9;
  int v43 = v5;
  static Log.splitViewVisibility.getter();
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v6, 1, v14) == 1)
  {
    outlined destroy of Logger?((uint64_t)v6);
    uint64_t v16 = v41;
  }
  else
  {
    uint64_t v38 = v14;
    swift_retain();
    swift_retain();
    outlined copy of NavigationEventHandlers?(v10, v11, v12);
    swift_retain();
    swift_retain();
    outlined copy of NavigationEventHandlers?(v10, v11, v12);
    char v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    int v19 = v18;
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v20 = swift_slowAlloc();
      int v36 = v19;
      uint64_t v21 = (uint8_t *)v20;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v35 = v22;
      uint64_t v37 = v17;
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v45 = v22;
      uint64_t v46 = v7;
      v33[1] = v21 + 4;
      char v34 = v21;
      uint64_t v47 = v8;
      __int16 v48 = v42;
      __int16 v49 = v44;
      uint64_t v50 = v10;
      uint64_t v51 = v11;
      uint64_t v52 = v12;
      uint64_t v53 = v13;
      char v54 = v43;
      unint64_t v23 = UISplitViewControllerVisibilityEngine.description.getter();
      uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of NavigationEventHandlers?(v10, v11, v12);
      swift_release();
      swift_release();
      outlined consume of NavigationEventHandlers?(v10, v11, v12);
      char v25 = v34;
      _os_log_impl(&dword_1872C6000, v37, (os_log_type_t)v36, "updated from dependencies, %s", v34, 0xCu);
      uint64_t v26 = v35;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v26, -1, -1);
      MEMORY[0x18C119C60](v25, -1, -1);
    }
    else
    {
      swift_release();
      swift_release();

      outlined consume of NavigationEventHandlers?(v10, v11, v12);
      swift_release();
      swift_release();
      outlined consume of NavigationEventHandlers?(v10, v11, v12);
    }
    uint64_t v16 = v41;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v38);
  }
  uint64_t v46 = v7;
  uint64_t v47 = v8;
  __int16 v27 = v42;
  __int16 v48 = v42;
  __int16 v49 = v44;
  uint64_t v50 = v10;
  uint64_t v51 = v11;
  uint64_t v52 = v12;
  uint64_t v53 = v13;
  char v54 = v43;
  SwiftUI::NavigationSplitViewVisibility_optional result = (SwiftUI::NavigationSplitViewVisibility_optional)UISplitViewControllerVisibilityEngine.visibility.getter(&v45);
  __int16 v29 = *(_WORD *)(v16 + 24);
  int v30 = v29 & 0xFF00;
  char v31 = v40;
  if ((v45 & 0xFF00) == 0x200)
  {
    if (v30 == 512) {
      return result;
    }
  }
  else if (v30 != 512 && v29 == v45)
  {
    return result;
  }
  SwiftUI::NavigationSplitViewVisibility_optional result = (SwiftUI::NavigationSplitViewVisibility_optional)[(UISplitViewController *)v40 isCollapsed];
  if ((result.value.kind & 1) == 0)
  {
    uint64_t v46 = v7;
    uint64_t v47 = v8;
    __int16 v48 = v27;
    __int16 v49 = v44;
    uint64_t v50 = v10;
    uint64_t v51 = v11;
    uint64_t v52 = v12;
    uint64_t v53 = v13;
    char v54 = v43;
    char v32 = v39;
    SwiftUI::NavigationSplitViewVisibility_optional result = UISplitViewControllerVisibilityEngine.updateSplitViewController(_:isAnimated:)(v31, v39 & 1);
    *(_WORD *)(v16 + 24) = v45;
    if (v32) {
      return (SwiftUI::NavigationSplitViewVisibility_optional)NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:)(v31);
    }
  }
  return result;
}

uint64_t NavigationSplitCoordinator.updateSplitViewController(_:environment:transaction:seeds:wantsTransparentBackgroundWhenCollapsed:containerWantsTransparentBackground:navigationEventHandlers:columnVisibility:sidebar:content:detail:parameters:splitViewControllerProxyStorage:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, __int16 a18, char a19, uint64_t a20)
{
  uint64_t v21 = v20;
  int v22 = a18 & 0x100;
  uint64_t v73 = a2[1];
  uint64_t v74 = *a2;
  uint64_t v23 = *(void *)(a11 + 8);
  int v24 = *(_DWORD *)(a11 + 16);
  *(void *)(v20 + 224) = *(void *)a11;
  *(void *)(v20 + 232) = v23;
  *(_DWORD *)(v20 + 240) = v24;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_beginAccess();
  outlined assign with copy of _VariadicView_Children(a12, v20 + 16);
  swift_endAccess();
  swift_beginAccess();
  outlined assign with copy of _VariadicView_Children(a13, v20 + 72);
  swift_endAccess();
  swift_beginAccess();
  outlined assign with copy of _VariadicView_Children(a14, v20 + 128);
  swift_endAccess();
  uint64_t v25 = *(void *)(v20 + 248);
  uint64_t v26 = *(void *)(v20 + 256);
  uint64_t v27 = *(void *)(v20 + 264);
  *(void *)(v20 + 248) = a7;
  *(void *)(v20 + 256) = a8;
  *(void *)(v20 + 264) = a9;
  *(void *)(v20 + 272) = a10;
  outlined consume of NavigationEventHandlers?(v25, v26, v27);
  outlined copy of AppIntentExecutor?(a7);
  outlined copy of AppIntentExecutor?(a9);
  static Semantics.v6_1.getter();
  if (isLinkedOnOrAfter(_:)())
  {
    swift_beginAccess();
    *(void *)(v20 + 184) = a15;
    *(unsigned char *)(v20 + 192) = a16;
    *(void *)(v20 + 200) = a17;
    *(unsigned char *)(v20 + 208) = a18 & 1;
    *(unsigned char *)(v20 + 209) = BYTE1(v22);
    *(unsigned char *)(v20 + 210) = a19 & 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  if (a20)
  {
    swift_getKeyPath();
    uint64_t v78 = a20;
    lazy protocol witness table accessor for type UISplitViewControllerProxyStorage and conformance UISplitViewControllerProxyStorage();
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v78 = *(void *)(a20 + 16);
    swift_bridgeObjectRetain();
    specialized NavigationSplitCoordinator.applyOverrides(from:to:)(&v78, a1);
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  id v28 = (id)qword_1883DF980[*(char *)(v20 + 192)];
  if (objc_msgSend(a1, sel_preferredSplitBehavior) != v28) {
    objc_msgSend(a1, sel_setPreferredSplitBehavior_, v28);
  }
  swift_beginAccess();
  uint64_t v29 = *(void *)(v21 + 200);
  if (*(void *)(v29 + 16) && (uint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(0), (v31 & 1) != 0))
  {
    uint64_t v32 = *(void *)(v29 + 56) + 40 * v30;
    double v33 = *(double *)v32;
    double v34 = *(double *)(v32 + 16);
    double v35 = *(double *)(v32 + 24);
    char v36 = *(unsigned char *)(v32 + 32);
    swift_endAccess();
    if (v36 < 0) {
      double v37 = v34;
    }
    else {
      double v37 = v33;
    }
    objc_msgSend(a1, sel_setPreferredPrimaryColumnWidth_, v37);
    static Semantics.v6.getter();
    if (isLinkedOnOrAfter(_:)())
    {
      if (v36) {
        double v38 = v34;
      }
      else {
        double v38 = v35;
      }
      if (v36 < 0) {
        double v33 = v38;
      }
LABEL_23:
      objc_msgSend(a1, sel_setMaximumPrimaryColumnWidth_, v33);
    }
  }
  else
  {
    swift_endAccess();
    static Semantics.v6.getter();
    if (isLinkedOnOrAfter(_:)())
    {
      objc_msgSend(a1, sel_preferredPrimaryColumnWidth);
      double v33 = *MEMORY[0x1E4FB2F10];
      if (v39 != *MEMORY[0x1E4FB2F10]) {
        objc_msgSend(a1, sel_setPreferredPrimaryColumnWidth_, *MEMORY[0x1E4FB2F10]);
      }
      objc_msgSend(a1, sel_maximumPrimaryColumnWidth);
      if (v40 != v33) {
        goto LABEL_23;
      }
    }
  }
  swift_beginAccess();
  uint64_t v41 = *(void *)(v21 + 200);
  if (*(void *)(v41 + 16) && (uint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(1), (v43 & 1) != 0))
  {
    uint64_t v44 = *(void *)(v41 + 56) + 40 * v42;
    double v45 = *(double *)v44;
    double v46 = *(double *)(v44 + 16);
    double v47 = *(double *)(v44 + 24);
    char v48 = *(unsigned char *)(v44 + 32);
    swift_endAccess();
    if (v48 < 0) {
      double v49 = v46;
    }
    else {
      double v49 = v45;
    }
    objc_msgSend(a1, sel_setPreferredSupplementaryColumnWidth_, v49);
    static Semantics.v6.getter();
    uint64_t v50 = a3;
    char v51 = a6;
    if (isLinkedOnOrAfter(_:)())
    {
      if (v48) {
        double v52 = v46;
      }
      else {
        double v52 = v47;
      }
      if (v48 < 0) {
        double v45 = v52;
      }
LABEL_41:
      objc_msgSend(a1, sel_setMaximumSupplementaryColumnWidth_, v45);
    }
  }
  else
  {
    swift_endAccess();
    uint64_t v50 = a3;
    char v51 = a6;
    if (objc_msgSend(a1, sel_style) == (id)2)
    {
      static Semantics.v6.getter();
      if (isLinkedOnOrAfter(_:)())
      {
        objc_msgSend(a1, sel_preferredSupplementaryColumnWidth);
        double v45 = *MEMORY[0x1E4FB2F10];
        if (v53 != *MEMORY[0x1E4FB2F10]) {
          objc_msgSend(a1, sel_setPreferredSupplementaryColumnWidth_, *MEMORY[0x1E4FB2F10]);
        }
        objc_msgSend(a1, sel_maximumSupplementaryColumnWidth);
        if (v54 != v45) {
          goto LABEL_41;
        }
      }
    }
  }
  uint64_t v78 = v74;
  uint64_t v79 = v73;
  EnvironmentValues.horizontalSizeClass.getter();
  BOOL v56 = (v86 & 1) == 0 && v86 != 2;
  UISplitViewController.updateBackground(isCollapsed:wantsTransparentBackgroundWhenCollapsed:containerWantsTransparentBackground:sidebarDimmingIgnoresSafeArea:)(v56, a5 & 1, v51 & 1, v22 != 0);
  uint64_t v78 = v74;
  uint64_t v79 = v73;
  NavigationSplitCoordinator.updateStackCoordinators(isCollapsed:splitController:environment:transaction:seeds:wantsTransparentBackgroundWhenCollapsed:)(v56, a1, &v78, v50, a4, (void *)(a5 & 1));
  char v57 = Transaction.disablesAnimations.getter();
  uint64_t result = Transaction.subscript.getter();
  if ((v78 & 1) == 0)
  {
    uint64_t v59 = *(void *)(v21 + 232);
    int v60 = *(_DWORD *)(v21 + 240);
    uint64_t v61 = *(void *)(v21 + 248);
    uint64_t v62 = *(void *)(v21 + 256);
    uint64_t v63 = *(void *)(v21 + 264);
    uint64_t v64 = *(void *)(v21 + 272);
    char v65 = *(unsigned char *)(v21 + 192);
    uint64_t v78 = *(void *)(v21 + 224);
    uint64_t v79 = v59;
    int v80 = v60;
    uint64_t v81 = v61;
    uint64_t v82 = v62;
    uint64_t v83 = v63;
    uint64_t v84 = v64;
    char v85 = v65;
    swift_retain();
    swift_retain();
    outlined copy of NavigationEventHandlers?(v61, v62, v63);
    UISplitViewControllerVisibilityEngine.visibility.getter(&v86);
    swift_release();
    swift_release();
    outlined consume of NavigationEventHandlers?(v61, v62, v63);
    uint64_t v66 = swift_allocObject();
    swift_weakInit();
    uint64_t v67 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v68 = swift_allocObject();
    *(void *)(v68 + 16) = v66;
    *(void *)(v68 + 24) = v67;
    *(unsigned char *)(v68 + 32) = (v57 & 1) == 0;
    swift_retain();
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of NavigationEventHandlers?(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != 1)
  {
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(result);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);
  }
  return result;
}

uint64_t outlined assign with copy of _VariadicView_Children(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined copy of NavigationEventHandlers?(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != 1)
  {
    outlined copy of AppIntentExecutor?(result);
    return outlined copy of AppIntentExecutor?(a3);
  }
  return result;
}

void *UISplitViewControllerVisibilityEngine.visibility.getter@<X0>(_WORD *a1@<X8>)
{
  if (*(void *)(v1 + 24) > 1uLL)
  {
    LOWORD(v3) = 512;
  }
  else
  {
    LOWORD(v3) = *(_WORD *)(v1 + 18);
    if ((v3 & 0xFF00) == 0x200)
    {
      type metadata accessor for Binding<AnyNavigationSplitVisibility>();
      uint64_t result = MEMORY[0x18C113DA0](&v5);
      LOWORD(v3) = 512;
      switch((unsigned __int16)v5 >> 14)
      {
        case 1:
        case 2:
          LOWORD(v3) = v5 & 0x1FF;
          break;
        case 3:
          break;
        default:
          unint64_t v3 = 0x10200uLL >> (16 * v5);
          break;
      }
    }
  }
  *a1 = v3;
  return result;
}

void type metadata accessor for Binding<AnyNavigationSplitVisibility>()
{
  if (!lazy cache variable for type metadata for Binding<AnyNavigationSplitVisibility>)
  {
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationSplitVisibility>);
    }
  }
}

void UISplitViewController.updateBackground(isCollapsed:wantsTransparentBackgroundWhenCollapsed:containerWantsTransparentBackground:sidebarDimmingIgnoresSafeArea:)(int a1, int a2, char a3, char a4)
{
  uint64_t v5 = v4;
  id v10 = objc_msgSend(v5, sel_traitCollection);
  id v11 = objc_msgSend(v10, sel_userInterfaceIdiom);

  if (v11 == (id)6) {
    return;
  }
  char v32 = a4;
  uint64_t v12 = 0;
  uint64_t v13 = &lazy cache variable for type metadata for UIViewController;
  while (1)
  {
    uint64_t v14 = outlined read-only object #0 of UISplitViewController.updateBackground(isCollapsed:wantsTransparentBackgroundWhenCollapsed:containerWantsTransparentBackground:sidebarDimmingIgnoresSafeArea:)[v12 + 4];
    if (!objc_msgSend(v5, sel_style)) {
      goto LABEL_15;
    }
    id v15 = objc_msgSend(v5, sel_viewControllerForColumn_, v14);
    if (!v15) {
      goto LABEL_15;
    }
    uint64_t v16 = v15;
    self;
    char v17 = (void *)swift_dynamicCastObjCClass();
    if (!v17)
    {

LABEL_15:
      if (v12 == 2) {
        break;
      }
      goto LABEL_16;
    }
    id v18 = objc_msgSend(v17, sel_viewControllers);

    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v19 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v23 > 0)
      {
LABEL_9:
        if ((v19 & 0xC000000000000001) != 0)
        {
          id v20 = (id)MEMORY[0x18C117680](0, v19);
        }
        else
        {
          if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }
          id v20 = *(id *)(v19 + 32);
        }
        uint64_t v21 = v20;
        swift_bridgeObjectRelease();
        unsigned int v22 = objc_msgSend(v21, sel__wantsTransparentBackground);

        if (v12 == 2)
        {
          uint64_t v13 = 0;
          if ((a3 & 1) == 0 && (a1 & (a2 | v22) & 1) == 0) {
            goto LABEL_28;
          }
          goto LABEL_30;
        }
        goto LABEL_3;
      }
    }
    else if (*(uint64_t *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) > 0)
    {
      goto LABEL_9;
    }
    swift_bridgeObjectRelease();
    if (v12 == 2) {
      break;
    }
LABEL_16:
    LOBYTE(v22) = 0;
LABEL_3:
    ++v12;
    if (v22)
    {
      while (v12 != 2)
        ++v12;
      uint64_t v13 = 0;
      if (a3 & 1) != 0 || (a1) {
        goto LABEL_30;
      }
LABEL_28:
      id v24 = objc_msgSend(v5, sel_view);
      if (v24)
      {
        uint64_t v25 = v24;
        uint64_t v13 = (uint64_t *)objc_msgSend(v24, sel_backgroundColor);

        goto LABEL_30;
      }
      goto LABEL_49;
    }
  }
  uint64_t v13 = 0;
  if ((a3 & 1) == 0 && (a1 & a2 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_30:
  id v26 = objc_msgSend(v5, sel_view);
  if (!v26) {
    goto LABEL_47;
  }
  uint64_t v27 = v26;
  id v28 = objc_msgSend(v26, sel_backgroundColor);

  if (v13)
  {
    if (v28)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      double v33 = v13;
      char v29 = static NSObject.== infix(_:_:)();

      if (v29) {
        goto LABEL_39;
      }
    }
LABEL_37:
    id v30 = objc_msgSend(v5, sel_view);
    if (v30)
    {
      char v31 = v30;
      objc_msgSend(v30, sel_setBackgroundColor_, v13);

      double v33 = v13;
      goto LABEL_39;
    }
LABEL_48:

    __break(1u);
LABEL_49:
    __break(1u);
    return;
  }
  if (v28)
  {

    goto LABEL_37;
  }
  double v33 = 0;
LABEL_39:
  objc_msgSend(v5, sel__setWantsFloatingSidebar_, v32 & 1);
}

void NavigationSplitCoordinator.updateStackCoordinators(isCollapsed:splitController:environment:transaction:seeds:wantsTransparentBackgroundWhenCollapsed:)(int a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v9 = v7;
  char v12 = a1;
  uint64_t v66 = a3[1];
  uint64_t v67 = *a3;
  long long v69 = (void *)*a3;
  uint64_t v70 = v66;
  specialized NavigationSplitCoordinator.prepareStackCoordinators(isCollapsed:splitController:environment:transaction:seeds:wantsTransparentBackgroundWhenCollapsed:)(a1, a2, (uint64_t *)&v69);
  if ((v12 & 1) == 0)
  {
    if (*(unsigned char *)(v7 + 360))
    {
      id v20 = *(void **)(v7 + 352);
      if (v20)
      {
        _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)v68);
        uint64_t v8 = MEMORY[0x1E4FBC8C8];
        uint64_t v21 = (uint64_t)v20 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v20) + 0xB0);
        unsigned int v22 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
        outlined init with take of Environment<NavigationEventHandlers>.Content(v21, (uint64_t)&v69, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent, MEMORY[0x1E4FBB718]);
        outlined init with take of Environment<NavigationEventHandlers>.Content((uint64_t)v68, v21, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent, v22);
        uint64_t v23 = v20;
        outlined release of NavigationState.StackContent?((uint64_t)&v69);
        *(void *)((char *)v23 + *(void *)((*(void *)v8 & *v23) + 0xA8)) = -1;
      }
    }
    swift_beginAccess();
    uint64_t v24 = *(void *)(v7 + 344);
    uint64_t v25 = *(void *)(v9 + 232);
    __int16 v26 = *(_WORD *)(v9 + 240);
    long long v69 = *(void **)(v9 + 224);
    uint64_t v70 = v25;
    LOWORD(v71) = v26;
    type metadata accessor for Environment<NavigationEventHandlers>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationSplitVisibility>, (uint64_t)&type metadata for AnyNavigationSplitVisibility, MEMORY[0x1E4F41638]);
    uint64_t v28 = v27;
    uint64_t v61 = v24;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    MEMORY[0x18C113DA0](v75, v28);
    unsigned int v29 = LOWORD(v75[0]) >> 14;
    char v59 = v12;
    if (v29 < 2 || v29 == 3 && LOWORD(v75[0]) == 49152) {
      uint64_t v30 = 2;
    }
    else {
      uint64_t v30 = 3;
    }
    swift_release();
    swift_release();
    long long v69 = (void *)v61;
    uint64_t v70 = v30;
    uint64_t v71 = 0;
    uint64_t v13 = v9 + 16;
    uint64_t v60 = v9;
    char v72 = 0;
    swift_beginAccess();
    uint64_t v62 = v9 + 128;
    swift_beginAccess();
    uint64_t v63 = v9 + 72;
    swift_beginAccess();
    Swift::UInt v31 = NavigationSplitCoordinator.CoordinatorSequence.next()();
    if (v32)
    {
      Swift::UInt v33 = v31;
      uint64_t v6 = v32;
      while (objc_msgSend(a2, sel_style))
      {
        Swift::UInt v36 = (Swift::UInt)objc_msgSend(a2, sel_viewControllerForColumn_, v33);
        if (!v36) {
          goto LABEL_32;
        }
        a6 = (void *)v36;
        self;
        double v37 = (void *)swift_dynamicCastObjCClass();
        if (!v37) {
          goto LABEL_31;
        }
        uint64_t v38 = (uint64_t)v37;
        id v39 = objc_msgSend(v37, sel_traitCollection);
        v73[0] = v67;
        v73[1] = v66;
        UITraitCollection.resolvedEnvironment(base:)(v73, &v74);

        uint64_t v8 = *((void *)&v74 + 1);
        uint64_t v40 = v74;
        type metadata accessor for Environment<NavigationEventHandlers>.Content(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_VariadicView_Children>, MEMORY[0x1E4F40A38], MEMORY[0x1E4FBBE00]);
        uint64_t v41 = swift_allocObject();
        *(_OWORD *)(v41 + 16) = xmmword_18834BB80;
        if (v33 == 1)
        {
          uint64_t v34 = v63;
        }
        else
        {
          uint64_t v34 = v13;
          if (v33 == 2) {
            uint64_t v34 = v62;
          }
        }
        outlined init with copy of _VariadicView_Children(v34, v41 + 32);
        swift_retain();
        swift_retain();
        specialized NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(v38, v40, v8, a4, a5, 0, v40, v8, v41);
        swift_bridgeObjectRelease();
        swift_release_n();
        swift_release_n();

        Swift::UInt v33 = NavigationSplitCoordinator.CoordinatorSequence.next()();
        uint64_t v6 = v35;
        if (!v35) {
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_31:

LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    uint64_t v9 = v60;
    char v12 = v59;
    goto LABEL_45;
  }
  if ((*(unsigned char *)(v7 + 360) & 1) == 0)
  {
    char v59 = v12;
    swift_beginAccess();
    uint64_t v13 = *(void *)(v7 + 344);
    uint64_t v6 = *(void **)(v7 + 224);
    uint64_t v14 = *(void *)(v7 + 232);
    uint64_t v60 = v7;
    __int16 v15 = *(_WORD *)(v7 + 240);
    long long v69 = v6;
    uint64_t v70 = v14;
    LOWORD(v71) = v15;
    type metadata accessor for Environment<NavigationEventHandlers>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationSplitVisibility>, (uint64_t)&type metadata for AnyNavigationSplitVisibility, MEMORY[0x1E4F41638]);
    uint64_t v17 = v16;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    MEMORY[0x18C113DA0](v68, v17);
    unsigned int v18 = LOWORD(v68[0]) >> 14;
    BOOL v19 = v18 >= 2 && (v18 != 3 || LOWORD(v68[0]) != 49152);
    swift_release();
    swift_release();
    if (*(void *)(v13 + 16))
    {
      Swift::UInt v36 = 0;
      if (!v19) {
        goto LABEL_36;
      }
      LOBYTE(v8) = 1;
LABEL_33:
      while (1)
      {
        unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v36);
        if ((v43 & 1) == 0) {
          break;
        }
        uint64_t v44 = *(void **)(*(void *)(v13 + 56) + 8 * v42);
        _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)v68);
        double v45 = (void *)MEMORY[0x1E4FBC8C8];
        uint64_t v46 = (uint64_t)v44 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v44) + 0xB0);
        double v47 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
        outlined init with take of Environment<NavigationEventHandlers>.Content(v46, (uint64_t)&v69, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent, MEMORY[0x1E4FBB718]);
        outlined init with take of Environment<NavigationEventHandlers>.Content((uint64_t)v68, v46, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent, v47);
        uint64_t v6 = v44;
        outlined release of NavigationState.StackContent?((uint64_t)&v69);
        *(void *)((char *)v6 + *(void *)((*v45 & *v6) + 0xA8)) = -1;

        if (!*(void *)(v13 + 16)) {
          break;
        }
        Swift::UInt v36 = 1;
        if ((v8 & 1) == 0)
        {
          unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(2uLL);
          if (v49)
          {
            uint64_t v50 = *(void **)(*(void *)(v13 + 56) + 8 * v48);
            _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)v68);
            uint64_t v51 = (uint64_t)v50 + *(void *)((*v45 & *v50) + 0xB0);
            double v52 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
            outlined init with take of Environment<NavigationEventHandlers>.Content(v51, (uint64_t)&v69, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent, MEMORY[0x1E4FBB718]);
            outlined init with take of Environment<NavigationEventHandlers>.Content((uint64_t)v68, v51, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent, v52);
            uint64_t v6 = v50;
            outlined release of NavigationState.StackContent?((uint64_t)&v69);
            *(void *)((char *)v6 + *(void *)((*v45 & *v6) + 0xA8)) = -1;
          }
          break;
        }
LABEL_36:
        LOBYTE(v8) = 0;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v9 = v60;
    char v12 = v59;
  }
  if (!objc_msgSend(a2, sel_style))
  {
    __break(1u);
    goto LABEL_47;
  }
  double v53 = objc_msgSend(a2, sel_viewControllerForColumn_, 3);
  if (!v53)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v6 = v53;
  self;
  uint64_t v54 = swift_dynamicCastObjCClass();
  if (!v54)
  {
LABEL_47:

    goto LABEL_48;
  }
  long long v55 = *(void **)(v9 + 352);
  if (v55)
  {
    uint64_t v56 = v54;
    swift_retain();
    id v57 = v55;
    swift_retain();
    uint64_t v58 = NavigationSplitCoordinator.allRoots.getter();
    specialized NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(v56, v67, v66, a4, a5, a6 & 1, v67, v66, v58);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

LABEL_45:
    *(unsigned char *)(v9 + 360) = v12 & 1;
    return;
  }
LABEL_49:
  __break(1u);
}

void specialized NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

{
  specialized NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&unk_1ED48DD98, (uint64_t)&unk_1ED48DDE8, (uint64_t)partial apply for specialized closure #2 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:), (uint64_t)&unk_1ED48DDC0, partial apply for specialized closure #3 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:));
}

{
  specialized NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&unk_1ED48E4C8, (uint64_t)&unk_1ED48E518, (uint64_t)partial apply for specialized closure #2 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:), (uint64_t)&unk_1ED48E4F0, partial apply for specialized closure #3 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:));
}

void specialized NavigationSplitCoordinator.prepareStackCoordinators(isCollapsed:splitController:environment:transaction:seeds:wantsTransparentBackgroundWhenCollapsed:)(int a1, void *a2, uint64_t *a3)
{
  HIDWORD(v56) = a1;
  char v65 = (void *)a3[1];
  uint64_t v66 = *a3;
  uint64_t v64 = (uint64_t *)(v3 + 344);
  swift_beginAccess();
  uint64_t v67 = v3;
  if (!*(void *)(*(void *)(v3 + 344) + 16))
  {
    uint64_t v14 = *(void **)(v3 + 232);
    __int16 v15 = *(_WORD *)(v3 + 240);
    uint64_t v74 = *(void *)(v3 + 224);
    uint64_t v75 = v14;
    __int16 v76 = v15;
    type metadata accessor for Environment<NavigationEventHandlers>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationSplitVisibility>, (uint64_t)&type metadata for AnyNavigationSplitVisibility, MEMORY[0x1E4F41638]);
    uint64_t v17 = v16;
    swift_retain();
    swift_retain();
    uint64_t v63 = v17;
    MEMORY[0x18C113DA0](&v72, v17);
    unsigned int v18 = (unsigned __int16)v72 >> 14;
    LODWORD(v56) = v18 >= 2 && (v18 != 3 || (unsigned __int16)v72 != 49152);
    swift_release();
    swift_release();
    uint64_t v62 = v3 + 280;
    uint64_t v58 = v3 + 72;
    uint64_t v59 = v3 + 16;
    uint64_t v57 = v3 + 128;
    uint64_t v60 = MEMORY[0x1E4FBC838] + 8;
    uint64_t v61 = a2;
LABEL_12:
    Swift::UInt v19 = 0;
    if (v56) {
      uint64_t v20 = 1;
    }
    else {
LABEL_14:
    }
      uint64_t v20 = 2;
    uint64_t v4 = 0;
    Swift::UInt v21 = v19;
    while (1)
    {
      uint64_t v22 = v20;
      swift_beginAccess();
      uint64_t v23 = *(void *)(v67 + 184);
      uint64_t v7 = *(void **)(v67 + 232);
      __int16 v24 = *(_WORD *)(v67 + 240);
      uint64_t v74 = *(void *)(v67 + 224);
      uint64_t v75 = v7;
      __int16 v76 = v24;
      swift_retain();
      swift_retain();
      MEMORY[0x18C113DA0](&v72, v63);
      unsigned int v25 = (unsigned __int16)v72 >> 14;
      if (v25 < 2 || v25 == 3 && (unsigned __int16)v72 == 49152) {
        uint64_t v26 = 2;
      }
      else {
        uint64_t v26 = 3;
      }
      swift_release();
      swift_release();
      outlined init with copy of NavigationAuthority(v62, (uint64_t)&v74);
      type metadata accessor for NavigationStackCoordinator<CollapsedSplitNavigationStrategy_Phone>(0, &lazy cache variable for type metadata for NavigationStackCoordinator<SplitColumnNavigationStrategy>, (void (*)(void))lazy protocol witness table accessor for type SplitColumnNavigationStrategy and conformance SplitColumnNavigationStrategy);
      id v28 = objc_allocWithZone(v27);
      unsigned int v29 = (void *)specialized NavigationStackCoordinator.init(context:navigationAuthority:)(v23, v21, v26, &v74);
      if (!objc_msgSend(a2, sel_style)) {
        break;
      }
      uint64_t v68 = v26;
      uint64_t v30 = v23;
      char v70 = v4;
      id v31 = objc_msgSend(a2, sel_viewControllerForColumn_, v21);
      if (!v31) {
        goto LABEL_52;
      }
      uint64_t v4 = (uint64_t)v31;
      self;
      char v32 = (UINavigationController *)swift_dynamicCastObjCClass();
      if (!v32) {
        goto LABEL_51;
      }
      Swift::UInt v33 = v32;
      id v34 = [(UINavigationController *)v32 traitCollection];
      uint64_t v74 = v66;
      uint64_t v75 = v65;
      UITraitCollection.resolvedEnvironment(base:)(&v74, &v72);

      long long v35 = v72;
      type metadata accessor for Environment<NavigationEventHandlers>.Content(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_VariadicView_Children>, MEMORY[0x1E4F40A38], MEMORY[0x1E4FBBE00]);
      uint64_t v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_18834BB80;
      Swift::UInt v69 = v22;
      if (v21 == 2)
      {
        uint64_t v37 = v57;
      }
      else if (v21 == 1)
      {
        uint64_t v37 = v58;
      }
      else
      {
        uint64_t v37 = v59;
      }
      swift_beginAccess();
      outlined init with copy of _VariadicView_Children(v37, v36 + 32);
      swift_retain_n();
      uint64_t v38 = swift_retain_n();
      id v39 = specialized NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:)(v38, *((uint64_t *)&v35 + 1), 0, v35, *((uint64_t *)&v35 + 1), v36);
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_release_n();
      type metadata accessor for UIKitNavigationController();
      uint64_t v40 = swift_dynamicCastClass();
      if (v40)
      {
        uint64_t v41 = (void *)(v40 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_context);
        void *v41 = v30;
        v41[1] = v21;
        v41[2] = v68;
      }
      -[UINavigationController setDelegate:](v33, sel_setDelegate_, v29, v56);
      type metadata accessor for Environment<NavigationEventHandlers>.Content(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, v60, MEMORY[0x1E4FBBE00]);
      uint64_t v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = xmmword_188351940;
      *(void *)(v42 + 32) = v39;
      uint64_t v74 = v42;
      specialized Array._endMutation()();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      char v43 = v39;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [(UINavigationController *)v33 setViewControllers:isa];

      swift_retain();
      swift_retain();
      specialized UIHostingController.prepareNavigationBar(in:navigationController:isRoot:)(v35, *((uint64_t *)&v35 + 1), v33, 1);
      swift_release();
      swift_release();
      swift_beginAccess();
      id v45 = v29;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v71 = *v64;
      *uint64_t v64 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v45, v21, isUniquelyReferenced_nonNull_native);
      *uint64_t v64 = v71;
      swift_bridgeObjectRelease();
      swift_endAccess();

      swift_release();
      swift_release();
      a2 = v61;
      if (v70) {
        goto LABEL_2;
      }
      uint64_t v4 = 1;
      Swift::UInt v19 = v69;
      if (!v69) {
        goto LABEL_12;
      }
      uint64_t v20 = 0;
      Swift::UInt v21 = 2;
      if (v69 == 1) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
LABEL_2:
  if ((v56 & 0x100000000) == 0 || *(void *)(v67 + 352)) {
    return;
  }
  swift_beginAccess();
  uint64_t v6 = *(void *)(v67 + 184);
  uint64_t v7 = *(void **)(v67 + 224);
  uint64_t v8 = *(void *)(v67 + 232);
  __int16 v9 = *(_WORD *)(v67 + 240);
  *(void *)&long long v72 = v7;
  *((void *)&v72 + 1) = v8;
  __int16 v73 = v9;
  type metadata accessor for Environment<NavigationEventHandlers>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationSplitVisibility>, (uint64_t)&type metadata for AnyNavigationSplitVisibility, MEMORY[0x1E4F41638]);
  uint64_t v11 = v10;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v71, v11);
  unsigned int v12 = (unsigned __int16)v71 >> 14;
  if (v12 < 2 || v12 == 3 && (unsigned __int16)v71 == 49152) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 3;
  }
  swift_release();
  swift_release();
  outlined init with copy of NavigationAuthority(v67 + 280, (uint64_t)&v72);
  type metadata accessor for NavigationStackCoordinator<CollapsedSplitNavigationStrategy_Phone>(0, &lazy cache variable for type metadata for NavigationStackCoordinator<CollapsedSplitNavigationStrategy_Phone>, (void (*)(void))lazy protocol witness table accessor for type CollapsedSplitNavigationStrategy_Phone and conformance CollapsedSplitNavigationStrategy_Phone);
  id v48 = objc_allocWithZone(v47);
  uint64_t v49 = specialized NavigationStackCoordinator.init(context:navigationAuthority:)(v6, 4, v13, &v72);
  if (!objc_msgSend(a2, sel_style)) {
    goto LABEL_49;
  }
  uint64_t v4 = (uint64_t)&selRef_showsMenuAsPrimaryAction;
  id v50 = objc_msgSend(a2, sel_viewControllerForColumn_, 3);
  if (!v50)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v7 = v50;
  self;
  uint64_t v51 = (void *)swift_dynamicCastObjCClass();
  if (!v51)
  {
LABEL_53:

    goto LABEL_54;
  }
  objc_msgSend(v51, sel_setDelegate_, v49);

  if (!objc_msgSend(a2, sel_style))
  {
LABEL_50:
    __break(1u);
LABEL_51:

LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  id v52 = objc_msgSend(a2, sel_viewControllerForColumn_, 3);
  if (!v52)
  {
LABEL_56:
    __break(1u);
    return;
  }
  uint64_t v7 = v52;
  self;
  if (!swift_dynamicCastObjCClass())
  {
LABEL_55:

    goto LABEL_56;
  }
  type metadata accessor for UIKitNavigationController();
  uint64_t v53 = swift_dynamicCastClass();
  if (v53)
  {
    uint64_t v54 = (void *)(v53 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_context);
    *uint64_t v54 = v6;
    v54[1] = 4;
    v54[2] = v13;
  }

  long long v55 = *(void **)(v67 + 352);
  *(void *)(v67 + 352) = v49;
}

BOOL @objc UIHostingController._wantsTransparentBackground()()
{
  return UIHostingController._wantsTransparentBackground()();
}

Swift::Bool __swiftcall UIHostingController._wantsTransparentBackground()()
{
  return _UIHostingView.wantsTransparentBackground.getter();
}

id UIKitNavigationController.init(rootViewController:)(void *a1)
{
  v1[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isDataDriven] = 0;
  uint64_t v3 = OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_update;
  type metadata accessor for PlatformBarUpdater();
  uint64_t v4 = (void *)swift_allocObject();
  uint64_t v5 = v1;
  void v4[2] = specialized InferredToolbarState.init()();
  v4[3] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  v4[5] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v6 = MEMORY[0x1E4FBC870];
  v4[7] = 0;
  unsigned char v4[8] = 0;
  v4[6] = v6;
  *(void *)&v1[v3] = v4;
  v5[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isTransitioningToSize] = 0;
  uint64_t v7 = &v5[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_navigationAuthority];
  *(_OWORD *)uint64_t v7 = xmmword_18834BB90;
  *((void *)v7 + 2) = 0;
  uint64_t v8 = &v5[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_context];
  *(_OWORD *)uint64_t v8 = xmmword_1883863B0;
  *((void *)v8 + 2) = 0;
  __int16 v9 = &v5[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_platformNavigationPresentationStrategy];
  *(_OWORD *)__int16 v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((void *)v9 + 4) = 0;
  v5[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isSecure] = 0;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_backgroundHost] = 0;

  type metadata accessor for UIKitNavigationBar();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  type metadata accessor for UIKitToolbar();
  uint64_t v11 = swift_getObjCClassFromMetadata();
  v19.receiver = v5;
  v19.super_class = (Class)type metadata accessor for UIKitNavigationController();
  id v12 = objc_msgSendSuper2(&v19, sel_initWithNavigationBarClass_toolbarClass_, ObjCClassFromMetadata, v11);
  if (a1)
  {
    type metadata accessor for PreferenceValues.Value<PresentationOptionsPreference>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_188351940;
    *(void *)(v13 + 32) = a1;
    specialized Array._endMutation()();
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  id v14 = v12;
  id v15 = a1;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_setViewControllers_, isa);

  id v17 = objc_msgSend(v14, sel_navigationBar);
  objc_msgSend(v17, sel_setPrefersLargeTitles_, 1);

  return v14;
}

id BarAppearanceBridge.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = (uint64_t)&v0[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage];
  v12[0] = 33685505;
  swift_unknownObjectWeakInit();
  char v13 = 1;
  outlined init with take of BarAppearanceBridge.PlatformStorage((uint64_t)v12, v2);
  uint64_t v3 = &v0[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext];
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((void *)v3 + 10) = 0;
  uint64_t v4 = MEMORY[0x1E4FBC870];
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_allowedBars] = MEMORY[0x1E4FBC870];
  uint64_t v5 = v0;
  EnvironmentValues.init()();
  uint64_t v6 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastBarUpdates;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  *(void *)&v5[v6] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v8 = &v5[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastNavigationTitleStorage];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = 1;
  *((void *)v8 + 4) = 0;
  *((void *)v8 + 5) = 0;
  *((void *)v8 + 6) = 0;
  v8[56] = 0;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barBackgroundViewModels] = MEMORY[0x1E4FBC868];
  uint64_t v9 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations;
  *(void *)&v5[v9] = specialized Dictionary.init(dictionaryLiteral:)(v7);
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_toUpdateBars] = v4;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_seedTracker] = v7;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates] = 0;

  v11.receiver = v5;
  v11.super_class = ObjectType;
  return objc_msgSendSuper2(&v11, sel_init);
}

unint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance TabBarAppearanceKey@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *a1 = result;
  return result;
}

uint64_t outlined init with take of BarAppearanceBridge.PlatformStorage(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  swift_unknownObjectWeakTakeInit();
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  return a2;
}

uint64_t type metadata accessor for UIKitNavigationController()
{
  return self;
}

unint64_t specialized InferredToolbarState.init()()
{
  unint64_t v0 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, isUniquelyReferenced_nonNull_native, 1.0);
  swift_bridgeObjectRelease();
  char v2 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(1, v2, 1.0);
  swift_bridgeObjectRelease();
  return v0;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, void *a3, double a4)
{
  a3[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a3[6] + result) = a2 & 1;
  *(double *)(a3[7] + 8 * result) = a4;
  uint64_t v4 = a3[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a3[2] = v6;
  }
  return result;
}

uint64_t type metadata accessor for UIKitNavigationBar()
{
  return self;
}

uint64_t type metadata accessor for PlatformBarUpdater()
{
  return self;
}

id specialized NavigationStackCoordinator.init(context:navigationAuthority:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v10 = (void *)MEMORY[0x1E4FBC8C8];
  objc_super v11 = (void *)((char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x70));
  v11[1] = 0;
  v11[2] = 0;
  void *v11 = 0;
  *((unsigned char *)v4 + *(void *)((*v10 & *v4) + 0x78)) = 2;
  *((unsigned char *)v4 + *(void *)((*v10 & *v4) + 0x80)) = 0;
  *(void *)((char *)v4 + *(void *)((*v10 & *v4) + 0x88)) = 0;
  *((unsigned char *)v4 + *(void *)((*v10 & *v4) + 0x90)) = 0;
  *((unsigned char *)v4 + *(void *)((*v10 & *v4) + 0x98)) = 0;
  id v12 = (void *)((char *)v4 + *(void *)((*v10 & *v4) + 0xA0));
  *id v12 = 0;
  v12[1] = 0;
  *(void *)((char *)v4 + *(void *)((*v10 & *v4) + 0xA8)) = -1;
  uint64_t v13 = (uint64_t)v4 + *(void *)((*v10 & *v4) + 0xB0);
  _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)v18);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v18, v13, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  id v14 = (char *)v4 + *(void *)((*v10 & *v4) + 0x60);
  *(void *)id v14 = a1;
  v14[8] = a2;
  *((void *)v14 + 2) = a3;
  outlined init with copy of NavigationAuthority(a4, (uint64_t)v4 + *(void *)((*v10 & *v4) + 0x68));
  v17.receiver = v4;
  v17.super_class = ObjectType;
  id v15 = objc_msgSendSuper2(&v17, sel_init);
  outlined destroy of NavigationAuthority(a4);
  return v15;
}

void type metadata accessor for NavigationStackCoordinator<CollapsedSplitNavigationStrategy_Phone>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for NavigationStackCoordinator();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for NavigationStackCoordinator()
{
  return __swift_instantiateGenericMetadata();
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];

      *(void *)(v17 + 8 * v10) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_15:
    type metadata accessor for UISplitViewControllerColumn(0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v10 = v18;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

void type metadata accessor for _DictionaryStorage<UISplitViewControllerColumn, NavigationStackCoordinator<SplitColumnNavigationStrategy>>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<UISplitViewControllerColumn, NavigationStackCoordinator<SplitColumnNavigationStrategy>>)
  {
    type metadata accessor for UISplitViewControllerColumn(255);
    type metadata accessor for Set<UniqueID>(255, &lazy cache variable for type metadata for NavigationStackCoordinator<SplitColumnNavigationStrategy>, (uint64_t (*)(void))lazy protocol witness table accessor for type SplitColumnNavigationStrategy and conformance SplitColumnNavigationStrategy, (uint64_t)&type metadata for SplitColumnNavigationStrategy, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationStackCoordinator);
    lazy protocol witness table accessor for type UISplitViewControllerColumn and conformance UISplitViewControllerColumn((unint64_t *)&lazy protocol witness table cache variable for type UISplitViewControllerColumn and conformance UISplitViewControllerColumn, type metadata accessor for UISplitViewControllerColumn);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UISplitViewControllerColumn, NavigationStackCoordinator<SplitColumnNavigationStrategy>>);
    }
  }
}

uint64_t outlined release of NavigationState.StackContent?(uint64_t a1)
{
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v3 = *(_OWORD *)(a1 + 224);
  long long v4 = *(_OWORD *)(a1 + 240);
  outlined consume of NavigationState.StackContent?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((unint64_t *)&v7 + 1),
    *(void *)(a1 + 304));
  return a1;
}

void outlined consume of NavigationState.StackContent?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unint64_t a38,uint64_t a39)
{
  if ((~a22 & 0x7000000000000007) != 0
    || (a32 & 0xF000000000000007) != 0xF000000000000007
    || (a34 & 0xFFFFFFFFFFFFFFF8) != 0x3FFFF8
    || (a38 & 0xFFFFFFFFFF0000FCLL) != 0)
  {
    outlined consume of NavigationState.Base(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39);
  }
}

uint64_t NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:)(void *a1)
{
  swift_weakInit();
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  id v3 = objc_msgSend(a1, sel_transitionCoordinator);
  if (!v3)
  {
    swift_release_n();
    return swift_weakDestroy();
  }
  long long v4 = v3;
  if (!objc_msgSend(a1, sel_style)) {
    goto LABEL_9;
  }
  long long v5 = objc_msgSend(a1, sel_viewControllerForColumn_, 2);
  if (!v5) {
    goto LABEL_9;
  }
  long long v6 = v5;
  self;
  long long v7 = (void *)swift_dynamicCastObjCClass();
  if (v7)
  {
    id v8 = objc_msgSend(v7, sel_topViewController);

    if (v8)
    {
      type metadata accessor for UIHostingController<AnyView>();
      uint64_t v9 = swift_dynamicCastClass();
      if (!v9)
      {
        swift_release_n();
        swift_unknownObjectRelease();

        return swift_weakDestroy();
      }
      long long v6 = *(id *)(v9 + direct field offset for UIHostingController.host);

      specialized closure #1 in NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:)();
      uint64_t v10 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x70);
      ++*(_DWORD *)((char *)v6 + v10);
      uint64_t v11 = swift_allocObject();
      swift_unknownObjectWeakInit();
      BOOL v12 = (void *)swift_allocObject();
      v12[2] = v11;
      v12[3] = partial apply for closure #2 in NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:);
      int v12[4] = v2;
      aBlock[4] = partial apply for closure #1 in UISplitViewController.animateTopDetailAlongsideTransition(begin:end:);
      aBlock[5] = v12;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
      aBlock[3] = &block_descriptor_60;
      uint64_t v13 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v4, sel_animateAlongsideTransition_completion_, 0, v13);
      _Block_release(v13);
      goto LABEL_8;
    }
LABEL_9:
    swift_release_n();
    swift_unknownObjectRelease();
    return swift_weakDestroy();
  }
LABEL_8:
  swift_release_n();
  swift_unknownObjectRelease();

  return swift_weakDestroy();
}

SwiftUI::NavigationSplitViewVisibility_optional __swiftcall UISplitViewControllerVisibilityEngine.updateSplitViewController(_:isAnimated:)(UISplitViewController *_, Swift::Bool isAnimated)
{
  LODWORD(v4) = isAnimated;
  uint64_t v71 = _;
  long long v5 = v2;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v6 - 8);
  id v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v61 - v10;
  uint64_t v12 = *(void *)v3;
  uint64_t v13 = *(void *)(v3 + 8);
  int v72 = *(unsigned __int16 *)(v3 + 16);
  __int16 v14 = *(_WORD *)(v3 + 18);
  uint64_t v16 = *(NSObject **)(v3 + 24);
  uint64_t v15 = *(void *)(v3 + 32);
  uint64_t v68 = *(void *)(v3 + 40);
  uint64_t v69 = v15;
  uint64_t v70 = *(void *)(v3 + 48);
  if ((v14 & 0xFF00) == 0x200)
  {
    static Log.splitViewVisibility.getter();
    uint64_t v17 = type metadata accessor for Logger();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v8, 1, v17) == 1)
    {
      outlined destroy of Logger?((uint64_t)v8);
    }
    else
    {
      uint64_t v64 = v18;
      char v65 = v5;
      uint64_t v66 = v17;
      swift_retain();
      swift_retain();
      uint64_t v24 = (uint64_t)v16;
      uint64_t v25 = (uint64_t)v16;
      uint64_t v26 = v68;
      uint64_t v27 = v69;
      outlined copy of NavigationEventHandlers?(v24, v69, v68);
      swift_retain();
      swift_retain();
      outlined copy of NavigationEventHandlers?(v25, v27, v26);
      id v28 = Logger.logObject.getter();
      uint64_t v29 = v13;
      uint64_t v30 = v12;
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v31))
      {
        os_log_t v63 = v28;
        int v67 = (int)v4;
        long long v4 = (uint8_t *)swift_slowAlloc();
        os_log_t v62 = (os_log_t)swift_slowAlloc();
        os_log_t v74 = v62;
        uint64_t v75 = v30;
        *(_DWORD *)long long v4 = 136315138;
        uint64_t v76 = v29;
        __int16 v77 = v72;
        type metadata accessor for Binding<AnyNavigationSplitVisibility>();
        MEMORY[0x18C113DA0](&v73);
        unint64_t v32 = 0xE700000000000000;
        uint64_t v33 = 0x646E756F626E75;
        uint64_t v34 = v29;
        uint64_t v35 = v25;
        uint64_t v36 = v64;
        switch(v73 >> 14)
        {
          case 1:
          case 2:
            if ((_BYTE)v73)
            {
              if (v73 == 1) {
                uint64_t v33 = 0x6F43656C62756F64;
              }
              else {
                uint64_t v33 = 7105633;
              }
              if (v73 == 1) {
                unint64_t v32 = 0xEC0000006E6D756CLL;
              }
              else {
                unint64_t v32 = 0xE300000000000000;
              }
            }
            else
            {
              uint64_t v33 = 0x6E4F6C6961746564;
              unint64_t v32 = 0xEA0000000000796CLL;
            }
            break;
          case 3:
            break;
          default:
            LOBYTE(v75) = v73;
            uint64_t v33 = String.init<A>(describing:)();
            unint64_t v32 = v55;
            break;
        }
        uint64_t v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v32, (uint64_t *)&v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v56 = v68;
        uint64_t v57 = v69;
        outlined consume of NavigationEventHandlers?(v35, v69, v68);
        swift_release();
        swift_release();
        outlined consume of NavigationEventHandlers?(v35, v57, v56);
        os_log_type_t v58 = v31;
        uint64_t v12 = v30;
        uint64_t v13 = v34;
        os_log_t v59 = v63;
        _os_log_impl(&dword_1872C6000, v63, v58, "updating SVC to %s", v4, 0xCu);
        os_log_t v60 = v62;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v60, -1, -1);
        MEMORY[0x18C119C60](v4, -1, -1);

        long long v5 = v65;
        uint64_t v46 = v66;
        LOBYTE(v4) = v67;
      }
      else
      {
        swift_release();
        swift_release();

        outlined consume of NavigationEventHandlers?(v25, v27, v26);
        swift_release();
        swift_release();
        outlined consume of NavigationEventHandlers?(v25, v27, v26);
        uint64_t v36 = v64;
        uint64_t v12 = v30;
        uint64_t v13 = v29;
        long long v5 = v65;
        uint64_t v46 = v66;
      }
      (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v46);
    }
    uint64_t v75 = v12;
    uint64_t v76 = v13;
    __int16 v77 = v72;
    type metadata accessor for Binding<AnyNavigationSplitVisibility>();
    MEMORY[0x18C113DA0](&v74);
    LOWORD(v75) = (_WORD)v74;
    return (SwiftUI::NavigationSplitViewVisibility_optional)AnyNavigationSplitVisibility.Kind.updateSplitViewController(_:isAnimated:)(v71, v4 & 1, v5);
  }
  else
  {
    int v67 = (int)v4;
    int v19 = *(unsigned __int8 *)(v3 + 56);
    char v20 = v14;
    static Log.splitViewVisibility.getter();
    uint64_t v21 = type metadata accessor for Logger();
    uint64_t v22 = *(void *)(v21 - 8);
    int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v11, 1, v21);
    LODWORD(v66) = v19;
    if (v23 == 1)
    {
      outlined destroy of Logger?((uint64_t)v11);
    }
    else
    {
      LODWORD(v64) = v14;
      char v65 = v5;
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v37, v38))
      {
        os_log_t v62 = v37;
        os_log_t v63 = v16;
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        uint64_t v61 = swift_slowAlloc();
        uint64_t v75 = v61;
        *(_DWORD *)uint64_t v39 = 136315138;
        uint64_t v40 = 0x6F43656C62756F64;
        unint64_t v41 = 0xEC0000006E6D756CLL;
        if (v64 != 1)
        {
          uint64_t v40 = 7105633;
          unint64_t v41 = 0xE300000000000000;
        }
        if (v64) {
          uint64_t v42 = v40;
        }
        else {
          uint64_t v42 = 0x6E4F6C6961746564;
        }
        if (v64) {
          unint64_t v43 = v41;
        }
        else {
          unint64_t v43 = 0xEA0000000000796CLL;
        }
        os_log_t v74 = (os_log_t)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_t v44 = v62;
        _os_log_impl(&dword_1872C6000, v62, v38, "updating SVC to %s", v39, 0xCu);
        uint64_t v45 = v61;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v45, -1, -1);
        MEMORY[0x18C119C60](v39, -1, -1);

        long long v5 = v65;
        uint64_t v16 = v63;
      }
      else
      {

        long long v5 = v65;
      }
      char v20 = v64;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v21);
    }
    char v47 = v67;
    uint64_t v48 = v68;
    LOBYTE(v74) = v20;
    BYTE1(v74) = HIBYTE(v14) & 1;
    uint64_t v75 = v12;
    uint64_t v76 = v13;
    __int16 v77 = v72;
    swift_retain();
    swift_retain();
    uint64_t v49 = (uint64_t)v16;
    uint64_t v50 = (uint64_t)v16;
    uint64_t v51 = v69;
    outlined copy of NavigationEventHandlers?(v50, v69, v48);
    type metadata accessor for Binding<AnyNavigationSplitVisibility>();
    MEMORY[0x18C113DA0](&v73);
    unsigned int v52 = v73 >> 14;
    char v53 = v52 >= 2 && (v52 != 3 || v73 != 49152);
    swift_release();
    swift_release();
    outlined consume of NavigationEventHandlers?(v49, v51, v48);
    return (SwiftUI::NavigationSplitViewVisibility_optional)NavigationSplitViewVisibility.updateSplitViewController(_:isAnimated:behavior:isThreeColumn:)(v71, v47 & 1, v66, v53, v5);
  }
}

id AnyNavigationSplitVisibility.Kind.updateSplitViewController(_:isAnimated:)@<X0>(id result@<X0>, char a2@<W1>, __int16 *a3@<X8>)
{
  unsigned int v5 = (unsigned __int16)*v3;
  __int16 v6 = 512;
  id v8 = result;
  switch(v5 >> 14)
  {
    case 1u:
      id v12 = objc_msgSend(result, sel_displayMode);
      unint64_t result = objc_msgSend(v8, sel_style);
      unint64_t v13 = (unint64_t)v12 - 4;
      if (v5 - 1 >= 2)
      {
        if (v13 < 3 || (v12 == (id)3 || v12 == (id)2) && result == (id)1)
        {
          uint64_t v20 = swift_allocObject();
          swift_unknownObjectWeakInit();
          uint64_t v21 = swift_allocObject();
          *(void *)(v21 + 16) = v20;
          *(unsigned char *)(v21 + 24) = a2 & 1;
          *(void *)(v21 + 32) = 0;
          swift_retain();
          uint64_t v22 = (void (*)())closure #1 in UISplitViewController.hideIfNeeded(_:isAnimated:)partial apply;
          goto LABEL_72;
        }
      }
      else
      {
        if (v13 < 3) {
          goto LABEL_70;
        }
        if (v12 == (id)3)
        {
          if (result == (id)1) {
            goto LABEL_70;
          }
          goto LABEL_62;
        }
        if (v12 != (id)2 || result != (id)1)
        {
LABEL_62:
          uint64_t v37 = swift_allocObject();
          swift_unknownObjectWeakInit();
          uint64_t v21 = swift_allocObject();
          *(void *)(v21 + 16) = v37;
          *(unsigned char *)(v21 + 24) = a2 & 1;
          *(void *)(v21 + 32) = 0;
          swift_retain();
          uint64_t v22 = (void (*)())closure #1 in UISplitViewController.showIfNeeded(_:isAnimated:)partial apply;
          goto LABEL_72;
        }
      }
LABEL_70:
      __int16 v6 = 512;
      goto LABEL_74;
    case 2u:
      if (*v3)
      {
        if (*v3 == 1)
        {
          uint64_t v15 = (char *)objc_msgSend(result, sel_displayMode);
          id v16 = objc_msgSend(v8, sel_style);
          if ((unint64_t)(v15 - 4) < 3 || (v15 == (char *)3 || v15 == (char *)2) && v16 == (id)1)
          {
            uint64_t v17 = swift_allocObject();
            swift_unknownObjectWeakInit();
            uint64_t v18 = swift_allocObject();
            *(void *)(v18 + 16) = v17;
            *(unsigned char *)(v18 + 24) = a2 & 1;
            *(void *)(v18 + 32) = 0;
            swift_retain();
            specialized static UIKitUpdateCycle.addPreCommitObserverOrAsyncMain(_:)((uint64_t)closure #1 in UISplitViewController.hideIfNeeded(_:isAnimated:)partial apply, v18);
            swift_release();
            swift_release();
            char v19 = 1;
          }
          else
          {
            char v19 = 0;
          }
          uint64_t v33 = (char *)objc_msgSend(v8, sel_displayMode);
          unint64_t result = objc_msgSend(v8, sel_style);
          if ((unint64_t)(v33 - 4) >= 3 && (v33 != (char *)3 && v33 != (char *)2 || result != (id)2))
          {
            uint64_t v34 = swift_allocObject();
            swift_unknownObjectWeakInit();
            uint64_t v21 = swift_allocObject();
            *(void *)(v21 + 16) = v34;
            *(unsigned char *)(v21 + 24) = a2 & 1;
            *(void *)(v21 + 32) = 1;
            swift_retain();
            uint64_t v22 = partial apply for closure #1 in UISplitViewController.showIfNeeded(_:isAnimated:);
LABEL_72:
            specialized static UIKitUpdateCycle.addPreCommitObserverOrAsyncMain(_:)((uint64_t)v22, v21);
            swift_release();
            unint64_t result = (id)swift_release();
            goto LABEL_73;
          }
          goto LABEL_69;
        }
        uint64_t v30 = (char *)objc_msgSend(result, sel_displayMode);
        id v31 = objc_msgSend(v8, sel_style);
        if ((unint64_t)(v30 - 4) < 3) {
          goto LABEL_41;
        }
        if (v30 == (char *)3)
        {
          if (v31 != (id)1)
          {
LABEL_64:
            uint64_t v38 = swift_allocObject();
            swift_unknownObjectWeakInit();
            uint64_t v39 = swift_allocObject();
            *(void *)(v39 + 16) = v38;
            *(unsigned char *)(v39 + 24) = a2 & 1;
            *(void *)(v39 + 32) = 0;
            swift_retain();
            specialized static UIKitUpdateCycle.addPreCommitObserverOrAsyncMain(_:)((uint64_t)closure #1 in UISplitViewController.showIfNeeded(_:isAnimated:)partial apply, v39);
            swift_release();
            swift_release();
            char v19 = 1;
            goto LABEL_65;
          }
        }
        else if (v30 != (char *)2 || v31 != (id)1)
        {
          goto LABEL_64;
        }
LABEL_41:
        char v19 = 0;
LABEL_65:
        uint64_t v40 = (char *)objc_msgSend(v8, sel_displayMode);
        unint64_t result = objc_msgSend(v8, sel_style);
        if ((unint64_t)(v40 - 4) >= 3 && (v40 != (char *)3 && v40 != (char *)2 || result != (id)2))
        {
          uint64_t v41 = swift_allocObject();
          swift_unknownObjectWeakInit();
          uint64_t v21 = swift_allocObject();
          *(void *)(v21 + 16) = v41;
          *(unsigned char *)(v21 + 24) = a2 & 1;
          *(void *)(v21 + 32) = 1;
          swift_retain();
          uint64_t v22 = (void (*)())closure #1 in UISplitViewController.showIfNeeded(_:isAnimated:)partial apply;
          goto LABEL_72;
        }
        goto LABEL_69;
      }
      uint64_t v26 = (char *)objc_msgSend(result, sel_displayMode);
      id v27 = objc_msgSend(v8, sel_style);
      if ((unint64_t)(v26 - 4) < 3 || (v26 == (char *)3 || v26 == (char *)2) && v27 == (id)1)
      {
        uint64_t v28 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v29 = swift_allocObject();
        *(void *)(v29 + 16) = v28;
        *(unsigned char *)(v29 + 24) = a2 & 1;
        *(void *)(v29 + 32) = 0;
        swift_retain();
        specialized static UIKitUpdateCycle.addPreCommitObserverOrAsyncMain(_:)((uint64_t)closure #1 in UISplitViewController.hideIfNeeded(_:isAnimated:)partial apply, v29);
        swift_release();
        swift_release();
        char v19 = 1;
      }
      else
      {
        char v19 = 0;
      }
      uint64_t v35 = (char *)objc_msgSend(v8, sel_displayMode);
      unint64_t result = objc_msgSend(v8, sel_style);
      if ((unint64_t)(v35 - 4) < 3 || (v35 == (char *)3 || v35 == (char *)2) && result == (id)2)
      {
        uint64_t v36 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v21 = swift_allocObject();
        *(void *)(v21 + 16) = v36;
        *(unsigned char *)(v21 + 24) = a2 & 1;
        *(void *)(v21 + 32) = 1;
        swift_retain();
        uint64_t v22 = partial apply for closure #1 in UISplitViewController.hideIfNeeded(_:isAnimated:);
        goto LABEL_72;
      }
LABEL_69:
      if ((v19 & 1) == 0) {
        goto LABEL_70;
      }
LABEL_73:
      __int16 v6 = v5 & 0x1FF;
LABEL_74:
      *a3 = v6;
      return result;
    case 3u:
      goto LABEL_74;
    default:
      if (!*v3) {
        goto LABEL_70;
      }
      if (*v3 == 1)
      {
        uint64_t v9 = (char *)objc_msgSend(result, sel_displayMode);
        unint64_t result = objc_msgSend(v8, sel_style);
        if ((unint64_t)(v9 - 4) >= 3 && (v9 != (char *)3 && v9 != (char *)2 || result != (id)1))
        {
          uint64_t v10 = swift_allocObject();
          swift_unknownObjectWeakInit();
          uint64_t v11 = swift_allocObject();
          *(void *)(v11 + 16) = v10;
          *(unsigned char *)(v11 + 24) = a2 & 1;
          *(void *)(v11 + 32) = 0;
          swift_retain();
          specialized static UIKitUpdateCycle.addPreCommitObserverOrAsyncMain(_:)((uint64_t)closure #1 in UISplitViewController.showIfNeeded(_:isAnimated:)partial apply, v11);
          swift_release();
          unint64_t result = (id)swift_release();
          __int16 v6 = 1;
          goto LABEL_74;
        }
      }
      else
      {
        int v23 = (char *)objc_msgSend(result, sel_displayMode);
        unint64_t result = objc_msgSend(v8, sel_style);
        if ((unint64_t)(v23 - 4) < 3 || (v23 == (char *)3 || v23 == (char *)2) && result == (id)1)
        {
          uint64_t v24 = swift_allocObject();
          swift_unknownObjectWeakInit();
          uint64_t v25 = swift_allocObject();
          *(void *)(v25 + 16) = v24;
          *(unsigned char *)(v25 + 24) = a2 & 1;
          *(void *)(v25 + 32) = 0;
          swift_retain();
          specialized static UIKitUpdateCycle.addPreCommitObserverOrAsyncMain(_:)((uint64_t)closure #1 in UISplitViewController.hideIfNeeded(_:isAnimated:)partial apply, v25);
          swift_release();
          unint64_t result = (id)swift_release();
          __int16 v6 = 0;
          goto LABEL_74;
        }
      }
      goto LABEL_70;
  }
}

void type metadata accessor for Set<UniqueID>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CollapsedSplitNavigationStrategy_Phone and conformance CollapsedSplitNavigationStrategy_Phone()
{
  unint64_t result = lazy protocol witness table cache variable for type CollapsedSplitNavigationStrategy_Phone and conformance CollapsedSplitNavigationStrategy_Phone;
  if (!lazy protocol witness table cache variable for type CollapsedSplitNavigationStrategy_Phone and conformance CollapsedSplitNavigationStrategy_Phone)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollapsedSplitNavigationStrategy_Phone and conformance CollapsedSplitNavigationStrategy_Phone);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SplitColumnNavigationStrategy and conformance SplitColumnNavigationStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type SplitColumnNavigationStrategy and conformance SplitColumnNavigationStrategy;
  if (!lazy protocol witness table cache variable for type SplitColumnNavigationStrategy and conformance SplitColumnNavigationStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SplitColumnNavigationStrategy and conformance SplitColumnNavigationStrategy);
  }
  return result;
}

_DWORD *initializeWithCopy for GeometryActionBinder(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v2 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v3 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v2 = *v3;
  long long v4 = (_DWORD *)(((unint64_t)v2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *long long v4 = *v5;
  __int16 v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *__int16 v6 = *v7;
  id v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *id v8 = *v9;
  unint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v10 = *v11;
  id v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *id v12 = *v13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = *(_DWORD *)(v15 + 80);
  unint64_t v17 = *(_DWORD *)(v15 + 80) & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v48 = v16 + 4;
  uint64_t v45 = (_DWORD *)(((unint64_t)v13 + v16 + 4) & v17);
  uint64_t v46 = (_DWORD *)(((unint64_t)v12 + v16 + 4) & v17);
  *uint64_t v46 = *v45;
  unint64_t v18 = ((unint64_t)v46 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = ((unint64_t)v45 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4) = *(unsigned char *)(v19 + 4);
  unint64_t v20 = v16 + 5 + v18;
  uint64_t v21 = ~v16;
  unint64_t v22 = v16 + 5 + v19;
  char v47 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v15 + 48);
  uint64_t v49 = v15;
  if (v47(v22 & ~v16, 1, AssociatedTypeWitness))
  {
    int v23 = *(_DWORD *)(v15 + 84);
    size_t v24 = *(void *)(v15 + 64);
    if (v23) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v24 + 1;
    }
    memcpy((void *)(v20 & ~v16), (const void *)(v22 & ~v16), v25);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 16))(v20 & ~v16, v22 & ~v16, AssociatedTypeWitness);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v15 + 56))(v20 & ~v16, 0, 1, AssociatedTypeWitness);
    int v23 = *(_DWORD *)(v15 + 84);
    size_t v24 = *(void *)(v15 + 64);
  }
  if (v23) {
    size_t v26 = v24;
  }
  else {
    size_t v26 = v24 + 1;
  }
  id v27 = (void *)(((v20 | v16) + v26) & v21);
  uint64_t v28 = (const void *)(((v22 | v16) + v26) & v21);
  if (v47((unint64_t)v28, 1, AssociatedTypeWitness))
  {
    memcpy(v27, v28, v26);
    uint64_t v29 = v49;
  }
  else
  {
    uint64_t v29 = v49;
    (*(void (**)(void *, const void *, uint64_t))(v49 + 16))(v27, v28, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v27, 0, 1, AssociatedTypeWitness);
  }
  uint64_t v30 = (void *)(((unint64_t)v27 + v26 + v16) & v21);
  id v31 = (const void *)(((unint64_t)v28 + v26 + v16) & v21);
  if (v47((unint64_t)v31, 1, AssociatedTypeWitness))
  {
    memcpy(v30, v31, v26);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v29 + 16))(v30, v31, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v30, 0, 1, AssociatedTypeWitness);
  }
  uint64_t v32 = v26 + ((v16 + 9) & v21) + ((v26 + v16 + ((v26 + v16) & v21)) & v21);
  uint64_t v33 = (char *)v46 + v32;
  uint64_t v34 = (char *)v45 + v32;
  uint64_t v35 = (void *)((unint64_t)(v33 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v36 = (uint64_t *)((unint64_t)(v34 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v37 = *v36;
  *(void *)((char *)v35 + 5) = *(uint64_t *)((char *)v36 + 5);
  *uint64_t v35 = v37;
  uint64_t v38 = (_DWORD *)((unint64_t)(v33 + 19) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v39 = (_DWORD *)((unint64_t)(v34 + 19) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v38 = *v39;
  uint64_t v40 = (_DWORD *)(((unint64_t)v38 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v41 = (_DWORD *)(((unint64_t)v39 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v40 = *v41;
  uint64_t v42 = (void *)(((unint64_t)v40 + v48) & v21);
  unint64_t v43 = (const void *)(((unint64_t)v41 + v48) & v21);
  if (v47((unint64_t)v43, 1, AssociatedTypeWitness))
  {
    memcpy(v42, v43, v26);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v29 + 16))(v42, v43, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v42, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t type metadata accessor for UIViewSnapshotResponder()
{
  uint64_t result = type metadata singleton initialization cache for UIViewSnapshotResponder;
  if (!type metadata singleton initialization cache for UIViewSnapshotResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AccessibilityGestureModifier.initialAttachment(for:)(unint64_t a1, int a2)
{
  v12[0] = MEMORY[0x1E4FBC860];
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x1E4FBC860];
    if (a2) {
      goto LABEL_15;
    }
LABEL_27:
    swift_release();
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4) {
    goto LABEL_26;
  }
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_33;
  }
  for (uint64_t i = 0; i != v4; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v6 = (id)MEMORY[0x18C117680](i, a1);
    }
    else {
      id v6 = *(id *)(a1 + 8 * i + 32);
    }
    uint64_t v7 = v6;
    AccessibilityNode.visibility.getter((int *)&v13);
    if ((v13 & 4) != 0 || (v13 & 8) != 0 && (v13 & 0x400000000) == 0)
    {
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = v12[0];
  if (!a2) {
    goto LABEL_27;
  }
LABEL_15:
  if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(v8 + 16);
    goto LABEL_18;
  }
LABEL_33:
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
LABEL_18:
  swift_release();
  if (v9 >= 2)
  {
LABEL_28:
    LOBYTE(v13) = 20;
    AccessibilityNullableOptionSet<>.init(removing:)();
    goto LABEL_29;
  }
  if ((a2 | 2) == 3 && v9 == 1)
  {
    LOBYTE(v13) = 20;
    AccessibilityNullableOptionSet<>.init(adding:)();
LABEL_29:
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v13 = Dictionary.init(minimumCapacity:)();
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>();
    v12[3] = v11;
    int v12[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>();
    specialized Dictionary.subscript.setter((uint64_t)v12, MEMORY[0x1E4F40BA8]);
    v12[0] = v13;
    static AccessibilityAttachment.properties(_:)();
    return swift_bridgeObjectRelease();
  }

  return AccessibilityAttachment.init()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSNotificationName(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t initializeWithCopy for MenuVisitor.MenuStackGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = *(void **)a2;
  id v6 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = a1 + 64;
  uint64_t v10 = a2 + 64;
  unint64_t v11 = *(void *)(a2 + 184);
  id v12 = v5;
  id v13 = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v11 >> 1 != 4294967294)
  {
    int v23 = *(unsigned __int8 *)(a2 + 72);
    if (v23 == 255)
    {
      *(void *)uint64_t v9 = *(void *)v10;
      *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
    }
    else
    {
      size_t v24 = *(void **)(a2 + 64);
      outlined copy of GraphicsImage.Contents(v24, *(unsigned char *)(a2 + 72));
      *(void *)(a1 + 64) = v24;
      *(unsigned char *)(a1 + 72) = v23;
      unint64_t v11 = *(void *)(a2 + 184);
    }
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
    *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
    long long v25 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v25;
    *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
    *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
    *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
    if (v11 >> 1 == 0xFFFFFFFF)
    {
      long long v26 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v26;
    }
    else
    {
      uint64_t v27 = *(void *)(a2 + 168);
      uint64_t v28 = *(void *)(a2 + 176);
      uint64_t v29 = *(void *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v27, v28, v11);
      *(void *)(a1 + 168) = v27;
      *(void *)(a1 + 176) = v28;
      *(void *)(a1 + 184) = v11;
      *(void *)(a1 + 192) = v29;
    }
    uint64_t v30 = *(void *)(a2 + 208);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = v30;
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
    *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
    id v31 = *(void **)(a2 + 232);
    *(void *)(a1 + 232) = v31;
    *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
    *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    id v32 = v31;
    uint64_t v19 = *(void *)(a2 + 256);
    if (v19) {
      goto LABEL_3;
    }
LABEL_13:
    long long v33 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v33;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_14;
  }
  long long v14 = *(_OWORD *)(v10 + 144);
  *(_OWORD *)(v9 + 128) = *(_OWORD *)(v10 + 128);
  *(_OWORD *)(v9 + 144) = v14;
  *(_OWORD *)(v9 + 160) = *(_OWORD *)(v10 + 160);
  *(_DWORD *)(v9 + 175) = *(_DWORD *)(v10 + 175);
  long long v15 = *(_OWORD *)(v10 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v9 + 80) = v15;
  long long v16 = *(_OWORD *)(v10 + 112);
  *(_OWORD *)(v9 + 96) = *(_OWORD *)(v10 + 96);
  *(_OWORD *)(v9 + 112) = v16;
  long long v17 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v17;
  long long v18 = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v9 + 48) = v18;
  uint64_t v19 = *(void *)(a2 + 256);
  if (!v19) {
    goto LABEL_13;
  }
LABEL_3:
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v19;
  unint64_t v20 = *(void **)(a2 + 264);
  swift_bridgeObjectRetain();
  if ((unint64_t)v20 >= 2) {
    id v21 = v20;
  }
  *(void *)(a1 + 264) = v20;
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)(a2 + 277);
  uint64_t v22 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v22;
  swift_retain();
  swift_retain();
LABEL_14:
  unint64_t v34 = *(void *)(a2 + 328);
  if (v34 >> 2 == 0xFFFFFFFF)
  {
    long long v35 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v35;
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    long long v36 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v36;
    long long v37 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v37;
  }
  else
  {
    uint64_t v38 = *(void **)(a2 + 296);
    uint64_t v39 = *(void *)(a2 + 304);
    uint64_t v40 = *(void *)(a2 + 312);
    uint64_t v41 = *(void *)(a2 + 320);
    uint64_t v42 = *(void *)(a2 + 336);
    uint64_t v43 = *(void *)(a2 + 344);
    uint64_t v44 = *(void *)(a2 + 352);
    uint64_t v84 = *(void *)(a2 + 360);
    uint64_t v85 = *(void *)(a2 + 368);
    uint64_t v87 = *(void *)(a2 + 376);
    uint64_t v90 = *(void *)(a2 + 384);
    __dsta = *(void **)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v38, v39, v40, v41, v34, v42, v43, v44, v84, v85, v87, v90, (uint64_t)__dsta);
    *(void *)(a1 + 296) = v38;
    *(void *)(a1 + 304) = v39;
    *(void *)(a1 + 312) = v40;
    *(void *)(a1 + 320) = v41;
    *(void *)(a1 + 328) = v34;
    *(void *)(a1 + 336) = v42;
    *(void *)(a1 + 344) = v43;
    *(void *)(a1 + 352) = v44;
    *(void *)(a1 + 360) = v84;
    *(void *)(a1 + 368) = v85;
    *(void *)(a1 + 376) = v87;
    *(void *)(a1 + 384) = v90;
    *(void *)(a1 + 392) = __dsta;
  }
  uint64_t v45 = *(void *)(a2 + 408);
  if (v45 == 1)
  {
    long long v46 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = v46;
    *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
    long long v47 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v47;
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
  if (v45)
  {
    uint64_t v48 = *(void *)(a2 + 416);
    *(void *)(a1 + 408) = v45;
    *(void *)(a1 + 416) = v48;
    swift_retain();
    uint64_t v49 = *(void *)(a2 + 424);
    if (v49) {
      goto LABEL_21;
    }
LABEL_24:
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    uint64_t v51 = *(void *)(a2 + 440);
    if (v51) {
      goto LABEL_22;
    }
LABEL_25:
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_26;
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  uint64_t v49 = *(void *)(a2 + 424);
  if (!v49) {
    goto LABEL_24;
  }
LABEL_21:
  uint64_t v50 = *(void *)(a2 + 432);
  *(void *)(a1 + 424) = v49;
  *(void *)(a1 + 432) = v50;
  swift_retain();
  uint64_t v51 = *(void *)(a2 + 440);
  if (!v51) {
    goto LABEL_25;
  }
LABEL_22:
  uint64_t v52 = *(void *)(a2 + 448);
  *(void *)(a1 + 440) = v51;
  *(void *)(a1 + 448) = v52;
  swift_retain();
LABEL_26:
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
LABEL_27:
  uint64_t v53 = *(void *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = v53;
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  uint64_t v54 = *(void *)(a2 + 504);
  swift_bridgeObjectRetain();
  if (v54)
  {
    uint64_t v55 = *(void *)(a2 + 512);
    *(void *)(a1 + 504) = v54;
    *(void *)(a1 + 512) = v55;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  uint64_t v56 = *(void *)(a2 + 528);
  if (v56)
  {
    *(void *)(a1 + 528) = v56;
    *(void *)(a1 + 536) = *(void *)(a2 + 536);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
  }
  uint64_t v57 = *(void *)(a2 + 552);
  if (v57 == 1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(void *)(a1 + 568) = *(void *)(a2 + 568);
  }
  else
  {
    *(void *)(a1 + 552) = v57;
    uint64_t v58 = *(void *)(a2 + 560);
    swift_retain();
    if (v58)
    {
      uint64_t v59 = *(void *)(a2 + 568);
      *(void *)(a1 + 560) = v58;
      *(void *)(a1 + 568) = v59;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
    }
  }
  os_log_t v60 = *(void **)(a2 + 576);
  *(void *)(a1 + 576) = v60;
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(_WORD *)(a1 + 632) = *(_WORD *)(a2 + 632);
  *(unsigned char *)(a1 + 634) = *(unsigned char *)(a2 + 634);
  uint64_t v61 = type metadata accessor for PlatformItemList.Item();
  uint64_t v62 = *(int *)(v61 + 112);
  uint64_t v91 = (int *)v61;
  __dst = (unsigned char *)(a1 + v62);
  os_log_t v63 = (unsigned char *)(a2 + v62);
  uint64_t v64 = type metadata accessor for CommandOperation();
  uint64_t v86 = *(void *)(v64 - 8);
  uint64_t v88 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v86 + 48);
  id v65 = v60;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v88(v63, 1, v64))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_1(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(__dst, v63, *(void *)(*(void *)(v66 - 8) + 64));
  }
  else
  {
    unsigned char *__dst = *v63;
    uint64_t v67 = *(int *)(v64 + 20);
    uint64_t v68 = v64;
    uint64_t v69 = &__dst[v67];
    uint64_t v70 = &v63[v67];
    uint64_t v89 = v63;
    uint64_t v71 = *(void *)&v63[v67];
    uint64_t v72 = *((void *)v70 + 1);
    char v73 = v70[16];
    outlined copy of Text.Storage(v71, v72, v73);
    *(void *)uint64_t v69 = v71;
    *((void *)v69 + 1) = v72;
    v69[16] = v73;
    *((void *)v69 + 3) = *((void *)v70 + 3);
    uint64_t v74 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v75 = &v69[v74];
    uint64_t v76 = &v70[v74];
    uint64_t v77 = type metadata accessor for UUID();
    uint64_t v78 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v77 - 8) + 16);
    swift_bridgeObjectRetain();
    v78(v75, v76, v77);
    uint64_t v79 = *(int *)(v68 + 24);
    int v80 = &__dst[v79];
    uint64_t v81 = &v89[v79];
    if (*v81)
    {
      uint64_t v82 = v81[1];
      *int v80 = *v81;
      v80[1] = v82;
      swift_retain();
    }
    else
    {
      *(_OWORD *)int v80 = *(_OWORD *)v81;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v86 + 56))(__dst, 0, 1, v68);
  }
  *(unsigned char *)(a1 + v91[29]) = *(unsigned char *)(a2 + v91[29]);
  *(unsigned char *)(a1 + v91[30]) = *(unsigned char *)(a2 + v91[30]);
  *(unsigned char *)(a1 + v91[31]) = *(unsigned char *)(a2 + v91[31]);
  *(unsigned char *)(a1 + v91[32]) = *(unsigned char *)(a2 + v91[32]);
  *(void *)(a1 + v91[33]) = *(void *)(a2 + v91[33]);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

char *initializeBufferWithCopyOfBuffer for MenuVisitor.MenuStackGroup(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  unsigned int v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
    return a1;
  }
  uint64_t v8 = a2[1];
  uint64_t v7 = a2[2];
  *((void *)a1 + 1) = v8;
  *((void *)a1 + 2) = v7;
  *((void *)a1 + 3) = a2[3];
  a1[32] = *((unsigned char *)a2 + 32);
  uint64_t v9 = a2[6];
  *((void *)a1 + 5) = a2[5];
  *((void *)a1 + 6) = v9;
  a1[56] = *((unsigned char *)a2 + 56);
  uint64_t v10 = (char **)(a1 + 64);
  unint64_t v11 = a2 + 8;
  unint64_t v12 = (unint64_t)a2[23];
  id v13 = v5;
  long long v14 = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v12 >> 1 != 4294967294)
  {
    int v24 = *((unsigned __int8 *)a2 + 72);
    if (v24 == 255)
    {
      *uint64_t v10 = *v11;
      a1[72] = *((unsigned char *)v11 + 8);
    }
    else
    {
      long long v25 = a2[8];
      outlined copy of GraphicsImage.Contents(v25, *((unsigned char *)a2 + 72));
      *((void *)a1 + 8) = v25;
      a1[72] = v24;
      unint64_t v12 = (unint64_t)a2[23];
    }
    *((void *)a1 + 10) = a2[10];
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    a1[104] = *((unsigned char *)a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)((char *)a2 + 108);
    a1[124] = *((unsigned char *)a2 + 124);
    long long v26 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v26;
    *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
    a1[162] = *((unsigned char *)a2 + 162);
    a1[163] = *((unsigned char *)a2 + 163);
    if (v12 >> 1 == 0xFFFFFFFF)
    {
      long long v27 = *(_OWORD *)(a2 + 23);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
      *(_OWORD *)(a1 + 184) = v27;
    }
    else
    {
      uint64_t v28 = (uint64_t)a2[21];
      uint64_t v29 = (uint64_t)a2[22];
      uint64_t v30 = a2[24];
      outlined copy of AccessibilityImageLabel(v28, v29, v12);
      *((void *)a1 + 21) = v28;
      *((void *)a1 + 22) = v29;
      *((void *)a1 + 23) = v12;
      *((void *)a1 + 24) = v30;
    }
    id v31 = a2[26];
    *((void *)a1 + 25) = a2[25];
    *((void *)a1 + 26) = v31;
    *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
    *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
    a1[224] = *((unsigned char *)a2 + 224);
    id v32 = a2[29];
    *((void *)a1 + 29) = v32;
    *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
    a1[242] = *((unsigned char *)a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    long long v33 = v32;
    unint64_t v20 = a2[32];
    if (v20) {
      goto LABEL_4;
    }
LABEL_15:
    long long v34 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 264) = v34;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
    goto LABEL_16;
  }
  long long v15 = *((_OWORD *)v11 + 9);
  *((_OWORD *)a1 + 12) = *((_OWORD *)v11 + 8);
  *((_OWORD *)a1 + 13) = v15;
  *((_OWORD *)a1 + 14) = *((_OWORD *)v11 + 10);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)((char *)v11 + 175);
  long long v16 = *((_OWORD *)v11 + 5);
  *((_OWORD *)a1 + 8) = *((_OWORD *)v11 + 4);
  *((_OWORD *)a1 + 9) = v16;
  long long v17 = *((_OWORD *)v11 + 7);
  *((_OWORD *)a1 + 10) = *((_OWORD *)v11 + 6);
  *((_OWORD *)a1 + 11) = v17;
  long long v18 = *((_OWORD *)v11 + 1);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *((_OWORD *)a1 + 5) = v18;
  long long v19 = *((_OWORD *)v11 + 3);
  *((_OWORD *)a1 + 6) = *((_OWORD *)v11 + 2);
  *((_OWORD *)a1 + 7) = v19;
  unint64_t v20 = a2[32];
  if (!v20) {
    goto LABEL_15;
  }
LABEL_4:
  *((void *)a1 + 31) = a2[31];
  *((void *)a1 + 32) = v20;
  id v21 = a2[33];
  swift_bridgeObjectRetain();
  if ((unint64_t)v21 >= 2) {
    uint64_t v22 = v21;
  }
  *((void *)a1 + 33) = v21;
  *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
  a1[276] = *((unsigned char *)a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)((char *)a2 + 277);
  int v23 = a2[36];
  *((void *)a1 + 35) = a2[35];
  *((void *)a1 + 36) = v23;
  swift_retain();
  swift_retain();
LABEL_16:
  unint64_t v35 = (unint64_t)a2[41];
  if (v35 >> 2 == 0xFFFFFFFF)
  {
    long long v36 = *(_OWORD *)(a2 + 47);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
    *(_OWORD *)(a1 + 376) = v36;
    *((void *)a1 + 49) = a2[49];
    long long v37 = *(_OWORD *)(a2 + 39);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 37);
    *(_OWORD *)(a1 + 312) = v37;
    long long v38 = *(_OWORD *)(a2 + 43);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(a1 + 344) = v38;
  }
  else
  {
    uint64_t v39 = a2[37];
    uint64_t v40 = (uint64_t)a2[38];
    uint64_t v41 = (uint64_t)a2[39];
    uint64_t v42 = (uint64_t)a2[40];
    uint64_t v43 = (uint64_t)a2[42];
    uint64_t v44 = (uint64_t)a2[43];
    uint64_t v45 = a2[44];
    uint64_t v85 = (uint64_t)a2[45];
    uint64_t v86 = (uint64_t)a2[46];
    uint64_t v88 = (uint64_t)a2[47];
    uint64_t v91 = a2[48];
    __dsta = a2[49];
    outlined copy of PlatformItemList.Item.SystemItem(v39, v40, v41, v42, v35, v43, v44, (char)v45, v85, v86, v88, (char)v91, (uint64_t)__dsta);
    *((void *)a1 + 37) = v39;
    *((void *)a1 + 38) = v40;
    *((void *)a1 + 39) = v41;
    *((void *)a1 + 40) = v42;
    *((void *)a1 + 41) = v35;
    *((void *)a1 + 42) = v43;
    *((void *)a1 + 43) = v44;
    *((void *)a1 + 44) = v45;
    *((void *)a1 + 45) = v85;
    *((void *)a1 + 46) = v86;
    *((void *)a1 + 47) = v88;
    *((void *)a1 + 48) = v91;
    *((void *)a1 + 49) = __dsta;
  }
  long long v46 = a2[51];
  if (v46 != (char *)1)
  {
    *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
    a1[404] = *((unsigned char *)a2 + 404);
    if (v46)
    {
      uint64_t v49 = a2[52];
      *((void *)a1 + 51) = v46;
      *((void *)a1 + 52) = v49;
      swift_retain();
      uint64_t v50 = a2[53];
      if (v50) {
        goto LABEL_23;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 51);
      uint64_t v50 = a2[53];
      if (v50)
      {
LABEL_23:
        uint64_t v51 = a2[54];
        *((void *)a1 + 53) = v50;
        *((void *)a1 + 54) = v51;
        swift_retain();
        uint64_t v52 = a2[55];
        if (v52)
        {
LABEL_24:
          uint64_t v53 = a2[56];
          *((void *)a1 + 55) = v52;
          *((void *)a1 + 56) = v53;
          swift_retain();
LABEL_28:
          *((void *)a1 + 57) = a2[57];
          a1[464] = *((unsigned char *)a2 + 464);
          goto LABEL_29;
        }
LABEL_27:
        *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 55);
        goto LABEL_28;
      }
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 53);
    uint64_t v52 = a2[55];
    if (v52) {
      goto LABEL_24;
    }
    goto LABEL_27;
  }
  long long v47 = *((_OWORD *)a2 + 28);
  *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
  *((_OWORD *)a1 + 28) = v47;
  a1[464] = *((unsigned char *)a2 + 464);
  long long v48 = *((_OWORD *)a2 + 26);
  *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
  *((_OWORD *)a1 + 26) = v48;
LABEL_29:
  uint64_t v54 = a2[60];
  *((void *)a1 + 59) = a2[59];
  *((void *)a1 + 60) = v54;
  *((void *)a1 + 61) = a2[61];
  a1[496] = *((unsigned char *)a2 + 496);
  uint64_t v55 = a2[63];
  swift_bridgeObjectRetain();
  if (v55)
  {
    uint64_t v56 = a2[64];
    *((void *)a1 + 63) = v55;
    *((void *)a1 + 64) = v56;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 63);
  }
  *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
  uint64_t v57 = a2[66];
  if (v57)
  {
    *((void *)a1 + 66) = v57;
    *((void *)a1 + 67) = a2[67];
    *((void *)a1 + 68) = a2[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
    *((void *)a1 + 68) = a2[68];
  }
  uint64_t v58 = a2[69];
  if (v58 == (char *)1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 69);
    *((void *)a1 + 71) = a2[71];
  }
  else
  {
    *((void *)a1 + 69) = v58;
    uint64_t v59 = a2[70];
    swift_retain();
    if (v59)
    {
      os_log_t v60 = a2[71];
      *((void *)a1 + 70) = v59;
      *((void *)a1 + 71) = v60;
      swift_retain();
    }
    else
    {
      *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
    }
  }
  uint64_t v61 = a2[72];
  *((void *)a1 + 72) = v61;
  *((void *)a1 + 73) = a2[73];
  *((void *)a1 + 74) = a2[74];
  *((void *)a1 + 75) = a2[75];
  *((void *)a1 + 76) = a2[76];
  *((void *)a1 + 77) = a2[77];
  *((void *)a1 + 78) = a2[78];
  *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
  a1[634] = *((unsigned char *)a2 + 634);
  uint64_t v62 = type metadata accessor for PlatformItemList.Item();
  uint64_t v63 = *(int *)(v62 + 112);
  uint64_t v92 = (int *)v62;
  __dst = &a1[v63];
  uint64_t v64 = (char *)a2 + v63;
  uint64_t v65 = type metadata accessor for CommandOperation();
  uint64_t v87 = *(void *)(v65 - 8);
  uint64_t v89 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v87 + 48);
  uint64_t v66 = v61;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v89(v64, 1, v65))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_1(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(__dst, v64, *(void *)(*(void *)(v67 - 8) + 64));
  }
  else
  {
    char *__dst = *v64;
    uint64_t v68 = *(int *)(v65 + 20);
    uint64_t v69 = v65;
    uint64_t v70 = &__dst[v68];
    uint64_t v71 = &v64[v68];
    uint64_t v90 = v64;
    uint64_t v72 = *(void *)&v64[v68];
    uint64_t v73 = *((void *)v71 + 1);
    char v74 = v71[16];
    outlined copy of Text.Storage(v72, v73, v74);
    *(void *)uint64_t v70 = v72;
    *((void *)v70 + 1) = v73;
    v70[16] = v74;
    *((void *)v70 + 3) = *((void *)v71 + 3);
    uint64_t v75 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v76 = &v70[v75];
    uint64_t v77 = &v71[v75];
    uint64_t v78 = type metadata accessor for UUID();
    uint64_t v79 = *(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v78 - 8) + 16);
    swift_bridgeObjectRetain();
    v79(v76, v77, v78);
    uint64_t v80 = *(int *)(v69 + 24);
    uint64_t v81 = &__dst[v80];
    uint64_t v82 = &v90[v80];
    if (*v82)
    {
      uint64_t v83 = v82[1];
      *(void *)uint64_t v81 = *v82;
      *((void *)v81 + 1) = v83;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(__dst, 0, 1, v69);
  }
  a1[v92[29]] = *((unsigned char *)a2 + v92[29]);
  a1[v92[30]] = *((unsigned char *)a2 + v92[30]);
  a1[v92[31]] = *((unsigned char *)a2 + v92[31]);
  a1[v92[32]] = *((unsigned char *)a2 + v92[32]);
  *(void *)&a1[v92[33]] = *(char **)((char *)a2 + v92[33]);
  *(void *)&a1[*(int *)(a3 + 20)] = *(char **)((char *)a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

id outlined copy of PlatformItemList.Item.SystemItem(id result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a5 >> 62 == 2)
  {
    outlined copy of AnyShareConfiguration.Storage((uint64_t)result, a2, a3, a4, a5);
    outlined copy of Text?(a6, a7, a8, a9);
    return (id)outlined copy of Text?(a10, a11, a12, a13);
  }
  else if (a5 >> 62 == 1)
  {
    return result;
  }
  return result;
}

uint64_t initializeWithCopy for NavigationLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(unsigned __int8 *)(a2 + 17);
  if (v6 >= 2) {
    unsigned int v6 = *(_DWORD *)a2 + 2;
  }
  if (v6 == 1)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    swift_retain();
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
  }
  swift_retain();
  *(unsigned char *)(a1 + 17) = v8;
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v11 + 18 + a1) & ~v11;
  uint64_t v13 = (v11 + 18 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v12, v13);
  uint64_t v14 = *(void *)(v10 + 48);
  uint64_t v15 = *(void *)(a3 + 24);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = v14 + v17;
  long long v19 = (char *)((v18 + v12) & ~v17);
  unint64_t v20 = (char *)((v18 + v13) & ~v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v20, 1, v15))
  {
    int v21 = *(_DWORD *)(v16 + 84);
    uint64_t v22 = *(void *)(v16 + 64);
    if (v21) {
      size_t v23 = *(void *)(v16 + 64);
    }
    else {
      size_t v23 = v22 + 1;
    }
    memcpy(v19, v20, v23);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v20, v15);
    long long v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56);
    uint64_t v24 = v16 + 56;
    v25(v19, 0, 1, v15);
    int v21 = *(_DWORD *)(v24 + 28);
    uint64_t v22 = *(void *)(v24 + 8);
  }
  if (v21) {
    uint64_t v26 = v22;
  }
  else {
    uint64_t v26 = v22 + 1;
  }
  unint64_t v27 = (unint64_t)&v19[v26];
  unint64_t v28 = (unint64_t)&v20[v26];
  *(unsigned char *)unint64_t v27 = *(unsigned char *)v28;
  v27 &= 0xFFFFFFFFFFFFFFF8;
  v28 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)(v27 + 8) = *(void *)(v28 + 8);
  *(unsigned char *)(v27 + 16) = *(unsigned char *)(v28 + 16);
  *(_DWORD *)(v27 + 24) = *(_DWORD *)(v28 + 24);
  *(void *)(v27 + 32) = *(void *)(v28 + 32);
  unint64_t v29 = (v27 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v28 + 47) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v29 = *(unsigned char *)v30;
  *(void *)(v29 + 8) = *(void *)(v30 + 8);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void closure #2 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(uint64_t a1, uint64_t a2, UIView *a3)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x18C119DF0](v4);
  if (v5)
  {
    unsigned int v6 = (void *)v5;
    UICollectionViewListCoordinatorBase.enqueueLayoutInvalidationIfNeeded(_:)(a3);
  }
}

Swift::Void __swiftcall UICollectionViewListCoordinatorBase.enqueueLayoutInvalidationIfNeeded(_:)(UIView *a1)
{
  uint64_t v2 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xF0);
  if (v2[9] != 1 || !(*(void *)v2 ^ 1 | v2[8]))
  {
    uint64_t v3 = specialized UIView.firstAncestorWhere(_:)(a1);
    if (v3)
    {
      id v9 = v3;
      swift_getObjectType();
      uint64_t v4 = swift_conformsToProtocol2();
      BOOL v5 = v4 == 0;
      uint64_t v6 = v4 ? v4 : 0;
      uint64_t v3 = v9;
      if (v5 ? 0 : v9)
      {
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6);
        uint64_t v3 = v9;
      }
    }
  }
}

uint64_t specialized static EnvironmentKey<>._valuesEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_1(a1, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?, (uint64_t)&type metadata for SearchFocusContext);
  _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_1(a2, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?, (uint64_t)&type metadata for SearchFocusContext);
  if (!v14)
  {
    if (!(void)v16)
    {
      outlined destroy of SearchFocusContext?((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?, (uint64_t)&type metadata for SearchFocusContext);
      char v5 = 1;
      return v5 & 1;
    }
LABEL_8:
    outlined destroy of (Toolbar.UpdateContext?, Toolbar.UpdateContext?)((uint64_t)v13, &lazy cache variable for type metadata for (SearchFocusContext?, SearchFocusContext?), (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?, (uint64_t)&type metadata for SearchFocusContext);
    char v5 = 0;
    return v5 & 1;
  }
  _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_1((uint64_t)v13, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?, (uint64_t)&type metadata for SearchFocusContext);
  if (!(void)v16)
  {
    outlined destroy of SearchFocusContext((uint64_t)v12);
    goto LABEL_8;
  }
  v11[0] = v15[0];
  v11[1] = v15[1];
  v11[2] = v16;
  v11[3] = v17;
  v11[4] = v18;
  uint64_t v3 = v12[0];
  uint64_t v4 = *(void *)&v15[0];
  outlined init with copy of SearchFocusContext((uint64_t)v12, (uint64_t)v9);
  outlined init with copy of SearchFocusContext((uint64_t)v11, (uint64_t)&v7);
  if (v3 == v4) {
    char v5 = MEMORY[0x18C1174E0](&v10, &v8);
  }
  else {
    char v5 = 0;
  }
  outlined destroy of SearchFocusContext((uint64_t)&v7);
  outlined destroy of SearchFocusContext((uint64_t)v9);
  outlined destroy of SearchFocusContext((uint64_t)v11);
  outlined destroy of SearchFocusContext((uint64_t)v12);
  outlined destroy of SearchFocusContext?((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?, (uint64_t)&type metadata for SearchFocusContext);
  return v5 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  uint64_t (*v18)(void);
  char v19;
  uint64_t (*v20)(void);
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  uint64_t v4 = type metadata accessor for URL();
  char v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (URL?, URL?)();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v13[*(int *)(v14 + 56)];
  outlined init with copy of URL?(a1, (uint64_t)v13);
  outlined init with copy of URL?(a2, v15);
  long long v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v16((uint64_t)v13, 1, v4) == 1)
  {
    long long v17 = v16(v15, 1, v4);
    if (v17 == 1) {
      long long v18 = (uint64_t (*)(void))type metadata accessor for URL?;
    }
    else {
      long long v18 = (uint64_t (*)(void))type metadata accessor for (URL?, URL?);
    }
    if (v17 == 1) {
      long long v19 = -1;
    }
    else {
      long long v19 = 0;
    }
  }
  else
  {
    outlined init with copy of URL?((uint64_t)v13, (uint64_t)v10);
    if (v16(v15, 1, v4) == 1)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      long long v19 = 0;
      unint64_t v20 = (uint64_t (*)(void))type metadata accessor for (URL?, URL?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
      _s10Foundation3URLVACSQAAWlTm_0(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
      long long v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      int v21 = *(void (**)(char *, uint64_t))(v5 + 8);
      v21(v7, v4);
      v21(v10, v4);
      unint64_t v20 = (uint64_t (*)(void))type metadata accessor for URL?;
    }
    long long v18 = v20;
  }
  _s7SwiftUI16PlatformItemListV0D0VWOhTm_3((uint64_t)v13, v18);
  return v19 & 1;
}

uint64_t MainMenuItemHost.RootView.applyScaleDownMenuItem(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for MainMenuItemHost.RootView(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = type metadata accessor for PlatformItemList.Item();
  *(unsigned char *)(a1 + *(int *)(result + 116)) = 1;
  if (*(void *)(a1 + 616))
  {
    uint64_t v8 = result;
    outlined init with copy of MainMenuItem(v2, (uint64_t)v6, type metadata accessor for MainMenuItemHost.RootView);
    id v9 = *(void **)(a1 + 616);
    uint64_t v10 = v9[2];
    if (v10)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_11:
      }
        id v9 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
      unint64_t v11 = 0;
      v8 -= 8;
      do
      {
        if (v11 >= v9[2])
        {
          __break(1u);
          goto LABEL_11;
        }
        unint64_t v12 = v11 + 1;
        MainMenuItemHost.RootView.applyScaleDownMenuItem(_:)((char *)v9+ ((*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80))+ *(void *)(*(void *)v8 + 72) * v11);
        unint64_t v11 = v12;
      }
      while (v10 != v12);
      *(void *)(a1 + 616) = v9;
    }
    return outlined destroy of MainMenuItemHost.RootView((uint64_t)v6, type metadata accessor for MainMenuItemHost.RootView);
  }
  return result;
}

uint64_t outlined destroy of MainMenuItemHost.RootView(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type AccessibilityTraitStorageProxy.CodingKeys and conformance AccessibilityTraitStorageProxy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy.CodingKeys and conformance AccessibilityTraitStorageProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy.CodingKeys and conformance AccessibilityTraitStorageProxy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy.CodingKeys and conformance AccessibilityTraitStorageProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy.CodingKeys and conformance AccessibilityTraitStorageProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy.CodingKeys and conformance AccessibilityTraitStorageProxy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy.CodingKeys and conformance AccessibilityTraitStorageProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy.CodingKeys and conformance AccessibilityTraitStorageProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy.CodingKeys and conformance AccessibilityTraitStorageProxy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy.CodingKeys and conformance AccessibilityTraitStorageProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy.CodingKeys and conformance AccessibilityTraitStorageProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy.CodingKeys and conformance AccessibilityTraitStorageProxy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy.CodingKeys and conformance AccessibilityTraitStorageProxy.CodingKeys);
  }
  return result;
}

uint64_t initializeWithCopy for ToolbarMakeEntries(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v3 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  id v4 = v3;
  return a1;
}

uint64_t initializeWithCopy for UpdateViewDestinationViewModifier.RequestWriter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  id v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6 == 1)
  {
    *id v4 = *v5;
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)v5;
    *(void *)(a1 + 16) = v6;
    swift_retain();
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  int v7 = *(unsigned __int8 *)(a2 + 104);
  if (v7 == 255)
  {
    long long v16 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v16;
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    long long v17 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v17;
  }
  else
  {
    uint64_t v8 = *(void *)(a2 + 40);
    uint64_t v9 = *(void *)(a2 + 48);
    uint64_t v10 = *(void *)(a2 + 56);
    uint64_t v11 = *(void *)(a2 + 64);
    uint64_t v12 = *(void *)(a2 + 72);
    uint64_t v13 = *(void *)(a2 + 80);
    uint64_t v15 = *(void *)(a2 + 88);
    uint64_t v14 = *(void *)(a2 + 96);
    outlined copy of NavigationRequest.Action(v8, v9, v10, v11, v12, v13, v15, v14, v7);
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v11;
    *(void *)(a1 + 72) = v12;
    *(void *)(a1 + 80) = v13;
    *(void *)(a1 + 88) = v15;
    *(void *)(a1 + 96) = v14;
    *(unsigned char *)(a1 + 104) = v7;
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type LabelGroupStyleModifier<BodyLabelGroupStyle> and conformance LabelGroupStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabelGroupStyleModifier<BodyLabelGroupStyle> and conformance LabelGroupStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type LabelGroupStyleModifier<BodyLabelGroupStyle> and conformance LabelGroupStyleModifier<A>)
  {
    type metadata accessor for LabelGroupStyleModifier<BodyLabelGroupStyle>(255, &lazy cache variable for type metadata for LabelGroupStyleModifier<BodyLabelGroupStyle>, (uint64_t)&type metadata for BodyLabelGroupStyle, (uint64_t)&protocol witness table for BodyLabelGroupStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LabelGroupStyleModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelGroupStyleModifier<BodyLabelGroupStyle> and conformance LabelGroupStyleModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedBorderedButton, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedBorderedButton, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedBorderedButton, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedBorderedButton, _EnvironmentKeyWritingModifier<Image.Scale>>();
    lazy protocol witness table accessor for type ResolvedBorderedButton and conformance ResolvedBorderedButton();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E4F41528]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedBorderedButton, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedBorderedButton and conformance ResolvedBorderedButton()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedBorderedButton and conformance ResolvedBorderedButton;
  if (!lazy protocol witness table cache variable for type ResolvedBorderedButton and conformance ResolvedBorderedButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedBorderedButton and conformance ResolvedBorderedButton);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedBorderedButton and conformance ResolvedBorderedButton;
  if (!lazy protocol witness table cache variable for type ResolvedBorderedButton and conformance ResolvedBorderedButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedBorderedButton and conformance ResolvedBorderedButton);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedBorderedButton, _EnvironmentKeyWritingModifier<Image.Scale>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedBorderedButton, _EnvironmentKeyWritingModifier<Image.Scale>>)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA5ImageV5ScaleOGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E4F41528], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedBorderedButton, _EnvironmentKeyWritingModifier<Image.Scale>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ClipEffect<ResolvedBorderShape> and conformance _ClipEffect<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ClipEffect<ResolvedBorderShape> and conformance _ClipEffect<A>;
  if (!lazy protocol witness table cache variable for type _ClipEffect<ResolvedBorderShape> and conformance _ClipEffect<A>)
  {
    type metadata accessor for ViewInputFlagModifier<UseImageBackground>(255, &lazy cache variable for type metadata for _ClipEffect<ResolvedBorderShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedBorderShape and conformance ResolvedBorderShape, (uint64_t)&type metadata for ResolvedBorderShape, MEMORY[0x1E4F3F580]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ClipEffect<ResolvedBorderShape> and conformance _ClipEffect<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpe()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonCo;
  if (!lazy protocol witness table cache variable for type ModifiedContent<StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonCo)
  {
    type metadata accessor for ModifiedContent<StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _Pa();
    lazy protocol witness table accessor for type StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, ();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonCo);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, ()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelSty;
  if (!lazy protocol witness table cache variable for type StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelSty)
  {
    type metadata accessor for StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _B();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelSty);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _ClipEffect<ResolvedBorderShape> and conformance _ClipEffect<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>)
  {
    type metadata accessor for HStack<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Material>, MEMORY[0x1E4F41748], MEMORY[0x1E4F41740], MEMORY[0x1E4F40E10]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>);
    type metadata accessor for HStack<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>, MEMORY[0x1E4F414E0], MEMORY[0x1E4F414D0], MEMORY[0x1E4F40E10]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>)
  {
    type metadata accessor for HStack<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>, MEMORY[0x1E4F414E0], MEMORY[0x1E4F414D0], MEMORY[0x1E4F40E10]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _Pa()
{
  if (!lazy cache variable for type metadata for ModifiedContent<StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.La)
  {
    type metadata accessor for StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _B();
    type metadata accessor for ViewInputFlagModifier<UseImageBackground>(255, &lazy cache variable for type metadata for _ContentShapeKindModifier<ResolvedBorderShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedBorderShape and conformance ResolvedBorderShape, (uint64_t)&type metadata for ResolvedBorderShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeKindModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.La);
    }
  }
}

void type metadata accessor for ViewInputFlagModifier<UseImageBackground>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ResolvedBorderShape and conformance ResolvedBorderShape()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedBorderShape and conformance ResolvedBorderShape;
  if (!lazy protocol witness table cache variable for type ResolvedBorderShape and conformance ResolvedBorderShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedBorderShape and conformance ResolvedBorderShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedBorderShape and conformance ResolvedBorderShape;
  if (!lazy protocol witness table cache variable for type ResolvedBorderShape and conformance ResolvedBorderShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedBorderShape and conformance ResolvedBorderShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedBorderShape and conformance ResolvedBorderShape;
  if (!lazy protocol witness table cache variable for type ResolvedBorderShape and conformance ResolvedBorderShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedBorderShape and conformance ResolvedBorderShape);
  }
  return result;
}

void type metadata accessor for StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _B()
{
  if (!lazy cache variable for type metadata for StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _Pad)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>);
    lazy protocol witness table accessor for type UseImageBackground and conformance UseImageBackground();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _Pad);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>();
    type metadata accessor for ViewInputFlagModifier<UseImageBackground>(255, &lazy cache variable for type metadata for _ClipEffect<ResolvedBorderShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedBorderShape and conformance ResolvedBorderShape, (uint64_t)&type metadata for ResolvedBorderShape, MEMORY[0x1E4F3F580]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>();
    type metadata accessor for HStack<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Material>, MEMORY[0x1E4F41748], MEMORY[0x1E4F41740], MEMORY[0x1E4F40E10]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UseImageBackground and conformance UseImageBackground()
{
  unint64_t result = lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground;
  if (!lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground;
  if (!lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground;
  if (!lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground;
  if (!lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground;
  if (!lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>(255);
    lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type _ShapeView<ResolvedBorderShape, Color> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<ResolvedBorderShape, Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle> and conformance _DefaultForegroundStyleModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle> and conformance _DefaultForegroundStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle> and conformance _DefaultForegroundStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle> and conformance _DefaultForegroundStyleModifier<A>)
  {
    type metadata accessor for HStack<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>, (uint64_t)&type metadata for BorderedButtonColorSpec.LabelStyle, (uint64_t)&protocol witness table for BorderedButtonColorSpec.LabelStyle, MEMORY[0x1E4F41250]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle> and conformance _DefaultForegroundStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, (void (*)(uint64_t))type metadata accessor for StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>);
    type metadata accessor for HStack<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>, (uint64_t)&type metadata for BorderedButtonColorSpec.LabelStyle, (uint64_t)&protocol witness table for BorderedButtonColorSpec.LabelStyle, MEMORY[0x1E4F41250]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, (void (*)(uint64_t))type metadata accessor for StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>> and conformance _BackgroundModifier<A>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>> and conformance _BackgroundModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>()
{
  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>, type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _BackgroundModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle> and conformance _DefaultForegroundStyleModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>();
    type metadata accessor for HStack<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>, (uint64_t)&type metadata for BorderedButtonColorSpec.LabelStyle, (uint64_t)&protocol witness table for BorderedButtonColorSpec.LabelStyle, MEMORY[0x1E4F41250]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>(uint64_t a1)
{
}

void type metadata accessor for _ShapeView<ResolvedBorderShape, Color>()
{
  if (!lazy cache variable for type metadata for _ShapeView<ResolvedBorderShape, Color>)
  {
    lazy protocol witness table accessor for type ResolvedBorderShape and conformance ResolvedBorderShape();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<ResolvedBorderShape, Color>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, (void (*)(uint64_t))type metadata accessor for StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>();
    lazy protocol witness table accessor for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA5ImageV5ScaleOGMaTm_0(255, a2, a3, MEMORY[0x1E4F411E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA5ImageV5ScaleOGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)
  {
    type metadata accessor for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA5ImageV5ScaleOGMaTm_0(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>, type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>);
    lazy protocol witness table accessor for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>();
    lazy protocol witness table accessor for type HStack<ButtonStyleConfiguration.Label> and conformance HStack<A>();
    lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>> and conformance _BackgroundModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, OpacityRendererEffect>();
    lazy protocol witness table accessor for type HStack<ButtonStyleConfiguration.Label> and conformance HStack<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<ButtonStyleConfiguration.Label> and conformance HStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HStack<ButtonStyleConfiguration.Label> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<ButtonStyleConfiguration.Label> and conformance HStack<A>)
  {
    type metadata accessor for HStack<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for HStack<ButtonStyleConfiguration.Label>, (uint64_t)&type metadata for ButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for ButtonStyleConfiguration.Label, MEMORY[0x1E4F415B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<ButtonStyleConfiguration.Label> and conformance HStack<A>);
  }
  return result;
}

void type metadata accessor for HStack<ButtonStyleConfiguration.Label>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI6HStackVyAA24ButtonStyleConfigurationV5LabelVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, OpacityRendererEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, OpacityRendererEffect>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_2(255, &lazy cache variable for type metadata for HStack<ButtonStyleConfiguration.Label>, (uint64_t)&type metadata for ButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for ButtonStyleConfiguration.Label, MEMORY[0x1E4F415B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, OpacityRendererEffect>);
    }
  }
}

void type metadata accessor for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for HStack<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for HStack<ButtonStyleConfiguration.Label>, (uint64_t)&type metadata for ButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for ButtonStyleConfiguration.Label, MEMORY[0x1E4F415B8]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

uint64_t StyleApplicator.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](a1);
  outlined init with copy of _VariadicView_Children(v6, (uint64_t)&v45);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v32 = *(void *)(a2 + 16);
  uint64_t v7 = v32;
  uint64_t v33 = v8;
  type metadata accessor for EnumeratedSequence<_VariadicView_Children>();
  uint64_t v10 = v9;
  uint64_t v11 = (char *)type metadata accessor for StyleApplicator.EnumeratedView();
  uint64_t v12 = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_4(&lazy protocol witness table cache variable for type EnumeratedSequence<_VariadicView_Children> and conformance EnumeratedSequence<A>, (void (*)(uint64_t))type metadata accessor for EnumeratedSequence<_VariadicView_Children>);
  uint64_t v14 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in StyleApplicator.body(children:), (uint64_t)&v31, v10, v11, MEMORY[0x1E4FBC248], v12, MEMORY[0x1E4FBC278], v13);
  outlined destroy of EnumeratedSequence<_VariadicView_Children>((uint64_t)&v45);
  *(void *)&long long v45 = v14;
  uint64_t v29 = v7;
  uint64_t v30 = v8;
  *(void *)&long long v27 = swift_getKeyPath();
  (*(void (**)(char *, void, uint64_t))(v4 + 16))((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v26, a2);
  unint64_t v15 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v7;
  *(void *)(v16 + 24) = v8;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v16 + v15, (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  uint64_t v17 = type metadata accessor for Array();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for _DefaultForegroundStyleModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for LabelGroupStyleModifier<BodyLabelGroupStyle>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<LabelPlatformItemListFlags>, (uint64_t)&type metadata for LabelPlatformItemListFlags, (uint64_t)&protocol witness table for LabelPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = swift_getWitnessTable();
  uint64_t v43 = MEMORY[0x1E4F40A18];
  uint64_t v44 = v20;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v22 = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Font?>);
  uint64_t v41 = v21;
  uint64_t v42 = v22;
  uint64_t v39 = swift_getWitnessTable();
  uint64_t v40 = &protocol witness table for PlatformItemListTransformModifier<A>;
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v24 = MEMORY[0x1E4FBB968];
  ForEach<>.init(_:id:content:)();
  long long v26 = v49;
  long long v35 = v49;
  uint64_t v36 = v50;
  uint64_t v37 = v51;
  long long v27 = v52;
  long long v38 = v52;
  *(void *)&long long v45 = v17;
  *((void *)&v45 + 1) = MEMORY[0x1E4FBB960];
  uint64_t v46 = v18;
  uint64_t v47 = WitnessTable;
  *(void *)&long long v48 = v24;
  type metadata accessor for ForEach();
  uint64_t v34 = v23;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v35);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  long long v26 = v45;
  long long v49 = v45;
  uint64_t v50 = v46;
  uint64_t v51 = v47;
  long long v27 = v48;
  long long v52 = v48;
  static ViewBuilder.buildExpression<A>(_:)(&v49);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #2 in StyleApplicator.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v44 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v39 = *(void *)(v8 - 8);
  uint64_t v40 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v37 = type metadata accessor for _DefaultForegroundStyleModifier();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v42 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v31 - v12;
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>();
  uint64_t v36 = type metadata accessor for ModifiedContent();
  uint64_t v43 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  uint64_t v33 = (char *)&v31 - v14;
  type metadata accessor for LabelGroupStyleModifier<BodyLabelGroupStyle>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<LabelPlatformItemListFlags>, (uint64_t)&type metadata for LabelPlatformItemListFlags, (uint64_t)&protocol witness table for LabelPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v41 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  long long v35 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  long long v38 = (char *)&v31 - v19;
  uint64_t v32 = a1;
  (*(void (**)(void, uint64_t, uint64_t, double))(a3 + 32))(*(void *)(a1 + 96), a2, a3, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v10, 0, 1, AssociatedTypeWitness);
  View.defaultForegroundStyle<A>(_:)((uint64_t)v10, MEMORY[0x1E4F40A20], AssociatedTypeWitness, MEMORY[0x1E4F40A18]);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v40);
  swift_getKeyPath();
  uint64_t v51 = (*(uint64_t (**)(void, uint64_t, uint64_t))(a3 + 24))(*(void *)(a1 + 96), a2, a3);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v49 = MEMORY[0x1E4F40A18];
  uint64_t v50 = WitnessTable;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v22 = v33;
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v11);
  uint64_t v23 = *(void *)(v32 + 96);
  uint64_t v24 = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Font?>);
  uint64_t v47 = v21;
  uint64_t v48 = v24;
  uint64_t v25 = v36;
  uint64_t v26 = swift_getWitnessTable();
  long long v27 = v35;
  View.platformItemHierarchicalLevel(_:)(v23, v25, v26);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v22, v25);
  uint64_t v45 = v26;
  uint64_t v46 = &protocol witness table for PlatformItemListTransformModifier<A>;
  swift_getWitnessTable();
  uint64_t v28 = v38;
  static ViewBuilder.buildExpression<A>(_:)(v27);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v41 + 8);
  v29(v27, v15);
  static ViewBuilder.buildExpression<A>(_:)(v28);
  return ((uint64_t (*)(char *, uint64_t))v29)(v28, v15);
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, a2, a3, a4, MEMORY[0x1E4F411E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_1(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_2(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA5ColorVSgGMaTm_0(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ColorScheme?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<ColorScheme?>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_3(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_2(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_5(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_3(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_6(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Font?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA5ImageV5ScaleOGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    }
  }
}

void type metadata accessor for LabelGroupStyleModifier<BodyLabelGroupStyle>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t View.platformItemHierarchicalLevel(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.platformItemSelector(_:)(a1, a2, a3, (uint64_t)&unk_1ED481AB8, (uint64_t)partial apply for closure #1 in View.platformItemHierarchicalLevel(_:), (uint64_t)&type metadata for LabelPlatformItemListFlags);
}

uint64_t View.defaultForegroundStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v17 = a2;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = type metadata accessor for _DefaultForegroundStyleModifier();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, v6, v12);
  _DefaultForegroundStyleModifier.init(style:)((uint64_t)v9, a3, (uint64_t)v14);
  MEMORY[0x18C113660](v14, v17, v10, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t View.platformItemSelector(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  View.transformPlatformItemList<A>(_:_:)(v11, a5, v11, a2, a6, a3);

  return swift_release();
}

uint64_t _DefaultForegroundStyleModifier.init(style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 1, 1, a2);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(a3, a1, v5);
}

uint64_t protocol witness for LabelGroupStyle_v0.font(at:) in conformance BodyLabelGroupStyle(uint64_t a1)
{
  if (a1 == 2) {
    return static Font.footnote.getter();
  }
  if (a1 != 1)
  {
    if (!a1) {
      return static Font.body.getter();
    }
    return static Font.footnote.getter();
  }
  return static Font.subheadline.getter();
}

unint64_t protocol witness for LabelGroupStyle_v0.foregroundStyle(at:) in conformance BodyLabelGroupStyle@<X0>(unint64_t result@<X0>, _DWORD *a2@<X8>)
{
  if (result > 2) {
    *a2 = 2;
  }
  else {
    *a2 = dword_18839A9DC[result];
  }
  return result;
}

uint64_t type metadata accessor for StyleApplicator.EnumeratedView()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for EnumeratedSequence<_VariadicView_Children>()
{
  if (!lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>)
  {
    lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    unint64_t v0 = type metadata accessor for EnumeratedSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>);
    }
  }
}

uint64_t outlined destroy of EnumeratedSequence<_VariadicView_Children>(uint64_t a1)
{
  type metadata accessor for EnumeratedSequence<_VariadicView_Children>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v44 = a5;
  uint64_t v9 = v8;
  uint64_t v58 = a2;
  uint64_t v59 = a4;
  uint64_t v57 = a1;
  uint64_t v42 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v55 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v53 = (char *)&v40 - v13;
  uint64_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v41 = (char *)&v40 - v17;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  MEMORY[0x1F4188790](v18);
  uint64_t v51 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v40 - v21;
  MEMORY[0x1F4188790](v23);
  uint64_t v40 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v50 = *((void *)v15 - 1);
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a6;
  long long v52 = v15;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  uint64_t v30 = (char *)&v40 - v29;
  Swift::Int v31 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v61 = Array.init()();
  uint64_t v56 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v31);
  (*(void (**)(char *, uint64_t, void))(v50 + 16))(v28, v48, v52);
  uint64_t v59 = v30;
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    uint64_t v33 = (uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    uint64_t v34 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      uint64_t result = (*v33)(v22, 1, AssociatedTypeWitness);
      if (result == 1) {
        goto LABEL_18;
      }
      v57(v22, v55);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v55, v44);
        return (*v34)(v22, AssociatedTypeWitness);
      }
      uint64_t v9 = 0;
      (*v34)(v22, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      if (!--v31)
      {
        uint64_t v35 = v54;
        uint64_t v36 = v51;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = v54;
  uint64_t v36 = v51;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v55 = *(char **)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v36, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v37 = v51;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
    return v61;
  }
  else
  {
    long long v52 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v54 = v35 + 32;
    long long v38 = (void (**)(char *, uint64_t))(v35 + 8);
    uint64_t v39 = v41;
    uint64_t v37 = v51;
    while (1)
    {
      v52(v39, v37, AssociatedTypeWitness);
      v57(v39, v53);
      if (v9) {
        break;
      }
      uint64_t v9 = 0;
      (*v38)(v39, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of IteratorProtocol.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v37, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }
    (*v38)(v39, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v53, v44);
  }
}

__n128 __swift_memcpy104_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

double partial apply for closure #1 in StyleApplicator.body(children:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  outlined init with copy of _VariadicView_Children.Element((uint64_t)(a1 + 1), (uint64_t)v8);
  long long v4 = v8[3];
  *(_OWORD *)(a2 + 32) = v8[2];
  *(_OWORD *)(a2 + 48) = v4;
  long long v5 = v8[5];
  *(_OWORD *)(a2 + 64) = v8[4];
  *(_OWORD *)(a2 + 80) = v5;
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v7;
  *(void *)(a2 + 96) = v3;
  return result;
}

uint64_t outlined init with copy of _VariadicView_Children.Element(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t type metadata accessor for LabelGroupStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ButtonStyleContainerModifier<PlainButtonStyleBase>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ButtonStyleContainerModifier<PlainButtonStyleBase>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ButtonStyleContainerModifier<PlainButtonStyleBase>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ButtonStyleContainerModifier<PlainButtonStyleBase>>();
    lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    lazy protocol witness table accessor for type ButtonStyleContainerModifier<PlainButtonStyleBase> and conformance ButtonStyleContainerModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ButtonStyleContainerModifier<PlainButtonStyleBase>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t PlainButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188790](v4);
  long long v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v21 - v13;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_3(a1, (uint64_t)v7, type metadata accessor for PrimitiveButtonStyleConfiguration);
  char v15 = v7[1];
  char *v11 = *v7;
  v11[1] = v15;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_3((uint64_t)&v7[*(int *)(v5 + 32)], (uint64_t)&v11[*(int *)(v9 + 44)], (uint64_t (*)(void))type metadata accessor for ButtonAction);
  outlined destroy of PrimitiveButtonStyleConfiguration((uint64_t)v7);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v11, (uint64_t)v14);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v17 = swift_getKeyPath();
  outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v14, a2);
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ButtonStyleContainerModifier<PlainButtonStyleBase>>();
  uint64_t v19 = a2 + *(int *)(v18 + 36);
  *(void *)uint64_t v19 = KeyPath;
  *(unsigned char *)(v19 + 8) = 0;
  *(void *)(v19 + 16) = v17;
  *(unsigned char *)(v19 + 24) = 0;
  return outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v14);
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ButtonStyleContainerModifier<PlainButtonStyleBase>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ButtonStyleContainerModifier<PlainButtonStyleBase>>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
    type metadata accessor for ButtonStyleContainerModifier<PlainButtonStyleBase>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ButtonStyleContainerModifier<PlainButtonStyleBase>>);
    }
  }
}

uint64_t outlined destroy of PrimitiveButtonStyleConfiguration(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ButtonStyleContainerModifier<PlainButtonStyleBase> and conformance ButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonStyleContainerModifier<PlainButtonStyleBase> and conformance ButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type ButtonStyleContainerModifier<PlainButtonStyleBase> and conformance ButtonStyleContainerModifier<A>)
  {
    type metadata accessor for ButtonStyleContainerModifier<PlainButtonStyleBase>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleContainerModifier<PlainButtonStyleBase> and conformance ButtonStyleContainerModifier<A>);
  }
  return result;
}

void type metadata accessor for ButtonStyleContainerModifier<PlainButtonStyleBase>()
{
  if (!lazy cache variable for type metadata for ButtonStyleContainerModifier<PlainButtonStyleBase>)
  {
    lazy protocol witness table accessor for type PlainButtonStyleBase and conformance PlainButtonStyleBase();
    unint64_t v0 = type metadata accessor for ButtonStyleContainerModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ButtonStyleContainerModifier<PlainButtonStyleBase>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlainButtonStyleBase and conformance PlainButtonStyleBase()
{
  unint64_t result = lazy protocol witness table cache variable for type PlainButtonStyleBase and conformance PlainButtonStyleBase;
  if (!lazy protocol witness table cache variable for type PlainButtonStyleBase and conformance PlainButtonStyleBase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyleBase and conformance PlainButtonStyleBase);
  }
  return result;
}

uint64_t SwiftUIGlue.defaultOpenURLAction(env:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_retain();
  swift_retain();

  return MEMORY[0x1F40FDF08](1, partial apply for closure #1 in SwiftUIGlue.defaultOpenURLAction(env:), v3);
}

uint64_t closure #1 in BaseModifier.SelectionStateBox.update(state:listKey:presentedValue:tag:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    long long v10 = *(_OWORD *)(a2 + 112);
    v14[6] = *(_OWORD *)(a2 + 96);
    v14[7] = v10;
    v14[8] = *(_OWORD *)(a2 + 128);
    __int16 v15 = *(_WORD *)(a2 + 144);
    long long v11 = *(_OWORD *)(a2 + 48);
    _OWORD v14[2] = *(_OWORD *)(a2 + 32);
    void v14[3] = v11;
    long long v12 = *(_OWORD *)(a2 + 80);
    void v14[4] = *(_OWORD *)(a2 + 64);
    void v14[5] = v12;
    long long v13 = *(_OWORD *)(a2 + 16);
    v14[0] = *(_OWORD *)a2;
    v14[1] = v13;
    BaseModifier.SelectionStateBox.updateSelectionState(state:listKey:presentedValue:tag:)(v14, a3, a4, a5);
    return swift_release();
  }
  return result;
}

uint64_t BaseModifier.SelectionStateBox.updateSelectionState(state:listKey:presentedValue:tag:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (a3)
  {
    long long v10 = a1[7];
    long long v33 = a1[6];
    long long v34 = v10;
    long long v35 = a1[8];
    __int16 v36 = *((_WORD *)a1 + 72);
    long long v11 = a1[3];
    long long v29 = a1[2];
    long long v30 = v11;
    long long v12 = a1[5];
    long long v31 = a1[4];
    long long v32 = v12;
    long long v13 = a1[1];
    long long v27 = *a1;
    long long v28 = v13;
    uint64_t v14 = swift_retain();
    char v15 = NavigationState.isSelected(_:in:)(v14, a2);
    swift_release();
    if (v15)
    {
      char v16 = 1;
      char v17 = 1;
      goto LABEL_10;
    }
    char v17 = 0;
  }
  else
  {
    char v17 = 2;
  }
  outlined init with copy of NavigationAuthority?(a4, (uint64_t)&v27, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
  if (*((void *)&v28 + 1))
  {
    v37[0] = v27;
    v37[1] = v28;
    uint64_t v38 = v29;
    long long v18 = a1[7];
    long long v33 = a1[6];
    long long v34 = v18;
    long long v35 = a1[8];
    __int16 v36 = *((_WORD *)a1 + 72);
    long long v19 = a1[3];
    long long v29 = a1[2];
    long long v30 = v19;
    long long v20 = a1[5];
    long long v31 = a1[4];
    long long v32 = v20;
    long long v21 = a1[1];
    long long v27 = *a1;
    long long v28 = v21;
    outlined init with copy of AnyHashable((uint64_t)v37, (uint64_t)v25);
    type metadata accessor for AnyNavigationLinkPresentedValueStorage<AnyHashable>(0, &lazy cache variable for type metadata for AnyNavigationLinkPresentedValueStorage<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnyNavigationLinkPresentedValueStorage);
    uint64_t v22 = swift_allocObject();
    long long v23 = v25[1];
    *(_OWORD *)(v22 + 16) = v25[0];
    *(_OWORD *)(v22 + 32) = v23;
    *(void *)(v22 + 48) = v26;
    char v16 = NavigationState.isSelected(_:in:)(v22, a2);
    swift_release();
    outlined destroy of AnyHashable((uint64_t)v37);
    char v17 = v16 & 1;
  }
  else
  {
    uint64_t result = outlined destroy of NavigationAuthority?((uint64_t)&v27, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
    if (!a3)
    {
      char v17 = 2;
      goto LABEL_12;
    }
    char v16 = 0;
  }
LABEL_10:
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    static Transaction.current.getter();
    *(void *)&long long v27 = *(void *)(v5 + 16);
    BYTE8(v27) = v16 & 1;
    LOBYTE(v25[0]) = 0;
    lazy protocol witness table accessor for type BaseModifier.SelectionStateBox.Mutation and conformance BaseModifier.SelectionStateBox.Mutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    swift_release();
    uint64_t result = swift_release();
  }
LABEL_12:
  *(unsigned char *)(v5 + 32) = v17;
  return result;
}

unint64_t lazy protocol witness table accessor for type BaseModifier.SelectionStateBox.Mutation and conformance BaseModifier.SelectionStateBox.Mutation()
{
  unint64_t result = lazy protocol witness table cache variable for type BaseModifier.SelectionStateBox.Mutation and conformance BaseModifier.SelectionStateBox.Mutation;
  if (!lazy protocol witness table cache variable for type BaseModifier.SelectionStateBox.Mutation and conformance BaseModifier.SelectionStateBox.Mutation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BaseModifier.SelectionStateBox.Mutation and conformance BaseModifier.SelectionStateBox.Mutation);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityGestureModifier(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier();
  unint64_t result = lazy protocol witness table accessor for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t UIViewControllerRepresentableContext.environment.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(v2 + *(int *)(a1 + 40));
  uint64_t v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  swift_retain();

  return swift_retain();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in CustomHoverEffectModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ContextMenuModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for Picker(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 32) - 8) + 8))((v6
                                                                                            + *(void *)(v5 + 56)
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 32) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 32) - 8) + 80));

  return swift_release();
}

uint64_t instantiation function for generic protocol witness table for AccessibilityScrollableModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AccessibilityScrollableContextModifier(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier);
}

uint64_t initializeWithCopy for _NavigationSplitReader.PreparedColumn(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 12) = *(void *)(a2 + 12);
  *(void *)(a1 + 20) = *(void *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t destroy for NavigationStackCore.NavigationStackRepresentableRoot(uint64_t a1)
{
  swift_weakDestroy();
  swift_release();
  uint64_t result = swift_release();
  if (*(void *)(a1 + 80))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  }
  return result;
}

void @objc UIHostingBackgroundView.frame.setter(void *a1, double a2, double a3, double a4, double a5)
{
  id v9 = a1;
  UIHostingBackgroundView.frame.setter(a2, a3, a4, a5);
}

id UIHostingBackgroundView.frame.setter(double a1, double a2, double a3, double a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v20.receiver = v4;
  v20.super_class = ObjectType;
  objc_msgSendSuper2(&v20, sel_bounds);
  double v11 = v10;
  double v13 = v12;
  v19.receiver = v4;
  v19.super_class = ObjectType;
  objc_msgSendSuper2(&v19, sel_setFrame_, a1, a2, a3, a4);
  uint64_t v14 = (objc_class *)swift_getObjectType();
  v20.receiver = v4;
  v20.super_class = v14;
  id result = objc_msgSendSuper2(&v20, sel_bounds);
  if (v11 != v17 || v13 != v16)
  {
    *((unsigned char *)_UIHostingView.base.getter() + 219) = 1;
    return (id)swift_release();
  }
  return result;
}

uint64_t type metadata completion function for SystemScrollViewContainer()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for SystemScrollView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>();
    type metadata accessor for SectionStyleModifier<MenuPickerOptionSectionStyle>(255, &lazy cache variable for type metadata for SectionStyleModifier<MenuPickerOptionSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle, (uint64_t)&type metadata for MenuPickerOptionSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SectionStyleModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier>);
    }
  }
}

uint64_t static MenuPickerStyle._makeViewList<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _PickerValue();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(type metadata accessor for PickerStyleConfiguration() - 8) + 64)) {
    closure #1 in static MenuPickerStyle._makeView<A>(value:inputs:)(1, a3, a4, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
  }
  AGGraphCreateOffsetAttribute2();
  uint64_t v6 = MEMORY[0x1E4F3FCF0];
  _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F410E8]);
  type metadata accessor for PickerStyleConfiguration.Content();
  _s7SwiftUI20SectionStyleModifierVyAA016MenuPickerOptioncD0VGMaTm_0(255, &lazy cache variable for type metadata for SectionStyleModifier<MenuPickerOptionSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle, (uint64_t)&type metadata for MenuPickerOptionSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SectionStyleModifier);
  type metadata accessor for ModifiedContent();
  _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, v6, MEMORY[0x1E4F3FCE8], MEMORY[0x1E4F40318]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleConfiguration.Label();
  type metadata accessor for PickerContentView();
  swift_getWitnessTable();
  type metadata accessor for Menu();
  _s7SwiftUI20SectionStyleModifierVyAA016MenuPickerOptioncD0VGMaTm_0(255, &lazy cache variable for type metadata for MenuStyleModifier<DefaultMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultMenuStyle and conformance DefaultMenuStyle, (uint64_t)&type metadata for DefaultMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for GroupElementsOfContent();
  type metadata accessor for Group();
  type metadata accessor for PopUpButton();
  swift_getWitnessTable();
  type metadata accessor for GroupElementsOfContent();
  type metadata accessor for Group();
  lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>();
  type metadata accessor for StaticIf();
  type metadata accessor for MenuPickerStyle.Body();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  return static StaticIf<>._makeViewList(view:inputs:)();
}

void type metadata accessor for SectionStyleModifier<MenuPickerOptionSectionStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI20SectionStyleModifierVyAA016MenuPickerOptioncD0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

__n128 __swift_memcpy20_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for NavigationBackgroundReaderModifier()
{
  return &type metadata for NavigationBackgroundReaderModifier;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SectionStyleConfiguration.RawContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.RawContent>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent, (uint64_t)&type metadata for SectionStyleConfiguration.RawContent, &lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.RawContent> and conformance SourceInput<A>);
}

uint64_t partial apply for closure #1 in SidebarListBody.body.getter(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

BOOL static ScenePhase.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t type metadata completion function for FileExportOperation.Mode()
{
  uint64_t result = type metadata accessor for FileExportOperation.Move(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FileExportOperation.Move(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileExportOperation.Move);
}

uint64_t assignWithCopy for SystemScrollLayoutState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  unint64_t v4 = *(void *)(a2 + 96);
  outlined copy of SystemScrollLayoutState.ContentOffsetMode(v4);
  unint64_t v5 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v4;
  outlined consume of SystemScrollLayoutState.ContentOffsetMode(v5);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

uint64_t type metadata completion function for CustomPreviewDragPayloadResponder()
{
  return swift_initClassMetadata2();
}

uint64_t storeEnumTagSinglePayload for ToolbarAppearanceModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance LazySubviewPlacements<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

unint64_t lazy protocol witness table accessor for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role;
  if (!lazy protocol witness table cache variable for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role;
  if (!lazy protocol witness table cache variable for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance LazyLayoutComputer<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

unint64_t lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewIdentity and conformance ViewIdentity;
  if (!lazy protocol witness table cache variable for type ViewIdentity and conformance ViewIdentity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewIdentity and conformance ViewIdentity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ViewIdentity and conformance ViewIdentity;
  if (!lazy protocol witness table cache variable for type ViewIdentity and conformance ViewIdentity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewIdentity and conformance ViewIdentity);
  }
  return result;
}

uint64_t destroy for NavigationColumnState(void *a1)
{
  if (a1[6])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[12])
  {
    swift_release();
    swift_release();
    swift_release();
  }
  outlined consume of NavigationColumnState.ColumnContent(a1[14], a1[15], a1[16], a1[17], a1[18], a1[19], a1[20], a1[21]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void *destructiveInjectEnumTag for SystemScrollLayoutState.ContentOffsetMode(void *result, uint64_t a2)
{
  if (a2 < 2) {
    *unint64_t result = *result & 0xFFFFFFFFFFFFFFBLL | (a2 << 62);
  }
  else {
    *unint64_t result = (2 * (a2 - 2)) & 0x1FFFFFFF8 | ((int)a2 - 2) & 3 | 0x8000000000000000;
  }
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedNavigationSplitStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>>, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (void (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle);
    lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (void (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (void (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle);
    lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (void (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined init with take of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, void (*a5)(void))
{
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t outlined init with copy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, void (*a5)(void))
{
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t ConditionallyBorderedStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v46 = a4;
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(0, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (void (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle);
  uint64_t v42 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v43 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v44 = (uint64_t)&v41 - v9;
  uint64_t v10 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v11 = v10 - 8;
  MEMORY[0x1F4188790](v10);
  double v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>();
  uint64_t v15 = v14 - 8;
  MEMORY[0x1F4188790](v14);
  double v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  objc_super v20 = (char *)&v41 - v19;
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (void (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle);
  uint64_t v41 = v21;
  MEMORY[0x1F4188790](v21);
  long long v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v41 - v25;
  a3 &= 1u;
  outlined copy of Environment<Bool>.Content(a2, a3);
  char v27 = specialized Environment.wrappedValue.getter(a2, a3);
  outlined consume of Environment<Bool>.Content(a2, a3);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_4(v45, (uint64_t)v13, type metadata accessor for PrimitiveButtonStyleConfiguration);
  char v28 = v13[1];
  char *v17 = *v13;
  v17[1] = v28;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_4((uint64_t)&v13[*(int *)(v11 + 32)], (uint64_t)&v17[*(int *)(v15 + 44)], (uint64_t (*)(void))type metadata accessor for ButtonAction);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_1((uint64_t)v13, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v17, (uint64_t)v20);
  if (v27)
  {
    _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_4((uint64_t)v20, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>);
    long long v29 = &v23[*(int *)(v41 + 36)];
    *(void *)long long v29 = 0;
    v29[8] = 0;
    _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_1((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>);
    outlined init with take of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>((uint64_t)v23, (uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (void (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle);
    outlined init with copy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>((uint64_t)v26, v46, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (void (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle);
    type metadata accessor for _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    uint64_t v30 = (uint64_t)v26;
    long long v31 = (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>;
    long long v32 = &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>;
    long long v33 = lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle;
  }
  else
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v35 = swift_getKeyPath();
    uint64_t v36 = v43;
    _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_4((uint64_t)v20, v43, (uint64_t (*)(void))type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>);
    uint64_t v37 = v36 + *(int *)(v42 + 36);
    *(void *)uint64_t v37 = KeyPath;
    *(unsigned char *)(v37 + 8) = 0;
    *(void *)(v37 + 16) = v35;
    *(unsigned char *)(v37 + 24) = 0;
    _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_1((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>);
    uint64_t v38 = v36;
    uint64_t v39 = v44;
    outlined init with take of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(v38, v44, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (void (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle);
    outlined init with copy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(v39, v46, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (void (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle);
    type metadata accessor for _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    uint64_t v30 = v39;
    long long v31 = &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>;
    long long v32 = &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>;
    long long v33 = lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle;
  }
  return outlined destroy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(v30, v31, v32, (void (*)(void))v33);
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  if (!*a2)
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>();
    type metadata accessor for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>(255, a3, a4);
    unint64_t v7 = type metadata accessor for ModifiedContent();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>()
{
  if (!lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>)
  {
    unint64_t v0 = type metadata accessor for Button();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>);
    }
  }
}

void type metadata accessor for _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (void (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle);
    uint64_t v7 = v6;
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (void (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t outlined destroy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void type metadata accessor for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for PrimitiveButtonStyleContainerModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type BorderedButtonStyle and conformance BorderedButtonStyle;
  if (!lazy protocol witness table cache variable for type BorderedButtonStyle and conformance BorderedButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BorderedButtonStyle and conformance BorderedButtonStyle);
  }
  return result;
}

uint64_t downloadURL(_:)(void *a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = downloadURL(_:);
  }
  else
  {
    uint64_t v6 = *(void **)(v4 + 56);

    uint64_t v5 = downloadURL(_:);
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>, _AppearanceActionModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<OnScrollVisibilityChangeModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<OnScrollVisibilityChangeModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<OnScrollVisibilityChangeModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<OnScrollVisibilityChangeModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<OnScrollVisibilityChangeModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<OnScrollVisibilityChangeModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<OnScrollVisibilityChangeModifier>)
  {
    lazy protocol witness table accessor for type OnScrollVisibilityChangeModifier and conformance OnScrollVisibilityChangeModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<OnScrollVisibilityChangeModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type OnScrollVisibilityChangeModifier and conformance OnScrollVisibilityChangeModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type OnScrollVisibilityChangeModifier and conformance OnScrollVisibilityChangeModifier;
  if (!lazy protocol witness table cache variable for type OnScrollVisibilityChangeModifier and conformance OnScrollVisibilityChangeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnScrollVisibilityChangeModifier and conformance OnScrollVisibilityChangeModifier);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>, _AppearanceActionModifier>(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, (void (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<OnScrollVisibilityChangeModifier> and conformance _ViewModifier_Content<A>);
}

ValueMetadata *type metadata accessor for SearchUnavailableContent.Actions()
{
  return &type metadata for SearchUnavailableContent.Actions;
}

uint64_t destroy for _TaskValueModifier.InnerModifier(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = type metadata accessor for TaskPriority();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5 + 8;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))((v7 + 16 + a1) & ~v7, v4);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(v6 + 56);
  uint64_t v10 = *(void *)(v8 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = v9 + v11;
  double v17 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v17((v9 + v11 + ((v7 + 16 + a1) & ~v7)) & ~v11, v8);
  double v13 = (uint64_t *)((((v12 + ((v7 + 16) & ~v7)) & ~v11) + a1 + (v11 | 7) + *(void *)(v10 + 64)) & ~(v11 | 7));
  if ((*(_DWORD *)(v10 + 84) & 0x80000000) != 0)
  {
    uint64_t v15 = ~v11;
    if ((*(unsigned int (**)(unint64_t))(v10 + 48))(((unint64_t)v13 + v11 + 8) & ~v11)) {
      goto LABEL_8;
    }
LABEL_7:
    swift_release();
    v17(((unint64_t)v13 + v11 + 8) & v15, v8);
    goto LABEL_8;
  }
  uint64_t v14 = *v13;
  if ((unint64_t)*v13 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  uint64_t v15 = ~v11;
  if (v14 == -1) {
    goto LABEL_7;
  }
LABEL_8:

  return swift_release();
}

uint64_t associated type witness table accessor for CustomHoverEffect.Body : CustomHoverEffect in HoverContainerEffect()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in WindowSceneList<A>.MakeList()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in RootModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in View.scrollClipDisabled(_:behavior:)(uint64_t result)
{
  char v2 = *(unsigned char *)(v1 + 17);
  *(unsigned char *)(result + 1) &= ~*(unsigned char *)(v1 + 16) & 1;
  *(unsigned char *)(result + 2) = v2;
  return result;
}

uint64_t specialized static ResetFormEnvironmentModifier.makeEnvironment(modifier:environment:)(uint64_t a1)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  type metadata accessor for Form<FormStyleConfiguration.Content>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FormInsetsKey>, (uint64_t)&type metadata for FormInsetsKey, (uint64_t)&protocol witness table for FormInsetsKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveFormStyleKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FormInsetsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<FormInsetsKey>, (uint64_t)&type metadata for FormInsetsKey, (uint64_t)&protocol witness table for FormInsetsKey);
  swift_retain();
  PropertyList.subscript.setter();
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for Form<FormStyleConfiguration.Content>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FormRowInfoVisibilityKey>, (uint64_t)&type metadata for FormRowInfoVisibilityKey, (uint64_t)&protocol witness table for FormRowInfoVisibilityKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveFormStyleKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FormRowInfoVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<FormRowInfoVisibilityKey>, (uint64_t)&type metadata for FormRowInfoVisibilityKey, (uint64_t)&protocol witness table for FormRowInfoVisibilityKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for Form<FormStyleConfiguration.Content>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FormRowAccessoryVisibilityKey>, (uint64_t)&type metadata for FormRowAccessoryVisibilityKey, (uint64_t)&protocol witness table for FormRowAccessoryVisibilityKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveFormStyleKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FormRowAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<FormRowAccessoryVisibilityKey>, (uint64_t)&type metadata for FormRowAccessoryVisibilityKey, (uint64_t)&protocol witness table for FormRowAccessoryVisibilityKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for Form<FormStyleConfiguration.Content>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EffectiveFormStyleKey>, (uint64_t)&type metadata for EffectiveFormStyleKey, (uint64_t)&protocol witness table for EffectiveFormStyleKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveFormStyleKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EffectiveFormStyleKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EffectiveFormStyleKey>, (uint64_t)&type metadata for EffectiveFormStyleKey, (uint64_t)&protocol witness table for EffectiveFormStyleKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for Form<FormStyleConfiguration.Content>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveFormStyleKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Form<FormStyleConfiguration.Content>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t View.allowsSecureDrawing()(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ViewInputFlagModifier<IsInSecureDrawingHierarchy>();
  uint64_t v4 = type metadata accessor for ModifiedContent();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v10 - v6;
  unint64_t v8 = lazy protocol witness table accessor for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy();
  View.input<A>(_:)((uint64_t)&type metadata for IsInSecureDrawingHierarchy, a1, (uint64_t)&type metadata for IsInSecureDrawingHierarchy, a2, v8);
  char v11 = 1;
  v10[1] = a2;
  _OWORD v10[2] = &protocol witness table for ViewInputFlagModifier<A>;
  swift_getWitnessTable();
  View.preference<A>(key:value:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void type metadata accessor for ViewInputFlagModifier<IsInSecureDrawingHierarchy>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<IsInSecureDrawingHierarchy>)
  {
    lazy protocol witness table accessor for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<IsInSecureDrawingHierarchy>);
    }
  }
}

uint64_t static _NavigationSplitReader._makeView(view:inputs:)(int *a1, uint64_t *a2)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  int v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[2];
  unsigned int v47 = *((_DWORD *)a2 + 8);
  int v48 = *((_DWORD *)a2 + 6);
  int v45 = *((_DWORD *)a2 + 7);
  unsigned int v46 = *((_DWORD *)a2 + 9);
  uint64_t v6 = a2[5];
  uint64_t v5 = a2[6];
  int v50 = *((_DWORD *)a2 + 14);
  int v51 = *((_DWORD *)a2 + 2);
  int v53 = *((_DWORD *)a2 + 16);
  int v54 = *((_DWORD *)a2 + 15);
  int v52 = *((_DWORD *)a2 + 17);
  unsigned int v49 = *((_DWORD *)a2 + 18);
  int v55 = *((_DWORD *)a2 + 20);
  unsigned int v56 = *((_DWORD *)a2 + 19);
  uint64_t v7 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3F590];
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, &lazy cache variable for type metadata for _GraphValue<_NavigationSplitReader>, (uint64_t)&unk_1ED43CE50, MEMORY[0x1E4F3F590]);
  uint64_t v8 = MEMORY[0x1E4F41808];
  _GraphValue.subscript.getter();
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, &lazy cache variable for type metadata for _GraphValue<Namespace.ID>, v8, v7);
  int v43 = _GraphValue.value.getter();
  _GraphValue.subscript.getter();
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, &lazy cache variable for type metadata for _GraphValue<NavigationSplitViewStyleConfiguration.Sidebar>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar, v7);
  int v38 = _GraphValue.value.getter();
  _GraphValue.subscript.getter();
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, &lazy cache variable for type metadata for _GraphValue<NavigationSplitViewStyleConfiguration.Content>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content, v7);
  int v39 = _GraphValue.value.getter();
  _GraphValue.subscript.getter();
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, &lazy cache variable for type metadata for _GraphValue<NavigationSplitViewStyleConfiguration.Detail>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail, v7);
  int v40 = _GraphValue.value.getter();
  _GraphValue.subscript.getter();
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, &lazy cache variable for type metadata for _GraphValue<NavigationSplitParameters>, (uint64_t)&type metadata for NavigationSplitParameters, v7);
  int v37 = _GraphValue.value.getter();
  _GraphValue.subscript.getter();
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, &lazy cache variable for type metadata for _GraphValue<CompositeNavigationSplitViewVisibility>, (uint64_t)&type metadata for CompositeNavigationSplitViewVisibility, v7);
  _GraphValue.value.getter();
  type metadata accessor for NavigationStateHost();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<NavigationStateHost>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<NavigationStateHost>, (uint64_t (*)(uint64_t))type metadata accessor for NavigationStateHost, MEMORY[0x1E4F3F590]);
  int v42 = _GraphValue.value.getter();
  uint64_t v9 = MEMORY[0x1E4FBB550];
  _GraphValue.subscript.getter();
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, &lazy cache variable for type metadata for _GraphValue<Int>, v9, v7);
  int v36 = _GraphValue.value.getter();
  *(_DWORD *)uint64_t v57 = v2;
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, MEMORY[0x1E4F41638]);
  _GraphValue.subscript.getter();
  type metadata accessor for Binding<NavigationSplitViewColumn>?(0, &lazy cache variable for type metadata for _GraphValue<Binding<NavigationSplitViewColumn>>, (unint64_t *)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, MEMORY[0x1E4F3F590]);
  int v34 = _GraphValue.value.getter();
  lazy protocol witness table accessor for type UISplitViewControllerProxyKey and conformance UISplitViewControllerProxyKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  uint64_t v10 = *(void *)v57;
  uint64_t v59 = v6;
  uint64_t v60 = v5;
  int v61 = v50;
  int v62 = v54;
  int v63 = v53;
  int v64 = v52;
  unint64_t v65 = __PAIR64__(v56, v49);
  int v66 = v55;
  *(_OWORD *)&v57[16] = xmmword_18834BB90;
  unint64_t v58 = 0;
  *(_DWORD *)uint64_t v57 = _ViewInputs.environment.getter();
  *(_DWORD *)&v57[4] = v42;
  *(_DWORD *)&v57[8] = v43;
  *(_DWORD *)&v57[12] = v36;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)();
  lazy protocol witness table accessor for type _NavigationSplitReader.DerivedAttributes and conformance _NavigationSplitReader.DerivedAttributes();
  Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of _NavigationSplitReader.DerivedAttributes((uint64_t)v57);
  AGGraphCreateOffsetAttribute2();
  AGCreateWeakAttribute();
  lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t v44 = v3;
  swift_release_n();
  uint64_t v11 = *(void *)v57;
  uint64_t KeyPath = swift_getKeyPath();
  *(_DWORD *)uint64_t v57 = v42;
  *(void *)&v57[8] = KeyPath;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for NavigationSeedHost(0);
  type metadata accessor for Focus<NavigationStateHost, NavigationSeedHost>();
  lazy protocol witness table accessor for type NavigationStateHost and conformance NavigationStateHost(&lazy protocol witness table cache variable for type Focus<NavigationStateHost, NavigationSeedHost> and conformance Focus<A, B>, (void (*)(uint64_t))type metadata accessor for Focus<NavigationStateHost, NavigationSeedHost>);
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  uint64_t v13 = AGCreateWeakAttribute();
  *(void *)uint64_t v57 = v11;
  *(void *)&v57[8] = v13;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds();
  Attribute.init<A>(body:value:flags:update:)();
  uint64_t v33 = AGCreateWeakAttribute();
  *(void *)uint64_t v57 = v3;
  *(_DWORD *)&v57[8] = v51;
  *(void *)&v57[16] = v4;
  *(_DWORD *)&v57[24] = v48;
  *(_DWORD *)&v57[28] = v45;
  unint64_t v58 = __PAIR64__(v46, v47);
  uint64_t v59 = v6;
  uint64_t v60 = v5;
  int v61 = v50;
  int v62 = v54;
  int v63 = v53;
  int v64 = v52;
  unint64_t v65 = __PAIR64__(v56, v49);
  int v66 = v55;
  swift_getKeyPath();
  int v41 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  *(void *)uint64_t v57 = v3;
  *(_DWORD *)&v57[8] = v51;
  *(void *)&v57[16] = v4;
  *(_DWORD *)&v57[24] = v48;
  *(_DWORD *)&v57[28] = v45;
  unint64_t v58 = __PAIR64__(v46, v47);
  uint64_t v59 = v6;
  uint64_t v60 = v5;
  int v61 = v50;
  int v62 = v54;
  int v63 = v53;
  int v64 = v52;
  unint64_t v65 = __PAIR64__(v56, v49);
  int v66 = v55;
  int v14 = _ViewInputs.viewPhase.getter();
  UpdateCycleDetector.init()();
  int v15 = *(_DWORD *)&v57[8];
  char v16 = v57[12];
  uint64_t v17 = *(void *)v57;
  *(_DWORD *)uint64_t v57 = v41;
  *(_DWORD *)&v57[4] = OffsetAttribute2;
  *(_DWORD *)&v57[8] = v14;
  *(void *)&v57[12] = v17;
  *(_DWORD *)&v57[20] = v15;
  v57[24] = v16;
  *(_DWORD *)&v57[28] = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type UpdateNavigationEventHandlers and conformance UpdateNavigationEventHandlers();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  LODWORD(v3) = AGGraphCreateOffsetAttribute2();
  *(void *)uint64_t v57 = v44;
  *(_DWORD *)&v57[8] = v51;
  *(void *)&v57[16] = v4;
  *(_DWORD *)&v57[24] = v48;
  *(_DWORD *)&v57[28] = v45;
  unint64_t v58 = __PAIR64__(v46, v47);
  uint64_t v59 = v6;
  uint64_t v60 = v5;
  int v61 = v50;
  int v62 = v54;
  int v63 = v53;
  int v64 = v52;
  unint64_t v65 = __PAIR64__(v56, v49);
  int v66 = v55;
  int v18 = _ViewInputs.viewPhase.getter();
  UpdateCycleDetector.init()();
  int v19 = *(_DWORD *)&v57[8];
  char v20 = v57[12];
  uint64_t v21 = *(void *)v57;
  *(_DWORD *)uint64_t v57 = v34;
  *(_DWORD *)&v57[4] = v3;
  *(_DWORD *)&v57[8] = v18;
  *(void *)&v57[12] = v21;
  *(_DWORD *)&v57[20] = v19;
  v57[24] = v20;
  *(_DWORD *)&v57[28] = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _NavigationSplitReader.UpdatePreferredCompactColumn and conformance _NavigationSplitReader.UpdatePreferredCompactColumn();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  *(void *)uint64_t v57 = v44;
  *(_DWORD *)&v57[8] = v51;
  *(void *)&v57[16] = v4;
  *(_DWORD *)&v57[24] = v48;
  *(_DWORD *)&v57[28] = v45;
  unint64_t v58 = __PAIR64__(v46, v47);
  uint64_t v59 = v6;
  uint64_t v60 = v5;
  int v61 = v50;
  int v62 = v54;
  int v63 = v53;
  int v64 = v52;
  unint64_t v65 = __PAIR64__(v56, v49);
  int v66 = v55;
  swift_getKeyPath();
  int v35 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  int v22 = AGGraphCreateOffsetAttribute2();
  *(void *)uint64_t v57 = v44;
  *(_DWORD *)&v57[8] = v51;
  *(void *)&v57[16] = v4;
  *(_DWORD *)&v57[24] = v48;
  *(_DWORD *)&v57[28] = v45;
  unint64_t v58 = __PAIR64__(v46, v47);
  uint64_t v59 = v6;
  uint64_t v60 = v5;
  int v61 = v50;
  int v62 = v54;
  int v63 = v53;
  int v64 = v52;
  unint64_t v65 = __PAIR64__(v56, v49);
  int v66 = v55;
  int v23 = _ViewInputs.viewPhase.getter();
  UpdateCycleDetector.init()();
  int v24 = *(_DWORD *)&v57[8];
  char v25 = v57[12];
  uint64_t v26 = *(void *)v57;
  *(_DWORD *)uint64_t v57 = v35;
  *(_DWORD *)&v57[4] = v22;
  *(_DWORD *)&v57[8] = v23;
  *(void *)&v57[12] = v26;
  *(_DWORD *)&v57[20] = v24;
  v57[24] = v25;
  *(_DWORD *)&v57[28] = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _NavigationSplitReader.UpdateRequiredCompactColumn and conformance _NavigationSplitReader.UpdateRequiredCompactColumn();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  *(_DWORD *)uint64_t v57 = v37;
  *(void *)&v57[4] = v10;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _NavigationSplitReader.CustomParameters and conformance _NavigationSplitReader.CustomParameters();
  Attribute.init<A>(body:value:flags:update:)();
  int v27 = AGGraphCreateOffsetAttribute2();
  int v28 = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)uint64_t v57 = v27;
  *(_DWORD *)&v57[4] = v43;
  v57[8] = 0;
  *(_DWORD *)&v57[12] = v36;
  *(_DWORD *)&v57[16] = v38;
  *(void *)&v57[20] = v33;
  *(_DWORD *)&v57[28] = v28;
  unint64_t v58 = 0;
  uint64_t v59 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar);
  type metadata accessor for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>(0, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
  lazy protocol witness table accessor for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar> and conformance _NavigationSplitReader.PreparedColumn<A>();
  Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v8) = AGGraphCreateOffsetAttribute2();
  int v29 = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)uint64_t v57 = v8;
  *(_DWORD *)&v57[4] = v43;
  v57[8] = 1;
  *(_DWORD *)&v57[12] = v36;
  *(_DWORD *)&v57[16] = v39;
  *(void *)&v57[20] = v33;
  *(_DWORD *)&v57[28] = v29;
  unint64_t v58 = 0;
  uint64_t v59 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content);
  type metadata accessor for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>(0, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Content, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
  lazy protocol witness table accessor for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content> and conformance _NavigationSplitReader.PreparedColumn<A>();
  Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v8) = AGGraphCreateOffsetAttribute2();
  int v30 = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)uint64_t v57 = v8;
  *(_DWORD *)&v57[4] = v43;
  v57[8] = 2;
  *(_DWORD *)&v57[12] = v36;
  *(_DWORD *)&v57[16] = v40;
  *(void *)&v57[20] = v33;
  *(_DWORD *)&v57[28] = v30;
  unint64_t v58 = 0;
  uint64_t v59 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail);
  type metadata accessor for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>(0, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Detail, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
  lazy protocol witness table accessor for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail> and conformance _NavigationSplitReader.PreparedColumn<A>();
  Attribute.init<A>(body:value:flags:update:)();
  *(void *)uint64_t v57 = v44;
  *(_DWORD *)&v57[8] = v51;
  *(void *)&v57[16] = v4;
  *(_DWORD *)&v57[24] = v48;
  *(_DWORD *)&v57[28] = v45;
  unint64_t v58 = __PAIR64__(v46, v47);
  uint64_t v59 = v6;
  uint64_t v60 = v5;
  int v61 = v50;
  int v62 = v54;
  int v63 = v53;
  int v64 = v52;
  unint64_t v65 = __PAIR64__(v56, v49);
  int v66 = v55;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AGGraphCreateOffsetAttribute2();
  _ViewInputs.environment.setter();
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
  PropertyList.subscript.setter();
  PreferenceKeys.add(_:)();
  PropertyList.subscript.setter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type _GraphInputs.NavigationPresentationAdaptorKey and conformance _GraphInputs.NavigationPresentationAdaptorKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  type metadata accessor for ModifiedContent<VariadicViewForest<_NavigationSplitReader.ForestRoot, (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationStat();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _NavigationSplitReader.Core and conformance _NavigationSplitReader.Core();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type ModifiedContent<VariadicViewForest<_NavigationSplitReader.ForestRoot, (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModi();
  static View.makeDebuggableView(view:inputs:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t _NavigationSplitReader.DerivedAttributes.updateValue()()
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v2 = Value[1];
  *(void *)&long long v44 = *Value;
  *((void *)&v44 + 1) = v2;
  *(void *)&long long v29 = v44;
  *((void *)&v29 + 1) = v2;
  swift_retain();
  swift_retain();
  EnvironmentValues.horizontalSizeClass.getter();
  LOBYTE(v29) = v41[0] & 1;
  type metadata accessor for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  LOBYTE(v29) = 1;
  type metadata accessor for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>, (uint64_t)&type metadata for InternalNavigationEnabledKey, (uint64_t)&protocol witness table for InternalNavigationEnabledKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>, (uint64_t)&type metadata for NavigationCompactColumnKey, (uint64_t)&protocol witness table for NavigationCompactColumnKey, MEMORY[0x1E4F40930]);
  long long v29 = 0uLL;
  LOBYTE(v30[0]) = 0;
  lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  uint64_t v3 = v0 + 16;
  _s7SwiftUI19NavigationAuthorityVSgWOcTm_0(v0 + 16, (uint64_t)&v29, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<AnyNavigationSplitVisibility>);
  uint64_t v4 = *((void *)&v29 + 1);
  _s7SwiftUI19NavigationAuthorityVSgWOhTm_0((uint64_t)&v29, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  if (v4 != 1) {
    goto LABEL_16;
  }
  type metadata accessor for NavigationStateHost();
  AGGraphGetValue();
  uint64_t v5 = (uint64_t *)AGGraphGetValue();
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  swift_weakInit();
  uint64_t v8 = swift_weakAssign();
  uint64_t v42 = v6;
  uint64_t v43 = v7;
  outlined init with take of NavigationAuthority(v8, (uint64_t)&v29);
  swift_retain();
  swift_retain();
  outlined assign with take of NavigationAuthority?((uint64_t)&v29, v0 + 16);
  AGGraphGetValue();
  long long v29 = v44;
  swift_retain();
  swift_retain();
  swift_retain();
  NavigationStateHost.createState(environment:)((uint64_t *)&v29);
  swift_release();
  swift_release();
  swift_release();
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationState.StackContent.Key>, (uint64_t)&type metadata for NavigationState.StackContent.Key, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB70;
  uint64_t v10 = *(void *)AGGraphGetValue();
  uint64_t v11 = *(void *)AGGraphGetValue();
  *(void *)(inited + 32) = v10;
  *(unsigned char *)(inited + 40) = 0;
  *(void *)(inited + 48) = v11;
  uint64_t v12 = *(void *)AGGraphGetValue();
  uint64_t v13 = *(void *)AGGraphGetValue();
  *(void *)(inited + 56) = v12;
  *(unsigned char *)(inited + 64) = 2;
  *(void *)(inited + 72) = v13;
  uint64_t v14 = *(void *)AGGraphGetValue();
  if (v14 == 3)
  {
    uint64_t v15 = *(void *)AGGraphGetValue();
    uint64_t inited = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)1, 3, 1, (char *)inited);
    *(void *)(inited + 16) = 3;
    *(void *)(inited + 80) = v15;
    *(unsigned char *)(inited + 88) = 1;
    *(void *)(inited + 96) = 3;
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = *(void *)(inited + 32);
  uint64_t v17 = *(unsigned __int8 *)(inited + 40);
  uint64_t v18 = *(void *)(inited + 48);
  uint64_t result = _s7SwiftUI19NavigationAuthorityVSgWOcTm_0(v3, (uint64_t)v41, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<AnyNavigationSplitVisibility>);
  if (v42 == 1) {
    goto LABEL_21;
  }
  long long v31 = 0u;
  long long v29 = 0u;
  memset(v30, 0, sizeof(v30));
  char v32 = 22;
  uint64_t v33 = v16;
  uint64_t v34 = v17;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v36 = 0;
  char v39 = 0;
  uint64_t v35 = v18;
  uint64_t v40 = 0;
  NavigationAuthority.enqueueRequest(_:)(&v29);
  outlined destroy of NavigationAuthority((uint64_t)v41);
  uint64_t v20 = *(void *)(inited + 56);
  uint64_t v21 = *(unsigned __int8 *)(inited + 64);
  uint64_t v22 = *(void *)(inited + 72);
  uint64_t result = _s7SwiftUI19NavigationAuthorityVSgWOcTm_0(v3, (uint64_t)v41, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<AnyNavigationSplitVisibility>);
  if (v42 == 1) {
    goto LABEL_21;
  }
  long long v31 = 0u;
  long long v29 = 0u;
  memset(v30, 0, sizeof(v30));
  char v32 = 22;
  uint64_t v33 = v20;
  uint64_t v34 = v21;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v36 = 0;
  char v39 = 0;
  uint64_t v35 = v22;
  uint64_t v40 = 0;
  NavigationAuthority.enqueueRequest(_:)(&v29);
  outlined destroy of NavigationAuthority((uint64_t)v41);
  if (v14 == 3)
  {
    uint64_t v23 = *(void *)(inited + 80);
    uint64_t v24 = *(unsigned __int8 *)(inited + 88);
    uint64_t v25 = *(void *)(inited + 96);
    uint64_t result = _s7SwiftUI19NavigationAuthorityVSgWOcTm_0(v3, (uint64_t)v41, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<AnyNavigationSplitVisibility>);
    if (v42 != 1)
    {
      long long v31 = 0u;
      long long v29 = 0u;
      memset(v30, 0, sizeof(v30));
      char v32 = 22;
      uint64_t v33 = v23;
      uint64_t v34 = v24;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v36 = 0;
      char v39 = 0;
      uint64_t v35 = v25;
      uint64_t v40 = 0;
      NavigationAuthority.enqueueRequest(_:)(&v29);
      outlined destroy of NavigationAuthority((uint64_t)v41);
      goto LABEL_15;
    }
LABEL_21:
    __break(1u);
    return result;
  }
LABEL_15:
  swift_bridgeObjectRelease_n();
LABEL_16:
  LOBYTE(v29) = 0;
  type metadata accessor for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*((void *)&v44 + 1))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  _s7SwiftUI19NavigationAuthorityVSgWOcTm_0(v3, (uint64_t)v27, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<AnyNavigationSplitVisibility>);
  if (v28 == 1) {
    __break(1u);
  }
  outlined init with take of NavigationAuthority((uint64_t)v27, (uint64_t)v41);
  long long v26 = v44;
  outlined init with take of NavigationAuthority?((uint64_t)v41, (uint64_t)&v29, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  *(_OWORD *)((char *)v30 + 8) = v26;
  type metadata accessor for (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)();
  swift_retain();
  swift_retain();
  AGGraphSetOutputValue();
  outlined destroy of _NavigationSplitReader.SplitPresentationModeLocation((uint64_t)&v29, (uint64_t (*)(void))type metadata accessor for (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues));
  swift_release();
  return swift_release();
}

void type metadata accessor for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined destroy of (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)(uint64_t a1)
{
  type metadata accessor for (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t NavigationStackReader.ChildEnvironment.updateValue()(void *a1)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[3];
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v6 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  NavigationStackReader.ChildEnvironment.environment.getter(&v64);
  NavigationStackReader.ChildEnvironment.inheritedAuthority.getter((uint64_t)v44);
  char v39 = v6;
  uint64_t v40 = v4;
  if (*(void *)&v44[8] == 1)
  {
    outlined destroy of NavigationAuthority?((uint64_t)v44);
  }
  else
  {
    if (*(void *)&v44[8] != 2) {
      goto LABEL_8;
    }
    outlined destroy of NavigationAuthority??((uint64_t)v44);
  }
  outlined init with copy of NavigationAuthority?(v1 + 40, (uint64_t)v44);
  if (*(void *)&v44[8] == 1)
  {
    outlined destroy of NavigationAuthority?((uint64_t)v44);
    type metadata accessor for NavigationStateHost();
    AGGraphGetValue();
    NavigationStackReader.ChildEnvironment.environment.getter(v42);
    long long v7 = v42[0];
    swift_weakInit();
    swift_weakAssign();
    *(_OWORD *)&v44[8] = v7;
    outlined init with take of NavigationAuthority((uint64_t)v44, (uint64_t)&v52);
    outlined assign with take of NavigationAuthority?((uint64_t)&v52, v1 + 40);
    outlined init with copy of NavigationAuthority?(v1 + 40, (uint64_t)&v52);
    if (*((void *)&v52 + 1) != 1) {
      goto LABEL_9;
    }
    __break(1u);
  }
LABEL_8:
  outlined init with take of NavigationAuthority((uint64_t)v44, (uint64_t)&v52);
LABEL_9:
  outlined init with take of NavigationAuthority((uint64_t)&v52, (uint64_t)v63);
  uint64_t v8 = *(a1 - 1);
  uint64_t v9 = (*(uint64_t (**)(unsigned char *, uint64_t, void *))(v8 + 16))(v62, v1, a1);
  MEMORY[0x1F4188790](v9);
  v38[-6] = a1[2];
  v38[-5] = v3;
  uint64_t v10 = a1[5];
  v38[-4] = a1[4];
  v38[-3] = v10;
  v38[-2] = v63;
  v38[-1] = v1;
  swift_getWitnessTable();
  StatefulRule.withObservation<A>(do:)();
  (*(void (**)(unsigned char *, void *))(v8 + 8))(v62, a1);
  LODWORD(v52) = v41;
  type metadata accessor for _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationStateSelectionSeed>, (uint64_t)&type metadata for NavigationStateSelectionSeed, (uint64_t)&protocol witness table for NavigationStateSelectionSeed, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationStateSelectionSeed> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationStateSelectionSeed>, (uint64_t)&type metadata for NavigationStateSelectionSeed, (uint64_t)&protocol witness table for NavigationStateSelectionSeed);
  swift_retain();
  PropertyList.subscript.setter();
  if (v65)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)();
  uint64_t v12 = v11;
  if (AGGraphGetOutputValue()) {
    goto LABEL_19;
  }
  v38[1] = v12;
  *(void *)&long long v52 = NavigationStackReader.ChildEnvironment.path.getter();
  *((void *)&v52 + 1) = v13;
  *(void *)&long long v53 = v14;
  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v44);
  swift_release();
  swift_release();
  uint64_t v15 = swift_release();
  char v16 = (*(uint64_t (**)(uint64_t))(**(void **)v44 + 80))(v15);
  swift_release();
  if ((v16 & 1) == 0)
  {
    outlined init with copy of NavigationAuthority((uint64_t)v63, (uint64_t)v61);
    uint64_t Value = AGGraphGetValue();
    uint64_t v19 = (uint64_t)v39;
    uint64_t v18 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v39, Value, v3);
    uint64_t result = NavigationStackReader.ChildEnvironment.key.getter();
    if (v21 == 6)
    {
LABEL_25:
      __break(1u);
      return result;
    }
    double v23 = static NavigationRequest.setInitialPossibilities<A>(_:stack:)(v19, result, v21, v22, v3, v10, (uint64_t)&v52);
    (*(void (**)(uint64_t, uint64_t, double))(v18 + 8))(v19, v3, v23);
    long long v49 = v58;
    long long v50 = v59;
    long long v45 = v54;
    long long v46 = v55;
    long long v47 = v56;
    long long v48 = v57;
    *(_OWORD *)long long v44 = v52;
    *(_OWORD *)&v44[16] = v53;
    v42[6] = v58;
    v42[7] = v59;
    v42[2] = v54;
    _OWORD v42[3] = v55;
    v42[4] = v56;
    v42[5] = v57;
    uint64_t v51 = v60;
    uint64_t v43 = v60;
    v42[0] = v52;
    v42[1] = v53;
    NavigationAuthority.enqueueRequest(_:)(v42);
    outlined release of NavigationRequest((uint64_t)v44);
    outlined destroy of NavigationAuthority((uint64_t)v61);
  }
  outlined init with copy of NavigationAuthority((uint64_t)v63, (uint64_t)v42);
  uint64_t v24 = NavigationStackReader.ChildEnvironment.path.getter();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t result = NavigationStackReader.ChildEnvironment.key.getter();
  char v39 = (char *)result;
  uint64_t v40 = v29;
  uint64_t v31 = v30;
  if (v30 == 6)
  {
    __break(1u);
    goto LABEL_25;
  }
  NavigationStackReader.ChildEnvironment.environment.getter(&v52);
  long long v32 = v52;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  char v33 = Transaction.disablesAnimations.getter();
  uint64_t v34 = Transaction.animation.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(void *)&long long v52 = v24;
  *((void *)&v52 + 1) = v26;
  *(void *)&long long v53 = v28;
  *((void *)&v53 + 1) = v32;
  long long v54 = *((unint64_t *)&v32 + 1);
  long long v55 = 0uLL;
  LOBYTE(v56) = 1;
  *((void *)&v56 + 1) = v39;
  *(void *)&long long v57 = v31;
  *((void *)&v57 + 1) = v40;
  long long v58 = 0uLL;
  *(void *)&long long v59 = 0;
  BYTE8(v59) = v33 & 1;
  uint64_t v60 = v34;
  if (*(unsigned char *)(v1 + 32) != 1)
  {
    long long v49 = v58;
    long long v50 = v59;
    uint64_t v51 = v60;
    long long v45 = v54;
    long long v46 = v55;
    long long v47 = v56;
    long long v48 = v57;
    *(_OWORD *)long long v44 = v52;
    *(_OWORD *)&v44[16] = v53;
    NavigationAuthority.enqueueRequest(_:)((long long *)v44);
  }
  outlined release of NavigationRequest((uint64_t)&v52);
  outlined destroy of NavigationAuthority((uint64_t)v42);
LABEL_19:
  LOBYTE(v52) = 1;
  type metadata accessor for _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>, (uint64_t)&type metadata for InternalNavigationEnabledKey, (uint64_t)&protocol witness table for InternalNavigationEnabledKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>, (uint64_t)&type metadata for InternalNavigationEnabledKey, (uint64_t)&protocol witness table for InternalNavigationEnabledKey);
  swift_retain();
  PropertyList.subscript.setter();
  uint64_t v35 = v65;
  if (v65)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  LOBYTE(v52) = 0;
  type metadata accessor for _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (v35)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined init with copy of NavigationAuthority((uint64_t)v63, (uint64_t)v44);
  uint64_t v36 = v64;
  uint64_t v37 = v65;
  outlined init with take of NavigationAuthority?((uint64_t)v44, (uint64_t)&v52);
  *((void *)&v53 + 1) = v36;
  *(void *)&long long v54 = v37;
  swift_retain();
  swift_retain();
  AGGraphSetOutputValue();
  outlined destroy of (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)((uint64_t)&v52);
  swift_release();
  swift_release();
  return outlined destroy of NavigationAuthority((uint64_t)v63);
}

void type metadata accessor for _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)()
{
  if (!lazy cache variable for type metadata for (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues))
  {
    type metadata accessor for Binding<AnyNavigationSplitVisibility>(255, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues));
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t NavigationStackReader.ChildEnvironment.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();

  return swift_retain();
}

uint64_t destroy for NavigationStackReader.ChildEnvironment(uint64_t result)
{
  if (*(void *)(result + 48) != 1)
  {
    swift_weakDestroy();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for NavigationStackReader.ChildEnvironment(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = a1 + 40;
  uint64_t v5 = a2 + 40;
  if (*(void *)(a2 + 48) == 1)
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
    *(void *)(v4 + 16) = *(void *)(v5 + 16);
  }
  else
  {
    swift_weakCopyInit();
    uint64_t v6 = *(void *)(a2 + 48);
    uint64_t v7 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = v7;
    swift_retain();
    swift_retain();
  }
  return a1;
}

double NavigationStackReader.ChildEnvironment.inheritedAuthority.getter@<D0>(uint64_t a1@<X8>)
{
  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of NavigationAuthority?(WeakValue, a1);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a1 = xmmword_18834C6B0;
    *(void *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t key path setter for EnvironmentValues.isNavigationEnabledInternal : EnvironmentValues()
{
  return EnvironmentValues.isNavigationEnabledInternal.setter();
}

uint64_t EnvironmentValues.isNavigationEnabledInternal.setter()
{
  type metadata accessor for EnvironmentPropertyKey<InternalNavigationEnabledKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>, (uint64_t)&type metadata for InternalNavigationEnabledKey, (uint64_t)&protocol witness table for InternalNavigationEnabledKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.isNavigationEnabledInternal : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isNavigationEnabledInternal.getter();
  *a1 = result;
  return result;
}

uint64_t EnvironmentValues.isNavigationEnabledInternal.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<InternalNavigationEnabledKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>, (uint64_t)&type metadata for InternalNavigationEnabledKey, (uint64_t)&protocol witness table for InternalNavigationEnabledKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<InternalNavigationEnabledKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>, (uint64_t)&type metadata for InternalNavigationEnabledKey, (uint64_t)&protocol witness table for InternalNavigationEnabledKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>, (uint64_t)&type metadata for InternalNavigationEnabledKey, (uint64_t)&protocol witness table for InternalNavigationEnabledKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<InternalNavigationEnabledKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata accessor for _NavigationSplitReader.PreparedColumn()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>, (uint64_t)&type metadata for NavigationCompactColumnKey, (uint64_t)&protocol witness table for NavigationCompactColumnKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t _NavigationSplitReader.Core.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v50 = *(void *)Value;
  char v48 = *(unsigned char *)(Value + 8);
  uint64_t v4 = *(void *)(Value + 16);
  char v46 = *(unsigned char *)(Value + 24);
  char v44 = *(unsigned char *)(Value + 25);
  char v42 = *(unsigned char *)(Value + 26);
  uint64_t v5 = AGGraphGetValue();
  uint64_t v7 = *(void *)v5;
  uint64_t v6 = *(void *)(v5 + 8);
  __int16 v38 = *(_WORD *)(v5 + 16);
  __int16 v40 = *(_WORD *)(v5 + 18);
  uint64_t v8 = MEMORY[0x1E4FBB718];
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  uint64_t v9 = AGGraphGetValue();
  uint64_t result = _s7SwiftUI19NavigationAuthorityVSgWOcTm_0(v9, (uint64_t)v93, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, v8, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<AnyNavigationSplitVisibility>);
  if (v94 == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v37 = v7;
    uint64_t v28 = a1;
    outlined init with take of NavigationAuthority((uint64_t)v93, (uint64_t)v78);
    Weakuint64_t Value = (unsigned int *)AGGraphGetWeakValue();
    if (WeakValue)
    {
      uint64_t v12 = *WeakValue;
      unint64_t v13 = (unint64_t)WeakValue[1] << 32;
    }
    else
    {
      unint64_t v13 = 0xFFFFFFFF00000000;
      uint64_t v12 = 0xFFFFFFFFLL;
    }
    type metadata accessor for UISplitViewControllerProxyStorage();
    uint64_t v14 = (uint64_t *)AGGraphGetWeakValue();
    if (v14)
    {
      uint64_t v15 = *v14;
      swift_retain();
    }
    else
    {
      uint64_t v15 = 0;
    }
    if (*(_DWORD *)(v1 + 40) == *MEMORY[0x1E4F4E7A0])
    {
      uint64_t v77 = 0;
      memset(v76, 0, sizeof(v76));
    }
    else
    {
      uint64_t v16 = MEMORY[0x1E4FBB718];
      type metadata accessor for _GraphValue<NavigationStateHost>(0, (unint64_t *)&lazy cache variable for type metadata for UINavigationPresentationAdaptor?, (uint64_t (*)(uint64_t))type metadata accessor for UINavigationPresentationAdaptor, MEMORY[0x1E4FBB718]);
      uint64_t v17 = AGGraphGetValue();
      _s7SwiftUI19NavigationAuthorityVSgWOcTm_0(v17, (uint64_t)v76, (uint64_t)&lazy cache variable for type metadata for UINavigationPresentationAdaptor?, (uint64_t)type metadata accessor for UINavigationPresentationAdaptor, v16, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for _GraphValue<NavigationStateHost>);
    }
    uint64_t v79 = v50;
    char v80 = v48;
    uint64_t v81 = v4;
    char v82 = v46;
    char v83 = v44;
    char v84 = v42;
    uint64_t v85 = v37;
    uint64_t v86 = v6;
    __int16 v87 = v38;
    __int16 v88 = v40;
    outlined init with take of NavigationAuthority((uint64_t)v78, (uint64_t)v89);
    v89[3] = v13 | v12;
    char v90 = 0;
    uint64_t v91 = v15;
    outlined init with take of UINavigationPresentationAdaptor?((uint64_t)v76, (uint64_t)&v92);
    _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar);
    uint64_t v18 = AGGraphGetValue();
    long long v47 = *(_OWORD *)v18;
    uint64_t v43 = *(void *)(v18 + 24);
    uint64_t v45 = *(void *)(v18 + 16);
    uint64_t v19 = *(void *)(v18 + 48);
    uint64_t v20 = *(void *)(v18 + 56);
    int v49 = *(_DWORD *)(v18 + 64);
    _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content);
    uint64_t v21 = AGGraphGetValue();
    long long v39 = *(_OWORD *)v21;
    uint64_t v35 = *(void *)(v21 + 24);
    uint64_t v36 = *(void *)(v21 + 16);
    uint64_t v23 = *(void *)(v21 + 48);
    uint64_t v22 = *(void *)(v21 + 56);
    int v41 = *(_DWORD *)(v21 + 64);
    _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail);
    uint64_t v24 = AGGraphGetValue();
    long long v33 = *(_OWORD *)v24;
    uint64_t v31 = *(void *)(v24 + 24);
    uint64_t v32 = *(void *)(v24 + 16);
    uint64_t v25 = *(void *)(v24 + 48);
    uint64_t v26 = *(void *)(v24 + 56);
    int v34 = *(_DWORD *)(v24 + 64);
    long long v29 = *(_OWORD *)(v18 + 32);
    long long v30 = *(_OWORD *)(v21 + 32);
    long long v51 = *(_OWORD *)(v24 + 32);
    outlined init with copy of _NavigationSplitReader.ForestRoot((uint64_t)&v79, (uint64_t)v54);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined destroy of _NavigationSplitReader.ForestRoot((uint64_t)&v79);
    long long v55 = v47;
    uint64_t v56 = v45;
    uint64_t v57 = v43;
    long long v58 = v29;
    uint64_t v59 = v19;
    uint64_t v60 = v20;
    int v61 = v49;
    long long v62 = v39;
    uint64_t v63 = v36;
    uint64_t v64 = v35;
    long long v65 = v30;
    uint64_t v66 = v23;
    uint64_t v67 = v22;
    int v68 = v41;
    long long v69 = v33;
    uint64_t v70 = v32;
    uint64_t v71 = v31;
    long long v72 = v51;
    uint64_t v73 = v25;
    uint64_t v74 = v26;
    int v75 = v34;
    outlined init with take of VariadicViewForest<_NavigationSplitReader.ForestRoot, (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>((uint64_t)v54, (uint64_t)v93);
    uint64_t v27 = AGGraphGetValue();
    uint64_t result = _s7SwiftUI19NavigationAuthorityVSgWOcTm_0(v27, (uint64_t)v52, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<AnyNavigationSplitVisibility>);
    if (v53 != 1)
    {
      outlined init with take of NavigationAuthority((uint64_t)v52, (uint64_t)v54);
      _s7SwiftUI19NavigationAuthorityVSgWOcTm_0((uint64_t)v54, v28 + 360, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<AnyNavigationSplitVisibility>);
      outlined init with copy of _NavigationSplitReader.SplitPresentationModeLocation((uint64_t)v93, v28, (uint64_t (*)(void))type metadata accessor for VariadicViewForest<_NavigationSplitReader.ForestRoot, (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>);
      _s7SwiftUI19NavigationAuthorityVSgWOhTm_0((uint64_t)v54, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
      return outlined destroy of _NavigationSplitReader.SplitPresentationModeLocation((uint64_t)v93, (uint64_t (*)(void))type metadata accessor for VariadicViewForest<_NavigationSplitReader.ForestRoot, (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>);
    }
  }
  __break(1u);
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>(255, a3, a4, a5);
    type metadata accessor for External<UInt32>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed, MEMORY[0x1E4F411E8]);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>(255, a3, a4, a5);
    type metadata accessor for Binding<AnyNavigationSplitVisibility>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed, MEMORY[0x1E4F411E8]);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata accessor for UISplitViewControllerProxyStorage()
{
  uint64_t result = type metadata singleton initialization cache for UISplitViewControllerProxyStorage;
  if (!type metadata singleton initialization cache for UISplitViewControllerProxyStorage) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of _NavigationSplitReader.SplitPresentationModeLocation(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>(255, a3, a4, (uint64_t)&type metadata for InjectKeyModifier, MEMORY[0x1E4F3FBA0]);
    type metadata accessor for StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>();
    unint64_t v5 = type metadata accessor for ModifiedContent();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<Binding<PresentationMode>>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>);
    }
  }
}

uint64_t outlined init with take of UINavigationPresentationAdaptor?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _GraphValue<NavigationStateHost>(0, (unint64_t *)&lazy cache variable for type metadata for UINavigationPresentationAdaptor?, (uint64_t (*)(uint64_t))type metadata accessor for UINavigationPresentationAdaptor, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _GraphValue<NavigationStateHost>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined init with copy of _NavigationSplitReader.ForestRoot(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithTake for Tuple(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithTake for _NavigationSplitReader.ForestRoot(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  return a1;
}

uint64_t NavigationStackReader.ChildEnvironment.path.getter()
{
  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, MEMORY[0x1E4F41638]);
  uint64_t v0 = *(void *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_retain();
  return v0;
}

uint64_t initializeWithCopy for _NavigationSplitReader.SplitPresentationModeLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_weakCopyInit();
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(v6 + 8) = *(void *)(a2 + 8);
  *(void *)(v6 + 16) = v7;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(v6 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = v6 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_retain();
  swift_retain();
  v12(v9, v10, v11);
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  swift_retain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.NavigationPresentationAdaptorKey and conformance _GraphInputs.NavigationPresentationAdaptorKey()
{
  unint64_t result = lazy protocol witness table cache variable for type _GraphInputs.NavigationPresentationAdaptorKey and conformance _GraphInputs.NavigationPresentationAdaptorKey;
  if (!lazy protocol witness table cache variable for type _GraphInputs.NavigationPresentationAdaptorKey and conformance _GraphInputs.NavigationPresentationAdaptorKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.NavigationPresentationAdaptorKey and conformance _GraphInputs.NavigationPresentationAdaptorKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _NavigationSplitReader.CustomParameters and conformance _NavigationSplitReader.CustomParameters()
{
  unint64_t result = lazy protocol witness table cache variable for type _NavigationSplitReader.CustomParameters and conformance _NavigationSplitReader.CustomParameters;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.CustomParameters and conformance _NavigationSplitReader.CustomParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.CustomParameters and conformance _NavigationSplitReader.CustomParameters);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _NavigationSplitReader.CustomParameters and conformance _NavigationSplitReader.CustomParameters;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.CustomParameters and conformance _NavigationSplitReader.CustomParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.CustomParameters and conformance _NavigationSplitReader.CustomParameters);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UpdateNavigationEventHandlers and conformance UpdateNavigationEventHandlers()
{
  unint64_t result = lazy protocol witness table cache variable for type UpdateNavigationEventHandlers and conformance UpdateNavigationEventHandlers;
  if (!lazy protocol witness table cache variable for type UpdateNavigationEventHandlers and conformance UpdateNavigationEventHandlers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateNavigationEventHandlers and conformance UpdateNavigationEventHandlers);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UISplitViewControllerProxyKey and conformance UISplitViewControllerProxyKey()
{
  unint64_t result = lazy protocol witness table cache variable for type UISplitViewControllerProxyKey and conformance UISplitViewControllerProxyKey;
  if (!lazy protocol witness table cache variable for type UISplitViewControllerProxyKey and conformance UISplitViewControllerProxyKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UISplitViewControllerProxyKey and conformance UISplitViewControllerProxyKey);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyTransformModifier<Binding<PresentationMode>>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Binding<PresentationMode>>)
  {
    type metadata accessor for External<UInt32>(255, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationMode>, (uint64_t)&type metadata for PresentationMode, MEMORY[0x1E4F41638]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Binding<PresentationMode>>);
    }
  }
}

unint64_t type metadata accessor for UINavigationPresentationAdaptor()
{
  unint64_t result = lazy cache variable for type metadata for UINavigationPresentationAdaptor;
  if (!lazy cache variable for type metadata for UINavigationPresentationAdaptor)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UINavigationPresentationAdaptor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _NavigationSplitReader.Core and conformance _NavigationSplitReader.Core()
{
  unint64_t result = lazy protocol witness table cache variable for type _NavigationSplitReader.Core and conformance _NavigationSplitReader.Core;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.Core and conformance _NavigationSplitReader.Core)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.Core and conformance _NavigationSplitReader.Core);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _NavigationSplitReader.UpdatePreferredCompactColumn and conformance _NavigationSplitReader.UpdatePreferredCompactColumn()
{
  unint64_t result = lazy protocol witness table cache variable for type _NavigationSplitReader.UpdatePreferredCompactColumn and conformance _NavigationSplitReader.UpdatePreferredCompactColumn;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.UpdatePreferredCompactColumn and conformance _NavigationSplitReader.UpdatePreferredCompactColumn)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.UpdatePreferredCompactColumn and conformance _NavigationSplitReader.UpdatePreferredCompactColumn);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _NavigationSplitReader.UpdateRequiredCompactColumn and conformance _NavigationSplitReader.UpdateRequiredCompactColumn()
{
  unint64_t result = lazy protocol witness table cache variable for type _NavigationSplitReader.UpdateRequiredCompactColumn and conformance _NavigationSplitReader.UpdateRequiredCompactColumn;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.UpdateRequiredCompactColumn and conformance _NavigationSplitReader.UpdateRequiredCompactColumn)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.UpdateRequiredCompactColumn and conformance _NavigationSplitReader.UpdateRequiredCompactColumn);
  }
  return result;
}

uint64_t outlined destroy of _NavigationSplitReader.DerivedAttributes(uint64_t a1)
{
  return a1;
}

uint64_t destroy for _NavigationSplitReader.DerivedAttributes(uint64_t result)
{
  if (*(void *)(result + 24) != 1)
  {
    swift_weakDestroy();
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _NavigationSplitReader.DerivedAttributes and conformance _NavigationSplitReader.DerivedAttributes()
{
  unint64_t result = lazy protocol witness table cache variable for type _NavigationSplitReader.DerivedAttributes and conformance _NavigationSplitReader.DerivedAttributes;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.DerivedAttributes and conformance _NavigationSplitReader.DerivedAttributes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.DerivedAttributes and conformance _NavigationSplitReader.DerivedAttributes);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in _NavigationSplitReader.SplitPresentationModeLocation()
{
  return lazy protocol witness table accessor for type NavigationStateHost and conformance NavigationStateHost(&lazy protocol witness table cache variable for type _NavigationSplitReader.SplitPresentationModeLocation and conformance _NavigationSplitReader.SplitPresentationModeLocation, (void (*)(uint64_t))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
}

uint64_t lazy protocol witness table accessor for type NavigationStateHost and conformance NavigationStateHost(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>))
  {
    _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar);
    _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content);
    _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>));
    }
  }
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance IsAnimated<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<NavigationTransitionKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<NavigationTransitionKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<NavigationTransitionKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<NavigationTransitionKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<NavigationTransitionKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for _PreferenceWritingModifier<NavigationTransitionKey>()
{
  if (!lazy cache variable for type metadata for _PreferenceWritingModifier<NavigationTransitionKey>)
  {
    unint64_t v0 = type metadata accessor for _PreferenceWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceWritingModifier<NavigationTransitionKey>);
    }
  }
}

ValueMetadata *type metadata accessor for LinearProgressViewStyle()
{
  return &type metadata for LinearProgressViewStyle;
}

uint64_t type metadata completion function for UIViewResponder()
{
  return swift_initClassMetadata2();
}

uint64_t outlined retain of NavigationState.UpdateResult(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 248);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    *(void *)(a1 + 240),
    v4);
  return a1;
}

uint64_t outlined copy of NavigationState.UpdateResult(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unsigned __int8 a32)
{
  if (a14 >> 2 != 0x7FFFFFFF)
  {
    outlined copy of NavigationRequest.Action(result, a2, a3, a4, a5, a6, a7, a8, a9);
    swift_retain();
    return outlined copy of NavigationRequest.Action?(a24, a25, a26, a27, a28, a29, a30, a31, a32);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _TaskModifier.Child(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _TaskModifier.Child and conformance _TaskModifier.Child();

  return MEMORY[0x1F40FE388](a1, v2);
}

double static TransactionalPreferenceTransformModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  uint64_t v20 = *a1;
  int v6 = *((_DWORD *)a1 + 6);
  int v5 = *((_DWORD *)a1 + 7);
  int v18 = *((_DWORD *)a1 + 9);
  int v19 = *((_DWORD *)a1 + 8);
  uint64_t v17 = a1[5];
  uint64_t v23 = a1[6];
  int v24 = *((_DWORD *)a1 + 14);
  int v7 = *((_DWORD *)a1 + 17);
  int v15 = *((_DWORD *)a1 + 16);
  int v16 = *((_DWORD *)a1 + 15);
  int v9 = *((_DWORD *)a1 + 18);
  int v8 = *((_DWORD *)a1 + 19);
  int v10 = *((_DWORD *)a1 + 20);
  type metadata accessor for TransactionalPreferenceTransformModifier();
  type metadata accessor for _GraphValue();
  int v32 = v3;
  uint64_t v33 = v4;
  int v34 = v6;
  int v35 = v5;
  int v36 = v19;
  int v37 = v18;
  uint64_t v38 = v17;
  uint64_t v39 = v23;
  int v40 = v24;
  int v41 = v16;
  int v42 = v15;
  int v43 = v7;
  int v44 = v9;
  int v45 = v8;
  int v46 = v10;
  LODWORD(v31) = _GraphValue.value.getter();
  HIDWORD(v31) = _ViewInputs.transaction.getter();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t FunctionTypeMetadata = swift_getFunctionTypeMetadata();
  uint64_t IsAnimated = type metadata accessor for IsAnimated();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v31, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v25, IsAnimated, MEMORY[0x1E4FBC248], v11, MEMORY[0x1E4FBC278], v12);
  static AGAttributeFlags.transactional.getter();
  uint64_t v13 = AGGraphSetFlags();
  uint64_t v31 = v20;
  int v32 = v3;
  uint64_t v33 = v4;
  int v34 = v6;
  int v35 = v5;
  int v36 = v19;
  int v37 = v18;
  uint64_t v38 = v17;
  uint64_t v39 = v23;
  int v40 = v24;
  int v41 = v16;
  int v42 = v15;
  int v43 = v7;
  int v44 = v9;
  int v45 = v8;
  int v46 = v10;
  a2(&AssociatedTypeWitness, v13, &v31);
  uint64_t v31 = v23;
  int v32 = v24;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  *a3 = AssociatedTypeWitness;
  double result = v30;
  *((double *)a3 + 1) = v30;
  return result;
}

uint64_t type metadata accessor for IsAnimated()
{
  return __swift_instantiateGenericMetadata();
}

{
  return swift_getGenericMetadata();
}

__n128 __swift_memcpy120_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t NavigationSplitView.init<>(columnVisibility:sidebar:detail:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, void (*a3)(uint64_t)@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v29 = a7;
  uint64_t v30 = a8;
  v26[1] = a4;
  uint64_t v27 = a3;
  uint64_t v28 = a9;
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)v15;
  if (*(unsigned char *)(v15 + 17)) {
    __int16 v19 = 256;
  }
  else {
    __int16 v19 = 0;
  }
  __int16 v20 = v19 | *(unsigned __int8 *)(v15 + 16) | 0x4000;
  lazy protocol witness table accessor for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns();
  uint64_t v21 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  uint64_t v22 = swift_release();
  v34[0] = v18;
  v34[1] = v21;
  __int16 v35 = v20;
  char v36 = 1;
  __int16 v33 = 512;
  uint64_t v23 = a2(v22);
  v27(v23);
  v31[0] = 0;
  v31[1] = 0;
  __int16 v32 = 0;
  return NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)(v34, &v33, v31, (uint64_t)v17, v24, (uint64_t)v13, a5, MEMORY[0x1E4F417F8], v30, a6);
}

uint64_t StackItemsView.body.getter@<X0>(uint64_t a1@<X8>)
{
  long long v2 = (uint64_t *)v1;
  uint64_t v51 = a1;
  uint64_t v3 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v49 = *(void *)(v3 - 8);
  uint64_t v50 = v3;
  MEMORY[0x1F4188790](v3);
  char v48 = &v32[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>>();
  uint64_t v46 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v47 = &v32[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = static Alignment.center.getter();
  uint64_t v43 = v8;
  uint64_t v44 = v7;
  uint64_t v9 = *(void *)v1;
  v68[0] = *(void *)v1;
  type metadata accessor for NavigationState.StackContent?(0, &lazy cache variable for type metadata for [StackItem], (uint64_t)&type metadata for StackItem, MEMORY[0x1E4FBB320]);
  uint64_t v11 = v10;
  lazy protocol witness table accessor for type [StackItem] and conformance [A]();
  lazy protocol witness table accessor for type StackItem and conformance StackItem();
  swift_bridgeObjectRetain();
  uint64_t v45 = v11;
  ForEach<>.init(_:content:)();
  long long v42 = v53;
  uint64_t v40 = v55;
  uint64_t v41 = v54;
  uint64_t v38 = v57;
  uint64_t v39 = v56;
  uint64_t v12 = *(void *)(v1 + 528);
  LOBYTE(v53) = *(unsigned char *)(v1 + 520);
  *((void *)&v53 + 1) = v12;
  type metadata accessor for NavigationState.StackContent?(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  uint64_t v13 = 0;
  if ((v68[0] & 1) == 0)
  {
    if (one-time initialization token for clarityUINavigationTransition != -1) {
      swift_once();
    }
    uint64_t v13 = static Animation.clarityUINavigationTransition;
    swift_retain();
  }
  uint64_t v14 = *(void *)(v1 + 512);
  LOBYTE(v68[0]) = *(unsigned char *)(v1 + 504);
  v68[1] = v14;
  swift_bridgeObjectRetain();
  State.projectedValue.getter();
  uint64_t v36 = *((void *)&v53 + 1);
  uint64_t v37 = v53;
  int v35 = v54;
  uint64_t v15 = *(void *)(v1 + 496);
  LOBYTE(v68[0]) = *(unsigned char *)(v1 + 488);
  v68[1] = v15;
  State.projectedValue.getter();
  long long v16 = v53;
  int v33 = v54;
  uint64_t v34 = *(void *)(v1 + 440);
  char v17 = *(unsigned char *)(v1 + 448);
  outlined init with copy of StackItemsView(v1, (uint64_t)&v53);
  uint64_t v18 = swift_allocObject();
  outlined init with take of StackItemsView((uint64_t)&v53, v18 + 16);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v20 = swift_getKeyPath();
  char v63 = v17;
  char v61 = 0;
  char v59 = 0;
  uint64_t v21 = swift_getKeyPath();
  *(void *)&v67[0] = v44;
  *((void *)&v67[0] + 1) = v43;
  v67[1] = v42;
  *(void *)&v67[2] = v41;
  *((void *)&v67[2] + 1) = v40;
  *(void *)&v67[3] = v39;
  *((void *)&v67[3] + 1) = v38;
  *(void *)&v67[4] = v13;
  *((void *)&v67[4] + 1) = v9;
  *(void *)&v67[5] = v37;
  *((void *)&v67[5] + 1) = v36;
  LOBYTE(v67[6]) = v35;
  *(_DWORD *)((char *)&v67[6] + 1) = *(_DWORD *)v65;
  DWORD1(v67[6]) = *(_DWORD *)&v65[3];
  *(_OWORD *)((char *)&v67[6] + 8) = v16;
  BYTE8(v67[7]) = v33;
  HIDWORD(v67[7]) = *(_DWORD *)&v64[3];
  *(_DWORD *)((char *)&v67[7] + 9) = *(_DWORD *)v64;
  *(void *)&v67[8] = v34;
  BYTE8(v67[8]) = v17;
  HIDWORD(v67[8]) = *(_DWORD *)&v62[3];
  *(_DWORD *)((char *)&v67[8] + 9) = *(_DWORD *)v62;
  *(void *)&v67[9] = partial apply for closure #2 in StackItemsView.body.getter;
  *((void *)&v67[9] + 1) = v18;
  *(void *)&v67[10] = KeyPath;
  BYTE8(v67[10]) = 0;
  *(_DWORD *)((char *)&v67[10] + 9) = *(_DWORD *)v60;
  HIDWORD(v67[10]) = *(_DWORD *)&v60[3];
  *(void *)&v67[11] = v20;
  BYTE8(v67[11]) = 0;
  *(_DWORD *)((char *)&v67[11] + 9) = *(_DWORD *)v58;
  HIDWORD(v67[11]) = *(_DWORD *)&v58[3];
  memset(&v67[12], 0, 72);
  *((void *)&v67[16] + 1) = v21;
  LOBYTE(v67[17]) = 1;
  uint64_t v52 = *v2;
  outlined init with copy of StackItemsView((uint64_t)v2, (uint64_t)&v53);
  uint64_t v22 = swift_allocObject();
  outlined init with take of StackItemsView((uint64_t)&v53, v22 + 16);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type [StackItem] and conformance <A> [A]();
  swift_bridgeObjectRetain();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  memcpy(v66, v67, 0x111uLL);
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>((uint64_t)v66);
  memcpy(v67, v68, sizeof(v67));
  id v23 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didPerformBackButtonPress != -1) {
    swift_once();
  }
  uint64_t v24 = v48;
  NSNotificationCenter.publisher(for:object:)();

  outlined init with copy of StackItemsView((uint64_t)v2, (uint64_t)&v53);
  uint64_t v25 = swift_allocObject();
  outlined init with take of StackItemsView((uint64_t)&v53, v25 + 16);
  uint64_t v27 = v46;
  uint64_t v26 = v47;
  uint64_t v29 = v49;
  uint64_t v28 = v50;
  (*(void (**)(char *, unsigned char *, uint64_t))(v49 + 16))(&v47[*(int *)(v46 + 52)], v24, v50);
  memcpy(v26, v67, 0x150uLL);
  uint64_t v30 = (uint64_t *(**)())&v26[*(int *)(v27 + 56)];
  *uint64_t v30 = partial apply for closure #4 in StackItemsView.body.getter;
  v30[1] = (uint64_t *(*)())v25;
  (*(void (**)(unsigned char *, uint64_t))(v29 + 8))(v24, v28);
  return outlined init with take of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>>((uint64_t)v26, v51, (uint64_t (*)(void))type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>>);
}

uint64_t ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(char *, uint64_t), unsigned int (*a5)(char *, uint64_t, uint64_t), uint64_t a6, void (**a7)(char *, char *, uint64_t), char *a8)
{
  uint64_t v220 = a5;
  uint64_t v225 = a8;
  unint64_t v219 = a4;
  uint64_t v222 = a3;
  uint64_t v164 = a2;
  uint64_t v163 = a1;
  uint64_t v10 = *(void (***)(char *, uint64_t))(a6 + 16);
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(a6 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v177 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v179 = (char *)&v159 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v175 = (char *)&v159 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v174 = (char *)&v159 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v173 = (char *)&v159 - v19;
  MEMORY[0x1F4188790](v20);
  long long v193 = (char *)&v159 - v21;
  MEMORY[0x1F4188790](v22);
  long long v188 = (char *)&v159 - v23;
  MEMORY[0x1F4188790](v24);
  v211 = (char *)&v159 - v25;
  MEMORY[0x1F4188790](v26);
  uint64_t v217 = (char *)&v159 - v27;
  MEMORY[0x1F4188790](v28);
  long long v187 = (char *)&v159 - v29;
  MEMORY[0x1F4188790](v30);
  uint64_t v169 = (char *)&v159 - v31;
  MEMORY[0x1F4188790](v32);
  long long v192 = (char *)&v159 - v33;
  uint64_t v215 = v9;
  v218 = v10;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v34 = swift_getAssociatedTypeWitness();
  uint64_t v35 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  unint64_t v172 = (char *)&v159 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v37);
  id v171 = (char *)&v159 - v38;
  MEMORY[0x1F4188790](v39);
  long long v186 = (char *)&v159 - v40;
  MEMORY[0x1F4188790](v41);
  uint64_t v210 = (char *)&v159 - v42;
  MEMORY[0x1F4188790](v43);
  uint64_t v216 = (char *)&v159 - v44;
  MEMORY[0x1F4188790](v45);
  long long v190 = (char *)&v159 - v46;
  MEMORY[0x1F4188790](v47);
  long long v191 = (char *)&v159 - v48;
  uint64_t v49 = swift_getAssociatedConformanceWitness();
  uint64_t v181 = v11;
  uint64_t v50 = swift_getAssociatedConformanceWitness();
  uint64_t v226 = v34;
  uint64_t v227 = AssociatedTypeWitness;
  uint64_t v207 = v49;
  uint64_t v228 = v49;
  uint64_t v229 = v50;
  uint64_t v202 = v50;
  uint64_t v51 = type metadata accessor for ListUpdate();
  uint64_t v198 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51);
  long long v185 = (char *)&v159 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v53);
  long long v184 = (char *)&v159 - v54;
  MEMORY[0x1F4188790](v55);
  long long v183 = (char *)&v159 - v56;
  MEMORY[0x1F4188790](v57);
  long long v204 = (char *)&v159 - v58;
  uint64_t v59 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v59 - 8);
  char v61 = (char *)&v159 - v60;
  uint64_t v206 = a7;
  uint64_t v214 = (uint64_t)*(a7 - 1);
  MEMORY[0x1F4188790](v62);
  uint64_t v208 = (char *)&v159 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v209 = (void (**)(char *, char *, uint64_t))*((void *)v225 + 1);
  uint64_t v224 = swift_getAssociatedTypeWitness();
  uint64_t v162 = *(void *)(v224 - 8);
  MEMORY[0x1F4188790](v224);
  v223 = (char *)&v159 - v64;
  uint64_t v197 = swift_checkMetadataState();
  uint64_t v166 = *(void *)(v197 - 8);
  MEMORY[0x1F4188790](v197);
  uint64_t v170 = (char *)&v159 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v66);
  uint64_t v168 = (char *)&v159 - v67;
  MEMORY[0x1F4188790](v68);
  long long v201 = (char *)&v159 - v69;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v161 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  long long v160 = (char *)&v159 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v71);
  uint64_t v73 = (char *)&v159 - v72;
  double v75 = MEMORY[0x1F4188790](v74);
  uint64_t v77 = (char *)&v159 - v76;
  uint64_t v225 = (char *)&v159 + *(int *)(v78 + 48) - v76;
  uint64_t v167 = v35;
  uint64_t v79 = v35 + 16;
  char v80 = *(void (**)(char *, void (**)(char *, uint64_t), uint64_t, double))(v35 + 16);
  v80((char *)&v159 - v76, v219, v34, v75);
  uint64_t v81 = v177 + 16;
  char v82 = *(void (**)(char *, char *, uint64_t))(v177 + 16);
  v82(v225, (char *)v220, AssociatedTypeWitness);
  uint64_t v213 = &v73[*(int *)(TupleTypeMetadata2 + 48)];
  long long v159 = v77;
  uint64_t v196 = v79;
  long long v195 = (void (*)(char *, char *, uint64_t))v80;
  ((void (*)(char *, char *, uint64_t))v80)(v73, v77, v34);
  uint64_t v200 = v81;
  long long v199 = v82;
  v82(v213, v225, AssociatedTypeWitness);
  char v83 = (void (*)(char *, void))*((void *)v215 + 10);
  uint64_t v225 = v73;
  v83(v73, v218);
  (*(void (**)(char *, uint64_t, void))(v214 + 16))(v208, v222, v206);
  char v84 = v204;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v85 = v198;
  uint64_t v86 = swift_getAssociatedConformanceWitness();
  __int16 v87 = v190;
  uint64_t v222 = v86;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v220 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48);
  uint64_t v221 = v85 + 48;
  if (v220(v61, 1, v51) != 1)
  {
    uint64_t v95 = *(void (**)(char *, char *, uint64_t))(v85 + 32);
    uint64_t v94 = v85 + 32;
    uint64_t v215 = v95;
    uint64_t v206 = (void (**)(char *, char *, uint64_t))(v94 - 16);
    uint64_t v209 = (void (**)(char *, char *, uint64_t))(v167 + 32);
    uint64_t v208 = (char *)(v177 + 32);
    v218 = (void (**)(char *, uint64_t))(v177 + 8);
    unint64_t v219 = (void (**)(char *, uint64_t))(v167 + 8);
    long long v182 = (void (**)(char *, char *, uint64_t))(v166 + 16);
    uint64_t v180 = (void (**)(char *, uint64_t))(v166 + 8);
    uint64_t v214 = v94 - 24;
    uint64_t v198 = v94;
    uint64_t v205 = v61;
    uint64_t v178 = AssociatedTypeWitness;
    uint64_t v176 = v51;
    v95(v84, v61, v51);
    while (1)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      switch(EnumCaseMultiPayload)
      {
        case 5:
          char v107 = v185;
          (*v206)(v185, v84, v51);
          uint64_t v108 = TupleTypeMetadata2;
          uint64_t v109 = &v107[*(int *)(swift_getTupleTypeMetadata2() + 48)];
          uint64_t v110 = *(int *)(v108 + 48);
          uint64_t v111 = &v107[v110];
          char v112 = &v109[v110];
          uint64_t v113 = *v209;
          (*v209)(v216, v107, v34);
          uint64_t v114 = v210;
          v113(v210, v109, v34);
          char v115 = *(void (**)(char *, char *, uint64_t))v208;
          (*(void (**)(char *, char *, uint64_t))v208)(v217, v111, AssociatedTypeWitness);
          v115(v211, v112, AssociatedTypeWitness);
          uint64_t v116 = *(void *)(v207 + 8);
          LOBYTE(v109) = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v117 = v186;
          v195(v186, v114, v34);
          uint64_t v118 = v188;
          uint64_t v203 = v116;
          if (v109)
          {
            long long v194 = *v219;
            v194(v117, v34);
          }
          else
          {
            char v122 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v123 = *v219;
            (*v219)(v117, v34);
            if ((v122 & 1) == 0)
            {
              unint64_t v132 = *v218;
              (*v218)(v211, AssociatedTypeWitness);
              v132(v217, AssociatedTypeWitness);
              v123(v210, v34);
              v123(v216, v34);
              __int16 v87 = v190;
LABEL_28:
              char v84 = v204;
              goto LABEL_5;
            }
            long long v194 = v123;
          }
          char v84 = v204;
          char v124 = dispatch thunk of static Equatable.== infix(_:_:)();
          v199(v118, v217, AssociatedTypeWitness);
          if (v124)
          {
            char v125 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v126 = v118;
            uint64_t v127 = *v218;
            (*v218)(v126, AssociatedTypeWitness);
            if (v125)
            {
              v127(v217, AssociatedTypeWitness);
              long long v189 = v127;
              uint64_t v128 = v194;
              v194(v216, v34);
              uint64_t v129 = v225;
              v128(v225, v34);
              v113(v129, v210, v34);
              uint64_t v130 = v213;
              v189(v213, AssociatedTypeWitness);
              v115(v130, v211, AssociatedTypeWitness);
              __int16 v87 = v190;
              char v61 = v205;
              uint64_t v51 = v176;
              break;
            }
          }
          else
          {
            uint64_t v131 = v118;
            uint64_t v127 = *v218;
            (*v218)(v131, AssociatedTypeWitness);
          }
          uint64_t v133 = v193;
          uint64_t v134 = v199;
          v199(v193, v213, AssociatedTypeWitness);
          char v135 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v136 = v173;
          v134(v173, v217, AssociatedTypeWitness);
          uint64_t v137 = v174;
          v134(v174, v133, AssociatedTypeWitness);
          if (v135) {
            char v138 = dispatch thunk of static Comparable.< infix(_:_:)();
          }
          else {
            char v138 = 0;
          }
          v127(v137, AssociatedTypeWitness);
          v127(v136, AssociatedTypeWitness);
          uint64_t v139 = v170;
          uint64_t v140 = v197;
          (*v182)(v170, v201, v197);
          if (v138)
          {
            long long v141 = v169;
            dispatch thunk of Collection.startIndex.getter();
            char v142 = dispatch thunk of static Comparable.> infix(_:_:)();
            v127(v141, AssociatedTypeWitness);
            (*v180)(v139, v140);
            uint64_t v143 = v172;
            uint64_t v144 = v171;
            uint64_t v51 = v176;
            if (v142) {
              dispatch thunk of BidirectionalCollection.formIndex(before:)();
            }
          }
          else
          {
            (*v180)(v139, v140);
            uint64_t v143 = v172;
            uint64_t v144 = v171;
            uint64_t v51 = v176;
          }
          uint64_t AssociatedTypeWitness = v178;
          char v145 = dispatch thunk of static Comparable.> infix(_:_:)();
          uint64_t v146 = v195;
          v195(v144, v216, v34);
          v146(v143, v210, v34);
          long long v189 = v127;
          if (v145)
          {
            uint64_t v147 = v144;
            char v148 = 1;
          }
          else
          {
            uint64_t v147 = v144;
            char v148 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
          }
          uint64_t v149 = v194;
          v194(v143, v34);
          v149(v147, v34);
          char v150 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v151 = v175;
          uint64_t v152 = v199;
          v199(v175, v211, AssociatedTypeWitness);
          uint64_t v153 = v179;
          v152(v179, v193, AssociatedTypeWitness);
          if (v150)
          {
            char v84 = v204;
            uint64_t v154 = v189;
            uint64_t v155 = v179;
            if (v148) {
              char v156 = dispatch thunk of static Comparable.<= infix(_:_:)();
            }
            else {
              char v156 = dispatch thunk of static Comparable.< infix(_:_:)();
            }
            char v157 = v156;
            v154(v155, AssociatedTypeWitness);
            uint64_t AssociatedTypeWitness = v178;
            v154(v151, v178);
            if (v157) {
              dispatch thunk of Collection.formIndex(after:)();
            }
          }
          else
          {
            uint64_t v154 = v189;
            v189(v153, AssociatedTypeWitness);
            v154(v151, AssociatedTypeWitness);
            char v84 = v204;
          }
          v154(v193, AssociatedTypeWitness);
          v154(v211, AssociatedTypeWitness);
          v154(v217, AssociatedTypeWitness);
          long long v158 = v194;
          v194(v210, v34);
          v158(v216, v34);
          char v61 = v205;
          __int16 v87 = v190;
          break;
        case 4:
          uint64_t v119 = v184;
          (*v206)(v184, v84, v51);
          BOOL v120 = &v119[*(int *)(TupleTypeMetadata2 + 48)];
          (*v209)(v87, v119, v34);
          uint64_t v121 = v187;
          (*(void (**)(char *, char *, uint64_t))v208)(v187, v120, AssociatedTypeWitness);
          if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
            && (dispatch thunk of static Comparable.<= infix(_:_:)() & 1) != 0)
          {
            dispatch thunk of Collection.formIndex(after:)();
          }
          (*v218)(v121, AssociatedTypeWitness);
          (*v219)(v87, v34);
          goto LABEL_5;
        case 3:
          uint64_t v97 = v84;
          unint64_t v98 = v183;
          (*v206)(v183, v97, v51);
          double v99 = &v98[*(int *)(TupleTypeMetadata2 + 48)];
          uint64_t v100 = v191;
          (*v209)(v191, v98, v34);
          uint64_t v101 = v192;
          (*(void (**)(char *, char *, uint64_t))v208)(v192, v99, AssociatedTypeWitness);
          if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
          {
            (*v218)(v101, AssociatedTypeWitness);
            (*v219)(v100, v34);
            goto LABEL_28;
          }
          char v102 = dispatch thunk of static Comparable.<= infix(_:_:)();
          Swift::Int v103 = v168;
          uint64_t v104 = v197;
          (*v182)(v168, v201, v197);
          if (v102)
          {
            uint64_t v105 = v169;
            dispatch thunk of Collection.startIndex.getter();
            LODWORD(v203) = dispatch thunk of static Comparable.> infix(_:_:)();
            double v106 = *v218;
            (*v218)(v105, AssociatedTypeWitness);
            (*v180)(v103, v104);
            char v84 = v204;
            if (v203) {
              dispatch thunk of BidirectionalCollection.formIndex(before:)();
            }
          }
          else
          {
            (*v180)(v103, v104);
            double v106 = *v218;
            char v84 = v204;
          }
          v106(v192, AssociatedTypeWitness);
          (*v219)(v191, v34);
LABEL_5:
          char v61 = v205;
          break;
      }
      (*(void (**)(char *, uint64_t))v214)(v84, v51);
      dispatch thunk of IteratorProtocol.next()();
      if (v220(v61, 1, v51) == 1) {
        break;
      }
      v215(v84, v61, v51);
    }
  }
  (*(void (**)(char *, uint64_t))(v162 + 8))(v223, v224);
  (*(void (**)(char *, uint64_t))(v166 + 8))(v201, v197);
  __int16 v88 = *(void (**)(char *, uint64_t))(v161 + 8);
  uint64_t v89 = TupleTypeMetadata2;
  v88(v159, TupleTypeMetadata2);
  char v90 = v160;
  uint64_t v91 = &v160[*(int *)(v89 + 48)];
  uint64_t v92 = v225;
  v195(v160, v225, v34);
  v199(v91, v213, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t))(v167 + 32))(v163, v90, v34);
  (*(void (**)(uint64_t, char *, uint64_t))(v177 + 32))(v164, v91, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v88)(v92, v89);
}

uint64_t outlined init with copy of StackItemsView(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>(uint64_t a1)
{
  uint64_t v4 = *(void **)(a1 + 160);
  char v3 = *(unsigned char *)(a1 + 168);
  char v5 = *(unsigned char *)(a1 + 184);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v7 = *(void *)(a1 + 216);
  uint64_t v8 = *(void *)(a1 + 208);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<UISceneSession?>.Content(v4, v3);
  outlined consume of Environment<Bool>.Content(v6, v5);
  swift_release();
  outlined consume of MultimodalCustomKeyboardActionKeyData?(v8, v7);
  swift_release();
  swift_release();
  return a1;
}

uint64_t initializeWithCopy for StackItemsView(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a2 + 464;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v22 = *(void *)(a2 + 16);
  uint64_t v23 = v4;
  uint64_t v20 = *(void *)(a2 + 32);
  uint64_t v21 = *(void *)(a2 + 24);
  uint64_t v18 = *(void *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 64);
  uint64_t v17 = *(void *)(a2 + 56);
  uint64_t v58 = *(void *)(a2 + 80);
  uint64_t v59 = *(void *)(a2 + 72);
  uint64_t v56 = *(void *)(a2 + 96);
  uint64_t v57 = *(void *)(a2 + 88);
  uint64_t v54 = *(void *)(a2 + 112);
  uint64_t v55 = *(void *)(a2 + 104);
  uint64_t v52 = *(void *)(a2 + 128);
  uint64_t v53 = *(void *)(a2 + 120);
  uint64_t v50 = *(void *)(a2 + 144);
  uint64_t v51 = *(void *)(a2 + 136);
  uint64_t v48 = *(void *)(a2 + 160);
  uint64_t v49 = *(void *)(a2 + 152);
  uint64_t v46 = *(void *)(a2 + 176);
  uint64_t v47 = *(void *)(a2 + 168);
  uint64_t v44 = *(void *)(a2 + 192);
  uint64_t v45 = *(void *)(a2 + 184);
  uint64_t v42 = *(void *)(a2 + 208);
  uint64_t v43 = *(void *)(a2 + 200);
  uint64_t v40 = *(void *)(a2 + 224);
  uint64_t v41 = *(void *)(a2 + 216);
  uint64_t v39 = *(void *)(a2 + 232);
  uint64_t v38 = *(void *)(a2 + 240);
  uint64_t v37 = *(void *)(a2 + 248);
  uint64_t v36 = *(void *)(a2 + 256);
  uint64_t v35 = *(void *)(a2 + 264);
  uint64_t v34 = *(void *)(a2 + 272);
  uint64_t v32 = *(void *)(a2 + 288);
  uint64_t v33 = *(void *)(a2 + 280);
  unint64_t v30 = *(void *)(a2 + 304);
  uint64_t v31 = *(void *)(a2 + 296);
  uint64_t v28 = *(void *)(a2 + 320);
  uint64_t v29 = *(void *)(a2 + 312);
  uint64_t v27 = *(void *)(a2 + 328);
  uint64_t v10 = *(void *)(a2 + 336);
  uint64_t v11 = *(void *)(a2 + 344);
  uint64_t v12 = *(void *)(a2 + 352);
  uint64_t v13 = *(void *)(a2 + 360);
  uint64_t v14 = *(void *)(a2 + 368);
  uint64_t v15 = *(void *)(a2 + 376);
  uint64_t v24 = *(void *)(a2 + 384);
  uint64_t v25 = *(void *)(a2 + 392);
  swift_bridgeObjectRetain();
  outlined copy of NavigationState.Base(v23, v22, v21, v20, v19, v18, v17, v16, v59, v58, v57, v56, v55, v54, v53, v52, v51, v50, v49,
    v48,
    v47,
    v46,
    v45,
    v44,
    v43,
    v42,
    v41,
    v40,
    v39,
    v38,
    v37,
    v36,
    v35,
    v34,
    v33,
    v32,
    v31,
    v30,
    v29);
  *(void *)(a1 + 8) = v23;
  *(void *)(a1 + 16) = v22;
  *(void *)(a1 + 24) = v21;
  *(void *)(a1 + 32) = v20;
  *(void *)(a1 + 40) = v19;
  *(void *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v17;
  *(void *)(a1 + 64) = v16;
  *(void *)(a1 + 72) = v59;
  *(void *)(a1 + 80) = v58;
  *(void *)(a1 + 88) = v57;
  *(void *)(a1 + 96) = v56;
  *(void *)(a1 + 104) = v55;
  *(void *)(a1 + 112) = v54;
  *(void *)(a1 + 120) = v53;
  *(void *)(a1 + 128) = v52;
  *(void *)(a1 + 136) = v51;
  *(void *)(a1 + 144) = v50;
  *(void *)(a1 + 152) = v49;
  *(void *)(a1 + 160) = v48;
  *(void *)(a1 + 168) = v47;
  *(void *)(a1 + 176) = v46;
  *(void *)(a1 + 184) = v45;
  *(void *)(a1 + 192) = v44;
  *(void *)(a1 + 200) = v43;
  *(void *)(a1 + 208) = v42;
  *(void *)(a1 + 216) = v41;
  *(void *)(a1 + 224) = v40;
  *(void *)(a1 + 232) = v39;
  *(void *)(a1 + 240) = v38;
  *(void *)(a1 + 248) = v37;
  *(void *)(a1 + 256) = v36;
  *(void *)(a1 + 264) = v35;
  *(void *)(a1 + 272) = v34;
  *(void *)(a1 + 280) = v33;
  *(void *)(a1 + 288) = v32;
  *(void *)(a1 + 296) = v31;
  *(void *)(a1 + 304) = v30;
  *(void *)(a1 + 312) = v29;
  *(void *)(a1 + 320) = v28;
  *(void *)(a1 + 328) = v27;
  *(void *)(a1 + 336) = v10;
  *(void *)(a1 + 344) = v11;
  *(void *)(a1 + 352) = v12;
  *(void *)(a1 + 360) = v13;
  *(void *)(a1 + 368) = v14;
  *(void *)(a1 + 376) = v15;
  *(void *)(a1 + 384) = v24;
  *(void *)(a1 + 392) = v25;
  swift_weakCopyInit();
  uint64_t v5 = *(void *)(a2 + 416);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = v5;
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 433) = *(_OWORD *)(a2 + 433);
  uint64_t v6 = *(void *)(a2 + 456);
  char v7 = *(unsigned char *)(a2 + 464);
  swift_retain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 456) = v6;
  *(unsigned char *)(a1 + 464) = v7;
  uint64_t v8 = *(void **)(a2 + 472);
  LOBYTE(v6) = *(unsigned char *)(v26 + 16);
  outlined copy of Environment<UISceneSession?>.Content(v8, v6);
  *(void *)(a1 + 472) = v8;
  *(unsigned char *)(a1 + 480) = v6;
  *(unsigned char *)(a1 + 488) = *(unsigned char *)(a2 + 488);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(unsigned char *)(a1 + 504) = *(unsigned char *)(a2 + 504);
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  *(unsigned char *)(a1 + 520) = *(unsigned char *)(a2 + 520);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t ShadowListUpdateRecorder.applyUpdates<A>(_:to:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v144 = a3;
  uint64_t v147 = a4;
  uint64_t v148 = a5;
  uint64_t v149 = a2;
  uint64_t v150 = a1;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v140 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  char v138 = *(void (***)(void, void, void))(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v134 = (char *)&v112 - v10;
  uint64_t v133 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v118 = (char *)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  unint64_t v132 = (char *)&v112 - v14;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v15 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t v16 = swift_getAssociatedTypeWitness();
  char v142 = *(char **)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v126 = (char *)&v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v131 = (char *)&v112 - v19;
  MEMORY[0x1F4188790](v20);
  uint64_t v137 = (char *)&v112 - v21;
  MEMORY[0x1F4188790](v22);
  char v125 = (char *)&v112 - v23;
  MEMORY[0x1F4188790](v24);
  uint64_t v117 = (char *)&v112 - v25;
  MEMORY[0x1F4188790](v26);
  char v122 = (char *)&v112 - v27;
  MEMORY[0x1F4188790](v28);
  long long v141 = (char *)&v112 - v29;
  swift_getAssociatedTypeWitness();
  uint64_t v139 = v8;
  swift_getAssociatedConformanceWitness();
  uint64_t v30 = swift_getAssociatedTypeWitness();
  uint64_t v130 = v15;
  uint64_t v135 = AssociatedTypeWitness;
  uint64_t v31 = swift_getAssociatedConformanceWitness();
  uint64_t v32 = swift_getAssociatedConformanceWitness();
  uint64_t v153 = v16;
  uint64_t v154 = v30;
  uint64_t v152 = v31;
  uint64_t v155 = v31;
  uint64_t v156 = v32;
  uint64_t v33 = type metadata accessor for ListUpdate();
  uint64_t v151 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33);
  uint64_t v136 = (char *)&v112 - v34;
  uint64_t v35 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v35 - 8);
  uint64_t v37 = (char *)&v112 - v36;
  uint64_t v38 = v147;
  uint64_t v39 = *(void *)(v147 - 8);
  MEMORY[0x1F4188790](v40);
  uint64_t v42 = (char *)&v112 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = swift_getAssociatedTypeWitness();
  uint64_t v112 = *(void *)(v43 - 8);
  double v44 = MEMORY[0x1F4188790](v43);
  uint64_t v46 = (char *)&v112 - v45;
  uint64_t v47 = (void (*)(char *, char *, uint64_t))*((void *)v142 + 2);
  char v124 = v142 + 16;
  uint64_t v123 = v47;
  ((void (*)(char *, char *, uint64_t, double))v47)(a6, v149, v16, v44);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v42, v150, v38);
  uint64_t v48 = v136;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v49 = a6;
  uint64_t v50 = swift_getAssociatedConformanceWitness();
  uint64_t v149 = v46;
  uint64_t v150 = v43;
  uint64_t v148 = v50;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v51 = v151;
  uint64_t v146 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v151 + 48);
  uint64_t v147 = v151 + 48;
  if (v146(v37, 1, v33) != 1)
  {
    uint64_t v53 = v51 + 32;
    char v145 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
    uint64_t v54 = v142;
    uint64_t v55 = (void (**)(char *, char *, uint64_t))(v142 + 32);
    uint64_t v129 = (void (**)(char *, uint64_t, uint64_t))(v133 + 16);
    uint64_t v128 = (void (**)(char *, uint64_t))(v133 + 8);
    uint64_t v56 = v140 + 56;
    uint64_t v57 = (void (**)(char *, uint64_t))(v138 + 1);
    uint64_t v58 = (void (**)(char *, uint64_t))(v142 + 8);
    uint64_t v151 = v53;
    BOOL v120 = (void (**)(char *, uint64_t))(v53 - 24);
    uint64_t v121 = v49;
    char v142 = v37;
    char v138 = (void (**)(void, void, void))(v54 + 32);
    uint64_t v127 = (void (**)(char *, uint64_t))(v54 + 8);
    uint64_t v116 = v33;
    uint64_t v119 = v57;
    uint64_t v133 = v140 + 56;
    v145(v48, v37, v33);
    while (1)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2) {
        break;
      }
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v70 = *v55;
        uint64_t v71 = v125;
        v70(v125, v48, v16);
        if (dispatch thunk of static Comparable.<= infix(_:_:)())
        {
          uint64_t v72 = v57;
          uint64_t v73 = v56;
          uint64_t v74 = v49;
          double v75 = v134;
          (*(void (**)(uint64_t))(v140 + 56))(v139);
          uint64_t v76 = v135;
          dispatch thunk of Collection.formIndex(after:)();
          uint64_t v77 = *v72;
          uint64_t v78 = v75;
          uint64_t v49 = v74;
          uint64_t v56 = v73;
          uint64_t v57 = v72;
          uint64_t v33 = v116;
          uint64_t v79 = v76;
          uint64_t v37 = v142;
          v77(v78, v79);
        }
        (*v58)(v71, v16);
        goto LABEL_31;
      }
      if (EnumCaseMultiPayload)
      {
        (*v120)(v48, v33);
        goto LABEL_5;
      }
      (*v55)(v141, v48, v16);
      char v60 = dispatch thunk of static Comparable.<= infix(_:_:)();
      char v61 = v132;
      (*v129)(v132, v143, v144);
      if (v60)
      {
        uint64_t v62 = v122;
        v123(v122, v49, v16);
        uint64_t v63 = v57;
        uint64_t v64 = v134;
        char v115 = *(void (**)(uint64_t))(v140 + 56);
        v115(v139);
        uint64_t v65 = v117;
        uint64_t v66 = v135;
        dispatch thunk of Collection.startIndex.getter();
        uint64_t v114 = *v63;
        v114(v64, v66);
        uint64_t v58 = v127;
        char v67 = dispatch thunk of static Comparable.> infix(_:_:)();
        uint64_t v68 = *v58;
        (*v58)(v65, v16);
        v68(v62, v16);
        (*v128)(v132, v144);
        if (v67)
        {
          ((void (*)(uint64_t, uint64_t))v115)(v139, v140);
          uint64_t v69 = v121;
          dispatch thunk of BidirectionalCollection.formIndex(before:)();
          v114(v64, v66);
          v68(v141, v16);
          uint64_t v49 = v69;
          uint64_t v48 = v136;
          uint64_t v37 = v142;
          uint64_t v55 = (void (**)(char *, char *, uint64_t))v138;
          uint64_t v57 = v63;
          uint64_t v56 = v133;
          goto LABEL_5;
        }
        uint64_t v49 = v121;
        uint64_t v48 = v136;
        uint64_t v55 = (void (**)(char *, char *, uint64_t))v138;
        uint64_t v57 = v63;
        uint64_t v56 = v133;
        v68(v141, v16);
      }
      else
      {
        (*v128)(v61, v144);
        (*v58)(v141, v16);
      }
      uint64_t v37 = v142;
LABEL_5:
      dispatch thunk of IteratorProtocol.next()();
      if (v146(v37, 1, v33) == 1) {
        return (*(uint64_t (**)(char *, uint64_t))(v112 + 8))(v149, v150);
      }
      v145(v48, v37, v33);
    }
    char v80 = &v48[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    uint64_t v81 = v49;
    char v82 = *v55;
    char v83 = v137;
    (*v55)(v137, v48, v16);
    char v84 = v131;
    v82(v131, v80, v16);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      uint64_t v58 = v127;
      uint64_t v85 = *v127;
      (*v127)(v83, v16);
      v85(v81, v16);
      v82(v81, v84, v16);
      uint64_t v48 = v136;
      uint64_t v37 = v142;
      uint64_t v57 = v119;
      uint64_t v49 = v81;
      uint64_t v56 = v133;
      goto LABEL_5;
    }
    uint64_t v86 = v126;
    __int16 v87 = v123;
    v123(v126, v81, v16);
    char v88 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v89 = v118;
    (*v129)(v118, v143, v144);
    if (v88)
    {
      v87(v122, v81, v16);
      char v90 = v134;
      uint64_t v56 = v133;
      char v115 = *(void (**)(uint64_t))(v140 + 56);
      v115(v139);
      uint64_t v91 = v117;
      uint64_t v92 = v135;
      dispatch thunk of Collection.startIndex.getter();
      uint64_t v57 = v119;
      unint64_t v93 = v90;
      uint64_t v86 = v126;
      uint64_t v114 = *v119;
      v114(v93, v92);
      uint64_t v94 = v122;
      char v95 = dispatch thunk of static Comparable.> infix(_:_:)();
      uint64_t v58 = v127;
      uint64_t v96 = *v127;
      (*v127)(v91, v16);
      v96(v94, v16);
      (*v128)(v118, v144);
      uint64_t v48 = v136;
      if (v95)
      {
        uint64_t v97 = v134;
        ((void (*)(uint64_t, uint64_t))v115)(v139, v140);
        uint64_t v98 = v135;
        dispatch thunk of BidirectionalCollection.formIndex(before:)();
        double v99 = v97;
        uint64_t v86 = v126;
        v114(v99, v98);
      }
    }
    else
    {
      (*v128)(v89, v144);
      uint64_t v48 = v136;
      uint64_t v56 = v133;
      uint64_t v57 = v119;
      uint64_t v58 = v127;
    }
    uint64_t v100 = v137;
    uint64_t v101 = v131;
    if (dispatch thunk of static Comparable.> infix(_:_:)())
    {
      if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0)
      {
LABEL_27:
        char v102 = *v58;
        (*v58)(v86, v16);
        v102(v101, v16);
        v102(v100, v16);
        uint64_t v49 = v121;
LABEL_30:
        uint64_t v37 = v142;
LABEL_31:
        uint64_t v55 = (void (**)(char *, char *, uint64_t))v138;
        goto LABEL_5;
      }
    }
    else if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
    {
      goto LABEL_27;
    }
    Swift::Int v103 = v134;
    (*(void (**)(uint64_t))(v140 + 56))(v139);
    uint64_t v104 = v57;
    uint64_t v105 = v56;
    double v106 = v121;
    char v107 = v101;
    uint64_t v108 = v135;
    dispatch thunk of Collection.formIndex(after:)();
    uint64_t v109 = *v104;
    uint64_t v110 = v103;
    uint64_t v49 = v106;
    uint64_t v56 = v105;
    uint64_t v57 = v104;
    uint64_t v33 = v116;
    v109(v110, v108);
    uint64_t v111 = *v58;
    (*v58)(v126, v16);
    v111(v107, v16);
    v111(v137, v16);
    goto LABEL_30;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v112 + 8))(v149, v150);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>();
    type metadata accessor for NavigationState.StackContent?(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled, MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StackItem and conformance StackItem()
{
  unint64_t result = lazy protocol witness table cache variable for type StackItem and conformance StackItem;
  if (!lazy protocol witness table cache variable for type StackItem and conformance StackItem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackItem and conformance StackItem);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StackItem and conformance StackItem;
  if (!lazy protocol witness table cache variable for type StackItem and conformance StackItem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackItem and conformance StackItem);
  }
  return result;
}

uint64_t outlined init with take of StackItemsView(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  memcpy((void *)(a2 + 8), (const void *)(a1 + 8), 0x188uLL);
  *(_OWORD *)(swift_weakTakeInit() + 8) = *(_OWORD *)(a1 + 408);
  long long v4 = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(a2 + 433) = *(_OWORD *)(a1 + 433);
  *(_OWORD *)(a2 + 424) = v4;
  uint64_t v5 = *(void *)(a1 + 456);
  *(unsigned char *)(a2 + 464) = *(unsigned char *)(a1 + 464);
  *(void *)(a2 + 456) = v5;
  uint64_t v6 = *(void *)(a1 + 472);
  *(unsigned char *)(a2 + 480) = *(unsigned char *)(a1 + 480);
  *(void *)(a2 + 472) = v6;
  *(_OWORD *)(a2 + 488) = *(_OWORD *)(a1 + 488);
  *(_OWORD *)(a2 + 504) = *(_OWORD *)(a1 + 504);
  *(_OWORD *)(a2 + 520) = *(_OWORD *)(a1 + 520);
  *(_OWORD *)(a2 + 536) = *(_OWORD *)(a1 + 536);
  return a2;
}

void storeEnumTagSinglePayload for PrintedViewModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 >= a2)
  {
    switch(v13)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_39:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 < 0xFE)
          {
            a1[v9] = a2 + 1;
          }
          else
          {
            uint64_t v18 = *(void (**)(void))(v6 + 56);
            v18();
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns;
  if (!lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns;
  if (!lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns;
  if (!lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns);
  }
  return result;
}

uint64_t outlined init with take of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t key path setter for _GeometryActionModifier.action : <A>_GeometryActionModifier<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a4 + a3;
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(v8 - 16);
  *(void *)(v11 + 32) = v10;
  *(void *)(v11 + 40) = v9;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = a6;
  *(void *)(a2 + 24) = v11;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in DocumentIntroHelper.ShapeStyleView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void storeEnumTagSinglePayload for HelpView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 <= v8)
  {
    switch(v14)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 3:
LABEL_43:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_32;
      default:
LABEL_32:
        if (a2)
        {
LABEL_33:
          if (v7 < 0x7FFFFFFF)
          {
            uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
            if ((a2 & 0x80000000) != 0)
            {
              void v18[2] = 0;
              v18[3] = 0;
              *uint64_t v18 = a2 ^ 0x80000000;
              v18[1] = 0;
            }
            else
            {
              v18[3] = a2 - 1;
            }
          }
          else
          {
            int v17 = *(void (**)(void))(v6 + 56);
            v17();
          }
        }
        break;
    }
  }
  else
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 32);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t NestedDynamicProperties.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t FocusState.Binding.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t destroy for NavigationSplitCore(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 56);

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 112);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_weakDestroy();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (*(void *)(a1 + 288))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 264);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetContentMarginModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ResetContentMarginModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ResetContentMarginModifier()
{
  lazy protocol witness table accessor for type ResetContentMarginModifier and conformance ResetContentMarginModifier();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

unint64_t lazy protocol witness table accessor for type ResetContentMarginModifier and conformance ResetContentMarginModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ResetContentMarginModifier and conformance ResetContentMarginModifier;
  if (!lazy protocol witness table cache variable for type ResetContentMarginModifier and conformance ResetContentMarginModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResetContentMarginModifier and conformance ResetContentMarginModifier);
  }
  return result;
}

uint64_t static ForEach.makeWithKeyPath(_:id:content:)(uint64_t a1, uint64_t a2)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v7[1] = a2;
  swift_retain();
  swift_retain();
  return ForEach.init(_:idGenerator:content:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance StaticSourceWriter<A, B>(long long *a1, uint64_t (*a2)(long long *))
{
  return static StaticSourceWriter._viewListCount(inputs:body:)(a1, a2);
}

uint64_t static StaticSourceWriter._viewListCount(inputs:body:)(long long *a1, uint64_t (*a2)(long long *))
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 3);
  long long v10 = *a1;
  unsigned int v11 = v3;
  uint64_t v12 = v4;
  type metadata accessor for SourceFormula();
  type metadata accessor for SourceInput();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  _ViewListCountInputs.append<A, B>(_:to:)();
  long long v7 = v10;
  uint64_t v8 = v11;
  uint64_t v9 = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = a2(&v7);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return v5;
}

uint64_t type metadata completion function for BridgedListState.CommitMutation()
{
  uint64_t result = type metadata accessor for BridgedListState(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)(char a1, void (*a2)(void, double), uint64_t a3, unsigned char *a4)
{
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v58 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation(0);
  uint64_t v10 = *(void *)(updated - 8);
  double v11 = MEMORY[0x1F4188790](updated);
  unsigned int v13 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    a2(a1 & 1, v11);
  }
  int v14 = *(_DWORD *)&a4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates];
  BOOL v15 = v14 != 0;
  int v16 = v14 - 1;
  if (!v15)
  {
    __break(1u);
    return;
  }
  *(_DWORD *)&a4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates] = v16;
  if (!v16 && a4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingGraphUpdate] == 1) {
    specialized UpdateCoalescingCollectionView.updateGraphState(isAnimatingScrollOverride:)();
  }
  int v17 = &a4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_postUpdateInvalidations];
  swift_beginAccess();
  uint64_t v18 = a4;
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = specialized _ArrayProtocol.filter(_:)(v19, v18);
  uint64_t v21 = v18;
  swift_bridgeObjectRelease();

  void *v17 = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(v20 + 16);
  if (v22)
  {
    uint64_t v51 = v18;
    id v23 = objc_msgSend(v18, sel_collectionViewLayout);
    ObjCClassFromObject = (void *)swift_getObjCClassFromObject();

    objc_msgSend(ObjCClassFromObject, sel_invalidationContextClass);
    swift_getObjCClassMetadata();
    type metadata accessor for UICollectionViewLayoutInvalidationContext();
    swift_dynamicCastMetatypeUnconditional();
    id v57 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    unint64_t v25 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v50[1] = v20;
    uint64_t v26 = v20 + v25;
    uint64_t v27 = *(void *)(v10 + 72);
    uint64_t v54 = v58 + 16;
    uint64_t v55 = v58 + 32;
    uint64_t v28 = (void (**)(char *, uint64_t))(v58 + 8);
    long long v53 = xmmword_18834BB80;
    uint64_t v52 = v27;
    do
    {
      outlined init with copy of UpdateCoalescingCollectionView.UpdateInvalidation(v26, (uint64_t)v13, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for (IndexPath, String)();
        uint64_t v34 = &v13[*(int *)(v33 + 48)];
        uint64_t v35 = *(void *)v34;
        uint64_t v36 = *((void *)v34 + 1);
        uint64_t v37 = v58;
        (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v9, v13, v7);
        uint64_t v38 = (void *)MEMORY[0x18C115780](v35, v36);
        swift_bridgeObjectRelease();
        _s10Foundation9IndexPathVSgMaTm_2(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBBE00]);
        unint64_t v39 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
        uint64_t v40 = swift_allocObject();
        *(_OWORD *)(v40 + 16) = v53;
        (*(void (**)(unint64_t, char *, uint64_t))(v37 + 16))(v40 + v39, v9, v7);
        v32.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        uint64_t v27 = v52;
        swift_bridgeObjectRelease();
        objc_msgSend(v57, sel_invalidateSupplementaryElementsOfKind_atIndexPaths_, v38, v32.super.isa);
      }
      else
      {
        uint64_t v29 = v58;
        (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v9, v13, v7);
        _s10Foundation9IndexPathVSgMaTm_2(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBBE00]);
        unint64_t v30 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
        uint64_t v31 = swift_allocObject();
        *(_OWORD *)(v31 + 16) = v53;
        (*(void (**)(unint64_t, char *, uint64_t))(v29 + 16))(v31 + v30, v9, v7);
        v32.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v57, sel_invalidateItemsAtIndexPaths_, v32.super.isa);
      }

      (*v28)(v9, v7);
      v26 += v27;
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease();
    uint64_t v41 = self;
    uint64_t v42 = swift_allocObject();
    uint64_t v21 = v51;
    id v43 = v57;
    *(void *)(v42 + 16) = v51;
    *(void *)(v42 + 24) = v43;
    uint64_t v44 = swift_allocObject();
    uint64_t v45 = partial apply for closure #2 in closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:);
    *(void *)(v44 + 16) = partial apply for closure #2 in closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:);
    *(void *)(v44 + 24) = v42;
    aBlock[4] = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
    aBlock[5] = v44;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_75_0;
    uint64_t v46 = _Block_copy(aBlock);
    uint64_t v47 = v21;
    id v48 = v43;
    swift_retain();
    swift_release();
    objc_msgSend(v41, sel_performWithoutAnimation_, v46);

    _Block_release(v46);
    LOBYTE(v46) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v46 & 1) == 0) {
      goto LABEL_17;
    }
    __break(1u);
  }
  swift_bridgeObjectRelease();
  uint64_t v45 = 0;
LABEL_17:
  v21[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_visibleCellsUpdate] = 0;
  uint64_t v49 = &v21[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_cachedIdealSize];
  *(void *)uint64_t v49 = 0;
  *((void *)v49 + 1) = 0;
  unsigned char v49[16] = 1;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v45);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ()(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

void partial apply for closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(uint64_t a1)
{
  closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(a1, *(UIView **)(v1 + 16), *(void **)(v1 + 24), *(unsigned char *)(v1 + 32), *(unsigned char *)(v1 + 33));
}

void closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(uint64_t a1, UIView *a2, void *a3, char a4, char a5)
{
  uint64_t v9 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v10 = (int *)type metadata accessor for ListCoreBatchUpdates();
  uint64_t v11 = *((void *)v10 - 1);
  double v12 = MEMORY[0x1F4188790](v10);
  int v14 = (char *)&v18 - v13;
  BOOL v15 = [(UIView *)a2 window];
  if (v15)
  {

    int v16 = (char *)a3 + *(void *)((*v9 & *a3) + 0xB0);
    swift_beginAccess();
    (*(void (**)(char *, char *, int *))(v11 + 16))(v14, v16, v10);
    LOBYTE(v16) = ListCoreBatchUpdates.isEmpty.getter(v10);
    uint64_t v17 = (*(uint64_t (**)(char *, int *))(v11 + 8))(v14, v10);
    if (v16)
    {
      UICollectionViewListCoordinatorBase.updateEditingState(_:)(a2);
      UICollectionViewListCoordinatorBase.enqueueLayoutInvalidationIfNeeded(_:)(a2);
      UICollectionViewListCoordinatorBase.updateListContents(_:)(a2);
    }
    else
    {
      MEMORY[0x1F4188790](v17);
      *((unsigned char *)&v18 - 32) = a4 & 1;
      *(&v18 - 3) = (uint64_t)a3;
      *(&v18 - 2) = (uint64_t)a2;
      *((unsigned char *)&v18 - 8) = a5 & 1;
      static Update.ensure<A>(_:)();
    }
  }
  else
  {
    *((unsigned char *)a3 + *(void *)((*v9 & *a3) + 0xD0)) = 0;
  }
}

id UICollectionViewListCoordinatorBase.updateEditingState(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v70 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v63 = type metadata accessor for Optional();
  uint64_t v62 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v65 = (char *)v60 - v6;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v64 = (char *)v60 - v9;
  _s10Foundation9IndexPathVSgMaTm_1(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10 - 8);
  char v67 = (char *)v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  int v14 = (char *)v60 - v13;
  uint64_t v15 = type metadata accessor for IndexPath();
  uint64_t v73 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v72 = (char *)v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v4 + 104);
  uint64_t v69 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v68 = (char *)v60 - v19;
  uint64_t v20 = type metadata accessor for Binding();
  uint64_t v74 = *(void *)(v20 - 8);
  double v21 = MEMORY[0x1F4188790](v20);
  uint64_t v71 = (char *)v60 - v22;
  id v23 = objc_msgSend(a1, sel_indexPathsForSelectedItems, v21);
  uint64_t v66 = v7;
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v25 = 0;
  }
  unsigned int v26 = objc_msgSend(a1, sel_isEditing);
  UICollectionViewListCoordinatorBase.resolvedEditMode.getter(v75);
  int v27 = v75[0];
  id result = objc_msgSend(a1, sel_setEditing_, v75[0] != 0);
  if (v26)
  {
    id result = (id)swift_bridgeObjectRelease();
    if (!v27)
    {
      uint64_t v29 = (void *)MEMORY[0x1E4FBC8C8];
      unint64_t v30 = (char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x100);
      swift_beginAccess();
      uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
      v60[1] = v74 + 48;
      v60[0] = v31;
      if (!v31(v30, 1, v20))
      {
        NSArray v32 = v71;
        (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v71, v30, v20);
        char v61 = v30;
        uint64_t v33 = v68;
        MEMORY[0x18C113DA0](v20);
        (*(void (**)(uint64_t))(*(void *)(v70 + 120) + 48))(v17);
        specialized Binding.wrappedValue.setter();
        uint64_t v29 = (void *)MEMORY[0x1E4FBC8C8];
        uint64_t v34 = v33;
        unint64_t v30 = v61;
        (*(void (**)(char *, uint64_t))(v69 + 8))(v34, v17);
        (*(void (**)(char *, uint64_t))(v74 + 8))(v32, v20);
      }
      uint64_t v35 = (uint64_t)v2 + *(void *)((*v29 & *v2) + 0xD8);
      swift_beginAccess();
      outlined init with copy of IndexPath?(v35, (uint64_t)v14);
      uint64_t v36 = v73;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v14, 1, v15) == 1)
      {
        return (id)_s10Foundation9IndexPathVSgWOhTm_0((uint64_t)v14, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
      }
      else
      {
        char v61 = v30;
        uint64_t v42 = (uint64_t)v72;
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v72, v14, v15);
        type metadata accessor for UpdateCoalescingCollectionView(0);
        uint64_t v43 = swift_dynamicCastClass();
        if (v43)
        {
          uint64_t v44 = v43;
          uint64_t v45 = a1;
          uint64_t v46 = (uint64_t)v65;
          UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)(v42, (uint64_t)v65);
          uint64_t v47 = v66;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v46, 1, AssociatedTypeWitness) == 1)
          {
            (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v46, v63);
          }
          else
          {
            id v48 = v64;
            (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v64, v46, AssociatedTypeWitness);
            uint64_t v49 = v61;
            swift_beginAccess();
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v60[0])(v49, 1, v20))
            {
              (*(void (**)(char *, uint64_t))(v47 + 8))(v48, AssociatedTypeWitness);
              swift_endAccess();
            }
            else
            {
              uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
              uint64_t v65 = v45;
              v50(v71, v49, v20);
              swift_endAccess();
              uint64_t v51 = v68;
              MEMORY[0x18C113DA0](v20);
              (*(void (**)(char *, uint64_t))(*(void *)(v70 + 120) + 32))(v48, v17);
              uint64_t v52 = v71;
              specialized Binding.wrappedValue.setter();
              (*(void (**)(char *, uint64_t))(v69 + 8))(v51, v17);
              uint64_t v45 = v65;
              (*(void (**)(char *, uint64_t))(v74 + 8))(v52, v20);
              (*(void (**)(char *, uint64_t))(v47 + 8))(v64, AssociatedTypeWitness);
            }
          }
          uint64_t v54 = v72;
          uint64_t v53 = v73;
          uint64_t v55 = (uint64_t)v67;
          (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v67, v72, v15);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56))(v55, 0, 1, v15);
          uint64_t v56 = v44 + OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingDeselectedItem;
          swift_beginAccess();
          outlined assign with take of IndexPath?(v55, v56);
          swift_endAccess();
          uint64_t v57 = swift_allocObject();
          *(void *)(v57 + 16) = v44;
          *(void *)(v57 + 24) = v2;
          uint64_t v58 = v45;
          uint64_t v59 = v2;
          onNextMainRunLoop(do:)();

          swift_release();
          return (id)(*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v54, v15);
        }
        else
        {
          return (id)(*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8))(v42, v15);
        }
      }
    }
  }
  else if (v27)
  {
    if (v25)
    {
      uint64_t v37 = *(void *)(v25 + 16);
      id result = (id)swift_bridgeObjectRelease();
      if (v37 == 1)
      {
        uint64_t v38 = (char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x100);
        swift_beginAccess();
        id result = (id)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48))(v38, 1, v20);
        if (!result)
        {
          uint64_t v39 = v74;
          uint64_t v40 = v71;
          (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v71, v38, v20);
          uint64_t v41 = v68;
          MEMORY[0x18C113DA0](v20);
          (*(void (**)(uint64_t))(*(void *)(v70 + 120) + 48))(v17);
          specialized Binding.wrappedValue.setter();
          (*(void (**)(char *, uint64_t))(v69 + 8))(v41, v17);
          return (id)(*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v40, v20);
        }
      }
    }
  }
  else
  {
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

void partial apply for closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)(char a1)
{
  closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)(a1, *(void (**)(void, double))(v1 + 16), *(void *)(v1 + 24), *(unsigned char **)(v1 + 32));
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(char a1)
{
  return thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, a1 & 1);
}

BOOL ListScrollable.scroll<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v33 = *(void *)(v10 - 8);
  uint64_t v34 = (char *)v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v32 - v11;
  type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v32 - v14;
  uint64_t v16 = type metadata accessor for IndexPath();
  uint64_t v35 = *(void *)(v16 - 8);
  uint64_t v36 = v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = a2;
  uint64_t v37 = v4;
  ListScrollable.dataSource.getter(a2, (uint64_t)v12);
  uint64_t v20 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v12, 1, v9) == 1)
  {
    (*(void (**)(char *, char *))(v33 + 8))(v12, v34);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56))(v15, 1, 1, v36);
    uint64_t v21 = v19;
  }
  else
  {
    uint64_t v34 = v18;
    uint64_t v22 = v19;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 + 24) + 120))(a1, a3, a4, v9);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v12, v9);
    uint64_t v23 = v35;
    uint64_t v24 = v36;
    uint64_t v21 = v22;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v15, 1, v36) != 1)
    {
      uint64_t v30 = (uint64_t)v34;
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v34, v15, v24);
      BOOL v29 = ListScrollable.scrollToIndex(_:)(v30, v22);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v30, v24);
      return v29;
    }
  }
  _s7SwiftUI12TableRowListVSgWOhTm_0((uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], (uint64_t (*)(void))type metadata accessor for BridgedListState.ScrollTarget?);
  uint64_t v25 = ListScrollable.children.getter();
  if (!v25) {
    return 0;
  }
  BOOL v38 = 0;
  uint64_t v26 = *(void *)(v25 + 16);
  if (!v26)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v27 = v25 + 32;
  uint64_t v28 = *(void *)(v21 + 24);
  do
  {
    closure #1 in ListScrollable.scroll<A>(to:)(&v38, v27, a1, v9, a3, v28, a4);
    v27 += 40;
    --v26;
  }
  while (v26);
  swift_bridgeObjectRelease();
  return v38;
}

Swift::Void __swiftcall UpdateCoalescingCollectionView.safeAreaInsetsDidChange()()
{
  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for UpdateCoalescingCollectionView(0);
  objc_msgSendSuper2(&v7, sel_safeAreaInsetsDidChange);
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates;
  int v2 = *(_DWORD *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates];
  BOOL v3 = __CFADD__(v2, 1);
  int v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  *(_DWORD *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates] = v4;
  specialized UpdateCoalescingCollectionView.updateGraphState(isAnimatingScrollOverride:)();
  int v5 = *(_DWORD *)&v0[v1];
  BOOL v3 = v5 != 0;
  int v6 = v5 - 1;
  if (!v3) {
    goto LABEL_9;
  }
  *(_DWORD *)&v0[v1] = v6;
  if (!v6 && v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingGraphUpdate] == 1) {
    specialized UpdateCoalescingCollectionView.updateGraphState(isAnimatingScrollOverride:)();
  }
}

uint64_t UpdateCoalescingCollectionView.bounds.setter(double a1, double a2, double a3, double a4)
{
  uint64_t updated = (objc_class *)type metadata accessor for UpdateCoalescingCollectionView(0);
  v30.receiver = v4;
  v30.super_class = updated;
  objc_msgSendSuper2(&v30, sel_bounds);
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  CGFloat v15 = v14;
  CGFloat v17 = v16;
  v29.receiver = v4;
  v29.super_class = updated;
  uint64_t result = (uint64_t)objc_msgSendSuper2(&v29, sel_setBounds_, a1, a2, a3, a4);
  uint64_t v19 = OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates;
  int v20 = *(_DWORD *)&v4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates];
  BOOL v21 = __CFADD__(v20, 1);
  int v22 = v20 + 1;
  if (v21)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  *(_DWORD *)&v4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates] = v22;
  objc_msgSend(v4, sel_bounds);
  v32.origin.double x = v23;
  v32.origin.double y = v24;
  v32.size.double width = v25;
  v32.size.double height = v26;
  v31.origin.double x = v11;
  v31.origin.double y = v13;
  v31.size.double width = v15;
  v31.size.double height = v17;
  uint64_t result = CGRectEqualToRect(v31, v32);
  if ((result & 1) == 0) {
    uint64_t result = specialized UpdateCoalescingCollectionView.updateGraphState(isAnimatingScrollOverride:)();
  }
  int v27 = *(_DWORD *)&v4[v19];
  BOOL v21 = v27 != 0;
  int v28 = v27 - 1;
  if (!v21) {
    goto LABEL_11;
  }
  *(_DWORD *)&v4[v19] = v28;
  if (!v28 && v4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingGraphUpdate] == 1) {
    return specialized UpdateCoalescingCollectionView.updateGraphState(isAnimatingScrollOverride:)();
  }
  return result;
}

void *assignWithCopy for BridgedListState(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  objc_super v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for BridgedListState.ScrollTarget(0);
  uint64_t v10 = *(void *)(v9 - 8);
  CGFloat v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      uint64_t v30 = type metadata accessor for IndexPath();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v30 - 8) + 24))(v7, v8, v30);
      uint64_t v31 = *(int *)(v9 + 20);
      CGRect v32 = &v7[v31];
      uint64_t v33 = &v8[v31];
      long long v34 = *(_OWORD *)v33;
      v32[16] = v33[16];
      *(_OWORD *)CGRect v32 = v34;
      v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
      goto LABEL_7;
    }
    outlined destroy of BridgedListState.ScrollTarget((uint64_t)v7, type metadata accessor for BridgedListState.ScrollTarget);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
    memcpy(v7, v8, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v14 = type metadata accessor for IndexPath();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 16))(v7, v8, v14);
  uint64_t v15 = *(int *)(v9 + 20);
  double v16 = &v7[v15];
  CGFloat v17 = &v8[v15];
  long long v18 = *(_OWORD *)v17;
  unsigned char v16[16] = v17[16];
  *(_OWORD *)double v16 = v18;
  v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v20 = a3[6];
  BOOL v21 = (char *)a1 + v20;
  int v22 = (char *)a2 + v20;
  long long v23 = *(_OWORD *)v22;
  long long v24 = *((_OWORD *)v22 + 1);
  long long v25 = *((_OWORD *)v22 + 3);
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  *((_OWORD *)v21 + 3) = v25;
  *(_OWORD *)BOOL v21 = v23;
  *((_OWORD *)v21 + 1) = v24;
  long long v26 = *((_OWORD *)v22 + 4);
  long long v27 = *((_OWORD *)v22 + 5);
  long long v28 = *((_OWORD *)v22 + 6);
  v21[112] = v22[112];
  *((_OWORD *)v21 + 5) = v27;
  *((_OWORD *)v21 + 6) = v28;
  *((_OWORD *)v21 + 4) = v26;
  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  return a1;
}

Swift::Void __swiftcall UpdateBridgedState.updateValue()()
{
  uint64_t v1 = v0;
  Outputuint64_t Value = AGGraphGetOutputValue();
  if (!OutputValue
    || (BOOL v3 = (_DWORD *)OutputValue,
        uint64_t v4 = type metadata accessor for BridgedListState(0),
        *(_DWORD *)(AGGraphGetValue() + *(int *)(v4 + 28)) != *v3))
  {
    AGGraphClearUpdate();
    uint64_t v5 = MEMORY[0x18C119DF0](v1 + 8);
    if (v5)
    {
      uint64_t v6 = (void *)v5;
      *(void *)(v5 + OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_bridgedState) = AGCreateWeakAttribute();
      UpdateCoalescingCollectionView.updateContent()();
    }
    AGGraphSetUpdate();
    type metadata accessor for BridgedListState(0);
    AGGraphGetValue();
    AGGraphSetOutputValue();
  }
}

void *protocol witness for GraphMutation.apply() in conformance BridgedListState.CommitMutation()
{
  unsigned int Attribute = AGWeakAttributeGetAttribute();
  BOOL v2 = Attribute == *MEMORY[0x1E4F4E7A0];
  if (Attribute == *MEMORY[0x1E4F4E7A0]) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = Attribute;
  }
  v5[2] = v0;
  BOOL v6 = v2;
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF14AttributeGraph0C0Vy7SwiftUI16BridgedListStateVG_s5NeverOytTg5((void *(*)(uint64_t *__return_ptr, int *))partial apply for closure #1 in BridgedListState.CommitMutation.apply(), (uint64_t)v5, v3 | ((unint64_t)v2 << 32));
}

void *_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF14AttributeGraph0C0Vy7SwiftUI16BridgedListStateVG_s5NeverOytTg5(void *(*a1)(uint64_t *__return_ptr, int *), uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x100000000) != 0) {
    return (void *)((a3 & 0x100000000uLL) >> 32);
  }
  int v6 = a3;
  uint64_t result = a1(&v7, &v6);
  if (!v3) {
    return (void *)((a3 & 0x100000000uLL) >> 32);
  }
  return result;
}

uint64_t partial apply for closure #1 in BridgedListState.CommitMutation.apply()(uint64_t a1)
{
  return closure #1 in BridgedListState.CommitMutation.apply()(a1, *(void *)(v1 + 16));
}

uint64_t closure #1 in BridgedListState.CommitMutation.apply()(uint64_t a1, uint64_t a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = type metadata accessor for BridgedListState(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for BridgedListState.CommitMutation(0);
  outlined init with copy of BridgedListState(a2 + *(int *)(v6 + 20), (uint64_t)v5);
  AGGraphSetValue();
  return outlined destroy of BridgedListState.ScrollTarget((uint64_t)v5, type metadata accessor for BridgedListState);
}

Swift::Void __swiftcall UpdateCoalescingCollectionView.layoutSubviews()()
{
  v14.receiver = v0;
  v14.super_class = (Class)type metadata accessor for UpdateCoalescingCollectionView(0);
  objc_msgSendSuper2(&v14, sel_layoutSubviews);
  uint64_t v1 = 0;
  BOOL v2 = &v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_visibleCellsUpdate];
  if ((v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_visibleCellsUpdate] & 1) == 0) {
    goto LABEL_8;
  }
  if (!objc_msgSend(v0, sel_dataSource))
  {
    uint64_t v1 = 0;
    goto LABEL_8;
  }
  swift_unknownObjectRelease();
  uint64_t v3 = *((void *)v2 + 1);
  BOOL v4 = __OFADD__(v3, 1);
  uint64_t v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  *((void *)v2 + 1) = v5;
  uint64_t v6 = self;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v0;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = partial apply for closure #1 in UpdateCoalescingCollectionView.layoutSubviews();
  *(void *)(v8 + 24) = v7;
  v13[4] = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
  v13[5] = v8;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1107296256;
  _OWORD v13[2] = thunk for @escaping @callee_guaranteed () -> ();
  v13[3] = &block_descriptor_95_0;
  uint64_t v9 = _Block_copy(v13);
  uint64_t v10 = v0;
  swift_retain();
  swift_release();
  objc_msgSend((id)v6, sel_performWithoutAnimation_, v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v6)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v11 = *((void *)v2 + 1);
  BOOL v4 = __OFSUB__(v11, 1);
  uint64_t v12 = v11 - 1;
  if (!v4)
  {
    *((void *)v2 + 1) = v12;
    uint64_t v1 = partial apply for closure #1 in UpdateCoalescingCollectionView.layoutSubviews();
LABEL_8:
    UpdateCoalescingCollectionView.updateContent()();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v1);
    return;
  }
LABEL_11:
  __break(1u);
}

uint64_t UpdateCoalescingCollectionView.updateContent()()
{
  uint64_t v1 = v0;
  BOOL v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s10Foundation9IndexPathVSgMaTm_2(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, type metadata accessor for BridgedListState.ScrollTarget, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v26[-v4];
  uint64_t v6 = type metadata accessor for BridgedListState.ScrollTarget(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  _s10Foundation9IndexPathVSgMaTm_2(0, &lazy cache variable for type metadata for BridgedListState?, type metadata accessor for BridgedListState, v2);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = &v26[-v11];
  uint64_t v13 = type metadata accessor for BridgedListState(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  double v16 = &v26[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v27 = v1;
  static Update.ensure<A>(_:)();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    CGFloat v17 = &lazy cache variable for type metadata for BridgedListState?;
    long long v18 = type metadata accessor for BridgedListState;
    uint64_t v19 = (uint64_t)v12;
LABEL_7:
    uint64_t result = _s10Foundation9IndexPathVSgWOhTm_1(v19, v17, v18);
LABEL_18:
    char v23 = 0;
    goto LABEL_19;
  }
  outlined init with take of UpdateCoalescingCollectionView.UpdateInvalidation((uint64_t)v12, (uint64_t)v16, type metadata accessor for BridgedListState);
  uint64_t v20 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView__lastUpdateSeed];
  swift_beginAccess();
  int v21 = *(_DWORD *)&v16[*(int *)(v13 + 28)];
  if (*(_DWORD *)(v20 + 16) == v21
    && v1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingScrollTarget] != 1)
  {
LABEL_17:
    uint64_t result = outlined destroy of UpdateCoalescingCollectionView.UpdateInvalidation((uint64_t)v16, type metadata accessor for BridgedListState);
    goto LABEL_18;
  }
  *(_DWORD *)(v20 + 16) = v21;
  outlined init with copy of BridgedListState.ScrollTarget?((uint64_t)&v16[*(int *)(v13 + 20)], (uint64_t)v5);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of UpdateCoalescingCollectionView.UpdateInvalidation((uint64_t)v16, type metadata accessor for BridgedListState);
    CGFloat v17 = &lazy cache variable for type metadata for BridgedListState.ScrollTarget?;
    long long v18 = type metadata accessor for BridgedListState.ScrollTarget;
    uint64_t v19 = (uint64_t)v5;
    goto LABEL_7;
  }
  outlined init with take of UpdateCoalescingCollectionView.UpdateInvalidation((uint64_t)v5, (uint64_t)v9, type metadata accessor for BridgedListState.ScrollTarget);
  objc_msgSend(v1, sel_bounds);
  v29.origin.double x = 0.0;
  v29.origin.double y = 0.0;
  v29.size.double width = 0.0;
  v29.size.double height = 0.0;
  if (!CGRectEqualToRect(v28, v29))
  {
    v24.super.Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    if (v9[*(int *)(v6 + 20) + 16])
    {
      uint64_t v25 = 0;
    }
    else
    {
      static UnitPoint.bottom.getter();
      if ((static UnitPoint.== infix(_:_:)() & 1) != 0
        || (static UnitPoint.bottomLeading.getter(), (static UnitPoint.== infix(_:_:)() & 1) != 0)
        || (static UnitPoint.bottomTrailing.getter(), (static UnitPoint.== infix(_:_:)() & 1) != 0))
      {
        uint64_t v25 = 4;
      }
      else
      {
        static UnitPoint.top.getter();
        if ((static UnitPoint.== infix(_:_:)() & 1) != 0
          || (static UnitPoint.topLeading.getter(), (static UnitPoint.== infix(_:_:)() & 1) != 0))
        {
          uint64_t v25 = 1;
        }
        else
        {
          static UnitPoint.topTrailing.getter();
          if (static UnitPoint.== infix(_:_:)()) {
            uint64_t v25 = 1;
          }
          else {
            uint64_t v25 = 2;
          }
        }
      }
    }
    objc_msgSend(v1, sel_scrollToItemAtIndexPath_atScrollPosition_animated_, v24.super.isa, v25, v9[*(int *)(v6 + 24)]);

    outlined destroy of UpdateCoalescingCollectionView.UpdateInvalidation((uint64_t)v9, type metadata accessor for BridgedListState.ScrollTarget);
    goto LABEL_17;
  }
  outlined destroy of UpdateCoalescingCollectionView.UpdateInvalidation((uint64_t)v9, type metadata accessor for BridgedListState.ScrollTarget);
  uint64_t result = outlined destroy of UpdateCoalescingCollectionView.UpdateInvalidation((uint64_t)v16, type metadata accessor for BridgedListState);
  char v23 = 1;
LABEL_19:
  v1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingScrollTarget] = v23;
  return result;
}

uint64_t partial apply for closure #1 in UpdateCoalescingCollectionView.updateGraphState(isAnimatingScrollOverride:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in UpdateCoalescingCollectionView.updateContent()(a1);
}

uint64_t partial apply for closure #1 in UpdateCoalescingCollectionView.updateContent()@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in UpdateCoalescingCollectionView.updateContent()(a1);
}

uint64_t closure #1 in UpdateCoalescingCollectionView.updateContent()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for BridgedListState(0);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of UpdateCoalescingCollectionView.UpdateInvalidation(WeakValue, a1, type metadata accessor for BridgedListState);
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, v4, 1, v2);
}

uint64_t outlined init with copy of UpdateCoalescingCollectionView.UpdateInvalidation(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t storeEnumTagSinglePayload for BridgedListState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187C2F1B0);
}

uint64_t specialized UpdateCoalescingCollectionView.updateGraphState(isAnimatingScrollOverride:)()
{
  uint64_t v1 = v0;
  _s10Foundation9IndexPathVSgMaTm_2(0, &lazy cache variable for type metadata for BridgedListState?, type metadata accessor for BridgedListState, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = &v23[-v3];
  uint64_t v5 = (int *)type metadata accessor for BridgedListState(0);
  uint64_t v6 = *((void *)v5 - 1);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (double *)&v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = &v23[-v10];
  NSIndexPath v24 = v1;
  static Update.ensure<A>(_:)();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v6 + 48))(v4, 1, v5) == 1) {
    return _s10Foundation9IndexPathVSgWOhTm_1((uint64_t)v4, &lazy cache variable for type metadata for BridgedListState?, type metadata accessor for BridgedListState);
  }
  outlined init with take of UpdateCoalescingCollectionView.UpdateInvalidation((uint64_t)v4, (uint64_t)v11, type metadata accessor for BridgedListState);
  if (*(_DWORD *)&v1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates])
  {
    uint64_t result = outlined destroy of UpdateCoalescingCollectionView.UpdateInvalidation((uint64_t)v11, type metadata accessor for BridgedListState);
    v1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingGraphUpdate] = 1;
  }
  else
  {
    v1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingGraphUpdate] = 0;
    char v13 = static SemanticFeature.isEnabled.getter();
    double v14 = 15.0;
    if (v13) {
      double v14 = 16.0;
    }
    *uint64_t v8 = v14;
    uint64_t v15 = (uint64_t)v8 + v5[5];
    uint64_t v16 = type metadata accessor for BridgedListState.ScrollTarget(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
    CGFloat v17 = (char *)v8 + v5[6];
    *((_OWORD *)v17 + 5) = 0u;
    *((_OWORD *)v17 + 6) = 0u;
    *((_OWORD *)v17 + 3) = 0u;
    *((_OWORD *)v17 + 4) = 0u;
    *((_OWORD *)v17 + 1) = 0u;
    *((_OWORD *)v17 + 2) = 0u;
    *(_OWORD *)CGFloat v17 = 0u;
    v17[112] = 1;
    uint64_t v18 = v5[7];
    *(_DWORD *)((char *)v8 + v18) = 0;
    outlined assign with copy of BridgedListState.ScrollTarget?((uint64_t)&v11[v5[5]], v15);
    if ((v11[v5[6] + 112] & 1) == 0)
    {
      if (*(void *)&v1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_helper]) {
        swift_beginAccess();
      }
      objc_msgSend(v1, sel_adjustedContentInset);
      objc_msgSend(v1, sel_contentOffset);
      objc_msgSend(v1, sel_contentSize);
      objc_msgSend(v1, sel_bounds);
      ScrollGeometry.init(contentOffset:contentSize:contentInsets:containerSize:)();
      long long v19 = v26;
      *(_OWORD *)CGFloat v17 = v25;
      *((_OWORD *)v17 + 1) = v19;
      long long v20 = v28;
      *((_OWORD *)v17 + 2) = v27;
      *((_OWORD *)v17 + 3) = v20;
      long long v21 = v30;
      *((_OWORD *)v17 + 4) = v29;
      *((_OWORD *)v17 + 5) = v21;
      *((_OWORD *)v17 + 6) = v31;
      v17[112] = 0;
    }
    uint64_t v22 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView__lastUpdateSeed];
    swift_beginAccess();
    *(_DWORD *)((char *)v8 + v18) = *(_DWORD *)(v22 + 16);
    BridgedListState.commit(to:)(*(void *)&v1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_bridgedState]);
    outlined destroy of UpdateCoalescingCollectionView.UpdateInvalidation((uint64_t)v11, type metadata accessor for BridgedListState);
    return outlined destroy of UpdateCoalescingCollectionView.UpdateInvalidation((uint64_t)v8, type metadata accessor for BridgedListState);
  }
  return result;
}

uint64_t outlined destroy of UpdateCoalescingCollectionView.UpdateInvalidation(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for BridgedListState(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for BridgedListState);
}

uint64_t outlined init with take of UpdateCoalescingCollectionView.UpdateInvalidation(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t getEnumTagSinglePayload for BridgedListState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187C2F124);
}

void *initializeWithCopy for BridgedListState.CommitMutation(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *(void *)((char *)a1 + v4) = *(void *)((char *)a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for BridgedListState(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = &v5[v8];
  uint64_t v10 = &v6[v8];
  uint64_t v11 = type metadata accessor for BridgedListState.ScrollTarget(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = type metadata accessor for IndexPath();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v9, v10, v14);
    uint64_t v15 = *(int *)(v11 + 20);
    uint64_t v16 = &v9[v15];
    CGFloat v17 = &v10[v15];
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    unsigned char v16[16] = v17[16];
    v9[*(int *)(v11 + 24)] = v10[*(int *)(v11 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v18 = v7[6];
  long long v19 = &v5[v18];
  long long v20 = &v6[v18];
  long long v21 = *((_OWORD *)v20 + 1);
  *(_OWORD *)long long v19 = *(_OWORD *)v20;
  *((_OWORD *)v19 + 1) = v21;
  long long v22 = *((_OWORD *)v20 + 3);
  *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
  *((_OWORD *)v19 + 3) = v22;
  v19[112] = v20[112];
  long long v23 = *((_OWORD *)v20 + 6);
  long long v24 = *((_OWORD *)v20 + 4);
  *((_OWORD *)v19 + 5) = *((_OWORD *)v20 + 5);
  *((_OWORD *)v19 + 6) = v23;
  *((_OWORD *)v19 + 4) = v24;
  *(_DWORD *)&v5[v7[7]] = *(_DWORD *)&v6[v7[7]];
  return a1;
}

void *initializeWithCopy for BridgedListState(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for BridgedListState.ScrollTarget(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = type metadata accessor for IndexPath();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v7, v8, v12);
    uint64_t v13 = *(int *)(v9 + 20);
    uint64_t v14 = &v7[v13];
    uint64_t v15 = &v8[v13];
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    v14[16] = v15[16];
    v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v16 = a3[6];
  uint64_t v17 = a3[7];
  uint64_t v18 = (char *)a1 + v16;
  long long v19 = (char *)a2 + v16;
  v18[112] = v19[112];
  long long v20 = *((_OWORD *)v19 + 6);
  long long v21 = *((_OWORD *)v19 + 4);
  *((_OWORD *)v18 + 5) = *((_OWORD *)v19 + 5);
  *((_OWORD *)v18 + 6) = v20;
  long long v22 = *((_OWORD *)v19 + 1);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v22;
  long long v23 = *((_OWORD *)v19 + 3);
  *((_OWORD *)v18 + 2) = *((_OWORD *)v19 + 2);
  *((_OWORD *)v18 + 3) = v23;
  *((_OWORD *)v18 + 4) = v21;
  *(_DWORD *)((char *)a1 + v17) = *(_DWORD *)((char *)a2 + v17);
  return a1;
}

void type metadata accessor for BridgedListState.ScrollTarget?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s7SwiftUI16BridgedListStateV12ScrollTargetVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI16BridgedListStateV12ScrollTargetVSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI16BridgedListStateV12ScrollTargetVSgMaTm_2(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t destroy for BridgedListState(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for BridgedListState.ScrollTarget(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3);
  if (!result)
  {
    uint64_t v5 = type metadata accessor for IndexPath();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v2, v5);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BridgedListState.ScrollTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187C2EBD0);
}

uint64_t type metadata accessor for BridgedListState.ScrollTarget(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for BridgedListState.ScrollTarget);
}

uint64_t storeEnumTagSinglePayload for BridgedListState.ScrollTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187C2ECA0);
}

uint64_t BridgedListState.commit(to:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for BridgedListState.CommitMutation(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x1E4F4E7A0])
  {
    id v8 = (id)AGGraphGetAttributeGraph();
    AGGraphRef.viewGraph()();

    outlined init with copy of BridgedListState(v2, (uint64_t)v6 + *(int *)(v4 + 20));
    *uint64_t v6 = a1;
    v9[15] = 1;
    lazy protocol witness table accessor for type BridgedListState.CommitMutation and conformance BridgedListState.CommitMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    swift_release();
    return outlined destroy of BridgedListState.ScrollTarget((uint64_t)v6, type metadata accessor for BridgedListState.CommitMutation);
  }
  return result;
}

uint64_t outlined init with copy of BridgedListState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BridgedListState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of BridgedListState.ScrollTarget(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI16BridgedListStateV12ScrollTargetVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for BridgedListState.CommitMutation(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for BridgedListState.CommitMutation);
}

uint64_t destroy for BridgedListState.CommitMutation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = v2 + *(int *)(type metadata accessor for BridgedListState(0) + 20);
  uint64_t v4 = type metadata accessor for BridgedListState.ScrollTarget(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4);
  if (!result)
  {
    uint64_t v6 = type metadata accessor for IndexPath();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    return v7(v3, v6);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BridgedListState.CommitMutation and conformance BridgedListState.CommitMutation()
{
  unint64_t result = lazy protocol witness table cache variable for type BridgedListState.CommitMutation and conformance BridgedListState.CommitMutation;
  if (!lazy protocol witness table cache variable for type BridgedListState.CommitMutation and conformance BridgedListState.CommitMutation)
  {
    type metadata accessor for BridgedListState.CommitMutation(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BridgedListState.CommitMutation and conformance BridgedListState.CommitMutation);
  }
  return result;
}

uint64_t outlined assign with copy of BridgedListState.ScrollTarget?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, void *a2)
{
  id v52 = a2;
  uint64_t v51 = type metadata accessor for IndexPath();
  uint64_t v4 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51);
  uint64_t v45 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v44 = (char *)v42 - v7;
  uint64_t updated = type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation(0);
  MEMORY[0x1F4188790](updated);
  uint64_t v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v42 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v42 - v16;
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v53 = MEMORY[0x1E4FBC860];
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19)
  {
    v42[1] = v2;
    uint64_t v43 = v10;
    unint64_t v20 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v21 = a1 + v20;
    uint64_t v22 = *(void *)(v15 + 72);
    id v48 = (void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v49 = v22;
    unint64_t v46 = v20;
    uint64_t v47 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v50 = (char *)v42 - v16;
    while (1)
    {
      outlined init with copy of UpdateCoalescingCollectionView.UpdateInvalidation(v21, (uint64_t)v17, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
      outlined init with copy of UpdateCoalescingCollectionView.UpdateInvalidation((uint64_t)v17, (uint64_t)v13, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for (IndexPath, String)();
        long long v25 = &v13[*(int *)(v24 + 48)];
        uint64_t v26 = *(void *)v25;
        uint64_t v27 = *((void *)v25 + 1);
        uint64_t v28 = updated;
        long long v29 = v45;
        uint64_t v30 = v51;
        (*v48)(v45, v13, v51);
        long long v31 = (void *)MEMORY[0x18C115780](v26, v27);
        swift_bridgeObjectRelease();
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        id v33 = objc_msgSend(v52, sel_supplementaryViewForElementKind_atIndexPath_, v31, isa);

        long long v34 = v29;
        uint64_t updated = v28;
        uint64_t v10 = v43;
        (*v47)(v34, v30);
        if (v33) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v35 = v44;
        uint64_t v36 = v51;
        (*v48)(v44, v13, v51);
        Class v37 = IndexPath._bridgeToObjectiveC()().super.isa;
        id v33 = objc_msgSend(v52, sel_cellForItemAtIndexPath_, v37);

        (*v47)(v35, v36);
        if (v33)
        {
LABEL_9:

          uint64_t v17 = v50;
          outlined init with take of UpdateCoalescingCollectionView.UpdateInvalidation((uint64_t)v50, (uint64_t)v10, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
          uint64_t v38 = v53;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v38 + 16) + 1, 1);
            uint64_t v38 = v53;
          }
          unint64_t v40 = *(void *)(v38 + 16);
          unint64_t v39 = *(void *)(v38 + 24);
          if (v40 >= v39 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
            uint64_t v38 = v53;
          }
          *(void *)(v38 + 16) = v40 + 1;
          uint64_t v41 = v38 + v46;
          uint64_t v23 = v49;
          outlined init with take of UpdateCoalescingCollectionView.UpdateInvalidation((uint64_t)v10, v41 + v40 * v49, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
          goto LABEL_4;
        }
      }
      uint64_t v17 = v50;
      outlined destroy of UpdateCoalescingCollectionView.UpdateInvalidation((uint64_t)v50, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
      uint64_t v23 = v49;
LABEL_4:
      v21 += v23;
      if (!--v19) {
        return v53;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UpdateCoalescingCollectionView.UpdateInvalidation);
}

size_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(size_t a1, int64_t a2, char a3)
{
  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<UpdateCoalescingCollectionView.UpdateInvalidation>, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
  *uint64_t v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarStorage.Entry>, type metadata accessor for ToolbarStorage.Entry, type metadata accessor for ToolbarStorage.Entry);
  *uint64_t v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<TableCellFormula>, (uint64_t (*)(uint64_t))type metadata accessor for TableCellFormula, (uint64_t (*)(void))type metadata accessor for TableCellFormula);
  *uint64_t v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableColumnCollection.Entry>, type metadata accessor for TableColumnCollection.Entry, type metadata accessor for TableColumnCollection.Entry);
  *uint64_t v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  *uint64_t v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityNodeAttachment>, MEMORY[0x1E4F40FA8], MEMORY[0x1E4F40FA8]);
  *uint64_t v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<MainMenuItem.Template>, type metadata accessor for MainMenuItem.Template, type metadata accessor for MainMenuItem.Template);
  *uint64_t v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<URL>, MEMORY[0x1E4F276F0], MEMORY[0x1E4F276F0]);
  *uint64_t v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<(offset: Int, element: ToolbarStorage.Item)>, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: ToolbarStorage.Item), (uint64_t)type metadata accessor for ToolbarStorage.Item, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for (offset: Int, element: ToolbarStorage.Item));
  *uint64_t v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<WidgetAuxiliaryViewMetadata>, type metadata accessor for WidgetAuxiliaryViewMetadata, type metadata accessor for WidgetAuxiliaryViewMetadata);
  *uint64_t v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, MEMORY[0x1E4F27DE8], MEMORY[0x1E4F27DE8]);
  *uint64_t v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<SystemSegmentItem>, (uint64_t (*)(uint64_t))type metadata accessor for SystemSegmentItem, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
  *uint64_t v3 = result;
  return result;
}

{
  size_t *v3;
  size_t result;

  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<(UTType, String?)>, (uint64_t (*)(uint64_t))type metadata accessor for (UTType, String?), (uint64_t (*)(void))type metadata accessor for (UTType, String?));
  *uint64_t v3 = result;
  return result;
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t result, int64_t a2, char a3, void *a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t (*a7)(void))
{
  char v9 = result;
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v11 = a2;
      }
    }
  }
  else
  {
    int64_t v11 = a2;
  }
  uint64_t v12 = a4[2];
  if (v11 <= v12) {
    uint64_t v13 = a4[2];
  }
  else {
    uint64_t v13 = v11;
  }
  if (!v13)
  {
    uint64_t v17 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  type metadata accessor for Binding<TabSidebarCustomization>?(0, a5, a6, MEMORY[0x1E4FBBE00]);
  uint64_t v14 = *(void *)(a7(0) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  unint64_t v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size_2(v17);
  if (!v15)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v16 == 0x8000000000000000 && v15 == -1) {
    goto LABEL_29;
  }
  _OWORD v17[2] = v12;
  v17[3] = 2 * ((uint64_t)(result - v16) / v15);
LABEL_19:
  uint64_t v19 = *(void *)(a7(0) - 8);
  if (v9)
  {
    if (v17 < a4
      || (unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80),
          (char *)v17 + v20 >= (char *)a4 + v20 + *(void *)(v19 + 72) * v12))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v17 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v17;
}

uint64_t associated type witness table accessor for View.Body : View in SceneBridgeReader<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t View.contextMenu<A, B>(menuItems:preview:previewAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v36 = a4;
  Class v37 = a3;
  uint64_t v34 = a2;
  uint64_t v33 = a1;
  uint64_t v40 = a9;
  uint64_t v32 = a11;
  uint64_t v30 = a12;
  MEMORY[0x1F4188790](a1);
  uint64_t v35 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  type metadata accessor for ModifiedContent();
  unint64_t v16 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v53 = a12;
  unint64_t v54 = v16;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = type metadata accessor for ZStack();
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v28 - v18;
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v49 = v17;
  uint64_t v50 = a10;
  uint64_t v28 = a10;
  uint64_t v51 = v29;
  uint64_t v52 = a13;
  uint64_t v20 = type metadata accessor for ContextMenuPreviewModifier();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v28 - v22;
  uint64_t v41 = a7;
  uint64_t v42 = a8;
  uint64_t v24 = v32;
  uint64_t v43 = a10;
  uint64_t v44 = v32;
  uint64_t v45 = v30;
  uint64_t v46 = a13;
  uint64_t v47 = v33;
  uint64_t v48 = v34;
  static Alignment.center.getter();
  uint64_t v25 = ZStack.init(alignment:content:)();
  uint64_t v26 = (uint64_t)v35;
  v37(v25);
  ContextMenuPreviewModifier.init(menuView:preview:hidePreview:previewAction:)((uint64_t)v19, v26, 0, v38, v39, 0, v17, v28, (uint64_t)v23);
  swift_retain();
  MEMORY[0x18C113660](v23, a7, v20, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v20);
}

uint64_t ContextMenuPreviewModifier.init(menuView:preview:hidePreview:previewAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(_DWORD *)a9 = 0;
  *(void *)(a9 + 8) = swift_getKeyPath();
  *(unsigned char *)(a9 + 16) = 0;
  uint64_t v17 = (int *)type metadata accessor for ContextMenuPreviewModifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a9 + v17[14], a1, a7);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(a9 + v17[15], a2, a8);
  *(unsigned char *)(a9 + v17[16]) = a3;
  uint64_t v19 = a9 + v17[17];
  *(void *)uint64_t v19 = a4;
  *(void *)(v19 + 8) = a5;
  *(unsigned char *)(v19 + 16) = a6;
  return result;
}

uint64_t closure #1 in ContextMenuPreviewModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for ContextMenuPreviewModifier();
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  _OWORD v15[2] = a2;
  void v15[3] = a3;
  v15[4] = a4;
  v15[5] = a5;
  type metadata accessor for ContextMenuPreviewModifierCore();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v15 - v12;
  v15[0] = swift_getWitnessTable();
  v15[1] = &protocol witness table for ContextMenuPreviewModifierCore<A, B>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(a1);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t ContextMenuPreviewModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v88 = a2;
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for _ViewModifier_Content();
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v77 = *(void *)(a1 + 32);
  uint64_t v75 = v7;
  uint64_t v9 = type metadata accessor for ContextMenuPreviewModifierCore();
  uint64_t v72 = (void *)v5;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v5, PortalGroupRendererEffect, EmptyModifier>();
  uint64_t v74 = v11;
  double v99 = &type metadata for ProvidesContextMenuInteraction;
  uint64_t v100 = v10;
  uint64_t v82 = type metadata accessor for ModifiedContent();
  uint64_t v101 = v82;
  unint64_t v102 = lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction();
  unint64_t v78 = v102;
  uint64_t v12 = type metadata accessor for StaticIf();
  uint64_t v83 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  char v80 = (char *)&v68 - v13;
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  uint64_t v84 = v12;
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v85 = *(void *)(v14 - 8);
  uint64_t v86 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v79 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v81 = (char *)&v68 - v17;
  uint64_t v18 = v8;
  uint64_t v19 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = v9;
  uint64_t v69 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v68 - v27;
  uint64_t v87 = v10;
  uint64_t v73 = *(void *)(v10 - 8);
  double v30 = MEMORY[0x1F4188790](v29);
  uint64_t v71 = (char *)&v68 - v31;
  uint64_t v32 = (char *)v3 + *(int *)(a1 + 56);
  uint64_t v34 = *(void (**)(char *, char *, uint64_t, double))(v33 + 16);
  uint64_t v76 = v6;
  v34(v25, v32, v6, v30);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, (char *)v3 + *(int *)(a1 + 60), v18);
  int v35 = *v3;
  if (*v3)
  {
    char v36 = *((unsigned char *)v3 + *(int *)(a1 + 64));
    Class v37 = (char *)v3 + *(int *)(a1 + 68);
    uint64_t v39 = *(void *)v37;
    uint64_t v38 = *((void *)v37 + 1);
    char v40 = v37[16];
    uint64_t v66 = v75;
    uint64_t v68 = v3;
    uint64_t v65 = v77;
    uint64_t v41 = v76;
    ContextMenuPreviewModifierCore.init(menuView:preview:hidePreview:id:previewAction:)((uint64_t)v25, (uint64_t)v22, v36, v35, v39, v38, v40, v76, (uint64_t)v28, v18);
    outlined copy of ContextMenuPreviewAction?(v39, v38, v40);
    uint64_t v42 = v72;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v44 = v42;
    uint64_t v45 = v70;
    MEMORY[0x18C113660](v28, v44, v70, WitnessTable);
    uint64_t v46 = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v28, v45);
    uint64_t v72 = &v68;
    MEMORY[0x1F4188790](v46);
    *(&v68 - 6) = (int *)v41;
    *(&v68 - 5) = (int *)v18;
    MEMORY[0x1F4188790](v47);
    *(&v68 - 6) = (int *)v41;
    *(&v68 - 5) = (int *)v18;
    uint64_t v49 = v48;
    char v67 = v68;
    uint64_t v97 = WitnessTable;
    uint64_t v98 = &protocol witness table for ContextMenuPreviewModifierCore<A, B>;
    uint64_t v50 = v87;
    uint64_t v51 = swift_getWitnessTable();
    uint64_t v95 = v51;
    uint64_t v96 = MEMORY[0x1E4F40800];
    uint64_t v52 = swift_getWitnessTable();
    unint64_t v53 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, PortalGroupRendererEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    uint64_t v93 = v52;
    unint64_t v94 = v53;
    uint64_t v54 = swift_getWitnessTable();
    uint64_t v65 = v51;
    uint64_t v66 = v54;
    unint64_t v64 = v78;
    uint64_t v55 = v80;
    StaticIf<>.init(_:then:else:)();
    uint64_t v91 = v51;
    uint64_t v92 = v54;
    uint64_t v56 = v84;
    uint64_t v57 = swift_getWitnessTable();
    uint64_t v58 = v79;
    View.sharingPickerHost()(v56, v57);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v55, v56);
    unint64_t IsSharingPicker = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    uint64_t v89 = v57;
    unint64_t v90 = IsSharingPicker;
    uint64_t v60 = v86;
    swift_getWitnessTable();
    char v61 = v81;
    static ViewBuilder.buildExpression<A>(_:)(v58);
    uint64_t v62 = *(void (**)(char *, uint64_t))(v85 + 8);
    v62(v58, v60);
    static ViewBuilder.buildExpression<A>(_:)(v61);
    v62(v61, v60);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 8))(v49, v50);
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t outlined consume of ContextMenuPreviewAction(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = swift_release();
  if (a3 < 0)
  {
    return swift_release();
  }
  return result;
}

uint64_t destroy for ContextMenuPreviewModifierCore(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t))(v6 + 8))(v8);
  unint64_t v10 = (((v8 + *(void *)(v7 + 56)) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFF8;
  char v11 = *(unsigned char *)(v10 + 16);
  if ((v11 & 0x7E) == 0)
  {
    uint64_t v12 = *(void *)v10;
    uint64_t v13 = *(void *)(v10 + 8);
    return outlined consume of ContextMenuPreviewAction(v12, v13, v11);
  }
  return result;
}

uint64_t ContextMenuPreviewModifierCore.init(menuView:preview:hidePreview:id:previewAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(a9, a1, a8);
  uint64_t v16 = (int *)type metadata accessor for ContextMenuPreviewModifierCore();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(a9 + v16[13], a2, a10);
  *(unsigned char *)(a9 + v16[14]) = a3;
  *(_DWORD *)(a9 + v16[15]) = a4;
  uint64_t v18 = a9 + v16[16];
  *(void *)uint64_t v18 = a5;
  *(void *)(v18 + 8) = a6;
  *(unsigned char *)(v18 + 16) = a7;
  return result;
}

uint64_t closure #2 in ContextMenuPreviewModifier.body(content:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, double a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v52 = a1;
  uint64_t v53 = a7;
  double v60 = a3;
  uint64_t v61 = a4;
  uint64_t v62 = a5;
  uint64_t v63 = a6;
  uint64_t v12 = type metadata accessor for ContextMenuPreviewModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v45 - v14;
  swift_getWitnessTable();
  uint64_t v16 = type metadata accessor for _ViewModifier_Content();
  double v60 = a3;
  uint64_t v61 = a4;
  uint64_t v62 = a5;
  uint64_t v63 = a6;
  type metadata accessor for ContextMenuPreviewModifierCore();
  uint64_t v45 = v16;
  uint64_t v46 = type metadata accessor for ModifiedContent();
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v50 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v48 = (char *)&v45 - v18;
  type metadata accessor for StaticIf<_SemanticFeature_v5, PortalGroupRendererEffect, EmptyModifier>();
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v51 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v47 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v49 = (char *)&v45 - v22;
  int v23 = *a2;
  if (!*a2) {
    goto LABEL_9;
  }
  uint64_t v24 = a2;
  unint64_t v25 = *((void *)a2 + 1);
  char v26 = *((unsigned char *)v24 + 16);
  outlined copy of Environment<Bool>.Content(v25, v26);
  int v27 = specialized Environment.wrappedValue.getter(v25, v26);
  uint64_t v28 = v25;
  uint64_t v29 = v24;
  outlined consume of Environment<Bool>.Content(v28, v26);
  (*(void (**)(char *, int *, uint64_t))(v13 + 16))(v15, v24, v12);
  if (v23 != v27)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    int v35 = v48;
    goto LABEL_6;
  }
  unint64_t v30 = *((void *)v15 + 1);
  char v31 = v15[16];
  outlined copy of Environment<Bool>.Content(v30, v31);
  uint64_t v32 = specialized Environment.wrappedValue.getter(v30, v31);
  uint64_t v33 = v30;
  uint64_t v29 = v24;
  outlined consume of Environment<Bool>.Content(v33, v31);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  double v34 = 0.0;
  int v35 = v48;
  if ((v32 & 0x100000000) != 0) {
LABEL_6:
  }
    double v34 = 1.0;
  double v60 = v34;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v59 = &protocol witness table for ContextMenuPreviewModifierCore<A, B>;
  uint64_t v36 = v46;
  uint64_t v37 = swift_getWitnessTable();
  MEMORY[0x18C113660](&v60, v36, MEMORY[0x1E4F40808], v37);
  int v38 = *v29;
  if (v38)
  {
    uint64_t v56 = v37;
    uint64_t v57 = MEMORY[0x1E4F40800];
    uint64_t v39 = swift_getWitnessTable();
    char v40 = v47;
    View.portalGroup(kind:id:)(1, v38, v17, v39);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v35, v17);
    unint64_t v41 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, PortalGroupRendererEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    uint64_t v54 = v39;
    unint64_t v55 = v41;
    swift_getWitnessTable();
    uint64_t v42 = v49;
    static ViewBuilder.buildExpression<A>(_:)(v40);
    uint64_t v43 = *(void (**)(char *, uint64_t))(v51 + 8);
    v43(v40, v19);
    static ViewBuilder.buildExpression<A>(_:)(v42);
    return ((uint64_t (*)(char *, uint64_t))v43)(v42, v19);
  }
LABEL_9:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_DWORD *initializeWithCopy for ContextMenuPreviewModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v5 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)v6;
  char v8 = *(unsigned char *)(v6 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v6, v8);
  *(void *)unint64_t v5 = v7;
  *(unsigned char *)(v5 + 8) = v8;
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v11 + 9 + v5) & ~v11;
  uint64_t v13 = (v11 + 9 + v6) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v12, v13);
  uint64_t v14 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = *(void *)(v10 + 48) + v16;
  uint64_t v18 = (v17 + v12) & ~v16;
  uint64_t v19 = (v17 + v13) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 48);
  unint64_t v21 = v20 + v18;
  unint64_t v22 = v20 + v19;
  *(unsigned char *)unint64_t v21 = *(unsigned char *)v22;
  unint64_t v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v24 = v22 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
  char v26 = *(unsigned char *)(v24 + 24);
  if ((v26 & 0x7E) != 0)
  {
    long long v27 = *(_OWORD *)v25;
    *(unsigned char *)(v23 + 16) = *(unsigned char *)(v25 + 16);
    *(_OWORD *)unint64_t v23 = v27;
  }
  else
  {
    uint64_t v28 = *(void *)v25;
    uint64_t v29 = *(void *)(v25 + 8);
    outlined copy of ContextMenuPreviewAction(*(void *)v25, v29, *(unsigned char *)(v24 + 24));
    *(void *)unint64_t v23 = v28;
    *(void *)(v23 + 8) = v29;
    *(unsigned char *)(v23 + 16) = v26;
  }
  return a1;
}

uint64_t initializeWithCopy for ContextMenuPreviewModifierCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 48);
  uint64_t v15 = v14 + v12;
  uint64_t v16 = v14 + v13;
  *(unsigned char *)uint64_t v15 = *(unsigned char *)v16;
  v15 &= 0xFFFFFFFFFFFFFFFCLL;
  v16 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v15 + 4) = *(_DWORD *)(v16 + 4);
  unint64_t v17 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v19 = *(unsigned char *)(v18 + 16);
  if ((v19 & 0x7E) != 0)
  {
    long long v20 = *(_OWORD *)v18;
    *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
    *(_OWORD *)unint64_t v17 = v20;
  }
  else
  {
    uint64_t v21 = *(void *)v18;
    uint64_t v22 = *(void *)(v18 + 8);
    outlined copy of ContextMenuPreviewAction(*(void *)v18, v22, *(unsigned char *)(v18 + 16));
    *(void *)unint64_t v17 = v21;
    *(void *)(v17 + 8) = v22;
    *(unsigned char *)(v17 + 16) = v19;
  }
  return a1;
}

uint64_t outlined copy of ContextMenuPreviewAction(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 < 0) {
    swift_retain();
  }

  return swift_retain();
}

uint64_t destroy for ContextMenuPreviewModifier(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(void *)v3, *(unsigned char *)(v3 + 8));
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (v3 + *(unsigned __int8 *)(v4 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v8 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v9 = v8 + 8;
  unint64_t v10 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t))(v8 + 8))(v10);
  unint64_t v12 = (v10 + *(void *)(v9 + 56)) & 0xFFFFFFFFFFFFFFF8;
  char v13 = *(unsigned char *)(v12 + 24);
  if ((v13 & 0x7E) == 0)
  {
    uint64_t v14 = *(void *)(v12 + 8);
    uint64_t v15 = *(void *)(v12 + 16);
    return outlined consume of ContextMenuPreviewAction(v14, v15, v13);
  }
  return result;
}

uint64_t type metadata accessor for ContextMenuPreviewModifier()
{
  return swift_getGenericMetadata();
}

double static ContextMenuPreviewModifierCore._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, long long *a2@<X1>, void (*a3)(uint64_t, long long *)@<X2>, ValueMetadata *a4@<X4>, ValueMetadata *a5@<X5>, _UNKNOWN **a6@<X6>, _UNKNOWN **a7@<X7>, void *a8@<X8>)
{
  uint64_t v46 = a5;
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  long long v13 = a2[3];
  long long v70 = a2[2];
  long long v71 = v13;
  long long v72 = a2[4];
  int v73 = *((_DWORD *)a2 + 20);
  long long v14 = *a2;
  long long v15 = a2[1];
  int v49 = DWORD2(v71);
  uint64_t v48 = v71;
  int v45 = *a1;
  long long v68 = v14;
  long long v69 = v15;
  char v16 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  *(void *)&long long v61 = v71;
  DWORD2(v61) = DWORD2(v71);
  char v17 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (v16 & 1) != 0 || (v17)
  {
    uint64_t v44 = a8;
    UniqueID.init()();
    uint64_t v42 = (ValueMetadata *)v61;
    closure #1 in static EditMenuModifierCore._makeView(modifier:inputs:body:)((uint64_t)&v68, v16 & 1, v61, a3);
    LODWORD(v54) = v45;
    *(void *)&long long v61 = a4;
    *((void *)&v61 + 1) = v46;
    *(void *)&long long v62 = a6;
    *((void *)&v62 + 1) = a7;
    uint64_t v43 = a7;
    type metadata accessor for ContextMenuPreviewModifierCore();
    uint64_t v40 = type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_OWORD *)uint64_t v56 = v70;
    *(_OWORD *)&v56[16] = v71;
    *(_OWORD *)&v56[32] = v72;
    *(_DWORD *)&v56[48] = v73;
    long long v54 = v68;
    long long v55 = v69;
    id v20 = PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v54, 1, (uint64_t)&v61);
    *(void *)&long long v54 = v61;
    DWORD2(v54) = DWORD2(v61);
    *(void *)&long long v55 = v62;
    DWORD2(v55) = DWORD2(v62);
    *(void *)uint64_t v56 = *(void *)v63;
    *(_OWORD *)&v56[8] = *(_OWORD *)&v63[8];
    *(_OWORD *)&v56[24] = *(_OWORD *)&v63[24];
    *(_OWORD *)&v56[40] = *(_OWORD *)&v63[40];
    uint64_t v57 = v64;
    int v58 = v65;
    char v59 = v66;
    int v60 = v67;
    MEMORY[0x1F4188790](v20);
    uint64_t v50 = &type metadata for AllPlatformItemListFlags;
    uint64_t v51 = a4;
    uint64_t v52 = &protocol witness table for AllPlatformItemListFlags;
    uint64_t v53 = a6;
    int v38 = (long long *)type metadata accessor for PlatformItemListGenerator();
    uint64_t WitnessTable = swift_getWitnessTable();
    outlined retain of _ViewInputs((uint64_t)&v68);
    _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_2(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v54, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v37, (uint64_t)v38, MEMORY[0x1E4FBC248], v21, MEMORY[0x1E4FBC278], v22);
    uint64_t v41 = 0;
    unint64_t v23 = (void *)v54;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    uint64_t v24 = v47;
    if (v16)
    {
      unsigned int v26 = DWORD2(v47);
      unsigned int v25 = HIDWORD(v47);
      long long v61 = v47;
      if ((_ViewOutputs.subscript.getter() & 0x100000000) == 0)
      {
        LODWORD(v61) = v45;
        int v45 = _GraphValue.value.getter();
        *(void *)&long long v61 = v24;
        *((void *)&v61 + 1) = __PAIR64__(v25, v26);
        int v27 = _ViewOutputs.viewResponders()();
        *(_OWORD *)uint64_t v63 = v70;
        *(_OWORD *)&v63[16] = v71;
        *(_OWORD *)&v63[32] = v72;
        *(_DWORD *)&v63[48] = v73;
        long long v61 = v68;
        long long v62 = v69;
        uint64_t v28 = v46;
        uint64_t v29 = v43;
        type metadata accessor for ContextMenuPreviewResponder();
        *(_OWORD *)uint64_t v56 = v70;
        *(_OWORD *)&v56[16] = v71;
        *(_OWORD *)&v56[32] = v72;
        *(_DWORD *)&v56[48] = v73;
        long long v54 = v68;
        long long v55 = v69;
        uint64_t v50 = v42;
        outlined retain of _ViewInputs((uint64_t)&v68);
        outlined retain of _ViewInputs((uint64_t)&v68);
        swift_allocObject();
        uint64_t v30 = ContextMenuPreviewResponder.init(inputs:space:itemList:displayList:)((uint64_t *)&v54, (uint64_t *)&v50);
        specialized ContextMenuPreviewResponderFilter.init(modifier:children:inputs:responder:)(v27, v30, (uint64_t)&v54);
        uint64_t v31 = swift_release();
        long long v61 = v54;
        long long v62 = v55;
        *(_OWORD *)uint64_t v63 = *(_OWORD *)v56;
        *(void *)&v63[16] = *(void *)&v56[16];
        MEMORY[0x1F4188790](v31);
        uint64_t v50 = a4;
        uint64_t v51 = v28;
        uint64_t v52 = a6;
        uint64_t v53 = v29;
        uint64_t v32 = type metadata accessor for ContextMenuPreviewResponderFilter();
        int v38 = (long long *)v32;
        uint64_t WitnessTable = swift_getWitnessTable();
        _sSay7SwiftUI13ViewResponderCGMaTm_1(0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], MEMORY[0x1E4F4E740]);
        _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v61, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_14, (uint64_t)v37, v32, MEMORY[0x1E4FBC248], v33, MEMORY[0x1E4FBC278], v34);
        swift_release();
        LOBYTE(v61) = 0;
        uint64_t v35 = _ViewOutputs.subscript.setter();
        *(void *)&long long v61 = v48;
        DWORD2(v61) = v49;
        MEMORY[0x1F4188790](v35);
        int v38 = &v68;
        outlined retain of [Text.Modifier]((uint64_t)&v48);
        PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
        swift_bridgeObjectRelease();
        uint64_t v24 = v47;
      }
    }
    uint64_t v36 = v44;
    *uint64_t v44 = v24;
    double result = *((double *)&v47 + 1);
    v36[1] = *((void *)&v47 + 1);
  }
  else
  {
    *(_OWORD *)uint64_t v63 = v70;
    *(_OWORD *)&v63[16] = v71;
    *(_OWORD *)&v63[32] = v72;
    *(_DWORD *)&v63[48] = v73;
    long long v61 = v68;
    long long v62 = v69;
    ((void (*)(void))a3)();
  }
  return result;
}

uint64_t type metadata accessor for ContextMenuPreviewModifierCore()
{
  return swift_getGenericMetadata();
}

uint64_t specialized ContextMenuPreviewResponderFilter.init(modifier:children:inputs:responder:)@<X0>(int a1@<W1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  type metadata accessor for ContextMenuPreviewModifierCore();
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int v11 = _ViewInputs.animatedPosition()();
  int v10 = _ViewInputs.transform.getter();
  int v9 = _ViewInputs.animatedSize()();
  int v8 = _ViewInputs.containerPosition.getter();
  swift_getKeyPath();
  int v3 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  int v4 = AGGraphCreateOffsetAttribute2();
  int v5 = AGGraphCreateOffsetAttribute2();
  swift_retain();
  AGGraphCreateOffsetAttribute2();
  uint64_t result = AGCreateWeakAttribute();
  *(_DWORD *)a3 = OffsetAttribute2;
  *(_DWORD *)(a3 + 4) = a1;
  *(_DWORD *)(a3 + 8) = v11;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v9;
  *(_DWORD *)(a3 + 20) = v8;
  *(_DWORD *)(a3 + 24) = v3;
  *(_DWORD *)(a3 + 28) = v4;
  *(_DWORD *)(a3 + 32) = v5;
  *(void *)(a3 + 36) = result;
  *(void *)(a3 + 48) = a2;
  return result;
}

uint64_t type metadata accessor for ContextMenuPreviewResponder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ContextMenuPreviewResponder.init(inputs:space:itemList:displayList:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = a1[2];
  int v7 = *((_DWORD *)a1 + 20);
  uint64_t v11 = *a2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2
                                                                            + class metadata base offset for ContextMenuPreviewResponder)
                                                                - 8)
                                                    + 56))(v2 + *(void *)(*(void *)v2 + class metadata base offset for ContextMenuPreviewResponder + 16), 1, 1);
  *(void *)(v2 + *(void *)(class metadata base offset for ContextMenuPreviewResponder + *(void *)v2 + 24)) = 0;
  *(void *)(v2 + 308) = 0;
  *(unsigned char *)(v2 + 316) = 1;
  *(_DWORD *)(v2 + 320) = 0;
  *(unsigned char *)(v2 + 324) = 1;
  *(void *)(v2 + 296) = 0;
  *(_DWORD *)(v2 + 304) = 0;
  swift_retain();
  *(void *)(v2 + 296) = AGCreateWeakAttribute();
  swift_release();
  int v14 = v5;
  uint64_t v15 = v6;
  uint64_t v8 = a1[4];
  uint64_t v16 = a1[3];
  uint64_t v17 = v8;
  long long v9 = *(_OWORD *)(a1 + 7);
  long long v18 = *(_OWORD *)(a1 + 5);
  long long v19 = v9;
  uint64_t v20 = a1[9];
  int v21 = v7;
  uint64_t v12 = v11;
  uint64_t v13 = v4;
  return UIViewSnapshotResponder.init(inputs:space:displayList:)((uint64_t)&v13, &v12);
}

uint64_t closure #1 in static EditMenuModifierCore._makeView(modifier:inputs:body:)(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t, long long *))
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v6 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)int v21 = v6;
  *(_OWORD *)&unsigned char v21[16] = *(_OWORD *)(a1 + 64);
  int v22 = *(_DWORD *)(a1 + 80);
  long long v7 = *(_OWORD *)(a1 + 16);
  long long v19 = *(_OWORD *)a1;
  *(_OWORD *)uint64_t v20 = v7;
  if (a2)
  {
    long long v9 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&unsigned char v16[16] = *(_OWORD *)(a1 + 32);
    *(_OWORD *)uint64_t v17 = v9;
    *(_OWORD *)&v17[16] = *(_OWORD *)(a1 + 64);
    int v18 = *(_DWORD *)(a1 + 80);
    long long v10 = *(_OWORD *)(a1 + 16);
    long long v15 = *(_OWORD *)a1;
    *(_OWORD *)uint64_t v16 = v10;
    outlined retain of _ViewInputs(a1);
    int v11 = _ViewInputs.transform.getter();
    long long v12 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&unsigned char v16[16] = *(_OWORD *)(a1 + 32);
    *(_OWORD *)uint64_t v17 = v12;
    *(_OWORD *)&v17[16] = *(_OWORD *)(a1 + 64);
    int v18 = *(_DWORD *)(a1 + 80);
    *(_OWORD *)uint64_t v16 = *(_OWORD *)(a1 + 16);
    LODWORD(v15) = v11;
    DWORD1(v15) = _ViewInputs.position.getter();
    *((void *)&v15 + 1) = a3;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type UIViewSnapshotResponder.Transform and conformance UIViewSnapshotResponder.Transform();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.transform.setter();
  }
  else
  {
    outlined retain of _ViewInputs(a1);
  }
  *(void *)&long long v15 = v19;
  DWORD2(v15) = DWORD2(v19);
  *(void *)uint64_t v16 = *(void *)v20;
  *(_OWORD *)&v16[8] = *(_OWORD *)&v20[8];
  *(void *)&v16[24] = *(void *)&v20[24];
  *(void *)uint64_t v17 = *(void *)v21;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v21[8];
  *(void *)&unsigned char v17[24] = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v13 = swift_bridgeObjectRetain();
  a4(v13, &v15);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t type metadata accessor for ContextMenuPreviewResponderFilter()
{
  return swift_getGenericMetadata();
}

uint64_t outlined copy of ContextMenuPreviewAction?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 <= 0xFDu) {
    return outlined copy of ContextMenuPreviewAction(a1, a2, a3);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchPrimitiveModifier.SearchConfigModifier(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t result = v6 - 8;
  unint64_t v9 = ((*(_DWORD *)(v8 + 80) + 9) & ~(unint64_t)*(_DWORD *)(v8 + 80))
     + *(void *)(v8 + 64);
  unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v12 = ((*(_DWORD *)(v8 + 80) & 0xFC ^ 0x1FCu) & (*(_DWORD *)(v8 + 80) + 16)) + v10 + 9;
  if (v12 <= v11) {
    unint64_t v13 = v11;
  }
  else {
    unint64_t v13 = v12;
  }
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v15 = *(_DWORD *)(v14 + 84);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  if (v15 <= 0xFE) {
    int v17 = 254;
  }
  else {
    int v17 = *(_DWORD *)(v14 + 84);
  }
  if (v15 <= 0x7FFFFFFE) {
    unsigned int v18 = 2147483646;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v14 + 84);
  }
  if (!a2) {
    return 0;
  }
  unint64_t v19 = ((v16 + (v13 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v16) + *(void *)(v14 + 64);
  if (v18 < a2)
  {
    unint64_t v20 = ((v19 + 9) & 0xFFFFFFFFFFFFFFF8) + 24;
    uint64_t v21 = v20 & 0xFFFFFFF8;
    if ((v20 & 0xFFFFFFF8) != 0) {
      unsigned int v22 = 2;
    }
    else {
      unsigned int v22 = a2 - v18 + 1;
    }
    if (v22 >= 0x10000) {
      LODWORD(v23) = 4;
    }
    else {
      LODWORD(v23) = 2;
    }
    if (v22 < 0x100) {
      LODWORD(v23) = 1;
    }
    if (v22 >= 2) {
      uint64_t v23 = v23;
    }
    else {
      uint64_t v23 = 0;
    }
    switch(v23)
    {
      case 1:
        int v24 = *((unsigned __int8 *)a1 + v20);
        if (!v24) {
          goto LABEL_31;
        }
        goto LABEL_28;
      case 2:
        int v24 = *(unsigned __int16 *)((char *)a1 + v20);
        if (!v24) {
          goto LABEL_31;
        }
        goto LABEL_28;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v24 = *(int *)((char *)a1 + v20);
        if (!v24) {
          goto LABEL_31;
        }
LABEL_28:
        int v25 = v24 - 1;
        if (v21)
        {
          int v25 = 0;
          int v26 = *a1;
        }
        else
        {
          int v26 = 0;
        }
        int v29 = v18 + (v26 | v25);
        break;
      default:
        goto LABEL_31;
    }
    return (v29 + 1);
  }
LABEL_31:
  if (v17 != v18)
  {
    unint64_t v28 = *(void *)((((unint64_t)a1 + v19 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
    if (v28 >= 0xFFFFFFFF) {
      LODWORD(v28) = -1;
    }
    int v29 = v28 - 1;
    if (v29 < 0) {
      int v29 = -1;
    }
    return (v29 + 1);
  }
  if (v15 > 0xFE)
  {
    uint64_t v30 = *(uint64_t (**)(unint64_t))(v14 + 48);
    return v30((v16 + (((unint64_t)a1 + v13 + 8) & 0xFFFFFFFFFFFFFFF8) + 18) & ~v16);
  }
  else
  {
    unsigned int v27 = *((unsigned __int8 *)a1 + v13);
    if (v27 >= 2) {
      return (v27 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t partial apply for closure #1 in PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.enqueueAction(ids:)(uint64_t a1)
{
  return closure #1 in PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.enqueueAction(ids:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t instantiation function for generic protocol witness table for AccessibilityLabelModifier<A>.ChildModifier(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

{
  return instantiation function for generic protocol witness table for AccessibilityLabelModifier<A>.ChildModifier(a1);
}

Swift::Void __swiftcall _DocumentIntroAccessoryItem._resolve(into:)(SwiftUI::_ResolvedDocumentIntroAccessory *into)
{
  uint64_t v3 = v1;
  double v5 = MEMORY[0x1F4188790](into);
  long long v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v7, v2, v3, v5);
  uint64_t WitnessTable = swift_getWitnessTable();
  _AnyDocumentIntroAccessory.init<A>(_:)((uint64_t)v7, v3, WitnessTable, (uint64_t)v18);
  uint64_t v10 = v18[0];
  uint64_t v11 = v18[1];
  char v12 = v19;
  uint64_t v13 = v20;
  rawuint64_t Value = (char *)into->storage._rawValue;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    rawuint64_t Value = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)rawValue + 2) + 1, 1, rawValue);
  }
  unint64_t v16 = *((void *)rawValue + 2);
  unint64_t v15 = *((void *)rawValue + 3);
  if (v16 >= v15 >> 1) {
    rawuint64_t Value = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, rawValue);
  }
  *((void *)rawValue + 2) = v16 + 1;
  int v17 = &rawValue[32 * v16];
  *((void *)v17 + 4) = v10;
  *((void *)v17 + 5) = v11;
  v17[48] = v12;
  *((void *)v17 + 7) = v13;
  swift_release();
  into->storage._rawuint64_t Value = rawValue;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(unsigned int *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))SearchToolbarItem.ChildEnvironment.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void))PlatformItemListImageRepresentable.PlatformRepresentation.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void))specialized CommandGroup.MakeList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))ClarityUIEnvironment.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void))PlatformItemListTextRepresentable.PlatformRepresentation.value.getter);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance LazySubviewPrefetcher<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

unint64_t lazy protocol witness table accessor for type PressableGestureCallbacks<Bool> and conformance PressableGestureCallbacks<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PressableGestureCallbacks<Bool> and conformance PressableGestureCallbacks<A>;
  if (!lazy protocol witness table cache variable for type PressableGestureCallbacks<Bool> and conformance PressableGestureCallbacks<A>)
  {
    type metadata accessor for PressableGestureCallbacks<Bool>(255, &lazy cache variable for type metadata for PressableGestureCallbacks<Bool>, MEMORY[0x1E4FBB390], (uint64_t)&protocol witness table for Bool, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PressableGestureCallbacks);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PressableGestureCallbacks<Bool> and conformance PressableGestureCallbacks<A>);
  }
  return result;
}

void type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(a4, a5);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v9) {
      atomic_store(OpaqueTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongPressGesture>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    type metadata accessor for CallbacksGesture<PressableGestureCallbacks<Bool>>();
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type CallbacksGesture<PressableGestureCallbacks<Bool>> and conformance CallbacksGesture<A>, (void (*)(uint64_t))type metadata accessor for CallbacksGesture<PressableGestureCallbacks<Bool>>);
    unint64_t v3 = type metadata accessor for ModifierGesture();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA8StaticIfVyAA23GestureContainerFeatureVAaBPAAE012simultaneousF0_9includingQrqd___AA0F4MaskVtAA0F0Rd__lFQOyAA15ModifiedContentVyxAA03AddF8ModifierVyAaLPAAE14truePreferenceyQrqd__mAA0Q3KeyRd__Sb5ValueRtd__lFQOyAA0oF0VyAA09CallbacksF0VyAA09PressablefT033_C70334A42970E36EF599A57E69899EA7LLVySbGGAA09LongPressF0VG_AA013IsCancellablefR0VQo_GG_AA015PrimitiveButtonF0VQo_A10_GAaBHPqd0__AaBHD3_A13_HO_A10_AaBHPxAaBHD1__A9_AA0cO0HPyHCHCHCTm(uint64_t a1, void (*a2)(uint64_t), unint64_t *a3, void (*a4)(uint64_t))
{
  lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(a3, a4);
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for StaticIf();
  swift_getOpaqueTypeConformance2();
  return swift_getWitnessTable();
}

uint64_t lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>()
{
  if (!lazy cache variable for type metadata for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>)
  {
    type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0(255, &lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0, type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongPressGesture>, (unint64_t *)&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongPressGesture> and conformance ModifierGesture<A, B>, type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongPressGesture>);
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongPressGesture>(255);
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongPressGesture> and conformance ModifierGesture<A, B>, type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongPressGesture>);
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = type metadata accessor for AddGestureModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>);
    }
  }
}

{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>)
  {
    type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0();
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>();
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<SpatialLongPressGesture.Value>>, SpatialLongPressGesture>);
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = type metadata accessor for AddGestureModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>);
    }
  }
}

{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>)
  {
    type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0();
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongRemoteTouchGesture>();
    lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongRemoteTouchGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongRemoteTouchGesture>);
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = type metadata accessor for AddGestureModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>);
    }
  }
}

{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>)
  {
    type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0();
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture>();
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture>);
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = type metadata accessor for AddGestureModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>);
    }
  }
}

{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>)
  {
    type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0(255, &lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0, type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, DelayedLongPressGesture>, &lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, DelayedLongPressGesture> and conformance ModifierGesture<A, B>, type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, DelayedLongPressGesture>);
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, DelayedLongPressGesture>(255);
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, DelayedLongPressGesture> and conformance ModifierGesture<A, B>, type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, DelayedLongPressGesture>);
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = type metadata accessor for AddGestureModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>);
    }
  }
}

void type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongPressGesture>(uint64_t a1)
{
}

void type metadata accessor for CallbacksGesture<PressableGestureCallbacks<Bool>>()
{
  if (!lazy cache variable for type metadata for CallbacksGesture<PressableGestureCallbacks<Bool>>)
  {
    type metadata accessor for PressableGestureCallbacks<Bool>(255, &lazy cache variable for type metadata for PressableGestureCallbacks<Bool>, MEMORY[0x1E4FBB390], (uint64_t)&protocol witness table for Bool, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PressableGestureCallbacks);
    lazy protocol witness table accessor for type PressableGestureCallbacks<Bool> and conformance PressableGestureCallbacks<A>();
    unint64_t v0 = type metadata accessor for CallbacksGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CallbacksGesture<PressableGestureCallbacks<Bool>>);
    }
  }
}

void type metadata accessor for PressableGestureCallbacks<Bool>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI25PressableGestureCallbacks33_C70334A42970E36EF599A57E69899EA7LLVySbGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t View.onLongPressGesture(minimumDuration:maximumDistance:pressing:perform:)()
{
  return View.pressableGesture<A>(_:action:pressingAction:)();
}

uint64_t View.pressableGesture<A>(_:action:pressingAction:)()
{
  return StaticIf<>.init(_:then:else:)();
}

uint64_t partial apply for closure #1 in View.pressableGesture<A>(_:action:pressingAction:)(uint64_t (*a1)(void, void, void, void, void, void, void, void, void, void, void))
{
  return a1(v1[7], v1[8], v1[9], v1[10], v1[11], v1[12], v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t closure #1 in View.pressableGesture<A>(_:action:pressingAction:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v55 = a6;
  uint64_t v51 = a1;
  uint64_t v52 = a5;
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v50 = a2;
  uint64_t v53 = a8;
  uint64_t v46 = a11;
  uint64_t v41 = a9;
  uint64_t v54 = 255;
  uint64_t v42 = a7;
  swift_getAssociatedTypeWitness();
  type metadata accessor for PressableGestureCallbacks();
  swift_getWitnessTable();
  type metadata accessor for CallbacksGesture();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for ModifierGesture();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = (ValueMetadata *)MEMORY[0x1E4F40C78];
  uint64_t v56 = v11;
  uint64_t v57 = (ValueMetadata *)MEMORY[0x1E4F40C78];
  uint64_t v14 = (_UNKNOWN **)MEMORY[0x1E4F40C70];
  uint64_t v58 = WitnessTable;
  char v59 = (_UNKNOWN **)MEMORY[0x1E4F40C70];
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v40 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x1F4188790](OpaqueTypeMetadata2);
  int v17 = (char *)&v40 - v16;
  uint64_t v56 = v11;
  uint64_t v57 = v13;
  uint64_t v58 = WitnessTable;
  char v59 = v14;
  swift_getOpaqueTypeConformance2();
  type metadata accessor for AddGestureModifier();
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v47 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v40 - v19;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v63 = v41;
  uint64_t v64 = v21;
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v56 = v18;
  uint64_t v57 = &type metadata for PrimitiveButtonGesture;
  uint64_t v44 = v22;
  uint64_t v58 = v22;
  char v59 = &protocol witness table for PrimitiveButtonGesture;
  uint64_t v23 = swift_getOpaqueTypeMetadata2();
  uint64_t v45 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  int v25 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v43 = (char *)&v40 - v27;
  Gesture<>.callbacks(pressing:pressed:)(0, 0, v48, v49, v42, a10, (uint64_t)v17);
  uint64_t v50 = v20;
  View.gesture<A>(_:including:)();
  uint64_t v28 = v52;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v17, OpaqueTypeMetadata2);
  if (v28)
  {
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v55;
    *(void *)(v29 + 16) = v28;
    *(void *)(v29 + 24) = v30;
    uint64_t v31 = swift_allocObject();
    uint64_t v32 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    *(void *)(v31 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    *(void *)(v31 + 24) = v29;
    swift_retain();
    uint64_t v54 = 1;
    uint64_t v33 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ());
  }
  else
  {
    uint64_t v33 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
  }
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v28, v55);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v32);
  uint64_t v56 = (uint64_t)v33;
  uint64_t v57 = (ValueMetadata *)v31;
  unsigned __int8 v34 = v54;
  LOBYTE(v58) = v54;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  char v59 = (_UNKNOWN **)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  char v62 = 1;
  uint64_t v35 = v44;
  uint64_t v36 = v50;
  View.simultaneousGesture<A>(_:including:)();
  outlined consume of ButtonPressingAction?((uint64_t)v33, v31, v34);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v36, v18);
  uint64_t v56 = v18;
  uint64_t v57 = &type metadata for PrimitiveButtonGesture;
  uint64_t v58 = v35;
  char v59 = &protocol witness table for PrimitiveButtonGesture;
  swift_getOpaqueTypeConformance2();
  uint64_t v37 = v43;
  static ViewBuilder.buildExpression<A>(_:)(v25);
  int v38 = *(void (**)(char *, uint64_t))(v45 + 8);
  v38(v25, v23);
  static ViewBuilder.buildExpression<A>(_:)(v37);
  return ((uint64_t (*)(char *, uint64_t))v38)(v37, v23);
}

uint64_t closure #2 in View.pressableGesture<A>(_:action:pressingAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v35 = a5;
  uint64_t v36 = a6;
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  uint64_t v39 = a1;
  uint64_t v40 = a8;
  uint64_t v32 = a11;
  uint64_t v37 = a2;
  uint64_t v38 = a9;
  uint64_t v31 = a7;
  swift_getAssociatedTypeWitness();
  type metadata accessor for PressableGestureCallbacks();
  swift_getWitnessTable();
  type metadata accessor for CallbacksGesture();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for ModifierGesture();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = MEMORY[0x1E4F40C78];
  uint64_t v43 = v11;
  uint64_t v44 = MEMORY[0x1E4F40C78];
  uint64_t v14 = MEMORY[0x1E4F40C70];
  uint64_t v45 = WitnessTable;
  uint64_t v46 = MEMORY[0x1E4F40C70];
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v16 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x1F4188790](OpaqueTypeMetadata2);
  uint64_t v18 = (char *)&v30 - v17;
  uint64_t v43 = v11;
  uint64_t v44 = v13;
  uint64_t v45 = WitnessTable;
  uint64_t v46 = v14;
  swift_getOpaqueTypeConformance2();
  uint64_t v30 = type metadata accessor for AddGestureModifier();
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  int v25 = (char *)&v30 - v24;
  Gesture<>.callbacks(pressing:pressed:)(v33, v34, v35, v36, v31, a10, (uint64_t)v18);
  uint64_t v26 = v38;
  View.gesture<A>(_:including:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, OpaqueTypeMetadata2);
  uint64_t v27 = swift_getWitnessTable();
  uint64_t v41 = v26;
  uint64_t v42 = v27;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v22);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v20 + 8);
  v28(v22, v19);
  static ViewBuilder.buildExpression<A>(_:)(v25);
  return ((uint64_t (*)(char *, uint64_t))v28)(v25, v19);
}

uint64_t Gesture<>.callbacks(pressing:pressed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v19[5] = a7;
  v19[1] = a5;
  _OWORD v19[2] = a6;
  swift_getAssociatedTypeWitness();
  type metadata accessor for PressableGestureCallbacks();
  v19[3] = swift_getWitnessTable();
  uint64_t v20 = type metadata accessor for CallbacksGesture();
  uint64_t v21 = a5;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v23 = a6;
  uint64_t v13 = type metadata accessor for ModifierGesture();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v19 - v15;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = a4;
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t WitnessTable = (uint64_t)partial apply for closure #1 in static UIView.animate(_:changes:completion:);
  uint64_t v23 = v17;
  outlined copy of AppIntentExecutor?(a1);
  outlined copy of AppIntentExecutor?(a3);
  Gesture.callbacks<A>(_:)();
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a1, a2);
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(partial apply for closure #1 in static UIView.animate(_:changes:completion:), v17);
  swift_getWitnessTable();
  Gesture.cancellable()();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

void *destroy for MenuStyleConfiguration(void *result)
{
  uint64_t v1 = result;
  if (*result) {
    uint64_t result = (void *)swift_release();
  }
  if (v1[2])
  {
    return (void *)swift_release();
  }
  return result;
}

uint64_t type metadata accessor for PressableGestureCallbacks()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined consume of ButtonPressingAction?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return outlined consume of HoverCallback();
  }
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance NavigationDestinationsKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static NavigationDestinationsKey.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance ToolbarContentDescriptor()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for KeyEquivalent()
{
  return &type metadata for KeyEquivalent;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PresentedSceneValueInputModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  void v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance CoordinateSpaceNameModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  void v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void type metadata accessor for _GraphValue<IndexViewPlacementModifier>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for _GraphValue();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CoordinateSpaceNameTransform and conformance CoordinateSpaceNameTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type CoordinateSpaceNameTransform and conformance CoordinateSpaceNameTransform;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceNameTransform and conformance CoordinateSpaceNameTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceNameTransform and conformance CoordinateSpaceNameTransform);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CoordinateSpaceNameTransform and conformance CoordinateSpaceNameTransform;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceNameTransform and conformance CoordinateSpaceNameTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceNameTransform and conformance CoordinateSpaceNameTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentedSceneValueInput and conformance PresentedSceneValueInput()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentedSceneValueInput and conformance PresentedSceneValueInput;
  if (!lazy protocol witness table cache variable for type PresentedSceneValueInput and conformance PresentedSceneValueInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentedSceneValueInput and conformance PresentedSceneValueInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentedSceneValueInput and conformance PresentedSceneValueInput;
  if (!lazy protocol witness table cache variable for type PresentedSceneValueInput and conformance PresentedSceneValueInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentedSceneValueInput and conformance PresentedSceneValueInput);
  }
  return result;
}

uint64_t type metadata completion function for UpdateCollectionViewListCoordinator()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CollectionViewListDataSource();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id @objc UICollectionViewListCoordinatorBase.collectionView(_:cellForItemAt:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a1;
  id v11 = UICollectionViewListCoordinatorBase.collectionView(_:cellForItemAt:)(v9, (uint64_t)v8);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

  return v11;
}

id UICollectionViewListCoordinatorBase.collectionView(_:cellForItemAt:)(void *a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v7 = *MEMORY[0x1E4FBC8C8] & *v2;
  uint64_t v8 = type metadata accessor for ShadowListDataSource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  id v11 = &v22[-v10];
  char v12 = (char *)v3 + *(void *)(v7 + 136);
  swift_beginAccess();
  (*(void (**)(unsigned char *, char *, uint64_t))(v9 + 16))(v11, v12, v8);
  uint64_t v23 = v3;
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  uint64_t v13 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICollectionViewCell);
  uint64_t WitnessTable = swift_getWitnessTable();
  ListCoreDataSource.visitContent<A>(atRow:visitor:)(a2, (uint64_t)partial apply for closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:cellForItemAt:), (uint64_t)v22, v8, v13, WitnessTable, (uint64_t)&v26);
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v15 = v26;
  if ((*((unsigned char *)v3 + *(void *)((*v6 & *v3) + 0xD0)) & 1) == 0) {
    UICollectionViewListCoordinatorBase.mirrorSelection(collectionView:indexPath:)(a1, a2);
  }
  if (v15) {
    return (id)v15;
  }
  static Log.internalWarning(_:)();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v18 = (void *)MEMORY[0x18C115780](0x6C65437974706D45, 0xE90000000000006CLL);
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_registerClass_forCellWithReuseIdentifier_, ObjCClassFromMetadata, v18);

  uint64_t v19 = (void *)MEMORY[0x18C115780](0x6C65437974706D45, 0xE90000000000006CLL);
  swift_bridgeObjectRelease();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v21 = objc_msgSend(a1, sel_dequeueReusableCellWithReuseIdentifier_forIndexPath_, v19, isa);

  return v21;
}

uint64_t ListCoreDataSource.visitContent<A>(atRow:visitor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return ListCoreDataSource.visitContent<A>(atRow:visitor:)(a1, a2, a3, a4, a5, a6, (uint64_t)partial apply for closure #1 in ListCoreDataSource.visitRowAt<A>(_:visitor:), (void (*)(uint64_t, char *, uint64_t, void))_sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF, a7);
}

{
  return ListCoreDataSource.visitContent<A>(atRow:visitor:)(a1, a2, a3, a4, a5, a6, (uint64_t)partial apply for closure #1 in ListCoreDataSource.visitRowAt<A>(_:visitor:), (void (*)(uint64_t, char *, uint64_t, void))_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF, a7);
}

void UICollectionViewListCoordinatorBase.updateListContents(_:)(void *a1)
{
  unint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v4 = *(void *)(*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v1) + 0x70) + 8);
  uint64_t v127 = *(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v1) + 0x60);
  uint64_t v126 = v4;
  uint64_t v131 = type metadata accessor for ShadowListDataSource();
  uint64_t v108 = *(void *)(v131 - 8);
  MEMORY[0x1F4188790](v131);
  uint64_t v133 = (char *)v106 - v5;
  _s10Foundation9IndexPathVSgMaTm_1(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  char v124 = (char *)v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v113 = (uint64_t)v106 - v9;
  MEMORY[0x1F4188790](v10);
  char v12 = (char *)v106 - v11;
  uint64_t v13 = type metadata accessor for IndexPath();
  uint64_t v110 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v114 = (char *)v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v112 = (char *)v106 - v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v106 - v18;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)v106 - v21;
  UICollectionViewListCoordinatorBase.clearDataSourceUpdates()();
  *(unsigned char *)(v1 + *(void *)((*v3 & *(void *)v1) + 0xD0)) = 0;
  unint64_t v132 = a1;
  id v23 = objc_msgSend(a1, sel_preparedCells);
  if (!v23) {
    goto LABEL_58;
  }
  uint64_t v24 = v23;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICollectionViewCell);
  unint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v25 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v116 = (void *)v1;
  if (!v26)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t v41 = &selRef_setObscuresBackgroundDuringPresentation_;
    id v115 = (id)*MEMORY[0x1E4FB2770];
    id v42 = objc_msgSend(v132, sel_indexPathsForVisibleSupplementaryElementsOfKind_);
    uint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v44 = *(void *)(v43 + 16);
    uint64_t v45 = v113;
    if (v44)
    {
      uint64_t v46 = v116;
      uint64_t v47 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)v46
                                                                    + *(void *)((*MEMORY[0x1E4FBC8C8] & *v46) + 0x88));
      uint64_t v48 = (void *)((char *)v46 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v46) + 0xA0));
      uint64_t v49 = v110;
      unint64_t v50 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
      v106[2] = v43;
      unint64_t v51 = v43 + v50;
      uint64_t v129 = v47;
      swift_beginAccess();
      char v107 = v48;
      swift_beginAccess();
      uint64_t v52 = *(void (**)(uint64_t, unint64_t, uint64_t))(v49 + 16);
      v49 += 16;
      char v122 = v52;
      uint64_t v119 = *(uint64_t (***)(char *, void, uint64_t))(v49 + 56);
      BOOL v120 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 32);
      uint64_t v118 = (void (**)(char *, uint64_t, uint64_t))(v49 + 16);
      uint64_t v128 = (void (**)(char *, void (**)(char *, uint64_t, uint64_t, uint64_t), uint64_t))(v108 + 16);
      char v125 = (void (**)(char *, uint64_t))(v108 + 8);
      uint64_t v123 = (void *)v49;
      uint64_t v117 = (void (**)(char *, uint64_t))(v49 - 8);
      uint64_t v121 = (char *)(v49 + 40);
      v106[1] = (v49 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      uint64_t v53 = v112;
      v52(v45, v51, v13);
      while (1)
      {
        uint64_t v58 = *(void (**)(void, void, void, void))v121;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))v121)(v45, 0, 1, v13);
        if ((*v120)(v45, 1, v13) == 1)
        {
          uint64_t v41 = &selRef_setObscuresBackgroundDuringPresentation_;
          goto LABEL_32;
        }
        uint64_t v130 = v58;
        (*v118)(v53, v45, v13);
        char v59 = *v128;
        uint64_t v60 = v133;
        uint64_t v61 = v131;
        (*v128)(v133, v129, v131);
        Swift::Int v62 = IndexPath.section.getter();
        swift_getWitnessTable();
        LOBYTE(v62) = ListDiffable.hasHeader(forSectionAtOffset:)(v62);
        uint64_t v63 = (unsigned int (*)(char *, uint64_t, uint64_t))*v125;
        (*v125)(v60, v61);
        if (v62)
        {
          id v64 = v115;
          Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
          id v66 = objc_msgSend(v132, sel_supplementaryViewForElementKind_atIndexPath_, v64, isa);

          if (v66)
          {
            swift_getAssociatedTypeWitness();
            int v67 = (uint64_t *)swift_dynamicCastUnknownClass();
            if (v67)
            {
              uint64_t v109 = v67;
              uint64_t v54 = v131;
              v59(v133, v129, v131);
              uint64_t v55 = *v107;
              outlined copy of Transaction?(*v107);
              uint64_t v53 = v112;
              uint64_t v56 = IndexPath.section.getter();
              uint64_t WitnessTable = swift_getWitnessTable();
              ListCoreDataSource.configureHeader(_:transaction:forSectionAtOffset:)((uint64_t)v109, v55, v56, v54, WitnessTable);
              outlined consume of Transaction?(v55);

              ((void (*)(char *, uint64_t))v63)(v133, v54);
              uint64_t v45 = v113;
            }
            else
            {

              uint64_t v45 = v113;
              uint64_t v53 = v112;
            }
          }
        }
        (*v117)(v53, v13);
        v51 += (unint64_t)v119;
        if (!--v44) {
          break;
        }
        v122(v45, v51, v13);
      }
      uint64_t v58 = v130;
      uint64_t v41 = &selRef_setObscuresBackgroundDuringPresentation_;
      v130(v45, 1, 1, v13);
    }
    else
    {
      uint64_t v58 = *(void (**)(void, void, void, void))(v110 + 56);
      v58(v113, 1, 1, v13);
    }
LABEL_32:
    swift_bridgeObjectRelease();
    long long v68 = v41[292];
    id v115 = (id)*MEMORY[0x1E4FB2760];
    id v69 = [v132 v68];
    uint64_t v70 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v112 = (char *)v70;
    uint64_t v71 = *(void *)(v70 + 16);
    long long v72 = v114;
    if (v71)
    {
      int v73 = v116;
      uint64_t v74 = (void *)((char *)v73 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v73) + 0xA0));
      uint64_t v75 = v110;
      uint64_t v76 = &v112[(*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80)];
      uint64_t v129 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)v73
                                                                     + *(void *)((*MEMORY[0x1E4FBC8C8] & *v73) + 0x88));
      swift_beginAccess();
      uint64_t v109 = v74;
      swift_beginAccess();
      uint64_t v77 = *(void (**)(uint64_t, unint64_t, uint64_t))(v75 + 16);
      v75 += 16;
      char v122 = v77;
      uint64_t v119 = *(uint64_t (***)(char *, void, uint64_t))(v75 + 56);
      uint64_t v121 = (char *)(v75 + 40);
      BOOL v120 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 32);
      uint64_t v118 = (void (**)(char *, uint64_t, uint64_t))(v75 + 16);
      uint64_t v128 = (void (**)(char *, void (**)(char *, uint64_t, uint64_t, uint64_t), uint64_t))(v108 + 16);
      char v125 = (void (**)(char *, uint64_t))(v108 + 8);
      uint64_t v123 = (void *)v75;
      uint64_t v117 = (void (**)(char *, uint64_t))(v75 - 8);
      uint64_t v130 = v58;
      while (1)
      {
        uint64_t v82 = v124;
        v122((uint64_t)v124, (unint64_t)v76, v13);
        v58(v82, 0, 1, v13);
        if ((*v120)((uint64_t)v82, 1, v13) == 1) {
          break;
        }
        (*v118)(v72, (uint64_t)v82, v13);
        uint64_t v83 = *v128;
        uint64_t v84 = v133;
        uint64_t v85 = v131;
        (*v128)(v133, v129, v131);
        Swift::Int v86 = IndexPath.section.getter();
        swift_getWitnessTable();
        LOBYTE(v86) = ListDiffable.hasFooter(forSectionAtOffset:)(v86);
        uint64_t v87 = (unsigned int (*)(char *, uint64_t, uint64_t))*v125;
        (*v125)(v84, v85);
        if (v86)
        {
          id v88 = v115;
          Class v89 = IndexPath._bridgeToObjectiveC()().super.isa;
          id v90 = objc_msgSend(v132, sel_supplementaryViewForElementKind_atIndexPath_, v88, v89);

          if (v90)
          {
            swift_getAssociatedTypeWitness();
            uint64_t v91 = swift_dynamicCastUnknownClass();
            if (v91)
            {
              uint64_t v113 = v91;
              uint64_t v78 = v131;
              v83(v133, v129, v131);
              uint64_t v79 = *v109;
              outlined copy of Transaction?(*v109);
              long long v72 = v114;
              uint64_t v80 = IndexPath.section.getter();
              uint64_t v81 = swift_getWitnessTable();
              ListCoreDataSource.configureFooter(_:transaction:forSectionAtOffset:)(v113, v79, v80, v78, v81);
              outlined consume of Transaction?(v79);

              ((void (*)(char *, uint64_t))v87)(v133, v78);
            }
            else
            {

              long long v72 = v114;
            }
          }
        }
        (*v117)(v72, v13);
        uint64_t v76 = (char *)v119 + (void)v76;
        --v71;
        uint64_t v58 = v130;
        if (!v71) {
          goto LABEL_41;
        }
      }
    }
    else
    {
LABEL_41:
      v58(v124, 1, 1, v13);
    }
    swift_bridgeObjectRelease();
    uint64_t v92 = (void *)MEMORY[0x18C115780](0xD000000000000011, 0x80000001883361A0);
    swift_bridgeObjectRelease();
    id v93 = objc_msgSend(v132, sel_visibleSupplementaryViewsOfKind_, v92);

    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionReusableView);
    unint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v94 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v94 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v22 = (char *)v116;
    if (!v94)
    {
      swift_bridgeObjectRelease();
      return;
    }
    if ((v1 & 0xC000000000000001) != 0) {
      goto LABEL_56;
    }
    if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v95 = *(id *)(v1 + 32);
      goto LABEL_48;
    }
    __break(1u);
LABEL_58:
    __break(1u);
    return;
  }
  uint64_t v27 = *(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v1) + 0x88);
  if (v26 >= 1)
  {
    uint64_t v130 = (void (*)(void, void, void, void))(v25 & 0xC000000000000001);
    BOOL v120 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + v27);
    swift_beginAccess();
    uint64_t v28 = 0;
    uint64_t v128 = (void (**)(char *, void (**)(char *, uint64_t, uint64_t, uint64_t), uint64_t))(v110 + 32);
    uint64_t v129 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v110 + 56);
    char v125 = (void (**)(char *, uint64_t))(v110 + 48);
    uint64_t v119 = (uint64_t (**)(char *, void, uint64_t))(v108 + 16);
    uint64_t v118 = (void (**)(char *, uint64_t, uint64_t))(v108 + 8);
    char v122 = (void (*)(uint64_t, unint64_t, uint64_t))(v110 + 8);
    uint64_t v117 = (void (**)(char *, uint64_t))(MEMORY[0x1E4FBC848] + 8);
    uint64_t v121 = v19;
    uint64_t v111 = v13;
    while (1)
    {
      if (v130) {
        id v29 = (id)MEMORY[0x18C117680](v28, v25);
      }
      else {
        id v29 = *(id *)(v25 + 8 * v28 + 32);
      }
      uint64_t v30 = v29;
      id v31 = objc_msgSend(v132, sel_indexPathForCell_, v29);
      if (v31)
      {
        uint64_t v32 = v31;
        static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v33 = *v128;
        (*v128)(v12, (void (**)(char *, uint64_t, uint64_t, uint64_t))v19, v13);
        (*v129)(v12, 0, 1, v13);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))*v125)(v12, 1, v13) != 1)
        {
          v33(v22, (void (**)(char *, uint64_t, uint64_t, uint64_t))v12, v13);
          swift_getAssociatedTypeWitness();
          uint64_t v34 = swift_dynamicCastUnknownClass();
          if (v34)
          {
            uint64_t v35 = v34;
            uint64_t v36 = v131;
            uint64_t v37 = (*v119)(v133, v120, v131);
            uint64_t v123 = v106;
            MEMORY[0x1F4188790](v37);
            v106[-2] = v116;
            v106[-1] = v35;
            id v38 = v30;
            uint64_t v39 = swift_getWitnessTable();
            uint64_t v13 = v111;
            ListCoreDataSource.visitContent<A>(atRow:visitor:)((uint64_t)v22, (uint64_t)partial apply for closure #1 in UICollectionViewListCoordinatorBase.updateListContents(_:), (uint64_t)&v106[-4], v36, (uint64_t)v117, v39, (uint64_t)v134);
            uint64_t v40 = v36;
            uint64_t v19 = v121;
            ((void (*)(char *, uint64_t))*v118)(v133, v40);
            UICollectionViewListCoordinatorBase.mirrorSelection(collectionView:indexPath:)(v132, (uint64_t)v22);
          }
          else
          {
          }
          (*(void (**)(char *, uint64_t))v122)(v22, v13);
          goto LABEL_9;
        }
      }
      else
      {
        (*v129)(v12, 1, 1, v13);
      }

      _s10Foundation9IndexPathVSgWOhTm_0((uint64_t)v12, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
LABEL_9:
      if (v26 == ++v28) {
        goto LABEL_19;
      }
    }
  }
  __break(1u);
LABEL_56:
  id v95 = (id)MEMORY[0x18C117680](0, v1);
LABEL_48:
  uint64_t v96 = v95;
  swift_bridgeObjectRelease();
  type metadata accessor for TableGlobalHeader();
  uint64_t v97 = swift_dynamicCastClass();
  if (v97)
  {
    uint64_t v98 = v97;
    double v99 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v100 = &v22[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v22) + 0x88)];
    swift_beginAccess();
    uint64_t v101 = v133;
    uint64_t v102 = v108;
    uint64_t v103 = v131;
    (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v133, v100, v131);
    uint64_t v104 = (uint64_t *)&v22[*(void *)((*v99 & *(void *)v22) + 0xA0)];
    swift_beginAccess();
    uint64_t v105 = *v104;
    outlined copy of Transaction?(v105);
    ShadowListDataSource.configureGlobalHeader(_:transaction:)(v98, v105, v103);
    outlined consume of Transaction?(v105);

    (*(void (**)(char *, uint64_t))(v102 + 8))(v101, v103);
  }
  else
  {
  }
}

uint64_t ListCoreDataSource.visitContent<A>(atRow:visitor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(uint64_t, char *, uint64_t, void)@<X7>, uint64_t a9@<X8>)
{
  uint64_t v26 = a8;
  uint64_t v27 = a5;
  uint64_t v28 = a7;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v22 = a1;
  uint64_t v23 = a9;
  uint64_t v11 = *(void *)(a6 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v21 - v14;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v21 - v18;
  ListDiffable.rowIndex(at:)((uint64_t)&v21 - v18, (uint64_t)v15, v22, a4, v11);
  ListCoreDataSource.visitRowAt<A>(_:visitor:)((uint64_t)v19, (uint64_t)v15, v24, v25, a4, v27, a6, v28, v23, v26);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t UICollectionViewListCoordinatorBase.clearDataSourceUpdates()()
{
  unint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v9 - v5;
  swift_beginAccess();
  type metadata accessor for ListCoreBatchUpdates();
  ListCoreBatchUpdates.resetAll()();
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v6, 1, 1, v2);
  uint64_t v7 = (char *)v0 + *(void *)((*v1 & *v0) + 0xC8);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 40))(v7, v6, v3);
  return swift_endAccess();
}

Swift::Void __swiftcall UpdateCollectionViewListCoordinator.updateValue()()
{
  uint64_t v206 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v174 = *(void *)(v0 + 24);
  uint64_t v186 = v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v171 = AssociatedTypeWitness;
  uint64_t v4 = type metadata accessor for CollectionViewListDataSource();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v178 = *(void *)(v5 - 8);
  uint64_t v179 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v166 = (char *)&v162 - v6;
  uint64_t v164 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v163 = (char *)&v162 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Binding();
  uint64_t v167 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v162 = (char *)&v162 - v10;
  uint64_t v168 = v11;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v180 = *(void *)(v12 - 8);
  uint64_t v181 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v175 = (uint64_t)&v162 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v165 = (uint64_t)&v162 - v15;
  uint64_t v183 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v162 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  unint64_t v172 = (_OWORD *)((char *)&v162 - v20);
  MEMORY[0x1F4188790](v21);
  long long v182 = (char *)&v162 - v22;
  uint64_t v23 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v169 = (char *)&v162 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v162 - v27;
  type metadata accessor for ViewList();
  uint64_t Value = AGGraphGetValue();
  char v31 = v30;
  outlined init with copy of TableColumnList(Value, (uint64_t)v205);
  long long v187 = v1;
  uint64_t v32 = AGGraphGetValue();
  char v34 = v33;
  uint64_t v173 = v24;
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v176 = v28;
  uint64_t v177 = v23;
  v35(v28, v32, v23);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v184 = v4;
  *(void *)&long long v198 = v4;
  *((void *)&v198 + 1) = v2;
  uint64_t v37 = v174;
  uint64_t v199 = WitnessTable;
  uint64_t v200 = v174;
  uint64_t v185 = type metadata accessor for UICollectionViewListCoordinator();
  if (!AGGraphGetOutputValue() || (v31 & 1) != 0 || (v34 & 1) != 0)
  {
    uint64_t v45 = (void (*)(char *, char *, uint64_t))v35;
    outlined init with copy of TableColumnList((uint64_t)v205, (uint64_t)&v191);
    id v46 = *(id *)((char *)v187 + *(int *)(v186 + 104));
    LOBYTE(v188) = 0;
    ListSectionInfo.init(list:listAttribute:contentSubgraph:)((uint64_t)&v191, v46, (uint64_t)&v198);
    uint64_t v47 = v165;
    UpdateCollectionViewListCoordinator.selection.getter(v165);
    uint64_t v49 = v167;
    uint64_t v48 = v168;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v167 + 48))(v47, 1, v168))
    {
      uint64_t v166 = *(char **)(v180 + 8);
      ((void (*)(uint64_t, uint64_t))v166)(v47, v181);
      char v50 = 0;
    }
    else
    {
      unint64_t v51 = v162;
      (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v162, v47, v48);
      uint64_t v166 = *(char **)(v180 + 8);
      ((void (*)(uint64_t, uint64_t))v166)(v47, v181);
      uint64_t v52 = v163;
      MEMORY[0x18C113DA0](v48);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v48);
      char v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 64))(v2, v37);
      (*(void (**)(char *, uint64_t))(v164 + 8))(v52, v2);
    }
    outlined init with copy of ListSectionInfo((uint64_t)&v198, (uint64_t)&v191);
    uint64_t v53 = (uint64_t)v169;
    v45(v169, v176, v177);
    _sSay7SwiftUI0A19UIAnySortComparatorVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E4FBC958], MEMORY[0x1E4FBB718]);
    uint64_t v54 = AGGraphGetValue();
    uint64_t v55 = *(void *)v54;
    char v56 = *(unsigned char *)(v54 + 8);
    double v57 = *(double *)AGGraphGetValue();
    UpdateCollectionViewListCoordinator.environment.getter(&v188);
    long long v190 = v188;
    uint64_t v58 = v172;
    CollectionViewListDataSource.init(sectionInfo:style:allowsMultipleSelection:minRowHeight:minHeaderHeight:environment:)(&v191, v53, v50 & 1, v55, v56, (uint64_t *)&v190, v172, v57);
    uint64_t v59 = (uint64_t)v182;
    uint64_t v60 = v183;
    uint64_t v61 = v184;
    (*(void (**)(char *, _OWORD *, uint64_t))(v183 + 16))(v182, v58, v184);
    Outputuint64_t Value = AGGraphGetOutputValue();
    LODWORD(v174) = OutputValue != 0;
    if (OutputValue)
    {
      (*(void (**)(_OWORD *, uint64_t))(v60 + 8))(v58, v61);
    }
    else
    {
      uint64_t v63 = v175;
      id v64 = (char *)v186;
      UpdateCollectionViewListCoordinator.selection.getter(v175);
      UpdateCollectionViewListCoordinator.editMode.getter((uint64_t)&v191);
      long long v188 = v191;
      char v189 = v192;
      id v65 = specialized UICollectionViewListCoordinator.__allocating_init(dataSource:selection:editMode:transaction:)(v59, v63, &v188, 1);
      uint64_t v66 = ((uint64_t (*)(uint64_t, uint64_t))v166)(v63, v181);
      *(void *)&long long v191 = v65;
      MEMORY[0x1F4188790](v66);
      *(&v162 - 2) = v64;
      *(&v162 - 1) = (char *)swift_getWitnessTable();
      id v67 = v65;
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v191, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v162 - 4), v185, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v68);

      (*(void (**)(_OWORD *, uint64_t))(v60 + 8))(v172, v61);
    }
    outlined destroy of ListSectionInfo((uint64_t)&v198);
LABEL_13:
    id v69 = (void *)AGGraphGetOutputValue();
    if (v69)
    {
      uint64_t v70 = (unsigned __int8 *)(*v69 + *(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)*v69) + 0x108));
      int v71 = *v70;
      uint64_t v72 = *((void *)v70 + 1);
      unsigned __int8 v73 = v70[16];
      uint64_t v74 = *((void *)v70 + 3);
      unsigned __int8 v75 = v70[32];
      uint64_t v76 = *((void *)v70 + 5);
      unsigned __int8 v77 = v70[48];
      uint64_t v78 = *((void *)v70 + 7);
      unsigned __int8 v79 = v70[64];
      uint64_t v80 = (unsigned __int8 *)AGGraphGetValue();
      if (v71 != *v80) {
        goto LABEL_17;
      }
      unsigned __int8 v81 = v80[64];
      uint64_t v82 = *((void *)v80 + 7);
      unsigned __int8 v83 = v80[48];
      uint64_t v84 = *((void *)v80 + 5);
      unsigned __int8 v85 = v80[32];
      uint64_t v86 = *((void *)v80 + 3);
      unsigned __int8 v87 = v80[16];
      uint64_t v88 = *((void *)v80 + 1);
      *(void *)&long long v198 = v72;
      BYTE8(v198) = v73;
      uint64_t v199 = v74;
      LOBYTE(v200) = v75;
      uint64_t v201 = v76;
      unsigned __int8 v202 = v77;
      uint64_t v203 = v78;
      unsigned __int8 v204 = v79;
      *(void *)&long long v191 = v88;
      BYTE8(v191) = v87;
      uint64_t v192 = v86;
      unsigned __int8 v193 = v85;
      uint64_t v194 = v84;
      unsigned __int8 v195 = v83;
      uint64_t v196 = v82;
      unsigned __int8 v197 = v81;
      if (MEMORY[0x18C110940](&v198, &v191))
      {
        int v89 = 0;
        id v90 = v187;
        uint64_t v91 = (uint64_t *)MEMORY[0x1E4FBC8C8];
      }
      else
      {
LABEL_17:
        uint64_t v92 = (void **)AGGraphGetOutputValue();
        if (!v92)
        {
          __break(1u);
          goto LABEL_75;
        }
        id v93 = *v92;
        id v90 = v187;
        uint64_t v94 = AGGraphGetValue();
        char v95 = *(unsigned char *)v94;
        uint64_t v96 = *(void *)(v94 + 8);
        char v97 = *(unsigned char *)(v94 + 16);
        uint64_t v98 = *(void *)(v94 + 24);
        char v99 = *(unsigned char *)(v94 + 32);
        uint64_t v100 = *(void *)(v94 + 40);
        char v101 = *(unsigned char *)(v94 + 48);
        uint64_t v102 = *(void *)(v94 + 56);
        LOBYTE(v94) = *(unsigned char *)(v94 + 64);
        uint64_t v91 = (uint64_t *)MEMORY[0x1E4FBC8C8];
        uint64_t v103 = (char *)v93 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v93) + 0x108);
        *uint64_t v103 = v95;
        *((void *)v103 + 1) = v96;
        v103[16] = v97;
        *((void *)v103 + 3) = v98;
        v103[32] = v99;
        *((void *)v103 + 5) = v100;
        v103[48] = v101;
        *((void *)v103 + 7) = v102;
        v103[64] = v94;
        int v89 = 1;
      }
      uint64_t v104 = (void **)AGGraphGetOutputValue();
      if (v104)
      {
        uint64_t v105 = *v104;
        uint64_t v106 = v175;
        UpdateCollectionViewListCoordinator.selection.getter(v175);
        char v107 = (char *)v105 + *(void *)((*v91 & *v105) + 0x100);
        swift_beginAccess();
        uint64_t v108 = *(void (**)(char *, uint64_t, uint64_t))(v180 + 40);
        uint64_t v109 = v105;
        v108(v107, v106, v181);
        swift_endAccess();

        uint64_t v110 = (void **)AGGraphGetOutputValue();
        if (v110)
        {
          uint64_t v111 = *v110;
          UpdateCollectionViewListCoordinator.editMode.getter((uint64_t)&v198);
          char v112 = v199;
          uint64_t v113 = (char *)v111 + *(void *)((*v91 & *v111) + 0x110);
          uint64_t v114 = *(void *)v113;
          uint64_t v115 = *((void *)v113 + 1);
          *(_OWORD *)uint64_t v113 = v198;
          v113[16] = v112;
          outlined consume of Binding<NavigationSplitViewColumn>?(v114, v115);
          uint64_t v116 = (void **)AGGraphGetOutputValue();
          if (v116)
          {
            uint64_t v117 = *v116;
            uint64_t v118 = AGGraphGetValue();
            char v119 = *(unsigned char *)(v118 + 8);
            char v120 = *(unsigned char *)(v118 + 9);
            uint64_t v121 = (char *)v117 + *(void *)((*v91 & *v117) + 0xF0);
            *(void *)uint64_t v121 = *(void *)v118;
            v121[8] = v119;
            v121[9] = v120;
            char v122 = (void *)AGGraphGetOutputValue();
            if (v122)
            {
              uint64_t v123 = *v122 + *(void *)((*v91 & *(void *)*v122) + 0x138);
              char v124 = *(unsigned char *)(v123 + 8);
              _sSay7SwiftUI0A19UIAnySortComparatorVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E4FBC958], MEMORY[0x1E4FBB718]);
              uint64_t v125 = AGGraphGetValue();
              double v126 = *(double *)v125;
              char v127 = *(unsigned char *)(v125 + 8);
              if (v124)
              {
                if (*(unsigned char *)(v125 + 8)) {
                  goto LABEL_31;
                }
              }
              else
              {
                if (*(double *)v123 == v126) {
                  char v128 = *(unsigned char *)(v125 + 8);
                }
                else {
                  char v128 = 1;
                }
                if ((v128 & 1) == 0)
                {
LABEL_31:
                  uint64_t v129 = (void *)AGGraphGetOutputValue();
                  if (v129)
                  {
                    uint64_t v130 = *v91;
                    uint64_t v131 = *v129 + *(void *)((*v91 & *(void *)*v129) + 0x130);
                    if (*(unsigned char *)(v131 + 9))
                    {
                      BOOL v132 = 1;
                      double v133 = 0.0;
                    }
                    else
                    {
                      double v134 = *(double *)v131;
                      if (*(unsigned char *)(v131 + 8))
                      {
                        BOOL v132 = *(void *)&v134 == 0;
                        if (v134 == 0.0) {
                          double v133 = 0.0;
                        }
                        else {
                          double v133 = 12.0;
                        }
                      }
                      else
                      {
                        BOOL v132 = 0;
                        double v133 = *(double *)v131;
                      }
                    }
                    _sSay7SwiftUI0A19UIAnySortComparatorVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for ListSectionSpacing?, (uint64_t)&type metadata for ListSectionSpacing, MEMORY[0x1E4FBB718]);
                    uint64_t v135 = AGGraphGetValue();
                    if (*(unsigned char *)(v135 + 9))
                    {
                      if (v132) {
                        goto LABEL_54;
                      }
                      goto LABEL_52;
                    }
                    double v136 = *(double *)v135;
                    if (*(unsigned char *)(v135 + 8))
                    {
                      BOOL v137 = *(void *)&v136 == 0;
                      double v138 = 12.0;
                      if (v136 == 0.0) {
                        double v138 = 0.0;
                      }
                      if (v132)
                      {
                        if (v136 != 0.0) {
                          goto LABEL_52;
                        }
                        goto LABEL_54;
                      }
                    }
                    else
                    {
                      if (v132) {
                        goto LABEL_52;
                      }
                      BOOL v137 = 0;
                      double v138 = *(double *)v135;
                    }
                    if (v137 || v133 != v138)
                    {
LABEL_52:
                      uint64_t v139 = (void **)AGGraphGetOutputValue();
                      if (v139)
                      {
                        uint64_t v140 = *v139;
                        uint64_t v141 = AGGraphGetValue();
                        char v142 = *(unsigned char *)(v141 + 8);
                        char v143 = *(unsigned char *)(v141 + 9);
                        uint64_t v144 = (char *)v140 + *(void *)((*v140 & v130) + 0x130);
                        *(void *)uint64_t v144 = *(void *)v141;
                        v144[8] = v142;
                        v144[9] = v143;
                        int v89 = 1;
                        goto LABEL_54;
                      }
LABEL_75:
                      __break(1u);
LABEL_76:
                      __break(1u);
                      goto LABEL_77;
                    }
LABEL_54:
                    char v145 = (void **)AGGraphGetOutputValue();
                    if (v145)
                    {
                      uint64_t v146 = *v145;
                      *((unsigned char *)v146 + *(void *)((*v91 & *v146) + 0x120)) = *(unsigned char *)AGGraphGetValue();
                      uint64_t v147 = AGGraphGetOutputValue();
                      uint64_t v149 = v183;
                      uint64_t v148 = v184;
                      uint64_t v150 = (uint64_t)v182;
                      if (v147)
                      {
                        UICollectionViewListCoordinatorBase.selectionStorage.setter(v90[6], v90[7], v90[8], v90[9]);
                        uint64_t v151 = (void **)AGGraphGetOutputValue();
                        if (v151)
                        {
                          uint64_t v152 = *v151;
                          *((unsigned char *)v152 + *(void *)((*v91 & *v152) + 0x140)) = *(unsigned char *)AGGraphGetValue();
                          uint64_t v153 = (void **)AGGraphGetOutputValue();
                          if (v153)
                          {
                            uint64_t v154 = *v153;
                            *((unsigned char *)v154 + *(void *)((*v91 & *v154) + 0x148)) = *(unsigned char *)AGGraphGetValue();
                            uint64_t v155 = (void *)MEMORY[0x18C119DF0](v90 + 12);
                            if (!v155)
                            {
LABEL_63:
                              (*(void (**)(char *, uint64_t))(v173 + 8))(v176, v177);
                              __swift_destroy_boxed_opaque_existential_1((uint64_t)v205);
                              uint64_t v161 = (char *)v90 + *(int *)(v186 + 100);
                              (*(void (**)(char *, uint64_t))(v178 + 8))(v161, v179);
                              (*(void (**)(char *, uint64_t, uint64_t))(v149 + 32))(v161, v150, v148);
                              (*(void (**)(char *, void, uint64_t, uint64_t))(v149 + 56))(v161, 0, 1, v148);
                              return;
                            }
                            uint64_t v156 = v155;
                            if (v89)
                            {
                              id v157 = objc_msgSend(v155, sel_collectionViewLayout);
                              objc_msgSend(v157, sel_invalidateLayout);
                            }
                            long long v158 = (id *)AGGraphGetOutputValue();
                            if (v158)
                            {
                              id v159 = *v158;
                              AGGraphClearUpdate();
                              uint64_t v160 = *(void *)AGGraphGetValue();
                              swift_retain();
                              AGGraphSetUpdate();
                              UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(v156, v150, v160, v174);

                              swift_release();
                              goto LABEL_63;
                            }
                            goto LABEL_76;
                          }
LABEL_73:
                          __break(1u);
                        }
LABEL_72:
                        __break(1u);
                        goto LABEL_73;
                      }
LABEL_71:
                      __break(1u);
                      goto LABEL_72;
                    }
LABEL_70:
                    __break(1u);
                    goto LABEL_71;
                  }
LABEL_69:
                  __break(1u);
                  goto LABEL_70;
                }
              }
              *(double *)uint64_t v123 = v126;
              *(unsigned char *)(v123 + 8) = v127;
              int v89 = 1;
              goto LABEL_31;
            }
LABEL_68:
            __break(1u);
            goto LABEL_69;
          }
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_66;
  }
  id v38 = v166;
  (*(void (**)(char *, char *, uint64_t))(v178 + 16))(v166, (char *)v187 + *(int *)(v186 + 100), v179);
  uint64_t v39 = v183;
  uint64_t v40 = v184;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v183 + 48))(v38, 1, v184) != 1)
  {
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    v41(v18, v38, v40);
    _sSay7SwiftUI0A19UIAnySortComparatorVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E4FBC958], MEMORY[0x1E4FBB718]);
    uint64_t v42 = AGGraphGetValue();
    char v43 = *(unsigned char *)(v42 + 8);
    uint64_t v44 = &v18[*(int *)(v40 + 52)];
    *(void *)uint64_t v44 = *(void *)v42;
    v44[8] = v43;
    *(void *)&v18[*(int *)(v40 + 56)] = *(void *)AGGraphGetValue();
    v41(v182, v18, v40);
    LODWORD(v174) = 0;
    goto LABEL_13;
  }
LABEL_77:
  __break(1u);
}

uint64_t getEnumTagSinglePayload for CollectionViewListDataSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187739918);
}

uint64_t storeEnumTagSinglePayload for CollectionViewListDataSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1877399C8);
}

uint64_t type metadata accessor for CollectionViewListDataSource()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for UICollectionViewListCoordinator()
{
  return swift_getGenericMetadata();
}

uint64_t UpdateCollectionViewListCoordinator.selection.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Binding();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t UpdateCollectionViewListCoordinator.editMode.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Binding<EditMode>?();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(void *)Value;
  uint64_t v3 = *(void *)(Value + 8);
  *(void *)a1 = *(void *)Value;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(Value + 16);

  return outlined copy of Binding<NavigationSplitViewColumn>?(v4, v3);
}

void type metadata accessor for Binding<EditMode>?()
{
  if (!lazy cache variable for type metadata for Binding<EditMode>?)
  {
    type metadata accessor for _GraphValue<OnChangeOfSuggestionsModifier>(255, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode, MEMORY[0x1E4F41638]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>?);
    }
  }
}

uint64_t UICollectionViewListCoordinatorBase.selectionStorage.setter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)((char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x118));
  *uint64_t v5 = result;
  v5[1] = a2;
  v5[2] = a3;
  void v5[3] = a4;
  return result;
}

Swift::Void __swiftcall ListCoreBatchUpdates.resetAll()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  IndexSet.removeAll()();
  IndexSet.removeAll()();
  uint64_t v4 = (uint64_t *)(v1 + v3[10]);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *v4;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v6 + 16));
  }
  else
  {
    *uint64_t v4 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v6 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = (size_t *)(v2 + v3[11]);
  int v8 = swift_isUniquelyReferenced_nonNull_native();
  size_t v9 = *v7;
  if (v8)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v9 + 16));
  }
  else
  {
    size_t *v7 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v9 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = (size_t *)(v2 + v3[12]);
  int v11 = swift_isUniquelyReferenced_nonNull_native();
  size_t v12 = *v10;
  if (v11)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v12 + 16));
  }
  else
  {
    *uint64_t v10 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v12 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = (size_t *)(v2 + v3[13]);
  int v14 = swift_isUniquelyReferenced_nonNull_native();
  size_t v15 = *v13;
  if (v14)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v15 + 16));
  }
  else
  {
    *uint64_t v13 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v15 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  IndexSet.removeAll()();
}

size_t specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(void))
{
  if (a2 <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = a2;
  }
  if (!v5) {
    return MEMORY[0x1E4FBC860];
  }
  type metadata accessor for _ContiguousArrayStorage<(source: IndexPath, destination: IndexPath)>(0, a3, a4, MEMORY[0x1E4FBBE00]);
  uint64_t v8 = *(void *)(a5(0) - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  int v11 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size_2(v11);
  if (v9)
  {
    if (result - v10 != 0x8000000000000000 || v9 != -1)
    {
      v11[2] = a1;
      v11[3] = 2 * ((uint64_t)(result - v10) / v9);
      return (size_t)v11;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

size_t specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, &lazy cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, MEMORY[0x1E4F27DE8], MEMORY[0x1E4F27DE8]);
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, &lazy cache variable for type metadata for _ContiguousArrayStorage<(source: IndexPath, destination: IndexPath)>, (uint64_t (*)(uint64_t))type metadata accessor for (source: IndexPath, destination: IndexPath), (uint64_t (*)(void))type metadata accessor for (source: IndexPath, destination: IndexPath));
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, &lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.HostedViewState.Key>, type metadata accessor for DisplayList.HostedViewState.Key, type metadata accessor for DisplayList.HostedViewState.Key);
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (a2 <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = a2;
  }
  if (!v4) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  type metadata accessor for _ContiguousArrayStorage<(source: IndexPath, destination: IndexPath)>(0, a3, a4, MEMORY[0x1E4FBBE00]);
  uint64_t v6 = (void *)swift_allocObject();
  int64_t v7 = _swift_stdlib_malloc_size_2(v6);
  uint64_t v8 = v7 - 32;
  if (v7 < 32) {
    uint64_t v8 = v7 - 17;
  }
  void v6[2] = a1;
  v6[3] = 2 * (v8 >> 4);
  return v6;
}

uint64_t UpdateCollectionViewListCoordinator.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();

  return swift_retain();
}

uint64_t CollectionViewListDataSource.init(sectionInfo:style:allowsMultipleSelection:minRowHeight:minHeaderHeight:environment:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t *a6@<X5>, _OWORD *a7@<X8>, double a8@<D0>)
{
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = (int *)type metadata accessor for CollectionViewListDataSource();
  uint64_t v18 = (char *)a7 + v17[10];
  *(_OWORD *)uint64_t v18 = xmmword_18834BB90;
  *((_OWORD *)v18 + 1) = 0u;
  *((_OWORD *)v18 + 2) = 0u;
  *((_OWORD *)v18 + 3) = 0u;
  *(_DWORD *)(v18 + 63) = 0;
  uint64_t v19 = (char *)a7 + v17[13];
  long long v20 = a1[3];
  a7[2] = a1[2];
  a7[3] = v20;
  *(_OWORD *)((char *)a7 + 57) = *(_OWORD *)((char *)a1 + 57);
  long long v21 = a1[1];
  *a7 = *a1;
  a7[1] = v21;
  uint64_t v22 = (char *)a7 + v17[9];
  uint64_t v23 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v22, a2, v23);
  *((unsigned char *)a7 + v17[12]) = a3;
  *(void *)uint64_t v19 = a4;
  v19[8] = a5 & 1;
  *(double *)((char *)a7 + v17[14]) = a8;
  uint64_t v25 = (void *)((char *)a7 + v17[11]);
  *uint64_t v25 = v15;
  v25[1] = v16;
  return result;
}

uint64_t outlined destroy of ListSectionInfo(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ListSectionInfo(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of ListSectionInfo(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for ListSectionInfo(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void **)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  id v7 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t ListSectionInfo.init(list:listAttribute:contentSubgraph:)@<X0>(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1;
  *(void *)(a3 + 64) = MEMORY[0x1E4FBC860];
  *(unsigned char *)(a3 + 72) = 0;
  outlined init with copy of TableColumnList(a1, a3);
  *(void *)(a3 + 40) = AGCreateWeakAttribute();
  *(void *)(a3 + 48) = a2;
  id v6 = a2;
  uint64_t result = MEMORY[0x18C110C10](v4, 0);
  if (!result)
  {
    SectionAccumulator.init(contentSubgraph:)();
    SectionAccumulator.formResult(from:listAttribute:includeEmptySectionsIf:)();
    uint64_t v18 = v37;
    swift_bridgeObjectRetain();
    uint64_t result = outlined destroy of SectionAccumulator((uint64_t)v35);
    *(void *)(a3 + 56) = v18;
    unint64_t v19 = *(void *)(v18 + 16);
    if (!v19) {
      goto LABEL_41;
    }
    unint64_t v20 = 0;
    uint64_t v31 = MEMORY[0x1E4FBC860];
    id v29 = v6;
    uint64_t v30 = v4;
LABEL_23:
    if (v20 <= v19) {
      unint64_t v21 = v19;
    }
    else {
      unint64_t v21 = v20;
    }
    uint64_t v22 = 136 * v20 + 32;
    unint64_t v23 = v20;
    while (1)
    {
      if (v21 == v23)
      {
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        return result;
      }
      uint64_t v24 = *(void *)(a3 + 56);
      if (v23 >= *(void *)(v24 + 16)) {
        goto LABEL_46;
      }
      outlined init with copy of SectionAccumulator.Item(v24 + v22, (uint64_t)v35);
      if (v36)
      {
        ViewTraitCollection.value<A>(for:defaultValue:)();
        uint64_t result = outlined destroy of SectionAccumulator.Item((uint64_t)v35);
        if (v34 >> 1 != 0xFFFFFFFF)
        {
          outlined consume of SectionIndexLabel?(v32, v33, v34);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v25 = v31;
          uint64_t v38 = v31;
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v31 + 16) + 1, 1);
            uint64_t v25 = v38;
          }
          unint64_t v27 = *(void *)(v25 + 16);
          unint64_t v26 = *(void *)(v25 + 24);
          if (v27 >= v26 >> 1)
          {
            uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v27 + 1, 1);
            uint64_t v25 = v38;
          }
          unint64_t v20 = v23 + 1;
          *(void *)(v25 + 16) = v27 + 1;
          uint64_t v31 = v25;
          *(void *)(v25 + 8 * v27 + 32) = v23;
          BOOL v17 = v19 - 1 == v23;
          id v6 = v29;
          uint64_t v4 = v30;
          if (v17) {
            goto LABEL_42;
          }
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = outlined destroy of SectionAccumulator.Item((uint64_t)v35);
      }
      ++v23;
      v22 += 136;
      if (v19 == v23)
      {
LABEL_40:
        id v6 = v29;
        uint64_t v4 = v30;
        goto LABEL_42;
      }
    }
  }
  *(void *)(a3 + 56) = result;
  unint64_t v8 = *(void *)(result + 16);
  if (v8)
  {
    unint64_t v9 = 0;
    uint64_t v31 = MEMORY[0x1E4FBC860];
    id v29 = v6;
    uint64_t v30 = v4;
    while (1)
    {
      if (v9 <= v8) {
        unint64_t v10 = v8;
      }
      else {
        unint64_t v10 = v9;
      }
      uint64_t v11 = 136 * v9 + 32;
      unint64_t v12 = v9;
      while (1)
      {
        if (v10 == v12)
        {
          __break(1u);
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
        uint64_t v13 = *(void *)(a3 + 56);
        if (v12 >= *(void *)(v13 + 16)) {
          goto LABEL_44;
        }
        outlined init with copy of SectionAccumulator.Item(v13 + v11, (uint64_t)v35);
        if (v36) {
          break;
        }
        uint64_t result = outlined destroy of SectionAccumulator.Item((uint64_t)v35);
LABEL_9:
        ++v12;
        v11 += 136;
        if (v8 == v12) {
          goto LABEL_40;
        }
      }
      ViewTraitCollection.value<A>(for:defaultValue:)();
      uint64_t result = outlined destroy of SectionAccumulator.Item((uint64_t)v35);
      if (v34 >> 1 == 0xFFFFFFFF) {
        goto LABEL_9;
      }
      outlined consume of SectionIndexLabel?(v32, v33, v34);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v14 = v31;
      uint64_t v38 = v31;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v31 + 16) + 1, 1);
        uint64_t v14 = v38;
      }
      id v6 = v29;
      unint64_t v16 = *(void *)(v14 + 16);
      unint64_t v15 = *(void *)(v14 + 24);
      if (v16 >= v15 >> 1)
      {
        uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1);
        uint64_t v14 = v38;
      }
      unint64_t v9 = v12 + 1;
      *(void *)(v14 + 16) = v16 + 1;
      uint64_t v31 = v14;
      *(void *)(v14 + 8 * v16 + 32) = v12;
      BOOL v17 = v8 - 1 == v12;
      uint64_t v4 = v30;
      if (v17) {
        goto LABEL_42;
      }
    }
  }
LABEL_41:
  uint64_t v31 = MEMORY[0x1E4FBC860];
LABEL_42:
  swift_bridgeObjectRelease();
  *(void *)(a3 + 64) = v31;
  uint64_t v28 = *(void *)(v31 + 16);

  *(unsigned char *)(a3 + 72) = v28 != 0;
  return __swift_destroy_boxed_opaque_existential_1(v4);
}

uint64_t outlined destroy of SectionAccumulator(uint64_t a1)
{
  return a1;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v7 - v9 > *(void *)(v6 + 24) >> 1) {
    uint64_t v6 = a3();
  }
  uint64_t v13 = *(void *)(a4(0) - 8);
  unint64_t v14 = v6 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v15 = *(void *)(v13 + 72);
  uint64_t v16 = v15 * a1;
  unint64_t v17 = v14 + v15 * a1;
  uint64_t result = swift_arrayDestroy();
  if (!v9) {
    goto LABEL_22;
  }
  uint64_t v19 = *(void *)(v6 + 16);
  uint64_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2)) {
    goto LABEL_28;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    if (v16 < v15 * a2 || v17 >= v14 + v15 * a2 + v20 * v15)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != v15 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v22 = *(void *)(v6 + 16);
    BOOL v23 = __OFADD__(v22, v10);
    uint64_t v24 = v22 - v9;
    if (!v23)
    {
      *(void *)(v6 + 16) = v24;
LABEL_22:
      *uint64_t v4 = v6;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x1E4F27DE8]);
}

{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t vars8;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    uint64_t v5 = *v3;
    if (!(*v3 >> 62))
    {
      if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v19 < v2) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    unint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v9 = v8 + v6;
    if (!__OFADD__(v8, v6)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    unint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  uint64_t v5 = *v3;
  if (*v3 >> 62) {
    goto LABEL_36;
  }
  unint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v9 = v8 - v7;
  if (__OFADD__(v8, v6)) {
    goto LABEL_38;
  }
LABEL_8:
  uint64_t v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v5;
  unint64_t v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    unint64_t v8 = 1;
  }
  if (v5 >> 62) {
    goto LABEL_39;
  }
  unint64_t v12 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9) {
    unint64_t v12 = v9;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = MEMORY[0x18C117690](v8, v12, 1, v5);
  swift_bridgeObjectRelease();
  *uint64_t v3 = v5;
  uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  swift_arrayDestroy();
  if (v6)
  {
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      unint64_t v14 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_21:
        if (v14 < 0)
        {
LABEL_46:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v15 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v15 + 8 * v14) {
          memmove((void *)(v11 + 32 + 8 * v4), v15, 8 * v14);
        }
        if (!(v5 >> 62))
        {
          uint64_t v16 = *(void *)(v11 + 16);
          unint64_t v17 = v16 + v6;
          if (!__OFADD__(v16, v6))
          {
LABEL_27:
            *(void *)(v11 + 16) = v17;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        unint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        unint64_t v17 = v21 + v6;
        if (!__OFADD__(v21, v6)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v11 + 16);
      unint64_t v14 = v13 - v2;
      if (!__OFSUB__(v13, v2)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:

  return specialized Array._endMutation()();
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, 0, (void (*)(uint64_t))type metadata accessor for AccessibilityNode);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(void))type metadata accessor for (source: IndexPath, destination: IndexPath));
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for DisplayList.HostedViewState.Key);
}

{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t vars8;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    uint64_t v5 = *v3;
    if (!(*v3 >> 62))
    {
      if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v19 < v2) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    unint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v9 = v8 + v6;
    if (!__OFADD__(v8, v6)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    unint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  uint64_t v5 = *v3;
  if (*v3 >> 62) {
    goto LABEL_36;
  }
  unint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v9 = v8 - v7;
  if (__OFADD__(v8, v6)) {
    goto LABEL_38;
  }
LABEL_8:
  uint64_t v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v5;
  unint64_t v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    unint64_t v8 = 1;
  }
  if (v5 >> 62) {
    goto LABEL_39;
  }
  unint64_t v12 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9) {
    unint64_t v12 = v9;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = MEMORY[0x18C117690](v8, v12, 1, v5);
  swift_bridgeObjectRelease();
  *uint64_t v3 = v5;
  uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  type metadata accessor for UIFocusItem();
  swift_arrayDestroy();
  if (v6)
  {
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      unint64_t v14 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_21:
        if (v14 < 0)
        {
LABEL_46:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v15 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v15 + 8 * v14) {
          memmove((void *)(v11 + 32 + 8 * v4), v15, 8 * v14);
        }
        if (!(v5 >> 62))
        {
          uint64_t v16 = *(void *)(v11 + 16);
          unint64_t v17 = v16 + v6;
          if (!__OFADD__(v16, v6))
          {
LABEL_27:
            *(void *)(v11 + 16) = v17;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        unint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        unint64_t v17 = v21 + v6;
        if (!__OFADD__(v21, v6)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v11 + 16);
      unint64_t v14 = v13 - v2;
      if (!__OFSUB__(v13, v2)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:

  return specialized Array._endMutation()();
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (unint64_t *)&lazy cache variable for type metadata for UIKitProxyFocusItem);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (unint64_t *)&lazy cache variable for type metadata for AccessibilityLinkElement);
}

void type metadata accessor for _GraphValue<OnChangeOfSuggestionsModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

__n128 protocol witness for LabelStyle.makeBody(configuration:) in conformance TitleAndIconLabelStyle@<Q0>(uint64_t a1@<X8>)
{
  closure #1 in TitleAndIconLabelStyle.makeBody(configuration:)((uint64_t)&v21);
  closure #1 in closure #2 in TitleAndIconLabelStyle.makeBody(configuration:)(0, 1, (uint64_t)&v13);
  closure #1 in closure #2 in TitleAndIconLabelStyle.makeBody(configuration:)(0, 1, (uint64_t)&v17);
  char v2 = v14;
  uint64_t v3 = v15;
  char v4 = v16;
  char v5 = v18;
  uint64_t v6 = v19;
  char v7 = v20;
  __n128 result = v13;
  long long v9 = v17;
  char v10 = v22;
  uint64_t v11 = v23;
  char v12 = v24;
  *(void *)a1 = v21;
  *(unsigned char *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = v11;
  *(unsigned char *)(a1 + 24) = v12;
  *(__n128 *)(a1 + 32) = result;
  *(unsigned char *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v3;
  *(unsigned char *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 72) = v9;
  *(unsigned char *)(a1 + 88) = v5;
  *(void *)(a1 + 96) = v6;
  *(unsigned char *)(a1 + 104) = v7;
  return result;
}

uint64_t closure #1 in closure #2 in TitleAndIconLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = static VerticalAlignment.firstTextLineCenter.getter();
  uint64_t result = swift_getKeyPath();
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = a1;
  *(unsigned char *)(a3 + 16) = a2 & 1;
  *(void *)(a3 + 24) = result;
  *(unsigned char *)(a3 + 32) = 0;
  return result;
}

uint64_t closure #1 in TitleAndIconLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = KeyPath;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MainMenuItemHost.RootView()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t lazy protocol witness table accessor for type MainMenuItemHost and conformance MainMenuItemHost(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance CoordinateSpaceNameModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type CoordinateSpaceNameModifier and conformance CoordinateSpaceNameModifier();

  return MEMORY[0x1F40FF7D0](a1, a2, a3, a4, a5, v10);
}

unint64_t lazy protocol witness table accessor for type CoordinateSpaceNameModifier and conformance CoordinateSpaceNameModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type CoordinateSpaceNameModifier and conformance CoordinateSpaceNameModifier;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceNameModifier and conformance CoordinateSpaceNameModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceNameModifier and conformance CoordinateSpaceNameModifier);
  }
  return result;
}

uint64_t partial apply for closure #2 in Observer.updateValue()()
{
  return (*(uint64_t (**)(unint64_t))(v0 + 32))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ())(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ())(a1, *(uint64_t (**)(void))(v1 + 32));
}

{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  char v2 = *(uint64_t (**)(uint64_t *))(v1 + 24);
  char v4 = a1;
  return v2(&v4);
}

uint64_t _sxytIegnr_xIegn_SQRzlTRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance LazyTransition<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

void partial apply for closure #1 in BarAppearanceBridge.platformUpdateNavigationAdaptor()()
{
  closure #1 in ToolbarBridge.updateNavigationItem<A>(hostingController:adaptor:)(*(void *)(v0 + 16), *(id *)(v0 + 24));
}

void partial apply for closure #1 in ToolbarBridge.updateNavigationItem<A>(hostingController:adaptor:)()
{
  closure #1 in ToolbarBridge.updateNavigationItem<A>(hostingController:adaptor:)(*(void *)(v0 + 32), *(id *)(v0 + 40));
}

uint64_t implicit closure #1 in static NavigationItemAdaptorModifier._makeView(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t NavigationItemAdaptorModifier.MakeAdaptor.updateValue()()
{
  uint64_t v1 = v0;
  v29[6] = *MEMORY[0x1E4F143B8];
  uint64_t Value = AGGraphGetValue();
  char v4 = v3;
  char v5 = *(char **)Value;
  uint64_t v6 = *(void *)(*(void *)Value + 16);
  if (v6)
  {
    uint64_t v7 = (uint64_t)(v5 + 32);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = 0;
    do
    {
      outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v7, (uint64_t)v29);
      outlined init with copy of TableColumnList((uint64_t)v29, (uint64_t)v26);
      outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)v29);
      uint64_t v9 = v27;
      uint64_t v10 = v28;
      __swift_project_boxed_opaque_existential_1(v26, v27);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 8))(&v25, v9, v10);
      v8 |= v25;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
      v7 += 48;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
  }
  uint64_t v11 = *(void *)(v0 + 8);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v5;
  uint64_t v13 = *((void *)v5 + 2);
  if (v13)
  {
    int v14 = *(_DWORD *)(v1 + 16) + 1;
    *(_DWORD *)(v1 + 16) = v14;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v12 + 16) = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
LABEL_27:
    }
      char v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
    unint64_t v16 = *((void *)v5 + 2);
    unint64_t v17 = v13 - 1;
    if (v16 < v13 - 1) {
      unint64_t v17 = *((void *)v5 + 2);
    }
    if (v17 >= 2)
    {
      unint64_t v19 = v17 + 1;
      uint64_t v20 = v19 & 1;
      if ((v19 & 1) == 0) {
        uint64_t v20 = 2;
      }
      unint64_t v18 = v19 - v20;
      uint64_t v21 = (int *)(v5 + 120);
      unint64_t v22 = v18;
      do
      {
        *(v21 - 12) = v14;
        *uint64_t v21 = v14;
        v21 += 24;
        v22 -= 2;
      }
      while (v22);
    }
    else
    {
      unint64_t v18 = 0;
    }
    uint64_t v23 = 48 * v18 + 72;
    do
    {
      if (v18 >= v16)
      {
        __break(1u);
        goto LABEL_27;
      }
      ++v18;
      *(_DWORD *)&v5[v23] = v14;
      v23 += 48;
    }
    while (v13 != v18);
    *(void *)(v12 + 16) = v5;
  }
  type metadata accessor for (_:)();
  if (AGGraphGetOutputValue() && (v4 & 1) == 0 && v8 == v11)
  {
    uint64_t result = swift_release();
  }
  else
  {
    v29[0] = partial apply for closure #1 in NavigationItemAdaptorModifier.MakeAdaptor.updateValue();
    v29[1] = v12;
    swift_retain();
    AGGraphSetOutputValue();
    uint64_t result = swift_release_n();
  }
  *(void *)(v1 + 8) = v8;
  return result;
}

void UINavigationItemAdaptor.options.getter(void *a1@<X8>)
{
  *a1 = 0;
}

{
  UINavigationItemAdaptor.options.getter(a1);
}

void closure #1 in ToolbarBridge.updateNavigationItem<A>(hostingController:adaptor:)(uint64_t a1, id a2)
{
  id v3 = objc_msgSend(a2, sel_navigationItem);
  char v4 = v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v6, (uint64_t)v9);
      outlined init with copy of TableColumnList((uint64_t)v9, (uint64_t)v8);
      outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)v9);
      uint64_t v7 = v8[4];
      __swift_project_boxed_opaque_existential_1(v8, v8[3]);
      (*(void (**)(void *))(v7 + 16))(v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
      v6 += 48;
      --v5;
    }
    while (v5);

    swift_bridgeObjectRelease();
  }
  else
  {
  }
}

uint64_t outlined destroy of UINavigationItemAdaptorStorage.Adaptor(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for UINavigationItemAdaptorStorage.Adaptor(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

unint64_t lazy protocol witness table accessor for type NavigationItemAdaptorModifier.MakeAdaptor and conformance NavigationItemAdaptorModifier.MakeAdaptor()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationItemAdaptorModifier.MakeAdaptor and conformance NavigationItemAdaptorModifier.MakeAdaptor;
  if (!lazy protocol witness table cache variable for type NavigationItemAdaptorModifier.MakeAdaptor and conformance NavigationItemAdaptorModifier.MakeAdaptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationItemAdaptorModifier.MakeAdaptor and conformance NavigationItemAdaptorModifier.MakeAdaptor);
  }
  return result;
}

uint64_t UIViewSnapshotResponder.Transform.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  *(void *)a1 = *(void *)Value;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);
  v7[0] = *(_OWORD *)AGGraphGetValue();
  uint64_t v3 = swift_retain();
  *(double *)&unint64_t v4 = MEMORY[0x18C10C240](v3);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v5, v4));
  lazy protocol witness table accessor for type UniqueID and conformance UniqueID();
  AnyHashable.init<A>(_:)();
  ViewTransform.appendCoordinateSpace(name:)();
  return outlined destroy of AnyHashable((uint64_t)v7);
}

unint64_t lazy protocol witness table accessor for type UniqueID and conformance UniqueID()
{
  unint64_t result = lazy protocol witness table cache variable for type UniqueID and conformance UniqueID;
  if (!lazy protocol witness table cache variable for type UniqueID and conformance UniqueID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UniqueID and conformance UniqueID);
  }
  return result;
}

uint64_t static ControlWidgetTemplateModifier_Content._makeControlWidgetTemplate(control:inputs:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  int v6 = *(_DWORD *)(a2 + 56);
  unint64_t v17 = *(void (**)(uint64_t, void))a2;
  int v18 = v2;
  uint64_t v19 = v3;
  long long v20 = *(_OWORD *)(a2 + 24);
  uint64_t v21 = v4;
  uint64_t v22 = v5;
  int v23 = v6;
  type metadata accessor for ControlWidgetTemplateModifier_Content.BodyInput();
  type metadata accessor for (_:_:)();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  _SceneInputs.popLast<A, B>(_:)();
  uint64_t v7 = v10;
  if (v10)
  {
    uint64_t v10 = v17;
    LODWORD(v11) = v18;
    uint64_t v12 = v19;
    long long v13 = v20;
    uint64_t v14 = v21;
    uint64_t v15 = v22;
    int v16 = v23;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v8 = swift_bridgeObjectRetain();
    v7(v8, &v10);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v7);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    PreferencesOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
}

unint64_t type metadata accessor for (_:_:)()
{
  unint64_t result = lazy cache variable for type metadata for (_:_:);
  if (!lazy cache variable for type metadata for (_:_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata2();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:_:);
  if (!lazy cache variable for type metadata for (_:_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata2();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:_:);
  if (!lazy cache variable for type metadata for (_:_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata2();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:));
  }
  return result;
}

uint64_t one-time initialization function for contain(uint64_t a1)
{
  return one-time initialization function for ignore(a1, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Contain>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain, (uint64_t)&type metadata for AccessibilityChildBehavior.Contain, &static AccessibilityChildBehavior.contain);
}

uint64_t assignWithCopy for SectionStyleConfiguration(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      swift_retain();
      swift_release();
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    }
    else
    {
      outlined destroy of Binding<Bool>(a1);
      char v5 = *((unsigned char *)a2 + 16);
      *(_OWORD *)a1 = *a2;
      *(unsigned char *)(a1 + 16) = v5;
    }
  }
  else if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v6 = *a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = v6;
  }
  return a1;
}

Swift::Void __swiftcall HostingScrollView.didMoveToWindow()()
{
  uint64_t v1 = v0;
  v56.receiver = v0;
  v56.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v56, sel_didMoveToWindow);
  id v2 = objc_msgSend(v0, sel_window);
  if (v2)
  {

    uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper];
    _UIUpdateCycleRegisterIdleObserver();
    uint64_t v4 = v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties;
    swift_beginAccess();
    if ((*(_DWORD *)(v4 + 128) | *(_DWORD *)(v4 + 104)))
    {
      char v5 = (void *)MEMORY[0x18C119DF0](v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView);
      objc_msgSend(v5, sel_flashScrollIndicators);
    }
    if (static SemanticFeature.isEnabled.getter())
    {
      long long v6 = &v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_configuration];
      swift_beginAccess();
      uint64_t v7 = *((void *)v6 + 10);
      uint64_t v8 = *((void *)v6 + 11);
      uint64_t v9 = *((void *)v6 + 12);
      uint64_t v10 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v11 = (void *)swift_allocObject();
      v11[2] = v10;
      v11[3] = v7;
      v11[4] = v8;
      _OWORD v11[5] = v9;
      outlined copy of AppIntentExecutor?(v7);
      outlined copy of AppIntentExecutor?(v7);
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
    }
    id v12 = objc_msgSend(v1, sel_window);
    if (v12)
    {

      long long v13 = &v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext];
      unint64_t v14 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext + 64];
      if ((~v14 & 0xF000000000000004) != 0)
      {
        long long v38 = *((_OWORD *)v13 + 3);
        long long v37 = *((_OWORD *)v13 + 2);
        uint64_t v39 = v4;
        uint64_t v15 = *((void *)v13 + 2);
        uint64_t v16 = *((void *)v13 + 3);
        uint64_t v18 = *((void *)v13 + 1);
        *(void *)&long long v41 = *(void *)v13;
        uint64_t v17 = v41;
        *((void *)&v41 + 1) = v18;
        *(void *)&long long v42 = v15;
        *((void *)&v42 + 1) = v16;
        long long v43 = v37;
        long long v44 = v38;
        *(void *)&long long v45 = v14;
        outlined copy of SystemScrollLayoutState.ContentOffsetMode(v14);
        HostingScrollView.updateContext(_:)((double *)&v41);
        uint64_t v19 = v16;
        uint64_t v4 = v39;
        outlined consume of HostingScrollViewUpdateContext?(v17, v18, v15, v19, v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v14);
        uint64_t v20 = *(void *)v13;
        uint64_t v21 = *((void *)v13 + 1);
        uint64_t v22 = *((void *)v13 + 2);
        uint64_t v23 = *((void *)v13 + 3);
        uint64_t v24 = *((void *)v13 + 4);
        uint64_t v25 = *((void *)v13 + 5);
        uint64_t v26 = *((void *)v13 + 6);
        uint64_t v27 = *((void *)v13 + 7);
        unint64_t v28 = *((void *)v13 + 8);
        *(_OWORD *)long long v13 = 0u;
        *((_OWORD *)v13 + 1) = 0u;
        *((_OWORD *)v13 + 2) = 0u;
        *((_OWORD *)v13 + 3) = 0u;
        *((void *)v13 + 8) = 0xF000000000000004;
        outlined consume of HostingScrollViewUpdateContext?(v20, v21, v22, v23, v24, v25, v26, v27, v28);
      }
    }
    long long v29 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 208);
    long long v53 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 192);
    long long v54 = v29;
    v55[0] = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 224);
    *(_OWORD *)((char *)v55 + 9) = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 233);
    long long v30 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 144);
    long long v49 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 128);
    long long v50 = v30;
    long long v31 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 176);
    long long v51 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 160);
    long long v52 = v31;
    long long v32 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 80);
    long long v45 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 64);
    long long v46 = v32;
    long long v33 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 112);
    long long v47 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 96);
    long long v48 = v33;
    long long v34 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 16);
    long long v41 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins);
    long long v42 = v34;
    long long v35 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 48);
    long long v43 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 32);
    long long v44 = v35;
    unsigned __int8 v36 = *(unsigned char *)(v3 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes);
    outlined init with copy of ScrollEnvironmentProperties(v4, (uint64_t)v40);
    memset(v57, 0, 32);
    unsigned char v57[32] = 1;
    UIScrollView.updateIndicatorInsets(margins:axes:properties:safeArea:)((uint64_t *)&v41, v36, (uint64_t)v40, (uint64_t)v57);
    outlined destroy of ScrollEnvironmentProperties((uint64_t)v40);
  }
  else
  {
    _UIUpdateCycleUnregisterIdleObserver();
  }
}

unint64_t outlined consume of HostingScrollViewUpdateContext?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t result = a9;
  if ((~a9 & 0xF000000000000004) != 0) {
    return outlined consume of SystemScrollLayoutState.ContentOffsetMode(a9);
  }
  return result;
}

void closure #3 in UpdatedHostingScrollView.updateValue()(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  long long v6 = *(char **)(*(void *)(a1 + 8) + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper);
  uint64_t v7 = &v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins];
  v27[12] = *(_OWORD *)&v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 192];
  v27[13] = *(_OWORD *)&v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 208];
  v28[0] = *(_OWORD *)&v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 224];
  *(_OWORD *)((char *)v28 + 9) = *(_OWORD *)&v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 233];
  unsigned char v27[8] = *(_OWORD *)&v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 128];
  v27[9] = *(_OWORD *)&v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 144];
  v27[10] = *(_OWORD *)&v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 160];
  v27[11] = *(_OWORD *)&v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 176];
  v27[4] = *(_OWORD *)&v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 64];
  void v27[5] = *(_OWORD *)&v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 80];
  v27[6] = *(_OWORD *)&v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 96];
  v27[7] = *(_OWORD *)&v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 112];
  v27[0] = *(_OWORD *)&v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins];
  v27[1] = *(_OWORD *)&v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 16];
  uint64_t v27[2] = *(_OWORD *)&v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 32];
  v27[3] = *(_OWORD *)&v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 48];
  long long v8 = a2[13];
  *((_OWORD *)v7 + 12) = a2[12];
  *((_OWORD *)v7 + 13) = v8;
  *((_OWORD *)v7 + 14) = a2[14];
  *(_OWORD *)(v7 + 233) = *(_OWORD *)((char *)a2 + 233);
  long long v9 = a2[9];
  *((_OWORD *)v7 + 8) = a2[8];
  *((_OWORD *)v7 + 9) = v9;
  long long v10 = a2[11];
  *((_OWORD *)v7 + 10) = a2[10];
  *((_OWORD *)v7 + 11) = v10;
  long long v11 = a2[5];
  *((_OWORD *)v7 + 4) = a2[4];
  *((_OWORD *)v7 + 5) = v11;
  long long v12 = a2[7];
  *((_OWORD *)v7 + 6) = a2[6];
  *((_OWORD *)v7 + 7) = v12;
  long long v13 = a2[1];
  *(_OWORD *)uint64_t v7 = *a2;
  *((_OWORD *)v7 + 1) = v13;
  long long v14 = a2[3];
  *((_OWORD *)v7 + 2) = a2[2];
  *((_OWORD *)v7 + 3) = v14;
  uint64_t v15 = v6;
  ScrollViewHelper.didChangeMargins(from:)(v27);

  uint64_t v16 = *(void **)(v5 + 8);
  long long v17 = a2[13];
  v29[12] = a2[12];
  v29[13] = v17;
  v30[0] = a2[14];
  *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)((char *)a2 + 233);
  long long v18 = a2[9];
  v29[8] = a2[8];
  v29[9] = v18;
  long long v19 = a2[11];
  v29[10] = a2[10];
  v29[11] = v19;
  long long v20 = a2[5];
  v29[4] = a2[4];
  v29[5] = v20;
  long long v21 = a2[7];
  v29[6] = a2[6];
  void v29[7] = v21;
  long long v22 = a2[1];
  v29[0] = *a2;
  v29[1] = v22;
  long long v23 = a2[3];
  v29[2] = a2[2];
  v29[3] = v23;
  outlined init with copy of UpdatedHostingScrollView(v5, (uint64_t)v27);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of ScrollViewConfiguration(Value, (uint64_t)v26);
  id v25 = v16;
  outlined destroy of UpdatedHostingScrollView((uint64_t)v27);
  LOBYTE(v5) = v26[0];
  outlined destroy of ScrollViewConfiguration((uint64_t)v26);
  memset(v31, 0, 32);
  v31[32] = 1;
  UIScrollView.updateIndicatorInsets(margins:axes:properties:safeArea:)((uint64_t *)v29, v5, a3, (uint64_t)v31);
}

uint64_t UIScrollView.updateIndicatorInsets(margins:axes:properties:safeArea:)(uint64_t *a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  outlined init with take of EdgeInsets?(a4, (uint64_t)&v103);
  uint64_t v62 = *a1;
  char v69 = *((unsigned char *)a1 + 8);
  uint64_t v68 = a1[2];
  char v67 = *((unsigned char *)a1 + 24);
  uint64_t v66 = a1[4];
  char v65 = *((unsigned char *)a1 + 40);
  uint64_t v64 = a1[6];
  char v63 = *((unsigned char *)a1 + 56);
  uint64_t v8 = a1[16];
  char v61 = *((unsigned char *)a1 + 136);
  uint64_t v9 = a1[18];
  char v10 = *((unsigned char *)a1 + 152);
  uint64_t v11 = a1[20];
  char v12 = *((unsigned char *)a1 + 168);
  uint64_t v13 = a1[22];
  char v14 = *((unsigned char *)a1 + 184);
  id v15 = objc_msgSend(v5, sel_traitCollection);
  objc_msgSend(v15, sel_displayScale);

  static EdgeInsets.zero.getter();
  outlined init with take of EdgeInsets?(a4, (uint64_t)v104);
  EdgeInsets.rounded(toMultipleOf:)();
  static Edge.Set.all.getter();
  OptionalEdgeInsets.init()();
  uint64_t v87 = v8;
  char v88 = v61;
  uint64_t v89 = v9;
  char v90 = v10;
  uint64_t v91 = v11;
  char v92 = v12;
  uint64_t v93 = v13;
  char v94 = v14;
  static OptionalEdgeInsets.none.getter();
  uint64_t v71 = v79;
  char v72 = v80;
  uint64_t v73 = v81;
  char v74 = v82;
  uint64_t v75 = v83;
  char v76 = v84;
  uint64_t v77 = v85;
  char v78 = v86;
  char v16 = MEMORY[0x18C110940](&v87, &v71);
  uint64_t v17 = v62;
  if ((v16 & 1) == 0) {
    uint64_t v17 = v8;
  }
  uint64_t v95 = v17;
  char v18 = v69;
  if ((v16 & 1) == 0) {
    char v18 = v61;
  }
  char v96 = v18;
  uint64_t v19 = v68;
  if ((v16 & 1) == 0) {
    uint64_t v19 = v9;
  }
  uint64_t v97 = v19;
  char v20 = v67;
  if ((v16 & 1) == 0) {
    char v20 = v10;
  }
  uint64_t v21 = v66;
  if ((v16 & 1) == 0) {
    uint64_t v21 = v11;
  }
  char v98 = v20;
  char v22 = v65;
  if ((v16 & 1) == 0) {
    char v22 = v12;
  }
  uint64_t v23 = v64;
  if ((v16 & 1) == 0) {
    uint64_t v23 = v13;
  }
  uint64_t v99 = v21;
  char v24 = v63;
  if ((v16 & 1) == 0) {
    char v24 = v14;
  }
  char v100 = v22;
  uint64_t v101 = v23;
  char v102 = v24;
  OptionalEdgeInsets.in(edges:)();
  EdgeInsets.rounded(toMultipleOf:)();
  EdgeInsets.adding(_:)();
  double v26 = v25;
  double v28 = v27;
  double v30 = v29;
  double v32 = v31;
  int v33 = *(unsigned __int8 *)(a3 + 81);
  uint64_t v34 = static Axis.allCases.getter();
  uint64_t v35 = *(void *)(v34 + 16);
  if (v35)
  {
    if (v33) {
      double v36 = v32;
    }
    else {
      double v36 = v28;
    }
    if (!v33) {
      double v28 = v32;
    }
    long long v37 = (unsigned char *)(v34 + 32);
    double v38 = *MEMORY[0x1E4FB2848];
    double v39 = *(double *)(MEMORY[0x1E4FB2848] + 8);
    double v40 = *(double *)(MEMORY[0x1E4FB2848] + 16);
    double v41 = *(double *)(MEMORY[0x1E4FB2848] + 24);
    BOOL v42 = v26 == *MEMORY[0x1E4FB2848];
    if (v36 != v39) {
      BOOL v42 = 0;
    }
    if (v30 != v40) {
      BOOL v42 = 0;
    }
    BOOL v43 = v28 == v41 && v42;
    do
    {
      if ((a2 >> *v37))
      {
        if (*v37)
        {
          long long v44 = &selRef_setVerticalScrollIndicatorInsets_;
          if (v43)
          {
            objc_msgSend(v5, sel_verticalScrollIndicatorInsets);
            BOOL v49 = v48 == v38 && v45 == v39;
            BOOL v50 = v49 && v46 == v40;
            BOOL v51 = v50 && v47 == v41;
            long long v44 = &selRef_setVerticalScrollIndicatorInsets_;
            if (v51) {
              goto LABEL_31;
            }
          }
        }
        else
        {
          long long v44 = &selRef_setHorizontalScrollIndicatorInsets_;
          if (v43)
          {
            objc_msgSend(v5, sel_horizontalScrollIndicatorInsets);
            BOOL v56 = v55 == v38 && v52 == v39;
            BOOL v57 = v56 && v53 == v40;
            BOOL v58 = v57 && v54 == v41;
            long long v44 = &selRef_setHorizontalScrollIndicatorInsets_;
            if (v58) {
              goto LABEL_31;
            }
          }
        }
        objc_msgSend(v5, *v44, v26, v36, v30, v28);
      }
LABEL_31:
      ++v37;
      --v35;
    }
    while (v35);
  }
  return swift_bridgeObjectRelease();
}

void ScrollViewHelper.didChangeMargins(from:)(_OWORD *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options;
    uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options);
    if ((v7 & 2) != 0)
    {
      long long v8 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 208);
      long long v49 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 192);
      long long v50 = v8;
      v51[0] = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 224);
      *(_OWORD *)((char *)v51 + 9) = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 233);
      long long v9 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 144);
      long long v45 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 128);
      long long v46 = v9;
      long long v10 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 176);
      long long v47 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 160);
      long long v48 = v10;
      long long v11 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 80);
      long long v41 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 64);
      long long v42 = v11;
      long long v12 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 112);
      long long v43 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 96);
      long long v44 = v12;
      long long v13 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 16);
      long long v37 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins);
      long long v38 = v13;
      long long v14 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 48);
      long long v39 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 32);
      long long v40 = v14;
      long long v15 = a1[13];
      v35[12] = a1[12];
      v35[13] = v15;
      v36[0] = a1[14];
      *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)((char *)a1 + 233);
      long long v16 = a1[9];
      v35[8] = a1[8];
      v35[9] = v16;
      long long v17 = a1[11];
      v35[10] = a1[10];
      v35[11] = v17;
      long long v18 = a1[5];
      v35[4] = a1[4];
      v35[5] = v18;
      long long v19 = a1[7];
      v35[6] = a1[6];
      v35[7] = v19;
      long long v20 = a1[1];
      v35[0] = *a1;
      v35[1] = v20;
      long long v21 = a1[2];
      long long v22 = a1[3];
      uint64_t v23 = v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties;
      v35[2] = v21;
      v35[3] = v22;
      swift_beginAccess();
      outlined init with copy of ScrollEnvironmentProperties(v23, (uint64_t)v33);
      memset(v52, 0, sizeof(v52));
      char v53 = 1;
      specialized UIScrollView.updateContentInsets(margins:oldMargins:axes:properties:safeArea:)((uint64_t *)&v37, (uint64_t *)v35, (uint64_t)v33, (uint64_t)v52);
      outlined destroy of ScrollEnvironmentProperties((uint64_t)v33);
      uint64_t v7 = *(void *)(v2 + v6);
    }
    if ((v7 & 4) != 0)
    {
      long long v24 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 208);
      long long v49 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 192);
      long long v50 = v24;
      v51[0] = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 224);
      *(_OWORD *)((char *)v51 + 9) = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 233);
      long long v25 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 144);
      long long v45 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 128);
      long long v46 = v25;
      long long v26 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 176);
      long long v47 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 160);
      long long v48 = v26;
      long long v27 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 80);
      long long v41 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 64);
      long long v42 = v27;
      long long v28 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 112);
      long long v43 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 96);
      long long v44 = v28;
      long long v29 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 16);
      long long v37 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins);
      long long v38 = v29;
      long long v30 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 48);
      long long v39 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 32);
      long long v40 = v30;
      uint64_t v31 = v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties;
      unsigned __int8 v32 = *(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes);
      swift_beginAccess();
      outlined init with copy of ScrollEnvironmentProperties(v31, (uint64_t)v35);
      memset(v33, 0, sizeof(v33));
      char v34 = 1;
      UIScrollView.updateIndicatorInsets(margins:axes:properties:safeArea:)((uint64_t *)&v37, v32, (uint64_t)v35, (uint64_t)v33);

      outlined destroy of ScrollEnvironmentProperties((uint64_t)v35);
    }
    else
    {
    }
  }
}

uint64_t storeEnumTagSinglePayload for NavigationSplitViewVisibility(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1) = a2 + 1;
        break;
    }
  }
  return result;
}

void closure #1 in ScenePresentationBridge.preferencesDidChange(_:)(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)MEMORY[0x18C119DF0](a2 + 32);
  if (!v3) {
    return;
  }
  unsigned int v4 = v3;
  id v5 = objc_msgSend(v3, sel_window);

  if (!v5) {
    return;
  }
  id v6 = objc_msgSend(v5, sel_windowScene);

  if (!v6) {
    return;
  }
  id v7 = objc_msgSend(v6, sel_session);

  if (!v7) {
    return;
  }
  outlined init with copy of AnyHashable?(a1, (uint64_t)&v16);
  if (!v17)
  {
    outlined destroy of AnyHashable?((uint64_t)&v16);
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    goto LABEL_11;
  }
  type metadata accessor for Decodable & Encodable();
  if ((swift_dynamicCast() & 1) == 0)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    goto LABEL_11;
  }
  if (!*((void *)&v19 + 1))
  {
LABEL_11:

    outlined destroy of PreferenceValues.Value<AnyHashable?>((uint64_t)&v18, (unint64_t *)&lazy cache variable for type metadata for (Decodable & Encodable)?, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable, MEMORY[0x1E4FBB718]);
    return;
  }
  outlined init with take of ToggleStyleConfiguration.Effect(&v18, &v21);
  __swift_project_boxed_opaque_existential_1(&v21, v22);
  uint64_t v8 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v10 = v9;
  id v11 = objc_msgSend(v7, sel_userInfo);
  if (v11)
  {
    long long v12 = v11;
    uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    *((void *)&v19 + 1) = MEMORY[0x1E4F277C0];
    *(void *)&long long v18 = v8;
    *((void *)&v18 + 1) = v10;
    outlined init with take of Any(&v18, &v16);
    outlined copy of Data._Representation(v8, v10);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v16, 0xD00000000000001CLL, 0x800000018832B210, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    if (v13)
    {
      v15.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v15.super.Class isa = 0;
    }
    objc_msgSend(v7, sel_setUserInfo_, v15.super.isa);

    outlined consume of Data._Representation(v8, v10);
  }
  else
  {
    objc_msgSend(v7, sel_setUserInfo_, 0);

    outlined consume of Data._Representation(v8, v10);
    swift_bridgeObjectRelease();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
}

uint64_t ScenePresentationBridge.preferencesDidChange(_:)()
{
  swift_beginAccess();
  PreferenceValues.subscript.getter();
  int v1 = *(_DWORD *)(v0 + 16);
  if (v1 == -1 || v6 == -1 || v1 != v6)
  {
    *(_DWORD *)(v0 + 16) = v6;
    closure #1 in ScenePresentationBridge.preferencesDidChange(_:)((uint64_t)v5, v0);
  }
  outlined destroy of PreferenceValues.Value<AnyHashable?>((uint64_t)v5, &lazy cache variable for type metadata for PreferenceValues.Value<AnyHashable?>, (uint64_t (*)(uint64_t))type metadata accessor for AnyHashable?, MEMORY[0x1E4F3FD10]);
  return swift_endAccess();
}

uint64_t outlined destroy of PreferenceValues.Value<AnyHashable?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  type metadata accessor for PreferenceValues.Value<AnyHashable?>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void type metadata accessor for PreferenceValues.Value<AnyHashable?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined destroy of AnyHashable?(uint64_t a1)
{
  type metadata accessor for PlatformItem.SelectionContent.AuxiliaryContent?(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for AnyHashable?()
{
  if (!lazy cache variable for type metadata for AnyHashable?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?);
    }
  }
}

unint64_t type metadata accessor for Decodable & Encodable()
{
  unint64_t result = lazy cache variable for type metadata for Decodable & Encodable;
  if (!lazy cache variable for type metadata for Decodable & Encodable)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Decodable & Encodable);
  }
  return result;
}

uint64_t View._focusSection()(uint64_t a1, uint64_t a2)
{
  char v3 = 0;
  return MEMORY[0x18C113660](&v3, a1, &unk_1ED437B58, a2);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for PlatformItemList.Item.SystemItem?(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>, (uint64_t)&type metadata for MenuActionDismissBehavior, MEMORY[0x1E4F41280]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

id UIKitRelationshipGestureRecognizer.init(target:action:)(uint64_t a1, uint64_t a2)
{
  char v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = v3;
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
  }
  else {
    uint64_t v8 = MEMORY[0x1E4FBC870];
  }
  *(void *)&v7[OBJC_IVAR____TtC7SwiftUI34UIKitRelationshipGestureRecognizer_gesturesRequiringFailure] = v8;

  outlined init with copy of Any?(a1, (uint64_t)v20);
  uint64_t v9 = v21;
  if (v21)
  {
    unint64_t v10 = __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v11 = *(void *)(v9 - 8);
    double v12 = MEMORY[0x1F4188790](v10);
    long long v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v11 + 16))(v14, v12);
    uint64_t v15 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    uint64_t v15 = 0;
  }
  v19.receiver = v7;
  v19.super_class = ObjectType;
  id v16 = objc_msgSendSuper2(&v19, sel_initWithTarget_action_, v15, a2);
  swift_unknownObjectRelease();
  id v17 = v16;
  objc_msgSend(v17, sel_setDelaysTouchesBegan_, 0);
  objc_msgSend(v17, sel_setDelaysTouchesEnded_, 0);

  outlined destroy of Any?(a1);
  return v17;
}

uint64_t Link.archivedBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v51 = a2;
  uint64_t v5 = type metadata accessor for LinkDestination();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v49 = (uint64_t)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = a1;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  type metadata accessor for Button();
  type metadata accessor for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier>();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for ArchivableLinkModifier(255);
  type metadata accessor for ModifiedContent();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v68 = MEMORY[0x1E4F405F8];
  uint64_t v69 = v9;
  uint64_t v44 = v9;
  uint64_t v70 = v10;
  uint64_t v71 = MEMORY[0x1E4F405F0];
  uint64_t v41 = v10;
  uint64_t v11 = type metadata accessor for StaticIf();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v13 = lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v66 = WitnessTable;
  unint64_t v67 = v13;
  uint64_t v46 = MEMORY[0x1E4F3FBC0];
  uint64_t v14 = swift_getWitnessTable();
  unint64_t v15 = lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier();
  uint64_t v64 = v8;
  unint64_t v65 = v15;
  uint64_t v16 = swift_getWitnessTable();
  unint64_t v17 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl();
  uint64_t v62 = v16;
  unint64_t v63 = v17;
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v60 = v14;
  uint64_t v61 = v18;
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v43 = type metadata accessor for AccessibilityLinkModifier();
  uint64_t v48 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  uint64_t v40 = (uint64_t)v39 - v20;
  uint64_t v47 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)v39 - v22;
  v39[1] = type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  v39[2] = type metadata accessor for ModifiedContent();
  uint64_t v24 = type metadata accessor for _ConditionalContent();
  uint64_t v45 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  long long v26 = (char *)v39 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  long long v42 = (char *)v39 - v28;
  closure #1 in Link.archivedBody.getter(v3, v7, v8, (uint64_t)v23);
  uint64_t v68 = MEMORY[0x1E4F405F8];
  uint64_t v69 = v44;
  uint64_t v70 = v41;
  uint64_t v71 = MEMORY[0x1E4F405F0];
  uint64_t v29 = type metadata accessor for StaticIf();
  closure #2 in Link.archivedBody.getter(v3, v7, v8, (uint64_t)&v23[*(int *)(v29 + 52)]);
  uint64_t v30 = v3 + *(int *)(v50 + 36);
  uint64_t v31 = v49;
  outlined init with copy of LinkDestination(v30, v49, MEMORY[0x1E4F3FB98]);
  uint64_t v32 = v40;
  AccessibilityLinkModifier.init(_:isArchive:)(v31, 1, v40);
  uint64_t v33 = v43;
  uint64_t v50 = swift_getWitnessTable();
  uint64_t v58 = v19;
  uint64_t v59 = &protocol witness table for IgnoreViewRespondersModifier;
  uint64_t v56 = swift_getWitnessTable();
  BOOL v57 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v34 = swift_getWitnessTable();
  uint64_t v54 = v19;
  double v55 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v52 = v34;
  uint64_t v53 = v35;
  swift_getWitnessTable();
  View.accessibilityConfiguration<A>(_:)(v32, v11, v33, v19, v50);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v32, v33);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v23, v11);
  double v36 = v42;
  static ViewBuilder.buildExpression<A>(_:)(v26);
  long long v37 = *(void (**)(char *, uint64_t))(v45 + 8);
  v37(v26, v24);
  static ViewBuilder.buildExpression<A>(_:)(v36);
  return ((uint64_t (*)(char *, uint64_t))v37)(v36, v24);
}

unint64_t lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t destroy for Link(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v5 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v7 = (v4 + a1 + (v6 | 7)) & ~(v6 | 7);
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v7, *(void *)(v7 + 8), *(void *)(v7 + 0x10), *(void *)(v7 + 0x18), *(_WORD *)(v7 + 0x20), *(unsigned char *)(v7 + 0x22));
  unint64_t v8 = (v7 + 42) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v8, *(void *)(v8 + 8), *(void *)(v8 + 16), *(void *)(v8 + 24), *(_WORD *)(v8 + 32), *(unsigned char *)(v8 + 34));
  uint64_t v9 = *(uint64_t (**)(unint64_t, uint64_t))(v11 + 8);

  return v9((v6 + v8 + 35) & ~v6, v5);
}

uint64_t closure #1 in _DraggingModifier.resolve()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(a1 + 104);
  uint64_t v4 = swift_retain();
  uint64_t v5 = v3(v4);
  uint64_t result = swift_release();
  *a2 = v5;
  return result;
}

uint64_t storeEnumTagSinglePayload for UIKitNavigationController.PlatformNavigationRequestStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in MatchedTransitionSourceModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SharingPickerHostModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in ScrollBehaviorModifier<A>.LayoutRoleFilter()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ScrollBehaviorModifier<A>.ChildEnvironment()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ScrollBehaviorModifier<A>.ScrollBehaviorProvider()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Scrollable in LazyScrollable<A>()
{
  return swift_getWitnessTable();
}

uint64_t specialized PlainDividerShapeStyle._apply(to:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  if (EnvironmentValues.isVisionEnabled.getter()) {
    return SeparatorShapeStyle._apply(to:)();
  }
  EnvironmentValues.backgroundMaterial.getter();
  outlined consume of Material?(v2, v3);
  if ((_BYTE)v3 == 0xFF)
  {
    if (one-time initialization token for sharedColor != -1) {
      swift_once();
    }
    swift_retain();
  }
  else
  {
    static Color.quaternary.getter();
  }
  Color._apply(to:)();

  return swift_release();
}

uint64_t type metadata completion function for KeyPress.Handler()
{
  uint64_t result = type metadata accessor for KeyPress.Handler.Subject(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for KeyPress.Handler.Subject(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for KeyPress.Handler.Subject);
}

uint64_t getEnumTagSinglePayload for List(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0x7FFFFFFE) {
    unsigned int v9 = 2147483646;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  int v10 = *(_DWORD *)(v4 + 80);
  if (*(_DWORD *)(v4 + 84)) {
    unint64_t v11 = *(void *)(v4 + 64);
  }
  else {
    unint64_t v11 = v5 + 1;
  }
  if (v11 > v5) {
    unint64_t v5 = v11;
  }
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  if (v5 <= 8) {
    uint64_t v13 = 8;
  }
  else {
    uint64_t v13 = v5;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v13 + ((unsigned __int16)((v10 & 0xF8) + 23) & (unsigned __int16)~(v10 & 0xF8) & 0x1F8) + v12 + 1;
  if (v9 >= a2)
  {
LABEL_35:
    if (v8 > 0x7FFFFFFE)
    {
      return (*(uint64_t (**)(uint64_t))(v7 + 48))((v14 + result) & ~v12);
    }
    else
    {
      unint64_t v23 = *(void *)((result + 15) & 0xFFFFFFFFFFFFFFF8);
      if (v23 >= 0xFFFFFFFF) {
        LODWORD(v23) = -1;
      }
      if ((v23 + 1) >= 2) {
        return v23;
      }
      else {
        return 0;
      }
    }
  }
  else
  {
    unint64_t v15 = ((((*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + (v14 & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 17;
    unsigned int v16 = (a2 - v9 + 255) >> (8 * v15);
    if (v15 < 4) {
      unsigned int v17 = v16 + 1;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v17 >= 0x10000) {
      unsigned int v18 = 4;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v17 < 0x100) {
      unsigned int v18 = 1;
    }
    if (v17 >= 2) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    switch(v19)
    {
      case 1:
        int v20 = *(unsigned __int8 *)(result + v15);
        if (!*(unsigned char *)(result + v15)) {
          goto LABEL_35;
        }
        goto LABEL_30;
      case 2:
        int v20 = *(unsigned __int16 *)(result + v15);
        if (!*(_WORD *)(result + v15)) {
          goto LABEL_35;
        }
        goto LABEL_30;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v20 = *(_DWORD *)(result + v15);
        if (!v20) {
          goto LABEL_35;
        }
LABEL_30:
        int v21 = (v20 - 1) << (8 * v15);
        if (v15 >= 4) {
          int v21 = 0;
        }
        if (((((*(_DWORD *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + (v14 & ~v12) + 7) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
          int v22 = *(unsigned __int8 *)result;
        else {
          int v22 = *(_DWORD *)result;
        }
        uint64_t result = v9 + (v22 | v21) + 1;
        break;
      default:
        goto LABEL_35;
    }
  }
  return result;
}

uint64_t type metadata completion function for PlatformViewResponderBase()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for GeometryActionBinder()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t result = type metadata accessor for ValueCycleDetector();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t outlined init with copy of _ViewList_View?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for ToolbarItemPlacement.Role?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI010_ViewList_C0VSgWOcTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t ToolbarViewListVisitor.visit(view:traits:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v63 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v65 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v64 = &v55[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v68 = type metadata accessor for ToolbarStorage.Item(0);
  uint64_t v66 = *(void *)(v68 - 8);
  MEMORY[0x1F4188790](v68);
  unint64_t v67 = &v55[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  int v10 = &v55[-v9];
  type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = &v55[-v12];
  v77[0] = *a2;
  uint64_t v14 = v77[0];
  int v15 = ViewTraitCollection.isSectioned.getter();
  v77[0] = v14;
  uint64_t v16 = ViewTraitCollection.groupDepth.getter();
  v77[0] = v14;
  uint64_t v17 = ViewTraitCollection.isEmptyView.getter();
  if (v16 || (v15 & 1) == 0)
  {
    v77[0] = v14;
    if (ViewTraitCollection.isSectionFooter.getter() & v17)
    {
      uint64_t v20 = *((unsigned __int8 *)v3 + 72);
      *((unsigned char *)v3 + *(int *)(type metadata accessor for ToolbarViewListVisitor() + 68)) = v15 & 1;
      uint64_t v21 = v3[10];
      uint64_t v22 = v21 + 1;
      if (!__OFADD__(v21, 1))
      {
        char v23 = v20 | v15;
LABEL_34:
        v3[10] = v22;
        return v23 & 1;
      }
      __break(1u);
      goto LABEL_39;
    }
    if ((v15 & 1) == 0 && *((unsigned char *)v3 + *(int *)(type metadata accessor for ToolbarViewListVisitor() + 68)) == 1) {
      ToolbarViewListVisitor.finalizeGroup()();
    }
LABEL_17:
    uint64_t v28 = a1;
    uint64_t v29 = *(void *)(a1 + 48);
    uint64_t v30 = *(void *)(a1 + 56);
    uint64_t v31 = *v3;
    uint64_t v58 = v3[10];
    uint64_t v59 = v31;
    uint64_t v61 = type metadata accessor for ToolbarViewListVisitor();
    uint64_t v32 = (uint64_t *)((char *)v3 + *(int *)(v61 + 64));
    uint64_t v33 = v32[1];
    uint64_t v57 = *v32;
    v77[0] = v14;
    swift_bridgeObjectRetain();
    uint64_t v60 = v30;
    swift_bridgeObjectRetain();
    char v34 = ViewTraitCollection.isSectionHeader.getter();
    int v56 = v15;
    if (v34)
    {
      int v62 = 1;
    }
    else
    {
      v77[0] = v14;
      int v62 = ViewTraitCollection.isSectionFooter.getter();
    }
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)(v3 + 1), (uint64_t)v77);
    int v35 = *((unsigned __int8 *)v3 + 49);
    if (v35 == 2) {
      char v36 = 2;
    }
    else {
      char v36 = v35 & 1;
    }
    __int16 v37 = *((_WORD *)v3 + 25);
    char v38 = *((unsigned char *)v3 + 52);
    uint64_t v39 = v3[7];
    outlined init with copy of _ViewList_View(v28, (uint64_t)(v10 + 104));
    uint64_t v40 = (int *)v68;
    _s7SwiftUI010_ViewList_C0VSgWOcTm_0((uint64_t)(v3 + 8), (uint64_t)&v10[*(int *)(v68 + 52)], (uint64_t)&lazy cache variable for type metadata for WeakBox<PreferenceBridge>, MEMORY[0x1E4F3FD08], MEMORY[0x1E4F41720], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?);
    uint64_t v41 = &v10[v40[12]];
    uint64_t v42 = type metadata accessor for PlatformItemList.Item();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v41, 1, 1, v42);
    *(void *)int v10 = v29;
    uint64_t v43 = v59;
    *((void *)v10 + 1) = v60;
    *((void *)v10 + 2) = v43;
    uint64_t v44 = v57;
    *((void *)v10 + 3) = v58;
    *((void *)v10 + 4) = v44;
    *((void *)v10 + 5) = v33;
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v77, (uint64_t)(v10 + 48));
    v10[89] = v36;
    *((_WORD *)v10 + 45) = v37;
    v10[92] = v38;
    *((void *)v10 + 12) = v39;
    v10[v40[14]] = v62 & 1;
    v10[v40[15]] = 0;
    if (v3[11])
    {
      uint64_t v17 = (uint64_t)v67;
      outlined init with copy of ToolbarStorage.Item((uint64_t)v10, (uint64_t)v67, type metadata accessor for ToolbarStorage.Item);
      uint64_t v20 = v3[11];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v14 = v61;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_25;
      }
      goto LABEL_37;
    }
    uint64_t v17 = (uint64_t)v64;
    outlined init with copy of ToolbarStorage.Item((uint64_t)v10, (uint64_t)v64, type metadata accessor for ToolbarStorage.Item);
    type metadata accessor for ToolbarStorage.Entry.Kind(0);
    swift_storeEnumTagMultiPayload();
    *(unsigned char *)(v17 + *(int *)(v63 + 20)) = 2;
    uint64_t v14 = v61;
    uint64_t v16 = *(int *)(v61 + 72);
    uint64_t v20 = *(uint64_t *)((char *)v3 + v16);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
  ToolbarViewListVisitor.finalizeGroup()();
  swift_bridgeObjectRelease();
  v3[11] = MEMORY[0x1E4FBC860];
  *(void *)&long long v71 = v14;
  uint64_t v18 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v18 != -1) {
    swift_once();
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  _s7SwiftUI010_ViewList_C0VSgWOcTm_0((uint64_t)v77, (uint64_t)&v71, (uint64_t)&lazy cache variable for type metadata for _ViewList_View?, MEMORY[0x1E4F3F308], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [Toolbar.BarLocation]);
  if (*((void *)&v72 + 1))
  {
    v69[2] = v73;
    v69[3] = v74;
    v69[4] = v75;
    uint64_t v70 = v76;
    v69[0] = v71;
    v69[1] = v72;
    outlined init with copy of _ViewList_View((uint64_t)v69, (uint64_t)v13);
    uint64_t v19 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    swift_storeEnumTagMultiPayload();
    outlined destroy of _ViewList_View((uint64_t)v69);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v13, 0, 1, v19);
  }
  else
  {
    uint64_t v24 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v13, 1, 1, v24);
  }
  outlined destroy of _ViewList_View?((uint64_t)v77, (uint64_t)&lazy cache variable for type metadata for _ViewList_View?, MEMORY[0x1E4F3F308], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for [Toolbar.BarLocation]);
  uint64_t v20 = type metadata accessor for ToolbarViewListVisitor();
  outlined assign with take of ToolbarStorage.GroupItem.CollapsedContent?((uint64_t)v13, (uint64_t)v3 + *(int *)(v20 + 60));
  if ((v17 & 1) == 0) {
    goto LABEL_17;
  }
  *((unsigned char *)v3 + *(int *)(v20 + 68)) = 1;
  uint64_t v25 = v3[10];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1, (void *)v20);
LABEL_29:
    char v46 = v56;
    unint64_t v51 = *(void *)(v20 + 16);
    unint64_t v50 = *(void *)(v20 + 24);
    if (v51 >= v50 >> 1) {
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1, (void *)v20);
    }
    *(void *)(v20 + 16) = v51 + 1;
    outlined init with take of ToolbarStorage.Item(v17, v20+ ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80))+ *(void *)(v65 + 72) * v51, type metadata accessor for ToolbarStorage.Entry);
    *(uint64_t *)((char *)v3 + v16) = v20;
    while (1)
    {
      _s7SwiftUI7ToolbarO11BarLocationO_AEtWOhTm_0((uint64_t)v10, type metadata accessor for ToolbarStorage.Item);
      char v52 = *((unsigned char *)v3 + 72);
      *((unsigned char *)v3 + *(int *)(v14 + 68)) = v46 & 1;
      uint64_t v53 = v3[10];
      BOOL v26 = __OFADD__(v53, 1);
      uint64_t v22 = v53 + 1;
      if (!v26) {
        break;
      }
      __break(1u);
LABEL_37:
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1, (void *)v20);
LABEL_25:
      char v46 = v56;
      uint64_t v47 = v66;
      unint64_t v49 = *(void *)(v20 + 16);
      unint64_t v48 = *(void *)(v20 + 24);
      if (v49 >= v48 >> 1) {
        uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1, (void *)v20);
      }
      *(void *)(v20 + 16) = v49 + 1;
      outlined init with take of ToolbarStorage.Item(v17, v20+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(void *)(v47 + 72) * v49, type metadata accessor for ToolbarStorage.Item);
      v3[11] = v20;
    }
    char v23 = v52 | v46;
    goto LABEL_34;
  }
  v3[10] = v27;
  char v23 = 1;
  return v23 & 1;
}

Swift::Void __swiftcall ToolbarMakeEntries.updateValue()()
{
  unint64_t v1 = v0;
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for ToolbarStorage.GroupItem(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for ToolbarStorage.Item(0);
  uint64_t v67 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70);
  uint64_t v60 = (uint64_t)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v64 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for ToolbarViewListVisitor();
  MEMORY[0x1F4188790](v8);
  int v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v11 = v0[1];
  if (*(unsigned char *)AGGraphGetValue())
  {
    unint64_t v76 = MEMORY[0x1E4FBC860];
    type metadata accessor for [ToolbarStorage.Entry](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarStorage.Entry], type metadata accessor for ToolbarStorage.Entry, MEMORY[0x1E4FBB320]);
    AGGraphSetOutputValue();
    return;
  }
  uint64_t v57 = v10;
  int v12 = v1[2];
  type metadata accessor for ViewList();
  int v69 = v12;
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value, (uint64_t)&v76);
  uint64_t v14 = *((id *)v1 + 7);
  default argument 2 of _VariadicView_Children.init(_:contentSubgraph:transform:)();
  uint64_t v66 = v14;
  _VariadicView_Children.init(_:contentSubgraph:transform:)();
  uint64_t v68 = *((void *)v1 + 8);
  unsigned int v15 = *v1;
  uint64_t v16 = AGGraphGetValue();
  outlined init with copy of ToolbarItemPlacement(v16, (uint64_t)v73);
  outlined init with take of ToolbarItemPlacement.Role((uint64_t)v73, (uint64_t)v74);
  int v18 = v1[12];
  int v19 = *MEMORY[0x1E4F4E7A0];
  if (v18 == *MEMORY[0x1E4F4E7A0])
  {
    int v20 = 2;
  }
  else
  {
    type metadata accessor for ViewTransform?(0, &lazy cache variable for type metadata for ToolbarDefaultItemKind?, (uint64_t)&type metadata for ToolbarDefaultItemKind, MEMORY[0x1E4FBB718]);
    int v20 = *(unsigned __int8 *)AGGraphGetValue();
  }
  LODWORD(v62) = v20;
  int v21 = v1[8];
  uint64_t v63 = v6;
  int v22 = v21;
  uint64_t v58 = v4;
  if (v21 == v19)
  {
    LODWORD(v61) = 0;
  }
  else
  {
    char v23 = (unsigned __int8 *)AGGraphGetValue();
    int v21 = v22;
    LODWORD(v61) = *v23;
  }
  unsigned int v24 = v15;
  char v25 = *((unsigned char *)v1 + 20);
  int v26 = v1[9];
  int v27 = v1[10];
  int v28 = v1[11];
  unint64_t v76 = __PAIR64__(v11, v24);
  int v77 = v69;
  *(void *)&long long v17 = *(void *)(v1 + 3);
  long long v65 = v17;
  uint64_t v78 = v17;
  char v79 = v25;
  *(void *)&long long v17 = *((void *)v1 + 3);
  long long v59 = v17;
  uint64_t v80 = v17;
  int v81 = v21;
  int v82 = v26;
  int v83 = v27;
  int v84 = v28;
  int v85 = v18;
  char v86 = v66;
  uint64_t v87 = v68;
  uint64_t v88 = *((void *)v1 + 9);
  LODWORD(v66) = ToolbarMakeEntries.resolvedDefaultVisibility.getter();
  int v69 = v19;
  if (v27 == v19)
  {
    char v29 = 0;
    if (v28 != v19)
    {
LABEL_11:
      uint64_t v30 = (uint64_t *)AGGraphGetValue();
      uint64_t v31 = *v30;
      if (v59 == v19) {
        uint64_t v32 = 0;
      }
      else {
        uint64_t v32 = *v30;
      }
      if (v22 == v19 || v59 == v19)
      {
        uint64_t v33 = (uint64_t)v57;
      }
      else
      {
        uint64_t v33 = (uint64_t)v57;
        if (*(unsigned char *)AGGraphGetValue()) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = v31;
        }
      }
      goto LABEL_22;
    }
  }
  else
  {
    char v29 = *(unsigned char *)AGGraphGetValue();
    if (v28 != v19) {
      goto LABEL_11;
    }
  }
  uint64_t v33 = (uint64_t)v57;
  uint64_t v32 = 0;
LABEL_22:
  type metadata accessor for PreferenceBridge();
  AGGraphGetValue();
  swift_weakInit();
  swift_weakAssign();
  outlined init with take of WeakBox<PreferenceBridge>((uint64_t)&v71, (uint64_t)&v72);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  char v36 = *((unsigned char *)v1 + 20);
  if (v1[6] != v69)
  {
    type metadata accessor for ViewTransform?(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
    __int16 v37 = (uint64_t *)AGGraphGetValue();
    uint64_t v34 = *v37;
    uint64_t v35 = v37[1];
    swift_bridgeObjectRetain();
  }
  uint64_t v38 = v33 + v8[15];
  uint64_t v39 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
  *(void *)uint64_t v33 = v68;
  outlined init with take of ToolbarItemPlacement.Role((uint64_t)v74, v33 + 8);
  *(unsigned char *)(v33 + 49) = (_BYTE)v62;
  *(unsigned char *)(v33 + 50) = v61;
  *(unsigned char *)(v33 + 51) = (_BYTE)v66;
  *(unsigned char *)(v33 + 52) = v29;
  *(void *)(v33 + 56) = v32;
  outlined init with take of WeakBox<PreferenceBridge>((uint64_t)&v72, v33 + 64);
  *(unsigned char *)(v33 + 72) = v36;
  *(void *)(v33 + 80) = 0;
  *(void *)(v33 + 88) = 0;
  uint64_t v40 = (void *)(v33 + v8[16]);
  *uint64_t v40 = v34;
  v40[1] = v35;
  *(unsigned char *)(v33 + v8[17]) = 0;
  uint64_t v41 = v8[18];
  *(void *)(v33 + v41) = MEMORY[0x1E4FBC860];
  outlined init with copy of _VariadicView_Children((uint64_t)v75, (uint64_t)v73);
  v74[0] = 0;
  lazy protocol witness table accessor for type ToolbarViewListVisitor and conformance ToolbarViewListVisitor();
  _ViewList_Backing.visitViews<A>(applying:from:)();
  outlined destroy of _ViewList_Backing((uint64_t)v73);
  ToolbarViewListVisitor.finalizeGroup()();
  int v42 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v42 != v1[19] || (LODWORD(v68) = v1[18], !v68))
  {
    int v43 = static ViewIdentity.nextSeed;
    if ((static ViewIdentity.nextSeed + 1) > 1) {
      int v44 = static ViewIdentity.nextSeed + 1;
    }
    else {
      int v44 = 1;
    }
    static ViewIdentity.nextSeed = v44;
    LODWORD(v68) = v43;
    v1[18] = v43;
    v1[19] = v42;
  }
  uint64_t v45 = *(void **)(v33 + v41);
  uint64_t v46 = (uint64_t)v64;
  *(void *)&long long v65 = v45[2];
  if ((void)v65)
  {
    *(void *)&long long v59 = v60 + 152;
    swift_bridgeObjectRetain();
    uint64_t v47 = 0;
    uint64_t v48 = (uint64_t)v58;
    while (1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v45 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v45);
      }
      if ((unint64_t)v47 >= v45[2]) {
        goto LABEL_51;
      }
      uint64_t v50 = *(void *)(type metadata accessor for ToolbarStorage.Entry(0) - 8);
      uint64_t v51 = (uint64_t)v45
          + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))
          + *(void *)(v50 + 72) * (void)v47;
      outlined init with copy of ToolbarStorage.Entry.Kind(v51, v46);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 1)
      {
        if (EnumCaseMultiPayload)
        {
          outlined destroy of ToolbarStorage.Entry.Kind(v46, type metadata accessor for ToolbarStorage.Entry.Kind);
        }
        else
        {
          uint64_t v66 = v45;
          int v62 = type metadata accessor for ToolbarStorage.Item;
          uint64_t v49 = v60;
          outlined init with take of ToolbarStorage.GroupItem(v46, v60, type metadata accessor for ToolbarStorage.Item);
          LODWORD(v73[0]) = v68;
          lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
          _ViewList_ID.bind<A>(explicitID:owner:reuseID:)();
          _ViewList_ID.bind<A>(explicitID:owner:reuseID:)();
          uint64_t v46 = (uint64_t)v64;
          outlined destroy of ToolbarStorage.Entry.Kind(v51, type metadata accessor for ToolbarStorage.Entry.Kind);
          uint64_t v45 = v66;
          outlined init with take of ToolbarStorage.GroupItem(v49, v51, v62);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_33;
      }
      uint64_t v61 = v51;
      int v62 = v47;
      uint64_t v66 = v45;
      outlined init with take of ToolbarStorage.GroupItem(v46, v48, type metadata accessor for ToolbarStorage.GroupItem);
      uint64_t v53 = *(void **)(v48 + 72);
      uint64_t v54 = v53[2];
      if (!v54) {
        goto LABEL_47;
      }
      for (unint64_t i = 0; i != v54; ++i)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v53 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v53);
        }
        if (i >= v53[2])
        {
          __break(1u);
LABEL_51:
          __break(1u);
        }
        LODWORD(v73[0]) = v68;
        lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
        _ViewList_ID.bind<A>(explicitID:owner:reuseID:)();
        _ViewList_ID.bind<A>(explicitID:owner:reuseID:)();
      }
      uint64_t v48 = (uint64_t)v58;
      *((void *)v58 + 9) = v53;
LABEL_47:
      uint64_t v56 = v61;
      outlined destroy of ToolbarStorage.Entry.Kind(v61, type metadata accessor for ToolbarStorage.Entry.Kind);
      outlined init with take of ToolbarStorage.GroupItem(v48, v56, type metadata accessor for ToolbarStorage.GroupItem);
      swift_storeEnumTagMultiPayload();
      uint64_t v46 = (uint64_t)v64;
      uint64_t v45 = v66;
      uint64_t v47 = v62;
LABEL_33:
      uint64_t v47 = (uint64_t (*)(uint64_t))((char *)v47 + 1);
      if (v47 == (uint64_t (*)(uint64_t))v65) {
        goto LABEL_49;
      }
    }
  }
  swift_bridgeObjectRetain();
LABEL_49:
  v73[0] = v45;
  type metadata accessor for [ToolbarStorage.Entry](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarStorage.Entry], type metadata accessor for ToolbarStorage.Entry, MEMORY[0x1E4FBB320]);
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarStorage.Entry.Kind((uint64_t)v57, (uint64_t (*)(void))type metadata accessor for ToolbarViewListVisitor);
  outlined destroy of _VariadicView_Children((uint64_t)v75);
}

uint64_t type metadata accessor for ToolbarViewListVisitor()
{
  uint64_t result = type metadata singleton initialization cache for ToolbarViewListVisitor;
  if (!type metadata singleton initialization cache for ToolbarViewListVisitor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with take of WeakBox<PreferenceBridge>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for [ToolbarStorage.Entry](0, &lazy cache variable for type metadata for WeakBox<PreferenceBridge>, MEMORY[0x1E4F3FD08], MEMORY[0x1E4F41720]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ToolbarStorage.Entry.Kind(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of ToolbarStorage.GroupItem(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t closure #1 in SizeFittingLayoutComputer.Engine.spacing()()
{
  return swift_release();
}

uint64_t SizeFittingMux.updateValue()()
{
  return swift_release();
}

uint64_t ForestRootBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  uint64_t v11 = MEMORY[0x1E4FBC860];
  LOBYTE(v12) = 0;
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain_n();
    for (uint64_t i = 0; i != v7; ++i)
    {
      int v13 = *(_DWORD *)(a3 + 4 * i + 32);
      closure #1 in ForestRootBodyAccessor.updateBody(of:changed:)((uint64_t)&v11, (uint64_t)&v13, a3, a4);
    }
    a1 = swift_bridgeObjectRelease_n();
    char v9 = (char)v12;
    if (a2) {
      goto LABEL_11;
    }
  }
  else
  {
    char v9 = 0;
    if (a2)
    {
LABEL_11:
      uint64_t v11 = a3;
      int v12 = a4;
      MEMORY[0x1F4188790](a1);
      type metadata accessor for ForestRootBodyAccessor();
      swift_getWitnessTable();
      BodyAccessor.setBody(_:)();
      return swift_bridgeObjectRelease();
    }
  }
  if (v9) {
    goto LABEL_11;
  }

  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in ForestRootBodyAccessor.updateBody(of:changed:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  type metadata accessor for ViewList();
  uint64_t Value = AGGraphGetValue();
  char v8 = v7;
  outlined init with copy of TableColumnList(Value, (uint64_t)v23);
  outlined init with copy of TableColumnList((uint64_t)v23, (uint64_t)v18);
  id v9 = a4;
  default argument 2 of _VariadicView_Children.init(_:contentSubgraph:transform:)();
  _VariadicView_Children.init(_:contentSubgraph:transform:)();
  int v10 = *(char **)a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
  }
  unint64_t v12 = *((void *)v10 + 2);
  unint64_t v11 = *((void *)v10 + 3);
  if (v12 >= v11 >> 1) {
    int v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v12 + 1;
  int v13 = &v10[56 * v12];
  long long v14 = v19;
  long long v15 = v20;
  long long v16 = v21;
  *((void *)v13 + 10) = v22;
  *((_OWORD *)v13 + 3) = v15;
  *((_OWORD *)v13 + 4) = v16;
  *((_OWORD *)v13 + 2) = v14;
  *(void *)a1 = v10;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(a1 + 8) | v8) & 1;
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in SizeFittingLayoutComputer.Engine.sizeThatFits(_:)()
{
  return SizeFittingState.applyChildren(selectLast:to:)(0);
}

uint64_t closure #1 in SizeFittingLayoutComputer.Engine.explicitAlignment(_:at:)()
{
  return swift_release();
}

uint64_t SizeFittingState.applyChildren(selectLast:to:)(char a1)
{
  uint64_t v2 = v1;
  ++*(_DWORD *)(v1 + 144);
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v36 = 0;
  char v37 = 1;
  type metadata accessor for ViewList();
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value, (uint64_t)v30);
  __swift_project_boxed_opaque_existential_1(v30, v31);
  ViewList.count.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  uint64_t v5 = AGGraphGetValue();
  outlined init with copy of TableColumnList(v5, (uint64_t)v30);
  __swift_project_boxed_opaque_existential_1(v30, v31);
  char v35 = 0;
  ViewList.applySublists(from:list:to:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  swift_beginAccess();
  swift_retain();
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = specialized _NativeDictionary.filter(_:)(v6, v1);
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)(v1 + 136) = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v37 & 1) != 0 || (a1 & 1) == 0) {
    return result;
  }
  uint64_t v9 = v36;
  uint64_t v10 = *(void *)(v1 + 136);
  uint64_t v28 = v10 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v10 + 64);
  int64_t v29 = (unint64_t)(v11 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v14 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v14 << 6);
      goto LABEL_7;
    }
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v14 >= v29) {
      goto LABEL_28;
    }
    unint64_t v26 = *(void *)(v28 + 8 * v14);
    if (!v26) {
      break;
    }
LABEL_23:
    unint64_t v13 = (v26 - 1) & v26;
    unint64_t v16 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_7:
    long long v17 = (void *)(*(void *)(v10 + 48) + 16 * v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = *(void *)(v10 + 56) + 48 * v16;
    long long v21 = *(void **)v19;
    uint64_t v20 = *(void *)(v19 + 8);
    uint64_t v22 = *(void *)(v19 + 16);
    char v23 = *(unsigned char *)(v19 + 40);
    v30[0] = *v17;
    v30[1] = v18;
    _OWORD v30[2] = v21;
    uint64_t v31 = v20;
    uint64_t v32 = v22;
    long long v33 = *(_OWORD *)(v19 + 24);
    char v34 = v23;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    id v24 = v21;
    closure #3 in SizeFittingState.applyChildren(selectLast:to:)((uint64_t)v30, v9, v2);
    swift_bridgeObjectRelease();
    swift_release();

    uint64_t result = swift_release();
  }
  int64_t v27 = v14 + 1;
  if (v14 + 1 >= v29) {
    goto LABEL_28;
  }
  unint64_t v26 = *(void *)(v28 + 8 * v27);
  if (v26) {
    goto LABEL_22;
  }
  int64_t v27 = v14 + 2;
  if (v14 + 2 >= v29) {
    goto LABEL_28;
  }
  unint64_t v26 = *(void *)(v28 + 8 * v27);
  if (v26) {
    goto LABEL_22;
  }
  int64_t v27 = v14 + 3;
  if (v14 + 3 >= v29) {
    goto LABEL_28;
  }
  unint64_t v26 = *(void *)(v28 + 8 * v27);
  if (v26) {
    goto LABEL_22;
  }
  int64_t v27 = v14 + 4;
  if (v14 + 4 >= v29) {
    goto LABEL_28;
  }
  unint64_t v26 = *(void *)(v28 + 8 * v27);
  if (v26) {
    goto LABEL_22;
  }
  int64_t v27 = v14 + 5;
  if (v14 + 5 >= v29)
  {
LABEL_28:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  unint64_t v26 = *(void *)(v28 + 8 * v27);
  if (v26)
  {
LABEL_22:
    int64_t v14 = v27;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_28;
    }
    unint64_t v26 = *(void *)(v28 + 8 * v14);
    ++v27;
    if (v26) {
      goto LABEL_23;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

unint64_t type metadata accessor for ViewList()
{
  unint64_t result = lazy cache variable for type metadata for ViewList;
  if (!lazy cache variable for type metadata for ViewList)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  }
  return result;
}

void specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 0;
  int64_t v7 = 0;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v25 = (unint64_t)(v8 + 63) >> 6;
  while (2)
  {
    uint64_t v23 = v6;
    if (v10)
    {
LABEL_6:
      unint64_t v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v12 = v11 | (v7 << 6);
      goto LABEL_21;
    }
    while (1)
    {
      int64_t v13 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (v13 >= v25) {
        goto LABEL_24;
      }
      unint64_t v14 = *(void *)(v24 + 8 * v13);
      ++v7;
      if (!v14)
      {
        int64_t v7 = v13 + 1;
        if (v13 + 1 >= v25) {
          goto LABEL_24;
        }
        unint64_t v14 = *(void *)(v24 + 8 * v7);
        if (!v14)
        {
          int64_t v7 = v13 + 2;
          if (v13 + 2 >= v25) {
            goto LABEL_24;
          }
          unint64_t v14 = *(void *)(v24 + 8 * v7);
          if (!v14)
          {
            int64_t v15 = v13 + 3;
            if (v15 >= v25)
            {
LABEL_24:
              specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v23, a3);
              return;
            }
            unint64_t v14 = *(void *)(v24 + 8 * v15);
            if (!v14)
            {
              while (1)
              {
                int64_t v7 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_26;
                }
                if (v7 >= v25) {
                  goto LABEL_24;
                }
                unint64_t v14 = *(void *)(v24 + 8 * v7);
                ++v15;
                if (v14) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v7 = v15;
          }
        }
      }
LABEL_20:
      unint64_t v10 = (v14 - 1) & v14;
      unint64_t v12 = __clz(__rbit64(v14)) + (v7 << 6);
LABEL_21:
      uint64_t v16 = *(void *)(a3 + 56) + 48 * v12;
      if (*(_DWORD *)(v16 + 32) == *(_DWORD *)(a4 + 144)) {
        break;
      }
      long long v17 = *(void **)v16;
      char v18 = *(unsigned char *)(v16 + 40);
      swift_retain();
      id v19 = v17;
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      id v20 = v19;
      AGSubgraphRef.willInvalidate(isInserted:)(v18);
      AGSubgraphInvalidate();
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_release_n();

      if (v10) {
        goto LABEL_6;
      }
    }
    *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v6 = v23 + 1;
    if (!__OFADD__(v23, 1)) {
      continue;
    }
    break;
  }
LABEL_27:
  __break(1u);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  void *v39;
  id v40;
  BOOL v41;
  uint64_t v42[2];
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned char v54[152];
  int64_t v55;

  uint64_t v50 = a4;
  v42[0] = a2;
  int v43 = a1;
  type metadata accessor for (key: DisplayList.HostedViewState.Key, value: DisplayList.HostedViewState.ViewInfo)();
  uint64_t v47 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v53 = (uint64_t)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  char v52 = (uint64_t)v42 - v8;
  MEMORY[0x1F4188790](v9);
  uint64_t v49 = (uint64_t)v42 - v10;
  MEMORY[0x1F4188790](v11);
  int64_t v13 = (char *)v42 - v12;
  unint64_t v14 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  uint64_t v48 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v44 = 0;
  long long v17 = 0;
  uint64_t v51 = (void *)a3;
  char v18 = *(void *)(a3 + 64);
  uint64_t v45 = a3 + 64;
  id v19 = 1 << *(unsigned char *)(a3 + 32);
  id v20 = -1;
  if (v19 < 64) {
    id v20 = ~(-1 << v19);
  }
  long long v21 = v20 & v18;
  uint64_t v46 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v22 = v47;
  while (v21)
  {
    uint64_t v23 = __clz(__rbit64(v21));
    v21 &= v21 - 1;
    double v55 = v17;
    uint64_t v24 = v23 | (v17 << 6);
LABEL_21:
    int64_t v29 = v51;
    outlined init with copy of DisplayList.HostedViewState.Key(v51[6] + *(void *)(v48 + 72) * v24, (uint64_t)v16, type metadata accessor for DisplayList.HostedViewState.Key);
    outlined init with copy of DisplayList.HostedViewState.ViewInfo(v29[7] + 176 * v24, (uint64_t)v54);
    uint64_t v30 = (uint64_t)&v13[*(int *)(v22 + 48)];
    uint64_t v31 = (uint64_t)v16;
    outlined init with copy of DisplayList.HostedViewState.Key((uint64_t)v16, (uint64_t)v13, type metadata accessor for DisplayList.HostedViewState.Key);
    outlined init with copy of DisplayList.HostedViewState.ViewInfo((uint64_t)v54, v30);
    uint64_t v32 = v49;
    long long v33 = v49 + *(int *)(v22 + 48);
    outlined init with copy of DisplayList.HostedViewState.Key((uint64_t)v13, v49, type metadata accessor for DisplayList.HostedViewState.Key);
    outlined init with copy of DisplayList.HostedViewState.ViewInfo(v30, v33);
    char v34 = *(_DWORD *)(v33 + 8);
    outlined destroy of DisplayList.HostedViewState.ViewInfo(v33);
    LODWORD(v33) = *(_DWORD *)(v50 + 120);
    outlined destroy of DisplayList.HostedViewState.Key(v32, type metadata accessor for DisplayList.HostedViewState.Key);
    if (v34 == v33)
    {
      outlined destroy of DisplayList.HostedViewState.Key((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for (key: DisplayList.HostedViewState.Key, value: DisplayList.HostedViewState.ViewInfo));
      outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v54);
      uint64_t v16 = (char *)v31;
      outlined destroy of DisplayList.HostedViewState.Key(v31, type metadata accessor for DisplayList.HostedViewState.Key);
      *(unint64_t *)((char *)v43 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      uint64_t v41 = __OFADD__(v44++, 1);
      long long v17 = v55;
      if (v41)
      {
        __break(1u);
LABEL_29:
        specialized _NativeDictionary.extractDictionary(using:count:)(v43, v42[0], v44, v51);
        return;
      }
    }
    else
    {
      char v35 = v52 + *(int *)(v22 + 48);
      outlined init with copy of DisplayList.HostedViewState.Key((uint64_t)v13, v52, type metadata accessor for DisplayList.HostedViewState.Key);
      outlined init with copy of DisplayList.HostedViewState.ViewInfo(v30, v35);
      uint64_t v36 = *(void **)(v35 + 144);
      char v37 = v36;
      outlined destroy of DisplayList.HostedViewState.ViewInfo(v35);
      if (v36)
      {
        AGSubgraphRef.willRemove()();
      }
      outlined destroy of DisplayList.HostedViewState.Key(v52, type metadata accessor for DisplayList.HostedViewState.Key);
      uint64_t v38 = v53 + *(int *)(v22 + 48);
      outlined init with copy of DisplayList.HostedViewState.Key((uint64_t)v13, v53, type metadata accessor for DisplayList.HostedViewState.Key);
      outlined init with copy of DisplayList.HostedViewState.ViewInfo(v30, v38);
      uint64_t v39 = *(void **)(v38 + 144);
      uint64_t v40 = v39;
      outlined destroy of DisplayList.HostedViewState.ViewInfo(v38);
      uint64_t v16 = (char *)v31;
      if (v39)
      {
        AGSubgraphInvalidate();
      }
      outlined destroy of DisplayList.HostedViewState.Key((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for (key: DisplayList.HostedViewState.Key, value: DisplayList.HostedViewState.ViewInfo));
      outlined destroy of DisplayList.HostedViewState.Key(v53, type metadata accessor for DisplayList.HostedViewState.Key);
      outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v54);
      outlined destroy of DisplayList.HostedViewState.Key(v31, type metadata accessor for DisplayList.HostedViewState.Key);
      long long v17 = v55;
    }
  }
  int64_t v25 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v25 >= v46) {
    goto LABEL_29;
  }
  unint64_t v26 = *(void *)(v45 + 8 * v25);
  int64_t v27 = v17 + 1;
  if (v26) {
    goto LABEL_20;
  }
  int64_t v27 = v17 + 2;
  if (v17 + 2 >= v46) {
    goto LABEL_29;
  }
  unint64_t v26 = *(void *)(v45 + 8 * v27);
  if (v26) {
    goto LABEL_20;
  }
  int64_t v27 = v17 + 3;
  if (v17 + 3 >= v46) {
    goto LABEL_29;
  }
  unint64_t v26 = *(void *)(v45 + 8 * v27);
  if (v26)
  {
LABEL_20:
    long long v21 = (v26 - 1) & v26;
    double v55 = v27;
    uint64_t v24 = __clz(__rbit64(v26)) + (v27 << 6);
    goto LABEL_21;
  }
  uint64_t v28 = v17 + 4;
  if (v17 + 4 >= v46) {
    goto LABEL_29;
  }
  unint64_t v26 = *(void *)(v45 + 8 * v28);
  if (v26)
  {
    int64_t v27 = v17 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v27 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v27 >= v46) {
      goto LABEL_29;
    }
    unint64_t v26 = *(void *)(v45 + 8 * v27);
    ++v28;
    if (v26) {
      goto LABEL_20;
    }
  }
LABEL_31:
  __break(1u);
}

uint64_t type metadata accessor for ForestRootBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #3 in SizeFittingState.applyChildren(selectLast:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  int64_t v7 = *(void **)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  int v17 = *(_DWORD *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 44);
  uint64_t v9 = *(unsigned int *)(a1 + 52);
  int v10 = *(unsigned __int8 *)(a1 + 56);
  if (v10 == (v9 == a2))
  {
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    id v12 = v7;
  }
  else if (v9 == a2)
  {
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    id v11 = v7;
    AGSubgraphAddChild();
    AGSubgraphRef.didReinsert()();
    long long v18 = *(_OWORD *)(a3 + 112);
    _ViewOutputs.attachIndirectOutputs(to:)();
    LOBYTE(v10) = 1;
  }
  else
  {
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    id v13 = v7;
    AGSubgraphRef.willRemove()();
    AGSubgraphRemoveChild();
    LOBYTE(v10) = 0;
  }
  *(void *)&long long v18 = v7;
  *((void *)&v18 + 1) = v6;
  uint64_t v19 = v8;
  int v20 = v17;
  uint64_t v21 = v16;
  int v22 = v9;
  char v23 = v10;
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v24 = *(void *)(a3 + 136);
  *(void *)(a3 + 136) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v18, v5, v4, isUniquelyReferenced_nonNull_native);
  *(void *)(a3 + 136) = v24;
  swift_release();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t outlined assign with take of SizeFittingState.Child(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t assignWithTake for SizeFittingState.Child(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

void type metadata accessor for _DictionaryStorage<_ViewList_ID.Canonical, SizeFittingState.Child>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, SizeFittingState.Child>)
  {
    lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, SizeFittingState.Child>);
    }
  }
}

uint64_t destroy for ToolbarViewListVisitor(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 48) == 1) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 60);
  uint64_t v5 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      __swift_destroy_boxed_opaque_existential_1(v4);
      swift_release();
      swift_bridgeObjectRelease();

      goto LABEL_36;
    }

    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v6 = *(void *)(v4 + 184);
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v6 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v8 = *(unsigned __int8 *)(v4 + 72);
      if (v8 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v4 + 64), v8);
        uint64_t v6 = *(void *)(v4 + 184);
        unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v7 != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(v4 + 168), *(void *)(v4 + 176), v6);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    if (*(void *)(v4 + 256))
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = *(void **)(v4 + 264);
      if ((unint64_t)v9 >= 2) {

      }
      swift_release();
      swift_release();
    }
    unint64_t v10 = *(void *)(v4 + 328);
    if (v10 >> 2 != 0xFFFFFFFF) {
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v4 + 296), *(void *)(v4 + 304), *(void *)(v4 + 312), *(void *)(v4 + 320), v10, *(void *)(v4 + 336), *(void *)(v4 + 344), *(void *)(v4 + 352), *(void *)(v4 + 360), *(void *)(v4 + 368), *(void *)(v4 + 376), *(void *)(v4 + 384), *(void *)(v4 + 392));
    }
    uint64_t v11 = *(void *)(v4 + 408);
    if (v11)
    {
      if (v11 == 1)
      {
LABEL_24:
        swift_bridgeObjectRelease();
        if (*(void *)(v4 + 504)) {
          swift_release();
        }
        if (*(void *)(v4 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(void *)(v4 + 552) != 1)
        {
          swift_release();
          if (*(void *)(v4 + 560)) {
            swift_release();
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v12 = v4 + *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
        uint64_t v13 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
        {
          uint64_t v14 = v12 + *(int *)(v13 + 20);
          outlined consume of Text.Storage(*(void *)v14, *(void *)(v14 + 8), *(unsigned char *)(v14 + 16));
          swift_bridgeObjectRelease();
          uint64_t v15 = v14 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          uint64_t v16 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
          if (*(void *)(v12 + *(int *)(v13 + 24))) {
            swift_release();
          }
        }
        swift_release();
        goto LABEL_36;
      }
      swift_release();
    }
    if (*(void *)(v4 + 424)) {
      swift_release();
    }
    if (*(void *)(v4 + 440)) {
      swift_release();
    }
    goto LABEL_24;
  }
LABEL_36:
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type ToolbarViewListVisitor and conformance ToolbarViewListVisitor()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarViewListVisitor and conformance ToolbarViewListVisitor;
  if (!lazy protocol witness table cache variable for type ToolbarViewListVisitor and conformance ToolbarViewListVisitor)
  {
    type metadata accessor for ToolbarViewListVisitor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarViewListVisitor and conformance ToolbarViewListVisitor);
  }
  return result;
}

Swift::Void __swiftcall ToolbarViewListVisitor.finalizeGroup()()
{
  uint64_t v59 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v1 = *(void *)(v59 - 8);
  MEMORY[0x1F4188790](v59);
  uint64_t v60 = (unint64_t *)((char *)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v58 = type metadata accessor for ToolbarStorage.GroupItem(0);
  MEMORY[0x1F4188790](v58);
  uint64_t v61 = (uint64_t)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?(0, &lazy cache variable for type metadata for (offset: Int, element: ToolbarStorage.Item)?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: ToolbarStorage.Item), MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v52 - v5);
  type metadata accessor for (Int, ToolbarStorage.Item)();
  uint64_t v57 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v56 = (unint64_t *)((char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for (offset: Int, element: ToolbarStorage.Item)();
  uint64_t v10 = v9;
  uint64_t v62 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v64 = (uint64_t)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (uint64_t *)((char *)&v52 - v13);
  MEMORY[0x1F4188790](v15);
  int v17 = (unint64_t *)((char *)&v52 - v16);
  MEMORY[0x1F4188790](v18);
  int v20 = (uint64_t *)((char *)&v52 - v19);
  uint64_t v21 = *(void **)(v0 + 88);
  if (!v21) {
    return;
  }
  uint64_t v55 = v1;
  unint64_t v22 = MEMORY[0x1E4FBC860];
  uint64_t v65 = MEMORY[0x1E4FBC860];
  uint64_t v23 = v21[2];
  swift_bridgeObjectRetain_n();
  uint64_t v63 = v23;
  if (v23)
  {
    uint64_t v53 = v6;
    unint64_t v54 = v0;
    unint64_t v24 = 0;
    uint64_t v25 = MEMORY[0x1E4FBC860];
    while (v24 < v21[2])
    {
      unint64_t v26 = (int *)(type metadata accessor for ToolbarStorage.Item(0) - 8);
      uint64_t v27 = (uint64_t)v14 + *(int *)(v10 + 48);
      outlined init with copy of ToolbarStorage.Item((uint64_t)v21+ ((*(unsigned __int8 *)(*(void *)v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v26 + 80))+ *(void *)(*(void *)v26 + 72) * v24, v27, type metadata accessor for ToolbarStorage.Item);
      uint64_t v28 = (uint64_t)v17 + *(int *)(v10 + 48);
      unint64_t *v17 = v24;
      outlined init with take of ToolbarStorage.Item(v27, v28, type metadata accessor for ToolbarStorage.Item);
      outlined init with take of ToolbarStorage.Item((uint64_t)v17, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: ToolbarStorage.Item));
      uint64_t v29 = *(int *)(v10 + 48);
      uint64_t v30 = (uint64_t)v14 + v29;
      *uint64_t v14 = *v20;
      outlined init with copy of ToolbarStorage.Item((uint64_t)v20 + v29, (uint64_t)v14 + v29, type metadata accessor for ToolbarStorage.Item);
      unint64_t v22 = *(unsigned __int8 *)(v30 + v26[16]);
      _s7SwiftUI7ToolbarO11BarLocationO_AEtWOhTm_0(v30, type metadata accessor for ToolbarStorage.Item);
      if (v22)
      {
        _s7SwiftUI7ToolbarO11BarLocationO_AEtWOhTm_0((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: ToolbarStorage.Item));
      }
      else
      {
        outlined init with take of ToolbarStorage.Item((uint64_t)v20, v64, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: ToolbarStorage.Item));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v25 + 16) + 1, 1);
        }
        uint64_t v25 = v65;
        unint64_t v22 = *(void *)(v65 + 16);
        unint64_t v31 = *(void *)(v65 + 24);
        if (v22 >= v31 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v22 + 1, 1);
          uint64_t v25 = v65;
        }
        *(void *)(v25 + 16) = v22 + 1;
        outlined init with take of ToolbarStorage.Item(v64, v25+ ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))+ *(void *)(v62 + 72) * v22, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: ToolbarStorage.Item));
      }
      if (v63 == ++v24)
      {
        unint64_t v22 = v65;
        uint64_t v6 = v53;
        unint64_t v0 = v54;
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_30;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  uint64_t v32 = *(void *)(v22 + 16);
  if (!v32)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  if (v32 != 1)
  {
    swift_release();
    goto LABEL_24;
  }
  uint64_t v33 = v62;
  outlined init with copy of ToolbarStorage.Item(v22 + ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80)), (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: ToolbarStorage.Item));
  (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v6, 0, 1, v10);
  swift_release();
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v33 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of _ViewList_View?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: ToolbarStorage.Item)?, (uint64_t)type metadata accessor for (offset: Int, element: ToolbarStorage.Item), MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?);
    goto LABEL_24;
  }
  uint64_t v34 = (uint64_t)v6 + *(int *)(v10 + 48);
  uint64_t v36 = v56;
  uint64_t v35 = v57;
  uint64_t v37 = (uint64_t)v56 + *(int *)(v57 + 48);
  *uint64_t v56 = *v6;
  outlined init with take of ToolbarStorage.Item(v34, v37, type metadata accessor for ToolbarStorage.Item);
  unint64_t v38 = *v36;
  _s7SwiftUI7ToolbarO11BarLocationO_AEtWOhTm_0((uint64_t)v36 + *(int *)(v35 + 48), type metadata accessor for ToolbarStorage.Item);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if ((v38 & 0x8000000000000000) == 0) {
      goto LABEL_22;
    }
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v21 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v21);
  if ((v38 & 0x8000000000000000) != 0) {
    goto LABEL_32;
  }
LABEL_22:
  if (v38 >= v21[2])
  {
LABEL_33:
    __break(1u);
    return;
  }
  uint64_t v39 = type metadata accessor for ToolbarStorage.Item(0);
  *((unsigned char *)v21
  + ((*(unsigned __int8 *)(*(void *)(v39 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v39 - 8) + 80))
  + *(void *)(*(void *)(v39 - 8) + 72) * v38
  + *(int *)(v39 + 60)) = 1;
LABEL_24:
  uint64_t v40 = (int *)type metadata accessor for ToolbarViewListVisitor();
  uint64_t v41 = (uint64_t *)(v0 + v40[16]);
  uint64_t v42 = *v41;
  uint64_t v43 = v41[1];
  uint64_t v44 = v61;
  outlined init with copy of ToolbarItemPlacement.Role(v0 + 8, v61 + 16);
  __int16 v45 = *(_WORD *)(v0 + 50);
  unint64_t v46 = v0;
  char v47 = *(unsigned char *)(v0 + 52);
  uint64_t v48 = *(void *)(v0 + 56);
  uint64_t v25 = v0 + v40[15];
  _s7SwiftUI010_ViewList_C0VSgWOcTm_0(v25, v44 + *(int *)(v58 + 44), (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, (uint64_t)type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?);
  *(void *)uint64_t v44 = v42;
  *(void *)(v44 + 8) = v43;
  *(_WORD *)(v44 + 57) = v45;
  *(unsigned char *)(v44 + 59) = v47;
  unint64_t v24 = v46;
  *(void *)(v44 + 64) = v48;
  *(void *)(v44 + 72) = v21;
  int v17 = v60;
  outlined init with copy of ToolbarStorage.Item(v44, (uint64_t)v60, type metadata accessor for ToolbarStorage.GroupItem);
  type metadata accessor for ToolbarStorage.Entry.Kind(0);
  swift_storeEnumTagMultiPayload();
  *((unsigned char *)v17 + *(int *)(v59 + 20)) = 2;
  unint64_t v22 = v40[18];
  uint64_t v10 = *(void *)(v46 + v22);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_30:
  }
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1, (void *)v10);
  unint64_t v50 = *(void *)(v10 + 16);
  unint64_t v49 = *(void *)(v10 + 24);
  if (v50 >= v49 >> 1) {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1, (void *)v10);
  }
  *(void *)(v10 + 16) = v50 + 1;
  outlined init with take of ToolbarStorage.Item((uint64_t)v17, v10+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(void *)(v55 + 72) * v50, type metadata accessor for ToolbarStorage.Entry);
  *(void *)(v24 + v22) = v10;
  _s7SwiftUI7ToolbarO11BarLocationO_AEtWOhTm_0(v61, type metadata accessor for ToolbarStorage.GroupItem);
  swift_bridgeObjectRelease();
  *(void *)(v24 + 88) = 0;
  outlined destroy of _ViewList_View?(v25, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, (uint64_t)type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?);
  uint64_t v51 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v25, 1, 1, v51);
}

void type metadata completion function for ToolbarViewListVisitor()
{
  type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?(319, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (offset: Int, element: ToolbarStorage.Item)()
{
  if (!lazy cache variable for type metadata for (offset: Int, element: ToolbarStorage.Item))
  {
    type metadata accessor for ToolbarStorage.Item(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: ToolbarStorage.Item));
    }
  }
}

void type metadata accessor for (Int, ToolbarStorage.Item)()
{
  if (!lazy cache variable for type metadata for (Int, ToolbarStorage.Item))
  {
    type metadata accessor for ToolbarStorage.Item(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Int, ToolbarStorage.Item));
    }
  }
}

uint64_t ToolbarMakeEntries.resolvedDefaultVisibility.getter()
{
  int v1 = *MEMORY[0x1E4F4E7A0];
  if (v0[9] == *MEMORY[0x1E4F4E7A0]) {
    return 1;
  }
  uint64_t Value = (unsigned __int8 *)AGGraphGetValue();
  if (v0[6] == v1) {
    return 1;
  }
  uint64_t v3 = *Value;
  if (v0[8] != v1)
  {
    if (*(unsigned char *)AGGraphGetValue()) {
      return 1;
    }
  }
  if (v0[7] != v1)
  {
    if (*(unsigned char *)AGGraphGetValue()) {
      return v3;
    }
    else {
      return 2;
    }
  }
  return v3;
}

uint64_t outlined destroy of _ViewList_Backing(uint64_t a1)
{
  return a1;
}

uint64_t implicit closure #1 in static BarItemModifier._makeView(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

unint64_t lazy protocol witness table accessor for type BarItemModifier.Transform and conformance BarItemModifier.Transform()
{
  unint64_t result = lazy protocol witness table cache variable for type BarItemModifier.Transform and conformance BarItemModifier.Transform;
  if (!lazy protocol witness table cache variable for type BarItemModifier.Transform and conformance BarItemModifier.Transform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarItemModifier.Transform and conformance BarItemModifier.Transform);
  }
  return result;
}

uint64_t outlined init with take of ToolbarStorage.Item(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance CustomHoverEffectPrimitiveViewModifier<A>.MakeRootContext(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

ValueMetadata *type metadata accessor for CompositeNavigationSplitViewVisibility.Key()
{
  return &type metadata for CompositeNavigationSplitViewVisibility.Key;
}

uint64_t partial apply for closure #1 in NavigationSplitSidebarStateMachine.splitViewController(_:willChangeTo:visibilityEngine:)()
{
  return closure #1 in NavigationSplitSidebarStateMachine.splitViewController(_:willChangeTo:visibilityEngine:)((long long *)(v0 + 16), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96));
}

ValueMetadata *type metadata accessor for SearchPresentationToolbarBehavior.Role()
{
  return &type metadata for SearchPresentationToolbarBehavior.Role;
}

ValueMetadata *type metadata accessor for ResolvedTextFieldLabelDisplayMode()
{
  return &type metadata for ResolvedTextFieldLabelDisplayMode;
}

ValueMetadata *type metadata accessor for AccessibilityLargeContentViewTree.Key()
{
  return &type metadata for AccessibilityLargeContentViewTree.Key;
}

ValueMetadata *type metadata accessor for ToolbarItemBridgingPreferenceKey()
{
  return &type metadata for ToolbarItemBridgingPreferenceKey;
}

ValueMetadata *type metadata accessor for ToolbarItemBridgingConfiguration()
{
  return &type metadata for ToolbarItemBridgingConfiguration;
}

ValueMetadata *type metadata accessor for AllowedPreferenceKeysWhileHidden()
{
  return &type metadata for AllowedPreferenceKeysWhileHidden;
}

ValueMetadata *type metadata accessor for PlatformItemListContentModifier()
{
  return &type metadata for PlatformItemListContentModifier;
}

uint64_t partial apply for implicit closure #1 in static KeyboardShortcutBindingBehavior._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static KeyboardShortcutBindingBehavior._makeView(modifier:inputs:body:)(*(_DWORD *)(v0 + 32), *(void *)(v0 + 40), *(long long **)(v0 + 48));
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SearchFieldConfigurationReader<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static SearchFieldConfigurationReader._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

ValueMetadata *type metadata accessor for DialogSuppressionConfiguration()
{
  return &type metadata for DialogSuppressionConfiguration;
}

ValueMetadata *type metadata accessor for ControlGroupStyleConfiguration()
{
  return &type metadata for ControlGroupStyleConfiguration;
}

ValueMetadata *type metadata accessor for AccessibilityProgressViewStyle()
{
  return &type metadata for AccessibilityProgressViewStyle;
}

ValueMetadata *type metadata accessor for AccessibilityControlGroupStyle()
{
  return &type metadata for AccessibilityControlGroupStyle;
}

ValueMetadata *type metadata accessor for OnChangeOfSuggestionsModifier()
{
  return &type metadata for OnChangeOfSuggestionsModifier;
}

ValueMetadata *type metadata accessor for NavigationSplitViewVisibility.Kind()
{
  return &type metadata for NavigationSplitViewVisibility.Kind;
}

ValueMetadata *type metadata accessor for _NavigationTransitionOutputs()
{
  return &type metadata for _NavigationTransitionOutputs;
}

ValueMetadata *type metadata accessor for ToolbarCustomizationBehavior.Role()
{
  return &type metadata for ToolbarCustomizationBehavior.Role;
}

ValueMetadata *type metadata accessor for NavigationSplitRepresentable()
{
  return &type metadata for NavigationSplitRepresentable;
}

ValueMetadata *type metadata accessor for ProvidesEditMenuInteraction()
{
  return &type metadata for ProvidesEditMenuInteraction;
}

ValueMetadata *type metadata accessor for PlatformItemEnabledModifier()
{
  return &type metadata for PlatformItemEnabledModifier;
}

ValueMetadata *type metadata accessor for SearchSuggestionsPlacement()
{
  return &type metadata for SearchSuggestionsPlacement;
}

ValueMetadata *type metadata accessor for IncludesStyledTextModifier()
{
  return &type metadata for IncludesStyledTextModifier;
}

ValueMetadata *type metadata accessor for HasCustomScopeBarPredicate()
{
  return &type metadata for HasCustomScopeBarPredicate;
}

ValueMetadata *type metadata accessor for GroupBoxStyleConfiguration()
{
  return &type metadata for GroupBoxStyleConfiguration;
}

ValueMetadata *type metadata accessor for AccessibilityGroupBoxStyle()
{
  return &type metadata for AccessibilityGroupBoxStyle;
}

ValueMetadata *type metadata accessor for TextPlatformItemListFlags()
{
  return &type metadata for TextPlatformItemListFlags;
}

ValueMetadata *type metadata accessor for StepperStyleConfiguration()
{
  return &type metadata for StepperStyleConfiguration;
}

ValueMetadata *type metadata accessor for NavigationSplitViewColumn.Tag()
{
  return &type metadata for NavigationSplitViewColumn.Tag;
}

ValueMetadata *type metadata accessor for MenuActionDismissBehavior.Guts()
{
  return &type metadata for MenuActionDismissBehavior.Guts;
}

ValueMetadata *type metadata accessor for AccessibilityStepperStyle()
{
  return &type metadata for AccessibilityStepperStyle;
}

ValueMetadata *type metadata accessor for SliderStyleConfiguration()
{
  return &type metadata for SliderStyleConfiguration;
}

ValueMetadata *type metadata accessor for SearchFieldConfiguration.Control()
{
  return &type metadata for SearchFieldConfiguration.Control;
}

ValueMetadata *type metadata accessor for SearchFieldConfiguration.Key()
{
  return &type metadata for SearchFieldConfiguration.Key;
}

ValueMetadata *type metadata accessor for LazySearchSuggestionsKey()
{
  return &type metadata for LazySearchSuggestionsKey;
}

ValueMetadata *type metadata accessor for AccessibilitySliderStyle()
{
  return &type metadata for AccessibilitySliderStyle;
}

ValueMetadata *type metadata accessor for AccessibilityPickerStyle()
{
  return &type metadata for AccessibilityPickerStyle;
}

ValueMetadata *type metadata accessor for ToolbarSearchFieldStyle()
{
  return &type metadata for ToolbarSearchFieldStyle;
}

ValueMetadata *type metadata accessor for ListAccessoryVisibility.Guts()
{
  return &type metadata for ListAccessoryVisibility.Guts;
}

ValueMetadata *type metadata accessor for KeyboardShortcutBinding()
{
  return &type metadata for KeyboardShortcutBinding;
}

ValueMetadata *type metadata accessor for GaugeStyleConfiguration.Label()
{
  return &type metadata for GaugeStyleConfiguration.Label;
}

ValueMetadata *type metadata accessor for GaugeStyleConfiguration.CurrentValueLabel()
{
  return &type metadata for GaugeStyleConfiguration.CurrentValueLabel;
}

void *type metadata accessor for _NavigationSplitReader()
{
  return &unk_1ED43CE50;
}

void *type metadata accessor for PlatformItemCollection.Storage()
{
  return &unk_1ED43A3C0;
}

ValueMetadata *type metadata accessor for PaletteSelectionEffect.Guts()
{
  return &type metadata for PaletteSelectionEffect.Guts;
}

ValueMetadata *type metadata accessor for MenuStyleConfiguration()
{
  return &type metadata for MenuStyleConfiguration;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance CollectionViewListRoot<A, B>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return static CollectionViewListRoot._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), a4);
}

ValueMetadata *type metadata accessor for AccessibilityMenuStyle()
{
  return &type metadata for AccessibilityMenuStyle;
}

ValueMetadata *type metadata accessor for AccessibilityListStyle()
{
  return &type metadata for AccessibilityListStyle;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance NavigationStackReader<A, B>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return static NavigationStackReader._makeView(view:inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 40), a3);
}

ValueMetadata *type metadata accessor for NavigationSplitReader()
{
  return &type metadata for NavigationSplitReader;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in NavigationButtonInput()
{
  return &protocol witness table for NavigationButtonInput;
}

ValueMetadata *type metadata accessor for DynamicHiddenModifier()
{
  return &type metadata for DynamicHiddenModifier;
}

ValueMetadata *type metadata accessor for SearchHasSuggestions()
{
  return &type metadata for SearchHasSuggestions;
}

ValueMetadata *type metadata accessor for SearchFieldPlacement()
{
  return &type metadata for SearchFieldPlacement;
}

ValueMetadata *type metadata accessor for SearchFieldPlacement.DrawerDisplayMode()
{
  return &type metadata for SearchFieldPlacement.DrawerDisplayMode;
}

ValueMetadata *type metadata accessor for HoverContainerEffect()
{
  return &type metadata for HoverContainerEffect;
}

ValueMetadata *type metadata accessor for ViewDestinationKind()
{
  return &type metadata for ViewDestinationKind;
}

ValueMetadata *type metadata accessor for SidebarSectionStyle()
{
  return &type metadata for SidebarSectionStyle;
}

uint64_t key path getter for NavigationStateHost.seedHost : NavigationStateHost@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 184);
  return swift_retain();
}

ValueMetadata *type metadata accessor for NavigationSplitCore()
{
  return &type metadata for NavigationSplitCore;
}

ValueMetadata *type metadata accessor for LazySearchScopesKey()
{
  return &type metadata for LazySearchScopesKey;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance VariadicViewForest<A, B>(int *a1, uint64_t *a2, uint64_t *a3)
{
  return static VariadicViewForest._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4]);
}

ValueMetadata *type metadata accessor for TextInputDictation()
{
  return &type metadata for TextInputDictation;
}

ValueMetadata *type metadata accessor for SectionPickerStyle()
{
  return &type metadata for SectionPickerStyle;
}

ValueMetadata *type metadata accessor for ResolvedGaugeStyle()
{
  return &type metadata for ResolvedGaugeStyle;
}

void *type metadata accessor for ListSectionSpacing.Storage()
{
  return &unk_1ED428470;
}

void *type metadata accessor for LegacyBaseModifier()
{
  return &unk_1ED428270;
}

void *type metadata accessor for ListPaddingAnchor.Storage()
{
  return &unk_1ED423838;
}

ValueMetadata *type metadata accessor for LinkValueTraitKey()
{
  return &type metadata for LinkValueTraitKey;
}

ValueMetadata *type metadata accessor for ButtonBorderShape.Guts()
{
  return &type metadata for ButtonBorderShape.Guts;
}

ValueMetadata *type metadata accessor for SelectionContext()
{
  return &type metadata for SelectionContext;
}

ValueMetadata *type metadata accessor for ScrollEventState()
{
  return &type metadata for ScrollEventState;
}

ValueMetadata *type metadata accessor for MenuSectionStyle()
{
  return &type metadata for MenuSectionStyle;
}

ValueMetadata *type metadata accessor for ResolvedDivider()
{
  return &type metadata for ResolvedDivider;
}

ValueMetadata *type metadata accessor for ToolbarRoleKey()
{
  return &type metadata for ToolbarRoleKey;
}

ValueMetadata *type metadata accessor for TextFieldState.DeprecatedActions()
{
  return &type metadata for TextFieldState.DeprecatedActions;
}

ValueMetadata *type metadata accessor for TextFieldState.FormatActions()
{
  return &type metadata for TextFieldState.FormatActions;
}

ValueMetadata *type metadata accessor for KeyboardType()
{
  return &type metadata for KeyboardType;
}

ValueMetadata *type metadata accessor for StyledView()
{
  return &type metadata for StyledView;
}

uint64_t type metadata completion function for Section()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for ToolbarModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t SearchField.state.getter()
{
  uint64_t v1 = v0;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for State<SearchFieldState>(0);
  MEMORY[0x1F4188790](v6);
  unint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StateOrBinding<SearchFieldState>(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI16SearchFieldStateVWOcTm_0(v1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for StateOrBinding<SearchFieldState>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_1((uint64_t)v11, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
    MEMORY[0x18C113DA0](v3);
    uint64_t v12 = type metadata accessor for Binding<SearchFieldState>;
    uint64_t v13 = (uint64_t)v5;
  }
  else
  {
    _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_1((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for State<SearchFieldState>);
    State.wrappedValue.getter();
    uint64_t v12 = type metadata accessor for State<SearchFieldState>;
    uint64_t v13 = (uint64_t)v8;
  }
  return _s7SwiftUI16SearchFieldStateVWOhTm_4(v13, (uint64_t (*)(void))v12);
}

void type metadata accessor for State<SearchFieldState>(uint64_t a1)
{
}

uint64_t SearchField.$state.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for State<SearchFieldState>(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StateOrBinding<SearchFieldState>(0);
  MEMORY[0x1F4188790](v6);
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI16SearchFieldStateVWOcTm_0(v1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for StateOrBinding<SearchFieldState>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_1((uint64_t)v8, a1, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  }
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_1((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for State<SearchFieldState>);
  State.projectedValue.getter();
  return _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for State<SearchFieldState>);
}

double FocusStore.Entry.defaultFocusItem.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for FocusStore.Entry.Target();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = &v21[-v8];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v6 + 16))(&v21[-v8], v2 + *(int *)(a1 + 40), v5, v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(void *)(a2 + 48) = 1;
    *(_DWORD *)(a2 + 56) = 0;
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
    return result;
  }
  outlined init with take of Binding<SearchFieldState>((uint64_t)v9, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
  outlined init with take of Binding<SearchFieldState>((uint64_t)(v9 + 8), (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for WeakBox<FocusBridge>);
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_13;
  }
  uint64_t v12 = Strong;
  if (swift_conformsToProtocol2()) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  if (!v13)
  {
    swift_release();
LABEL_13:
    outlined destroy of SearchFieldState((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for WeakBox<FocusBridge>);
    outlined destroy of SearchFieldState((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(void *)(a2 + 48) = 1;
    *(_DWORD *)(a2 + 56) = 0;
    return result;
  }
  uint64_t v14 = swift_weakLoadStrong();
  if (v14)
  {
    uint64_t v15 = (void *)FocusBridge.host.getter();
    uint64_t v17 = v16;
    uint64_t v14 = swift_release();
    if (v15)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v17 + 8) + 48))(ObjectType);

      uint64_t v14 = swift_release();
    }
  }
  memset(v22, 0, sizeof(v22));
  uint64_t v23 = 1;
  int v24 = 0;
  MEMORY[0x1F4188790](v14);
  *(void *)&v21[-16] = v22;
  MEMORY[0x1F4188790](v19);
  *(void *)&v21[-16] = partial apply for closure #1 in FocusStore.Entry.defaultFocusItem.getter;
  *(void *)&v21[-8] = v20;
  swift_retain();
  dispatch thunk of ResponderNode.visit(applying:)();
  swift_release_n();
  outlined destroy of SearchFieldState((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for WeakBox<FocusBridge>);
  outlined destroy of SearchFieldState((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
  outlined init with take of Binding<SearchFieldState>((uint64_t)v22, a2, (uint64_t (*)(void))type metadata accessor for FocusItem?);
  return result;
}

uint64_t closure #1 in FocusStoreLocation.set(_:transaction:)(uint64_t a1, uint64_t a2, void (*a3)(char *, char *, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v61 = a3;
  uint64_t v62 = a2;
  uint64_t v7 = type metadata accessor for FocusStore.Entry();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v55 = *(void *)(v8 - 8);
  uint64_t v56 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v58 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v53 = (char *)&v51 - v11;
  uint64_t v60 = v7;
  uint64_t v59 = *(void *)(v7 - 8);
  uint64_t v12 = *(void *)(v59 + 64);
  MEMORY[0x1F4188790](v13);
  uint64_t v52 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  unint64_t v54 = (char *)&v51 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v51 = (char *)&v51 - v17;
  uint64_t v57 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v22 = type metadata accessor for Optional();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v51 - v24;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v27 = (void *)result;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v25, 1, 1, TupleTypeMetadata2);
    uint64_t v28 = (char *)v27 + *(void *)(class metadata base offset for FocusStoreLocation + *v27 + 48);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v28, v25, v22);
    swift_endAccess();
    uint64_t v29 = a5;
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      FocusStoreLocation.getValue(forReading:)(0, (uint64_t)v20);
      char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v20, a4);
      if ((v30 & 1) == 0)
      {
        unint64_t v31 = (char *)v27 + *(void *)(class metadata base offset for FocusStoreLocation + *v27 + 56);
        swift_beginAccess();
        uint64_t v32 = v55;
        uint64_t v33 = v53;
        uint64_t v34 = v31;
        uint64_t v35 = v56;
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v53, v34, v56);
        uint64_t v37 = v59;
        uint64_t v36 = v60;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v33, 1, v60) == 1)
        {
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v33, v35);
        }
        else
        {
          uint64_t v62 = v29;
          uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
          unint64_t v46 = v51;
          v61(v51, v33, v36);
          char v47 = v54;
          (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v54, v46, v36);
          unint64_t v48 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
          uint64_t v49 = swift_allocObject();
          uint64_t v50 = v62;
          *(void *)(v49 + 16) = a4;
          *(void *)(v49 + 24) = v50;
          v61((char *)(v49 + v48), v47, v36);
          static Update.enqueueAction(_:)();
          swift_release();
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v46, v36);
        }
      }
    }
    else
    {
      uint64_t v38 = v58;
      FocusStoreLocation.findEntry(with:)(v62, v58);
      uint64_t v40 = v59;
      uint64_t v39 = v60;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v38, 1, v60) != 1)
      {
        uint64_t v62 = a5;
        uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
        uint64_t v41 = v52;
        v61(v52, (char *)v38, v39);
        uint64_t v42 = v54;
        (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v54, v41, v39);
        unint64_t v43 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
        uint64_t v44 = swift_allocObject();
        uint64_t v45 = v62;
        *(void *)(v44 + 16) = a4;
        *(void *)(v44 + 24) = v45;
        v61((char *)(v44 + v43), v42, v39);
        static Update.enqueueAction(_:)();
        swift_release();
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v41, v39);
      }
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v38, v56);
      FocusStoreLocation.deferUpdate(_:)(v62);
    }
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for FocusStore.Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v41 = a1;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  uint64_t v40 = type metadata accessor for AttributedString();
  uint64_t v9 = *(void *)(v40 - 8);
  unsigned __int8 v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10;
  uint64_t v12 = v10 + 8;
  unint64_t v13 = v10 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = (void *)(((unint64_t)v7 + v12) & v13);
  uint64_t v15 = (unsigned __int8 *)(((unint64_t)v8 + v12) & v13);
  unint64_t v16 = v10 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v17 = (v11 + 9) & ~v11;
  uint64_t v18 = *(void *)(v9 + 64);
  if (((v10 + 16) & v16) + ((v17 + v18) & 0xFFFFFFFFFFFFFFFCLL) + 9 <= 0x10) {
    unint64_t v19 = 16;
  }
  else {
    unint64_t v19 = ((v10 + 16) & v16) + ((v17 + v18) & 0xFFFFFFFFFFFFFFFCLL) + 9;
  }
  unsigned int v20 = v15[v19];
  swift_bridgeObjectRetain();
  if (v20 >= 2)
  {
    if (v19 <= 3) {
      uint64_t v21 = v19;
    }
    else {
      uint64_t v21 = 4;
    }
    switch(v21)
    {
      case 1:
        int v22 = *v15;
        goto LABEL_13;
      case 2:
        int v22 = *(unsigned __int16 *)v15;
        goto LABEL_13;
      case 3:
        int v22 = *(unsigned __int16 *)v15 | (v15[2] << 16);
        goto LABEL_13;
      case 4:
        int v22 = *(_DWORD *)v15;
LABEL_13:
        int v23 = (v22 | ((v20 - 2) << (8 * v19))) + 2;
        unsigned int v24 = v22 + 2;
        if (v19 >= 4) {
          unsigned int v20 = v24;
        }
        else {
          unsigned int v20 = v23;
        }
        break;
      default:
        break;
    }
  }
  if (v20 == 1)
  {
    *uint64_t v14 = *(void *)v15;
    uint64_t v25 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v26 = (void *)((unint64_t)(v15 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v25 = *v26;
    unint64_t v27 = ((unint64_t)v25 + v12) & v16;
    unint64_t v28 = ((unint64_t)v26 + v12) & v16;
    *(unsigned char *)unint64_t v27 = *(unsigned char *)v28;
    *(unsigned char *)(v27 | 1) = *(unsigned char *)(v28 | 1);
    *(unsigned char *)(v27 | 2) = *(unsigned char *)(v28 | 2);
    *(unsigned char *)(v27 | 3) = *(unsigned char *)(v28 | 3);
    unint64_t v29 = (v27 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v30 = (v28 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    int v31 = *(_DWORD *)v30;
    *(unsigned char *)(v29 + 4) = *(unsigned char *)(v30 + 4);
    *(_DWORD *)unint64_t v29 = v31;
    uint64_t v32 = (v11 + 5 + v29) & ~v11;
    uint64_t v33 = (v11 + 5 + v30) & ~v11;
    uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    swift_retain();
    swift_retain();
    v34(v32, v33, v40);
    *(unsigned char *)(v32 + v18) = *(unsigned char *)(v33 + v18);
    unint64_t v35 = (v32 + v18) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v36 = (v33 + v18) & 0xFFFFFFFFFFFFFFFCLL;
    int v37 = *(_DWORD *)(v36 + 4);
    *(unsigned char *)(v35 + 8) = *(unsigned char *)(v36 + 8);
    *(_DWORD *)(v35 + 4) = v37;
    char v38 = 1;
  }
  else
  {
    swift_weakCopyInit();
    swift_weakCopyInit();
    char v38 = 0;
  }
  *((unsigned char *)v14 + v19) = v38;
  return v41;
}

uint64_t closure #1 in FocusStoreLocation.findEntry(with:)(uint64_t a1, unsigned char *a2, uint64_t a3, char *a4)
{
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  uint64_t v6 = type metadata accessor for FocusStore.Entry();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unsigned __int8 v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, v7, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v6) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  unsigned int v20 = a2;
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v17(v15, v10, v6);
  if ((FocusStore.Entry.isValid.getter(v6) & 1) == 0 || (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, v6);
  }
  uint64_t v18 = v21;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v21, v7);
  v17(v18, v15, v6);
  uint64_t result = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v6);
  *unsigned int v20 = 1;
  return result;
}

uint64_t closure #1 in FocusStoreLocation.findFocusedEntry()(uint64_t a1, BOOL *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v54 = a5;
  uint64_t v55 = a2;
  uint64_t v56 = a4;
  uint64_t v53 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v53);
  uint64_t v52 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1F4188790](v8 - 8);
  unsigned __int8 v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v12 = v11;
  uint64_t v57 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for FocusStore.Entry();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v49 - v18;
  double v21 = MEMORY[0x1F4188790](v20);
  int v23 = (char *)&v49 - v22;
  uint64_t v24 = a1;
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, v24, v16, v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v19, 1, v15) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }
  uint64_t v51 = v17;
  uint64_t v58 = v16;
  uint64_t v29 = v26 + 32;
  unint64_t v28 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
  v28(v23, v19, v15);
  if ((FocusStore.Entry.isValid.getter(v15) & 1) == 0) {
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v23, v15);
  }
  uint64_t v50 = v26;
  uint64_t v30 = FocusStore.Entry.responder.getter(v15);
  uint64_t v49 = (void (*)(uint64_t, uint64_t, char *))v28;
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v52 = (char *)v15;
    uint64_t v53 = (uint64_t)v23;
    uint64_t v32 = *(void *)(a3 + 24);
    unint64_t v33 = *(void *)(v32 + 16);
    uint64_t v57 = v32 + 32;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v34 = 0;
    while (1)
    {
      if (v34 == v33)
      {
        unint64_t v60 = 0;
        uint64_t v61 = 0;
        unint64_t v34 = v33;
        char v62 = 1;
      }
      else
      {
        if (v34 >= *(void *)(v32 + 16))
        {
          __break(1u);
          return result;
        }
        outlined init with copy of SearchFieldState(v57 + 8 * v34, (uint64_t)&v59, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
        unint64_t v60 = v34;
        outlined init with take of Binding<SearchFieldState>((uint64_t)&v59, (uint64_t)&v61, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
        char v62 = 0;
        ++v34;
      }
      outlined init with take of Binding<SearchFieldState>((uint64_t)&v60, (uint64_t)&v63, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: WeakBox<ViewResponder>)?);
      if (v64[8] == 1)
      {
        swift_bridgeObjectRelease();
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *))(v50 + 8))(v53, v52);
      }
      uint64_t v35 = v29;
      uint64_t v36 = v63;
      outlined init with take of Binding<SearchFieldState>((uint64_t)v64, (uint64_t)&v60, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        uint64_t v38 = Strong;
        swift_release();
        uint64_t result = outlined destroy of SearchFieldState((uint64_t)&v60, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
        BOOL v39 = v38 == v31;
        uint64_t v40 = v58;
        if (v39 && v36 < *v56)
        {
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v41 = v54;
          (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v54, v40);
          uint64_t v42 = v52;
          v49(v41, v53, v52);
          uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, char *))(v50 + 56))(v41, 0, 1, v42);
          unint64_t v43 = v55;
          *uint64_t v56 = v36;
          BOOL *v43 = v36 == 0;
          return result;
        }
      }
      else
      {
        uint64_t result = outlined destroy of SearchFieldState((uint64_t)&v60, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
      }
      uint64_t v29 = v35;
    }
  }
  FocusStore.Entry.searchFieldState.getter(v15, (uint64_t)v10);
  int v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48))(v10, 1, v12);
  uint64_t v45 = v51;
  if (v44 == 1)
  {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v23, v15);
    return outlined destroy of SearchFieldState((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>?);
  }
  else
  {
    outlined init with take of Binding<SearchFieldState>((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
    uint64_t v46 = (uint64_t)v52;
    MEMORY[0x18C113DA0](v12);
    outlined destroy of SearchFieldState((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
    int v47 = *(unsigned __int8 *)(v46 + *(int *)(v53 + 40));
    outlined destroy of SearchFieldState(v46, type metadata accessor for SearchFieldState);
    if (v47 == 1)
    {
      uint64_t v48 = v54;
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v54, v58);
      v49(v48, (uint64_t)v23, (char *)v15);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v50 + 56))(v48, 0, 1, v15);
      *uint64_t v55 = 1;
    }
    else
    {
      return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v23, v15);
    }
  }
  return result;
}

uint64_t destroy for FocusStore.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for AttributedString();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = (unsigned __int8 *)((v4 + (v7 | 7) + 8) & ~(v7 | 7));
  unint64_t v9 = *(_DWORD *)(v6 + 80) & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v10 = ((v7 + 16) & v9) + ((((v7 + 9) & ~v7) + *(void *)(v6 + 64)) & 0xFFFFFFFFFFFFFFFCLL) + 9;
  if (v10 <= 0x10) {
    unint64_t v10 = 16;
  }
  unsigned int v11 = v8[v10];
  unsigned int v12 = v11 - 2;
  if (v11 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *v8;
        goto LABEL_12;
      case 2:
        int v14 = *(unsigned __int16 *)v8;
        goto LABEL_12;
      case 3:
        int v14 = *(unsigned __int16 *)v8 | (v8[2] << 16);
        goto LABEL_12;
      case 4:
        int v14 = *(_DWORD *)v8;
LABEL_12:
        int v15 = (v14 | (v12 << (8 * v10))) + 2;
        unsigned int v11 = v14 + 2;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 1)
  {
    uint64_t v18 = *(void *)(v5 - 8);
    swift_release();
    swift_release();
    uint64_t v16 = *(uint64_t (**)(unint64_t, uint64_t))(v18 + 8);
    return v16((v7+ ((((v7 + ((unint64_t)(v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v9) + 7) & 0xFFFFFFFFFFFFFFFCLL)+ 5) & ~v7, v5);
  }
  else
  {
    swift_weakDestroy();
    return swift_weakDestroy();
  }
}

uint64_t initializeWithTake for FocusStore.Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void *)(v9 - 8);
  unsigned __int8 v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v11;
  uint64_t v13 = v11 + 8;
  unint64_t v14 = v11 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  int v15 = (void *)(((unint64_t)v7 + v13) & v14);
  uint64_t v16 = (unsigned __int8 *)(((unint64_t)v8 + v13) & v14);
  unint64_t v17 = v11 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v18 = (v12 + 9) & ~v12;
  uint64_t v19 = *(void *)(v10 + 64);
  if (((v12 + 16) & v17) + ((v18 + v19) & 0xFFFFFFFFFFFFFFFCLL) + 9 <= 0x10) {
    unint64_t v20 = 16;
  }
  else {
    unint64_t v20 = ((v12 + 16) & v17) + ((v18 + v19) & 0xFFFFFFFFFFFFFFFCLL) + 9;
  }
  unsigned int v21 = v16[v20];
  unsigned int v22 = v21 - 2;
  if (v21 >= 2)
  {
    if (v20 <= 3) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = 4;
    }
    switch(v23)
    {
      case 1:
        int v24 = *v16;
        goto LABEL_13;
      case 2:
        int v24 = *(unsigned __int16 *)v16;
        goto LABEL_13;
      case 3:
        int v24 = *(unsigned __int16 *)v16 | (v16[2] << 16);
        goto LABEL_13;
      case 4:
        int v24 = *(_DWORD *)v16;
LABEL_13:
        int v25 = (v24 | (v22 << (8 * v20))) + 2;
        unsigned int v21 = v24 + 2;
        if (v20 < 4) {
          unsigned int v21 = v25;
        }
        break;
      default:
        break;
    }
  }
  if (v21 == 1)
  {
    void *v15 = *(void *)v16;
    uint64_t v26 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v27 = (void *)((unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v26 = *v27;
    unint64_t v28 = ((unint64_t)v26 + v13) & v17;
    unint64_t v29 = ((unint64_t)v27 + v13) & v17;
    *(unsigned char *)unint64_t v28 = *(unsigned char *)v29;
    *(unsigned char *)(v28 | 1) = *(unsigned char *)(v29 | 1);
    uint64_t v30 = ~v12;
    *(unsigned char *)(v28 | 2) = *(unsigned char *)(v29 | 2);
    *(unsigned char *)(v28 | 3) = *(unsigned char *)(v29 | 3);
    unint64_t v31 = (v28 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v32 = (v29 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v27) = *(_DWORD *)v32;
    *(unsigned char *)(v31 + 4) = *(unsigned char *)(v32 + 4);
    *(_DWORD *)unint64_t v31 = v27;
    uint64_t v33 = v12 + 5;
    unint64_t v34 = (v33 + v31) & v30;
    unint64_t v35 = (v33 + v32) & v30;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))(v34, v35, v9);
    *(unsigned char *)(v34 + v19) = *(unsigned char *)(v35 + v19);
    unint64_t v36 = (v34 + v19) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v37 = (v35 + v19) & 0xFFFFFFFFFFFFFFFCLL;
    int v38 = *(_DWORD *)(v37 + 4);
    *(unsigned char *)(v36 + 8) = *(unsigned char *)(v37 + 8);
    *(_DWORD *)(v36 + 4) = v38;
    char v39 = 1;
  }
  else
  {
    swift_weakTakeInit();
    swift_weakTakeInit();
    char v39 = 0;
  }
  *((unsigned char *)v15 + v20) = v39;
  return a1;
}

uint64_t FocusStore.Entry.isValid.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for FocusStore.Entry.Target();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = &v11[-v6 - 8];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v4 + 16))(&v11[-v6 - 8], v1 + *(int *)(a1 + 40), v3, v5);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    char v8 = 1;
  }
  else
  {
    outlined init with take of Binding<SearchFieldState>((uint64_t)(v7 + 8), (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for WeakBox<FocusBridge>);
    if (swift_weakLoadStrong())
    {
      char v8 = FocusBridge.canAcceptFocus.getter();
      swift_release();
    }
    else
    {
      char v8 = 0;
    }
    outlined destroy of SearchFieldState((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for WeakBox<FocusBridge>);
    outlined destroy of SearchFieldState((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
  }
  return v8 & 1;
}

uint64_t outlined init with take of Binding<SearchFieldState>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_2(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  type metadata accessor for CollectionOfOne<Hashable>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_3(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t type metadata accessor for FocusStore.Entry.Target()
{
  return __swift_instantiateGenericMetadata();
}

void *initializeWithCopy for FocusStore.Entry.Target(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v6 = *(int *)(v5 + 32);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    char *v7 = *((unsigned char *)a2 + v6);
    v7[1] = *((unsigned char *)a2 + v6 + 1);
    *((_WORD *)v7 + 1) = *(_WORD *)((char *)a2 + v6 + 2);
    unsigned char v7[8] = *((unsigned char *)a2 + v6 + 8);
    *((_DWORD *)v7 + 1) = *(_DWORD *)((char *)a2 + v6 + 4);
    uint64_t v9 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v10 = v9[9];
    uint64_t v18 = &v7[v10];
    unsigned __int8 v11 = &v8[v10];
    uint64_t v12 = type metadata accessor for AttributedString();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_retain();
    swift_retain();
    v13(v18, v11, v12);
    v7[v9[10]] = v8[v9[10]];
    uint64_t v14 = v9[11];
    int v15 = &v7[v14];
    uint64_t v16 = &v8[v14];
    v15[4] = v16[4];
    *(_DWORD *)int v15 = *(_DWORD *)v16;
  }
  else
  {
    swift_weakCopyInit();
    swift_weakCopyInit();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void @objc UIHostingController.viewDidAppear(_:)(void *a1, uint64_t a2, char a3)
{
  id v4 = a1;
  UIHostingController.viewDidAppear(_:)(a3, (SEL *)&selRef_viewDidAppear_, (uint64_t (*)(id))specialized UIHostingController._viewDidAppear(_:));
}

uint64_t UIHostingController.viewDidAppear(_:)(char a1, SEL *a2, uint64_t (*a3)(id))
{
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for UIHostingController();
  id v7 = objc_msgSendSuper2(&v9, *a2, a1 & 1);
  return a3(v7);
}

void specialized UIHostingController._viewDidAppear(_:)()
{
  uint64_t v1 = v0;
  long long v11 = xmmword_18834FC50;
  UIHostingController.resolveRequiredBridges(in:allowedActions:)((uint64_t *)&v11, 3);
  id v2 = (id)specialized UIHostingController.host.getter();
  id v3 = objc_msgSend(v1, sel_transitionCoordinator);
  specialized _UIHostingView.viewControllerDidAppear(transitionCoordinator:animated:)();

  swift_unknownObjectRelease();
  if (specialized UIHostingController.navigationBridge.getter())
  {
    swift_retain();
    NavigationBridge_PhoneTV.hostingControllerDidAppear()();
  }
  specialized UIHostingController.host.getter();
  uint64_t v4 = _UIHostingView.sceneBridge.getter();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 136);
    uint64_t v6 = *(void *)(v4 + 144);
    uint64_t v7 = *(void *)(v4 + 152);
    int v8 = *(unsigned __int8 *)(v4 + 160);
    int v9 = *(unsigned __int8 *)(v4 + 161);
    swift_release();
    if (v9 == 1 && (v7 | v6 | v5 || v8) && !v8 && v5 == 1 && !(v7 | v6))
    {
      specialized UIHostingController.host.getter();
      uint64_t v10 = _UIHostingView.sceneBridge.getter();
      if (v10)
      {
        *(void *)(v10 + 144) = 0;
        *(void *)(v10 + 152) = 0;
        *(void *)(v10 + 136) = 2;
        *(_WORD *)(v10 + 160) = 256;
        swift_release();
      }
      UIHostingController.updateWindowSceneSizeRestrictions()();
    }
  }
}

uint64_t specialized _UIHostingView.viewControllerDidAppear(transitionCoordinator:animated:)()
{
  specialized _UIHostingView.focusBridge.getter();
  swift_retain();
  FocusBridge.hostingControllerDidAppear()();

  return swift_release();
}

Swift::Void __swiftcall FocusBridge.hostingControllerDidAppear()()
{
  uint64_t v1 = v0;
  if ((FocusBridge.canAcceptFocus.getter() & 1) == 0)
  {
    uint64_t v2 = *(void *)(v0 + 16);
    if ((v2 | 2) != v2)
    {
      *(void *)(v0 + 16) = v2 | 2;
      *(_DWORD *)(v0 + 48) = 0;
      uint64_t v3 = FocusBridge.host.getter();
      if (v3)
      {
        uint64_t v4 = (void *)v3;
        swift_getObjectType();
        v9[0] = 64;
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      }
    }
    FocusBridge.focusedItem.getter((uint64_t)v9);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    outlined destroy of FocusItem?((uint64_t)v9);
    if (!v6 && v5 == 1)
    {
      uint64_t v7 = *(void *)(v1 + 16);
      if ((v7 & 1) == 0) {
        *(void *)(v1 + 16) = v7 | 1;
      }
    }
    specialized FocusBridge.hostDidBecomeFirstResponder(in:)();
    uint64_t v8 = *(void *)(v1 + 16);
    if (v8) {
      *(void *)(v1 + 16) = v8 & 0xFFFFFFFFFFFFFFFELL;
    }
  }
}

uint64_t FocusBridge.canAcceptFocus.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = FocusBridge.host.getter();
  if (v2
    && (uint64_t v4 = (void *)v2,
        uint64_t v5 = v3,
        uint64_t ObjectType = swift_getObjectType(),
        uint64_t v7 = (void *)ViewRendererHost.uiViewController.getter(ObjectType, *(void *)(v5 + 8)),
        v4,
        v7))
  {
  }
  else if (swift_weakLoadStrong())
  {
    char v8 = FocusBridge.canAcceptFocus.getter();
    swift_release();
    return v8 & 1;
  }
  return (*(unsigned __int8 *)(v1 + 16) >> 1) & 1;
}

uint64_t specialized FocusBridge.hostDidBecomeFirstResponder(in:)()
{
  uint64_t result = FocusBridge.host.getter();
  if (result)
  {
    uint64_t v2 = (void *)result;
    uint64_t v3 = (void *)FocusBridge.host.getter();
    if (v3)
    {
      uint64_t v4 = v3;
      if ((*(unsigned char *)(v0 + 16) & 1) == 0)
      {
        id v5 = objc_msgSend(v3, sel_window);
        if (v5)
        {
          uint64_t v6 = v5;
        }
      }
    }
    FocusBridge.focusedItem.getter((uint64_t)v7);
    if (v7[5] || v7[6] != 1)
    {
      outlined init with take of FocusItem((uint64_t)v7, (uint64_t)v8);
      FocusBridge.moveFocus(to:designatedPlatformResponder:)((uint64_t)v8, 0);

      return outlined destroy of FocusItem((uint64_t)v8);
    }
    else
    {

      return outlined destroy of FocusItem?((uint64_t)v7);
    }
  }
  return result;
}

BOOL FocusStoreLocation.update()(char *a1)
{
  unint64_t v20 = a1;
  uint64_t v2 = *(void *)(*(void *)v1 + class metadata base offset for FocusStoreLocation);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  id v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  char v8 = (char *)&v20 - v7;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v13 = &v1[*(void *)(v12 + 56)];
  swift_beginAccess();
  uint64_t v14 = class metadata base offset for FocusStoreLocation;
  uint64_t v15 = type metadata accessor for FocusStore.Entry();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v13, 1, v15))
  {
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v16(v11, &v1[*(void *)(v14 + *(void *)v1 + 32)], v2);
  }
  else
  {
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v16(v8, v13, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v11, v8, v2);
  }
  FocusStoreLocation.getValue(forReading:)(0, (uint64_t)v5);
  v16(v20, v5, v2);
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  v18(v5, v2);
  v18(v11, v2);
  return (v17 & 1) == 0;
}

uint64_t FocusStoreLocation.getValue(forReading:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  char v4 = a1;
  uint64_t v28 = a2;
  uint64_t v26 = *(void *)(*(void *)(*v2 + class metadata base offset for FocusStoreLocation) - 8);
  MEMORY[0x1F4188790](a1);
  int v25 = (char *)&v25 - v5;
  uint64_t v27 = v6;
  uint64_t v7 = type metadata accessor for FocusStore.Entry();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v25 - v13;
  type metadata accessor for GraphHost();
  if (static GraphHost.isUpdating.getter() & 1) != 0 && (v4) {
    *((unsigned char *)v2 + *(void *)(class metadata base offset for FocusStoreLocation + *v2 + 72)) = 1;
  }
  uint64_t v15 = (char *)v2 + *(void *)(class metadata base offset for FocusStoreLocation + *v2 + 56);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v14, v15, v8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48);
  int v17 = v16(v14, 1, v7);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  if (v17 == 1
    || (int v18 = *((_DWORD *)v3 + 4), v18 == -1)
    || ((int v19 = *(_DWORD *)((char *)v3 + *(void *)(class metadata base offset for FocusStoreLocation + *v3 + 64)),
         v19 != -1)
      ? (BOOL v20 = v18 == v19)
      : (BOOL v20 = 0),
        !v20))
  {
    FocusStoreLocation.findFocusedEntry()((uint64_t)v11);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v9 + 40))(v15, v11, v8);
    swift_endAccess();
    *(_DWORD *)((char *)v3 + *(void *)(class metadata base offset for FocusStoreLocation + *v3 + 64)) = *((_DWORD *)v3 + 4);
  }
  if (v16(v15, 1, v7)) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 16))(v28, (char *)v3 + *(void *)(class metadata base offset for FocusStoreLocation + *v3 + 32), v27);
  }
  uint64_t v23 = v25;
  uint64_t v22 = v26;
  uint64_t v24 = v27;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v25, v15, v27);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(v28, v23, v24);
}

uint64_t getEnumTagSinglePayload for FocusStore.Entry(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(type metadata accessor for AttributedString() - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 64);
  if (((v10 & 0xFC ^ 0x1FCu) & (v10 + 16))
     + ((((v10 + 9) & ~(unint64_t)v10) + v11) & 0xFFFFFFFFFFFFFFFCLL)
     + 9 <= 0x10)
    unint64_t v12 = 16;
  else {
    unint64_t v12 = ((v10 & 0xFC ^ 0x1FCu) & (v10 + 16))
  }
        + ((((v10 + 9) & ~(unint64_t)v10) + v11) & 0xFFFFFFFFFFFFFFFCLL)
        + 9;
  uint64_t v13 = *(void *)(v6 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v8) {
    goto LABEL_26;
  }
  unint64_t v14 = v12
      + ((v10 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & (v10 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8))
      + 1;
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v18 = ((a2 - v8 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v18 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v18 < 2)
    {
LABEL_26:
      if (v7 < 0x7FFFFFFF)
      {
        unint64_t v21 = *(void *)(((unint64_t)a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (v21 >= 0xFFFFFFFF) {
          LODWORD(v21) = -1;
        }
        return (v21 + 1);
      }
      else
      {
        BOOL v20 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
        return v20(a1, v7, v5);
      }
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_26;
  }
LABEL_18:
  int v19 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v19 = 0;
  }
  if (v14)
  {
    if (v14 > 3) {
      LODWORD(v14) = 4;
    }
    switch((int)v14)
    {
      case 2:
        LODWORD(v14) = *a1;
        break;
      case 3:
        LODWORD(v14) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v14) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v14) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v14 | v19) + 1;
}

uint64_t type metadata accessor for FocusStore.Entry()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t FocusStoreLocation.findFocusedEntry()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for FocusStore.Entry();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  v6.n128_f64[0] = MEMORY[0x1F4188790](v4);
  unsigned int v8 = (char *)&v13 - v7;
  if (*(void *)(*(void *)(v1 + 32) + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v1), (v9 & 1) != 0))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v8, 1, 1, v3);
    uint64_t v14 = *(void *)(*(void *)(v1 + 24) + 16);
    uint64_t v10 = type metadata accessor for FocusStore.Key();
    MEMORY[0x1F4188790](v10);
    *(&v13 - 4) = v1;
    *(&v13 - 3) = (uint64_t)&v14;
    *(&v13 - 2) = (uint64_t)v8;
    swift_retain();
    swift_getWitnessTable();
    PropertyList.forEach<A>(keyType:_:)();
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v8, v4);
  }
  else
  {
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v3 - 8) + 56);
    return v12(a1, 1, 1, v3, v6);
  }
}

void storeEnumTagSinglePayload for FocusStore.Entry(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v25 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(type metadata accessor for AttributedString() - 8);
  int v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = *(void *)(v11 + 64);
  unint64_t v14 = 16;
  if (((v12 & 0xFC ^ 0x1FCu) & (v12 + 16))
     + ((((v12 + 9) & ~(unint64_t)v12) + v13) & 0xFFFFFFFFFFFFFFFCLL)
     + 9 > 0x10)
    unint64_t v14 = ((v12 & 0xFC ^ 0x1FCu) & (v12 + 16))
        + ((((v12 + 9) & ~(unint64_t)v12) + v13) & 0xFFFFFFFFFFFFFFFCLL)
        + 9;
  uint64_t v15 = *(void *)(v8 + 64);
  size_t v16 = v14
      + ((v12 + ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & (v12 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8))
      + 1;
  if (a3 <= v10)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v10 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v10 >= a2)
  {
    switch(v17)
    {
      case 1:
        a1[v16] = 0;
        if (a2) {
          goto LABEL_26;
        }
        break;
      case 2:
        *(_WORD *)&a1[v16] = 0;
        if (a2) {
          goto LABEL_26;
        }
        break;
      case 3:
LABEL_44:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v16] = 0;
        goto LABEL_25;
      default:
LABEL_25:
        if (a2)
        {
LABEL_26:
          if (v9 < 0x7FFFFFFF)
          {
            uint64_t v23 = (void *)((unint64_t)&a1[v15 + 7] & 0xFFFFFFFFFFFFFFF8);
            if ((a2 & 0x80000000) != 0) {
              uint64_t v24 = a2 ^ 0x80000000;
            }
            else {
              uint64_t v24 = (a2 - 1);
            }
            *uint64_t v23 = v24;
          }
          else
          {
            uint64_t v22 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
            v22(a1, a2, v9, v7);
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v18 = ~v10 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        break;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        break;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        break;
      default:
        return;
    }
  }
}

uint64_t type metadata accessor for FocusStore.Key()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for (offset: Int, element: WeakBox<ViewResponder>)?(uint64_t a1)
{
}

uint64_t FocusStore.Entry.responder.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for FocusStore.Entry.Target();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = &v12[-v6 - 8];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(&v12[-v6 - 8], v1 + *(int *)(a1 + 40), v3, v5);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return 0;
  }
  else
  {
    outlined init with take of Binding<SearchFieldState>((uint64_t)v7, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
    uint64_t Strong = swift_weakLoadStrong();
    outlined destroy of SearchFieldState((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
    if (Strong)
    {
      if (swift_conformsToProtocol2()) {
        uint64_t v8 = Strong;
      }
      else {
        uint64_t v8 = 0;
      }
      if (!v8) {
        swift_release();
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    outlined destroy of SearchFieldState((uint64_t)(v7 + 8), (uint64_t (*)(void))type metadata accessor for WeakBox<FocusBridge>);
  }
  return v8;
}

void specialized UIHostingController._viewDidDisappear(_:)()
{
  UIHostingController.requiredBridges.setter(*(void *)(v0 + direct field offset for UIHostingController.requiredBridges) & 0xFFFFFFFFFFFFFFFDLL);
}

uint64_t specialized UIHostingController._viewWillDisappear(_:)()
{
  uint64_t v1 = v0;
  id v2 = (id)specialized UIHostingController.host.getter();
  id v3 = objc_msgSend(v1, sel_transitionCoordinator);
  specialized _UIHostingView.viewControllerWillDisappear(transitionCoordinator:animated:)();

  swift_unknownObjectRelease();
  uint64_t v4 = (void *)specialized UIHostingController.toolbarBridge.getter();
  if (v4)
  {
    id v5 = v4;
    ToolbarBridge.willDisappear<A>(hostingController:)(v1);
  }
  if (specialized UIHostingController.navigationBridge.getter())
  {
    swift_retain();
    NavigationBridge_PhoneTV.hostingControllerWillDisappear()();
    swift_release();
  }
  uint64_t result = specialized UIHostingController.alwaysOnBridge.getter();
  if (result)
  {
    swift_retain();
    AlwaysOnBridge.hostingControllerWillDisappear()();
    return swift_release();
  }
  return result;
}

uint64_t specialized _UIHostingView.viewControllerWillDisappear(transitionCoordinator:animated:)()
{
  uint64_t v0 = specialized _UIHostingView.focusBridge.getter();
  swift_retain();
  if ((FocusBridge.canAcceptFocus.getter() & 1) != 0 && (uint64_t v1 = FocusBridge.host.getter()) != 0)
  {
    id v2 = (void *)v1;
    uint64_t v3 = *(void *)(v0 + 16);
    if ((v3 & 0xFFFFFFFFFFFFFFFDLL) != v3)
    {
      *(void *)(v0 + 16) = v3 & 0xFFFFFFFFFFFFFFFDLL;
      *(_DWORD *)(v0 + 48) = 0;
      uint64_t v4 = FocusBridge.host.getter();
      if (v4)
      {
        id v5 = (void *)v4;
        swift_getObjectType();
        v10[0] = 64;
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      }
    }
    FocusBridge.focusedItem.getter((uint64_t)v9);
    if (v9[5] || v9[6] != 1)
    {
      outlined init with take of FocusItem((uint64_t)v9, (uint64_t)v10);
      id v7 = (id)FocusItem.platformResponder.getter();
      if (!v7) {
        id v7 = v2;
      }
      uint64_t v8 = v7;
      objc_msgSend(v7, sel_resignFirstResponder);

      outlined destroy of FocusItem((uint64_t)v10);
    }
    else
    {

      outlined destroy of FocusItem?((uint64_t)v9);
    }
    return swift_release();
  }
  else
  {
    return swift_release();
  }
}

Swift::Void __swiftcall AlwaysOnBridge.hostingControllerWillDisappear()()
{
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1)
  {
    *(void *)(v0 + 32) = 0;

    uint64_t v2 = MEMORY[0x18C119DF0](v0 + 16);
    if (v2)
    {
      uint64_t v3 = (void *)v2;
      id v4 = (id)specialized UIHostingController.host.getter();

      type metadata accessor for _UIHostingView();
      swift_getWitnessTable();
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t ToolbarBridge.navigationItemWillDisappear<A>(hostingController:)(uint64_t result)
{
  if (*(void *)(*(void *)(v1 + direct field offset for ToolbarBridge.navigationAdaptor) + 16))
  {
    MEMORY[0x1F4188790](result);
    swift_bridgeObjectRetain();
    static Update.ensure<A>(_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t FocusStoreLocation.findEntry(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(*v2 + class metadata base offset for FocusStoreLocation);
  uint64_t v6 = *(void *)(*v2 + class metadata base offset for FocusStoreLocation + 8);
  uint64_t v7 = type metadata accessor for FocusStore.Entry();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  v10.n128_f64[0] = MEMORY[0x1F4188790](v8);
  int v12 = (char *)v17 - v11;
  if (*(void *)(v2[4] + 16) && (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v2), (v13 & 1) != 0))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v12, 1, 1, v7);
    uint64_t v14 = type metadata accessor for FocusStore.Key();
    v17[1] = v17;
    MEMORY[0x1F4188790](v14);
    v17[-4] = v5;
    v17[-3] = v6;
    v17[-2] = a1;
    v17[-1] = v12;
    swift_retain();
    swift_getWitnessTable();
    PropertyList.forEach<A>(keyType:_:)();
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v12, v8);
  }
  else
  {
    size_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v7 - 8) + 56);
    return v16(a2, 1, 1, v7, v10);
  }
}

uint64_t FocusStoreLocation.deferUpdate(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v1 + class metadata base offset for FocusStoreLocation);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v13 - v8;
  uint64_t v10 = *(int *)(TupleTypeMetadata2 + 48);
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(v3 - 8) + 16))((char *)&v13 - v8, a1, v3, v7);
  *(_DWORD *)&v9[v10] = *(_DWORD *)((char *)v1
                                  + *(void *)(class metadata base offset for FocusStoreLocation + *v1 + 40));
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v9, 0, 1, TupleTypeMetadata2);
  uint64_t v11 = (char *)v1 + *(void *)(class metadata base offset for FocusStoreLocation + *v1 + 48);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v11, v9, v5);
  return swift_endAccess();
}

unsigned char *initializeWithCopy for CommandGroup(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  uint64_t v4 = type metadata accessor for CommandOperation();
  uint64_t v5 = *(int *)(v4 + 20);
  uint64_t v6 = &a1[v5];
  double v7 = &a2[v5];
  uint64_t v8 = *(void *)&a2[v5];
  uint64_t v9 = *(void *)&a2[v5 + 8];
  char v10 = a2[v5 + 16];
  outlined copy of Text.Storage(v8, v9, v10);
  *(void *)uint64_t v6 = v8;
  *((void *)v6 + 1) = v9;
  v6[16] = v10;
  *((void *)v6 + 3) = *((void *)v7 + 3);
  uint64_t v11 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  int v12 = &v6[v11];
  uint64_t v13 = &v7[v11];
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  uint64_t v16 = *(int *)(v4 + 24);
  int v17 = &a1[v16];
  unsigned int v18 = &a2[v16];
  if (*v18)
  {
    uint64_t v19 = v18[1];
    void *v17 = *v18;
    v17[1] = v19;
    swift_retain();
  }
  else
  {
    *(_OWORD *)int v17 = *(_OWORD *)v18;
  }
  return a1;
}

uint64_t _UIHostingView.accessibilityEnabled.setter(char a1)
{
  uint64_t v2 = v1;
  int v4 = a1 & 1;
  uint64_t v5 = *(void *)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x68));
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t result = swift_beginAccess();
  int v8 = *(unsigned __int8 *)(v6 + 360);
  *(unsigned char *)(v6 + 360) = a1;
  if (v8 != v4)
  {
    if (MEMORY[0x18C119DF0](v5 + 24))
    {
      swift_getObjectType();
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      swift_unknownObjectRelease();
    }
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    return specialized static AccessibilityFocus.changed(from:to:within:)(0, 0);
  }
  return result;
}

BOOL specialized static AccessibilityFocus.changed(from:to:within:)(unint64_t a1, unint64_t a2)
{
  static AccessibilityFocus.accessibilityFocusNeedsUpdate = 1;
  if (a2)
  {
    id v4 = (id)a2;
    char v5 = ViewRendererHost.shouldNotifyForAccessibilityFocus(of:)();

    if (v5) {
      return 1;
    }
  }
  if (a1
    && (id v6 = (id)a1,
        char v7 = ViewRendererHost.shouldNotifyForAccessibilityFocus(of:)(),
        v6,
        (v7 & 1) != 0))
  {
    return 1;
  }
  else
  {
    return (a2 | a1) == 0;
  }
}

uint64_t View.scrollIndicatorsFlash(onAppear:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4 = a1;
  return MEMORY[0x18C113660](&v4, a2, &unk_1ED462430, a3);
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance ToolbarContentDescriptor())()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

double static AlertTransformModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a3@<X8>)
{
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  int v5 = *((_DWORD *)a1 + 6);
  int v20 = *((_DWORD *)a1 + 8);
  int v21 = *((_DWORD *)a1 + 7);
  uint64_t v15 = *a1;
  uint64_t v16 = a1[5];
  uint64_t v22 = a1[6];
  int v6 = *((_DWORD *)a1 + 14);
  int v18 = *((_DWORD *)a1 + 15);
  int v19 = *((_DWORD *)a1 + 9);
  int v17 = *((_DWORD *)a1 + 16);
  int v12 = *((_DWORD *)a1 + 17);
  int v13 = *((_DWORD *)a1 + 18);
  int v14 = *((_DWORD *)a1 + 19);
  int v9 = *((_DWORD *)a1 + 20);
  type metadata accessor for AlertTransformModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  _ViewInputs.viewPhase.getter();
  _ViewInputs.animatedPosition()();
  _ViewInputs.animatedSize()();
  uint64_t v7 = _ViewInputs.transform.getter();
  uint64_t v25 = v15;
  int v26 = v3;
  uint64_t v27 = v4;
  int v28 = v5;
  int v29 = v21;
  int v30 = v20;
  int v31 = v19;
  uint64_t v32 = v16;
  uint64_t v33 = v22;
  int v34 = v6;
  int v35 = v18;
  int v36 = v17;
  int v37 = v12;
  int v38 = v13;
  int v39 = v14;
  int v40 = v9;
  a2(&v23, v7, &v25);
  uint64_t v25 = v22;
  int v26 = v6;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  *(void *)a3 = v23;
  double result = v24;
  a3[1] = v24;
  return result;
}

uint64_t AlertTransformModifier.Transform.updateValue()(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(v1 + 20);
  int v4 = *(_DWORD *)(v1 + 24);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  int v7 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v7 != v4 || v3 == 0)
  {
    int v9 = static ViewIdentity.nextSeed;
    if ((static ViewIdentity.nextSeed + 1) > 1) {
      int v10 = static ViewIdentity.nextSeed + 1;
    }
    else {
      int v10 = 1;
    }
    static ViewIdentity.nextSeed = v10;
    *(_DWORD *)(v1 + 20) = v9;
    *(_DWORD *)(v1 + 24) = v7;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v39 = *(void *)Value;
  long long v40 = *(_OWORD *)(Value + 8);
  long long v41 = *(_OWORD *)(Value + 24);
  swift_retain();
  v37[0] = *(_OWORD *)AGGraphGetValue();
  *(double *)&unint64_t v12 = MEMORY[0x18C10C240]();
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v13, v12));
  int v14 = (_OWORD *)AGGraphGetValue();
  long long v15 = v14[1];
  v37[0] = *v14;
  v37[1] = v15;
  uint64_t v31 = 0;
  uint64_t v30 = 0;
  double v32 = MEMORY[0x18C114450]();
  uint64_t v33 = v16;
  hostingViewCoordinateSpace.getter();
  char v38 = 1;
  uint64_t AssociatedTypeWitness = v39;
  long long v35 = v40;
  long long v36 = v41;
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)v37);
  int v17 = *(_DWORD *)(v1 + 20);
  type metadata accessor for AlertTransformModifier();
  int v18 = (uint64_t *)AGGraphGetValue();
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  long long v29 = 0u;
  double v21 = v32;
  uint64_t v22 = v33;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v5;
  *(void *)(v23 + 24) = v6;
  *(void *)(v23 + 32) = v20;
  *(void *)(v23 + 40) = v19;
  *(_DWORD *)(v23 + 48) = v17;
  *(_OWORD *)(v23 + 56) = v29;
  *(double *)(v23 + 72) = v21;
  *(void *)(v23 + 80) = v22;
  *(void *)&v37[0] = partial apply for specialized closure #1 in AlertTransformModifier.Transform.updateValue();
  *((void *)&v37[0] + 1) = v23;
  MEMORY[0x1F4188790](v23);
  _OWORD v28[2] = a1;
  _OWORD v28[3] = swift_getWitnessTable();
  swift_retain_n();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = MEMORY[0x1E4FBC848] + 8;
  uint64_t FunctionTypeMetadata = swift_getFunctionTypeMetadata();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v37, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v28, FunctionTypeMetadata, MEMORY[0x1E4FBC248], v24, MEMORY[0x1E4FBC278], v26);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for AlertTransformModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t one-time initialization function for ignore(uint64_t a1)
{
  return one-time initialization function for ignore(a1, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Ignore>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore, (uint64_t)&type metadata for AccessibilityChildBehavior.Ignore, &static AccessibilityChildBehavior.ignore);
}

unint64_t lazy protocol witness table accessor for type LazyLayoutComputer<LazyVStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutComputer<LazyVStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine;
  if (!lazy protocol witness table cache variable for type LazyLayoutComputer<LazyVStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine)
  {
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyLayoutComputer<LazyVStackLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer.Engine);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutComputer<LazyVStackLayout>.Engine and conformance LazyLayoutComputer<A>.Engine);
  }
  return result;
}

uint64_t initializeWithCopy for SwipeActions.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4)
  {
    long long v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v11;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    long long v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
    long long v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    uint64_t v10 = *(void *)(a2 + 136);
    if (!v10) {
      goto LABEL_26;
    }
    goto LABEL_17;
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  if (!v5)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    uint64_t v6 = *(void *)(a2 + 64);
    if (v6) {
      goto LABEL_4;
    }
LABEL_10:
    long long v14 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v14;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    uint64_t v10 = *(void *)(a2 + 136);
    if (!v10) {
      goto LABEL_26;
    }
    goto LABEL_17;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_retain();
  swift_retain();
  uint64_t v6 = *(void *)(a2 + 64);
  if (!v6) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  int v8 = (unsigned char *)(a2 + 72);
  swift_retain();
  swift_retain();
  if (v7 != 1)
  {
    *(unsigned char *)(a1 + 72) = *v8;
    if (v7)
    {
      uint64_t v15 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v7;
      *(void *)(a1 + 88) = v15;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    }
    uint64_t v16 = *(void *)(a2 + 96);
    if (v16)
    {
      uint64_t v17 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v16;
      *(void *)(a1 + 104) = v17;
      swift_retain();
      uint64_t v10 = *(void *)(a2 + 136);
      if (v10) {
        goto LABEL_17;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      uint64_t v10 = *(void *)(a2 + 136);
      if (v10) {
        goto LABEL_17;
      }
    }
LABEL_26:
    long long v25 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v25;
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    long long v26 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v26;
    long long v27 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v27;
    return a1;
  }
  long long v9 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 88) = v9;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 136);
  if (!v10) {
    goto LABEL_26;
  }
LABEL_17:
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(void *)(a1 + 136) = v10;
  uint64_t v18 = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  if (v18)
  {
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = v18;
    *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
    swift_retain();
    swift_retain();
    uint64_t v19 = *(void *)(a2 + 176);
    if (v19) {
      goto LABEL_19;
    }
LABEL_22:
    long long v23 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v23;
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    return a1;
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  uint64_t v19 = *(void *)(a2 + 176);
  if (!v19) {
    goto LABEL_22;
  }
LABEL_19:
  uint64_t v20 = *(void *)(a2 + 192);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v19;
  double v21 = (_OWORD *)(a2 + 184);
  swift_retain();
  swift_retain();
  if (v20 == 1)
  {
    long long v22 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *v21;
    *(_OWORD *)(a1 + 200) = v22;
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
  }
  else
  {
    *(unsigned char *)(a1 + 184) = *(unsigned char *)v21;
    if (v20)
    {
      uint64_t v24 = *(void *)(a2 + 200);
      *(void *)(a1 + 192) = v20;
      *(void *)(a1 + 200) = v24;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    }
    uint64_t v28 = *(void *)(a2 + 208);
    if (v28)
    {
      uint64_t v29 = *(void *)(a2 + 216);
      *(void *)(a1 + 208) = v28;
      *(void *)(a1 + 216) = v29;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    }
  }
  return a1;
}

uint64_t initializeWithCopy for LazySubviewPlacements(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  long long v3 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v3;
  uint64_t v4 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v4;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  long long v5 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v5;
  long long v6 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v6;
  long long v7 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v7;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  long long v8 = *(_OWORD *)(a2 + 312);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t SwiftUITextAnimationProviderClass()
{
  return MEMORY[0x1F40FFEC8](0);
}

uint64_t partial apply for closure #2 in static GridRow._makeViewList(view:inputs:)(uint64_t a1)
{
  return closure #2 in static GridRow._makeViewList(view:inputs:)(a1);
}

uint64_t partial apply for specialized closure #1 in AccessibilityToggleModifier.body(content:)@<X0>(uint64_t a1@<X0>, int8x16_t *a2@<X8>)
{
  return specialized closure #1 in AccessibilityToggleModifier.body(content:)(a1, *(_OWORD **)(v2 + 16), a2);
}

uint64_t @objc _UISecureHostingController._canShowWhileLocked()()
{
  return 1;
}

uint64_t partial apply for implicit closure #2 in static ToolbarRemovingModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #2 in static ToolbarRemovingModifier._makeView(modifier:inputs:body:)();
}

void static ToolbarDefaultItemKind.sidebarToggle.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t partial apply for closure #1 in static ViewThatFits._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static ViewThatFits._makeView(view:inputs:)(a1);
}

uint64_t CommandGroup.init(before:addition:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return CommandGroup.init(after:addition:)(a1, a2, a3, a4, 1, a5);
}

void partial apply for closure #1 in FocusBridge.moveFocus(to:designatedPlatformResponder:)()
{
  closure #1 in FocusBridge.moveFocus(to:designatedPlatformResponder:)(v0);
}

uint64_t ScrollView.scrollsContentToBeginningInRightToLeft.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2, a2, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _CoordinateSpaceModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF7C8](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TransactionalPreferenceTransformModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t static View.mapKitMakeDebuggableView(view:inputs:)()
{
  return static View.makeDebuggableView(view:inputs:)();
}

id ListTableViewCell.init(coder:)(void *a1)
{
  uint64_t v3 = type metadata accessor for UIListContentConfiguration();
  MEMORY[0x1F4188790](v3 - 8);
  long long v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CellConfiguration();
  long long v7 = (int *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  long long v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v10 = (uint64_t)&v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_cellConfiguration];
  uint64_t v11 = type metadata accessor for UICellConfigurationState();
  long long v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  v12(v9, 1, 1, v11);
  v9[v7[9]] = 2;
  long long v13 = v1;
  outlined destroy of PreferenceValues.Value<FocusItem?>((uint64_t)v9, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
  v12(v9, 1, 1, v11);
  v9[v7[7]] = 0;
  static UIListContentConfiguration.cell()();
  specialized CellConfiguration.Values.init(_:)((uint64_t)v5, (uint64_t *)v26);
  long long v14 = &v9[v7[11]];
  long long v15 = v26[1];
  *(_OWORD *)long long v14 = v26[0];
  *((_OWORD *)v14 + 1) = v15;
  long long v16 = v26[3];
  *((_OWORD *)v14 + 2) = v26[2];
  *((_OWORD *)v14 + 3) = v16;
  v9[v7[8]] = 0;
  *(void *)&v9[v7[10]] = 0;
  outlined init with take of CellConfiguration((uint64_t)v9, v10);
  uint64_t v17 = &v13[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_disclosureIndent];
  *(void *)uint64_t v17 = 0;
  v17[8] = 1;
  uint64_t v18 = &v13[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_separatorConfiguration];
  *(_OWORD *)uint64_t v18 = xmmword_18834BB90;
  *((void *)v18 + 2) = 0;
  *((void *)v18 + 3) = 0;
  *(void *)&v13[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host] = 0;
  uint64_t v19 = &v13[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior];
  *(_OWORD *)uint64_t v19 = xmmword_18834BB90;
  *((_OWORD *)v19 + 1) = 0u;
  *((_OWORD *)v19 + 2) = 0u;
  *((_OWORD *)v19 + 3) = 0u;
  v19[64] = 0;
  uint64_t v20 = &v13[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_viewListID];
  *(void *)uint64_t v20 = 0;
  *((void *)v20 + 1) = 0;
  *(_DWORD *)&v13[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_outlineRootSeed] = 0;
  v13[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_hasDragItemsPreference] = 0;
  v13[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_hasItemProviderTrait] = 0;
  double v21 = &v13[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_focusItem];
  *((_OWORD *)v21 + 1) = 0u;
  *((_OWORD *)v21 + 2) = 0u;
  *(_OWORD *)double v21 = 0u;
  *((void *)v21 + 6) = 1;
  *((_DWORD *)v21 + 14) = 0;

  long long v22 = (objc_class *)type metadata accessor for ListTableViewCell();
  v25.receiver = v13;
  v25.super_class = v22;
  id v23 = objc_msgSendSuper2(&v25, sel_initWithCoder_, a1);

  return v23;
}

id ListTableViewCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a2;
  uint64_t v29 = a1;
  uint64_t v5 = type metadata accessor for UIListContentConfiguration();
  MEMORY[0x1F4188790](v5 - 8);
  long long v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CellConfiguration();
  long long v9 = (int *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v3[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v12 = (uint64_t)&v3[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_cellConfiguration];
  uint64_t v13 = type metadata accessor for UICellConfigurationState();
  long long v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  v14(v11, 1, 1, v13);
  v11[v9[9]] = 2;
  long long v15 = v3;
  outlined destroy of PreferenceValues.Value<FocusItem?>((uint64_t)v11, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
  v14(v11, 1, 1, v13);
  v11[v9[7]] = 0;
  static UIListContentConfiguration.cell()();
  specialized CellConfiguration.Values.init(_:)((uint64_t)v7, (uint64_t *)v31);
  long long v16 = &v11[v9[11]];
  long long v17 = v31[1];
  *(_OWORD *)long long v16 = v31[0];
  *((_OWORD *)v16 + 1) = v17;
  long long v18 = v31[3];
  *((_OWORD *)v16 + 2) = v31[2];
  *((_OWORD *)v16 + 3) = v18;
  v11[v9[8]] = 0;
  *(void *)&v11[v9[10]] = 0;
  outlined init with take of CellConfiguration((uint64_t)v11, v12);
  uint64_t v19 = &v15[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_disclosureIndent];
  *(void *)uint64_t v19 = 0;
  v19[8] = 1;
  uint64_t v20 = &v15[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_separatorConfiguration];
  *(_OWORD *)uint64_t v20 = xmmword_18834BB90;
  *((void *)v20 + 2) = 0;
  *((void *)v20 + 3) = 0;
  *(void *)&v15[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host] = 0;
  double v21 = &v15[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior];
  *(_OWORD *)double v21 = xmmword_18834BB90;
  *((_OWORD *)v21 + 1) = 0u;
  *((_OWORD *)v21 + 2) = 0u;
  *((_OWORD *)v21 + 3) = 0u;
  v21[64] = 0;
  long long v22 = &v15[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_viewListID];
  *(void *)long long v22 = 0;
  *((void *)v22 + 1) = 0;
  *(_DWORD *)&v15[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_outlineRootSeed] = 0;
  v15[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_hasDragItemsPreference] = 0;
  v15[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_hasItemProviderTrait] = 0;
  id v23 = &v15[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_focusItem];
  *((_OWORD *)v23 + 1) = 0u;
  *((_OWORD *)v23 + 2) = 0u;
  *(_OWORD *)id v23 = 0u;
  *((void *)v23 + 6) = 1;
  *((_DWORD *)v23 + 14) = 0;

  if (a3)
  {
    uint64_t v24 = (void *)MEMORY[0x18C115780](v28, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v24 = 0;
  }
  objc_super v25 = (objc_class *)type metadata accessor for ListTableViewCell();
  v30.receiver = v15;
  v30.super_class = v25;
  id v26 = objc_msgSendSuper2(&v30, sel_initWithStyle_reuseIdentifier_, v29, v24);

  return v26;
}

uint64_t type metadata accessor for ListTableViewCell()
{
  uint64_t result = type metadata singleton initialization cache for ListTableViewCell;
  if (!type metadata singleton initialization cache for ListTableViewCell) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<Switch>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<Switch>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<Switch>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSlider>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSlider>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSlider>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitStepper>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitStepper>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitStepper>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<TextViewAdaptor>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<TextViewAdaptor>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPagingView>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPasteControl>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BridgedColorPicker>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BridgedColorPicker>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSegmentedControl>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>();
  lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>> and conformance PlatformViewIdentifiedViews<A>, (void (*)(uint64_t))type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
  return Attribute.init<A>(body:value:flags:update:)();
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
    }
  }
}

uint64_t specialized ViewResponderFilter.init(inputs:view:)@<X0>(long long *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIKitSearchBar>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitSearchBar, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIKitSearchBar> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIActivityIndicatorView>, &lazy cache variable for type metadata for UIActivityIndicatorView);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIActivityIndicatorView> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISwitch>, &lazy cache variable for type metadata for UISwitch);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UISwitch> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISplitViewController>, &lazy cache variable for type metadata for UISplitViewController);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UISplitViewController> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UINavigationController>, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UINavigationController> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISlider>, &lazy cache variable for type metadata for UISlider);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UISlider> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIStepper>, &lazy cache variable for type metadata for UIStepper);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIStepper> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<VerticalTextView>, (uint64_t (*)(uint64_t))type metadata accessor for VerticalTextView, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<VerticalTextView> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<PagingCollectionView>, (uint64_t (*)(uint64_t))type metadata accessor for PagingCollectionView, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<PagingCollectionView> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<TextEditorTextView>, (uint64_t (*)(uint64_t))type metadata accessor for TextEditorTextView, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<TextEditorTextView> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISearchTextField>, (unint64_t *)&lazy cache variable for type metadata for UISearchTextField);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UISearchTextField> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIPasteControl>, &lazy cache variable for type metadata for UIPasteControl);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIPasteControl> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIColorWell>, &lazy cache variable for type metadata for UIColorWell);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIColorWell> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIKitToolbar>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitToolbar, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIKitToolbar> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<SystemSegmentedControl.UISegmentedControl>, (uint64_t (*)(uint64_t))type metadata accessor for SystemSegmentedControl.UISegmentedControl, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<SystemSegmentedControl.UISegmentedControl> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIKBVisualEffectView>, &lazy cache variable for type metadata for UIKBVisualEffectView);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIKBVisualEffectView> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIProgressView>, &lazy cache variable for type metadata for UIProgressView);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIProgressView> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UITextField>, &lazy cache variable for type metadata for UITextField);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UITextField> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIDatePicker>, &lazy cache variable for type metadata for UIDatePicker);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIDatePicker> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISegmentedControl>, &lazy cache variable for type metadata for UISegmentedControl);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UISegmentedControl> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UICalendarView>, &lazy cache variable for type metadata for UICalendarView);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UICalendarView> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIKitTabBarController>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitTabBarController, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIKitTabBarController> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<CustomizableDocumentViewController>, (uint64_t (*)(uint64_t))type metadata accessor for CustomizableDocumentViewController, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<CustomizableDocumentViewController> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  long long v14;

  type metadata accessor for UIViewResponder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = specialized UIViewResponder.init()(v6);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v9 = _ViewInputs.animatedSize()();
  int v10 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  long long v14 = *a1;
  swift_getKeyPath();
  int v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(0, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIViewController>, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIViewController> and conformance RepresentablePreferredFocusableViewInput<A>();
  uint64_t result = PropertyList.subscript.getter();
  *(_DWORD *)a3 = a2;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v7;
  *(_DWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 36) = v14;
  return result;
}

uint64_t ViewResponderFilter.init(inputs:view:)@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  type metadata accessor for UIViewResponder();
  uint64_t v2 = swift_allocObject();
  uint64_t v9 = specialized UIViewResponder.init()(v2);
  swift_release();
  int v8 = _ViewInputs.animatedPosition()();
  int v7 = _ViewInputs.animatedSize()();
  int v6 = _ViewInputs.transform.getter();
  swift_getKeyPath();
  int v5 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  int v3 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getAssociatedTypeWitness();
  type metadata accessor for RepresentablePreferredFocusableViewInput();
  swift_getWitnessTable();
  _GraphInputs.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *(_DWORD *)a2 = a1;
  *(_DWORD *)(a2 + 4) = v8;
  *(_DWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v9;
  *(_DWORD *)(a2 + 32) = v3;
  *(_DWORD *)(a2 + 36) = v12;
  return result;
}

uint64_t type metadata accessor for UIViewResponder()
{
  uint64_t result = type metadata singleton initialization cache for UIViewResponder;
  if (!type metadata singleton initialization cache for UIViewResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t specialized UIViewResponder.init()(uint64_t a1)
{
  swift_unknownObjectWeakInit();
  *(void *)(a1 + 216) = MEMORY[0x1E4FBC860];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  ContentResponderHelper.init()();
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(unsigned char *)(a1 + 192) = 1;
  swift_unknownObjectWeakInit();
  *(void *)(a1 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  type metadata accessor for ViewGraph();
  uint64_t v2 = swift_retain();
  uint64_t v3 = MEMORY[0x18C114EE0](v2);
  swift_beginAccess();
  MEMORY[0x18C119DF0](v3 + 200);
  uint64_t v4 = *(void *)(v3 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(a1 + 24) = v4;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t type metadata accessor for RepresentablePreferredFocusableViewInput()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for NSObject(255, a3);
    unint64_t v4 = type metadata accessor for RepresentablePreferredFocusableViewInput();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIActivityIndicatorView> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIActivityIndicatorView> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIActivityIndicatorView> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIActivityIndicatorView>, &lazy cache variable for type metadata for UIActivityIndicatorView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIActivityIndicatorView> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<Switch>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<Switch>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<Switch>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
    }
  }
}

uint64_t type metadata completion function for NavigationDestinationResolver()
{
  return swift_initClassMetadata2();
}

uint64_t partial apply for implicit closure #3 in LazyLayoutViewCache.init<A>(layout:list:inputs:)()
{
  return implicit closure #3 in LazyLayoutViewCache.init<A>(layout:list:inputs:)(*(void *)(v0 + 16));
}

void partial apply for closure #8 in static SystemScrollView._makeView(view:inputs:)()
{
  closure #8 in static SystemScrollView._makeView(view:inputs:)(*(unsigned int *)(v0 + 32), *(unsigned int *)(v0 + 36), *(unsigned int *)(v0 + 40), *(unsigned int *)(v0 + 44), *(unsigned char *)(v0 + 48), *(void ***)(v0 + 56), *(void ***)(v0 + 64));
}

void closure #8 in static SystemScrollView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void **a6, void **a7)
{
  unint64_t v10 = AGCreateWeakAttribute();
  unint64_t v11 = AGCreateWeakAttribute();
  unint64_t v12 = AGCreateWeakAttribute();
  unint64_t v13 = AGCreateWeakAttribute();
  id v14 = objc_allocWithZone((Class)type metadata accessor for ScrollViewHelper());
  long long v15 = ScrollViewHelper.init(layoutState:phaseState:prefetchState:containerSize:axes:)(v10, 0, v11, 0, v12, 0, v13, 0, 0);
  *(void *)&v15[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options] = 1;
  v15[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_hasScrollPosition] = a5;
  uint64_t v16 = type metadata accessor for SystemScrollView();
  objc_allocWithZone((Class)type metadata accessor for HostingScrollView());
  long long v17 = v15;
  long long v18 = HostingScrollView.init(viewType:helper:)(v16, v17);
  uint64_t v19 = *a6;
  *a6 = v18;

  uint64_t v20 = *a6;
  if (!*a6)
  {
    __break(1u);
    goto LABEL_9;
  }
  id v21 = objc_allocWithZone((Class)type metadata accessor for HostingScrollView.PlatformContainer());
  id v22 = HostingScrollView.PlatformContainer.init(scrollView:)(v20);
  id v23 = *a7;
  *a7 = v22;

  if (!*a6)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v24 = *(char **)((char *)*a6 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host);
  objc_super v25 = (uint64_t *)&v24[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__focusableBounds];
  swift_beginAccess();
  id v26 = v24;
  *objc_super v25 = AGCreateWeakAttribute();
  swift_endAccess();

  if (!*a6)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  long long v27 = *(char **)((char *)*a6 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host);
  uint64_t v28 = (uint64_t *)&v27[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__focusableFillerBounds];
  swift_beginAccess();
  uint64_t v29 = v27;
  *uint64_t v28 = AGCreateWeakAttribute();
  swift_endAccess();

  if (!*a6)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  objc_super v30 = *(char **)((char *)*a6 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host);
  uint64_t v31 = (uint64_t *)&v30[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__focusableBorder];
  swift_beginAccess();
  double v32 = v30;
  *uint64_t v31 = AGCreateWeakAttribute();
  swift_endAccess();

  if (!*a6)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v33 = *(char **)((char *)*a6 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host);
  int v34 = (uint64_t *)&v33[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__pixelLength];
  swift_beginAccess();
  long long v35 = v33;
  *int v34 = AGCreateWeakAttribute();
  swift_endAccess();

  long long v36 = *a6;
  if (*a6)
  {
    swift_beginAccess();
    swift_weakLoadStrong();
    id v37 = v36;

    swift_weakAssign();
    swift_release();
    return;
  }
LABEL_13:
  __break(1u);
}

uint64_t type metadata accessor for ScrollViewHelper()
{
  return self;
}

id ScrollViewHelper.init(layoutState:phaseState:prefetchState:containerSize:axes:)(unint64_t a1, char a2, unint64_t a3, char a4, unint64_t a5, char a6, unint64_t a7, char a8, char a9)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  unint64_t v60 = &v9[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__layoutState];
  *(void *)&v9[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__layoutState] = 0;
  uint64_t v61 = &v9[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__phaseState];
  *(void *)&v9[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__phaseState] = 0;
  uint64_t v63 = &v9[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__prefetchState];
  *(void *)&v9[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__prefetchState] = 0;
  uint64_t v65 = &v9[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__containerSize];
  *(void *)&v9[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__containerSize] = 0;
  unint64_t v10 = v9;
  EnvironmentValues.init()();
  unint64_t v11 = &v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties];
  *(_DWORD *)unint64_t v11 = 257;
  *((_DWORD *)v11 + 21) = 0;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 67) = 0u;
  *((_WORD *)v11 + 44) = 1;
  v11[96] = 0;
  *((void *)v11 + 13) = 0;
  *((_WORD *)v11 + 56) = 0;
  v11[120] = 0;
  *((void *)v11 + 16) = 0;
  *((_WORD *)v11 + 68) = 0;
  static EdgeInsets.zero.getter();
  *((void *)v11 + 18) = v12;
  *((void *)v11 + 19) = v13;
  *((void *)v11 + 20) = v14;
  *((void *)v11 + 21) = v15;
  static EdgeInsets.zero.getter();
  *((void *)v11 + 22) = v16;
  *((void *)v11 + 23) = v17;
  *((void *)v11 + 24) = v18;
  *((void *)v11 + 25) = v19;
  uint64_t v20 = &v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins];
  OptionalEdgeInsets.init()();
  char v59 = v99;
  uint64_t v58 = v100;
  char v57 = v101;
  uint64_t v56 = v102;
  char v55 = v103;
  uint64_t v54 = v104;
  char v53 = v105;
  OptionalEdgeInsets.init()();
  uint64_t v52 = v90;
  char v51 = v91;
  uint64_t v50 = v92;
  char v49 = v93;
  uint64_t v48 = v94;
  char v47 = v95;
  uint64_t v46 = v96;
  char v45 = v97;
  OptionalEdgeInsets.init()();
  uint64_t v21 = v82;
  char v22 = v83;
  uint64_t v23 = v84;
  char v24 = v85;
  uint64_t v25 = v86;
  char v26 = v87;
  uint64_t v27 = v88;
  char v28 = v89;
  OptionalEdgeInsets.init()();
  *(void *)uint64_t v20 = v98;
  v20[8] = v59;
  *((void *)v20 + 2) = v58;
  v20[24] = v57;
  *((void *)v20 + 4) = v56;
  v20[40] = v55;
  *((void *)v20 + 6) = v54;
  v20[56] = v53;
  *((void *)v20 + 8) = v52;
  v20[72] = v51;
  *((void *)v20 + 10) = v50;
  v20[88] = v49;
  *((void *)v20 + 12) = v48;
  v20[104] = v47;
  *((void *)v20 + 14) = v46;
  v20[120] = v45;
  *((void *)v20 + 16) = v21;
  v20[136] = v22;
  *((void *)v20 + 18) = v23;
  v20[152] = v24;
  *((void *)v20 + 20) = v25;
  v20[168] = v26;
  *((void *)v20 + 22) = v27;
  v20[184] = v28;
  *((void *)v20 + 24) = v74;
  v20[200] = v75;
  *((void *)v20 + 26) = v76;
  v20[216] = v77;
  *((void *)v20 + 28) = v78;
  v20[232] = v79;
  *((void *)v20 + 30) = v80;
  v20[248] = v81;
  uint64_t v29 = &v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollContentBackground];
  *(void *)uint64_t v29 = 0;
  *((_WORD *)v29 + 4) = 0;
  *(void *)&v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options] = 6;
  *(void *)&v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_updateFlags] = 0;
  v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_hasScrollPosition] = 0;
  v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_defaultDismissKeyboardMode] = 3;
  *(void *)&v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  objc_super v30 = &v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_decelerationBias];
  *(void *)objc_super v30 = 0;
  *((void *)v30 + 1) = 0;
  uint64_t v31 = &v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_beginPanningOffset];
  *(void *)uint64_t v31 = 0;
  *((void *)v31 + 1) = 0;
  char v31[16] = 1;
  v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_isAnimationCheckPending] = 0;
  double v32 = &v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastTargetOffsetState];
  *(_OWORD *)double v32 = 0u;
  *((_OWORD *)v32 + 1) = 0u;
  *((_WORD *)v32 + 16) = 2;
  v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase] = 0;
  uint64_t v33 = &v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastVelocity];
  *(void *)uint64_t v33 = 0;
  *((void *)v33 + 1) = 0;
  int v34 = &v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastOffsetChange];
  *(void *)int v34 = 0;
  *((void *)v34 + 1) = 0;
  long long v35 = &v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastBoundsSize];
  *(void *)long long v35 = 0;
  *((void *)v35 + 1) = 0;
  v35[16] = 1;
  *(_DWORD *)&v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates] = 0;
  v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate] = 2;
  unint64_t v36 = HIDWORD(a1);
  if (a2) {
    int v37 = 0;
  }
  else {
    int v37 = a1;
  }
  if (a2) {
    LODWORD(v36) = 0;
  }
  *(_DWORD *)unint64_t v60 = v37;
  *((_DWORD *)v60 + 1) = v36;
  unint64_t v38 = HIDWORD(a3);
  if (a4) {
    int v39 = 0;
  }
  else {
    int v39 = a3;
  }
  if (a4) {
    LODWORD(v38) = 0;
  }
  *(_DWORD *)uint64_t v61 = v39;
  *((_DWORD *)v61 + 1) = v38;
  unint64_t v40 = HIDWORD(a5);
  if (a6) {
    int v41 = 0;
  }
  else {
    int v41 = a5;
  }
  if (a6) {
    LODWORD(v40) = 0;
  }
  *(_DWORD *)uint64_t v63 = v41;
  *((_DWORD *)v63 + 1) = v40;
  unint64_t v42 = HIDWORD(a7);
  if (a8) {
    int v43 = 0;
  }
  else {
    int v43 = a7;
  }
  if (a8) {
    LODWORD(v42) = 0;
  }
  *(_DWORD *)uint64_t v65 = v43;
  *((_DWORD *)v65 + 1) = v42;
  v10[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes] = a9;

  v73.receiver = v10;
  v73.super_class = ObjectType;
  return objc_msgSendSuper2(&v73, sel_init);
}

char *HostingScrollView.init(viewType:helper:)(uint64_t a1, void *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_weakInit();
  v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_layoutDirection] = 0;
  *(void *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_rtlAdjustment] = 0;
  uint64_t v3 = &v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_onScrollToTopGesture];
  *uint64_t v3 = 0;
  v3[1] = 0;
  v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_descendantScrollableAxes] = 0;
  unint64_t v4 = &v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext];
  *(_OWORD *)unint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((void *)v4 + 8) = 0xF000000000000004;
  uint64_t v5 = &v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_lastAdjustedContentInsets];
  *uint64_t v5 = 0u;
  v5[1] = 0u;
  int v6 = &v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget];
  *int v6 = 0;
  v6[1] = 0;
  int v7 = &v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTargetConfig];
  void v7[2] = 0;
  *(_WORD *)int v7 = 2;
  int v8 = &v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset];
  *int v8 = 0;
  v8[1] = 0;
  uint64_t v9 = (uint64_t *)&v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_safeAreaTransitionState];
  type metadata accessor for FalseSafeAreaTransitionState();
  uint64_t v10 = swift_allocObject();
  *(unsigned char *)(v10 + 16) = 0;
  *uint64_t v9 = v10;
  v9[1] = (uint64_t)&protocol witness table for FalseSafeAreaTransitionState;
  unint64_t v11 = &v2[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_oldContentMargins];
  uint64_t v12 = v2;
  OptionalEdgeInsets.init()();
  char v43 = v49;
  uint64_t v42 = *((void *)&v49 + 1);
  char v41 = v50;
  uint64_t v40 = *((void *)&v50 + 1);
  char v39 = v51;
  uint64_t v38 = v52;
  char v37 = v53;
  OptionalEdgeInsets.init()();
  uint64_t v36 = v74;
  char v35 = v75;
  uint64_t v34 = v76;
  char v33 = v77;
  uint64_t v32 = v78;
  char v31 = v79;
  uint64_t v30 = v80;
  char v29 = v81;
  OptionalEdgeInsets.init()();
  uint64_t v13 = v66;
  char v14 = v67;
  uint64_t v15 = v68;
  char v16 = v69;
  uint64_t v17 = v70;
  char v18 = v71;
  uint64_t v19 = v72;
  char v20 = v73;
  OptionalEdgeInsets.init()();
  *(void *)unint64_t v11 = v48;
  unsigned char v11[8] = v43;
  *((void *)v11 + 2) = v42;
  v11[24] = v41;
  *((void *)v11 + 4) = v40;
  v11[40] = v39;
  *((void *)v11 + 6) = v38;
  v11[56] = v37;
  *((void *)v11 + 8) = v36;
  v11[72] = v35;
  *((void *)v11 + 10) = v34;
  v11[88] = v33;
  *((void *)v11 + 12) = v32;
  v11[104] = v31;
  *((void *)v11 + 14) = v30;
  v11[120] = v29;
  *((void *)v11 + 16) = v13;
  v11[136] = v14;
  *((void *)v11 + 18) = v15;
  v11[152] = v16;
  *((void *)v11 + 20) = v17;
  v11[168] = v18;
  *((void *)v11 + 22) = v19;
  v11[184] = v20;
  *((void *)v11 + 24) = v58;
  v11[200] = v59;
  *((void *)v11 + 26) = v60;
  v11[216] = v61;
  *((void *)v11 + 28) = v62;
  v11[232] = v63;
  *((void *)v11 + 30) = v64;
  v11[248] = v65;
  swift_weakInit();
  *(void *)&v12[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_viewType] = a1;
  *(void *)&v12[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper] = a2;
  LOWORD(v48) = 256;
  long long v49 = 0u;
  long long v50 = 0u;
  char v51 = 2;
  uint64_t v54 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  swift_unknownObjectWeakInit();
  uint64_t v57 = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  outlined init with take of ScrollViewConfiguration((uint64_t)&v48, (uint64_t)&v12[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_configuration]);
  type metadata accessor for HostingScrollView.PlatformGroupContainer();
  id v21 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  char v22 = a2;
  id v23 = objc_msgSend(v21, sel_init);
  *(void *)&v12[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host] = v23;

  v47.receiver = v12;
  v47.super_class = ObjectType;
  char v24 = (char *)objc_msgSendSuper2(&v47, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v25 = *(void **)&v24[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host];
  char v26 = v24;
  objc_msgSend(v26, sel_addSubview_, v25);
  id v27 = objc_msgSend(v25, sel_layer);
  objc_msgSend(v27, sel_setAllowsGroupOpacity_, 0);
  objc_msgSend(v27, sel_setAllowsGroupBlending_, 0);
  swift_unknownObjectWeakAssign();
  *(void *)&v22[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_delegate + 8] = &protocol witness table for HostingScrollView;
  swift_unknownObjectWeakAssign();
  objc_msgSend(v26, sel_setDelegate_, v22);

  swift_unknownObjectWeakAssign();
  return v26;
}

uint64_t type metadata accessor for FalseSafeAreaTransitionState()
{
  return self;
}

uint64_t type metadata accessor for HostingScrollView.PlatformGroupContainer()
{
  return self;
}

id HostingScrollView.PlatformGroupContainer.init(frame:)(double a1, double a2, double a3, double a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(void *)&v4[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__focusableBounds] = 0;
  *(void *)&v4[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__focusableFillerBounds] = 0;
  *(void *)&v4[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__focusableBorder] = 0;
  *(void *)&v4[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__pixelLength] = 0;
  *(void *)&v4[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_fillerItems] = MEMORY[0x1E4FBC860];
  *(void *)&v4[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_requestedFocusItem] = 0;
  v11.receiver = v4;
  v11.super_class = ObjectType;
  return objc_msgSendSuper2(&v11, sel_initWithFrame_, a1, a2, a3, a4);
}

id HostingScrollView.PlatformContainer.init(scrollView:)(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_safeAreaHelper;
  type metadata accessor for UIView.SafeAreaHelper();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(unsigned char *)(v5 + 48) = 1;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(unsigned char *)(v5 + 88) = 1;
  *(void *)&v1[v4] = v5;
  int v6 = (int64x2_t *)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets];
  int64x2_t v7 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *int v6 = v7;
  v6[1] = v7;
  *(void *)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_scrollView] = a1;
  v11.receiver = v1;
  v11.super_class = ObjectType;
  id v8 = a1;
  id v9 = objc_msgSendSuper2(&v11, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v9, sel_addSubview_, v8, v11.receiver, v11.super_class);

  return v9;
}

uint64_t partial apply for closure #4 in closure #1 in PlatformViewChild.updateValue()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  AGGraphClearUpdate();
  closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(v2, a1);
  return AGGraphSetUpdate();
}

uint64_t closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  char v5 = *(unsigned char *)(a1 + 32);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v3, v4, v5);
  type metadata accessor for PlatformViewHost();
  RepresentableContextValues.asCurrent<A>(do:)((void (*)(uint64_t))partial apply for closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue());
  swift_release();
  swift_release();
  uint64_t result = outlined consume of RepresentableContextValues.EnvironmentStorage(v3, v4, v5);
  *a2 = v7;
  return result;
}

uint64_t RepresentableContextValues.asCurrent<A>(do:)(void (*a1)(uint64_t))
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[3];
  uint64_t v16 = v1[2];
  char v5 = *((unsigned char *)v1 + 32);
  long long v6 = static RepresentableContextValues.current;
  uint64_t v7 = qword_1EB2E8DA0;
  uint64_t v8 = qword_1EB2E8DA8;
  *(void *)&static RepresentableContextValues.current = v2;
  *((void *)&static RepresentableContextValues.current + 1) = v3;
  qword_1EB2E8DA0 = v16;
  qword_1EB2E8DA8 = v4;
  char v9 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v5;
  outlined copy of RepresentableContextValues?(v6, *((uint64_t *)&v6 + 1), v7, v8, v9);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v16, v4, v5);
  uint64_t v10 = outlined consume of RepresentableContextValues?(v6, *((uint64_t *)&v6 + 1), v7, v8, v9);
  a1(v10);
  long long v11 = static RepresentableContextValues.current;
  uint64_t v12 = qword_1EB2E8DA0;
  uint64_t v13 = qword_1EB2E8DA8;
  static RepresentableContextValues.current = v6;
  qword_1EB2E8DA0 = v7;
  qword_1EB2E8DA8 = v8;
  char v14 = byte_1EB2E8DB0;
  byte_1EB2E8DB0 = v9;

  return outlined consume of RepresentableContextValues?(v11, *((uint64_t *)&v11 + 1), v12, v13, v14);
}

uint64_t partial apply for closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()@<X0>(void *a1@<X8>)
{
  return closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()(*(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(_DWORD *)(v1 + 80), *(void *)(v1 + 88), a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t closure #1 in closure #1 in closure #4 in closure #1 in PlatformViewChild.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v26 = a7;
  uint64_t v27 = a3;
  int v25 = a6;
  uint64_t v28 = a4;
  char v29 = a8;
  uint64_t v24 = a2;
  uint64_t v12 = *(void *)(a9 - 8);
  MEMORY[0x1F4188790](a1);
  char v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v18 = (char *)&v23 - v17;
  type metadata accessor for PlatformViewHost();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a10 + 40))(v24, a9, a10);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a9);
  v31[0] = a5;
  v31[1] = 0;
  int v30 = v25;
  uint64_t v19 = *(void *)(v26 + 48);
  swift_retain();
  swift_retain();
  uint64_t v20 = v27;
  swift_unknownObjectRetain();
  id v21 = specialized PlatformViewHost.__allocating_init(_:host:environment:viewPhase:importer:)((uint64_t)v18, v20, v28, v31, &v30, v19);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  *char v29 = v21;
  return result;
}

void *specialized PlatformViewHost.__allocating_init(_:host:environment:viewPhase:importer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int *a5, uint64_t a6)
{
  id v13 = objc_allocWithZone(v6);
  return specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)(a1, a2, a3, a4, a5, a6);
}

void *specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int *a5, uint64_t a6)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v10 = (void *)MEMORY[0x1E4FBC8C8];
  long long v11 = (void *)(*MEMORY[0x1E4FBC8C8] & *v6);
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  int v14 = *a5;
  uint64_t v15 = (char *)v6 + v11[16];
  *((void *)v15 + 1) = 0;
  swift_unknownObjectWeakInit();
  *((unsigned char *)v6 + *(void *)((*v10 & *v6) + 0x88)) = 2;
  swift_weakInit();
  uint64_t v16 = *(void *)((*v10 & *v6) + 0xA0);
  type metadata accessor for UIView.SafeAreaHelper();
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(unsigned char *)(v17 + 48) = 1;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(unsigned char *)(v17 + 88) = 1;
  *(void *)((char *)v6 + v16) = v17;
  char v18 = (int64x2_t *)((char *)v6 + *(void *)((*v10 & *v6) + 0xA8));
  int64x2_t v19 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *char v18 = v19;
  v18[1] = v19;
  *((unsigned char *)v6 + *(void *)((*v10 & *v6) + 0xB0)) = 0;
  *((unsigned char *)v6 + *(void *)((*v10 & *v6) + 0xB8)) = 2;
  uint64_t v20 = (char *)v6 + *(void *)((*v10 & *v6) + 0xC0);
  *(void *)uint64_t v20 = 0;
  *((void *)v20 + 1) = 0;
  v20[16] = 1;
  *((unsigned char *)v6 + *(void *)((*v10 & *v6) + 0xC8)) = 0;
  id v21 = (char *)v6 + *(void *)((*v10 & *v6) + 0xD0);
  *(_OWORD *)id v21 = 0u;
  *((_OWORD *)v21 + 1) = 0u;
  *((_OWORD *)v21 + 2) = 0u;
  v21[48] = 1;
  char v22 = (void *)((char *)v6 + *(void *)((*v10 & *v6) + 0x68));
  *char v22 = v12;
  v22[1] = v13;
  *(_DWORD *)((char *)v6 + *(void *)((*v10 & *v6) + 0x70)) = v14;
  uint64_t v23 = (char *)v6 + *(void *)((*v10 & *v6) + 0x78);
  uint64_t v24 = v11[11];
  uint64_t v25 = v11[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v23, a1, AssociatedTypeWitness);
  *((void *)v15 + 1) = a3;
  swift_unknownObjectWeakAssign();
  uint64_t v27 = (char *)v6 + *(void *)((*v10 & *v6) + 0x90);
  *(void *)uint64_t v27 = 0;
  unsigned char v27[8] = 0;
  *((_DWORD *)v27 + 3) = 0;
  *(void *)((char *)v6 + *(void *)((*v10 & *v6) + 0x60)) = a6;
  v40.receiver = v6;
  v40.super_class = ObjectType;
  swift_retain();
  swift_retain();
  swift_retain();
  id v28 = objc_msgSendSuper2(&v40, sel_initWithHostedView_, 0);
  char v29 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 128);
  int v30 = v28;
  if (v29(v25, v24))
  {
    static Semantics.v6.getter();
    *((unsigned char *)v30 + *(void *)((*v10 & *v30) + 0x88)) = (isLinkedOnOrAfter(_:)() & 1) == 0;
  }
  static Semantics.v6.getter();
  if (isLinkedOnOrAfter(_:)())
  {
    id v31 = objc_msgSend(v30, sel_layer);
    objc_msgSend(v31, sel_setAllowsGroupOpacity_, 0);

    id v32 = objc_msgSend(v30, sel_layer);
    objc_msgSend(v32, sel_setAllowsGroupBlending_, 0);
  }
  if ((v29(v25, v24) & 1) == 0)
  {
    char v33 = (void *)(*(uint64_t (**)(char *))(*(void *)((*v10 & *v30) + 0x58) + 72))((char *)v30 + *(void *)((*v10 & *v30) + 0x78));
    PlatformViewHost.hostedView.setter(v33);
  }
  v39[0] = v12;
  v39[1] = v13;
  int v38 = v14;
  PlatformViewHost.updateEnvironment(_:viewPhase:)(v39, &v38);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();

  return v30;
}

uint64_t type metadata accessor for UIView.SafeAreaHelper()
{
  return self;
}

void @objc PlatformViewHost.hostedView.setter(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  PlatformViewHost.hostedView.setter(a3);
}

void PlatformViewHost.hostedView.setter(void *a1)
{
  v3.receiver = v1;
  v3.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v3, sel_setHostedView_, a1);

  *((unsigned char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xB8)) = 2;
}

uint64_t protocol witness for PlatformViewRepresentable.makeViewProvider(context:) in conformance PlatformViewRepresentableAdaptor<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = PlatformViewRepresentableAdaptor.makeViewProvider(context:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t PlatformViewRepresentableAdaptor.makeViewProvider(context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a1;
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for PlatformViewRepresentableContext();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  id v6 = (char *)&v16 - v5;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = type metadata accessor for UIViewRepresentableContext();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v16 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v6, v16, v3, v11);
  UIViewRepresentableContext.init<A>(_:)((uint64_t)v6, (uint64_t)v13);
  uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 32))(v13, v7, v8);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return v14;
}

uint64_t protocol witness for PlatformViewRepresentable.makeViewProvider(context:) in conformance PlatformViewControllerRepresentableAdaptor<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = PlatformViewControllerRepresentableAdaptor.makeViewProvider(context:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t PlatformViewControllerRepresentableAdaptor.makeViewProvider(context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = a1;
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for PlatformViewRepresentableContext();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  id v6 = (char *)&v17 - v5;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = type metadata accessor for UIViewControllerRepresentableContext();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v17 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v6, v17, v3, v11);
  double v14 = UIViewControllerRepresentableContext.init<A>(_:)((uint64_t)v6, (uint64_t)v13);
  uint64_t v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v8 + 32))(v13, v7, v8, v14);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return v15;
}

unsigned char *protocol witness for PlatformViewRepresentable.makeViewProvider(context:) in conformance ListRepresentable<A, B>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = ListRepresentable.makeViewProvider(context:)(a1);
  *a2 = result;
  return result;
}

unsigned char *ListRepresentable.makeViewProvider(context:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v40 = *(void *)a1;
  unint64_t v39 = v40;
  uint64_t v4 = *(void *)(a1 + 24);
  char v6 = *(unsigned char *)(a1 + 32);
  uint64_t v7 = *v1;
  uint64_t v42 = *(void *)(a1 + 16);
  uint64_t v5 = v42;
  uint64_t v43 = v4;
  char v44 = v6;
  uint64_t v35 = type metadata accessor for PlatformViewRepresentableContext();
  PlatformViewRepresentableContext.environment.getter(v35, (uint64_t *)&v45);
  unint64_t v40 = v45;
  uint64_t v41 = v46;
  id v8 = UICollectionViewListCoordinator.createLayout(_:)((uint64_t *)&v40);
  swift_release();
  swift_release();
  char v37 = v8;
  uint64_t v9 = UICollectionViewListCoordinator.createCollectionView(_:)((uint64_t)v8);
  uint64_t v10 = *(void **)((char *)v7 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v7) + 0x90));
  double v11 = *(void **)&v9[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_helper];
  *(void *)&v9[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_helper] = v10;
  uint64_t v12 = v10;

  swift_unknownObjectWeakAssign();
  uint64_t v36 = *(uint64_t *)((char *)v2 + 28);
  *(void *)&v12[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__phaseState] = v36;
  specialized UICollectionViewListCoordinatorBase.collectionView.setter();
  UICollectionViewListCoordinatorBase.setupSizeThatFitsCallback(in:)();
  unint64_t v40 = v39;
  uint64_t v41 = v3;
  uint64_t v38 = v4;
  uint64_t v42 = v5;
  uint64_t v43 = v4;
  char v44 = v6;
  PlatformViewRepresentableContext.environment.getter(v35, (uint64_t *)&v45);
  if (v46)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v13 = BYTE1(v41);
  if (v40 <= 1) {
    char v13 = 0;
  }
  v9[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_isLazyStackBehaviorEnabled] = v13;
  objc_msgSend(v9, sel_setDelegate_, v7);
  objc_msgSend(v9, sel_setDataSource_, v7);
  unint64_t v40 = v39;
  uint64_t v41 = v3;
  uint64_t v42 = v5;
  uint64_t v43 = v4;
  char v44 = v6;
  specialized ReferenceFileDocumentConfiguration.document.getter();
  uint64_t v14 = swift_retain();
  UICollectionViewListCoordinatorBase.recordInitialTransactionIfNeeded(_:)(v14);
  swift_release();
  *(void *)&v9[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_phaseState] = v36;
  objc_msgSend(v9, sel_setAllowsSelectionDuringEditing_, 1);
  objc_msgSend(v9, sel_setAllowsFocus_, 1);
  objc_msgSend(v9, sel_setSelectionFollowsFocus_, 1);
  uint64_t v15 = v9;
  id v16 = UICollectionViewListCoordinatorBase.dragAndDropController.getter();
  objc_msgSend(v15, sel_setDragDelegate_, v16);

  id v17 = UICollectionViewListCoordinatorBase.dragAndDropController.getter();
  objc_msgSend(v15, sel_setDropDelegate_, v17);

  unint64_t v40 = v39;
  uint64_t v41 = v3;
  uint64_t v42 = v5;
  uint64_t v43 = v4;
  char v44 = v6;
  PlatformViewRepresentableContext.environment.getter(v35, (uint64_t *)&v45);
  if (v46)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v18 = v40;
  uint64_t v19 = v41;
  uint64_t v20 = v42;
  uint64_t v21 = swift_allocObject();
  swift_unknownObjectWeakInit();
  char v22 = (void *)swift_allocObject();
  _DWORD v22[2] = v21;
  _OWORD v22[3] = v18;
  void v22[4] = v19;
  v22[5] = v20;
  swift_retain();
  outlined copy of AppIntentExecutor?(v18);
  static Update.enqueueAction(_:)();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v18);
  uint64_t Attribute = AGWeakAttributeGetAttribute();
  int v24 = *MEMORY[0x1E4F4E7A0];
  if (Attribute != *MEMORY[0x1E4F4E7A0])
  {
    MEMORY[0x1F4188790](Attribute);
    MEMORY[0x1F4188790](v25);
    AGGraphMutateAttribute();
  }
  uint64_t v26 = AGWeakAttributeGetAttribute();
  if (v26 != v24)
  {
    MEMORY[0x1F4188790](v26);
    MEMORY[0x1F4188790](v27);
    AGGraphMutateAttribute();
  }
  unint64_t v40 = v39;
  uint64_t v41 = v3;
  uint64_t v42 = v5;
  uint64_t v43 = v38;
  char v44 = v6;
  id v28 = v15;
  PlatformViewRepresentableContext.environment.getter(v35, (uint64_t *)&v45);
  if (v46)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UserInteractionActivityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UserInteractionActivityKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UserInteractionActivityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UserInteractionActivityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UserInteractionActivityKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UserInteractionActivityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v41)
  {
    char v29 = (void *)MEMORY[0x18C115780](v40, v41);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v29 = 0;
  }
  objc_msgSend(v28, sel_setInteractionActivityTrackingBaseName_, v29);

  int v30 = *((unsigned __int8 *)v2 + 8);
  uint64_t v31 = AGWeakAttributeGetAttribute();
  if (v30 == 1)
  {
    if (v31 != v24)
    {
      MEMORY[0x1F4188790](v31);
      uint64_t updated = type metadata accessor for UpdateCollectionViewListCoordinator();
      MEMORY[0x1F4188790](updated);
LABEL_25:
      AGGraphMutateAttribute();

      return v28;
    }
  }
  else if (v31 != v24)
  {
    MEMORY[0x1F4188790](v31);
    MEMORY[0x1F4188790](v33);
    goto LABEL_25;
  }

  return v28;
}