uint64_t DatePicker<>.init(_:selection:displayedComponents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v15 - 8);
  v17 = (char *)&v20 - v16;
  v18 = *a6;
  outlined init with copy of Binding<Date>(a5, (uint64_t)&v20 - v16, &lazy cache variable for type metadata for Binding<Date>, v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized DatePicker.init(selection:displayedComponents:label:)((uint64_t)v17, v18, a1, a2, a3, a4, a7);
  _s10Foundation4DateVSgWOhTm_0(a5, &lazy cache variable for type metadata for Binding<Date>, v14);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t DatePicker<>.init(_:selection:in:displayedComponents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  return DatePicker<>.init(_:selection:in:displayedComponents:)(a1, a2, a3, a4, a5, a6, a7, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>, a8, MEMORY[0x1E4FBB010], (void (*)(char *, char *, uint64_t, uint64_t, uint64_t, void, uint64_t))specialized DatePicker.init(selection:in:displayedComponents:label:));
}

{
  return DatePicker<>.init(_:selection:in:displayedComponents:)(a1, a2, a3, a4, a5, a6, a7, &lazy cache variable for type metadata for PartialRangeFrom<Date>, a8, MEMORY[0x1E4FBBC28], (void (*)(char *, char *, uint64_t, uint64_t, uint64_t, void, uint64_t))specialized DatePicker.init(selection:in:displayedComponents:label:));
}

{
  return DatePicker<>.init(_:selection:in:displayedComponents:)(a1, a2, a3, a4, a5, a6, a7, &lazy cache variable for type metadata for PartialRangeThrough<Date>, a8, MEMORY[0x1E4FBBD60], (void (*)(char *, char *, uint64_t, uint64_t, uint64_t, void, uint64_t))specialized DatePicker.init(selection:in:displayedComponents:label:));
}

uint64_t DatePicker<>.init(_:selection:in:displayedComponents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, unint64_t *a8@<X7>, uint64_t a9@<X8>, uint64_t (*a10)(uint64_t, uint64_t, uint64_t), void (*a11)(char *, char *, uint64_t, uint64_t, uint64_t, void, uint64_t))
{
  uint64_t v27 = a6;
  uint64_t v28 = a9;
  unsigned int v31 = a3;
  uint64_t v29 = a1;
  v30 = a11;
  type metadata accessor for ClosedRange<Date>(0, a8, a10);
  MEMORY[0x1F4188790](v16 - 8);
  v18 = (char *)&v26 - v17;
  v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v20 - 8);
  v22 = (char *)&v26 - v21;
  uint64_t v23 = *a7;
  outlined init with copy of Binding<Date>(a5, (uint64_t)&v26 - v21, &lazy cache variable for type metadata for Binding<Date>, v19);
  uint64_t v24 = v27;
  outlined init with copy of PartialRangeThrough<Date>(v27, (uint64_t)v18, a8, a10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30(v22, v18, v23, v29, a2, v31, a4);
  _sSNy10Foundation4DateVGWOhTm_2(v24, a8, a10);
  _s10Foundation4DateVSgWOhTm_0(a5, &lazy cache variable for type metadata for Binding<Date>, v19);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t DatePicker<>.init<A>(_:selection:displayedComponents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v13 - 8);
  v15 = &v18[-v14];
  uint64_t v16 = *a3;
  outlined init with copy of Binding<Date>(a2, (uint64_t)&v18[-v14], &lazy cache variable for type metadata for Binding<Date>, v12);
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a1;
  specialized DatePicker.init(selection:displayedComponents:label:)((uint64_t)v15, v16, (void (*)(long long *__return_ptr, uint64_t))partial apply for closure #1 in DatePicker<>.init<A>(_:selection:displayedComponents:), (uint64_t)v18, a6);
  _s10Foundation4DateVSgWOhTm_0(a2, &lazy cache variable for type metadata for Binding<Date>, v12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
}

uint64_t DatePicker<>.init<A>(_:selection:in:displayedComponents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return DatePicker<>.init<A>(_:selection:in:displayedComponents:)(a1, a2, a3, a4, a5, a6, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>, MEMORY[0x1E4FBB010], a7, (uint64_t)partial apply for closure #1 in DatePicker<>.init<A>(_:selection:in:displayedComponents:), (void (*)(char *, char *, uint64_t, uint64_t, unsigned char *))specialized DatePicker.init(selection:in:displayedComponents:label:));
}

{
  return DatePicker<>.init<A>(_:selection:in:displayedComponents:)(a1, a2, a3, a4, a5, a6, &lazy cache variable for type metadata for PartialRangeFrom<Date>, MEMORY[0x1E4FBBC28], a7, (uint64_t)partial apply for closure #1 in DatePicker<>.init<A>(_:selection:in:displayedComponents:), (void (*)(char *, char *, uint64_t, uint64_t, unsigned char *))specialized DatePicker.init(selection:in:displayedComponents:label:));
}

{
  return DatePicker<>.init<A>(_:selection:in:displayedComponents:)(a1, a2, a3, a4, a5, a6, &lazy cache variable for type metadata for PartialRangeThrough<Date>, MEMORY[0x1E4FBBD60], a7, (uint64_t)partial apply for closure #1 in DatePicker<>.init<A>(_:selection:in:displayedComponents:), (void (*)(char *, char *, uint64_t, uint64_t, unsigned char *))specialized DatePicker.init(selection:in:displayedComponents:label:));
}

uint64_t DatePicker<>.init<A>(_:selection:in:displayedComponents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, uint64_t (*a8)(uint64_t, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>, uint64_t a10, void (*a11)(char *, char *, uint64_t, uint64_t, unsigned char *))
{
  uint64_t v28 = a1;
  uint64_t v29 = a6;
  uint64_t v30 = a9;
  unsigned int v31 = a11;
  uint64_t v32 = a10;
  type metadata accessor for ClosedRange<Date>(0, a7, a8);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v27 - v18;
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v23 = (char *)&v27 - v22;
  uint64_t v24 = *a4;
  outlined init with copy of Binding<Date>(a2, (uint64_t)&v27 - v22, &lazy cache variable for type metadata for Binding<Date>, v20);
  outlined init with copy of PartialRangeThrough<Date>(a3, (uint64_t)v19, a7, a8);
  uint64_t v25 = v28;
  uint64_t v34 = a5;
  uint64_t v35 = v29;
  uint64_t v36 = v28;
  v31(v23, v19, v24, v32, v33);
  _sSNy10Foundation4DateVGWOhTm_2(a3, a7, a8);
  _s10Foundation4DateVSgWOhTm_0(a2, &lazy cache variable for type metadata for Binding<Date>, v20);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(v25, a5);
}

uint64_t closure #1 in DatePicker<>.init<A>(_:selection:displayedComponents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t DatePickerComponents.rawValue.getter()
{
  return *(void *)v0;
}

SwiftUI::DatePickerComponents __swiftcall DatePickerComponents.init(rawValue:)(SwiftUI::DatePickerComponents rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void one-time initialization function for hourAndMinute()
{
  uint64_t v0 = unk_1ED430570;
  if ((unk_1ED430570 & ~qword_1ED430568) == 0) {
    uint64_t v0 = 0;
  }
  static DatePickerComponents.hourAndMinute = v0 | qword_1ED430568;
}

void one-time initialization function for date()
{
  uint64_t v0 = unk_1ED4305A0;
  if ((unk_1ED4305A0 & ~qword_1ED430598) == 0) {
    uint64_t v0 = 0;
  }
  uint64_t v1 = qword_1ED4305A8;
  if ((qword_1ED4305A8 & ~(v0 | qword_1ED430598)) == 0) {
    uint64_t v1 = 0;
  }
  static DatePickerComponents.date = v1 | v0 | qword_1ED430598;
}

uint64_t _s10Foundation4DateVSgWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t lazy protocol witness table accessor for type ResolvedDatePickerStyle and conformance ResolvedDatePickerStyle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ClosedRange<Date>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = lazy protocol witness table accessor for type ResolvedDatePickerStyle and conformance ResolvedDatePickerStyle((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E4F27928]);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t _sSNy10Foundation4DateVGWOhTm_2(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  type metadata accessor for ClosedRange<Date>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined init with copy of PartialRangeThrough<Date>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  type metadata accessor for ClosedRange<Date>(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t partial apply for closure #1 in DatePicker<>.init<A>(_:selection:displayedComponents:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in DatePicker<>.init<A>(_:selection:displayedComponents:)(*(void *)(v1 + 32), a1);
}

void static DatePickerComponents.hourMinuteAndSecond.getter()
{
}

uint64_t associated type witness table accessor for View.Body : View in DatePicker<A>()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type DatePickerComponents and conformance DatePickerComponents()
{
  unint64_t result = lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents;
  if (!lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents;
  if (!lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents;
  if (!lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents;
  if (!lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents);
  }
  return result;
}

void type metadata completion function for DatePicker()
{
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(319, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  if (v0 <= 0x3F)
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    if (v1 <= 0x3F)
    {
      swift_checkMetadataState();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for DatePicker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  int v9 = *(_DWORD *)(v7 + 80);
  unint64_t v10 = v9;
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = ((v10 + 16) & ~v10) + v11 + v10;
  if (*(_DWORD *)(v7 + 84)) {
    size_t v13 = *(void *)(v7 + 64);
  }
  else {
    size_t v13 = v11 + 1;
  }
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(_DWORD *)(v15 + 80);
  unint64_t v17 = ((v16
        + 8
        + ((v13
          + 7
          + ((v13 + v9 + (v12 & ~(unint64_t)v9)) & ~(unint64_t)v9)) & 0xFFFFFFFFFFFFFFF8)) & ~v16)
      + *(void *)(v15 + 64);
  int v18 = (*(_DWORD *)(v15 + 80) | v9) & 0x100000;
  uint64_t v19 = *a2;
  *a1 = *a2;
  if ((v16 | v10) > 7 || v18 != 0 || v17 > 0x18)
  {
    uint64_t v22 = (uint64_t *)(v19 + (((v16 | v10) & 0xF8 ^ 0x1F8) & ((v16 | v10) + 16)));
    swift_retain();
  }
  else
  {
    size_t v40 = v13 + v10;
    size_t __n = v13;
    uint64_t v42 = v16 + 8;
    size_t v43 = v13 + 7;
    uint64_t v44 = v15;
    uint64_t v45 = v14;
    uint64_t v23 = ~v10;
    uint64_t v24 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v25 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v24 = *v25;
    uint64_t v38 = ((unint64_t)v24 + v10 + 8) & ~v10;
    uint64_t v39 = v6;
    uint64_t v26 = ((unint64_t)v25 + v10 + 8) & ~v10;
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    swift_retain();
    swift_retain();
    v27(v38, v26, v39);
    uint64_t v28 = (void *)(((unint64_t)a1 + v12) & v23);
    uint64_t v29 = (const void *)(((unint64_t)a2 + v12) & v23);
    uint64_t v30 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
    if (v30(v29, 1, v39))
    {
      size_t v31 = __n;
      memcpy(v28, v29, __n);
    }
    else
    {
      v27((uint64_t)v28, (uint64_t)v29, v39);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v28, 0, 1, v39);
      size_t v31 = __n;
    }
    uint64_t v32 = ~v16;
    v33 = (void *)(((unint64_t)v28 + v40) & v23);
    uint64_t v34 = (const void *)(((unint64_t)v29 + v40) & v23);
    if (v30(v34, 1, v39))
    {
      memcpy(v33, v34, v31);
    }
    else
    {
      v27((uint64_t)v33, (uint64_t)v34, v39);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v33, 0, 1, v39);
    }
    uint64_t v22 = a1;
    uint64_t v35 = (void *)(((unint64_t)v33 + v43) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v36 = (void *)(((unint64_t)v34 + v43) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v35 = *v36;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v44 + 16))(((unint64_t)v35 + v42) & v32, ((unint64_t)v36 + v42) & v32, v45);
  }
  return v22;
}

uint64_t destroy for DatePicker(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 15;
  swift_release();
  swift_release();
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  v7(((v3 & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6, v4);
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = v6 + a1 + v8 + ((v6 + 16) & ~v6);
  unint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v10(v9 & ~v6, 1, v4)) {
    v7(v9 & ~v6, v4);
  }
  if (!*(_DWORD *)(v5 + 84)) {
    ++v8;
  }
  uint64_t v11 = ((v9 | v6) + v8) & ~v6;
  if (!v10(v11, 1, v4)) {
    v7(v11, v4);
  }
  uint64_t v12 = *(void *)(*(void *)(a2 + 16) - 8);
  size_t v13 = *(uint64_t (**)(unint64_t))(v12 + 8);
  unint64_t v14 = (((v8 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v12 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);

  return v13(v14);
}

void *initializeWithCopy for DatePicker(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v4 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v3 = *v4;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v30 = ~v7;
  uint64_t v26 = ((unint64_t)v3 + v7 + 8) & ~v7;
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v6 + 16);
  swift_retain();
  swift_retain();
  uint64_t v24 = v8;
  v8((void *)v26, (const void *)(((unint64_t)v4 + v7 + 8) & ~v7), v5);
  size_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = ((v7 + 16) & ~v7) + v9 + v7;
  unint64_t v11 = (unint64_t)a1 + v10;
  uint64_t v12 = (void *)(((unint64_t)a1 + v10) & ~v7);
  unint64_t v27 = (unint64_t)a2 + v10;
  size_t v13 = (const void *)(((unint64_t)a2 + v10) & ~v7);
  uint64_t v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  if (v29(v13, 1, v5))
  {
    uint64_t v14 = v6;
    int v15 = *(_DWORD *)(v6 + 84);
    if (v15) {
      size_t v16 = v9;
    }
    else {
      size_t v16 = v9 + 1;
    }
    memcpy(v12, v13, v16);
  }
  else
  {
    v24(v12, v13, v5);
    uint64_t v14 = v6;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v12, 0, 1, v5);
    int v15 = *(_DWORD *)(v6 + 84);
  }
  if (v15) {
    size_t v17 = v9;
  }
  else {
    size_t v17 = v9 + 1;
  }
  int v18 = (void *)(((v11 | v7) + v17) & v30);
  uint64_t v19 = (const void *)(((v27 | v7) + v17) & v30);
  if (v29(v19, 1, v5))
  {
    memcpy(v18, v19, v17);
  }
  else
  {
    v24(v18, v19, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v18, 0, 1, v5);
  }
  uint64_t v20 = (void *)(((unint64_t)v18 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)(((unint64_t)v19 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v20 = *v21;
  uint64_t v22 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v22 + 16))(((unint64_t)v20 + *(unsigned __int8 *)(v22 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80), ((unint64_t)v21 + *(unsigned __int8 *)(v22 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  return a1;
}

void *assignWithCopy for DatePicker(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v6 = *(void *)v5;
  swift_retain();
  swift_release();
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v32 = ~v10;
  uint64_t v29 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24);
  v29(((unint64_t)v6 + v10 + 8) & ~v10, (v10 + 8 + v5) & ~v10, v7);
  size_t v11 = *(void *)(v8 + 64);
  uint64_t v12 = ((v10 + 16) & ~v10) + v11 + v10;
  size_t v13 = (void *)(((unint64_t)a1 + v12) & ~v10);
  unint64_t v30 = (unint64_t)a1 + v12;
  unint64_t v31 = (unint64_t)a2 + v12;
  uint64_t v14 = (void *)(((unint64_t)a2 + v12) & ~v10);
  int v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  int v16 = v15(v13, 1, v7);
  int v17 = v15(v14, 1, v7);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v13, v14, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v7);
      goto LABEL_12;
    }
    int v18 = *(_DWORD *)(v9 + 84);
  }
  else
  {
    if (!v17)
    {
      v29((unint64_t)v13, (unint64_t)v14, v7);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v13, v7);
    int v18 = *(_DWORD *)(v9 + 84);
  }
  if (v18) {
    size_t v19 = v11;
  }
  else {
    size_t v19 = v11 + 1;
  }
  memcpy(v13, v14, v19);
LABEL_12:
  if (*(_DWORD *)(v9 + 84)) {
    size_t v20 = v11;
  }
  else {
    size_t v20 = v11 + 1;
  }
  uint64_t v21 = (void *)(((v30 | v10) + v20) & v32);
  uint64_t v22 = (void *)(((v31 | v10) + v20) & v32);
  int v23 = v15(v21, 1, v7);
  int v24 = v15(v22, 1, v7);
  if (!v23)
  {
    if (!v24)
    {
      v29((unint64_t)v21, (unint64_t)v22, v7);
      goto LABEL_21;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v21, v7);
    goto LABEL_20;
  }
  if (v24)
  {
LABEL_20:
    memcpy(v21, v22, v20);
    goto LABEL_21;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v21, v22, v7);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v21, 0, 1, v7);
LABEL_21:
  uint64_t v25 = (void *)(((unint64_t)v21 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (void *)(((unint64_t)v22 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v25 = *v26;
  uint64_t v27 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v27 + 24))(((unint64_t)v25 + *(unsigned __int8 *)(v27 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80), ((unint64_t)v26 + *(unsigned __int8 *)(v27 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
  return a1;
}

void *initializeWithTake for DatePicker(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v5 = *v6;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v29 = ~v10;
  uint64_t v11 = ((unint64_t)v5 + v10 + 8) & ~v10;
  uint64_t v12 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 32);
  v12(v11, ((unint64_t)v6 + v10 + 8) & ~v10, v7);
  size_t v13 = *(void *)(v8 + 64);
  uint64_t v14 = ((v10 + 16) & ~v10) + v13 + v10;
  unint64_t v31 = a1;
  int v15 = (void *)(((unint64_t)a1 + v14) & ~v10);
  unint64_t v26 = (unint64_t)a1 + v14;
  unint64_t v27 = (unint64_t)a2 + v14;
  int v16 = (const void *)(((unint64_t)a2 + v14) & ~v10);
  uint64_t v28 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  if (v28(v16, 1, v7))
  {
    int v17 = *(_DWORD *)(v9 + 84);
    if (v17) {
      size_t v18 = v13;
    }
    else {
      size_t v18 = v13 + 1;
    }
    memcpy(v15, v16, v18);
  }
  else
  {
    v12((uint64_t)v15, (unint64_t)v16, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v15, 0, 1, v7);
    int v17 = *(_DWORD *)(v9 + 84);
  }
  if (v17) {
    size_t v19 = v13;
  }
  else {
    size_t v19 = v13 + 1;
  }
  size_t v20 = (void *)(((v26 | v10) + v19) & v29);
  uint64_t v21 = (const void *)(((v27 | v10) + v19) & v29);
  if (v28(v21, 1, v7))
  {
    memcpy(v20, v21, v19);
  }
  else
  {
    v12((uint64_t)v20, (unint64_t)v21, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v20, 0, 1, v7);
  }
  uint64_t v22 = (void *)(((unint64_t)v20 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v23 = (void *)(((unint64_t)v21 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  void *v22 = *v23;
  uint64_t v24 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v24 + 32))(((unint64_t)v22 + *(unsigned __int8 *)(v24 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80), ((unint64_t)v23 + *(unsigned __int8 *)(v24 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  return v31;
}

void *assignWithTake for DatePicker(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v6 = *(void *)v5;
  swift_release();
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v32 = ~v10;
  uint64_t v29 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40);
  v29(((unint64_t)v6 + v10 + 8) & ~v10, (v10 + 8 + v5) & ~v10, v7);
  size_t v11 = *(void *)(v8 + 64);
  uint64_t v12 = ((v10 + 16) & ~v10) + v11 + v10;
  size_t v13 = (void *)(((unint64_t)a1 + v12) & ~v10);
  unint64_t v30 = (unint64_t)a1 + v12;
  unint64_t v31 = (unint64_t)a2 + v12;
  uint64_t v14 = (void *)(((unint64_t)a2 + v12) & ~v10);
  int v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  int v16 = v15(v13, 1, v7);
  int v17 = v15(v14, 1, v7);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v13, v14, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v7);
      goto LABEL_12;
    }
    int v18 = *(_DWORD *)(v9 + 84);
  }
  else
  {
    if (!v17)
    {
      v29((unint64_t)v13, (unint64_t)v14, v7);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v13, v7);
    int v18 = *(_DWORD *)(v9 + 84);
  }
  if (v18) {
    size_t v19 = v11;
  }
  else {
    size_t v19 = v11 + 1;
  }
  memcpy(v13, v14, v19);
LABEL_12:
  if (*(_DWORD *)(v9 + 84)) {
    size_t v20 = v11;
  }
  else {
    size_t v20 = v11 + 1;
  }
  uint64_t v21 = (void *)(((v30 | v10) + v20) & v32);
  uint64_t v22 = (void *)(((v31 | v10) + v20) & v32);
  int v23 = v15(v21, 1, v7);
  int v24 = v15(v22, 1, v7);
  if (!v23)
  {
    if (!v24)
    {
      v29((unint64_t)v21, (unint64_t)v22, v7);
      goto LABEL_21;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v21, v7);
    goto LABEL_20;
  }
  if (v24)
  {
LABEL_20:
    memcpy(v21, v22, v20);
    goto LABEL_21;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v21, v22, v7);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v21, 0, 1, v7);
LABEL_21:
  uint64_t v25 = (void *)(((unint64_t)v21 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v26 = (void *)(((unint64_t)v22 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v25 = *v26;
  uint64_t v27 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v27 + 40))(((unint64_t)v25 + *(unsigned __int8 *)(v27 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80), ((unint64_t)v26 + *(unsigned __int8 *)(v27 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for DatePicker(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  if (v8) {
    unsigned int v10 = v8 - 1;
  }
  else {
    unsigned int v10 = 0;
  }
  if (v10 <= v9) {
    unsigned int v11 = v9;
  }
  else {
    unsigned int v11 = v10;
  }
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v13 = *(unsigned int *)(v12 + 84);
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = *(void *)(v6 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v12 + 80);
  if (v13 <= v11) {
    unsigned int v17 = v11;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v12 + 84);
  }
  if (v8) {
    uint64_t v18 = v15;
  }
  else {
    uint64_t v18 = v15 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v19 = ((v14 + 16) & ~v14) + v15 + v14;
  uint64_t v20 = v18 + v14;
  uint64_t v21 = v18 + 7;
  uint64_t v22 = v16 + 8;
  if (a2 > v17)
  {
    unint64_t v23 = ((v22 + ((v21 + ((v20 + (v19 & ~v14)) & ~v14)) & 0xFFFFFFFFFFFFFFF8)) & ~v16) + *(void *)(v12 + 64);
    char v24 = 8 * v23;
    if (v23 > 3) {
      goto LABEL_19;
    }
    unsigned int v26 = ((a2 - v17 + ~(-1 << v24)) >> v24) + 1;
    if (HIWORD(v26))
    {
      int v25 = *(_DWORD *)((char *)a1 + v23);
      if (v25) {
        goto LABEL_26;
      }
    }
    else
    {
      if (v26 <= 0xFF)
      {
        if (v26 < 2) {
          goto LABEL_36;
        }
LABEL_19:
        int v25 = *((unsigned __int8 *)a1 + v23);
        if (!*((unsigned char *)a1 + v23)) {
          goto LABEL_36;
        }
LABEL_26:
        int v27 = (v25 - 1) << v24;
        if (v23 > 3) {
          int v27 = 0;
        }
        if (v23)
        {
          if (v23 <= 3) {
            int v28 = ((v22 + ((v21 + ((v20 + (v19 & ~v14)) & ~v14)) & 0xFFFFFFF8)) & ~v16)
          }
                + *(_DWORD *)(v12 + 64);
          else {
            int v28 = 4;
          }
          switch(v28)
          {
            case 2:
              int v29 = *a1;
              break;
            case 3:
              int v29 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v29 = *(_DWORD *)a1;
              break;
            default:
              int v29 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v29 = 0;
        }
        return v17 + (v29 | v27) + 1;
      }
      int v25 = *(unsigned __int16 *)((char *)a1 + v23);
      if (*(unsigned __int16 *)((char *)a1 + v23)) {
        goto LABEL_26;
      }
    }
  }
LABEL_36:
  uint64_t v30 = ~v14;
  if (v9 == v17)
  {
    unint64_t v31 = (uint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v8 & 0x80000000) != 0)
    {
      v37 = *(uint64_t (**)(unint64_t))(v7 + 48);
      return v37(((unint64_t)v31 + v14 + 8) & v30);
    }
    else
    {
      uint64_t v32 = *v31;
      if ((unint64_t)*v31 >= 0xFFFFFFFF) {
        LODWORD(v32) = -1;
      }
      return (v32 + 1);
    }
  }
  unint64_t v34 = ((unint64_t)a1 + v19) & v30;
  if (v10 == v17)
  {
    if (v8 >= 2)
    {
      unsigned int v38 = (*(uint64_t (**)(unint64_t))(v7 + 48))(v34);
      if (v38 >= 2) {
        return v38 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  unint64_t v35 = (v22 + ((v21 + ((v20 + v34) & v30)) & 0xFFFFFFFFFFFFFFF8)) & ~v16;
  uint64_t v36 = *(uint64_t (**)(unint64_t, uint64_t))(v12 + 48);

  return v36(v35, v13);
}

void storeEnumTagSinglePayload for DatePicker(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v8 = 0;
  uint64_t v9 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v11) {
    unsigned int v13 = v11 - 1;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v13 <= v12) {
    unsigned int v14 = v12;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v16 = *(unsigned int *)(v15 + 84);
  uint64_t v17 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v18 = *(void *)(v9 + 64);
  uint64_t v19 = *(unsigned __int8 *)(v15 + 80);
  if (v16 <= v14) {
    unsigned int v20 = v14;
  }
  else {
    unsigned int v20 = *(_DWORD *)(v15 + 84);
  }
  uint64_t v21 = ((v17 + 16) & ~v17) + v18 + v17;
  if (!v11) {
    ++v18;
  }
  uint64_t v22 = v18 + v17;
  uint64_t v23 = (v18 + v17 + (v21 & ~v17)) & ~v17;
  uint64_t v24 = v18 + 7;
  unint64_t v25 = (v24 + v23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = v19 + 8;
  size_t v27 = ((v19 + 8 + v25) & ~v19) + *(void *)(v15 + 64);
  if (a3 <= v20) {
    goto LABEL_23;
  }
  if (v27 <= 3)
  {
    unsigned int v28 = ((a3 - v20 + ~(-1 << (8 * v27))) >> (8 * v27)) + 1;
    if (HIWORD(v28))
    {
      int v8 = 4;
      if (v20 >= a2) {
        goto LABEL_31;
      }
LABEL_24:
      unsigned int v29 = ~v20 + a2;
      if (v27 < 4)
      {
        int v30 = (v29 >> (8 * v27)) + 1;
        if (v27)
        {
          int v31 = v29 & ~(-1 << (8 * v27));
          bzero(a1, v27);
          if (v27 == 3)
          {
            *(_WORD *)a1 = v31;
            a1[2] = BYTE2(v31);
          }
          else if (v27 == 2)
          {
            *(_WORD *)a1 = v31;
          }
          else
          {
            *a1 = v31;
          }
        }
      }
      else
      {
        bzero(a1, v27);
        *(_DWORD *)a1 = v29;
        int v30 = 1;
      }
      switch(v8)
      {
        case 1:
          a1[v27] = v30;
          break;
        case 2:
          *(_WORD *)&a1[v27] = v30;
          break;
        case 3:
LABEL_60:
          __break(1u);
          JUMPOUT(0x1880D4BCCLL);
        case 4:
          *(_DWORD *)&a1[v27] = v30;
          break;
        default:
          return;
      }
      return;
    }
    if (v28 >= 0x100) {
      int v8 = 2;
    }
    else {
      int v8 = v28 > 1;
    }
LABEL_23:
    if (v20 >= a2) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  int v8 = 1;
  if (v20 < a2) {
    goto LABEL_24;
  }
LABEL_31:
  uint64_t v32 = ~v17;
  uint64_t v33 = ~v19;
  switch(v8)
  {
    case 1:
      a1[v27] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 2:
      *(_WORD *)&a1[v27] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 3:
      goto LABEL_60;
    case 4:
      *(_DWORD *)&a1[v27] = 0;
      goto LABEL_35;
    default:
LABEL_35:
      if (!a2) {
        return;
      }
LABEL_36:
      if (v12 == v20)
      {
        unint64_t v34 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v11 & 0x80000000) == 0)
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v35 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v35 = (a2 - 1);
          }
          *unint64_t v34 = v35;
          return;
        }
        uint64_t v36 = ((unint64_t)v34 + v17 + 8) & v32;
        unsigned int v38 = *(void (**)(uint64_t, uint64_t))(v10 + 56);
        uint64_t v37 = a2;
        goto LABEL_48;
      }
      uint64_t v36 = (unint64_t)&a1[v21] & v32;
      if (v13 == v20)
      {
        uint64_t v37 = (a2 + 1);
        unsigned int v38 = *(void (**)(uint64_t, uint64_t))(v10 + 56);
LABEL_48:
        v38(v36, v37);
        return;
      }
      unint64_t v39 = (v26 + ((v24 + ((v22 + v36) & v32)) & 0xFFFFFFFFFFFFFFF8)) & v33;
      size_t v40 = *(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 56);
      v40(v39, a2, v16);
      break;
  }
}

ValueMetadata *type metadata accessor for DatePickerComponents()
{
  return &type metadata for DatePickerComponents;
}

uint64_t sub_1880D4C04()
{
  return swift_getWitnessTable();
}

void type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for DatePicker();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t outlined init with take of DatePicker<Text>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, &lazy cache variable for type metadata for DatePicker<Text>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void static TouchBarItemPresenceTraitKey.defaultValue.getter()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void View.touchBarItemPresence(_:)()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void static TouchBarItemPrincipalTraitKey.defaultValue.getter()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void View.touchBarItemPrincipal(_:)()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void static TouchBarCustomizationLabelTraitKey.defaultValue.getter()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void View.touchBarCustomizationLabel(_:)()
{
}

ValueMetadata *type metadata accessor for TouchBarItemPresenceTraitKey()
{
  return &type metadata for TouchBarItemPresenceTraitKey;
}

ValueMetadata *type metadata accessor for TouchBarItemPrincipalTraitKey()
{
  return &type metadata for TouchBarItemPrincipalTraitKey;
}

ValueMetadata *type metadata accessor for TouchBarCustomizationLabelTraitKey()
{
  return &type metadata for TouchBarCustomizationLabelTraitKey;
}

uint64_t sub_1880D4E48(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA013PreviewDeviceF3KeyVGGAaBHPxAaBHD1__AiA0cH0HPyHCHCTm(a1, &lazy cache variable for type metadata for _TraitWritingModifier<TouchBarItemPresenceTraitKey>, (uint64_t)&type metadata for TouchBarItemPresenceTraitKey, (uint64_t)&protocol witness table for TouchBarItemPresenceTraitKey, &lazy protocol witness table cache variable for type _TraitWritingModifier<TouchBarItemPresenceTraitKey> and conformance _TraitWritingModifier<A>);
}

uint64_t sub_1880D4E6C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA013PreviewDeviceF3KeyVGGAaBHPxAaBHD1__AiA0cH0HPyHCHCTm(a1, &lazy cache variable for type metadata for _TraitWritingModifier<TouchBarItemPrincipalTraitKey>, (uint64_t)&type metadata for TouchBarItemPrincipalTraitKey, (uint64_t)&protocol witness table for TouchBarItemPrincipalTraitKey, &lazy protocol witness table cache variable for type _TraitWritingModifier<TouchBarItemPrincipalTraitKey> and conformance _TraitWritingModifier<A>);
}

uint64_t sub_1880D4E90(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA013PreviewDeviceF3KeyVGGAaBHPxAaBHD1__AiA0cH0HPyHCHCTm(a1, &lazy cache variable for type metadata for _TraitWritingModifier<TouchBarCustomizationLabelTraitKey>, (uint64_t)&type metadata for TouchBarCustomizationLabelTraitKey, (uint64_t)&protocol witness table for TouchBarCustomizationLabelTraitKey, &lazy protocol witness table cache variable for type _TraitWritingModifier<TouchBarCustomizationLabelTraitKey> and conformance _TraitWritingModifier<A>);
}

uint64_t View.accessibilityChartDescriptor<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ChartDescriptorModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for ChartDescriptorModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static ChartDescriptorModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr)@<X2>, double *a3@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  int v7 = *(_DWORD *)(a1 + 80);
  *(void *)&long long v25 = *(void *)a1;
  DWORD2(v25) = v3;
  *(void *)uint64_t v26 = v4;
  *(_OWORD *)&v26[8] = *(_OWORD *)(a1 + 24);
  *(void *)&v26[24] = v5;
  *(void *)size_t v27 = v6;
  *(_OWORD *)&v27[8] = *(_OWORD *)(a1 + 56);
  *(void *)&v27[24] = *(void *)(a1 + 72);
  int v28 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static DynamicPropertyCache.fields(of:)();
  uint64_t v15 = *((void *)&v29 + 1);
  uint64_t v16 = v29;
  char v14 = v30;
  int v17 = DWORD1(v30);
  outlined copy of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for ChartDescriptorModifier();
  _DynamicPropertyBuffer.init<A>(fields:container:inputs:)();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  *((void *)&v31 + 1) = v5;
  long long v32 = *(_OWORD *)v27;
  long long v33 = *(_OWORD *)&v27[16];
  int v34 = v28;
  LODWORD(v29) = AGGraphCreateOffsetAttribute2();
  DWORD1(v29) = _ViewInputs.environment.getter();
  *((void *)&v29 + 1) = _ViewInputs.viewPhase.getter();
  uint64_t v8 = v23;
  *(void *)&long long v30 = 0;
  *((void *)&v30 + 1) = v23;
  unsigned int v10 = HIDWORD(v24);
  unsigned int v9 = v24;
  *(void *)&long long v31 = v24;
  uint64_t v21 = type metadata accessor for ChartDescriptorModifier.Child();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<()>(0, &lazy cache variable for type metadata for Attribute<AccessibilityAttachmentModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v29, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_26, (uint64_t)v20, v21, MEMORY[0x1E4FBC248], v11, MEMORY[0x1E4FBC278], v12);
  swift_release();
  uint64_t v23 = v8;
  unint64_t v24 = __PAIR64__(v10, v9);
  *(void *)&long long v29 = v16;
  *((void *)&v29 + 1) = v15;
  LOBYTE(v30) = v14;
  DWORD1(v30) = v17;
  _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  outlined consume of DynamicPropertyCache.Fields.Layout();
  _GraphValue.init(_:)();
  LODWORD(v4) = v23;
  long long v31 = *(_OWORD *)&v26[16];
  long long v32 = *(_OWORD *)v27;
  long long v33 = *(_OWORD *)&v27[16];
  int v34 = v28;
  long long v29 = v25;
  long long v30 = *(_OWORD *)v26;
  outlined retain of _ViewInputs((uint64_t)&v29);
  specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)&v29, a2, a3);
  outlined release of _ViewInputs((uint64_t)&v29);
  return outlined release of _ViewInputs((uint64_t)&v29);
}

uint64_t ChartDescriptorModifier.Child.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  v54[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v47 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v8 = *(_DWORD *)(v1 + 8);
  unsigned int v7 = *(_DWORD *)(v1 + 12);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  unsigned int v11 = *(_DWORD *)(v1 + 32);
  unsigned int v12 = *(_DWORD *)(v1 + 36);
  *(void *)&long long v13 = *(void *)v1;
  long long v46 = v13;
  uint64_t v49 = v13;
  unint64_t v50 = __PAIR64__(v7, v8);
  uint64_t v51 = v10;
  uint64_t v52 = v9;
  uint64_t v45 = v9;
  unsigned int v43 = v12;
  unsigned int v44 = v11;
  unint64_t v53 = __PAIR64__(v12, v11);
  WindowSceneList.MakeList.environment.getter(v54);
  uint64_t v49 = v54[0];
  unint64_t v50 = v54[1];
  char v14 = EnvironmentValues.accessibilityEnabled.getter();
  swift_release();
  swift_release();
  if ((v14 & 1) == 0)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    v54[0] = Dictionary.init(minimumCapacity:)();
    AccessibilityAttachment.init(properties:)();
    uint64_t v29 = v49;
    unint64_t v30 = v50;
    type metadata accessor for Attribute<()>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = v29;
    *(void *)(v31 + 24) = v30;
    uint64_t v49 = v31;
    unint64_t v50 = 0;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v42 = v16;
  int v17 = *(void (**)(uint64_t *, char *, uint64_t))(v47 + 16);
  *(void *)&long long v46 = v4;
  uint64_t v18 = v4;
  uint64_t v19 = v17;
  v17((uint64_t *)v6, (char *)Value, v18);
  unsigned int v20 = (int *)AGGraphGetValue();
  uint64_t v41 = v21;
  int v22 = *v20;
  unsigned int v23 = *v20 >> 1;
  if (v23 != v7)
  {
    uint64_t v49 = v45;
    unint64_t v50 = __PAIR64__(v43, v44);
    _DynamicPropertyBuffer.reset()();
    if (v10)
    {
      swift_retain();
      RepresentableChartDescriptorStorage.reset()();
      unsigned int v20 = (int *)swift_release();
    }
    *(_DWORD *)(v2 + 12) = v23;
  }
  MEMORY[0x1F4188790](v20);
  unint64_t v24 = *(void *)(a1 + 24);
  uint64_t v25 = v46;
  *(&v41 - 4) = v46;
  *(&v41 - 3) = v24;
  *(&v41 - 2) = v2;
  *((_DWORD *)&v41 - 2) = v22;
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v6, (uint64_t)partial apply for closure #1 in ChartDescriptorModifier.Child.updateValue(), (uint64_t)(&v41 - 6), v25, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBC278], v26);
  if (v48)
  {
    int v27 = 1;
    uint64_t v28 = v47;
  }
  else
  {
    Outputuint64_t Value = AGGraphGetOutputValue();
    int v27 = 1;
    uint64_t v28 = v47;
    if (OutputValue)
    {
      if ((v42 & 1) == 0) {
        int v27 = v41 & 1;
      }
    }
  }
  char v48 = v27;
  if (*(void *)(v2 + 16))
  {
    if (v27)
    {
      uint64_t v52 = v25;
      unint64_t v53 = v24;
      int v34 = __swift_allocate_boxed_opaque_existential_1(&v49);
      v19(v34, v6, v25);
      swift_retain();
      RepresentableChartDescriptorStorage.markNeedsUpdate(_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v25);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
    }
  }
  else
  {
    type metadata accessor for RepresentableChartDescriptorStorage();
    uint64_t v52 = v25;
    unint64_t v53 = v24;
    uint64_t v35 = __swift_allocate_boxed_opaque_existential_1(&v49);
    v19(v35, v6, v25);
    uint64_t v36 = RepresentableChartDescriptorStorage.__allocating_init(_:)();
    *(void *)(v2 + 16) = v36;
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    swift_retain_n();
    v54[0] = Dictionary.init(minimumCapacity:)();
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityChartDescriptorStorage?, MEMORY[0x1E4F41090]);
    uint64_t v52 = v37;
    unint64_t v53 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?> and conformance AccessibilityPropertiesEntry<A>();
    uint64_t v49 = v36;
    specialized Dictionary.subscript.setter((uint64_t)&v49, MEMORY[0x1E4F40AF8]);
    AccessibilityAttachment.init(properties:)();
    uint64_t v38 = v49;
    unint64_t v39 = v50;
    type metadata accessor for Attribute<()>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
    uint64_t v40 = swift_allocObject();
    *(void *)(v40 + 16) = v38;
    *(void *)(v40 + 24) = v39;
    uint64_t v49 = v40;
    unint64_t v50 = 0;
    AGGraphSetOutputValue();
    swift_release();
    swift_release();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v6, v25);
}

void ChartDescriptorModifier.Child.destroy()()
{
  _DynamicPropertyBuffer.destroy()();
  if (*(void *)(v0 + 16))
  {
    RepresentableChartDescriptorStorage.reset()();
    swift_release();
  }
  *(void *)(v0 + 16) = 0;
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance ChartDescriptorModifier<A>.Child()
{
}

uint64_t ChartDescriptorModifier.description.getter()
{
  _StringGuts.grow(_:)(53);
  v0._object = (void *)0x800000018833FB80;
  v0._countAndFlagsBits = 0xD000000000000033;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  return 0;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ChartDescriptorModifier<A>@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr)@<X2>, double *a3@<X8>)
{
  return static ChartDescriptorModifier._makeView(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ChartDescriptorModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t AccessibilityNode.accessibilityChartDescriptor.getter()
{
  AccessibilityNode.attachment.getter(v4);

  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = specialized AccessibilityProperties.subscript.getter(v0);
  swift_bridgeObjectRelease_n();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = dispatch thunk of AccessibilityChartDescriptorStorage.resolve()();
  swift_release();
  return v2;
}

uint64_t sub_1880D5C80()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for ChartDescriptorModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ChartDescriptorModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1880D6064);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in ChartDescriptorModifier<A>()
{
  return &protocol witness table for ChartDescriptorModifier<A>;
}

uint64_t type metadata accessor for ChartDescriptorModifier.Child()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for ChartDescriptorModifier.Child(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ChartDescriptorModifier.Child(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  return a1;
}

uint64_t assignWithTake for ChartDescriptorModifier.Child(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t base witness table accessor for _AttributeBody in ChartDescriptorModifier<A>.Child()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in ChartDescriptorModifier.Child.updateValue()@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _DynamicPropertyBuffer.update(container:phase:)();
  *a1 = result & 1;
  return result;
}

void type metadata accessor for AccessibilityChartDescriptorStorage?(uint64_t a1)
{
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>(255, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityChartDescriptorStorage?, MEMORY[0x1E4F41090]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

uint64_t EnvironmentValues.searchSuffix.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.searchPresentationToolbarBehavior.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void static SearchPresentationToolbarBehavior.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static SearchPresentationToolbarBehavior.avoidHidingContent.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t EnvironmentValues.searchPresentationToolbarBehavior.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.searchPresentationToolbarBehavior(_:)()
{
  return swift_release();
}

uint64_t sub_1880D66C8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.searchPresentationToolbarBehavior.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1880D6704()
{
  return EnvironmentValues.searchPresentationToolbarBehavior.setter();
}

uint64_t EnvironmentValues.searchDictationBehavior.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.searchDictationBehavior.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.searchDictationBehavior(_:)()
{
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.searchDictationBehavior : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t sub_1880D6A90()
{
  return EnvironmentValues.searchDictationBehavior.setter();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.SearchSuffixKey(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  return MEMORY[0x18C112FB0](v6, v5) & 1;
}

uint64_t View.searchSuffix(alwaysVisible:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getKeyPath();
  unint64_t v8 = (void *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  outlined copy of Text?(a1, a2, a3, a4);
  View.transformEnvironment<A>(_:transform:)();
  swift_release();

  return swift_release();
}

double key path getter for EnvironmentValues.searchSuffix : EnvironmentValues@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  double result = *(double *)&v4;
  *a2 = v4;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for EnvironmentValues.searchSuffix : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  outlined copy of Text.Suffix.Storage(*a1, v2, v3);
  specialized EnvironmentValues.subscript.setter(v1, v2, v3);

  return outlined consume of Text.Suffix.Storage(v1, v2, v3);
}

uint64_t *closure #1 in View.searchSuffix(alwaysVisible:)(uint64_t *result, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v9 = result;
    uint64_t v10 = *result;
    uint64_t v11 = result[1];
    uint64_t v12 = result[2];
    outlined copy of Text.Storage(a2, a3, a4 & 1);
    swift_bridgeObjectRetain();
    double result = (uint64_t *)outlined consume of Text.Suffix.Storage(v10, v11, v12);
    *uint64_t v9 = a2;
    v9[1] = a3;
    v9[2] = a4 & 1 | 0x4000000000000000;
    v9[3] = a5;
  }
  return result;
}

uint64_t sub_1880D6E1C()
{
  if (*(void *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t *partial apply for closure #1 in View.searchSuffix(alwaysVisible:)(uint64_t *a1)
{
  return closure #1 in View.searchSuffix(alwaysVisible:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

ValueMetadata *type metadata accessor for SearchPresentationToolbarBehavior()
{
  return &type metadata for SearchPresentationToolbarBehavior;
}

uint64_t sub_1880D6E88(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA33SearchPresentationToolbarBehaviorV4RoleOGGAaBHPxAaBHD1__AkA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchPresentationToolbarBehavior.Role>, (uint64_t)&type metadata for SearchPresentationToolbarBehavior.Role, MEMORY[0x1E4F411E8], (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchPresentationToolbarBehavior.Role> and conformance _EnvironmentKeyWritingModifier<A>);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchPresentationToolbarBehavior.Role> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchPresentationToolbarBehavior.Role> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchPresentationToolbarBehavior.Role> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<SearchPresentationToolbarBehavior.Role>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchPresentationToolbarBehavior.Role>, (uint64_t)&type metadata for SearchPresentationToolbarBehavior.Role, MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchPresentationToolbarBehavior.Role> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t sub_1880D6F40(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA33SearchPresentationToolbarBehaviorV4RoleOGGAaBHPxAaBHD1__AkA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextInputDictationBehavior>, (uint64_t)&type metadata for TextInputDictationBehavior, MEMORY[0x1E4F411E8], (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextInputDictationBehavior> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA33SearchPresentationToolbarBehaviorV4RoleOGGAaBHPxAaBHD1__AkA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t), void (*a5)(void))
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextInputDictationBehavior> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextInputDictationBehavior> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextInputDictationBehavior> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<SearchPresentationToolbarBehavior.Role>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextInputDictationBehavior>, (uint64_t)&type metadata for TextInputDictationBehavior, MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextInputDictationBehavior> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t sub_1880D7074(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA33SearchPresentationToolbarBehaviorV4RoleOGGAaBHPxAaBHD1__AkA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Text.Suffix>, MEMORY[0x1E4F413D8], MEMORY[0x1E4F41280], (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Text.Suffix> and conformance _EnvironmentKeyTransformModifier<A>);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<SearchPresentationToolbarBehavior.Role>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Text.Suffix> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Text.Suffix> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Text.Suffix> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<SearchPresentationToolbarBehavior.Role>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Text.Suffix>, MEMORY[0x1E4F413D8], MEMORY[0x1E4F41280]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Text.Suffix> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SearchPresentationToolbarBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1880D7244);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchPresentationToolbarBehavior.Role and conformance SearchPresentationToolbarBehavior.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchPresentationToolbarBehavior.Role and conformance SearchPresentationToolbarBehavior.Role;
  if (!lazy protocol witness table cache variable for type SearchPresentationToolbarBehavior.Role and conformance SearchPresentationToolbarBehavior.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchPresentationToolbarBehavior.Role and conformance SearchPresentationToolbarBehavior.Role);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey> and conformance EnvironmentPropertyKey<A>[0];
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey> and conformance EnvironmentPropertyKey<A>[0])
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void *type metadata accessor for EnvironmentValues.SearchDictationBehaviorKey()
{
  return &unk_1ED422110;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchSuffixKey()
{
  return &type metadata for EnvironmentValues.SearchSuffixKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchPresentationToolbarBehaviorKey()
{
  return &type metadata for EnvironmentValues.SearchPresentationToolbarBehaviorKey;
}

uint64_t CompactDatePickerStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of DatePickerStyleConfiguration(a1, a2);
  int v3 = (int *)type metadata accessor for UIKitDatePicker(0);
  *(void *)(a2 + v3[5]) = 2;
  unsigned int v4 = (uint64_t *)(a2 + v3[6]);
  *unsigned int v4 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78]);
  swift_storeEnumTagMultiPayload();
  uint64_t v5 = (uint64_t *)(a2 + v3[7]);
  *uint64_t v5 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0]);
  swift_storeEnumTagMultiPayload();
  unsigned int v6 = (uint64_t *)(a2 + v3[8]);
  *unsigned int v6 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68]);

  return swift_storeEnumTagMultiPayload();
}

uint64_t associated type witness table accessor for DatePickerStyle.Body : View in CompactDatePickerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for DatePickerStyle.makeBody(configuration:) in conformance CompactDatePickerStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of DatePickerStyleConfiguration(a1, a2);
  int v3 = (int *)type metadata accessor for UIKitDatePicker(0);
  *(void *)(a2 + v3[5]) = 2;
  unsigned int v4 = (uint64_t *)(a2 + v3[6]);
  *unsigned int v4 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78]);
  swift_storeEnumTagMultiPayload();
  uint64_t v5 = (uint64_t *)(a2 + v3[7]);
  *uint64_t v5 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0]);
  swift_storeEnumTagMultiPayload();
  unsigned int v6 = (uint64_t *)(a2 + v3[8]);
  *unsigned int v6 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68]);

  return swift_storeEnumTagMultiPayload();
}

ValueMetadata *type metadata accessor for CompactDatePickerStyle()
{
  return &type metadata for CompactDatePickerStyle;
}

SwiftUI::_OverlayLayout __swiftcall _OverlayLayout.init(contentIndex:)(SwiftUI::_OverlayLayout contentIndex)
{
  *(void *)uint64_t v1 = contentIndex.contentIndex.value;
  *(unsigned char *)(v1 + 8) = contentIndex.contentIndex.is_nil;
  return contentIndex;
}

uint64_t static _OverlayLayout._makeView(root:inputs:body:)()
{
  return static Layout.makeLayoutView(root:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type _OverlayLayout and conformance _OverlayLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout;
  if (!lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout;
  if (!lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout;
  if (!lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout;
  if (!lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout);
  }
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _OverlayLayout()
{
  return static Layout.makeLayoutView(root:inputs:body:)();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _OverlayLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, &protocol witness table for _OverlayLayout);
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance _OverlayLayout()
{
}

uint64_t _OverlayLayout.placeSubviews(in:proposal:subviews:cache:)()
{
  return specialized _OverlayLayout.placeSubviews(in:proposal:subviews:cache:)();
}

void static _OverlayLayout.layoutProperties.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 258;
  *(unsigned char *)(a1 + 2) = 0;
}

uint64_t _OverlayLayout.sizeThatFits(proposal:subviews:cache:)()
{
  if ((*(unsigned char *)(v0 + 8) & 1) == 0)
  {
    uint64_t v4 = *(void *)v0;
    swift_bridgeObjectRetain();
    uint64_t v1 = LayoutSubviews.endIndex.getter();
    uint64_t result = LayoutSubviews.endIndex.getter();
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v3 = LayoutSubviews.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v1 & 0x8000000000000000) == 0 && v3 >= v1)
      {
        uint64_t result = v4;
        if (v4 < v1)
        {
          LayoutSubviews.subscript.getter();
          return LayoutSubview.sizeThatFits(_:)();
        }
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

void protocol witness for static Layout.layoutProperties.getter in conformance _OverlayLayout(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 258;
  *(unsigned char *)(a1 + 2) = 0;
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance _OverlayLayout()
{
  return _OverlayLayout.sizeThatFits(proposal:subviews:cache:)();
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance _OverlayLayout()
{
  return specialized _OverlayLayout.placeSubviews(in:proposal:subviews:cache:)();
}

void static _OverlayLayout.implicitRoot.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t protocol witness for static _VariadicView_AnyImplicitRoot.visitType<A>(visitor:) in conformance _OverlayLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type _OverlayLayout and conformance _OverlayLayout();

  return MEMORY[0x1F4100360](a1, a4, a2, v8, a3);
}

uint64_t specialized _OverlayLayout.placeSubviews(in:proposal:subviews:cache:)()
{
  swift_bridgeObjectRetain();
  if (LayoutSubviews.endIndex.getter())
  {
    uint64_t v0 = 0;
    while (1)
    {
      LayoutSubviews.subscript.getter();
      uint64_t result = LayoutSubviews.endIndex.getter();
      if (v0 >= result) {
        break;
      }
      ++v0;
      static UnitPoint.topLeading.getter();
      LayoutSubview.place(at:anchor:proposal:)();
      if (v0 == LayoutSubviews.endIndex.getter()) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _OverlayLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _OverlayLayout and conformance _OverlayLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for _VariadicView_ViewRoot in _OverlayLayout()
{
  return &protocol witness table for _OverlayLayout;
}

ValueMetadata *type metadata accessor for _OverlayLayout()
{
  return &type metadata for _OverlayLayout;
}

uint64_t View.accessibilityCustomContent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for [AccessibilityCustomContentEntry](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityCustomContentEntry>, MEMORY[0x1E4FBBE00]);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_18834BB80;
  outlined init with copy of AccessibilityCustomContentEntry(a1, v6 + 32);
  uint64_t v8 = v6;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B58], (uint64_t)&v8, 1, a2, MEMORY[0x1E4F40B58], a3);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;

  uint64_t v4 = a1;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B58], (uint64_t)&v4, 1, a2, MEMORY[0x1E4F40B58], a3);
}

Swift::OpaquePointer_optional __swiftcall AccessibilityNode.accessibilityCustomContent()()
{
  AccessibilityNode.attachment.getter(&v6);
  uint64_t v1 = v6;

  uint64_t v6 = v1;
  AccessibilityProperties.customContentList.getter();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8);
  uint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  id v7 = v2;
  swift_retain();
  swift_retain();
  uint64_t v3 = Array<A>.resolve(in:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)v3;
  result.value._rawuint64_t Value = v5;
  result.is_nil = v4;
  return result;
}

uint64_t View.accessibilityCustomContent(_:_:importance:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  char v13 = *(unsigned char *)(a1 + 48);
  if (a5)
  {
    outlined copy of Text?(a2, a3, a4, a5);
    outlined copy of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
    outlined copy of Text.Storage(v12, v11, v13);
    swift_bridgeObjectRetain();
    v18[0] = a4 & 1;
    AccessibilityCustomContentEntry.init(_:value:importance:)();
  }
  else
  {
    outlined copy of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
    outlined copy of Text.Storage(v12, v11, v13);
    swift_bridgeObjectRetain();
    AccessibilityCustomContentEntry.init(clearing:)();
  }
  View.accessibilityCustomContent(_:)((uint64_t)v18, a7, a8);
  return outlined destroy of AccessibilityCustomContentEntry((uint64_t)v18);
}

uint64_t outlined copy of AccessibilityCustomContentKey.Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0) {
    outlined copy of Text.Storage(a1, a2, a3 & 1);
  }

  return swift_bridgeObjectRetain();
}

uint64_t outlined destroy of AccessibilityCustomContentEntry(uint64_t a1)
{
  return a1;
}

uint64_t View.accessibilityCustomContent(_:_:importance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11 = *(unsigned char *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 16);
  v21[0] = *(_OWORD *)a1;
  v21[1] = v13;
  v21[2] = *(_OWORD *)(a1 + 32);
  char v22 = v11;
  uint64_t v23 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v16 = v15;
  char v18 = v17 & 1;
  View.accessibilityCustomContent(_:_:importance:)((uint64_t)v21, v14, v15, v17 & 1, v19, a6, a7, a8);
  outlined consume of Text.Storage(v14, v16, v18);

  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityCustomContent<A>(_:_:importance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v9) = *(unsigned char *)(v11 + 48);
  uint64_t v12 = *(void *)(v11 + 56);
  long long v13 = *(_OWORD *)(v11 + 16);
  v22[0] = *(_OWORD *)v11;
  v22[1] = v13;
  v22[2] = *(_OWORD *)(v11 + 32);
  char v23 = v9;
  uint64_t v24 = v12;
  (*(void (**)(char *))(v14 + 16))(v10);
  uint64_t v15 = Text.init<A>(_:)();
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  View.accessibilityCustomContent(_:_:importance:)((uint64_t)v22, v15, v16, v18 & 1, v20, a3, a4, a6);
  outlined consume of Text.Storage(v15, v17, v19);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityCustomContent(_:_:importance:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  AccessibilityCustomContentKey.init(_:)();
  uint64_t v11 = v25;
  uint64_t v12 = v26;
  uint64_t v13 = v27;
  uint64_t v15 = v29;
  uint64_t v14 = v30;
  char v16 = v31;
  v22[0] = v25;
  v22[1] = v26;
  v22[2] = v27;
  _OWORD v22[3] = v28;
  v22[4] = v29;
  v22[5] = v30;
  char v23 = v31;
  uint64_t v24 = v32;
  View.accessibilityCustomContent(_:_:importance:)((uint64_t)v22, a5, a6, a7 & 1, a8, a9, a10, a11);
  outlined consume of AccessibilityCustomContentKey.Identifier(v11, v12, v13);
  outlined consume of Text.Storage(v15, v14, v16);

  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of AccessibilityCustomContentKey.Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0) {
    outlined consume of Text.Storage(a1, a2, a3 & 1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityCustomContent(_:_:importance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  View.accessibilityCustomContent(_:_:importance:)(v15, v16, v18 & 1, v20, a5, a6, a7 & 1, a8, a9, a10, a11);
  outlined consume of Text.Storage(v15, v17, v19);

  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityCustomContent(_:_:importance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  char v17 = v16 & 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v18 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v20 = v19;
  char v22 = v21 & 1;
  View.accessibilityCustomContent(_:_:importance:)(v11, v13, v17, v15, v18, v19, v21 & 1, v23, a9, a10, a11);
  outlined consume of Text.Storage(v18, v20, v22);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v11, v13, v17);

  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityCustomContent<A>(_:_:importance:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v27 = a3;
  uint64_t v25 = a6;
  uint64_t v26 = a4;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  char v18 = v17 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, a5);
  uint64_t v19 = Text.init<A>(_:)();
  uint64_t v21 = v20;
  LOBYTE(v9) = v22 & 1;
  View.accessibilityCustomContent(_:_:importance:)(v12, v14, v18, v16, v19, v20, v22 & 1, v23, v27, v26, a7);
  outlined consume of Text.Storage(v19, v21, v9);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v12, v14, v18);
  return swift_bridgeObjectRelease();
}

void View.accessibilityCustomContent<A, B>(_:_:importance:)()
{
}

uint64_t ModifiedContent<>.accessibilityCustomContent(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for [AccessibilityCustomContentEntry](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityCustomContentEntry>, MEMORY[0x1E4FBBE00]);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_18834BB80;
  outlined init with copy of AccessibilityCustomContentEntry(a1, v6 + 32);
  uint64_t v9 = v6;
  unint64_t v7 = lazy protocol witness table accessor for type [AccessibilityCustomContentEntry] and conformance [A]();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40B58], (uint64_t)&v9, 1, a2, MEMORY[0x1E4F40B58], MEMORY[0x1E4F40B50], v7, a3);
  return swift_bridgeObjectRelease();
}

{
  unint64_t v5;
  uint64_t v7;

  unint64_t v7 = a1;
  uint64_t v5 = lazy protocol witness table accessor for type [AccessibilityCustomContentEntry] and conformance [A]();
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40B58], (uint64_t)&v7, 1, a2, MEMORY[0x1E4F40B58], MEMORY[0x1E4F40B50], v5, a3);
}

uint64_t ModifiedContent<>.accessibilityCustomContent(_:_:importance:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v8 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  char v12 = *(unsigned char *)(a1 + 48);
  if (a5)
  {
    outlined copy of Text?(a2, a3, a4, a5);
    outlined copy of AccessibilityCustomContentKey.Identifier(v8, v7, v9);
    outlined copy of Text.Storage(v11, v10, v12);
    swift_bridgeObjectRetain();
    v17[0] = a4 & 1;
    AccessibilityCustomContentEntry.init(_:value:importance:)();
  }
  else
  {
    outlined copy of AccessibilityCustomContentKey.Identifier(v8, v7, v9);
    outlined copy of Text.Storage(v11, v10, v12);
    swift_bridgeObjectRetain();
    AccessibilityCustomContentEntry.init(clearing:)();
  }
  ModifiedContent<>.accessibilityCustomContent(_:)((uint64_t)v17, a6, a7);
  return outlined destroy of AccessibilityCustomContentEntry((uint64_t)v17);
}

uint64_t ModifiedContent<>.accessibilityCustomContent(_:_:importance:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  char v5 = *(unsigned char *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  long long v7 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v7;
  v15[2] = *(_OWORD *)(a1 + 32);
  char v16 = v5;
  uint64_t v17 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  ModifiedContent<>.accessibilityCustomContent(_:_:importance:)((uint64_t)v15, v8, v9, v11 & 1, v13, a2, a3);
  outlined consume of Text.Storage(v8, v10, v12);

  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityCustomContent<A>(_:_:importance:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v5) = *(unsigned char *)(v7 + 48);
  uint64_t v8 = *(void *)(v7 + 56);
  long long v9 = *(_OWORD *)(v7 + 16);
  v18[0] = *(_OWORD *)v7;
  v18[1] = v9;
  v18[2] = *(_OWORD *)(v7 + 32);
  char v19 = v5;
  uint64_t v20 = v8;
  (*(void (**)(char *))(v10 + 16))(v6);
  uint64_t v11 = Text.init<A>(_:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  ModifiedContent<>.accessibilityCustomContent(_:_:importance:)((uint64_t)v18, v11, v12, v14 & 1, v16, a2, a3);
  outlined consume of Text.Storage(v11, v13, v15);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityCustomContent(_:_:importance:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X5>, char a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  AccessibilityCustomContentKey.init(_:)();
  uint64_t v11 = v25;
  uint64_t v12 = v26;
  uint64_t v13 = v27;
  uint64_t v15 = v29;
  uint64_t v14 = v30;
  char v16 = v31;
  v22[0] = v25;
  v22[1] = v26;
  v22[2] = v27;
  _OWORD v22[3] = v28;
  v22[4] = v29;
  v22[5] = v30;
  char v23 = v31;
  uint64_t v24 = v32;
  ModifiedContent<>.accessibilityCustomContent(_:_:importance:)((uint64_t)v22, a4, a5, a6 & 1, a7, a10, a8);
  outlined consume of AccessibilityCustomContentKey.Identifier(v11, v12, v13);
  outlined consume of Text.Storage(v15, v14, v16);

  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityCustomContent(_:_:importance:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, char a3@<W6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  ModifiedContent<>.accessibilityCustomContent(_:_:importance:)(v11, v12, v14 & 1, a1, a2, a3 & 1, a4, a5, a6, a7);
  outlined consume of Text.Storage(v11, v13, v15);

  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityCustomContent(_:_:importance:)@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v3 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v5 = v4;
  char v7 = v6 & 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  ModifiedContent<>.accessibilityCustomContent(_:_:importance:)(v3, v5, v7, v8, v9, v11 & 1, v13, a1, a2, a3);
  outlined consume of Text.Storage(v8, v10, v12);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v3, v5, v7);

  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityCustomContent<A>(_:_:importance:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v25 = a3;
  uint64_t v24 = a4;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  char v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, a5);
  uint64_t v17 = Text.init<A>(_:)();
  uint64_t v19 = v18;
  LOBYTE(v9) = v20 & 1;
  ModifiedContent<>.accessibilityCustomContent(_:_:importance:)(v12, v14, v16, v17, v18, v20 & 1, v21, a6, v25, v24);
  outlined consume of Text.Storage(v17, v19, v9);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v12, v14, v16);
  return swift_bridgeObjectRelease();
}

void ModifiedContent<>.accessibilityCustomContent<A, B>(_:_:importance:)()
{
}

unint64_t lazy protocol witness table accessor for type [AccessibilityCustomContentEntry] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [AccessibilityCustomContentEntry] and conformance [A];
  if (!lazy protocol witness table cache variable for type [AccessibilityCustomContentEntry] and conformance [A])
  {
    type metadata accessor for [AccessibilityCustomContentEntry](255, &lazy cache variable for type metadata for [AccessibilityCustomContentEntry], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AccessibilityCustomContentEntry] and conformance [A]);
  }
  return result;
}

unint64_t type metadata accessor for AXCustomContent()
{
  unint64_t result = lazy cache variable for type metadata for AXCustomContent;
  if (!lazy cache variable for type metadata for AXCustomContent)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AXCustomContent);
  }
  return result;
}

void type metadata accessor for [AccessibilityCustomContentEntry](uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x1E4F41210]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined init with copy of AccessibilityCustomContentEntry(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for WindowSceneConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    char v11 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *char v11 = *v10;
    unint64_t v12 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = *(void *)(v13 + 24);
    swift_retain();
    if (v14 < 0xFFFFFFFF)
    {
      long long v18 = *(_OWORD *)(v13 + 16);
      *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
      *(_OWORD *)(v12 + 16) = v18;
    }
    else
    {
      uint64_t v15 = *(void *)v13;
      uint64_t v16 = *(void *)(v13 + 8);
      char v17 = *(unsigned char *)(v13 + 16);
      outlined copy of Text.Storage(*(void *)v13, v16, v17);
      *(void *)unint64_t v12 = v15;
      *(void *)(v12 + 8) = v16;
      *(unsigned char *)(v12 + 16) = v17;
      *(void *)(v12 + 24) = *(void *)(v13 + 24);
      swift_bridgeObjectRetain();
    }
    uint64_t v19 = (void *)((v12 + 39) & 0xFFFFFFFFFFFFFFF8);
    char v20 = (void *)((v13 + 39) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v19 = *v20;
    unint64_t v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v22 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v21 = *(_OWORD *)v22;
      return v4;
    }
    uint64_t v23 = *(void *)(v22 + 8);
    *(void *)unint64_t v21 = *(void *)v22;
    *(void *)(v21 + 8) = v23;
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for WindowSceneConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *int v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  unint64_t v10 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = *(void *)((v9 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (*(void *)(v10 + 24) < 0xFFFFFFFFuLL)
  {
    if (v12 >= 0xFFFFFFFF)
    {
      uint64_t v19 = *(void *)v11;
      uint64_t v20 = *(void *)(v11 + 8);
      char v21 = *(unsigned char *)(v11 + 16);
      outlined copy of Text.Storage(*(void *)v11, v20, v21);
      *(void *)unint64_t v10 = v19;
      *(void *)(v10 + 8) = v20;
      *(unsigned char *)(v10 + 16) = v21;
      *(void *)(v10 + 24) = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v12 >= 0xFFFFFFFF)
    {
      uint64_t v13 = *(void *)v11;
      uint64_t v14 = *(void *)(v11 + 8);
      char v15 = *(unsigned char *)(v11 + 16);
      outlined copy of Text.Storage(*(void *)v11, v14, v15);
      uint64_t v16 = *(void *)v10;
      uint64_t v17 = *(void *)(v10 + 8);
      char v18 = *(unsigned char *)(v10 + 16);
      *(void *)unint64_t v10 = v13;
      *(void *)(v10 + 8) = v14;
      *(unsigned char *)(v10 + 16) = v15;
      outlined consume of Text.Storage(v16, v17, v18);
      *(void *)(v10 + 24) = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined consume of Text.Storage(*(void *)v10, *(void *)(v10 + 8), *(unsigned char *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  long long v22 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v22;
LABEL_8:
  uint64_t v23 = (void *)((v10 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = (void *)((v11 + 39) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v23 = *v24;
  uint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (unint64_t *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v27 = *v26;
  if (*v25 < 0xFFFFFFFFuLL)
  {
    if (v27 >= 0xFFFFFFFF)
    {
      unint64_t v29 = v26[1];
      *uint64_t v25 = v27;
      v25[1] = v29;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    return a1;
  }
  if (v27 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  unint64_t v28 = v26[1];
  *uint64_t v25 = v27;
  v25[1] = v28;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for WindowSceneConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  unint64_t v9 = (_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v11 = v10[1];
  *unint64_t v9 = *v10;
  v9[1] = v11;
  unint64_t v12 = (void *)(((unint64_t)v9 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v10 + 39) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v12 = *v13;
  unint64_t v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v15 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = *v15;
  if ((unint64_t)*v15 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v17 = v15[1];
    *(void *)unint64_t v14 = v16;
    *(void *)(v14 + 8) = v17;
  }
  return a1;
}

uint64_t assignWithTake for WindowSceneConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  swift_release();
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v9 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(void *)(v10 + 24) >= 0xFFFFFFFFuLL)
    {
      char v11 = *(unsigned char *)(v10 + 16);
      uint64_t v12 = *(void *)v9;
      uint64_t v13 = *(void *)(v9 + 8);
      char v14 = *(unsigned char *)(v9 + 16);
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
      *(unsigned char *)(v9 + 16) = v11;
      outlined consume of Text.Storage(v12, v13, v14);
      *(void *)(v9 + 24) = *(void *)(v10 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined consume of Text.Storage(*(void *)v9, *(void *)(v9 + 8), *(unsigned char *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  long long v15 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v15;
LABEL_6:
  uint64_t v16 = (void *)((v9 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)((v10 + 39) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  char v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (unint64_t *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v20 = *v19;
  if (*v18 < 0xFFFFFFFFuLL)
  {
    if (v20 >= 0xFFFFFFFF)
    {
      unint64_t v22 = v19[1];
      void *v18 = v20;
      v18[1] = v22;
      return a1;
    }
LABEL_12:
    *(_OWORD *)char v18 = *(_OWORD *)v19;
    return a1;
  }
  if (v20 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_12;
  }
  unint64_t v21 = v19[1];
  void *v18 = v20;
  v18[1] = v21;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for WindowSceneConfiguration(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1880D9D0CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for WindowSceneConfiguration(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              *uint64_t v19 = v20;
            }
            else
            {
              char v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1880D9F20);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t TextSelection.range.getter()
{
  uint64_t v1 = MEMORY[0x1E4FBB128];
  uint64_t v2 = MEMORY[0x1E4FBB138];
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, &lazy cache variable for type metadata for RangeSet<String.Index>.Ranges, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC760]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unsigned int v7 = &v21[-v6 - 8];
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, v1, v2, MEMORY[0x1E4FBC788]);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unsigned int v12 = &v21[-v11 - 8];
  uint64_t v13 = type metadata accessor for TextSelection.Indices(0);
  MEMORY[0x1F4188790](v13);
  int v15 = &v21[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of TextSelection.Indices(v0, (uint64_t)v15);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return *(void *)v15;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
  RangeSet.ranges.getter();
  lazy protocol witness table accessor for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges);
  if (dispatch thunk of Collection.isEmpty.getter())
  {
    uint64_t v16 = 0;
  }
  else
  {
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges);
    dispatch thunk of BidirectionalCollection.index(before:)();
    int v17 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v16 = *v18;
    v17(v21, 0);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v16;
}

uint64_t TextSelection.init(range:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for TextSelection.Indices(0);
  swift_storeEnumTagMultiPayload();
  uint64_t result = type metadata accessor for TextSelection(0);
  *((unsigned char *)a3 + *(int *)(result + 20)) = 0;
  return result;
}

uint64_t EnvironmentValues.textSelectionAffinity.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void TextSelection.Indices.hash(into:)()
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)&v11 - v4;
  uint64_t v6 = type metadata accessor for TextSelection.Indices(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (unint64_t *)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of TextSelection.Indices(v0, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, unint64_t *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type RangeSet<String.Index> and conformance <> RangeSet<A>();
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    unint64_t v9 = *v8;
    unint64_t v10 = v8[1];
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v9 >> 14);
    Hasher._combine(_:)(v10 >> 14);
  }
}

Swift::Int TextSelection.Indices.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TextSelection.Indices()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TextSelection.Indices()
{
  return Hasher._finalize()();
}

uint64_t TextSelection.indices.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of TextSelection.Indices(v1, a1);
}

uint64_t TextSelection.indices.setter(uint64_t a1)
{
  return outlined assign with take of TextSelection.Indices(a1, v1);
}

uint64_t (*TextSelection.indices.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t TextSelection.affinity.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for TextSelection(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 20));
  return result;
}

uint64_t TextSelection.init(ranges:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for TextSelection.Indices(0);
  swift_storeEnumTagMultiPayload();
  uint64_t result = type metadata accessor for TextSelection(0);
  *(unsigned char *)(a2 + *(int *)(result + 20)) = 0;
  return result;
}

uint64_t TextSelection.init(insertionPoint:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  a2[1] = a1;
  type metadata accessor for TextSelection.Indices(0);
  swift_storeEnumTagMultiPayload();
  uint64_t result = type metadata accessor for TextSelection(0);
  *((unsigned char *)a2 + *(int *)(result + 20)) = 0;
  return result;
}

BOOL TextSelection.isInsertion.getter()
{
  uint64_t v1 = type metadata accessor for TextSelection.Indices(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (uint64_t *)((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of TextSelection.Indices(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (v3[1] ^ *v3) < 0x4000uLL;
  }
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_3((uint64_t)v3, type metadata accessor for TextSelection.Indices);
  return 0;
}

BOOL static TextSelection.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((specialized static TextSelection.Indices.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for TextSelection(0);
  return *(unsigned __int8 *)(a1 + *(int *)(v4 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(v4 + 20));
}

BOOL static TextSelectionAffinity.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void TextSelection.hash(into:)()
{
  TextSelection.Indices.hash(into:)();
  uint64_t v1 = type metadata accessor for TextSelection(0);
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + *(int *)(v1 + 20)));
}

Swift::Int TextSelection.hashValue.getter()
{
  Hasher.init(_seed:)();
  TextSelection.Indices.hash(into:)();
  uint64_t v1 = type metadata accessor for TextSelection(0);
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + *(int *)(v1 + 20)));
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TextSelection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (specialized static TextSelection.Indices.== infix(_:_:)(a1, a2) & 1) != 0
      && *(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(a3 + 20));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TextSelection(uint64_t a1)
{
  Hasher.init(_seed:)();
  TextSelection.Indices.hash(into:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + *(int *)(a1 + 20)));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TextSelection(uint64_t a1, uint64_t a2)
{
  TextSelection.Indices.hash(into:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + *(int *)(a2 + 20)));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TextSelection(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  TextSelection.Indices.hash(into:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + *(int *)(a2 + 20)));
  return Hasher._finalize()();
}

uint64_t View.textSelectionAffinity(_:)()
{
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.textSelectionAffinity : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.textSelectionAffinity : EnvironmentValues()
{
  return EnvironmentValues.textSelectionAffinity.setter();
}

uint64_t EnvironmentValues.textSelectionAffinity.setter()
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void TextSelectionAffinity.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int TextSelectionAffinity.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t (*EnvironmentValues.textSelectionAffinity.modify(void *a1))(uint64_t *a1)
{
  *a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.textSelectionAffinity.modify;
}

uint64_t EnvironmentValues.textSelectionAffinity.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *((unsigned char *)a1 + 9) = *((unsigned char *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t specialized static TextSelection.Indices.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v26 - v7;
  uint64_t v9 = type metadata accessor for TextSelection.Indices(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (uint64_t *)((char *)&v26 - v13);
  type metadata accessor for (TextSelection.Indices, TextSelection.Indices)();
  MEMORY[0x1F4188790](v15 - 8);
  int v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = &v17[*(int *)(v18 + 56)];
  outlined init with copy of TextSelection.Indices(a1, (uint64_t)v17);
  outlined init with copy of TextSelection.Indices(a2, (uint64_t)v19);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of TextSelection.Indices((uint64_t)v17, (uint64_t)v11);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v19, v5);
      char v20 = static RangeSet.== infix(_:_:)();
      unint64_t v21 = *(void (**)(char *, uint64_t))(v6 + 8);
      v21(v8, v5);
      v21(v11, v5);
LABEL_11:
      uint64_t v24 = type metadata accessor for TextSelection.Indices;
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    char v20 = 0;
    uint64_t v24 = (uint64_t (*)(void))type metadata accessor for (TextSelection.Indices, TextSelection.Indices);
  }
  else
  {
    outlined init with copy of TextSelection.Indices((uint64_t)v17, (uint64_t)v14);
    unint64_t v22 = v14[1];
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v24 = (uint64_t (*)(void))type metadata accessor for (TextSelection.Indices, TextSelection.Indices);
    if (EnumCaseMultiPayload == 1)
    {
      char v20 = 0;
    }
    else
    {
      if ((*(void *)v19 ^ *v14) >> 14
        || (uint64_t v24 = type metadata accessor for TextSelection.Indices, (*((void *)v19 + 1) ^ v22) >= 0x4000))
      {
        char v20 = 0;
        goto LABEL_11;
      }
      char v20 = 1;
    }
  }
LABEL_12:
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_3((uint64_t)v17, v24);
  return v20 & 1;
}

uint64_t outlined init with copy of TextSelection.Indices(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TextSelection.Indices(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type RangeSet<String.Index> and conformance <> RangeSet<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RangeSet<String.Index> and conformance <> RangeSet<A>;
  if (!lazy protocol witness table cache variable for type RangeSet<String.Index> and conformance <> RangeSet<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(255, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RangeSet<String.Index> and conformance <> RangeSet<A>);
  }
  return result;
}

uint64_t outlined assign with take of TextSelection.Indices(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TextSelection.Indices(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1880DB580()
{
  return EnvironmentValues.textSelectionAffinity.setter();
}

uint64_t base witness table accessor for Equatable in TextSelection.Indices()
{
  return lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextSelectionAffinity> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type TextSelection.Indices and conformance TextSelection.Indices, (void (*)(uint64_t))type metadata accessor for TextSelection.Indices);
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextSelectionAffinity> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in TextSelection()
{
  return lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextSelectionAffinity> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type TextSelection and conformance TextSelection, (void (*)(uint64_t))type metadata accessor for TextSelection);
}

unint64_t lazy protocol witness table accessor for type TextSelectionAffinity and conformance TextSelectionAffinity()
{
  unint64_t result = lazy protocol witness table cache variable for type TextSelectionAffinity and conformance TextSelectionAffinity;
  if (!lazy protocol witness table cache variable for type TextSelectionAffinity and conformance TextSelectionAffinity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextSelectionAffinity and conformance TextSelectionAffinity);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TextSelection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for TextSelection(uint64_t a1)
{
  type metadata accessor for TextSelection.Indices(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for TextSelection(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TextSelection.Indices(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithCopy for TextSelection(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_3((uint64_t)a1, type metadata accessor for TextSelection.Indices);
    uint64_t v6 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *initializeWithTake for TextSelection(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TextSelection.Indices(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithTake for TextSelection(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_3((uint64_t)a1, type metadata accessor for TextSelection.Indices);
    uint64_t v6 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for TextSelection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1880DBD38);
}

uint64_t sub_1880DBD38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TextSelection.Indices(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 3) {
      return v10 - 2;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for TextSelection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1880DBE08);
}

uint64_t sub_1880DBE08(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for TextSelection.Indices(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TextSelection.Indices(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t destroy for TextSelection.Indices(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for TextSelection.Indices(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithCopy for TextSelection.Indices(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_3((uint64_t)a1, type metadata accessor for TextSelection.Indices);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void *initializeWithTake for TextSelection.Indices(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for TextSelection.Indices(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_3((uint64_t)a1, type metadata accessor for TextSelection.Indices);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

unsigned char *storeEnumTagSinglePayload for TextSelectionAffinity(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1880DC538);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextSelectionAffinity()
{
  return &type metadata for TextSelectionAffinity;
}

uint64_t sub_1880DC570()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TextSelectionAffinity>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextSelectionAffinity>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextSelectionAffinity>);
    }
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.TextSelectionAffinityKey()
{
  return &type metadata for EnvironmentValues.TextSelectionAffinityKey;
}

uint64_t lazy protocol witness table accessor for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>(255, &lazy cache variable for type metadata for RangeSet<String.Index>.Ranges, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC760]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for (TextSelection.Indices, TextSelection.Indices)()
{
  if (!lazy cache variable for type metadata for (TextSelection.Indices, TextSelection.Indices))
  {
    type metadata accessor for TextSelection.Indices(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (TextSelection.Indices, TextSelection.Indices));
    }
  }
}

uint64_t _s7SwiftUI13TextSelectionV7IndicesOWOhTm_3(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t EnvironmentValues.menuIndicatorVisibility.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.menuIndicatorVisibility.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.menuIndicator(_:)()
{
  return swift_release();
}

uint64_t (*EnvironmentValues.menuIndicatorVisibility.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 9);
  return EnvironmentValues.menuIndicatorVisibility.modify;
}

uint64_t EnvironmentValues.menuIndicatorVisibility.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *((unsigned char *)a1 + 9) = *((unsigned char *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1880DCCFC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.menuIndicatorVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1880DCD28()
{
  return EnvironmentValues.menuIndicatorVisibility.setter();
}

void View.menuIndicatorProminenceReduced(_:)()
{
}

uint64_t sub_1880DCD6C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA04FormE19SizeFittingBehaviorVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>);
}

void *type metadata accessor for MenuIndicatorVisibilityKey()
{
  return &unk_1ED44BB68;
}

void *type metadata accessor for ReducedMenuIndicatorProminence()
{
  return &unk_1ED459918;
}

uint64_t TupleTableColumnContent.init(_:valueType:sortType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t TupleTableColumnContent.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 16))(a2, v2);
}

uint64_t TupleTableColumnContent.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 32) - 8) + 40))(v2, a1);
}

uint64_t (*TupleTableColumnContent.value.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static TupleTableColumnContent._makeContent(content:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  int v39 = *a1;
  uint64_t v14 = *a2;
  int v37 = *((_DWORD *)a2 + 2);
  uint64_t v15 = a2[2];
  uint64_t v16 = a2[6];
  uint64_t v35 = a2[5];
  int v36 = *((_DWORD *)a2 + 20);
  lazy protocol witness table accessor for type TableColumnDescriptor and conformance TableColumnDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  uint64_t v17 = v48[0];
  LODWORD(v48[0]) = v39;
  v48[1] = v14;
  int v49 = v37;
  uint64_t v38 = v16;
  uint64_t v50 = v15;
  long long v51 = *(_OWORD *)(a2 + 3);
  uint64_t v52 = v35;
  uint64_t v53 = v16;
  long long v54 = *(_OWORD *)(a2 + 7);
  uint64_t v55 = a2[9];
  int v56 = v36;
  uint64_t v57 = 0;
  uint64_t v58 = MEMORY[0x1E4FBC860];
  uint64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v19 = v17 + 40;
    do
    {
      v19 += 24;
      uint64_t v57 = AGTupleElementOffset();
      uint64_t v43 = a3;
      uint64_t v44 = a4;
      uint64_t v45 = a5;
      uint64_t v46 = a6;
      uint64_t v47 = a7;
      uint64_t List = type metadata accessor for TupleTableColumnContent.MakeList();
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)v48, List, (uint64_t)&protocol witness table for TupleTableColumnContent<A, B, C>.MakeList);
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
    uint64_t v21 = v58;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v21 = MEMORY[0x1E4FBC860];
  }
  int64_t v22 = *(void *)(v21 + 16);
  if (v22)
  {
    uint64_t v43 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
    uint64_t v23 = v43;
    uint64_t v24 = (_DWORD *)(v21 + 40);
    do
    {
      uint64_t v25 = *((void *)v24 - 1);
      int v26 = *v24;
      uint64_t v43 = v23;
      unint64_t v27 = *(void *)(v23 + 16);
      unint64_t v28 = *(void *)(v23 + 24);
      swift_bridgeObjectRetain();
      if (v27 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v27 + 1, 1);
        uint64_t v23 = v43;
      }
      *(void *)(v23 + 16) = v27 + 1;
      uint64_t v29 = v23 + 16 * v27;
      *(void *)(v29 + 32) = v25;
      *(_DWORD *)(v29 + 40) = v26;
      v24 += 4;
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease();
  }
  PreferencesOutputs.init()();
  uint64_t v41 = v43;
  int v42 = v44;
  uint64_t v40 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    do
    {
      uint64_t v30 = (void (*)(uint64_t *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v30(&v43, 0);
      uint64_t v31 = v40;
      uint64_t v43 = v38;
      swift_bridgeObjectRetain();
      uint64_t v32 = PreferenceKeys.endIndex.getter();
      if (v40 < 0 || v40 >= v32) {
        __break(1u);
      }
      ++v40;
      swift_bridgeObjectRelease();
      static PreferenceKey.visitKey<A>(_:)();
    }
    while (v31 + 1 != PreferenceKeys.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  *(void *)a8 = v41;
  *(_DWORD *)(a8 + 8) = v42;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for TupleTableColumnContent.MakeList()
{
  return swift_getGenericMetadata();
}

uint64_t static TupleTableColumnContent._tableColumnCount(inputs:)(uint64_t *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = a1[6];
  uint64_t v10 = a1[2];
  uint64_t v11 = a1[5];
  int v12 = *((_DWORD *)a1 + 20);
  int v13 = *((_DWORD *)a1 + 2);
  lazy protocol witness table accessor for type TableColumnDescriptor and conformance TableColumnDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  uint64_t v4 = v14;
  uint64_t v14 = v2;
  int v15 = v13;
  uint64_t v16 = v10;
  long long v17 = *(_OWORD *)(a1 + 3);
  uint64_t v18 = v11;
  uint64_t v19 = v3;
  long long v20 = *(_OWORD *)(a1 + 7);
  uint64_t v21 = a1[9];
  int v22 = v12;
  uint64_t v23 = 0;
  char v24 = 0;
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = 40;
    do
    {
      uint64_t v7 = type metadata accessor for TupleTableColumnContent.CountColumns();
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)&v14, v7, (uint64_t)&protocol witness table for TupleTableColumnContent<A, B, C>.CountColumns);
      v6 += 24;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    uint64_t v8 = v23;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v8 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v8;
}

uint64_t TupleTableColumnContent.MakeList.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  LODWORD(v28) = *(_DWORD *)v4;
  uint64_t v8 = *(void *)(a2 + 48);
  long long v9 = *(_OWORD *)(a2 + 32);
  long long v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)int v22 = v9;
  *(void *)&v22[16] = v8;
  type metadata accessor for TupleTableColumnContent();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphValue.init(_:)();
  long long v10 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)&v22[8] = *(_OWORD *)(v4 + 32);
  int v11 = *(_DWORD *)(v4 + 16);
  uint64_t v12 = *(void *)(v4 + 24);
  int v13 = *(_DWORD *)(v4 + 88);
  *(void *)&long long v21 = *(void *)(v4 + 8);
  DWORD2(v21) = v11;
  *(void *)int v22 = v12;
  long long v23 = v10;
  long long v24 = *(_OWORD *)(v4 + 64);
  uint64_t v25 = *(void *)(v4 + 80);
  int v26 = v13;
  (*(void (**)(uint64_t *__return_ptr, char *, long long *, uint64_t, uint64_t))(a4 + 64))(&v28, v27, &v21, a3, a4);
  uint64_t v14 = v28;
  int v15 = v29;
  uint64_t v16 = *(void *)(v4 + 104);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1, (char *)v16);
    uint64_t v16 = result;
  }
  unint64_t v19 = *(void *)(v16 + 16);
  unint64_t v18 = *(void *)(v16 + 24);
  if (v19 >= v18 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, (char *)v16);
    uint64_t v16 = result;
  }
  *(void *)(v16 + 16) = v19 + 1;
  unint64_t v20 = v16 + 16 * v19;
  *(void *)(v20 + 32) = v14;
  *(_DWORD *)(v20 + 40) = v15;
  *(void *)(v5 + 104) = v16;
  return result;
}

uint64_t protocol witness for TableColumnTypeVisitor.visit<A>(type:) in conformance TupleTableColumnContent<A, B, C>.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleTableColumnContent.MakeList.visit<A>(type:)(a1, a4, a2, a3);
}

void TupleTableColumnContent.CountColumns.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (v4[12]) {
    goto LABEL_5;
  }
  uint64_t v5 = v4[11];
  int v6 = *((_DWORD *)v4 + 2);
  uint64_t v7 = v4[2];
  int v8 = *((_DWORD *)v4 + 20);
  uint64_t v14 = *v4;
  int v15 = v6;
  uint64_t v16 = v7;
  long long v9 = *(_OWORD *)(v4 + 5);
  long long v17 = *(_OWORD *)(v4 + 3);
  long long v18 = v9;
  long long v19 = *(_OWORD *)(v4 + 7);
  uint64_t v20 = v4[9];
  int v21 = v8;
  uint64_t v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a4 + 72))(&v14, a3, a4);
  if (v11)
  {
LABEL_5:
    uint64_t v12 = 0;
    char v13 = 1;
    goto LABEL_6;
  }
  uint64_t v12 = v5 + v10;
  if (!__OFADD__(v5, v10))
  {
    char v13 = 0;
LABEL_6:
    v4[11] = v12;
    *((unsigned char *)v4 + 96) = v13;
    return;
  }
  __break(1u);
}

void protocol witness for TableColumnTypeVisitor.visit<A>(type:) in conformance TupleTableColumnContent<A, B, C>.CountColumns(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance TupleTableColumnContent<A, B, C>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return static TupleTableColumnContent._makeContent(content:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a4);
}

uint64_t protocol witness for static TableColumnContent._tableColumnCount(inputs:) in conformance TupleTableColumnContent<A, B, C>(uint64_t *a1)
{
  return static TupleTableColumnContent._tableColumnCount(inputs:)(a1);
}

uint64_t Group<A>.init<A, B>(content:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  v2(v1);
  return Group.init(_content:)();
}

uint64_t static Group<A>._makeContent(content:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  int v10 = *((_DWORD *)a2 + 20);
  LODWORD(v17) = *a1;
  type metadata accessor for Group();
  type metadata accessor for _GraphValue();
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  long long v15 = *(_OWORD *)(a2 + 7);
  long long v16 = *(_OWORD *)(a2 + 5);
  uint64_t v13 = a2[9];
  _GraphValue.subscript.getter();
  uint64_t v17 = v7;
  int v18 = v8;
  uint64_t v19 = v9;
  uint64_t v20 = v11;
  uint64_t v21 = v12;
  long long v22 = v16;
  long long v23 = v15;
  uint64_t v24 = v13;
  int v25 = v10;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(a4 + 64))(v26, &v17, a3, a4);
}

uint64_t protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance <A> Group<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Group<A>._makeContent(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t type metadata accessor for TupleTableColumnContent.CountColumns()
{
  return swift_getGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for TupleTableColumnContent<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for TupleTableColumnContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TupleTableColumnContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t assignWithCopy for TupleTableColumnContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for TupleTableColumnContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for TupleTableColumnContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for TupleTableColumnContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for TupleTableColumnContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 32) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1880DDF88);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for TupleTableColumnContent()
{
  return swift_getGenericMetadata();
}

uint64_t initializeWithCopy for TupleTableColumnContent.CountColumns(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  uint64_t v4 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleTableColumnContent.CountColumns(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  uint64_t v4 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v4;
  return a1;
}

uint64_t assignWithTake for TupleTableColumnContent.CountColumns(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t FocusedValue.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for FocusedValue.Content();

  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for FocusedValue.Content()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.focusedValue<A>(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return View.focusedValue<A>(_:_:)(a1, a2, a3, (uint64_t)partial apply for closure #1 in View.focusedValue<A>(_:_:), a4);
}

{
  return View.focusedSceneValue<A>(_:_:)(a1, a2, a3, (uint64_t)partial apply for closure #1 in View.focusedValue<A>(_:_:), a4);
}

uint64_t View.focusedSceneValue<A>(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return View.focusedValue<A>(_:_:)(a1, a2, a3, (uint64_t)partial apply for closure #1 in View.focusedSceneValue<A>(_:_:), a4);
}

{
  return View.focusedSceneValue<A>(_:_:)(a1, a2, a3, (uint64_t)partial apply for closure #1 in View.focusedSceneValue<A>(_:_:), a4);
}

uint64_t View.focusedValue<A>(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v20 = a5;
  uint64_t v9 = *(void *)(*MEMORY[0x1E4FBBC10] + *a1 + 8);
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](a1);
  int v13 = (char *)v21 - v12;
  (*(void (**)(char *, double))(v10 + 16))((char *)v21 - v12, v11);
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  int v15 = (char *)swift_allocObject();
  *((void *)v15 + 2) = a2;
  *((void *)v15 + 3) = *(void *)(v9 + 16);
  *((void *)v15 + 4) = a3;
  *((void *)v15 + 5) = a1;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v15[v14], v13, v9);
  uint64_t v16 = type metadata accessor for FocusedValueModifier();
  v21[0] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a4, v15, v16, &protocol witness table for FocusedValueModifier<A>);
  v21[1] = v17;
  uint64_t v18 = type metadata accessor for ResponderViewModifier();
  swift_retain();
  MEMORY[0x18C113660](v21, a2, v18, a3);
  return swift_release();
}

uint64_t FocusedValues.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v32 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v30 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v28 = (char *)&v27 - v6;
  uint64_t v7 = type metadata accessor for FocusedValues.Entry();
  uint64_t v31 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12.n128_f64[0] = MEMORY[0x1F4188790](v11);
  unint64_t v14 = (char *)&v27 - v13;
  uint64_t v15 = *(void *)(v7 - 8);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56);
  v16((char *)&v27 - v13, 1, 1, v7, v12);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v16)(v10, 1, 1, v7);
  type metadata accessor for FocusedValuePropertyKey();
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v35 = v14;
  int v36 = v10;
  swift_getWitnessTable();
  PropertyList.forEach<A>(keyType:_:)();
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v17(v10, 1, v7))
  {
    uint64_t v18 = 1;
    int v19 = v17(v14, 1, v7);
    uint64_t v21 = v31;
    uint64_t v20 = v32;
    uint64_t v23 = v29;
    uint64_t v22 = v30;
    if (!v19)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v29 + 16))(v32, &v14[*(int *)(v7 + 36)], v30);
      uint64_t v18 = 0;
    }
  }
  else
  {
    uint64_t v24 = v28;
    uint64_t v23 = v29;
    uint64_t v22 = v30;
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v28, &v10[*(int *)(v7 + 36)], v30);
    uint64_t v20 = v32;
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v32, v24, v22);
    uint64_t v18 = 0;
    uint64_t v21 = v31;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v20, v18, 1, v22);
  int v25 = *(void (**)(char *, uint64_t))(v8 + 8);
  v25(v10, v21);
  return ((uint64_t (*)(char *, uint64_t))v25)(v14, v21);
}

uint64_t FocusedValues.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = type metadata accessor for FocusedValues.Entry();
  uint64_t v8 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v35 = (uint64_t)v32 - v9;
  uint64_t v36 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v14 = (char *)v32 - v13;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)v32 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, a1, v11, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v23(a1, v11);
    return ((uint64_t (*)(char *, uint64_t))v23)(v14, v11);
  }
  else
  {
    uint64_t v33 = a1;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v22, v14, AssociatedTypeWitness);
    char v25 = *(unsigned char *)(v4 + 8);
    v32[0] = a4;
    v32[1] = v4;
    if ((v25 & 2) != 0)
    {
      if (one-time initialization token for scene != -1) {
        swift_once();
      }
      int v26 = &static FocusedValueScope.scene;
    }
    else
    {
      if (one-time initialization token for view != -1) {
        swift_once();
      }
      int v26 = &static FocusedValueScope.view;
    }
    uint64_t v28 = *((void *)v26 + 1);
    uint64_t v27 = *((void *)v26 + 2);
    int v29 = *v26;
    swift_bridgeObjectRetain();
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v22, AssociatedTypeWitness);
    char v30 = v25 & 1;
    uint64_t v31 = v35;
    FocusedValues.Entry.init(scope:value:inFocusedViewHierarchy:)(v29, v28, v27, (uint64_t)v18, v30, v35);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v34 - 8) + 56))(v31, 0, 1);
    type metadata accessor for FocusedValuePropertyKey();
    swift_getWitnessTable();
    PropertyList.subscript.setter();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v33, v11);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v22, AssociatedTypeWitness);
  }
}

void FocusedValues.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t FocusedValue.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FocusedValue.content.getter(a1, (uint64_t (*)(void, void))type metadata accessor for FocusedValue.Content, a2);
}

uint64_t FocusedValue.content.setter(uint64_t a1, uint64_t a2)
{
  return FocusedValue.content.setter(a1, a2, (uint64_t (*)(void, void))type metadata accessor for FocusedValue.Content);
}

uint64_t (*FocusedValue.content.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t FocusedValue.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for FocusedValue.Content();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v13 - v9, v3, v6, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for Optional();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a2, v10, v11);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a2, 1, 1, v5);
  }
}

uint64_t static FocusedValue._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  return specialized static FocusedValue._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, a5);
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance FocusedValue<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  return specialized static FocusedValue._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, *(void *)(a6 + 16));
}

uint64_t FocusedBinding.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FocusedValue.content.getter(a1, (uint64_t (*)(void, void))type metadata accessor for FocusedBinding.Content, a2);
}

uint64_t FocusedValue.content.getter@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void, void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2(0, *(void *)(a1 + 16));
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a3, v3, v5);
}

uint64_t FocusedBinding.content.setter(uint64_t a1, uint64_t a2)
{
  return FocusedValue.content.setter(a1, a2, (uint64_t (*)(void, void))type metadata accessor for FocusedBinding.Content);
}

uint64_t FocusedValue.content.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  uint64_t v5 = a3(0, *(void *)(a2 + 16));
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v3, a1, v5);
}

uint64_t (*FocusedBinding.content.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t FocusedBinding.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for FocusedBinding.Content();

  return swift_storeEnumTagMultiPayload();
}

uint64_t FocusedBinding.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v25 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for FocusedBinding.Content();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  double v8 = (char *)&v24 - v7;
  uint64_t v9 = type metadata accessor for Binding();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v24 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, v3, v5, v15);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v8, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v17, v10);
    uint64_t v18 = *(void *)(v9 - 8);
    int v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v13, 1, v9);
    uint64_t v20 = v25;
    if (v19 == 1)
    {
      uint64_t v21 = *(void (**)(char *, uint64_t))(v11 + 8);
      v21(v17, v10);
      v21(v13, v10);
      uint64_t v22 = 1;
    }
    else
    {
      MEMORY[0x18C113DA0](v9);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v9);
      uint64_t v22 = 0;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v22 = 1;
    uint64_t v20 = v25;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v20, v22, 1, v4);
}

uint64_t key path setter for FocusedBinding.wrappedValue : <A>FocusedBinding<A>(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  double v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v9 - v4;
  (*(void (**)(char *, uint64_t, double))(v6 + 16))((char *)&v9 - v4, a1, v3);
  uint64_t v7 = type metadata accessor for FocusedBinding();
  return FocusedBinding.wrappedValue.setter((uint64_t)v5, v7);
}

uint64_t FocusedBinding.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a1;
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v34 = (char *)&v32 - v5;
  uint64_t v35 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v6);
  double v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FocusedBinding.Content();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v32 - v11;
  uint64_t v13 = type metadata accessor for Binding();
  uint64_t v36 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  int v39 = (char *)&v32 - v19;
  (*(void (**)(char *, char *, uint64_t, double))(v10 + 16))(v12, v38, v9, v18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v38 = v16;
    uint64_t v20 = v14;
    uint64_t v21 = v36;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v39, v12, v36);
    uint64_t v22 = v34;
    uint64_t v23 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v34, v37, v3);
    uint64_t v24 = v35;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v22, 1, v2) == 1)
    {
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
      v25(v23, v3);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v39, v21);
      return ((uint64_t (*)(char *, uint64_t))v25)(v22, v3);
    }
    else
    {
      uint64_t v33 = v4;
      uint64_t v27 = v8;
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v8, v22, v2);
      uint64_t v28 = v38;
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v38, v39, v21);
      uint64_t v29 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v28, 1, v13) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v23, v3);
        (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v2);
        char v30 = *(void (**)(char *, uint64_t))(v20 + 8);
        uint64_t v31 = v36;
        v30(v39, v36);
        return ((uint64_t (*)(char *, uint64_t))v30)(v28, v31);
      }
      else
      {
        specialized Binding.wrappedValue.setter();
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v23, v3);
        (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v2);
        (*(void (**)(char *, uint64_t))(v20 + 8))(v39, v36);
        return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v28, v13);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v37, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

void (*FocusedBinding.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = type metadata accessor for Optional();
  _OWORD v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  FocusedBinding.wrappedValue.getter(a2, (uint64_t)v9);
  return FocusedBinding.wrappedValue.modify;
}

void FocusedBinding.wrappedValue.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  if (a2)
  {
    uint64_t v5 = v2[2];
    uint64_t v6 = v2[3];
    uint64_t v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    FocusedBinding.wrappedValue.setter((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    FocusedBinding.wrappedValue.setter((*a1)[5], *v2);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t FocusedBinding.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v35 = *(void *)(v3 - 8);
  uint64_t v36 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v34 = (char *)&v31 - v4;
  uint64_t v5 = type metadata accessor for Binding();
  uint64_t v32 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = type metadata accessor for FocusedBinding.Content();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v31 - v13;
  uint64_t v33 = v5;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  double v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v31 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, v38, v11, v20);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    goto LABEL_5;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v22, v14, v15);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, v22, v15);
  uint64_t v23 = v32;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v18, 1, v33) == 1)
  {
    uint64_t v24 = *(void (**)(char *, uint64_t))(v16 + 8);
    v24(v22, v15);
    v24(v18, v15);
LABEL_5:
    uint64_t v25 = v34;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v34, 1, 1, v2);
    uint64_t v26 = v36;
    static Binding.constant(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v25, v26);
  }
  uint64_t v28 = v10;
  uint64_t v29 = v10;
  uint64_t v30 = v33;
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v29, v18, v33);
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v7, v28, v30);
  Binding.init<A>(_:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v28, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v22, v15);
}

uint64_t static FocusedBinding._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return specialized static FocusedBinding._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4);
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance FocusedBinding<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return specialized static FocusedBinding._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4);
}

uint64_t FocusedValueBox.update(property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v70 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  v69 = &v60[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 4];
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  v66 = &v60[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 4];
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = &v60[-v11 - 4];
  MEMORY[0x1F4188790](v13);
  v71 = &v60[-v14 - 4];
  uint64_t v15 = type metadata accessor for FocusedValue.Content();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (uint64_t *)&v60[-v18 - 4];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v16 + 16))(&v60[-v18 - 4], a1, v15, v17);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v64 = v8;
    uint64_t v68 = v7;
    uint64_t v21 = *v19;
    int v22 = *(_DWORD *)(v72 + 4);
    int v23 = *MEMORY[0x1E4F4E7A0];
    uint64_t v65 = a1;
    uint64_t v67 = a3;
    if (v22 == v23)
    {
      *(void *)v60 = 0;
      LODWORD(v61) = 0;
      uint64_t v33 = 0;
    }
    else
    {
      uint64_t Value = AGGraphGetValue();
      char v26 = v25;
      uint64_t v27 = *(void *)Value;
      int v28 = *(unsigned __int8 *)(Value + 8);
      int v29 = *(_DWORD *)(Value + 12);
      swift_retain();
      if (v27 == 1) {
        int v30 = 0;
      }
      else {
        int v30 = v26 & 1;
      }
      if (v27 == 1) {
        int v31 = 0;
      }
      else {
        int v31 = v29;
      }
      LODWORD(v61) = v31;
      if (v27 == 1) {
        int v32 = 0;
      }
      else {
        int v32 = v28;
      }
      *(_DWORD *)v60 = v30;
      *(_DWORD *)&v60[4] = v32;
      if (v27 == 1) {
        uint64_t v33 = 0;
      }
      else {
        uint64_t v33 = v27;
      }
    }
    uint64_t v34 = v72;
    uint64_t v35 = (uint64_t *)AGGraphGetValue();
    uint64_t v38 = *v35;
    uint64_t v37 = v35[1];
    uint64_t v39 = *(void *)(v34 + 8);
    uint64_t v74 = v21;
    uint64_t v62 = v38;
    uint64_t v63 = v37;
    if (v39)
    {
      uint64_t v59 = v36;
      uint64_t v73 = v39;
      type metadata accessor for KeyPath();
      swift_retain();
      swift_retain_n();
      swift_retain();
      char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      swift_release();
      uint64_t v41 = v67;
      if (v40)
      {
        if (((v59 | *(_DWORD *)v60) & 1) == 0)
        {
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          uint64_t v20 = 0;
          uint64_t v42 = v68;
          uint64_t v43 = v64;
LABEL_29:
          uint64_t v57 = v65;
          (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v65, v15);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v57, v72 + *(int *)(v41 + 36), v42);
          swift_storeEnumTagMultiPayload();
          return v20;
        }
LABEL_23:
        uint64_t v74 = v33;
        char v75 = v60[4];
        int v76 = v61;
        swift_retain();
        swift_getAtKeyPath();
        swift_release();
        uint64_t v44 = v64;
        uint64_t v45 = *(void (**)(unsigned char *))(v64 + 16);
        uint64_t v61 = v72 + *(int *)(v41 + 36);
        uint64_t v42 = v68;
        v45(v12);
        uint64_t v46 = v70;
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v70 + 48))(v12, 1, v5) == 1)
        {
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          (*(void (**)(unsigned char *, uint64_t))(v44 + 8))(v12, v42);
          uint64_t v43 = v44;
        }
        else
        {
          uint64_t v47 = *(void (**)(void))(v46 + 32);
          *(void *)&v60[4] = v33;
          char v48 = v69;
          v47();
          uint64_t v49 = (uint64_t)v66;
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v46 + 16))(v66, v48, v5);
          uint64_t v50 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 56))(v49, 0, 1, v5);
          MEMORY[0x1F4188790](v50);
          long long v51 = v71;
          *(&v59 - 4) = v42;
          *(&v59 - 3) = (uint64_t)v51;
          *((_DWORD *)&v59 - 4) = 3;
          _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v49, (uint64_t)closure #1 in compareValues<A>(_:_:options:)partial apply, (uint64_t)(&v59 - 6), v42, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBC278], v52);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          int v53 = v74;
          long long v54 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
          uint64_t v55 = v49;
          uint64_t v41 = v67;
          v54(v55, v42);
          (*(void (**)(unsigned char *, uint64_t))(v70 + 8))(v69, v5);
          BOOL v56 = v53 == 1;
          uint64_t v43 = v44;
          if (v56)
          {
            v54((uint64_t)v71, v42);
            uint64_t v20 = 0;
            goto LABEL_29;
          }
        }
        (*(void (**)(uint64_t, unsigned char *, uint64_t))(v43 + 40))(v61, v71, v42);
        uint64_t v20 = 1;
        goto LABEL_29;
      }
    }
    else
    {
      swift_retain();
      swift_retain();
      uint64_t v41 = v67;
    }
    swift_retain();
    swift_release();
    *(void *)(v72 + 8) = v21;
    goto LABEL_23;
  }
  (*(void (**)(uint64_t *, uint64_t))(v16 + 8))(v19, v15);
  return 0;
}

uint64_t View.focusedSceneValue<A>(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v8 = *(void *)(*(void *)(*MEMORY[0x1E4FBBC10] + *a1 + 8) + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v19 - v11;
  (*(void (**)(char *, double))(v9 + 16))((char *)&v19 - v11, v10);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = a2;
  *((void *)v14 + 3) = v8;
  *((void *)v14 + 4) = a3;
  *((void *)v14 + 5) = a1;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v14[v13], v12, v8);
  uint64_t v15 = type metadata accessor for FocusedValueModifier();
  v22[0] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v20, v14, v15, &protocol witness table for FocusedValueModifier<A>);
  v22[1] = v16;
  uint64_t v17 = type metadata accessor for ResponderViewModifier();
  swift_retain();
  MEMORY[0x18C113660](v22, a2, v17, a3);
  return swift_release();
}

uint64_t FocusedValueModifier.init(keyPath:value:responder:isSceneValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  *a5 = a1;
  uint64_t v9 = (int *)type metadata accessor for FocusedValueModifier();
  double v10 = (char *)a5 + v9[7];
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10, a2, v11);
  *(void *)((char *)a5 + v9[8]) = a3;
  *((unsigned char *)a5 + v9[9]) = a4;
  return result;
}

uint64_t partial apply for closure #1 in View.focusedValue<A>(_:_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return partial apply for closure #1 in View.focusedValue<A>(_:_:)(a1, 0, a2);
}

{
  return partial apply for closure #1 in View.focusedSceneValue<A>(_:_:)(a1, 0, a2);
}

uint64_t type metadata accessor for FocusedValueModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in View.focusedValue<A>(_:_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, char a4@<W5>, void *a5@<X8>)
{
  uint64_t v10 = *(void *)(*MEMORY[0x1E4FBBC10] + *a2 + 8);
  uint64_t v11 = type metadata accessor for Optional();
  v12.n128_f64[0] = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v18 - v13;
  uint64_t v15 = *(void *)(v10 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16))((char *)&v18 - v13, a3, v15, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v14, 0, 1, v10);
  FocusedValueModifier.init(keyPath:value:responder:isSceneValue:)((uint64_t)a2, (uint64_t)v14, a1, a4, a5);
  swift_retain();
  return swift_retain();
}

{
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  uint64_t v10 = *(void *)(*MEMORY[0x1E4FBBC10] + *a2 + 8);
  uint64_t v11 = type metadata accessor for Optional();
  v12.n128_f64[0] = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v17 - v13;
  uint64_t v15 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))((char *)&v17 - v13, a3, v10, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v14, 0, 1, v10);
  FocusedValueModifier.init(keyPath:value:responder:isSceneValue:)((uint64_t)a2, (uint64_t)v14, a1, a4, a5);
  swift_retain();
  return swift_retain();
}

uint64_t partial apply for closure #1 in View.focusedSceneValue<A>(_:_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return partial apply for closure #1 in View.focusedValue<A>(_:_:)(a1, 1, a2);
}

{
  return partial apply for closure #1 in View.focusedSceneValue<A>(_:_:)(a1, 1, a2);
}

uint64_t partial apply for closure #1 in View.focusedValue<A>(_:_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v7 = *(void *)(type metadata accessor for Optional() - 8);
  return closure #1 in View.focusedValue<A>(_:_:)(a1, *(void **)(v3 + 40), v3 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), a2, a3);
}

uint64_t type metadata accessor for FocusedValues.Entry()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FocusedValuePropertyKey()
{
  return __swift_instantiateGenericMetadata();
}

void FocusedValueModifier.Transform.focusItem.getter(uint64_t a1@<X8>)
{
  if (*(_DWORD *)(v1 + 8) == *MEMORY[0x1E4F4E7A0])
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(int64x2_t *)(a1 + 40) = vdupq_n_s64(1uLL);
    *(_DWORD *)(a1 + 56) = 0;
  }
  else
  {
    type metadata accessor for FocusItem?();
    uint64_t Value = AGGraphGetValue();
    outlined init with copy of FocusItem?(Value, a1);
  }
}

uint64_t FocusedValueModifier.Transform.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  v98[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v91 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  v84 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  v83 = (char *)&v72 - v8;
  MEMORY[0x1F4188790](v9);
  v85 = (char *)&v72 - v10;
  uint64_t v92 = v4;
  uint64_t v11 = type metadata accessor for FocusedValueModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  v89 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v86 = (char *)&v72 - v15;
  MEMORY[0x1F4188790](v16);
  v93 = (char *)&v72 - v17;
  uint64_t v88 = v18;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v72 - v20;
  uint64_t Value = AGGraphGetValue();
  char v24 = v23;
  v94 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v94(v21, Value, v11);
  int v25 = *(_DWORD *)(v1 + 16);
  int v26 = *(unsigned __int8 *)(v2 + 20);
  int v27 = *(_DWORD *)AGGraphGetValue() >> 1;
  int v90 = v26 | (v25 != v27);
  if (v26 & 1 | (v25 != v27))
  {
    *(_DWORD *)(v2 + 16) = v27;
    *(unsigned char *)(v2 + 20) = 0;
    *(_DWORD *)(v2 + *(int *)(v3 + 60)) = 0;
    *(_DWORD *)(v2 + *(int *)(v3 + 64)) = 0;
  }
  uint64_t v28 = *(int *)(v3 + 60);
  int v29 = *(_DWORD *)(v2 + v28);
  int v30 = *(_DWORD *)AGGraphGetValue();
  if (v29 == v30)
  {
    uint64_t v31 = *(int *)(v3 + 64);
    int v32 = *(_DWORD *)(v2 + v31);
    if (!v32 || (int v33 = v32 - 1, (*(_DWORD *)(v2 + v31) = v33) == 0))
    {
      type metadata accessor for (_:)();
      if (AGGraphGetOutputValue()) {
        return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v21, v11);
      }
    }
  }
  else
  {
    *(_DWORD *)(v2 + v28) = v30;
    *(_DWORD *)(v2 + *(int *)(v3 + 64)) = 2;
  }
  uint64_t v35 = (char *)v5;
  uint64_t v36 = v93;
  uint64_t v37 = v94;
  v94(v93, (uint64_t)v21, v11);
  uint64_t v87 = v12 + 16;
  if ((v24 & 1) == 0)
  {
    v93 = *(char **)(v12 + 8);
    ((void (*)(char *, uint64_t))v93)(v36, v11);
    uint64_t v38 = (void (*)(char *, char *, uint64_t))v37;
LABEL_16:
    FocusedValueModifier.Transform.focusItem.getter((uint64_t)v95);
    if (v96 == 1 && v97 == 1)
    {
      outlined destroy of FocusItem??((uint64_t)v95);
    }
    else
    {
      outlined init with take of FocusItem?((uint64_t)v95, (uint64_t)v98);
      if (v98[5] || v98[6] != 1)
      {
        uint64_t v62 = swift_retain();
        char v63 = FocusItem.inFocusedResponderChain(_:)(v62);
        swift_release();
        outlined destroy of FocusItem((uint64_t)v98);
        uint64_t v60 = *(int *)(v3 + 56);
        int v61 = *(unsigned __int8 *)(v2 + v60);
        if ((v63 & 1) != v61)
        {
          LOBYTE(v61) = v63;
          goto LABEL_27;
        }
LABEL_28:
        if ((v90 & 1) == 0)
        {
          type metadata accessor for (_:)();
          if (AGGraphGetOutputValue()) {
            return ((uint64_t (*)(char *, uint64_t))v93)(v21, v11);
          }
        }
        goto LABEL_30;
      }
      outlined destroy of FocusItem?((uint64_t)v98);
    }
    uint64_t v60 = *(int *)(v3 + 56);
    if (*(unsigned char *)(v2 + v60))
    {
      LOBYTE(v61) = 0;
LABEL_27:
      *(unsigned char *)(v2 + v60) = v61 & 1;
LABEL_30:
      DisplayList.Version.init(forUpdate:)();
      uint64_t v64 = v98[0];
      uint64_t v65 = v89;
      v38(v89, v21, v11);
      v66 = v21;
      unint64_t v67 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      uint64_t v68 = v67 + v88;
      uint64_t v69 = swift_allocObject();
      uint64_t v70 = v92;
      *(void *)(v69 + 16) = *(void *)(v3 + 16);
      *(void *)(v69 + 24) = v70;
      (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v69 + v67, v65, v11);
      *(unsigned char *)(v69 + v68) = v61 & 1;
      uint64_t v71 = swift_allocObject();
      *(void *)(v71 + 16) = v64;
      *(unsigned char *)(v71 + 24) = v61 & 1;
      uint64_t v21 = v66;
      *(void *)(v71 + 32) = partial apply for closure #1 in FocusedValueModifier.Transform.updateValue();
      *(void *)(v71 + 40) = v69;
      v98[0] = partial apply for closure #2 in FocusedValueModifier.Transform.updateValue();
      v98[1] = v71;
      type metadata accessor for (_:)();
      AGGraphSetOutputValue();
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v93)(v21, v11);
    }
    LOBYTE(v61) = 0;
    goto LABEL_28;
  }
  uint64_t v77 = v21;
  uint64_t v79 = v12;
  uint64_t v78 = v3;
  uint64_t v39 = v2 + *(int *)(v3 + 52);
  uint64_t v40 = v91;
  uint64_t v81 = v11;
  uint64_t v41 = *(void (**)(char *, uint64_t, char *))(v91 + 16);
  uint64_t v42 = v85;
  uint64_t v82 = v39;
  int v76 = v41;
  ((void (*)(char *))v41)(v85);
  uint64_t v43 = v92;
  uint64_t v72 = *(void *)(v92 - 8);
  char v75 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v72 + 48);
  int v80 = v75(v42, 1, v92);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
  uint64_t v45 = v42;
  uint64_t v46 = v81;
  v85 = v35;
  uint64_t v74 = v40 + 8;
  uint64_t v73 = v44;
  v44((uint64_t)v45, (uint64_t)v35);
  uint64_t v47 = v86;
  v37(v86, (uint64_t)v36, v46);
  if (v80 == 1)
  {
    uint64_t v12 = v79;
    char v48 = *(void (**)(char *, uint64_t))(v79 + 8);
    v48(v47, v46);
    uint64_t v49 = v93;
    v93 = (char *)v48;
    v48(v49, v46);
    uint64_t v3 = v78;
    uint64_t v21 = v77;
    uint64_t v38 = (void (*)(char *, char *, uint64_t))v94;
    uint64_t v50 = (uint64_t)v85;
    uint64_t v11 = v46;
    goto LABEL_15;
  }
  long long v51 = v84;
  uint64_t v50 = (uint64_t)v85;
  v76(v84, v82, v85);
  uint64_t result = v75(v51, 1, v43);
  if (result != 1)
  {
    uint64_t v52 = v72;
    uint64_t v53 = (uint64_t)v83;
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v83, v51, v43);
    uint64_t v54 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v52 + 56))(v53, 0, 1, v43);
    uint64_t v11 = v46;
    MEMORY[0x1F4188790](v54);
    *(&v72 - 4) = v50;
    *(&v72 - 3) = v55;
    *((_DWORD *)&v72 - 4) = 3;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v53, (uint64_t)_s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0, (uint64_t)(&v72 - 6), v50, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBC278], v56);
    char v57 = v98[0];
    v73(v53, v50);
    uint64_t v12 = v79;
    uint64_t v58 = *(void (**)(char *, uint64_t))(v79 + 8);
    v58(v47, v11);
    uint64_t v59 = v93;
    v93 = (char *)v58;
    v58(v59, v11);
    uint64_t v3 = v78;
    uint64_t v21 = v77;
    uint64_t v38 = (void (*)(char *, char *, uint64_t))v94;
    if (v57) {
      goto LABEL_16;
    }
LABEL_15:
    (*(void (**)(uint64_t, char *, uint64_t))(v91 + 24))(v82, &v21[*(int *)(v11 + 28)], v50);
    int v90 = 1;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in FocusedValueModifier.Transform.updateValue()(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int v23 = a3;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v22[-v10];
  uint64_t v12 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = &v22[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = &v22[-v17];
  uint64_t v19 = type metadata accessor for FocusedValueModifier();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, a2 + *(int *)(v19 + 28), v8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a5) == 1) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 32))(v18, v11, a5);
  if (*(unsigned char *)(a2 + *(int *)(v19 + 36))) {
    char v21 = 2;
  }
  else {
    char v21 = 0;
  }
  *(unsigned char *)(a1 + 8) = v21 & 0xFE | v23 & 1;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 16))(v15, v18, a5);
  swift_setAtWritableKeyPath();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 8))(v18, a5);
}

uint64_t closure #2 in FocusedValueModifier.Transform.updateValue()(uint64_t *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a1;
  swift_retain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1, (char *)v10);
    uint64_t v10 = result;
  }
  unint64_t v13 = *(void *)(v10 + 16);
  unint64_t v12 = *(void *)(v10 + 24);
  if (v13 >= v12 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, (char *)v10);
    uint64_t v10 = result;
  }
  *(void *)(v10 + 16) = v13 + 1;
  unint64_t v14 = v10 + 32 * v13;
  *(void *)(v14 + 32) = a2;
  *(unsigned char *)(v14 + 40) = a3 & 1;
  *(void *)(v14 + 48) = a4;
  *(void *)(v14 + 56) = a5;
  *a1 = v10;
  return result;
}

uint64_t FocusedValueModifier.Transform.init(viewPhase:modifier:focusItem:updateSeed:resetSeed:content:isFocused:lastUpdateSeed:ttl:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10)
{
  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(_DWORD *)(a9 + 12) = a4;
  *(_DWORD *)(a9 + 16) = a5;
  *(unsigned char *)(a9 + 20) = BYTE4(a5) & 1;
  unint64_t v14 = (int *)type metadata accessor for FocusedValueModifier.Transform();
  uint64_t v15 = a9 + v14[13];
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v15, a6, v16);
  *(unsigned char *)(a9 + v14[14]) = a7;
  *(_DWORD *)(a9 + v14[15]) = a8;
  *(_DWORD *)(a9 + v14[16]) = a10;
  return result;
}

double static FocusedValueModifier._makeView(modifier:inputs:body:)@<D0>(long long *a1@<X1>, void (*a2)(uint64_t *__return_ptr)@<X2>, double *a3@<X8>)
{
  long long v4 = a1[3];
  long long v5 = a1[1];
  long long v15 = a1[2];
  long long v16 = v4;
  long long v6 = a1[3];
  long long v17 = a1[4];
  long long v7 = a1[1];
  long long v13 = *a1;
  long long v14 = v7;
  v9[2] = v15;
  v9[3] = v6;
  v9[4] = a1[4];
  int v18 = *((_DWORD *)a1 + 20);
  int v10 = *((_DWORD *)a1 + 20);
  v9[0] = v13;
  v9[1] = v5;
  a2(&v11);
  *(void *)&v9[0] = v16;
  DWORD2(v9[0]) = DWORD2(v16);
  outlined retain of [Text.Modifier]((uint64_t)v9);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  *(void *)a3 = v11;
  double result = v12;
  a3[1] = v12;
  return result;
}

uint64_t implicit closure #1 in static FocusedValueModifier._makeView(modifier:inputs:body:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v40 = (char *)&v31 - v7;
  uint64_t v41 = type metadata accessor for FocusedValueModifier.Transform();
  uint64_t v42 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41);
  uint64_t v39 = (uint64_t)&v31 - v8;
  long long v9 = *(_OWORD *)(a1 + 48);
  v47[1] = *(_OWORD *)(a1 + 32);
  v47[2] = v9;
  long long v48 = *(_OWORD *)(a1 + 64);
  LODWORD(v49) = *(_DWORD *)(a1 + 80);
  long long v10 = *(_OWORD *)(a1 + 16);
  long long v46 = *(_OWORD *)a1;
  v47[0] = v10;
  int v38 = _ViewInputs.viewPhase.getter();
  LODWORD(v46) = a2;
  type metadata accessor for FocusedValueModifier();
  type metadata accessor for _GraphValue();
  int v37 = _GraphValue.value.getter();
  long long v11 = *(_OWORD *)(a1 + 16);
  v52[0] = *(_OWORD *)a1;
  v52[1] = v11;
  v52[2] = *(_OWORD *)(a1 + 32);
  outlined retain of _ViewInputs(a1);
  outlined retain of _GraphInputs((uint64_t)v52);
  lazy protocol witness table accessor for type FocusedItemInputKey and conformance FocusedItemInputKey();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v52);
  outlined release of _ViewInputs(a1);
  int v36 = v46;
  type metadata accessor for GraphHost();
  uint64_t v12 = MEMORY[0x18C114840]();
  swift_beginAccess();
  long long v13 = *(void **)(v12 + 16);
  long long v14 = *(void **)(v12 + 24);
  long long v15 = *(void **)(v12 + 32);
  char v16 = *(unsigned char *)(v12 + 40);
  int v32 = *(unsigned __int8 *)(v12 + 41);
  int v34 = *(_DWORD *)(v12 + 68);
  uint64_t v17 = *(void *)(v12 + 72);
  int v33 = *(_DWORD *)(v12 + 80);
  uint64_t v18 = *(void *)(v12 + 88);
  uint64_t v19 = *(void *)(v12 + 112);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v35 = v13;
  id v20 = v14;
  id v21 = v15;
  long long v31 = *(_OWORD *)(v12 + 44);
  uint64_t v22 = *(void *)(v12 + 60);
  uint64_t v23 = *(void *)(v12 + 96);
  uint64_t v24 = *(void *)(v12 + 104);
  swift_release();
  *(void *)&long long v46 = v13;
  *((void *)&v46 + 1) = v20;
  *(void *)&v47[0] = v21;
  BYTE8(v47[0]) = v16;
  BYTE9(v47[0]) = v32;
  *(_OWORD *)((char *)v47 + 12) = v31;
  *(void *)((char *)&v47[1] + 12) = v22;
  DWORD1(v47[2]) = v34;
  *((void *)&v47[2] + 1) = v17;
  LODWORD(v48) = v33;
  *((void *)&v48 + 1) = v18;
  uint64_t v49 = v23;
  uint64_t v50 = v24;
  uint64_t v51 = v19;
  LODWORD(v12) = GraphHost.Data.$updateSeed.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  uint64_t v25 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v40, 1, 1, a3);
  LOBYTE(v46) = 1;
  uint64_t v26 = v39;
  FocusedValueModifier.Transform.init(viewPhase:modifier:focusItem:updateSeed:resetSeed:content:isFocused:lastUpdateSeed:ttl:)(v38, v37, v36, v12, 0x100000000, v25, 0, -1, v39, 0);
  uint64_t v27 = v41;
  uint64_t v44 = v41;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<(_:)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v26, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_27, (uint64_t)v43, v27, MEMORY[0x1E4FBC248], v28, MEMORY[0x1E4FBC278], v29);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v26, v27);
  return v46;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance FocusedValueModifier<A>@<D0>(long long *a1@<X1>, void (*a2)(uint64_t *__return_ptr)@<X2>, double *a3@<X8>)
{
  return static FocusedValueModifier._makeView(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance FocusedValueModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FocusedValueList.Key(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v4);
  uint64_t result = specialized Array.append<A>(contentsOf:)(*a1);
  *a1 = v4;
  return result;
}

uint64_t FocusedValues.Entry.init(scope:value:inFocusedViewHierarchy:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(_DWORD *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  uint64_t v9 = type metadata accessor for FocusedValues.Entry();
  uint64_t v10 = a6 + *(int *)(v9 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v10, a4, AssociatedTypeWitness);
  *(unsigned char *)(a6 + *(int *)(v9 + 40)) = a5;
  return result;
}

uint64_t closure #1 in FocusedValues.subscript.getter(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v38 = a4;
  uint64_t v40 = a3;
  uint64_t v5 = type metadata accessor for FocusedValues.Entry();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v39 = &v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v9);
  long long v11 = &v31[-v10];
  uint64_t v12 = *(void *)(v5 - 8);
  double v14 = MEMORY[0x1F4188790](v13);
  char v16 = &v31[-v15];
  uint64_t v17 = *(void (**)(unsigned char *, uint64_t, uint64_t, double))(v7 + 16);
  v17(v11, a1, v6, v14);
  uint64_t v18 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48);
  if (v18(v11, 1, v5) == 1) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v11, v6);
  }
  uint64_t v37 = v12;
  id v21 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v12 + 32);
  uint64_t v20 = v12 + 32;
  int v34 = v21;
  uint64_t v35 = v6;
  v21((uint64_t)v16, v11, v5);
  int v22 = *(_DWORD *)v16;
  uint64_t v23 = one-time initialization token for scene;
  uint64_t v36 = *((void *)v16 + 2);
  swift_bridgeObjectRetain();
  if (v23 != -1) {
    swift_once();
  }
  uint64_t v24 = v40;
  if (static FocusedValueScope.scene == v22)
  {
    int v32 = v22;
    uint64_t v33 = v20;
    uint64_t v25 = v39;
    uint64_t v26 = v35;
    ((void (*)(unsigned char *, unsigned char *, uint64_t))v17)(v39, v40, v35);
    if (v18(v25, 1, v5) == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v27 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
      v27(v25, v26);
      v27(v24, v26);
      v34((uint64_t)v24, v16, v5);
      return (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(v37 + 56))(v24, 0, 1, v5);
    }
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v25, v26);
    int v22 = v32;
  }
  if (one-time initialization token for view != -1) {
    swift_once();
  }
  int v28 = static FocusedValueScope.view;
  swift_bridgeObjectRelease();
  uint64_t v29 = v37;
  if (v28 != v22 || v16[*(int *)(v5 + 40)] != 1) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v37 + 8))(v16, v5);
  }
  uint64_t v30 = v38;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v38, v35);
  v34(v30, v16, v5);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v30, 0, 1, v5);
}

uint64_t partial apply for closure #1 in FocusedValues.subscript.getter(uint64_t a1, uint64_t a2)
{
  return closure #1 in FocusedValues.subscript.getter(a1, a2, *(unsigned char **)(v2 + 32), *(void *)(v2 + 40));
}

void (*FocusedValues.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, uint64_t a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  v9[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  _OWORD v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  uint64_t v13 = malloc(v12);
  v9[7] = v13;
  FocusedValues.subscript.getter(a3, a4, (uint64_t)v13);
  return FocusedValues.subscript.modify;
}

void FocusedValues.subscript.modify(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[6];
  uint64_t v4 = (void *)(*a1)[7];
  if (a2)
  {
    uint64_t v5 = v2[4];
    uint64_t v6 = v2[5];
    uint64_t v7 = v2[2];
    uint64_t v8 = v2[1];
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    FocusedValues.subscript.setter((uint64_t)v3, v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    FocusedValues.subscript.setter((*a1)[7], a2, v2[1], v2[2]);
  }
  free(v4);
  free(v3);

  free(v2);
}

BOOL static FocusedValues.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 12);
  int v3 = *(_DWORD *)(a2 + 12);
  return v2 != -1 && v3 != -1 && v2 == v3;
}

uint64_t static FocusedValuePropertyKey.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for FocusedValues.Entry();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance FocusedValuePropertyKey<A>@<X0>(uint64_t a1@<X8>)
{
  return static FocusedValuePropertyKey.defaultValue.getter(a1);
}

void one-time initialization function for scene()
{
  int v0 = static ViewIdentity.nextSeed;
  if ((static ViewIdentity.nextSeed + 1) > 1) {
    int v1 = static ViewIdentity.nextSeed + 1;
  }
  else {
    int v1 = 1;
  }
  static ViewIdentity.nextSeed = v1;
  static FocusedValueScope.scene = v0;
  qword_1E90FC798 = 0x656E656353;
  unk_1E90FC7A0 = 0xE500000000000000;
}

void one-time initialization function for view()
{
  int v0 = static ViewIdentity.nextSeed;
  if ((static ViewIdentity.nextSeed + 1) > 1) {
    int v1 = static ViewIdentity.nextSeed + 1;
  }
  else {
    int v1 = 1;
  }
  static ViewIdentity.nextSeed = v1;
  static FocusedValueScope.view = v0;
  qword_1E90FC7B0 = 2003134806;
  unk_1E90FC7B8 = 0xE400000000000000;
}

uint64_t specialized static FocusedValue._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v14[1] = a1;
  uint64_t v6 = type metadata accessor for FocusedValueBox();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v14 - v8;
  LODWORD(v8) = *((_DWORD *)a3 + 2);
  uint64_t v10 = a3[2];
  uint64_t v11 = a3[5];
  uint64_t v15 = *a3;
  int v16 = v8;
  uint64_t v17 = v10;
  long long v18 = *(_OWORD *)(a3 + 3);
  uint64_t v19 = v11;
  LODWORD(a3) = _GraphInputs.environment.getter();
  lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v12 = v15;
  *((void *)v9 + 1) = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(&v9[*(int *)(v6 + 36)], 1, 1, a4);
  *(_DWORD *)uint64_t v9 = a3;
  *((_DWORD *)v9 + 1) = v12;
  swift_getWitnessTable();
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t type metadata accessor for FocusedBinding.Content()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized static FocusedBinding._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v13[1] = a1;
  uint64_t v4 = type metadata accessor for Binding();
  uint64_t v5 = type metadata accessor for FocusedValueBox();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v13 - v7;
  LODWORD(v7) = *((_DWORD *)a3 + 2);
  uint64_t v9 = a3[2];
  uint64_t v10 = a3[5];
  uint64_t v14 = *a3;
  int v15 = v7;
  uint64_t v16 = v9;
  long long v17 = *(_OWORD *)(a3 + 3);
  uint64_t v18 = v10;
  LODWORD(a3) = _GraphInputs.environment.getter();
  lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v11 = v14;
  *((void *)v8 + 1) = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(&v8[*(int *)(v5 + 36)], 1, 1, v4);
  *(_DWORD *)uint64_t v8 = a3;
  *((_DWORD *)v8 + 1) = v11;
  swift_getWitnessTable();
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t partial apply for closure #1 in View.focusedSceneValue<A>(_:_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  return closure #1 in View.focusedValue<A>(_:_:)(a1, *(void **)(v3 + 40), v3+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v3 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v3 + 24) - 8) + 80)), a2, a3);
}

uint64_t sub_1880E2DC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for FocusedBinding();
  return FocusedBinding.wrappedValue.getter(v2, a1);
}

uint64_t sub_1880E2E04()
{
  return 8;
}

void *sub_1880E2E10(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for FocusedValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for FocusedValue(a1, a2, a3, (uint64_t (*)(uint64_t, void))type metadata accessor for FocusedValue.Content);
}

uint64_t destroy for FocusedValue(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  if (*(_DWORD *)(v4 + 84)) {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64) + 1;
  }
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_15;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_15;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_15;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_15:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    uint64_t v13 = *(void *)(*(void *)(a2 + 16) - 8);
    uint64_t result = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
    if (!result)
    {
      int v12 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v13 + 8);
      return v12(a1, v3);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for FocusedValue(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  if (v7 <= 8) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = v7;
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_16;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_16:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    *((unsigned char *)a1 + v8) = 1;
  }
  else
  {
    *a1 = *(void *)a2;
    *((unsigned char *)a1 + v8) = 0;
    swift_retain();
  }
  return a1;
}

unsigned __int8 *assignWithCopy for FocusedValue(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    if (v7 <= 8) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = v7;
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          goto LABEL_17;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          goto LABEL_17;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_17;
        case 4:
          int v12 = *(_DWORD *)a1;
LABEL_17:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 == 1)
    {
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
      }
    }
    else
    {
      swift_release();
    }
    unsigned int v14 = a2[v8];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v16 = v8;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          goto LABEL_32;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          goto LABEL_32;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_32;
        case 4:
          int v17 = *(_DWORD *)a2;
LABEL_32:
          int v18 = (v17 | (v15 << (8 * v8))) + 2;
          unsigned int v14 = v17 + 2;
          if (v8 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v7);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
      a1[v8] = 1;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      a1[v8] = 0;
      swift_retain();
    }
  }
  return a1;
}

void *initializeWithTake for FocusedValue(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  if (v7 <= 8) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = v7;
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_16;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_16:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v7);
      char v14 = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v14 = 1;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
  }
  else
  {
    char v14 = 0;
    *a1 = *(void *)a2;
  }
  *((unsigned char *)a1 + v8) = v14;
  return a1;
}

unsigned __int8 *assignWithTake for FocusedValue(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    if (v7 <= 8) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = v7;
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          goto LABEL_17;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          goto LABEL_17;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_17;
        case 4:
          int v12 = *(_DWORD *)a1;
LABEL_17:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 == 1)
    {
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
      }
    }
    else
    {
      swift_release();
    }
    unsigned int v14 = a2[v8];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v16 = v8;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          goto LABEL_32;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          goto LABEL_32;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_32;
        case 4:
          int v17 = *(_DWORD *)a2;
LABEL_32:
          int v18 = (v17 | (v15 << (8 * v8))) + 2;
          unsigned int v14 = v17 + 2;
          if (v8 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v7);
        char v19 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        char v19 = 1;
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
    }
    else
    {
      char v19 = 0;
      *(void *)a1 = *(void *)a2;
    }
    a1[v8] = v19;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusedValue(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(_DWORD *)(v3 + 84)) {
    unint64_t v4 = *(void *)(v3 + 64);
  }
  else {
    unint64_t v4 = *(void *)(v3 + 64) + 1;
  }
  uint64_t v5 = 8;
  if (v4 > 8) {
    uint64_t v5 = v4;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_25;
  }
  uint64_t v6 = v5 + 1;
  char v7 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    unsigned int v10 = ((a2 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v10))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v10 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v10 < 2)
    {
LABEL_25:
      unsigned int v12 = *((unsigned __int8 *)a1 + v5);
      if (v12 >= 2) {
        return (v12 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_25;
  }
LABEL_17:
  int v11 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v6 | v11) + 255;
}

void storeEnumTagSinglePayload for FocusedValue(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84)) {
    unint64_t v6 = *(void *)(v5 + 64);
  }
  else {
    unint64_t v6 = *(void *)(v5 + 64) + 1;
  }
  if (v6 <= 8) {
    unint64_t v6 = 8;
  }
  size_t v7 = v6 + 1;
  if (a3 < 0xFF)
  {
    int v8 = 0;
  }
  else if (v7 <= 3)
  {
    unsigned int v11 = ((a3 + ~(-1 << (8 * v7)) - 254) >> (8 * v7)) + 1;
    if (HIWORD(v11))
    {
      int v8 = 4;
    }
    else if (v11 >= 0x100)
    {
      int v8 = 2;
    }
    else
    {
      int v8 = v11 > 1;
    }
  }
  else
  {
    int v8 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v9 = a2 - 255;
    if (v7 < 4)
    {
      int v10 = (v9 >> (8 * v7)) + 1;
      if (v6 != -1)
      {
        int v12 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if (v7 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if (v7 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v6 + 1);
      *(_DWORD *)a1 = v9;
      int v10 = 1;
    }
    switch(v8)
    {
      case 1:
        a1[v7] = v10;
        break;
      case 2:
        *(_WORD *)&a1[v7] = v10;
        break;
      case 3:
LABEL_37:
        __break(1u);
        JUMPOUT(0x1880E3C14);
      case 4:
        *(_DWORD *)&a1[v7] = v10;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v8)
    {
      case 1:
        a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      case 2:
        *(_WORD *)&a1[v7] = 0;
        goto LABEL_25;
      case 3:
        goto LABEL_37;
      case 4:
        *(_DWORD *)&a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      default:
LABEL_25:
        if (a2) {
LABEL_26:
        }
          a1[v6] = -(char)a2;
        break;
    }
  }
}

uint64_t type metadata accessor for FocusedValue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for FocusedValue.Content()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for FocusedValue(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  if (v7 <= 8) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = v7;
  }
  int v9 = *(_DWORD *)(v6 + 80);
  if ((v9 & 0x1000F8) != 0 || (unint64_t)(v8 + 1) > 0x18)
  {
    uint64_t v11 = *(void *)a2;
    *unint64_t v4 = *(void *)a2;
    unint64_t v4 = (void *)(v11 + ((unsigned __int16)((v9 & 0xF8) + 23) & (unsigned __int16)~(v9 & 0xF8) & 0x1F8));
LABEL_28:
    swift_retain();
    return v4;
  }
  unsigned int v12 = a2[v8];
  unsigned int v13 = v12 - 2;
  if (v12 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v14 = v8;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a2;
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)a2;
        goto LABEL_22;
      case 3:
        int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_22;
      case 4:
        int v15 = *(_DWORD *)a2;
LABEL_22:
        int v16 = (v15 | (v13 << (8 * v8))) + 2;
        unsigned int v12 = v15 + 2;
        if (v8 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  if (v12 != 1)
  {
    *a1 = *(void *)a2;
    *((unsigned char *)a1 + v8) = 0;
    goto LABEL_28;
  }
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    memcpy(v4, a2, v7);
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(v4, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  }
  *((unsigned char *)v4 + v8) = 1;
  return v4;
}

uint64_t destroy for FocusedValue.Content(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  if (*(_DWORD *)(v4 + 84)) {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64) + 1;
  }
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_15;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_15;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_15;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_15:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    uint64_t v13 = *(void *)(*(void *)(a2 + 16) - 8);
    uint64_t result = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
    if (!result)
    {
      unsigned int v12 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v13 + 8);
      return v12(a1, v3);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for FocusedValue.Content(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  if (v7 <= 8) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = v7;
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_16;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_16:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    *((unsigned char *)a1 + v8) = 1;
  }
  else
  {
    *a1 = *(void *)a2;
    *((unsigned char *)a1 + v8) = 0;
    swift_retain();
  }
  return a1;
}

unsigned __int8 *assignWithCopy for FocusedValue.Content(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    if (v7 <= 8) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = v7;
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          goto LABEL_17;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          goto LABEL_17;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_17;
        case 4:
          int v12 = *(_DWORD *)a1;
LABEL_17:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 == 1)
    {
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
      }
    }
    else
    {
      swift_release();
    }
    unsigned int v14 = a2[v8];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v16 = v8;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          goto LABEL_32;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          goto LABEL_32;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_32;
        case 4:
          int v17 = *(_DWORD *)a2;
LABEL_32:
          int v18 = (v17 | (v15 << (8 * v8))) + 2;
          unsigned int v14 = v17 + 2;
          if (v8 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v7);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
      a1[v8] = 1;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      a1[v8] = 0;
      swift_retain();
    }
  }
  return a1;
}

void *initializeWithTake for FocusedValue.Content(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  if (v7 <= 8) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = v7;
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_16;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_16:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v7);
      char v14 = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v14 = 1;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
  }
  else
  {
    char v14 = 0;
    *a1 = *(void *)a2;
  }
  *((unsigned char *)a1 + v8) = v14;
  return a1;
}

unsigned __int8 *assignWithTake for FocusedValue.Content(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    if (v7 <= 8) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = v7;
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          goto LABEL_17;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          goto LABEL_17;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_17;
        case 4:
          int v12 = *(_DWORD *)a1;
LABEL_17:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 == 1)
    {
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
      }
    }
    else
    {
      swift_release();
    }
    unsigned int v14 = a2[v8];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v16 = v8;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          goto LABEL_32;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          goto LABEL_32;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_32;
        case 4:
          int v17 = *(_DWORD *)a2;
LABEL_32:
          int v18 = (v17 | (v15 << (8 * v8))) + 2;
          unsigned int v14 = v17 + 2;
          if (v8 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v7);
        char v19 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        char v19 = 1;
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
    }
    else
    {
      char v19 = 0;
      *(void *)a1 = *(void *)a2;
    }
    a1[v8] = v19;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusedValue.Content(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(_DWORD *)(v3 + 84)) {
    unint64_t v4 = *(void *)(v3 + 64);
  }
  else {
    unint64_t v4 = *(void *)(v3 + 64) + 1;
  }
  uint64_t v5 = 8;
  if (v4 > 8) {
    uint64_t v5 = v4;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_25;
  }
  uint64_t v6 = v5 + 1;
  char v7 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    unsigned int v10 = ((a2 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v10))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v10 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v10 < 2)
    {
LABEL_25:
      unsigned int v12 = *((unsigned __int8 *)a1 + v5);
      if (v12 >= 2) {
        return (v12 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_25;
  }
LABEL_17:
  int v11 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v6 | v11) + 255;
}

void storeEnumTagSinglePayload for FocusedValue.Content(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84)) {
    unint64_t v6 = *(void *)(v5 + 64);
  }
  else {
    unint64_t v6 = *(void *)(v5 + 64) + 1;
  }
  if (v6 <= 8) {
    unint64_t v6 = 8;
  }
  size_t v7 = v6 + 1;
  if (a3 < 0xFF)
  {
    int v8 = 0;
  }
  else if (v7 <= 3)
  {
    unsigned int v11 = ((a3 + ~(-1 << (8 * v7)) - 254) >> (8 * v7)) + 1;
    if (HIWORD(v11))
    {
      int v8 = 4;
    }
    else if (v11 >= 0x100)
    {
      int v8 = 2;
    }
    else
    {
      int v8 = v11 > 1;
    }
  }
  else
  {
    int v8 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v9 = a2 - 255;
    if (v7 < 4)
    {
      int v10 = (v9 >> (8 * v7)) + 1;
      if (v6 != -1)
      {
        int v12 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if (v7 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if (v7 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v6 + 1);
      *(_DWORD *)a1 = v9;
      int v10 = 1;
    }
    switch(v8)
    {
      case 1:
        a1[v7] = v10;
        break;
      case 2:
        *(_WORD *)&a1[v7] = v10;
        break;
      case 3:
LABEL_37:
        __break(1u);
        JUMPOUT(0x1880E4CC8);
      case 4:
        *(_DWORD *)&a1[v7] = v10;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v8)
    {
      case 1:
        a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      case 2:
        *(_WORD *)&a1[v7] = 0;
        goto LABEL_25;
      case 3:
        goto LABEL_37;
      case 4:
        *(_DWORD *)&a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      default:
LABEL_25:
        if (a2) {
LABEL_26:
        }
          a1[v6] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for FocusedValue.Content(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  if (*(_DWORD *)(v2 + 84)) {
    unint64_t v3 = *(void *)(v2 + 64);
  }
  else {
    unint64_t v3 = *(void *)(v2 + 64) + 1;
  }
  uint64_t v4 = 8;
  if (v3 > 8) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = a1[v4];
  int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_15;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_15;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_15;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_15:
        unsigned int v9 = (v8 | (v6 << (8 * v4))) + 2;
        LODWORD(v5) = v8 + 2;
        if (v4 >= 4) {
          uint64_t v5 = v5;
        }
        else {
          uint64_t v5 = v9;
        }
        break;
      default:
        return v5;
    }
  }
  return v5;
}

void destructiveInjectEnumTag for FocusedValue.Content(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(_DWORD *)(v5 + 84)) {
    unint64_t v6 = *(void *)(v5 + 64);
  }
  else {
    unint64_t v6 = *(void *)(v5 + 64) + 1;
  }
  if (v6 <= 8) {
    size_t v7 = 8;
  }
  else {
    size_t v7 = v6;
  }
  if (a2 > 1)
  {
    unsigned int v8 = a2 - 2;
    if (v7 <= 3) {
      char v9 = (v8 >> (8 * v7)) + 2;
    }
    else {
      char v9 = 2;
    }
    if (v7 <= 3) {
      int v10 = v8 & ~(-1 << (8 * v7));
    }
    else {
      int v10 = v8;
    }
    a1[v7] = v9;
    if (v7 >= 4) {
      int v11 = 4;
    }
    else {
      int v11 = v7;
    }
    bzero(a1, v7);
    switch(v11)
    {
      case 2:
        *(_WORD *)a1 = v10;
        break;
      case 3:
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
        break;
      case 4:
        *(_DWORD *)a1 = v10;
        break;
      default:
        *a1 = v10;
        break;
    }
  }
  else
  {
    a1[v7] = a2;
  }
}

uint64_t type metadata completion function for FocusedBinding(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for FocusedValue(a1, a2, a3, (uint64_t (*)(uint64_t, void))type metadata accessor for FocusedBinding.Content);
}

uint64_t type metadata completion function for FocusedValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void))
{
  uint64_t result = a4(319, *(void *)(a1 + 16));
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for FocusedBinding(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = ((v4 + 16) & ~v4) + *(void *)(v3 + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_12;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_12:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    uint64_t v11 = ~v4;
    int v12 = (uint64_t *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v3 + 84) & 0x80000000) != 0)
    {
      uint64_t v16 = *(void *)(*(void *)(a2 + 16) - 8);
      uint64_t result = (*(uint64_t (**)(unint64_t))(v3 + 48))(((unint64_t)v12 + v4 + 8) & v11);
      uint64_t v3 = v16;
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t v13 = *v12;
      if ((unint64_t)*v12 >= 0xFFFFFFFF) {
        LODWORD(v13) = -1;
      }
      uint64_t result = (v13 + 1);
      if (v13 != -1) {
        return result;
      }
    }
    uint64_t v17 = v3;
    swift_release();
    swift_release();
    unsigned int v15 = *(uint64_t (**)(unint64_t, uint64_t))(v17 + 8);
    return v15(((unint64_t)v12 + v4 + 8) & v11, v2);
  }

  return swift_release();
}

void *initializeWithCopy for FocusedBinding(void *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  size_t v9 = ((v7 + 16) & ~v7) + v8;
  if (v9 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = ((v7 + 16) & ~v7) + v8;
  }
  unsigned int v11 = __src[v10];
  unsigned int v12 = v11 - 2;
  if (v11 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *__src;
        goto LABEL_13;
      case 2:
        int v14 = *(unsigned __int16 *)__src;
        goto LABEL_13;
      case 3:
        int v14 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_13;
      case 4:
        int v14 = *(_DWORD *)__src;
LABEL_13:
        int v15 = (v14 | (v12 << (8 * v10))) + 2;
        unsigned int v11 = v14 + 2;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 1)
  {
    uint64_t v16 = ~v7;
    uint64_t v17 = (uint64_t *)((unint64_t)(__src + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v17 + v7 + 8) & v16))
      {
LABEL_20:
        memcpy(__dst, __src, v9);
LABEL_24:
        *((unsigned char *)__dst + v10) = 1;
        return __dst;
      }
    }
    else
    {
      uint64_t v18 = *v17;
      if ((unint64_t)*v17 >= 0xFFFFFFFF) {
        LODWORD(v18) = -1;
      }
      if (v18 != -1) {
        goto LABEL_20;
      }
    }
    *__dst = *(void *)__src;
    char v19 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *char v19 = *v17;
    uint64_t v20 = ((unint64_t)v19 + v7 + 8) & v16;
    id v21 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v21(v20, ((unint64_t)v17 + v7 + 8) & v16, v5);
    goto LABEL_24;
  }
  *__dst = *(void *)__src;
  *((unsigned char *)__dst + v10) = 0;
  swift_retain();
  return __dst;
}

unsigned __int8 *assignWithCopy for FocusedBinding(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst == __src) {
    return __dst;
  }
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64);
  size_t v10 = ((v8 + 16) & ~v8) + v9;
  if (v10 <= 8) {
    uint64_t v11 = 8;
  }
  else {
    uint64_t v11 = ((v8 + 16) & ~v8) + v9;
  }
  unsigned int v12 = __dst[v11];
  unsigned int v13 = v12 - 2;
  if (v12 >= 2)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *__dst;
        goto LABEL_14;
      case 2:
        int v15 = *(unsigned __int16 *)__dst;
        goto LABEL_14;
      case 3:
        int v15 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
        goto LABEL_14;
      case 4:
        int v15 = *(_DWORD *)__dst;
LABEL_14:
        int v16 = (v15 | (v13 << (8 * v11))) + 2;
        unsigned int v12 = v15 + 2;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v17 = ~v8;
  if (v12 == 1)
  {
    uint64_t v18 = (uint64_t *)((unint64_t)(__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0x80000000) == 0)
    {
      uint64_t v19 = *v18;
      if ((unint64_t)*v18 >= 0xFFFFFFFF) {
        LODWORD(v19) = -1;
      }
      if (v19 != -1) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    if (!(*(unsigned int (**)(unint64_t, void, uint64_t))(v6 + 48))(((unint64_t)v18 + v8 + 8) & v17, *(unsigned int *)(v6 + 84), v5))
    {
LABEL_24:
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v18 + v8 + 8) & v17, v5);
    }
  }
  else
  {
    swift_release();
  }
LABEL_25:
  unsigned int v20 = __src[v11];
  unsigned int v21 = v20 - 2;
  if (v20 >= 2)
  {
    if (v11 <= 3) {
      uint64_t v22 = v11;
    }
    else {
      uint64_t v22 = 4;
    }
    switch(v22)
    {
      case 1:
        int v23 = *__src;
        goto LABEL_34;
      case 2:
        int v23 = *(unsigned __int16 *)__src;
        goto LABEL_34;
      case 3:
        int v23 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_34;
      case 4:
        int v23 = *(_DWORD *)__src;
LABEL_34:
        int v24 = (v23 | (v21 << (8 * v11))) + 2;
        unsigned int v20 = v23 + 2;
        if (v11 < 4) {
          unsigned int v20 = v24;
        }
        break;
      default:
        break;
    }
  }
  if (v20 == 1)
  {
    uint64_t v25 = (uint64_t *)((unint64_t)(__src + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)v25 + v8 + 8) & v17, v7, v5))
      {
LABEL_41:
        memcpy(__dst, __src, v10);
LABEL_45:
        __dst[v11] = 1;
        return __dst;
      }
    }
    else
    {
      uint64_t v26 = *v25;
      if ((unint64_t)*v25 >= 0xFFFFFFFF) {
        LODWORD(v26) = -1;
      }
      if (v26 != -1) {
        goto LABEL_41;
      }
    }
    *(void *)__dst = *(void *)__src;
    uint64_t v27 = (void *)((unint64_t)(__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v27 = *v25;
    uint64_t v28 = ((unint64_t)v27 + v8 + 8) & v17;
    uint64_t v29 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v29(v28, ((unint64_t)v25 + v8 + 8) & v17, v5);
    goto LABEL_45;
  }
  *(void *)__dst = *(void *)__src;
  __dst[v11] = 0;
  swift_retain();
  return __dst;
}

void *initializeWithTake for FocusedBinding(void *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  size_t v9 = ((v7 + 16) & ~v7) + v8;
  if (v9 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = ((v7 + 16) & ~v7) + v8;
  }
  unsigned int v11 = __src[v10];
  unsigned int v12 = v11 - 2;
  if (v11 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *__src;
        goto LABEL_13;
      case 2:
        int v14 = *(unsigned __int16 *)__src;
        goto LABEL_13;
      case 3:
        int v14 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_13;
      case 4:
        int v14 = *(_DWORD *)__src;
LABEL_13:
        int v15 = (v14 | (v12 << (8 * v10))) + 2;
        unsigned int v11 = v14 + 2;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 1)
  {
    uint64_t v16 = ~v7;
    uint64_t v17 = (uint64_t *)((unint64_t)(__src + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v17 + v7 + 8) & v16))
      {
LABEL_20:
        memcpy(__dst, __src, v9);
LABEL_24:
        char v19 = 1;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v18 = *v17;
      if ((unint64_t)*v17 >= 0xFFFFFFFF) {
        LODWORD(v18) = -1;
      }
      if (v18 != -1) {
        goto LABEL_20;
      }
    }
    *__dst = *(void *)__src;
    unsigned int v20 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v20 = *v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v20 + v7 + 8) & v16, ((unint64_t)v17 + v7 + 8) & v16, v5);
    goto LABEL_24;
  }
  char v19 = 0;
  *__dst = *(void *)__src;
LABEL_25:
  *((unsigned char *)__dst + v10) = v19;
  return __dst;
}

unsigned __int8 *assignWithTake for FocusedBinding(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(unsigned int *)(v6 + 84);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v9 = *(void *)(v6 + 64);
    size_t v10 = ((v8 + 16) & ~v8) + v9;
    if (v10 <= 8) {
      uint64_t v11 = 8;
    }
    else {
      uint64_t v11 = ((v8 + 16) & ~v8) + v9;
    }
    unsigned int v12 = __dst[v11];
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v11 <= 3) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *__dst;
          goto LABEL_14;
        case 2:
          int v15 = *(unsigned __int16 *)__dst;
          goto LABEL_14;
        case 3:
          int v15 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
          goto LABEL_14;
        case 4:
          int v15 = *(_DWORD *)__dst;
LABEL_14:
          int v16 = (v15 | (v13 << (8 * v11))) + 2;
          unsigned int v12 = v15 + 2;
          if (v11 < 4) {
            unsigned int v12 = v16;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v17 = ~v8;
    if (v12 != 1)
    {
      swift_release();
      goto LABEL_25;
    }
    uint64_t v18 = (uint64_t *)((unint64_t)(__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v6 + 48))(((unint64_t)v18 + v8 + 8) & v17, *(unsigned int *)(v6 + 84), v5))
      {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v19 = *v18;
      if ((unint64_t)*v18 >= 0xFFFFFFFF) {
        LODWORD(v19) = -1;
      }
      if (v19 != -1)
      {
LABEL_25:
        unsigned int v20 = __src[v11];
        unsigned int v21 = v20 - 2;
        if (v20 >= 2)
        {
          if (v11 <= 3) {
            uint64_t v22 = v11;
          }
          else {
            uint64_t v22 = 4;
          }
          switch(v22)
          {
            case 1:
              int v23 = *__src;
              goto LABEL_34;
            case 2:
              int v23 = *(unsigned __int16 *)__src;
              goto LABEL_34;
            case 3:
              int v23 = *(unsigned __int16 *)__src | (__src[2] << 16);
              goto LABEL_34;
            case 4:
              int v23 = *(_DWORD *)__src;
LABEL_34:
              int v24 = (v23 | (v21 << (8 * v11))) + 2;
              unsigned int v20 = v23 + 2;
              if (v11 < 4) {
                unsigned int v20 = v24;
              }
              break;
            default:
              break;
          }
        }
        if (v20 != 1)
        {
          char v27 = 0;
          *(void *)__dst = *(void *)__src;
LABEL_46:
          __dst[v11] = v27;
          return __dst;
        }
        uint64_t v25 = (uint64_t *)((unint64_t)(__src + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v7 & 0x80000000) != 0)
        {
          if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)v25 + v8 + 8) & v17, v7, v5))
          {
LABEL_41:
            memcpy(__dst, __src, v10);
LABEL_45:
            char v27 = 1;
            goto LABEL_46;
          }
        }
        else
        {
          uint64_t v26 = *v25;
          if ((unint64_t)*v25 >= 0xFFFFFFFF) {
            LODWORD(v26) = -1;
          }
          if (v26 != -1) {
            goto LABEL_41;
          }
        }
        *(void *)__dst = *(void *)__src;
        uint64_t v28 = (void *)((unint64_t)(__dst + 15) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v28 = *v25;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v28 + v8 + 8) & v17, ((unint64_t)v25 + v8 + 8) & v17, v5);
        goto LABEL_45;
      }
    }
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v18 + v8 + 8) & v17, v5);
    goto LABEL_25;
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for FocusedBinding(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = 8;
  if (((*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 8)
    unint64_t v3 = ((*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80))
       + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void storeEnumTagSinglePayload for FocusedBinding(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = ((*(unsigned __int8 *)(*(void *)(*(void *)(a4 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a4 + 16) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x1880E5FF4);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t type metadata accessor for FocusedBinding()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for FocusedBinding.Content()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for FocusedBinding(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  unint64_t v4 = __dst;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  int v9 = *(_DWORD *)(v6 + 80);
  int v8 = *(_DWORD *)(v6 + 84);
  uint64_t v10 = v9;
  size_t v11 = ((v10 + 16) & ~v10) + *(void *)(v6 + 64);
  if (v11 <= 8) {
    unint64_t v12 = 8;
  }
  else {
    unint64_t v12 = ((v9 + 16) & ~(unint64_t)v9) + *(void *)(v6 + 64);
  }
  int v13 = v9 & 0x100000;
  if (v10 > 7 || v13 != 0 || v12 + 1 > 0x18)
  {
    uint64_t v16 = *(void *)__src;
    *unint64_t v4 = *(void *)__src;
    unint64_t v4 = (void *)(v16 + ((v10 & 0xF8 ^ 0x1F8) & (v10 + 16)));
  }
  else
  {
    unsigned int v17 = __src[v12];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v19 = v12;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *__src;
          goto LABEL_22;
        case 2:
          int v20 = *(unsigned __int16 *)__src;
          goto LABEL_22;
        case 3:
          int v20 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_22;
        case 4:
          int v20 = *(_DWORD *)__src;
LABEL_22:
          int v21 = (v20 | (v18 << (8 * v12))) + 2;
          unsigned int v17 = v20 + 2;
          if (v12 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    if (v17 == 1)
    {
      uint64_t v22 = ~v10;
      int v23 = (uint64_t *)((unint64_t)(__src + 15) & 0xFFFFFFFFFFFFFFF8);
      if (v8 < 0)
      {
        if ((*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v23 + v10 + 8) & v22))
        {
LABEL_29:
          memcpy(v4, __src, v11);
LABEL_34:
          *((unsigned char *)v4 + v12) = 1;
          return v4;
        }
      }
      else
      {
        uint64_t v24 = *v23;
        if ((unint64_t)*v23 >= 0xFFFFFFFF) {
          LODWORD(v24) = -1;
        }
        if (v24 != -1) {
          goto LABEL_29;
        }
      }
      *unint64_t v4 = *(void *)__src;
      uint64_t v25 = (void *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v25 = *v23;
      uint64_t v26 = ((unint64_t)v25 + v10 + 8) & v22;
      char v27 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
      swift_retain();
      swift_retain();
      v27(v26, ((unint64_t)v23 + v10 + 8) & v22, v5);
      goto LABEL_34;
    }
    *(void *)__dst = *(void *)__src;
    __dst[v12] = 0;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for FocusedBinding.Content(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = ((v4 + 16) & ~v4) + *(void *)(v3 + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_12;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_12:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    uint64_t v11 = ~v4;
    unint64_t v12 = (uint64_t *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v3 + 84) & 0x80000000) != 0)
    {
      uint64_t v16 = *(void *)(*(void *)(a2 + 16) - 8);
      uint64_t result = (*(uint64_t (**)(unint64_t))(v3 + 48))(((unint64_t)v12 + v4 + 8) & v11);
      uint64_t v3 = v16;
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t v13 = *v12;
      if ((unint64_t)*v12 >= 0xFFFFFFFF) {
        LODWORD(v13) = -1;
      }
      uint64_t result = (v13 + 1);
      if (v13 != -1) {
        return result;
      }
    }
    uint64_t v17 = v3;
    swift_release();
    swift_release();
    int v15 = *(uint64_t (**)(unint64_t, uint64_t))(v17 + 8);
    return v15(((unint64_t)v12 + v4 + 8) & v11, v2);
  }

  return swift_release();
}

void *initializeWithCopy for FocusedBinding.Content(void *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  size_t v9 = ((v7 + 16) & ~v7) + v8;
  if (v9 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = ((v7 + 16) & ~v7) + v8;
  }
  unsigned int v11 = __src[v10];
  unsigned int v12 = v11 - 2;
  if (v11 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *__src;
        goto LABEL_13;
      case 2:
        int v14 = *(unsigned __int16 *)__src;
        goto LABEL_13;
      case 3:
        int v14 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_13;
      case 4:
        int v14 = *(_DWORD *)__src;
LABEL_13:
        int v15 = (v14 | (v12 << (8 * v10))) + 2;
        unsigned int v11 = v14 + 2;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 1)
  {
    uint64_t v16 = ~v7;
    uint64_t v17 = (uint64_t *)((unint64_t)(__src + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v17 + v7 + 8) & v16))
      {
LABEL_20:
        memcpy(__dst, __src, v9);
LABEL_24:
        *((unsigned char *)__dst + v10) = 1;
        return __dst;
      }
    }
    else
    {
      uint64_t v18 = *v17;
      if ((unint64_t)*v17 >= 0xFFFFFFFF) {
        LODWORD(v18) = -1;
      }
      if (v18 != -1) {
        goto LABEL_20;
      }
    }
    *__dst = *(void *)__src;
    uint64_t v19 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v19 = *v17;
    uint64_t v20 = ((unint64_t)v19 + v7 + 8) & v16;
    int v21 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v21(v20, ((unint64_t)v17 + v7 + 8) & v16, v5);
    goto LABEL_24;
  }
  *__dst = *(void *)__src;
  *((unsigned char *)__dst + v10) = 0;
  swift_retain();
  return __dst;
}

unsigned __int8 *assignWithCopy for FocusedBinding.Content(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst == __src) {
    return __dst;
  }
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64);
  size_t v10 = ((v8 + 16) & ~v8) + v9;
  if (v10 <= 8) {
    uint64_t v11 = 8;
  }
  else {
    uint64_t v11 = ((v8 + 16) & ~v8) + v9;
  }
  unsigned int v12 = __dst[v11];
  unsigned int v13 = v12 - 2;
  if (v12 >= 2)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *__dst;
        goto LABEL_14;
      case 2:
        int v15 = *(unsigned __int16 *)__dst;
        goto LABEL_14;
      case 3:
        int v15 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
        goto LABEL_14;
      case 4:
        int v15 = *(_DWORD *)__dst;
LABEL_14:
        int v16 = (v15 | (v13 << (8 * v11))) + 2;
        unsigned int v12 = v15 + 2;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v17 = ~v8;
  if (v12 == 1)
  {
    uint64_t v18 = (uint64_t *)((unint64_t)(__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0x80000000) == 0)
    {
      uint64_t v19 = *v18;
      if ((unint64_t)*v18 >= 0xFFFFFFFF) {
        LODWORD(v19) = -1;
      }
      if (v19 != -1) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    if (!(*(unsigned int (**)(unint64_t, void, uint64_t))(v6 + 48))(((unint64_t)v18 + v8 + 8) & v17, *(unsigned int *)(v6 + 84), v5))
    {
LABEL_24:
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v18 + v8 + 8) & v17, v5);
    }
  }
  else
  {
    swift_release();
  }
LABEL_25:
  unsigned int v20 = __src[v11];
  unsigned int v21 = v20 - 2;
  if (v20 >= 2)
  {
    if (v11 <= 3) {
      uint64_t v22 = v11;
    }
    else {
      uint64_t v22 = 4;
    }
    switch(v22)
    {
      case 1:
        int v23 = *__src;
        goto LABEL_34;
      case 2:
        int v23 = *(unsigned __int16 *)__src;
        goto LABEL_34;
      case 3:
        int v23 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_34;
      case 4:
        int v23 = *(_DWORD *)__src;
LABEL_34:
        int v24 = (v23 | (v21 << (8 * v11))) + 2;
        unsigned int v20 = v23 + 2;
        if (v11 < 4) {
          unsigned int v20 = v24;
        }
        break;
      default:
        break;
    }
  }
  if (v20 == 1)
  {
    uint64_t v25 = (uint64_t *)((unint64_t)(__src + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)v25 + v8 + 8) & v17, v7, v5))
      {
LABEL_41:
        memcpy(__dst, __src, v10);
LABEL_45:
        __dst[v11] = 1;
        return __dst;
      }
    }
    else
    {
      uint64_t v26 = *v25;
      if ((unint64_t)*v25 >= 0xFFFFFFFF) {
        LODWORD(v26) = -1;
      }
      if (v26 != -1) {
        goto LABEL_41;
      }
    }
    *(void *)__dst = *(void *)__src;
    char v27 = (void *)((unint64_t)(__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *char v27 = *v25;
    uint64_t v28 = ((unint64_t)v27 + v8 + 8) & v17;
    uint64_t v29 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v29(v28, ((unint64_t)v25 + v8 + 8) & v17, v5);
    goto LABEL_45;
  }
  *(void *)__dst = *(void *)__src;
  __dst[v11] = 0;
  swift_retain();
  return __dst;
}

void *initializeWithTake for FocusedBinding.Content(void *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  size_t v9 = ((v7 + 16) & ~v7) + v8;
  if (v9 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = ((v7 + 16) & ~v7) + v8;
  }
  unsigned int v11 = __src[v10];
  unsigned int v12 = v11 - 2;
  if (v11 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *__src;
        goto LABEL_13;
      case 2:
        int v14 = *(unsigned __int16 *)__src;
        goto LABEL_13;
      case 3:
        int v14 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_13;
      case 4:
        int v14 = *(_DWORD *)__src;
LABEL_13:
        int v15 = (v14 | (v12 << (8 * v10))) + 2;
        unsigned int v11 = v14 + 2;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 1)
  {
    uint64_t v16 = ~v7;
    uint64_t v17 = (uint64_t *)((unint64_t)(__src + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v17 + v7 + 8) & v16))
      {
LABEL_20:
        memcpy(__dst, __src, v9);
LABEL_24:
        char v19 = 1;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v18 = *v17;
      if ((unint64_t)*v17 >= 0xFFFFFFFF) {
        LODWORD(v18) = -1;
      }
      if (v18 != -1) {
        goto LABEL_20;
      }
    }
    *__dst = *(void *)__src;
    unsigned int v20 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v20 = *v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v20 + v7 + 8) & v16, ((unint64_t)v17 + v7 + 8) & v16, v5);
    goto LABEL_24;
  }
  char v19 = 0;
  *__dst = *(void *)__src;
LABEL_25:
  *((unsigned char *)__dst + v10) = v19;
  return __dst;
}

unsigned __int8 *assignWithTake for FocusedBinding.Content(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(unsigned int *)(v6 + 84);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v9 = *(void *)(v6 + 64);
    size_t v10 = ((v8 + 16) & ~v8) + v9;
    if (v10 <= 8) {
      uint64_t v11 = 8;
    }
    else {
      uint64_t v11 = ((v8 + 16) & ~v8) + v9;
    }
    unsigned int v12 = __dst[v11];
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v11 <= 3) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *__dst;
          goto LABEL_14;
        case 2:
          int v15 = *(unsigned __int16 *)__dst;
          goto LABEL_14;
        case 3:
          int v15 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
          goto LABEL_14;
        case 4:
          int v15 = *(_DWORD *)__dst;
LABEL_14:
          int v16 = (v15 | (v13 << (8 * v11))) + 2;
          unsigned int v12 = v15 + 2;
          if (v11 < 4) {
            unsigned int v12 = v16;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v17 = ~v8;
    if (v12 != 1)
    {
      swift_release();
      goto LABEL_25;
    }
    uint64_t v18 = (uint64_t *)((unint64_t)(__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v6 + 48))(((unint64_t)v18 + v8 + 8) & v17, *(unsigned int *)(v6 + 84), v5))
      {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v19 = *v18;
      if ((unint64_t)*v18 >= 0xFFFFFFFF) {
        LODWORD(v19) = -1;
      }
      if (v19 != -1)
      {
LABEL_25:
        unsigned int v20 = __src[v11];
        unsigned int v21 = v20 - 2;
        if (v20 >= 2)
        {
          if (v11 <= 3) {
            uint64_t v22 = v11;
          }
          else {
            uint64_t v22 = 4;
          }
          switch(v22)
          {
            case 1:
              int v23 = *__src;
              goto LABEL_34;
            case 2:
              int v23 = *(unsigned __int16 *)__src;
              goto LABEL_34;
            case 3:
              int v23 = *(unsigned __int16 *)__src | (__src[2] << 16);
              goto LABEL_34;
            case 4:
              int v23 = *(_DWORD *)__src;
LABEL_34:
              int v24 = (v23 | (v21 << (8 * v11))) + 2;
              unsigned int v20 = v23 + 2;
              if (v11 < 4) {
                unsigned int v20 = v24;
              }
              break;
            default:
              break;
          }
        }
        if (v20 != 1)
        {
          char v27 = 0;
          *(void *)__dst = *(void *)__src;
LABEL_46:
          __dst[v11] = v27;
          return __dst;
        }
        uint64_t v25 = (uint64_t *)((unint64_t)(__src + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v7 & 0x80000000) != 0)
        {
          if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)v25 + v8 + 8) & v17, v7, v5))
          {
LABEL_41:
            memcpy(__dst, __src, v10);
LABEL_45:
            char v27 = 1;
            goto LABEL_46;
          }
        }
        else
        {
          uint64_t v26 = *v25;
          if ((unint64_t)*v25 >= 0xFFFFFFFF) {
            LODWORD(v26) = -1;
          }
          if (v26 != -1) {
            goto LABEL_41;
          }
        }
        *(void *)__dst = *(void *)__src;
        uint64_t v28 = (void *)((unint64_t)(__dst + 15) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v28 = *v25;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v28 + v8 + 8) & v17, ((unint64_t)v25 + v8 + 8) & v17, v5);
        goto LABEL_45;
      }
    }
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v18 + v8 + 8) & v17, v5);
    goto LABEL_25;
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for FocusedBinding.Content(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = 8;
  if (((*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 8)
    unint64_t v3 = ((*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80))
       + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void storeEnumTagSinglePayload for FocusedBinding.Content(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = ((*(unsigned __int8 *)(*(void *)(*(void *)(a4 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a4 + 16) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x1880E735CLL);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for FocusedBinding.Content(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = 8;
  if (((*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64) > 8)
    unint64_t v2 = ((*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80))
       + *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void destructiveInjectEnumTag for FocusedBinding.Content(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  size_t v4 = ((*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    if (v4 <= 8) {
      size_t v4 = 8;
    }
    if (v4 <= 3) {
      char v5 = ((a2 - 2) >> (8 * v4)) + 2;
    }
    else {
      char v5 = 2;
    }
    if (v4 <= 3) {
      int v6 = (a2 - 2) & ~(-1 << (8 * v4));
    }
    else {
      int v6 = a2 - 2;
    }
    a1[v4] = v5;
    if (v4 >= 4) {
      int v7 = 4;
    }
    else {
      int v7 = v4;
    }
    bzero(a1, v4);
    switch(v7)
    {
      case 2:
        *(_WORD *)a1 = v6;
        break;
      case 3:
        *(_WORD *)a1 = v6;
        a1[2] = BYTE2(v6);
        break;
      case 4:
        *(_DWORD *)a1 = v6;
        break;
      default:
        *a1 = v6;
        break;
    }
  }
  else
  {
    if (v4 <= 8) {
      size_t v4 = 8;
    }
    a1[v4] = a2;
  }
}

uint64_t assignWithTake for FocusedValues(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

uint64_t sub_1880E7600()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for FocusedValues.StorageOptions()
{
  return &type metadata for FocusedValues.StorageOptions;
}

uint64_t type metadata completion function for FocusedValues.Entry()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FocusedValues.Entry(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || v7 + ((v6 + 24) & (unint64_t)~v6) + 1 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v11 = AssociatedTypeWitness;
    uint64_t v12 = ~v6;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v13 = a2[2];
    a1[1] = a2[1];
    a1[2] = v13;
    uint64_t v14 = (char *)a1 + v6;
    int v15 = (char *)a2 + v6;
    uint64_t v16 = (unint64_t)(v14 + 24) & v12;
    uint64_t v17 = (unint64_t)(v15 + 24) & v12;
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v18(v16, v17, v11);
    *(unsigned char *)(v16 + v7) = *(unsigned char *)(v17 + v7);
  }
  return a1;
}

uint64_t destroy for FocusedValues.Entry(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  size_t v4 = *(uint64_t (**)(unint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = AssociatedTypeWitness;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);

  return v4(v6, v5);
}

uint64_t initializeWithCopy for FocusedValues.Entry(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  uint64_t v8 = v6 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v9 + 24 + a1) & ~v9;
  uint64_t v11 = (v9 + 24 + a2) & ~v9;
  swift_bridgeObjectRetain();
  v7(v10, v11, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v8 + 48) + v10) = *(unsigned char *)(*(void *)(v8 + 48) + v11);
  return a1;
}

uint64_t assignWithCopy for FocusedValues.Entry(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5 + 24;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 24 + a1) & ~v7;
  uint64_t v9 = (v7 + 24 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(v8, v9, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v6 + 40) + v8) = *(unsigned char *)(*(void *)(v6 + 40) + v9);
  return a1;
}

uint64_t initializeWithTake for FocusedValues.Entry(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 24 + a1) & ~v7;
  uint64_t v9 = (v7 + 24 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8, v9, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v6 + 32) + v8) = *(unsigned char *)(*(void *)(v6 + 32) + v9);
  return a1;
}

uint64_t assignWithTake for FocusedValues.Entry(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 24 + a1) & ~v8;
  uint64_t v10 = (v8 + 24 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40))(v9, v10, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v7 + 24) + v9) = *(unsigned char *)(*(void *)(v7 + 24) + v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusedValues.Entry(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v10 = v9 + ((v8 + 24) & ~v8) + 1;
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v14 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_23:
      if ((v6 & 0x80000000) != 0)
      {
        uint64_t v17 = *(uint64_t (**)(unint64_t))(v5 + 48);
        return v17(((unint64_t)a1 + v8 + 24) & ~v8);
      }
      else
      {
        unint64_t v16 = *((void *)a1 + 2);
        if (v16 >= 0xFFFFFFFF) {
          LODWORD(v16) = -1;
        }
        return (v16 + 1);
      }
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_23;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v10 | v15) + 1;
}

void storeEnumTagSinglePayload for FocusedValues.Entry(_WORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = *(void *)(v6 + 64) + ((v8 + 24) & ~v8) + 1;
  if (a3 <= v9)
  {
    int v11 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v14 = ((a3 - v9 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v14))
    {
      int v11 = 4;
    }
    else if (v14 >= 0x100)
    {
      int v11 = 2;
    }
    else
    {
      int v11 = v14 > 1;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (v9 < a2)
  {
    unsigned int v12 = ~v9 + a2;
    if (v10 < 4)
    {
      int v13 = (v12 >> (8 * v10)) + 1;
      if (*(_DWORD *)(v6 + 64) + ((v8 + 24) & ~v8) != -1)
      {
        int v15 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *a1 = v15;
          *((unsigned char *)a1 + 2) = BYTE2(v15);
        }
        else if (v10 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(unsigned char *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        *((unsigned char *)a1 + v10) = v13;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v10) = v13;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)((char *)a1 + v10) = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      *((unsigned char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)((char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1880E80C4);
    case 4:
      *(_DWORD *)((char *)a1 + v10) = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v16 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
          v16(((unint64_t)a1 + v8 + 24) & ~v8, a2);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *((void *)a1 + 1) = 0;
          *((void *)a1 + 2) = 0;
          *(void *)a1 = a2 ^ 0x80000000;
        }
        else
        {
          *((void *)a1 + 2) = (a2 - 1);
        }
      }
      return;
  }
}

uint64_t type metadata completion function for FocusedValueModifier()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FocusedValueModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  size_t v10 = v9 + 7;
  unint64_t v11 = ((v9 + 7 + ((v7 + 8) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8) + 9;
  int v12 = v7 & 0x100000;
  uint64_t v13 = *a2;
  *a1 = *a2;
  if (v8 > 7 || v12 != 0 || v11 > 0x18)
  {
    a1 = (uint64_t *)(v13 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
  }
  else
  {
    unint64_t v16 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
    uint64_t v17 = (const void *)(((unint64_t)a2 + v8 + 8) & ~v8);
    uint64_t v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    if (v18(v17, 1, v4))
    {
      memcpy(v16, v17, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v16, v17, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v4);
    }
    unint64_t v19 = ((unint64_t)v16 + v10) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = ((unint64_t)v17 + v10) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v19 = *(void *)v20;
    *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for FocusedValueModifier(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4)) {
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  }

  return swift_release();
}

void *initializeWithCopy for FocusedValueModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  uint64_t v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  size_t v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  swift_retain();
  if (v9(v8, 1, v4))
  {
    int v10 = *(_DWORD *)(v5 + 84);
    size_t v11 = *(void *)(v5 + 64);
    if (v10) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v11 + 1;
    }
    memcpy(v7, v8, v12);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    unsigned int v14 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v13 = v5 + 56;
    v14(v7, 0, 1, v4);
    int v10 = *(_DWORD *)(v13 + 28);
    size_t v11 = *(void *)(v13 + 8);
  }
  if (v10) {
    size_t v15 = v11;
  }
  else {
    size_t v15 = v11 + 1;
  }
  unint64_t v16 = ((unint64_t)v7 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  swift_retain();
  return a1;
}

void *assignWithCopy for FocusedValueModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
  int v10 = (void *)(((unint64_t)a2 + v8 + 8) & ~v8);
  size_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_12;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  if (v14) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v15 + 1;
  }
  memcpy(v9, v10, v16);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v17 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v7 + 64) + 1;
  }
  unint64_t v18 = ((unint64_t)v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = ((unint64_t)v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v18 = *(void *)v19;
  swift_retain();
  swift_release();
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  return a1;
}

void *initializeWithTake for FocusedValueModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  uint64_t v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
    if (v9) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = v10 + 1;
    }
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    int v13 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v12 = v5 + 56;
    v13(v7, 0, 1, v4);
    int v9 = *(_DWORD *)(v12 + 28);
    size_t v10 = *(void *)(v12 + 8);
  }
  if (v9) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v10 + 1;
  }
  unint64_t v15 = ((unint64_t)v7 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  return a1;
}

void *assignWithTake for FocusedValueModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  int v9 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
  size_t v10 = (void *)(((unint64_t)a2 + v8 + 8) & ~v8);
  size_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_12;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  if (v14) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v15 + 1;
  }
  memcpy(v9, v10, v16);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v17 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v7 + 64) + 1;
  }
  unint64_t v18 = ((unint64_t)v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = ((unint64_t)v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v18 = *(void *)v19;
  swift_release();
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusedValueModifier(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = 7;
  if (!v6) {
    uint64_t v10 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (v8 < a2)
  {
    unint64_t v11 = ((v10 + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
        + 9;
    unsigned int v12 = (a2 - v8 + 255) >> (8 * v11);
    if (v11 < 4) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      unsigned int v14 = 4;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v13 < 0x100) {
      unsigned int v14 = 1;
    }
    if (v13 >= 2) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    switch(v15)
    {
      case 1:
        int v16 = a1[v11];
        if (!a1[v11]) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v16 = *(unsigned __int16 *)&a1[v11];
        if (*(_WORD *)&a1[v11]) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1880E8C58);
      case 4:
        int v16 = *(_DWORD *)&a1[v11];
        if (!v16) {
          break;
        }
LABEL_27:
        int v18 = (v16 - 1) << (8 * v11);
        if (v11 >= 4) {
          int v18 = 0;
        }
        if (((v10
             + *(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)
             + ((v9 + 8) & ~v9)) & 0xFFFFFFF8) == 0xFFFFFFF8)
          int v19 = *a1;
        else {
          int v19 = *(_DWORD *)a1;
        }
        return v8 + (v19 | v18) + 1;
      default:
        break;
    }
  }
  if ((v7 & 0x80000000) != 0)
  {
    unsigned int v21 = (*(uint64_t (**)(unint64_t))(v5 + 48))((unint64_t)&a1[v9 + 8] & ~v9);
    if (v21 >= 2) {
      return v21 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v20 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v20) = -1;
    }
    return (v20 + 1);
  }
}

void storeEnumTagSinglePayload for FocusedValueModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v12 + ((v11 + 8) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v14 = 8 * v13;
  if (v10 < a3)
  {
    unsigned int v15 = (a3 - v10 + 255) >> v14;
    if (v13 <= 3) {
      unsigned int v16 = v15 + 1;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      int v17 = 4;
    }
    else {
      int v17 = 2;
    }
    if (v16 < 0x100) {
      int v17 = 1;
    }
    if (v16 >= 2) {
      int v6 = v17;
    }
    else {
      int v6 = 0;
    }
  }
  if (v10 < a2)
  {
    if (v13 < 4) {
      unsigned int v18 = ((~v10 + a2) >> v14) + 1;
    }
    else {
      unsigned int v18 = 1;
    }
    if (v13 >= 4) {
      int v19 = ~v10 + a2;
    }
    else {
      int v19 = (~(_BYTE)v10 + a2);
    }
    bzero(a1, v13);
    if (v13 == 1) {
      *a1 = v19;
    }
    else {
      *(_DWORD *)a1 = v19;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v18;
        return;
      case 3:
        goto LABEL_63;
      case 4:
        *(_DWORD *)&a1[v13] = v18;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 3:
LABEL_63:
      __break(1u);
      JUMPOUT(0x1880E8F24);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_36;
    default:
LABEL_36:
      if (a2)
      {
LABEL_37:
        if ((v9 & 0x80000000) != 0)
        {
          unsigned int v21 = (unsigned char *)((unint64_t)&a1[v11 + 8] & ~v11);
          if (v9 >= a2)
          {
            uint64_t v25 = a2 + 1;
            uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            unint64_t v27 = (unint64_t)&a1[v11 + 8] & ~v11;
            v26(v27, v25);
          }
          else
          {
            if (v12 <= 3) {
              int v22 = ~(-1 << (8 * v12));
            }
            else {
              int v22 = -1;
            }
            if (v12)
            {
              int v23 = v22 & (~v9 + a2);
              if (v12 <= 3) {
                int v24 = v12;
              }
              else {
                int v24 = 4;
              }
              bzero(v21, v12);
              switch(v24)
              {
                case 2:
                  *(_WORD *)unsigned int v21 = v23;
                  break;
                case 3:
                  *(_WORD *)unsigned int v21 = v23;
                  void v21[2] = BYTE2(v23);
                  break;
                case 4:
                  *(_DWORD *)unsigned int v21 = v23;
                  break;
                default:
                  *unsigned int v21 = v23;
                  break;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v20 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v20 = a2 - 1;
          }
          *(void *)a1 = v20;
        }
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in FocusedValueModifier<A>()
{
  return &protocol witness table for FocusedValueModifier<A>;
}

unint64_t lazy protocol witness table accessor for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions;
  if (!lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions;
  if (!lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions;
  if (!lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions;
  if (!lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static FocusedValueModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static FocusedValueModifier._makeView(modifier:inputs:body:)(*(void *)(v0 + 24), *(_DWORD *)(v0 + 32), *(void *)(v0 + 16));
}

uint64_t type metadata accessor for FocusedValueModifier.Transform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FocusedValueBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for FocusedValueBox()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FocusedValueBox(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  int v9 = v7 + 16;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v10 = *(void *)(v5 + 64);
  }
  else {
    size_t v10 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v11 = ((v7 + 16) & ~(unint64_t)v7) + v10;
  int v12 = v7 & 0x100000;
  if (v8 > 7 || v12 != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v15 + ((v8 & 0xF8 ^ 0x1F8) & v9));
    swift_retain();
  }
  else
  {
    int v17 = *(_DWORD *)a2;
    unint64_t v16 = (unint64_t)a2 + 7;
    *(_DWORD *)a1 = v17;
    unsigned int v18 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v18 = *(_DWORD *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
    int v19 = (void *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = (void *)(((v16 & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8);
    *int v19 = *v20;
    unsigned int v21 = (void *)(((unint64_t)v19 + v8 + 8) & ~v8);
    int v22 = (const void *)(((unint64_t)v20 + v8 + 8) & ~v8);
    int v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    if (v23(v22, 1, v4))
    {
      memcpy(v21, v22, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v21, v22, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v21, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t destroy for FocusedValueBox(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = (v3 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = v5;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(unint64_t, uint64_t))(v9 + 8);
    return v8(v6, v4);
  }
  return result;
}

_DWORD *initializeWithCopy for FocusedValueBox(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  unint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  int v7 = (void *)(((unint64_t)v6 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  int v12 = (void *)(((unint64_t)v7 + v11 + 8) & ~v11);
  size_t v13 = (const void *)(((unint64_t)v8 + v11 + 8) & ~v11);
  char v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  swift_retain();
  if (v14(v13, 1, v9))
  {
    if (*(_DWORD *)(v10 + 84)) {
      size_t v15 = *(void *)(v10 + 64);
    }
    else {
      size_t v15 = *(void *)(v10 + 64) + 1;
    }
    memcpy(v12, v13, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v12, v13, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
  }
  return a1;
}

_DWORD *assignWithCopy for FocusedValueBox(_DWORD *a1, int *a2, uint64_t a3)
{
  int v6 = *a2;
  unint64_t v5 = (unint64_t)a2 + 7;
  *a1 = v6;
  int v7 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *(_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (void *)(((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)(((v5 & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v8 = *v9;
  swift_retain();
  swift_release();
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  size_t v13 = (void *)(((unint64_t)v8 + v12 + 8) & ~v12);
  char v14 = (void *)(((unint64_t)v9 + v12 + 8) & ~v12);
  size_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v9) = v15(v13, 1, v10);
  int v16 = v15(v14, 1, v10);
  if (v9)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v13, v14, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
      return a1;
    }
    int v17 = *(_DWORD *)(v11 + 84);
    size_t v18 = *(void *)(v11 + 64);
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v13, v14, v10);
      return a1;
    }
    uint64_t v20 = *(void (**)(void *, uint64_t))(v11 + 8);
    uint64_t v19 = v11 + 8;
    v20(v13, v10);
    int v17 = *(_DWORD *)(v19 + 76);
    size_t v18 = *(void *)(v19 + 56);
  }
  if (v17) {
    size_t v21 = v18;
  }
  else {
    size_t v21 = v18 + 1;
  }
  memcpy(v13, v14, v21);
  return a1;
}

_DWORD *initializeWithTake for FocusedValueBox(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  int v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  int v7 = (void *)(((unint64_t)v6 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (void *)(((unint64_t)v7 + v11 + 8) & ~v11);
  size_t v13 = (const void *)(((unint64_t)v8 + v11 + 8) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
  {
    if (*(_DWORD *)(v10 + 84)) {
      size_t v14 = *(void *)(v10 + 64);
    }
    else {
      size_t v14 = *(void *)(v10 + 64) + 1;
    }
    memcpy(v12, v13, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v12, v13, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
  }
  return a1;
}

_DWORD *assignWithTake for FocusedValueBox(_DWORD *a1, int *a2, uint64_t a3)
{
  int v6 = *a2;
  unint64_t v5 = (unint64_t)a2 + 7;
  *a1 = v6;
  int v7 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *(_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (void *)(((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)(((v5 & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v8 = *v9;
  swift_release();
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  size_t v13 = (void *)(((unint64_t)v8 + v12 + 8) & ~v12);
  size_t v14 = (void *)(((unint64_t)v9 + v12 + 8) & ~v12);
  size_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v16 = v15(v13, 1, v10);
  int v17 = v15(v14, 1, v10);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v13, v14, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
      return a1;
    }
    int v18 = *(_DWORD *)(v11 + 84);
    size_t v19 = *(void *)(v11 + 64);
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v13, v14, v10);
      return a1;
    }
    size_t v21 = *(void (**)(void *, uint64_t))(v11 + 8);
    uint64_t v20 = v11 + 8;
    v21(v13, v10);
    int v18 = *(_DWORD *)(v20 + 76);
    size_t v19 = *(void *)(v20 + 56);
  }
  if (v18) {
    size_t v22 = v19;
  }
  else {
    size_t v22 = v19 + 1;
  }
  memcpy(v13, v14, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusedValueBox(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v9;
  }
  if (!a2) {
    return 0;
  }
  int v10 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_28;
  }
  uint64_t v11 = v9 + ((v8 + 16) & ~v8);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_28:
      int v17 = (unint64_t *)(((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8);
      if (v6 > 0x7FFFFFFE)
      {
        unsigned int v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v8 + 8) & ~v8);
        if (v19 >= 2) {
          return v19 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v18 = *v17;
        if (v18 >= 0xFFFFFFFF) {
          LODWORD(v18) = -1;
        }
        if ((v18 + 1) >= 2) {
          return v18;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_28;
  }
LABEL_20:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v11 | v16) + 1;
}

void storeEnumTagSinglePayload for FocusedValueBox(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v11 + 16) & ~v11) + v12;
  BOOL v14 = a3 >= v10;
  unsigned int v15 = a3 - v10;
  if (v15 == 0 || !v14)
  {
LABEL_17:
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  if (v13 > 3)
  {
    int v6 = 1;
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  unsigned int v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
  if (!HIWORD(v16))
  {
    if (v16 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v16 > 1;
    }
    goto LABEL_17;
  }
  int v6 = 4;
  if (v10 < a2)
  {
LABEL_18:
    unsigned int v17 = ~v10 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v13)
      {
        int v19 = v17 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v18;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v13] = v18;
        return;
      default:
        return;
    }
  }
LABEL_25:
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x1880E9FA0);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        uint64_t v20 = (void *)((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8);
        if (v9 > 0x7FFFFFFE)
        {
          size_t v21 = (unsigned char *)(((unint64_t)v20 + v11 + 8) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v25 = a2 + 1;
            uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            v26(((unint64_t)v20 + v11 + 8) & ~v11, v25);
          }
          else
          {
            if (v12 <= 3) {
              int v22 = ~(-1 << (8 * v12));
            }
            else {
              int v22 = -1;
            }
            if (v12)
            {
              int v23 = v22 & (~v9 + a2);
              if (v12 <= 3) {
                int v24 = v12;
              }
              else {
                int v24 = 4;
              }
              bzero(v21, v12);
              switch(v24)
              {
                case 2:
                  *(_WORD *)size_t v21 = v23;
                  break;
                case 3:
                  *(_WORD *)size_t v21 = v23;
                  void v21[2] = BYTE2(v23);
                  break;
                case 4:
                  *(_DWORD *)size_t v21 = v23;
                  break;
                default:
                  *size_t v21 = v23;
                  break;
              }
            }
          }
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *uint64_t v20 = 0;
          *(_DWORD *)uint64_t v20 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *uint64_t v20 = a2;
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for FocusedValuesInputKey()
{
  return &type metadata for FocusedValuesInputKey;
}

uint64_t type metadata completion function for FocusedValueModifier.Transform()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FocusedValueModifier.Transform(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v10 = ((((((v7 + 21) & ~(unint64_t)v7) + v9) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL)
      + 4;
  int v11 = v7 & 0x100000;
  if ((v8 | 3uLL) > 7 || v11 != 0 || v10 > 0x18)
  {
    uint64_t v14 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v14 + ((v8 + 16) & ~(v8 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    unsigned int v15 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    unsigned int v16 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *unsigned int v16 = *v15;
    unsigned int v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v18 = *v17;
    int v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v20 = *v19;
    unint64_t v21 = ((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v22 = ((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    int v23 = *(_DWORD *)v22;
    *(unsigned char *)(v21 + 4) = *(unsigned char *)(v22 + 4);
    *(_DWORD *)unint64_t v21 = v23;
    int v24 = (void *)((v21 + v8 + 5) & ~v8);
    uint64_t v25 = (const void *)((v22 + v8 + 5) & ~v8);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((v22 + v8 + 5) & ~v8, 1, v4))
    {
      memcpy(v24, v25, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v24, v25, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v24, 0, 1, v4);
    }
    *((unsigned char *)v24 + v9) = *((unsigned char *)v25 + v9);
    unint64_t v26 = ((unint64_t)v24 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v27 = ((unint64_t)v25 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)(v26 + 4) = *(_DWORD *)(v27 + 4);
    *(_DWORD *)((v26 + 11) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((v27 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  }
  return v3;
}

uint64_t destroy for FocusedValueModifier.Transform(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v3 = (((((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
      + *(unsigned __int8 *)(v6 + 80)
      + 5) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v3, 1, v2);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
    return v5(v3, v2);
  }
  return result;
}

_DWORD *initializeWithCopy for FocusedValueModifier.Transform(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  int v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  size_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *size_t v9 = *v10;
  unint64_t v11 = ((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = ((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  LODWORD(v9) = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  *(_DWORD *)unint64_t v11 = v9;
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  unsigned int v16 = (char *)((v15 + 5 + v11) & ~v15);
  unsigned int v17 = (char *)((v15 + 5 + v12) & ~v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v17, 1, v13))
  {
    int v18 = *(_DWORD *)(v14 + 84);
    size_t v19 = *(void *)(v14 + 64);
    if (v18) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v19 + 1;
    }
    memcpy(v16, v17, v20);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v17, v13);
    unint64_t v22 = *(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56);
    uint64_t v21 = v14 + 56;
    v22(v16, 0, 1, v13);
    int v18 = *(_DWORD *)(v21 + 28);
    size_t v19 = *(void *)(v21 + 8);
  }
  if (v18) {
    size_t v23 = v19;
  }
  else {
    size_t v23 = v19 + 1;
  }
  unint64_t v24 = (unint64_t)&v16[v23];
  unint64_t v25 = (unint64_t)&v17[v23];
  *(unsigned char *)unint64_t v24 = *(unsigned char *)v25;
  v24 &= 0xFFFFFFFFFFFFFFFCLL;
  v25 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v24 + 4) = *(_DWORD *)(v25 + 4);
  *(_DWORD *)((v24 + 11) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((v25 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *assignWithCopy for FocusedValueModifier.Transform(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  int v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  size_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *size_t v9 = *v10;
  unint64_t v11 = ((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = ((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  LODWORD(v9) = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  *(_DWORD *)unint64_t v11 = v9;
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  unsigned int v16 = (char *)((v15 + 5 + v11) & ~v15);
  unsigned int v17 = (char *)((v15 + 5 + v12) & ~v15);
  int v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v19 = v18(v16, 1, v13);
  int v20 = v18(v17, 1, v13);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v17, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, v13);
      goto LABEL_12;
    }
    int v21 = *(_DWORD *)(v14 + 84);
    size_t v22 = *(void *)(v14 + 64);
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v16, v17, v13);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    int v21 = *(_DWORD *)(v14 + 84);
    size_t v22 = *(void *)(v14 + 64);
  }
  if (v21) {
    size_t v23 = v22;
  }
  else {
    size_t v23 = v22 + 1;
  }
  memcpy(v16, v17, v23);
LABEL_12:
  if (*(_DWORD *)(v14 + 84)) {
    uint64_t v24 = *(void *)(v14 + 64);
  }
  else {
    uint64_t v24 = *(void *)(v14 + 64) + 1;
  }
  unint64_t v25 = (unint64_t)&v16[v24];
  unint64_t v26 = (unint64_t)&v17[v24];
  *(unsigned char *)unint64_t v25 = *(unsigned char *)v26;
  v25 &= 0xFFFFFFFFFFFFFFFCLL;
  v26 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v25 + 4) = *(_DWORD *)(v26 + 4);
  *(_DWORD *)((v25 + 11) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((v26 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *initializeWithTake for FocusedValueModifier.Transform(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  int v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  size_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *size_t v9 = *v10;
  unint64_t v11 = ((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = ((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  LODWORD(v9) = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  *(_DWORD *)unint64_t v11 = v9;
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  unsigned int v16 = (char *)((v15 + 5 + v11) & ~v15);
  unsigned int v17 = (char *)((v15 + 5 + v12) & ~v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v17, 1, v13))
  {
    int v18 = *(_DWORD *)(v14 + 84);
    size_t v19 = *(void *)(v14 + 64);
    if (v18) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v19 + 1;
    }
    memcpy(v16, v17, v20);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v17, v13);
    size_t v22 = *(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56);
    uint64_t v21 = v14 + 56;
    v22(v16, 0, 1, v13);
    int v18 = *(_DWORD *)(v21 + 28);
    size_t v19 = *(void *)(v21 + 8);
  }
  if (v18) {
    size_t v23 = v19;
  }
  else {
    size_t v23 = v19 + 1;
  }
  unint64_t v24 = (unint64_t)&v16[v23];
  unint64_t v25 = (unint64_t)&v17[v23];
  *(unsigned char *)unint64_t v24 = *(unsigned char *)v25;
  v24 &= 0xFFFFFFFFFFFFFFFCLL;
  v25 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v24 + 4) = *(_DWORD *)(v25 + 4);
  *(_DWORD *)((v24 + 11) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((v25 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *assignWithTake for FocusedValueModifier.Transform(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  int v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  size_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *size_t v9 = *v10;
  unint64_t v11 = ((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = ((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  LODWORD(v9) = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  *(_DWORD *)unint64_t v11 = v9;
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  unsigned int v16 = (char *)((v15 + 5 + v11) & ~v15);
  unsigned int v17 = (char *)((v15 + 5 + v12) & ~v15);
  int v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v19 = v18(v16, 1, v13);
  int v20 = v18(v17, 1, v13);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v17, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, v13);
      goto LABEL_12;
    }
    int v21 = *(_DWORD *)(v14 + 84);
    size_t v22 = *(void *)(v14 + 64);
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v16, v17, v13);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    int v21 = *(_DWORD *)(v14 + 84);
    size_t v22 = *(void *)(v14 + 64);
  }
  if (v21) {
    size_t v23 = v22;
  }
  else {
    size_t v23 = v22 + 1;
  }
  memcpy(v16, v17, v23);
LABEL_12:
  if (*(_DWORD *)(v14 + 84)) {
    uint64_t v24 = *(void *)(v14 + 64);
  }
  else {
    uint64_t v24 = *(void *)(v14 + 64) + 1;
  }
  unint64_t v25 = (unint64_t)&v16[v24];
  unint64_t v26 = (unint64_t)&v17[v24];
  *(unsigned char *)unint64_t v25 = *(unsigned char *)v26;
  v25 &= 0xFFFFFFFFFFFFFFFCLL;
  v26 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v25 + 4) = *(_DWORD *)(v26 + 4);
  *(_DWORD *)((v25 + 11) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((v26 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusedValueModifier.Transform(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  unsigned int v7 = v6 - 1;
  if (!v6) {
    unsigned int v7 = 0;
  }
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (!v6) {
    ++v10;
  }
  if (!a2) {
    return 0;
  }
  if (v8 < a2)
  {
    unint64_t v11 = ((((((v9 + 21) & ~v9) + v10) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    unsigned int v12 = a2 - v8;
    uint64_t v13 = v11 & 0xFFFFFFFC;
    if ((v11 & 0xFFFFFFFC) != 0) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = v12 + 1;
    }
    if (v14 >= 0x10000) {
      LODWORD(v15) = 4;
    }
    else {
      LODWORD(v15) = 2;
    }
    if (v14 < 0x100) {
      LODWORD(v15) = 1;
    }
    if (v14 >= 2) {
      uint64_t v15 = v15;
    }
    else {
      uint64_t v15 = 0;
    }
    switch(v15)
    {
      case 1:
        int v16 = *((unsigned __int8 *)a1 + v11);
        if (!v16) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v16 = *(unsigned __int16 *)((char *)a1 + v11);
        if (v16) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1880EAD08);
      case 4:
        int v16 = *(_DWORD *)((char *)a1 + v11);
        if (!v16) {
          break;
        }
LABEL_25:
        int v17 = v16 - 1;
        if (v13)
        {
          int v17 = 0;
          LODWORD(v13) = *a1;
        }
        int v18 = v8 + (v13 | v17);
        return (v18 + 1);
      default:
        break;
    }
  }
  unint64_t v19 = ((((((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
         + 7) & 0xFFFFFFFFFFFFFFFCLL)
       + v9
       + 5) & ~v9;
  if (v7 >= 0xFE)
  {
    unsigned int v20 = (*(uint64_t (**)(unint64_t))(v5 + 48))(v19);
    if (v20 >= 2) {
      return v20 - 1;
    }
    else {
      return 0;
    }
  }
  unsigned int v22 = *(unsigned __int8 *)(v19 + v10);
  if (v22 < 2) {
    return 0;
  }
  int v18 = (v22 + 2147483646) & 0x7FFFFFFF;
  return (v18 + 1);
}

void storeEnumTagSinglePayload for FocusedValueModifier.Transform(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0xFE) {
    unsigned int v10 = 254;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((((((v11 + 21) & ~v11) + v12) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if (v10 < a3)
  {
    unsigned int v14 = a3 - v10;
    if (((((((v11 + 21) & ~v11) + v12) & 0xFFFFFFFC) + 11) & 0xFFFFFFFC) == 0xFFFFFFFC) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v6 = v16;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((((((v11 + 21) & ~v11) + v12) & 0xFFFFFFFC) + 11) & 0xFFFFFFFC) == 0xFFFFFFFC) {
      int v17 = a2 - v10;
    }
    else {
      int v17 = 1;
    }
    if (((((((v11 + 21) & ~v11) + v12) & 0xFFFFFFFC) + 11) & 0xFFFFFFFC) != 0xFFFFFFFC)
    {
      int v18 = ~v10 + a2;
      bzero(a1, v13);
      *(_DWORD *)a1 = v18;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v17;
        return;
      case 3:
        goto LABEL_56;
      case 4:
        *(_DWORD *)&a1[v13] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_56:
      __break(1u);
      JUMPOUT(0x1880EAFCCLL);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        unint64_t v19 = (unsigned char *)((((((((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                         + 7) & 0xFFFFFFFFFFFFFFFCLL)
                       + v11
                       + 5) & ~v11);
        if (v9 < 0xFE)
        {
          v19[v12] = a2 + 1;
        }
        else if (v9 >= a2)
        {
          uint64_t v23 = a2 + 1;
          uint64_t v24 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
          unint64_t v25 = (((((((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                 + 7) & 0xFFFFFFFFFFFFFFFCLL)
               + v11
               + 5) & ~v11;
          v24(v25, v23);
        }
        else
        {
          if (v12 <= 3) {
            int v20 = ~(-1 << (8 * v12));
          }
          else {
            int v20 = -1;
          }
          if (v12)
          {
            int v21 = v20 & (~v9 + a2);
            if (v12 <= 3) {
              int v22 = v12;
            }
            else {
              int v22 = 4;
            }
            bzero(v19, v12);
            switch(v22)
            {
              case 2:
                *(_WORD *)unint64_t v19 = v21;
                break;
              case 3:
                *(_WORD *)unint64_t v19 = v21;
                v19[2] = BYTE2(v21);
                break;
              case 4:
                *(_DWORD *)unint64_t v19 = v21;
                break;
              default:
                *unint64_t v19 = v21;
                break;
            }
          }
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for FocusedValueList.Key()
{
  return &type metadata for FocusedValueList.Key;
}

uint64_t initializeBufferWithCopyOfBuffer for FocusedValueScope(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FocusedValueScope(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FocusedValueScope(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FocusedValueScope()
{
  return &type metadata for FocusedValueScope;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in FocusedValueBox<A>()
{
  return &protocol witness table for FocusedValue<A>;
}

uint64_t base witness table accessor for _AttributeBody in FocusedValueModifier<A>.Transform<A1>()
{
  return swift_getWitnessTable();
}

uint64_t sub_1880EB1D4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = type metadata accessor for FocusedValueModifier();
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));
  swift_release();
  uint64_t v4 = v3 + *(int *)(v2 + 28);
  uint64_t v5 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v1);
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FocusedValueModifier.Transform.updateValue()(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for FocusedValueModifier() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  int v7 = *(unsigned __int8 *)(v1 + v6 + *(void *)(v5 + 64));

  return closure #1 in FocusedValueModifier.Transform.updateValue()(a1, v1 + v6, v7, v3, v4);
}

uint64_t sub_1880EB3D0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in FocusedValueModifier.Transform.updateValue()(uint64_t *a1)
{
  return closure #2 in FocusedValueModifier.Transform.updateValue()(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t initializeWithCopy for FocusedValueList.Item(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FocusedValueList.Item(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FocusedValueList.Item(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FocusedValueList.Item()
{
  return &type metadata for FocusedValueList.Item;
}

uint64_t closure #1 in compareValues<A>(_:_:options:)partial apply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0(a1, a2, a3, a4, a5, a6, a7, a8);
}

ValueMetadata *type metadata accessor for NavigationDestinationBuilder()
{
  return &type metadata for NavigationDestinationBuilder;
}

uint64_t Subview.traits.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 88);
  return swift_bridgeObjectRetain();
}

uint64_t EnvironmentValues.areMultimodalBadgesEnabled.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BadgesEnabledKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgesEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<BadgesEnabledKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BadgesEnabledKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgesEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<BadgesEnabledKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.areMultimodalBadgesEnabled.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BadgesEnabledKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgesEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<BadgesEnabledKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.navigationBarHost.setter(uint64_t a1)
{
  return EnvironmentValues.preferredPencilDoubleTapAction.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationBarHostKey>, (uint64_t)&type metadata for NavigationBarHostKey, (uint64_t)&protocol witness table for NavigationBarHostKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationBarHostKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.multimodalListLayout.setter(uint64_t a1)
{
  return EnvironmentValues.preferredPencilDoubleTapAction.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<MultimodalListLayoutKey>, (uint64_t)&type metadata for MultimodalListLayoutKey, (uint64_t)&protocol witness table for MultimodalListLayoutKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MultimodalListLayoutKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.multimodalListLayout.getter()
{
  return EnvironmentValues.fileDialogDefaultDirectory.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<MultimodalListLayoutKey>, (uint64_t)&type metadata for MultimodalListLayoutKey, (uint64_t)&protocol witness table for MultimodalListLayoutKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MultimodalListLayoutKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t NavigationBarHost.rawValue.getter()
{
  return *v0;
}

uint64_t EnvironmentValues.navigationBarHost.getter()
{
  return EnvironmentValues.fileDialogDefaultDirectory.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationBarHostKey>, (uint64_t)&type metadata for NavigationBarHostKey, (uint64_t)&protocol witness table for NavigationBarHostKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationBarHostKey> and conformance EnvironmentPropertyKey<A>);
}

SwiftUI::NavigationBarHost_optional __swiftcall NavigationBarHost.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!rawValue) {
    char v2 = 0;
  }
  char *v1 = v2;
  return (SwiftUI::NavigationBarHost_optional)rawValue;
}

void *static NavigationBarHost.allCases.getter()
{
  return &outlined read-only object #0 of static NavigationBarHost.allCases.getter;
}

unint64_t lazy protocol witness table accessor for type [NavigationBarHost] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [NavigationBarHost] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NavigationBarHost] and conformance [A])
  {
    type metadata accessor for [NavigationBarHost]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [NavigationBarHost] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [NavigationBarHost]()
{
  if (!lazy cache variable for type metadata for [NavigationBarHost])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [NavigationBarHost]);
    }
  }
}

void protocol witness for static CaseIterable.allCases.getter in conformance NavigationBarHost(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance NavigationBarHost;
}

unsigned char *storeEnumTagSinglePayload for NavigationBarHost(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1880EBA18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BadgesEnabledKey()
{
  return &type metadata for BadgesEnabledKey;
}

ValueMetadata *type metadata accessor for MultimodalListLayoutKey()
{
  return &type metadata for MultimodalListLayoutKey;
}

ValueMetadata *type metadata accessor for NavigationBarHostKey()
{
  return &type metadata for NavigationBarHostKey;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v38)(uint64_t *__return_ptr, void *);
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  int64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  int64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  void *v65;
  unint64_t v66;
  char v67;
  char v68;
  id v69;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  char v82;
  void *v83;
  int64_t v84;
  char v86;
  unsigned __int16 v87;
  uint64_t v88;
  uint64_t v89;
  long long v90;
  uint64_t v91;
  int64_t v92;
  uint64_t v93;
  uint64_t *v94;
  int v95;
  int v96;
  unint64_t v97;
  char v98;
  uint64_t v99;
  void (*v100)(uint64_t *__return_ptr, unsigned char *);
  uint64_t v101;
  char v102;
  uint64_t v103;
  long long v104;
  uint64_t v105;
  uint64_t v106;
  _OWORD v107[4];
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int64_t v112;
  char v113;
  uint64_t v114;
  unsigned char v115[480];
  uint64_t v116;
  char v117;
  unsigned char v118[7];
  int64_t v119;
  char v120;
  void (*v121)(void *__return_ptr, void);
  uint64_t v122;
  _OWORD v123[4];
  char v124;
  char v125;
  unsigned char __dst[423];
  _DWORD v127[2];
  char v128;
  _DWORD v129[2];
  _DWORD v130[2];
  char v131;
  void v132[52];
  void v133[2];
  char v134;
  uint64_t v135;
  uint64_t v136;
  BOOL v137;
  unsigned char v138[304];
  uint64_t v139[38];
  void v140[8];
  unsigned __int16 v141;
  unsigned char v142[392];
  unsigned char v143[416];
  unint64_t v144;

  v93 = *(void *)a1;
  char v10 = *(unsigned char *)(a1 + 8);
  v130[0] = *(_DWORD *)(a1 + 9);
  *(_DWORD *)((char *)v130 + 3) = *(_DWORD *)(a1 + 12);
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(unsigned __int8 *)(a1 + 24);
  v129[0] = *(_DWORD *)(a1 + 25);
  *(_DWORD *)((char *)v129 + 3) = *(_DWORD *)(a1 + 28);
  v101 = *(void *)(a1 + 32);
  char v13 = *(unsigned char *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 41);
  *(_DWORD *)((char *)v127 + 3) = *(_DWORD *)(a1 + 44);
  v127[0] = v14;
  int64_t v15 = *(void *)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 56);
  memcpy(__dst, (const void *)(a1 + 57), sizeof(__dst));
  char v17 = v10 & 1;
  v143[392] = v10 & 1;
  v131 = v10;
  v128 = v13;
  v125 = v10 & 1;
  v99 = *(void *)(a1 + 488);
  v100 = *(void (**)(uint64_t *__return_ptr, unsigned char *))(a1 + 480);
  swift_retain();
  outlined retain of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>(a1);
  int v18 = (uint64_t *)(a2 + 16);
  uint64_t v92 = v15;
  uint64_t v96 = v16;
  if (v15) {
    BOOL v19 = 0;
  }
  else {
    BOOL v19 = v16 == 2;
  }
  char v20 = v19;
  v86 = v20;
  if (v11) {
    BOOL v21 = 0;
  }
  else {
    BOOL v21 = v12 == 2;
  }
  char v22 = !v21;
  uint64_t v82 = v22;
  v83 = (void *)MEMORY[0x1E4FBC860];
  v84 = v11;
  uint64_t v23 = v93;
  uint64_t v24 = v12;
  v95 = v12;
  v94 = v18;
  while (1)
  {
    if (v17)
    {
      if (!v128) {
        goto LABEL_106;
      }
    }
    else
    {
      if (v23 == v101) {
        char v25 = v128;
      }
      else {
        char v25 = 1;
      }
      if (v25)
      {
        memcpy(v132, &__dst[7], sizeof(v132));
        uint64_t v26 = v93;
        if (v131) {
          goto LABEL_109;
        }
LABEL_36:
        if (v23 < v26)
        {
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
LABEL_103:
          __break(1u);
LABEL_104:
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          memcpy(v132, &__dst[7], sizeof(v132));
LABEL_107:
          swift_release();
          __break(1u);
LABEL_108:
          swift_release();
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          swift_release();
          __break(1u);
LABEL_111:
          swift_release();
          __break(1u);
LABEL_112:
          swift_release();
          __break(1u);
LABEL_113:
          swift_release_n();
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x1880EC6C0);
        }
        if (v26 >= v23)
        {
          if ((_BYTE)v24)
          {
            if (v24 == 1)
            {
              if (v12 == 1 && v11 < v84) {
                goto LABEL_103;
              }
            }
            else if (v82)
            {
              goto LABEL_100;
            }
          }
          else if (v12)
          {
            if (v12 != 2) {
              goto LABEL_111;
            }
          }
          else if (v11 < v84)
          {
            goto LABEL_104;
          }
        }
        goto LABEL_49;
      }
    }
    if (!(_BYTE)v24)
    {
      if (v96) {
        goto LABEL_32;
      }
LABEL_29:
      if (v11 == v92) {
        goto LABEL_30;
      }
      goto LABEL_32;
    }
    if (v24 == 1)
    {
      if (v96 != 1) {
        goto LABEL_32;
      }
      goto LABEL_29;
    }
    if (v86)
    {
LABEL_30:
      v124 = 0;
      memset(v123, 0, sizeof(v123));
      goto LABEL_80;
    }
LABEL_32:
    memcpy(v132, &__dst[7], sizeof(v132));
    if (v131)
    {
      if ((v17 & 1) == 0) {
        goto LABEL_109;
      }
    }
    else
    {
      uint64_t v26 = v93;
      if ((v17 & 1) == 0) {
        goto LABEL_36;
      }
    }
LABEL_49:
    if (v128)
    {
      if (v17) {
        goto LABEL_108;
      }
    }
    else
    {
      if (v17) {
        goto LABEL_107;
      }
      if (v23 >= v101)
      {
        if (v101 < v23) {
          goto LABEL_99;
        }
        if ((_BYTE)v24)
        {
          if (v24 == 1)
          {
            if (v96 != 1) {
              goto LABEL_110;
            }
            if (v11 >= v92) {
              goto LABEL_101;
            }
          }
          else if (v86)
          {
            goto LABEL_102;
          }
        }
        else if (v96)
        {
          if (v96 != 1) {
            goto LABEL_112;
          }
        }
        else if (v11 >= v92)
        {
          goto LABEL_105;
        }
      }
    }
    outlined init with take of NavigationState.Base(v132, v142);
    outlined init with take of NavigationState.Base(v142, v143);
    int v27 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v143);
    v144 = v11;
    v102 = v17;
    if (v27)
    {
      uint64_t v97 = v23;
      if (v27 == 1)
      {
        uint64_t v28 = (const void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v143);
        memcpy(v115, v28, 0x188uLL);
        memcpy(v138, v28, 0x12BuLL);
        uint64_t v29 = *(void *)&v115[304];
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v132);
        outlined release of NavigationState.StackContent((uint64_t)v142, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
        outlined consume of ResolvedNavigationDestinations?(v29);
        unint64_t v30 = v23;
        if (v23) {
          goto LABEL_113;
        }
        specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(0, 0, v144, v24, (uint64_t)v138, 0, (uint64_t)v123);
        outlined release of NavigationColumnState((uint64_t *)v115);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v132);
        LODWORD(v12) = v95;
        int v18 = v94;
      }
      else
      {
        uint64_t v44 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v143);
        uint64_t v45 = *(void *)v44;
        long long v46 = *(void *)(v44 + 8);
        uint64_t v12 = *(void *)(v44 + 16);
        uint64_t v47 = *(void *)(v44 + 24);
        long long v48 = *(void *)(v44 + 32);
        uint64_t v49 = *(void *)(v44 + 40);
        uint64_t v50 = *(void *)(v44 + 48);
        uint64_t v51 = *(void *)(v44 + 56);
        uint64_t v52 = *(void *)(v44 + 64);
        uint64_t v53 = *(_WORD *)(v44 + 72);
        v140[0] = v46;
        v140[1] = v12;
        v140[2] = v47;
        v140[3] = v48;
        v140[4] = v49;
        v140[5] = v50;
        v140[6] = v51;
        v140[7] = v52;
        v141 = v53;
        if ((v97 & 0x8000000000000000) != 0) {
          goto LABEL_96;
        }
        if (*(void *)(v45 + 16) < v97) {
          goto LABEL_97;
        }
        uint64_t v87 = v53;
        uint64_t v88 = v52;
        v89 = v51;
        uint64_t v91 = v50;
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v132);
        outlined release of NavigationState.StackContent((uint64_t)v142, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
        uint64_t v54 = swift_bridgeObjectRetain();
        uint64_t v55 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v54, (uint64_t)v140, 0, (2 * v97) | 1);
        swift_bridgeObjectRelease();
        if (v97 >= *(void *)(v45 + 16)) {
          goto LABEL_98;
        }
        memcpy(v139, (const void *)(v45 + 304 * v97 + 32), 0x12BuLL);
        outlined retain of NavigationColumnState(v139);
        swift_bridgeObjectRelease();
        specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(v97, 0, v144, v24, (uint64_t)v139, v55, (uint64_t)v123);
        outlined consume of NavigationSplitViewState?(v46, v12, v47, v48, v49, v91, v89, v88, v87, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        outlined release of NavigationColumnState(v139);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v132);
        LODWORD(v12) = v95;
        int v18 = v94;
        unint64_t v30 = v97;
      }
    }
    else
    {
      uint64_t v31 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v143);
      uint64_t v32 = *(void *)v31;
      uint64_t v33 = *(unsigned __int8 *)(v31 + 8);
      uint64_t v34 = *(void *)(v31 + 16);
      uint64_t v35 = v132[51];
      outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v132);
      uint64_t v36 = static HorizontalAlignment.center.getter();
      if (!*(void *)(v35 + 16)) {
        goto LABEL_95;
      }
      uint64_t v37 = v36;
      outlined init with copy of _VariadicView_Children(v35 + 32, (uint64_t)&v114);
      v111 = v37;
      v112 = 0;
      v113 = 1;
      v133[0] = 0;
      v133[1] = v32;
      v134 = v33;
      v135 = v34;
      v136 = 0;
      v137 = v33 == 3;
      unint64_t v30 = v23;
      uint64_t v38 = (void (*)(uint64_t *__return_ptr, void *))v132[49];
      uint64_t v39 = v33 >= 3 ? 3 : v33;
      v98 = v39;
      outlined init with copy of UINavigationPresentationAdaptor?((uint64_t)&v111, (uint64_t)v115, (uint64_t (*)(void))type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
      *(void *)&v115[80] = 0;
      *(void *)&v115[88] = v32;
      *(void *)&v115[96] = v33;
      *(void *)&v115[104] = v34;
      *(void *)&v115[112] = 0;
      v115[120] = v33 == 3;
      LODWORD(v12) = v95;
      v115[121] = 1;
      uint64_t v40 = swift_allocObject();
      *(unsigned char *)(v40 + 16) = 1;
      outlined init with copy of UINavigationPresentationAdaptor?((uint64_t)v115, (uint64_t)v107, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
      v109 = a8;
      v110 = v40;
      outlined destroy of UINavigationPresentationAdaptor?((uint64_t)v115, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
      v38(&v103, v133);
      LOBYTE(v40) = v103;
      int v90 = v104;
      uint64_t v41 = v105;
      uint64_t v42 = v106;
      outlined init with copy of UINavigationPresentationAdaptor?((uint64_t)v107, (uint64_t)v115, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
      v115[144] = v40;
      *(_OWORD *)&v115[152] = v90;
      *(void *)&v115[168] = v41;
      *(void *)&v115[176] = v42;
      outlined destroy of UINavigationPresentationAdaptor?((uint64_t)v107, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
      type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>();
      lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>);
      uint64_t v43 = AnyView.init<A>(_:)();
      outlined destroy of UINavigationPresentationAdaptor?((uint64_t)&v111, (uint64_t (*)(void))type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
      memset((char *)&v123[1] + 8, 0, 40);
      v124 = 2;
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v132);
      *(void *)&v123[0] = v43;
      BYTE8(v123[0]) = v98;
      *(void *)&v123[1] = 0;
      int v18 = v94;
    }
    outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v132);
    uint64_t v23 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v30, v102 & 1);
    char v17 = v56;
    int64_t v11 = v57;
    uint64_t v24 = v58;
    outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v132);
    v125 = v17 & 1;
LABEL_80:
    _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v123, (uint64_t)v107, &lazy cache variable for type metadata for NavigationState.StackContent.PositionedView?, (uint64_t)&type metadata for NavigationState.StackContent.PositionedView);
    if (!*(void *)&v107[0]) {
      break;
    }
    *(_OWORD *)&v115[32] = v107[2];
    *(_OWORD *)&v115[48] = v107[3];
    v115[64] = v108;
    *(_OWORD *)v115 = v107[0];
    *(_OWORD *)&v115[16] = v107[1];
    v100(&v111, v115);
    uint64_t v59 = v111;
    uint64_t v60 = v112;
    outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v115);
    if (v60 >= 1)
    {
      swift_beginAccess();
      int v61 = *v18;
      if (*(void *)(*v18 + 16) && (uint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v60), (v63 & 1) != 0))
      {
        uint64_t v64 = v24;
        uint64_t v65 = *(void **)(*(void *)(v61 + 56) + 8 * v62);
        swift_endAccess();
        swift_beginAccess();
        v66 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v60);
        uint64_t v68 = v67;
        uint64_t v69 = v65;
        if (v68)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v71 = *v18;
          *(void *)&v107[0] = *v18;
          uint64_t *v18 = 0x8000000000000000;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            uint64_t v71 = *(void *)&v107[0];
          }
          uint64_t v72 = *(void **)(*(void *)(v71 + 56) + 8 * v66);
          specialized _NativeDictionary._delete(at:)(v66, v71);
          uint64_t *v18 = v71;

          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        uint64_t v73 = swift_allocObject();
        swift_weakInit();
        uint64_t v74 = swift_allocObject();
        *(void *)(v74 + 16) = v73;
        *(void *)(v74 + 24) = v69;
        char v75 = swift_allocObject();
        *(void *)(v75 + 16) = a5;
        *(void *)(v75 + 24) = v74;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83[2] + 1, 1, v83);
        }
        uint64_t v24 = v64;
        uint64_t v77 = v83[2];
        int v76 = v83[3];
        if (v77 >= v76 >> 1) {
          v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v76 > 1), v77 + 1, 1, v83);
        }
        v83[2] = v77 + 1;
        uint64_t v78 = &v83[2 * v77];
        v78[4] = a6;
        v78[5] = v75;
        char v17 = v125;
      }
      else
      {
        swift_endAccess();
      }
    }
  }
  *(_DWORD *)&v115[9] = v130[0];
  *(_DWORD *)&v115[12] = *(_DWORD *)((char *)v130 + 3);
  *(_DWORD *)&v115[25] = v129[0];
  *(_DWORD *)&v115[28] = *(_DWORD *)((char *)v129 + 3);
  *(_DWORD *)&v115[41] = v127[0];
  *(_DWORD *)&v115[44] = *(_DWORD *)((char *)v127 + 3);
  *(_DWORD *)v118 = v111;
  *(_DWORD *)&v118[3] = *(_DWORD *)((char *)&v111 + 3);
  *(void *)v115 = v93;
  v115[8] = v131;
  *(void *)&v115[16] = v84;
  v115[24] = v12;
  *(void *)&v115[32] = v101;
  v115[40] = v128;
  *(void *)&v115[48] = v92;
  v115[56] = v96;
  memcpy(&v115[57], __dst, 0x1A7uLL);
  v116 = v23;
  v117 = v125;
  v119 = v11;
  v120 = v24;
  v121 = (void (*)(void *__return_ptr, void))v100;
  v122 = v99;
  outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>.Iterator((uint64_t)v115);
  swift_release_n();
  return v83;
}

uint64_t specialized static Comparable.<= infix(_:_:)(uint64_t a1, int a2, uint64_t a3, char a4, uint64_t a5, int a6, uint64_t a7, char a8)
{
  if ((a2 | a6)) {
    return !(a2 & ((a6 & 1) == 0));
  }
  if (a5 < a1) {
    return 0;
  }
  if (a1 < a5) {
    return 1;
  }
  if (a8)
  {
    BOOL v10 = a4 == 1 && a7 < a3;
    if (a3) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = a4 == 2;
    }
    int v12 = !v11;
    if (a8 == 1) {
      int v13 = v10;
    }
    else {
      int v13 = v12;
    }
    return v13 ^ 1u;
  }
  else if (a4)
  {
    return a4 != 1;
  }
  else
  {
    return a7 >= a3;
  }
}

uint64_t specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(uint64_t result, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9)
{
  uint64_t v12 = a5;
  char v13 = a2 & 1;
  if ((a5 & 0x8000000000000000) == 0)
  {
    if (!a5) {
      return result;
    }
    BOOL v15 = a9 == 2 && a8 == 0;
    while (1)
    {
      if (v13)
      {
        if ((a7 & 1) == 0) {
          goto LABEL_10;
        }
      }
      else if ((a7 & 1) != 0 || result != a6)
      {
        goto LABEL_10;
      }
      if (!a4) {
        break;
      }
      if (a4 != 1)
      {
        if (v15) {
          return 0;
        }
        goto LABEL_10;
      }
      if (a9 == 1) {
        goto LABEL_21;
      }
LABEL_10:
      unint64_t result = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(result, v13 & 1);
      char v13 = v16 & 1;
      if (!--v12) {
        return result;
      }
    }
    if (a9) {
      goto LABEL_10;
    }
LABEL_21:
    if (a3 == a8) {
      return 0;
    }
    goto LABEL_10;
  }
  uint64_t v17 = 0;
  BOOL v19 = a9 == 2 && a8 == 0;
  while (1)
  {
    if (v13)
    {
      if ((a7 & 1) == 0) {
        goto LABEL_30;
      }
    }
    else if ((a7 & 1) != 0 || result != a6)
    {
      goto LABEL_30;
    }
    if (a4) {
      break;
    }
    if (!a9) {
      goto LABEL_41;
    }
LABEL_30:
    --v17;
    unint64_t result = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:)(result, v13 & 1);
    char v13 = v20 & 1;
    if (v17 <= v12) {
      return result;
    }
  }
  if (a4 != 1)
  {
    if (v19) {
      return 0;
    }
    goto LABEL_30;
  }
  if (a9 != 1) {
    goto LABEL_30;
  }
LABEL_41:
  if (a3 != a8) {
    goto LABEL_30;
  }
  return 0;
}

uint64_t NavigationStackHostingController.__allocating_init(rootView:)(objc_class *a1)
{
  char v2 = v1;
  id v4 = objc_allocWithZone(v1);
  uint64_t v5 = specialized NavigationStackHostingController.init(rootView:)(a1);
  (*(void (**)(objc_class *))(*(void *)(*((void *)v2 + 120) - 8) + 8))(a1);
  return v5;
}

double specialized Collection.subscript.getter@<D0>(int64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  char v7 = *(unsigned char *)(v5 + 8);
  if ((v7 & 1) != 0 || (a2 & 1) != 0 || *(void *)v5 > a1) {
    goto LABEL_34;
  }
  uint64_t v11 = *(void *)(v5 + 16);
  int v12 = *(unsigned __int8 *)(v5 + 24);
  if (*(void *)v5 < a1) {
    goto LABEL_5;
  }
  if (!(_BYTE)a4)
  {
    if (*(unsigned char *)(v5 + 24))
    {
      if (v12 == 1) {
        goto LABEL_34;
      }
      goto LABEL_5;
    }
    goto LABEL_20;
  }
  if (a4 != 1)
  {
    if (v11 || v12 != 2) {
      goto LABEL_34;
    }
    goto LABEL_5;
  }
  if (v12 == 1)
  {
LABEL_20:
    if (v11 > a3) {
      goto LABEL_34;
    }
  }
LABEL_5:
  int64_t v13 = *(void *)(v5 + 32);
  char v14 = *(unsigned char *)(v5 + 40);
  uint64_t v15 = *(void *)(v5 + 48);
  int v16 = *(unsigned __int8 *)(v5 + 56);
  if ((v14 & 1) != 0 || v13 > a1) {
    goto LABEL_33;
  }
  if (v13 >= a1)
  {
    if ((_BYTE)a4)
    {
      if (a4 == 1)
      {
        if (v16 == 1 && v15 > a3)
        {
          LOBYTE(v16) = 1;
LABEL_33:
          *(void *)&long long v19 = *(void *)v5;
          BYTE8(v19) = v7;
          uint64_t v20 = v11;
          char v21 = v12;
          int64_t v22 = v13;
          char v23 = v14;
          uint64_t v24 = v15;
          char v25 = v16;
          memcpy(__dst, (const void *)(v5 + 64), sizeof(__dst));
          specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, 0, a3, a4, &v19);
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__dst);
          specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(a1, 0, a3, a4);
          outlined release of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>(v5);
          return result;
        }
      }
      else if (v15 || v16 != 2)
      {
        goto LABEL_33;
      }
    }
    else if (*(unsigned char *)(v5 + 56))
    {
      if (v16 == 1) {
        goto LABEL_33;
      }
    }
    else if (v15 > a3)
    {
      LOBYTE(v16) = 0;
      goto LABEL_33;
    }
  }
LABEL_34:
  *(unsigned char *)(a5 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  return result;
}

uint64_t specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v67)(uint64_t *__return_ptr, void *);
  long long v68;
  uint64_t v69;
  void (*v70)(void *__return_ptr, void);
  int64_t v71;
  unint64_t v72;
  int64_t v73;
  char v74;
  uint64_t v75;
  long long v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD v79[4];
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  unsigned char v87[480];
  int64_t v88;
  char v89;
  unsigned char v90[7];
  int64_t v91;
  char v92;
  void (*v93)(void *__return_ptr, void);
  uint64_t v94;
  _OWORD v95[4];
  char v96;
  char v97;
  unsigned char __dst[423];
  _DWORD v99[2];
  char v100;
  _DWORD v101[2];
  _DWORD v102[2];
  char v103;
  void v104[52];
  void v105[2];
  char v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  unsigned char v110[304];
  uint64_t v111[38];
  void v112[8];
  unsigned __int16 v113;
  unsigned char v114[392];
  unsigned char v115[416];

  int64_t v4 = *(void *)a1;
  char v5 = *(unsigned char *)(a1 + 8);
  v102[0] = *(_DWORD *)(a1 + 9);
  *(_DWORD *)((char *)v102 + 3) = *(_DWORD *)(a1 + 12);
  int64_t v6 = *(void *)(a1 + 16);
  int v7 = *(unsigned __int8 *)(a1 + 24);
  v101[0] = *(_DWORD *)(a1 + 25);
  *(_DWORD *)((char *)v101 + 3) = *(_DWORD *)(a1 + 28);
  uint64_t v71 = *(void *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 40);
  int v9 = *(_DWORD *)(a1 + 41);
  *(_DWORD *)((char *)v99 + 3) = *(_DWORD *)(a1 + 44);
  v99[0] = v9;
  int64_t v10 = *(void *)(a1 + 48);
  int v11 = *(unsigned __int8 *)(a1 + 56);
  memcpy(__dst, (const void *)(a1 + 57), sizeof(__dst));
  v115[392] = v5 & 1;
  v103 = v5;
  v100 = v8;
  uint64_t v97 = v5 & 1;
  uint64_t v69 = *(void *)(a1 + 488);
  uint64_t v70 = *(void (**)(void *__return_ptr, void))(a1 + 480);
  outlined retain of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>(a1);
  int64_t v63 = v10;
  if (v10) {
    BOOL v12 = 0;
  }
  else {
    BOOL v12 = v11 == 2;
  }
  char v13 = v12;
  char v59 = v13;
  if (v6) {
    BOOL v14 = 0;
  }
  else {
    BOOL v14 = v7 == 2;
  }
  char v15 = !v14;
  char v56 = v15;
  char v16 = v8 & 1;
  char v17 = v5 & 1;
  int64_t v18 = v4;
  int64_t v57 = v6;
  char v19 = v7;
  int v64 = v11;
  int v65 = v7;
  int64_t v62 = v4;
  if ((v5 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_14:
  if ((v16 & 1) == 0) {
    goto LABEL_91;
  }
  while (1)
  {
    if (!v19)
    {
      if (v11) {
        goto LABEL_27;
      }
LABEL_24:
      if (v6 == v63) {
        goto LABEL_25;
      }
      goto LABEL_27;
    }
    if (v19 == 1)
    {
      if (v11 != 1) {
        goto LABEL_27;
      }
      goto LABEL_24;
    }
    if (v59)
    {
LABEL_25:
      uint64_t v96 = 0;
      memset(v95, 0, sizeof(v95));
      goto LABEL_75;
    }
LABEL_27:
    memcpy(v104, &__dst[7], sizeof(v104));
    if (v103) {
      break;
    }
    if ((v17 & 1) == 0) {
      goto LABEL_31;
    }
LABEL_44:
    while (2)
    {
      if (v16)
      {
        if (v17) {
          goto LABEL_93;
        }
      }
      else
      {
        if (v17) {
          goto LABEL_92;
        }
        if (v18 >= v71)
        {
          if (v71 < v18) {
            goto LABEL_84;
          }
          if (v19)
          {
            if (v19 == 1)
            {
              if (v11 != 1) {
                goto LABEL_95;
              }
              if (v6 >= v63) {
                goto LABEL_86;
              }
            }
            else if (v59)
            {
              goto LABEL_87;
            }
          }
          else if (v11)
          {
            if (v11 != 1) {
              goto LABEL_97;
            }
          }
          else if (v6 >= v63)
          {
            goto LABEL_90;
          }
        }
      }
      outlined init with take of NavigationState.Base(v104, v114);
      outlined init with take of NavigationState.Base(v114, v115);
      int v20 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v115);
      uint64_t v74 = v17;
      uint64_t v72 = v6;
      uint64_t v73 = v18;
      if (v20)
      {
        char v66 = v19;
        if (v20 == 1)
        {
          char v21 = (const void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v115);
          memcpy(v87, v21, 0x188uLL);
          memcpy(v110, v21, 0x12BuLL);
          uint64_t v22 = *(void *)&v87[304];
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v104);
          outlined release of NavigationState.StackContent((uint64_t)v114, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
          outlined consume of ResolvedNavigationDestinations?(v22);
          if (v18) {
            goto LABEL_98;
          }
          specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(0, 0, v6, v19, (uint64_t)v110, 0, (uint64_t)v95);
          outlined release of NavigationColumnState((uint64_t *)v87);
          outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v104);
          int v11 = v64;
          int v7 = v65;
          char v23 = v17;
          int64_t v4 = v62;
        }
        else
        {
          uint64_t v36 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v115);
          uint64_t v37 = *(void *)v36;
          uint64_t v38 = *(void *)(v36 + 8);
          uint64_t v40 = *(void *)(v36 + 16);
          uint64_t v39 = *(void *)(v36 + 24);
          uint64_t v41 = *(void *)(v36 + 32);
          uint64_t v42 = *(void *)(v36 + 40);
          uint64_t v43 = *(void *)(v36 + 48);
          uint64_t v44 = *(void *)(v36 + 56);
          uint64_t v45 = *(void *)(v36 + 64);
          unsigned __int16 v46 = *(_WORD *)(v36 + 72);
          v112[0] = v38;
          v112[1] = v40;
          v112[2] = v39;
          v112[3] = v41;
          v112[4] = v42;
          v112[5] = v43;
          v112[6] = v44;
          v112[7] = v45;
          v113 = v46;
          if (v18 < 0) {
            goto LABEL_81;
          }
          if (*(void *)(v37 + 16) < (unint64_t)v18) {
            goto LABEL_82;
          }
          unsigned __int16 v60 = v46;
          uint64_t v61 = v45;
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v104);
          outlined release of NavigationState.StackContent((uint64_t)v114, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
          uint64_t v47 = swift_bridgeObjectRetain();
          uint64_t v48 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v47, (uint64_t)v112, 0, (2 * v18) | 1);
          swift_bridgeObjectRelease();
          if ((unint64_t)v18 >= *(void *)(v37 + 16)) {
            goto LABEL_83;
          }
          memcpy(v111, (const void *)(v37 + 304 * v18 + 32), 0x12BuLL);
          outlined retain of NavigationColumnState(v111);
          swift_bridgeObjectRelease();
          specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(v18, 0, v72, v66, (uint64_t)v111, v48, (uint64_t)v95);
          outlined consume of NavigationSplitViewState?(v38, v40, v39, v41, v42, v43, v44, v61, v60, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
          outlined release of NavigationColumnState(v111);
          outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v104);
          int64_t v4 = v62;
          int v11 = v64;
          int v7 = v65;
          char v23 = v74;
        }
      }
      else
      {
        uint64_t v24 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v115);
        uint64_t v25 = *(void *)v24;
        uint64_t v26 = *(unsigned __int8 *)(v24 + 8);
        uint64_t v27 = *(void *)(v24 + 16);
        uint64_t v28 = v104[51];
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v104);
        uint64_t v29 = static HorizontalAlignment.center.getter();
        if (!*(void *)(v28 + 16)) {
          goto LABEL_80;
        }
        uint64_t v30 = v29;
        outlined init with copy of _VariadicView_Children(v28 + 32, (uint64_t)&v86);
        v83 = v30;
        v84 = 0;
        v85 = 1;
        v105[0] = 0;
        v105[1] = v25;
        v106 = v26;
        v107 = v27;
        v108 = 0;
        v109 = v26 == 3;
        unint64_t v67 = (void (*)(uint64_t *__return_ptr, void *))v104[49];
        if (v26 >= 3) {
          char v31 = 3;
        }
        else {
          char v31 = v26;
        }
        outlined init with copy of UINavigationPresentationAdaptor?((uint64_t)&v83, (uint64_t)v87, (uint64_t (*)(void))type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
        *(void *)&v87[80] = 0;
        *(void *)&v87[88] = v25;
        *(void *)&v87[96] = v26;
        *(void *)&v87[104] = v27;
        *(void *)&v87[112] = 0;
        v87[120] = v26 == 3;
        v87[121] = 1;
        uint64_t v32 = swift_allocObject();
        *(unsigned char *)(v32 + 16) = 1;
        outlined init with copy of UINavigationPresentationAdaptor?((uint64_t)v87, (uint64_t)v79, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
        uint64_t v81 = a3;
        uint64_t v82 = v32;
        outlined destroy of UINavigationPresentationAdaptor?((uint64_t)v87, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
        v67(&v75, v105);
        int v11 = v64;
        LOBYTE(v32) = v75;
        uint64_t v68 = v76;
        uint64_t v33 = v77;
        uint64_t v34 = v78;
        outlined init with copy of UINavigationPresentationAdaptor?((uint64_t)v79, (uint64_t)v87, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
        v87[144] = v32;
        *(_OWORD *)&v87[152] = v68;
        *(void *)&v87[168] = v33;
        *(void *)&v87[176] = v34;
        outlined destroy of UINavigationPresentationAdaptor?((uint64_t)v79, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
        type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>();
        lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>);
        uint64_t v35 = AnyView.init<A>(_:)();
        outlined destroy of UINavigationPresentationAdaptor?((uint64_t)&v83, (uint64_t (*)(void))type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
        memset((char *)&v95[1] + 8, 0, 40);
        uint64_t v96 = 2;
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v104);
        *(void *)&v95[0] = v35;
        BYTE8(v95[0]) = v31;
        char v23 = v74;
        *(void *)&v95[1] = 0;
        int v7 = v65;
      }
      outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v104);
      int64_t v18 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v73, v23 & 1);
      char v17 = v49;
      int64_t v6 = v50;
      char v19 = v51;
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v104);
      uint64_t v97 = v17 & 1;
LABEL_75:
      _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v95, (uint64_t)v79, &lazy cache variable for type metadata for NavigationState.StackContent.PositionedView?, (uint64_t)&type metadata for NavigationState.StackContent.PositionedView);
      if (!*(void *)&v79[0])
      {
        *(_DWORD *)&v87[9] = v102[0];
        *(_DWORD *)&v87[12] = *(_DWORD *)((char *)v102 + 3);
        *(_DWORD *)&v87[25] = v101[0];
        *(_DWORD *)&v87[28] = *(_DWORD *)((char *)v101 + 3);
        *(_DWORD *)&v87[41] = v99[0];
        *(_DWORD *)&v87[44] = *(_DWORD *)((char *)v99 + 3);
        *(_DWORD *)int v90 = v83;
        *(_DWORD *)&v90[3] = *(_DWORD *)((char *)&v83 + 3);
        *(void *)uint64_t v87 = v4;
        v87[8] = v103;
        *(void *)&v87[16] = v57;
        v87[24] = v7;
        *(void *)&v87[32] = v71;
        v87[40] = v100;
        *(void *)&v87[48] = v63;
        v87[56] = v11;
        memcpy(&v87[57], __dst, 0x1A7uLL);
        uint64_t v88 = v18;
        v89 = v97;
        uint64_t v91 = v6;
        uint64_t v92 = v19;
        v93 = v70;
        v94 = v69;
        return outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>.Iterator((uint64_t)v87);
      }
      *(_OWORD *)&v87[32] = v79[2];
      *(_OWORD *)&v87[48] = v79[3];
      v87[64] = v80;
      *(_OWORD *)uint64_t v87 = v79[0];
      *(_OWORD *)&v87[16] = v79[1];
      v70(&v83, v87);
      char v52 = v83;
      uint64_t v53 = v84;
      outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v87);
      v87[0] = v52;
      *(void *)&v87[8] = v53;
      uint64_t v54 = v87;
      NavigationHostingControllerCache_UIKit.eject(at:)(*(SwiftUI::NavigationContentAbstractPosition *)&v54);
      char v16 = v100;
      if (v17) {
        goto LABEL_14;
      }
LABEL_16:
      if (v16 & 1 | (v18 != v71))
      {
        memcpy(v104, &__dst[7], sizeof(v104));
        if (v103) {
          goto LABEL_94;
        }
LABEL_31:
        if (v18 < v4)
        {
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          memcpy(v104, &__dst[7], sizeof(v104));
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
          goto LABEL_94;
        }
        if (v4 >= v18)
        {
          if (v19)
          {
            if (v19 == 1)
            {
              if (v7 == 1 && v6 < v57) {
                goto LABEL_88;
              }
            }
            else if (v56)
            {
              goto LABEL_85;
            }
          }
          else if (v7)
          {
            if (v7 != 2) {
              goto LABEL_96;
            }
          }
          else if (v6 < v57)
          {
            goto LABEL_89;
          }
        }
        continue;
      }
      break;
    }
  }
  if (v17) {
    goto LABEL_44;
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in static NavigationStackCore._makeView(view:inputs:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for NavigationStackCore();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance NavigationStackCore<A>.NavigationStackRepresentableChild@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance NavigationStackCore<A>.NavigationStackRepresentableChild(a1, (void (*)(uint64_t, void, void))type metadata accessor for NavigationStackCore.NavigationStackRepresentableRoot, a2);
}

uint64_t NavigationStackCore.MultimodalNavigationStackChild.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  v15[1] = a3;
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  int64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  uint64_t v8 = *(void *)Value;
  char v9 = *(unsigned char *)(Value + 8);
  uint64_t v10 = *(void *)(Value + 16);
  NavigationStackCore.NavigationStackRepresentableChild.ensuredAuthority.getter((uint64_t)v16);
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue) {
    uint64_t v12 = *WeakValue;
  }
  else {
    uint64_t v12 = -1;
  }
  uint64_t v17 = v8;
  char v18 = v9;
  uint64_t v19 = v10;
  outlined init with take of NavigationAuthority((uint64_t)v16, (uint64_t)v20);
  v20[3] = v12;
  uint64_t v13 = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v13, a2);
  type metadata accessor for NavigationStackCore.MultimodalNavigationStackRoot();
  return _VariadicView.Tree.init(root:content:)();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance NavigationStackCore<A>.MultimodalNavigationStackChild@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance NavigationStackCore<A>.NavigationStackRepresentableChild(a1, (void (*)(uint64_t, void, void))type metadata accessor for NavigationStackCore.MultimodalNavigationStackRoot, a2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance NavigationStackCore<A>.NavigationStackRepresentableChild@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, void, void)@<X2>, uint64_t a3@<X8>)
{
  a2(255, *(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = type metadata accessor for _VariadicView.Tree();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a3, 1, 1, v4);
}

uint64_t protocol witness for Rule.value.getter in conformance NavigationStackCore<A>.MultimodalNavigationStackChild@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return NavigationStackCore.MultimodalNavigationStackChild.value.getter(*v2, *(void *)(a1 + 16), a2);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance NavigationStackCore<A>.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t NavigationStackCore.MultimodalNavigationStackRoot.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of _VariadicView_Children(a1, a2);
  uint64_t v4 = *v2;
  char v5 = *((unsigned char *)v2 + 8);
  uint64_t v6 = v2[2];
  outlined init with copy of NavigationAuthority((uint64_t)(v2 + 3), a2 + 80);
  *(void *)(a2 + 56) = v4;
  *(unsigned char *)(a2 + 64) = v5;
  *(void *)(a2 + 72) = v6;
  *(void *)(a2 + 104) = v2[6];
  uint64_t result = swift_getKeyPath();
  *(void *)(a2 + 112) = result;
  *(unsigned char *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(unsigned char *)(a2 + 136) = 1;
  *(void *)(a2 + 144) = 0;
  *(unsigned char *)(a2 + 152) = 1;
  *(void *)(a2 + 160) = 0;
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance NavigationStackCore<A>.MultimodalNavigationStackRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, WitnessTable);
}

void protocol witness for View.body.getter in conformance NavigationStackCore<A>()
{
}

uint64_t protocol witness for UIViewControllerRepresentable.updateUIViewController(_:context:) in conformance NavigationStackRepresentable(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = *(void *)(v2 + 108);
  uint64_t v8 = *(void *)(v2 + 160);
  char v9 = *(unsigned char *)(v2 + 168);
  swift_retain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v8, v9);
  char v10 = specialized Environment.wrappedValue.getter(v8, v9);
  outlined consume of Environment<Bool>.Content(v8, v9);
  type metadata accessor for PPTTestCase?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_VariadicView_Children>, MEMORY[0x1E4F40A38], MEMORY[0x1E4FBBE00]);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_18834BB80;
  outlined init with copy of _VariadicView_Children(v2 + 24, v11 + 32);
  swift_retain();
  swift_retain();
  specialized NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(a1, v5, v6, v4, v7, v10 & 1, v5, v6, v11, (uint64_t)&unk_1ED48DD98, (uint64_t)&unk_1ED48DDE8, (uint64_t)partial apply for specialized closure #2 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:), (uint64_t)&unk_1ED48DDC0, partial apply for specialized closure #3 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:));
  swift_bridgeObjectRelease();
  swift_release_n();
  return swift_release_n();
}

id protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance NavigationStackRepresentable@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + 80;
  char v6 = *(unsigned char *)(v1 + 8);
  outlined init with copy of NavigationAuthority(v5, (uint64_t)v10);
  type metadata accessor for NavigationStackCoordinator<NavigationStrategy_Phone>();
  id v8 = objc_allocWithZone(v7);
  id result = specialized NavigationStackCoordinator.init(context:navigationAuthority:)(v3, v6, v4, (uint64_t)v10);
  *a1 = result;
  return result;
}

uint64_t closure #1 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:)()
{
  uint64_t v0 = swift_retain();
  specialized UIHostingController.setRootView(_:transaction:)(v0);

  return swift_release();
}

uint64_t specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t *))
{
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  id v23 = a1;
  memcpy(v39, a2, sizeof(v39));
  uint64_t v22 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[4];
  char v8 = *((unsigned char *)a2 + 40);
  uint64_t v9 = a2[6];
  char v10 = *((unsigned char *)a2 + 56);
  char v11 = *((unsigned char *)a2 + 24);
  memcpy(v38, a2 + 8, sizeof(v38));
  uint64_t v12 = specialized BidirectionalCollection._distance(from:to:)(v22, v5, v6, v11, v7, v8, v9, v10);
  id v13 = objc_msgSend(v23, sel_viewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v12 == v15)
  {
    memcpy(v35, v39, sizeof(v35));
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v35, v16, v17, v18);
    outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)v35, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
    outlined retain of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>((uint64_t)a2);
  }
  else
  {
    _ss5SliceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0H8SequenceVy___AC22_VariadicView_ChildrenVAC08ModifiedG0VyAC0D14ColumnModifierVAOyAC09InjectKeyO0VAC0d16BackgroundReaderO033_7632008E3567AB610EB09B57688D0EDELLVGGGGSgWOi0_((uint64_t)v35);
    outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)v35, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
  }
  outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)v35, (uint64_t)v37, (uint64_t (*)(void))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
  outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)v37, (uint64_t)v35, (uint64_t (*)(void))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
  uint64_t v19 = _ss5SliceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0H8SequenceVy___AC22_VariadicView_ChildrenVAC08ModifiedG0VyAC0D14ColumnModifierVAOyAC09InjectKeyO0VAC0d16BackgroundReaderO033_7632008E3567AB610EB09B57688D0EDELLVGGGGSgWOg((uint64_t)v35);
  if (v19 == 1)
  {
    uint64_t v32 = 0;
    uint64_t v31 = 0;
    uint64_t v33 = 0;
    char v34 = -1;
  }
  else
  {
    uint64_t v19 = outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)v37, (uint64_t)&v27, (uint64_t (*)(void))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
    uint64_t v31 = v27;
    LOBYTE(v32) = v28;
    uint64_t v33 = v29;
    char v34 = v30;
  }
  MEMORY[0x1F4188790](v19);
  void v21[2] = v24;
  _OWORD v21[3] = v36;
  v21[4] = &v31;
  v21[5] = v25;
  specialized UINavigationController.visitDescendents<A>(matchingType:visitor:)(v26, (uint64_t)v21);
  outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)v36, (uint64_t)&v27, (uint64_t (*)(void))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
  return outlined release of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)&v27);
}

uint64_t closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *(unsigned char *)a2 = *(unsigned char *)(result + 8);
  *(void *)(a2 + 8) = v2;
  return result;
}

uint64_t specialized Collection.dropLast(_:)@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  if (result < 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v3 = result;
  id result = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(result);
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = 0;
    char v7 = 0;
    while (1)
    {
      uint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        break;
      }
      id result = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(result, v7 & 1);
      char v7 = v10 & 1;
      ++v6;
      if ((v10 & 1) != 0 && v9 >= 2u) {
        goto LABEL_9;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = 0;
LABEL_9:
  uint64_t v11 = v8 - v3;
  if (__OFSUB__(v8, v3)) {
    goto LABEL_20;
  }
  uint64_t v12 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(result);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  unsigned __int8 v17 = v16;
  int v19 = v18 & 1;
  if (v11 >= 1)
  {
    uint64_t v20 = v11 & ~(v11 >> 63);
    while ((v19 & 1) == 0 || v17 <= 1u)
    {
      uint64_t v12 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v13, v19 & 1);
      uint64_t v13 = v12;
      uint64_t v15 = v21;
      unsigned __int8 v17 = v22;
      int v19 = v23 & 1;
      if (!--v20) {
        goto LABEL_16;
      }
    }
    uint64_t v13 = 0;
    uint64_t v15 = 0;
    unsigned __int8 v17 = 2;
    int v19 = 1;
  }
LABEL_16:
  uint64_t v24 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v12);
  uint64_t v26 = v25;
  char v28 = v27;
  char v30 = v29 & 1;
  id result = specialized static Comparable.<= infix(_:_:)(v24, v29 & 1, v25, v27, v13, v19, v15, v17);
  if (result)
  {
    *(void *)&long long v31 = v24;
    BYTE8(v31) = v30;
    uint64_t v32 = v26;
    char v33 = v28;
    uint64_t v34 = v13;
    char v35 = v19;
    uint64_t v36 = v15;
    unsigned __int8 v37 = v17;
    specialized Collection<>.subscript.getter(&v31, a2);
    return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>(v2);
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t specialized closure #2 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)((char *)a1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x70));
  uint64_t result = swift_beginAccess();
  uint64_t v5 = v3[2];
  if (v5)
  {
    uint64_t v8 = v3;
    uint64_t v6 = *v3;
    uint64_t v7 = v8[1];
    uint64_t v9 = *a2;
    outlined copy of NavigationStrategy_Phone?(v6, v7, v5);
    char v10 = specialized NavigationStrategy.viewControllerCommon(for:entering:canPop:isRoot:)(v9, 1, v6, v7);
    outlined consume of RichTextAttributeResolver?(v6, v7, v5);
    return (uint64_t)v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id specialized NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:)(char a1, void *a2, unsigned char *a3)
{
  return specialized NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:)(a1, a2, a3, (uint64_t)&unk_1ED48E4C8, (uint64_t)partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:), (uint64_t)&block_descriptor_347);
}

{
  return specialized NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:)(a1, a2, a3, (uint64_t)&unk_1ED48E130, (uint64_t)partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:), (uint64_t)&block_descriptor_245);
}

{
  return specialized NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:)(a1, a2, a3, (uint64_t)&unk_1ED48DD98, (uint64_t)partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:), (uint64_t)&block_descriptor_139);
}

id specialized NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:)(char a1, id a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id result = objc_msgSend(a2, sel_transitionCoordinator);
  if (result)
  {
    uint64_t v11 = result;
    if (a1)
    {
      *a3 = 1;
      uint64_t v12 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v14[4] = a5;
      v14[5] = v12;
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 1107296256;
      void v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
      v14[3] = a6;
      uint64_t v13 = _Block_copy(v14);
      swift_release();
      objc_msgSend(v11, sel_animateAlongsideTransition_completion_, 0, v13);
      _Block_release(v13);
      return (id)swift_unknownObjectRelease();
    }
    else
    {
      return (id)swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t specialized closure #2 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)((char *)a1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x70));
  uint64_t result = swift_beginAccess();
  uint64_t v8 = v6[2];
  if (v8)
  {
    uint64_t v11 = v6;
    uint64_t v9 = *v6;
    uint64_t v10 = v11[1];
    uint64_t v12 = *a2;
    outlined copy of NavigationStrategy_Phone?(v9, v10, v8);
    uint64_t v13 = specialized NavigationStrategy.viewControllerCommon(for:entering:canPop:isRoot:)(v12, a4 > 0, v9, v10);
    outlined consume of RichTextAttributeResolver?(v9, v10, v8);
    return (uint64_t)v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = (void *)MEMORY[0x18C119DF0](v2);
  if (v3)
  {
    uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
    *((unsigned char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x80)) = 0;
    *(void *)((char *)v3 + *(void *)((*v4 & *v3) + 0x88)) = 0;
  }
}

void closure #1 in NavigationStackCoordinator.navigationController(_:willShow:animated:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = (void *)MEMORY[0x18C119DF0](v2);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
    *((unsigned char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x90)) = 0;
    uint64_t v6 = (void *)((char *)v3 + *(void *)((*v5 & *v3) + 0xA0));
    uint64_t v7 = (void (*)(uint64_t))*v6;
    if (*v6)
    {
      uint64_t v8 = swift_retain();
      v7(v8);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v7);
      uint64_t v9 = *v6;
    }
    else
    {
      uint64_t v9 = 0;
    }
    *uint64_t v6 = 0;
    v6[1] = 0;
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v9);
  }
}

void closure #2 in NavigationStackCoordinator.navigationController(_:willShow:animated:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x18C119DF0](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    if (objc_msgSend(a1, sel_isCancelled))
    {
      id v8 = objc_msgSend(a3, sel_viewControllers);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      NavigationStackCoordinator.previousContent.getter(__src);
      memcpy(__dst, __src, sizeof(__dst));
      NavigationState.StackContent.count.getter();
      uint64_t v12 = v11;
      outlined release of NavigationState.StackContent((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
      uint64_t v13 = (void *)MEMORY[0x1E4FBC8C8];
      *((unsigned char *)v7 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v7) + 0x90)) = 0;
      *((unsigned char *)v7 + *(void *)((*v13 & *v7) + 0x78)) = 1;
      outlined init with copy of NavigationAuthority((uint64_t)v7 + *(void *)((*v13 & *v7) + 0x68), (uint64_t)v26);
      uint64_t v14 = v12 - v10;
      if (__OFSUB__(v12, v10))
      {
        __break(1u);
      }
      else
      {
        NavigationStackCoordinator.previousContent.getter(__dst);
        memcpy(v25, __dst, sizeof(v25));
        uint64_t v15 = NavigationState.StackContent.topKey.getter();
        unsigned __int8 v17 = v16;
        uint64_t v19 = v18;
        outlined release of NavigationState.StackContent((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
        static Transaction.current.getter();
        static Transaction.current.getter();
        char v20 = Transaction.disablesAnimations.getter();
        swift_release();
        if (v20) {
          char v21 = 1;
        }
        else {
          char v21 = Transaction.disablesAnimations.getter();
        }
        static Transaction.current.getter();
        uint64_t v22 = Transaction.animation.getter();
        swift_release();
        if (!v22) {
          uint64_t v22 = Transaction.animation.getter();
        }
        swift_release();
        memset(&v25[8], 0, 56);
        uint64_t v24 = v22;
        *(void *)uint64_t v25 = v14;
        v25[64] = 9;
        *(void *)&v25[72] = v15;
        *(void *)&v25[80] = v17;
        *(void *)&v25[88] = v19;
        memset(&v25[96], 0, 24);
        v25[120] = v21 & 1;
        *(void *)&v25[128] = v22;
        v23[6] = 0u;
        v23[7] = *(_OWORD *)&v25[112];
        v23[2] = *(_OWORD *)&v25[32];
        v23[3] = 0uLL;
        v23[4] = *(_OWORD *)&v25[64];
        v23[5] = *(_OWORD *)&v25[80];
        v23[0] = *(_OWORD *)v25;
        v23[1] = *(_OWORD *)&v25[16];
        NavigationAuthority.enqueueRequest(_:)(v23);

        outlined release of NavigationRequest((uint64_t)v25);
        outlined destroy of NavigationAuthority((uint64_t)v26);
      }
    }
    else
    {
    }
  }
}

void closure #3 in NavigationStackCoordinator.navigationController(_:willShow:animated:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x18C119DF0](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    if (objc_msgSend(a1, sel_isCancelled))
    {
    }
    else
    {
      id v8 = objc_msgSend(a3, sel_viewControllers);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      NavigationStackCoordinator.previousContent.getter(__src);
      memcpy(__dst, __src, sizeof(__dst));
      NavigationState.StackContent.count.getter();
      uint64_t v12 = v11;
      outlined release of NavigationState.StackContent((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
      uint64_t v13 = (void *)MEMORY[0x1E4FBC8C8];
      *((unsigned char *)v7 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v7) + 0x90)) = 0;
      *((unsigned char *)v7 + *(void *)((*v13 & *v7) + 0x78)) = 1;
      outlined init with copy of NavigationAuthority((uint64_t)v7 + *(void *)((*v13 & *v7) + 0x68), (uint64_t)v26);
      uint64_t v14 = v12 - v10;
      if (__OFSUB__(v12, v10))
      {
        __break(1u);
      }
      else
      {
        NavigationStackCoordinator.previousContent.getter(__dst);
        memcpy(v25, __dst, sizeof(v25));
        uint64_t v15 = NavigationState.StackContent.topKey.getter();
        unsigned __int8 v17 = v16;
        uint64_t v19 = v18;
        outlined release of NavigationState.StackContent((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
        static Transaction.current.getter();
        static Transaction.current.getter();
        char v20 = Transaction.disablesAnimations.getter();
        swift_release();
        if (v20) {
          char v21 = 1;
        }
        else {
          char v21 = Transaction.disablesAnimations.getter();
        }
        static Transaction.current.getter();
        uint64_t v22 = Transaction.animation.getter();
        swift_release();
        if (!v22) {
          uint64_t v22 = Transaction.animation.getter();
        }
        swift_release();
        memset(&v25[8], 0, 56);
        uint64_t v24 = v22;
        *(void *)uint64_t v25 = v14;
        v25[64] = 9;
        *(void *)&v25[72] = v15;
        *(void *)&v25[80] = v17;
        *(void *)&v25[88] = v19;
        memset(&v25[96], 0, 24);
        v25[120] = v21 & 1;
        *(void *)&v25[128] = v22;
        v23[6] = 0u;
        v23[7] = *(_OWORD *)&v25[112];
        v23[2] = *(_OWORD *)&v25[32];
        v23[3] = 0uLL;
        v23[4] = *(_OWORD *)&v25[64];
        v23[5] = *(_OWORD *)&v25[80];
        v23[0] = *(_OWORD *)v25;
        v23[1] = *(_OWORD *)&v25[16];
        NavigationAuthority.enqueueRequest(_:)(v23);

        outlined release of NavigationRequest((uint64_t)v25);
        outlined destroy of NavigationAuthority((uint64_t)v26);
      }
    }
  }
}

void @objc NavigationStackCoordinator.init()()
{
}

uint64_t @objc NavigationStackCoordinator.__ivar_destroyer(void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  outlined destroy of NavigationAuthority((uint64_t)a1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x68));
  uint64_t v3 = (char *)a1 + *(void *)((*v2 & *a1) + 0x70);
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)((char *)a1 + *(void *)((*v2 & *a1) + 0xA0)));
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)a1 + *(void *)((*v2 & *a1) + 0xB0), (uint64_t)v6, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  return _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_1((uint64_t)v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
}

void *NavigationStackHostingController.HostingView.__allocating_init(rootView:)(objc_class *a1)
{
  uint64_t v3 = specialized NavigationStackHostingController.HostingView.__allocating_init(rootView:)(a1);
  (*(void (**)(objc_class *))(*(void *)(*(void *)(v1 + 1600) - 8) + 8))(a1);
  return v3;
}

id NavigationStackHostingController.HostingView.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for NavigationStackHostingController.HostingView();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id @objc NavigationStackHostingController.HostingView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return NavigationStackHostingController.HostingView.init(coder:)(a3);
}

id NavigationStackHostingController.HostingView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NavigationStackHostingController.HostingView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void @objc NavigationStackHostingController.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  specialized NavigationStackHostingController.init(coder:)();
}

uint64_t @objc NavigationStackHostingController._canShowWhileLocked()()
{
  return 1;
}

void NavigationStackHostingController.__allocating_init(coder:rootView:)()
{
}

void NavigationStackHostingController.__allocating_init(hostingView:)()
{
}

uint64_t NavigationStackHostingController.__ivar_destroyer()
{
  uint64_t v1 = (char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3D8);
  uint64_t v2 = type metadata accessor for Optional();
  id v3 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

uint64_t @objc NavigationStackHostingController.__ivar_destroyer(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x3D8);
  uint64_t v2 = type metadata accessor for Optional();
  id v3 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

unsigned char *storeEnumTagSinglePayload for NavigationStackCoordinator.EndUserTriggeredUpdate(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1880F1D6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for NavigationStackCoordinator.EndUserTriggeredUpdate()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for NavigationStackCore(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFA) {
    unsigned int v7 = 250;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1880F1EF0);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xFA) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v17 = *(unsigned __int8 *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 6) {
    return v17 - 5;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for NavigationStackCore(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFA) {
    unsigned int v8 = 250;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFE8)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1880F20E8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0xFA)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0xFA)
          {
            v18[1] = 0;
            v18[2] = 0;
            void *v18 = a2 - 251;
          }
          else
          {
            *((unsigned char *)v18 + 8) = a2 + 5;
          }
        }
        else
        {
          unsigned int v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for View in NavigationStackCore<A>()
{
  return &protocol witness table for NavigationStackCore<A>;
}

uint64_t type metadata accessor for NavigationStackCore.MultimodalNavigationStackRoot()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for NavigationStackCore.MultimodalNavigationStackChild()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, char a2, uint64_t a3, char a4, _OWORD *a5)
{
  *(_OWORD *)uint64_t v19 = *a5;
  *(_OWORD *)&v19[9] = *(_OWORD *)((char *)a5 + 9);
  uint64_t v10 = MEMORY[0x1E4FBB550];
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v19, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550]);
  uint64_t result = _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v20, (uint64_t)&v21, (unint64_t *)&lazy cache variable for type metadata for Int?, v10);
  if (v22)
  {
    if (a2) {
      goto LABEL_19;
    }
    __break(1u);
  }
  if ((a2 & 1) == 0)
  {
    if (v21 > a1)
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v21 >= a1)
    {
      uint64_t v12 = *(void *)&v19[16];
      int v13 = v19[24];
      if (a4)
      {
        if (a4 != 1) {
          goto LABEL_15;
        }
        if (v19[24] != 1 || *(uint64_t *)&v19[16] <= a3) {
          goto LABEL_19;
        }
        __break(1u);
      }
      if (!v13)
      {
LABEL_18:
        if (v12 > a3)
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
        goto LABEL_19;
      }
      if (v13 == 2) {
        goto LABEL_19;
      }
      __break(1u);
LABEL_15:
      if (!v12 && v13 == 2) {
        goto LABEL_19;
      }
      __break(1u);
      goto LABEL_18;
    }
  }
LABEL_19:
  *(_OWORD *)unsigned int v17 = a5[2];
  *(_OWORD *)&v17[9] = *(_OWORD *)((char *)a5 + 41);
  uint64_t v14 = MEMORY[0x1E4FBB550];
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v17, (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550]);
  uint64_t result = _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)v18, (uint64_t)&v23, (unint64_t *)&lazy cache variable for type metadata for Int?, v14);
  if (v24)
  {
    if ((a2 & 1) == 0) {
      return result;
    }
    __break(1u);
  }
  if (a2) {
    goto LABEL_42;
  }
  if (v23 > a1) {
    return result;
  }
  if (v23 < a1) {
    goto LABEL_39;
  }
  uint64_t v15 = *(void *)&v17[16];
  int v16 = v17[24];
  if (a4)
  {
    if (a4 != 1) {
      goto LABEL_33;
    }
    if (v17[24] != 1)
    {
LABEL_43:
      __break(1u);
      return result;
    }
    if (*(uint64_t *)&v17[16] > a3) {
      return result;
    }
    __break(1u);
  }
  if (!v16) {
    goto LABEL_36;
  }
  if (v16 == 1) {
    return result;
  }
  __break(1u);
LABEL_33:
  if (!v15 && v16 == 2)
  {
    __break(1u);
LABEL_36:
    if (v15 > a3) {
      return result;
    }
    goto LABEL_40;
  }
  return result;
}

void *specialized NavigationStackHostingController.HostingView.__allocating_init(rootView:)(objc_class *a1)
{
  id v2 = objc_allocWithZone((Class)type metadata accessor for NavigationStackHostingController.HostingView());
  return specialized _UIHostingView.init(rootView:)(a1);
}

uint64_t specialized NavigationStackHostingController.init(rootView:)(objc_class *a1)
{
  id v2 = v1;
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = *MEMORY[0x1E4FBC8C8] & *v2;
  *((unsigned char *)v2 + *(void *)(v5 + 0x3D0)) = 6;
  (*(void (**)(char *, uint64_t, uint64_t, void))(*(void *)(*(void *)(v5 + 960) - 8) + 56))((char *)v2 + *(void *)((*v4 & *v2) + 0x3D8), 1, 1, *(void *)(v5 + 960));
  type metadata accessor for NavigationStackHostingController.HostingView();
  uint64_t v6 = specialized NavigationStackHostingController.HostingView.__allocating_init(rootView:)(a1);

  return UIHostingController.init(_hostingView:)(v6);
}

void specialized NavigationStackCoordinator.init()()
{
}

void specialized NavigationStackHostingController.init(coder:)()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = *MEMORY[0x1E4FBC8C8] & *v0;
  *((unsigned char *)v0 + *(void *)(v2 + 0x3D0)) = 6;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 960) - 8) + 56))((char *)v0 + *(void *)((*v1 & *v0) + 0x3D8), 1, 1);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1880F2800()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1880F2838()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in NavigationStackCoordinator.navigationController(_:willShow:animated:)(uint64_t a1)
{
  closure #1 in NavigationStackCoordinator.navigationController(_:willShow:animated:)(a1, *(void *)(v1 + 32));
}

void partial apply for closure #3 in NavigationStackCoordinator.navigationController(_:willShow:animated:)(void *a1)
{
  closure #3 in NavigationStackCoordinator.navigationController(_:willShow:animated:)(a1, *(void *)(v1 + 32), *(void **)(v1 + 40));
}

void partial apply for closure #2 in NavigationStackCoordinator.navigationController(_:willShow:animated:)(void *a1)
{
  closure #2 in NavigationStackCoordinator.navigationController(_:willShow:animated:)(a1, *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t destroy for NavigationStackCore.MultimodalNavigationStackRoot()
{
  swift_weakDestroy();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for NavigationStackCore.MultimodalNavigationStackRoot(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_weakCopyInit();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationStackCore.MultimodalNavigationStackRoot(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_weakCopyAssign();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  return a1;
}

uint64_t initializeWithTake for NavigationStackCore.MultimodalNavigationStackRoot(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for NavigationStackCore.MultimodalNavigationStackRoot(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_weakTakeAssign();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationStackCore.MultimodalNavigationStackRoot(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationStackCore.MultimodalNavigationStackRoot(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

uint64_t assignWithTake for NavigationStackCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_weakTakeAssign();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  if (*(void *)(a1 + 80)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  }
  long long v4 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v4;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationStackCore.NavigationStackRepresentableRoot(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationStackCore.NavigationStackRepresentableRoot(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for NavigationStackCore<A>.NavigationStackRepresentableRoot(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for NavigationStackCore<A>.MultimodalNavigationStackRoot(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in NavigationStackCore<A>.MultimodalNavigationStackRoot()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in NavigationStackCore<A>.MultimodalNavigationStackChild()
{
  return swift_getWitnessTable();
}

uint64_t sub_1880F2DAC@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.displayScale.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1880F2DE8()
{
  return EnvironmentValues.displayScale.setter();
}

uint64_t assignWithTake for NavigationStackRepresentable(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 64);
  uint64_t v5 = *(void **)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;

  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  swift_weakTakeAssign();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 108) = *(void *)(a2 + 108);
  if (*(void *)(a1 + 144)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  }
  long long v6 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v6;
  uint64_t v7 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  char v8 = *(unsigned char *)(a2 + 168);
  uint64_t v9 = *(void *)(a1 + 160);
  char v10 = *(unsigned char *)(a1 + 168);
  *(void *)(a1 + 160) = v7;
  *(unsigned char *)(a1 + 168) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationStackRepresentable(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 169)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationStackRepresentable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 168) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 169) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 169) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1880F2FC0()
{
  return lazy protocol witness table accessor for type ModifiedContent<StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>, _SafeAreaRegionsIgnoringLayout>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable> and conformance <> StaticIf<A, B, C>);
}

unint64_t lazy protocol witness table accessor for type MultimodalNavigationStack and conformance MultimodalNavigationStack()
{
  unint64_t result = lazy protocol witness table cache variable for type MultimodalNavigationStack and conformance MultimodalNavigationStack;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationStack and conformance MultimodalNavigationStack)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationStack and conformance MultimodalNavigationStack);
  }
  return result;
}

void type metadata accessor for NavigationStackCoordinator<NavigationStrategy_Phone>()
{
  if (!lazy cache variable for type metadata for NavigationStackCoordinator<NavigationStrategy_Phone>)
  {
    lazy protocol witness table accessor for type NavigationStrategy_Phone and conformance NavigationStrategy_Phone();
    unint64_t v0 = type metadata accessor for NavigationStackCoordinator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NavigationStackCoordinator<NavigationStrategy_Phone>);
    }
  }
}

uint64_t sub_1880F30D0()
{
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:)(uint64_t a1)
{
  specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:)(a1, v1);
}

uint64_t outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>(uint64_t a1)
{
  long long v6 = *(_OWORD *)(a1 + 288);
  long long v4 = *(_OWORD *)(a1 + 256);
  long long v5 = *(_OWORD *)(a1 + 272);
  long long v3 = *(_OWORD *)(a1 + 224);
  outlined copy of NavigationState.Base(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    *(void *)(a1 + 304));
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>(uint64_t a1)
{
  long long v6 = *(_OWORD *)(a1 + 288);
  long long v4 = *(_OWORD *)(a1 + 256);
  long long v5 = *(_OWORD *)(a1 + 272);
  long long v3 = *(_OWORD *)(a1 + 224);
  outlined consume of NavigationState.Base(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    *(void *)(a1 + 304));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>(uint64_t a1)
{
  long long v6 = *(_OWORD *)(a1 + 352);
  long long v4 = *(_OWORD *)(a1 + 320);
  long long v5 = *(_OWORD *)(a1 + 336);
  long long v3 = *(_OWORD *)(a1 + 288);
  outlined consume of NavigationState.Base(*(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168), *(void *)(a1 + 176), *(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)(a1 + 200), *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    *(void *)(a1 + 256),
    *(void *)(a1 + 264),
    *(void *)(a1 + 272),
    *(void *)(a1 + 280),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 304),
    *(void *)(a1 + 312),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    *(void *)(a1 + 368));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t outlined release of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>(uint64_t a1)
{
  long long v6 = *(_OWORD *)(a1 + 352);
  long long v4 = *(_OWORD *)(a1 + 320);
  long long v5 = *(_OWORD *)(a1 + 336);
  long long v3 = *(_OWORD *)(a1 + 288);
  outlined consume of NavigationState.Base(*(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168), *(void *)(a1 + 176), *(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)(a1 + 200), *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    *(void *)(a1 + 256),
    *(void *)(a1 + 264),
    *(void *)(a1 + 272),
    *(void *)(a1 + 280),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 304),
    *(void *)(a1 + 312),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    *(void *)(a1 + 368));
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

void partial apply for specialized closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(uint64_t a1)
{
}

{
  partial apply for specialized closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(a1, (void (*)(void))partial apply for closure #1 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:), (uint64_t (*)(uint64_t))partial apply for specialized closure #2 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:));
}

{
  partial apply for specialized closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(a1, (void (*)(void))partial apply for closure #1 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:), (uint64_t (*)(uint64_t))partial apply for specialized closure #2 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:));
}

uint64_t sub_1880F345C()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t outlined retain of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>(uint64_t a1)
{
  long long v6 = *(_OWORD *)(a1 + 352);
  long long v4 = *(_OWORD *)(a1 + 320);
  long long v5 = *(_OWORD *)(a1 + 336);
  long long v3 = *(_OWORD *)(a1 + 288);
  outlined copy of NavigationState.Base(*(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168), *(void *)(a1 + 176), *(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)(a1 + 200), *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    *(void *)(a1 + 256),
    *(void *)(a1 + 264),
    *(void *)(a1 + 272),
    *(void *)(a1 + 280),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 304),
    *(void *)(a1 + 312),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    *(void *)(a1 + 368));
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>.Iterator(uint64_t a1)
{
  long long v6 = *(_OWORD *)(a1 + 352);
  long long v4 = *(_OWORD *)(a1 + 320);
  long long v5 = *(_OWORD *)(a1 + 336);
  long long v3 = *(_OWORD *)(a1 + 288);
  outlined consume of NavigationState.Base(*(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168), *(void *)(a1 + 176), *(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)(a1 + 200), *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    *(void *)(a1 + 256),
    *(void *)(a1 + 264),
    *(void *)(a1 + 272),
    *(void *)(a1 + 280),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 304),
    *(void *)(a1 + 312),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    *(void *)(a1 + 368));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_1880F362C()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationHostingControllerCache_UIKit.ejectDeferred(at:)()
{
  return closure #1 in NavigationHostingControllerCache_UIKit.ejectDeferred(at:)();
}

uint64_t sub_1880F3670()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1880F36A8()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)()
{
  return specialized closure #2 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(*(void **)(v0 + 16), *(uint64_t **)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #2 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(*(void **)(v0 + 16), *(uint64_t **)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #2 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(*(void **)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_1880F3710()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

void partial apply for specialized closure #2 in UIHostingController.initialDataDrivenPresentationMode(canPop:)(char *a1)
{
  specialized closure #2 in UIHostingController.initialDataDrivenPresentationMode(canPop:)(*a1, *(unsigned char *)(v1 + 32), *(void *)(v1 + 40));
}

void specialized closure #2 in UIHostingController.initialDataDrivenPresentationMode(canPop:)(char a1, char a2, uint64_t a3)
{
  if (a1 & 1) == 0 && (a2)
  {
    uint64_t v3 = a3 + 16;
    swift_beginAccess();
    long long v4 = (void *)MEMORY[0x18C119DF0](v3);
    if (v4)
    {
      long long v5 = v4;
      id v6 = objc_msgSend(v4, sel_navigationController);

      if (v6)
      {
        static Transaction.current.getter();
        char v7 = Transaction.disablesAnimations.getter();
        swift_release();
        id v8 = objc_msgSend(v6, sel_popViewControllerAnimated_, (v7 & 1) == 0);
      }
    }
  }
}

double _ss5SliceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0H8SequenceVy___AC22_VariadicView_ChildrenVAC08ModifiedG0VyAC0D14ColumnModifierVAOyAC09InjectKeyO0VAC0d16BackgroundReaderO033_7632008E3567AB610EB09B57688D0EDELLVGGGGSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0x7000000000000007;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0xF000000000000007;
  *(_OWORD *)(a1 + 320) = xmmword_1883C77E0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  return result;
}

void type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(uint64_t a1)
{
}

void type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>()
{
  if (!lazy cache variable for type metadata for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>)
  {
    type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>();
    lazy protocol witness table accessor for type NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>> and conformance NavigationState.StackContent.Views.ViewsSequence<A, B>();
    unint64_t v0 = type metadata accessor for Slice();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>> and conformance NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>> and conformance NavigationState.StackContent.Views.ViewsSequence<A, B>;
  if (!lazy protocol witness table cache variable for type NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>> and conformance NavigationState.StackContent.Views.ViewsSequence<A, B>)
  {
    type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>> and conformance NavigationState.StackContent.Views.ViewsSequence<A, B>);
  }
  return result;
}

uint64_t _ss5SliceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0H8SequenceVy___AC22_VariadicView_ChildrenVAC08ModifiedG0VyAC0D14ColumnModifierVAOyAC09InjectKeyO0VAC0d16BackgroundReaderO033_7632008E3567AB610EB09B57688D0EDELLVGGGGSgWOg(uint64_t a1)
{
  unsigned int v1 = (*(void *)(a1 + 232) >> 57) & 0x38 | *(void *)(a1 + 232) & 7 | (*(void *)(a1 + 312) >> 51) & 0x1E00 | ((*(void *)(a1 + 312) & 7) << 6) & 0x1FFF | (*(_DWORD *)(a1 + 328) >> 3 << 13);
  if (v1 > 0x80000000) {
    return -v1;
  }
  else {
    return 0;
  }
}

uint64_t outlined release of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(uint64_t a1)
{
  long long v10 = *(_OWORD *)(a1 + 336);
  long long v11 = *(_OWORD *)(a1 + 352);
  long long v8 = *(_OWORD *)(a1 + 304);
  long long v9 = *(_OWORD *)(a1 + 320);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v4 = *(_OWORD *)(a1 + 240);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v3 = *(_OWORD *)(a1 + 208);
  outlined consume of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((unint64_t *)&v11 + 1),
    *(void *)(a1 + 368));
  return a1;
}

uint64_t outlined consume of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int16 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,unint64_t a46,uint64_t a47)
{
  uint64_t result = a9;
  if ((~a30 & 0x7000000000000007) != 0
    || (a40 & 0xF000000000000007) != 0xF000000000000007
    || (a42 & 0xFFFFFFFFFFFFFFF8) != 0x3FFFF8
    || (a46 & 0xFFFFFFFFFF0000FCLL) != 0)
  {
    outlined consume of NavigationState.Base(a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39,
      a40,
      a41,
      a42,
      a43,
      a44,
      a45,
      a46,
      a47);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t outlined retain of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>(uint64_t a1)
{
  long long v6 = *(_OWORD *)(a1 + 352);
  long long v4 = *(_OWORD *)(a1 + 320);
  long long v5 = *(_OWORD *)(a1 + 336);
  long long v3 = *(_OWORD *)(a1 + 288);
  outlined copy of NavigationState.Base(*(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168), *(void *)(a1 + 176), *(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)(a1 + 200), *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    *(void *)(a1 + 256),
    *(void *)(a1 + 264),
    *(void *)(a1 + 272),
    *(void *)(a1 + 280),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 304),
    *(void *)(a1 + 312),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    *(void *)(a1 + 368));
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1880F3D68()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)()
{
  return specialized closure #2 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(*(void **)(v0 + 16), *(uint64_t **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

{
  uint64_t v0;

  return specialized closure #2 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(*(void **)(v0 + 16), *(uint64_t **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

{
  uint64_t v0;

  return specialized closure #2 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(*(void **)(v0 + 16), *(uint64_t **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1880F3DD0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:)()
{
  return closure #1 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:)();
}

uint64_t sub_1880F3DF8()
{
  return swift_deallocObject();
}

uint64_t sub_1880F3E50()
{
  return swift_deallocObject();
}

uint64_t sub_1880F3F2C()
{
  return swift_deallocObject();
}

uint64_t sub_1880F3F94()
{
  return swift_deallocObject();
}

uint64_t sub_1880F4010()
{
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(uint64_t a1, void (*a2)(void), uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = v3[2];
  uint64_t v5 = v3[3];
  uint64_t v6 = v3[4];
  uint64_t v7 = v3[5];
  uint64_t v8 = *(void *)(v4 + 16);
  v13[0] = *(unsigned char *)(v4 + 8);
  uint64_t v14 = v8;
  uint64_t v11 = v4;
  uint64_t v12 = v5;
  v9[2] = v6;
  v9[3] = v4;
  v9[4] = v7;
  NavigationHostingControllerCache_UIKit.Source.ensureViewController(at:forPushing:configureExisting:makeNew:)(v13, 1, a2, (uint64_t)v10, a3, (void (*)(void))v9);
}

uint64_t objectdestroy_107Tm()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1880F412C()
{
  return swift_deallocObject();
}

uint64_t sub_1880F4198()
{
  return swift_deallocObject();
}

uint64_t sub_1880F4200()
{
  return swift_deallocObject();
}

uint64_t closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)(uint64_t result, char a2)
{
  if (a2)
  {
    unint64_t v2 = (void *)result;
    uint64_t result = swift_bridgeObjectRelease();
    *unint64_t v2 = MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t sub_1880F42F8()
{
  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for ReadDestinationsModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 41);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ReadDestinationsModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 42) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 41) = a2 + 1;
    }
  }
  return result;
}

uint64_t assignWithTake for PositionedNavigationDestinationProcessor(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (_OWORD *)(a1 + 8);
  uint64_t v6 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) != 1)
  {
    if (v5 != 1)
    {
      swift_weakTakeAssign();
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_release();
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_release();
      return a1;
    }
    outlined destroy of NavigationAuthority(a1);
    goto LABEL_6;
  }
  if (v5 == 1)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    return a1;
  }
  swift_weakTakeInit();
  *BOOL v4 = *v6;
  return a1;
}

ValueMetadata *type metadata accessor for PositionedNavigationDestination.Key()
{
  return &type metadata for PositionedNavigationDestination.Key;
}

_UNKNOWN **base witness table accessor for ViewModifier in PositionedNavigationDestinationProcessor<A>()
{
  return &protocol witness table for PositionedNavigationDestinationProcessor<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in ReadDestinationsModifier<A>()
{
  return &protocol witness table for ReadDestinationsModifier<A>;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ReadDestinationsModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t closure #2 in implicit closure #1 in static PositionedNavigationDestinationProcessor._makeView(modifier:inputs:body:)(unint64_t *a1)
{
  unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

unint64_t implicit closure #3 in implicit closure #2 in PositionedNavigationDestinationProcessor.PollingRule.updateValue()()
{
  return 0xD000000000000020;
}

uint64_t specialized implicit closure #5 in PositionedNavigationDestinationProcessor.PollingRule.updateValue()(uint64_t a1)
{
  uint64_t v42 = 91;
  unint64_t v43 = 0xE100000000000000;
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1;
    swift_bridgeObjectRetain_n();
    uint64_t v31 = v1 - 1;
    uint64_t v3 = 32;
    for (i = v2; ; uint64_t v2 = i)
    {
      uint64_t v29 = v3;
      long long v4 = *(_OWORD *)(v2 + v3 + 64);
      long long v5 = *(_OWORD *)(v2 + v3 + 96);
      long long v6 = *(_OWORD *)(v2 + v3 + 112);
      long long v38 = *(_OWORD *)(v2 + v3 + 80);
      long long v39 = v5;
      long long v40 = v6;
      long long v7 = *(_OWORD *)(v2 + v3 + 16);
      long long v33 = *(_OWORD *)(v2 + v3);
      long long v34 = v7;
      long long v8 = *(_OWORD *)(v2 + v3 + 48);
      long long v35 = *(_OWORD *)(v2 + v3 + 32);
      long long v36 = v8;
      long long v37 = v4;
      uint64_t v41 = *(void *)(v2 + v3 + 128);
      uint64_t v27 = *((void *)&v4 + 1);
      long long v28 = v38;
      unint64_t v30 = *((void *)&v39 + 1);
      uint64_t v25 = v39;
      uint64_t v26 = v6;
      long long v9 = v33;
      long long v10 = v34;
      long long v11 = v35;
      long long v12 = v8;
      char v13 = v4;
      outlined retain of NavigationRequest((uint64_t)&v33);
      outlined retain of NavigationRequest((uint64_t)&v33);
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      outlined copy of NavigationRequest.Action(v9, *((uint64_t *)&v9 + 1), v10, *((uint64_t *)&v10 + 1), v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13);
      v14._countAndFlagsBits = NavigationRequest.Action.description.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      outlined consume of NavigationRequest.Action(v9, *((uint64_t *)&v9 + 1), v10, *((uint64_t *)&v10 + 1), v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13);
      v15._countAndFlagsBits = 0x203A79656B5B205DLL;
      v15._object = (void *)0xE800000000000000;
      String.append(_:)(v15);
      if (!(v30 >> 62)) {
        break;
      }
      if (v30 >> 62 == 1)
      {
        uint64_t v44 = v27;
        long long v45 = v28;
        uint64_t v46 = v25;
        char v47 = v30 & 1;
        uint64_t v48 = v26;
        uint64_t v16 = NavigationState.ListKey.description.getter();
LABEL_7:
        unint64_t v18 = v17;
        goto LABEL_9;
      }
      unint64_t v18 = 0xE500000000000000;
      uint64_t v16 = 0x74696C7073;
LABEL_9:
      unint64_t v19 = v18;
      String.append(_:)(*(Swift::String *)&v16);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 93;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      outlined release of NavigationRequest((uint64_t)&v33);
      v21._countAndFlagsBits = 0xD00000000000001ELL;
      v21._object = (void *)0x800000018833FD90;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = 2314;
      v22._object = (void *)0xE200000000000000;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      outlined release of NavigationRequest((uint64_t)&v33);
      if (!v31)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_12;
      }
      --v31;
      uint64_t v3 = v29 + 136;
    }
    uint64_t v16 = NavigationState.StackContent.Key.debugDescription.getter(v27, v28);
    goto LABEL_7;
  }
LABEL_12:
  *(void *)&long long v33 = 93;
  *((void *)&v33 + 1) = 0xE100000000000000;
  swift_bridgeObjectRetain();
  uint64_t v32 = String.init<A>(_:)();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PositionedNavigationDestinationProcessor<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3F8](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t assignWithCopy for ReadDestinationsModifier.RequestsTransform(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  return a1;
}

uint64_t assignWithTake for ReadDestinationsModifier.RequestsTransform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t destroy for PositionedNavigationDestinationProcessor.PollingRule()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for PositionedNavigationDestinationProcessor.PollingRule(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PositionedNavigationDestinationProcessor.PollingRule(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PositionedNavigationDestinationProcessor.PollingRule(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PositionedNavigationDestinationProcessor.PollingRule(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t initializeWithCopy for PositionedNavigationDestination.Storage.SeededRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v13 = *(unsigned char *)(a2 + 64);
  outlined copy of NavigationRequest.Action(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v13);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PositionedNavigationDestination.Storage.SeededRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v24 = *(unsigned char *)(a2 + 64);
  outlined copy of NavigationRequest.Action(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v24);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  char v20 = *(unsigned char *)(a1 + 64);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v24;
  outlined consume of NavigationRequest.Action(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  long long v21 = *(_OWORD *)(a2 + 72);
  long long v22 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v22;
  *(_OWORD *)(a1 + 72) = v21;
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

__n128 __swift_memcpy140_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 124) = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for PositionedNavigationDestination.Storage.SeededRequest(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 64);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  char v13 = *(unsigned char *)(a1 + 64);
  long long v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  long long v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  *(unsigned char *)(a1 + 64) = v4;
  outlined consume of NavigationRequest.Action(v5, v6, v7, v8, v9, v10, v11, v12, v13);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_release();
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for PositionedNavigationDestination.Storage.SeededRequest(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 140)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 104) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for PositionedNavigationDestination.Storage.SeededRequest(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_DWORD *)(a1 + 136) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 140) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(void *)(a1 + 104) = 2 * -a2;
      *(void *)(a1 + 112) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 140) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PositionedNavigationDestination()
{
  return &type metadata for PositionedNavigationDestination;
}

uint64_t sub_1880F4FB0()
{
  outlined consume of NavigationRequest.Action(*(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(unsigned char *)(v0 + 128));
  swift_release();

  return swift_deallocObject();
}

uint64_t closure #1 in BarAppearanceBridge.uiPreferredStatusBarStyle.getter@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  int v3 = *a1;
  static Semantics.v5.getter();
  uint64_t result = isLinkedOnOrAfter(_:)();
  if (result)
  {
    uint64_t result = UIAccessibilityIsInvertColorsEnabled();
    uint64_t v5 = 3;
    if (v3) {
      uint64_t v5 = 1;
    }
    uint64_t v6 = 3;
    if (!v3) {
      uint64_t v6 = 1;
    }
    if (result) {
      uint64_t v5 = v6;
    }
  }
  else
  {
    uint64_t v5 = 3;
    if (!v3) {
      uint64_t v5 = 1;
    }
  }
  *a2 = v5;
  return result;
}

uint64_t BarAppearanceBridge.updateTabBarConfiguration()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
  swift_beginAccess();
  outlined init with copy of BarAppearanceBridge.UpdateContext?(v1, (uint64_t)&v26);
  if (!(void)v26)
  {
    outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v26, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
    return 0;
  }
  id v2 = (id)v26;
  outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v26);
  id v3 = objc_msgSend(v2, sel_tabBarController);
  if (!v3)
  {
LABEL_15:

    return 0;
  }
  char v4 = v3;
  uint64_t v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
  swift_beginAccess();
  uint64_t v6 = *v5;
  uint64_t v27 = 0;
  long long v26 = 0uLL;
  long long v28 = xmmword_18835ED10;
  if (!*(void *)(v6 + 16))
  {
LABEL_14:
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v26);

    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v26);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v9 = (unsigned __int8 *)(*(void *)(v6 + 56) + 80 * v7);
  int v10 = *v9;
  uint64_t v11 = *((void *)v9 + 1);
  uint64_t v12 = *((void *)v9 + 2);
  uint64_t v13 = *((void *)v9 + 4);
  unsigned __int8 v24 = v9[40];
  unsigned __int8 v25 = v9[24];
  uint64_t v23 = *((void *)v9 + 6);
  __int16 v21 = *(_WORD *)(v9 + 57);
  unsigned __int8 v22 = v9[56];
  uint64_t v14 = *((void *)v9 + 8);
  unsigned __int8 v15 = v9[72];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)&v26);
  LOBYTE(v26) = v10;
  *((void *)&v26 + 1) = v11;
  uint64_t v27 = v12;
  LOBYTE(v28) = v25;
  *((void *)&v28 + 1) = v13;
  unsigned __int8 v29 = v24;
  uint64_t v30 = v23;
  unsigned __int8 v31 = v22;
  __int16 v32 = v21;
  uint64_t v33 = v14;
  unsigned __int8 v34 = v15;
  BarAppearanceBridge.updateTabBarAppearance(_:tabBarController:)(&v26, v4);
  if (v14) {
    double v16 = 0.3;
  }
  else {
    double v16 = 0.0;
  }
  if (v10 == 2)
  {
    if (v14) {
      int v17 = 7;
    }
    else {
      int v17 = 0;
    }
  }
  else if (v14)
  {
    int v17 = 3;
  }
  else
  {
    int v17 = 0;
  }
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v4;
  *(_DWORD *)(v19 + 24) = v17;
  *(double *)(v19 + 32) = v16;
  id v20 = v4;
  onNextMainRunLoop(do:)();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  return 1;
}

uint64_t closure #1 in closure #1 in BarAppearanceBridge.updateBackAction(_:)()
{
  type metadata accessor for NavigationState.StackContent.Key?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationMode>, (uint64_t)&type metadata for PresentationMode, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v1);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

void BarAppearanceBridge.updateTabBarAppearance(_:tabBarController:)(long long *a1, void *a2)
{
  uint64_t v3 = v2;
  long long v5 = *a1;
  v17[1] = a1[1];
  long long v6 = a1[3];
  v17[2] = a1[2];
  v18[0] = v6;
  *(_OWORD *)((char *)v18 + 9) = *(long long *)((char *)a1 + 57);
  v17[0] = v5;
  type metadata accessor for UIKitTabBarController();
  uint64_t v7 = swift_dynamicCastClass();
  if (v7)
  {
    char v8 = (void *)v7;
    id v9 = a2;
    outlined retain of ToolbarAppearanceConfiguration((uint64_t)v17);
    unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    memset(v15, 0, sizeof(v15));
    long long v16 = xmmword_18835ED10;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v14[0] = v10;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, (uint64_t)v15, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v15);
    id v12 = v9;
    PlatformBarUpdater.callAsFunction(configurations:context:)(v10, 0, v8);
    swift_bridgeObjectRelease();

    uint64_t v13 = v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
    swift_beginAccess();
    outlined init with copy of BarAppearanceBridge.UpdateContext?(v13, (uint64_t)v14);
    if (*(void *)&v14[0])
    {
      outlined init with take of BarAppearanceBridge.UpdateContext(v14, (uint64_t)v15);
      closure #1 in BarAppearanceBridge.updateTabBarAppearance(_:tabBarController:)(v15, v3);
      outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)v15);
    }
    else
    {
      outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)v14, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
}

void closure #1 in BarAppearanceBridge.updateTabBarAppearance(_:tabBarController:)(id *a1, uint64_t a2)
{
  char v4 = (uint64_t *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
  swift_beginAccess();
  uint64_t v5 = *v4;
  uint64_t v116 = 0;
  long long v115 = 0uLL;
  long long v117 = xmmword_18835ED10;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_90;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v115);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_90:
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v115);
    return;
  }
  uint64_t v8 = *(void *)(v5 + 56) + 80 * v6;
  uint64_t v9 = *(void *)(v8 + 8);
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 24);
  int v12 = *(unsigned __int8 *)(v8 + 40);
  int v13 = *(unsigned __int8 *)(v8 + 56);
  int v14 = *(unsigned __int8 *)(v8 + 57);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)&v115);
  id v15 = objc_msgSend(*a1, sel_tabBarItem);
  if (v15)
  {
    long long v16 = v15;
    uint64_t v17 = *(void *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment);
    uint64_t v18 = *(void *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment + 8);
    if (v9) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v11 == 0;
    }
    if (v19) {
      int v20 = v13;
    }
    else {
      int v20 = 0;
    }
    if (v10) {
      BOOL v21 = 0;
    }
    else {
      BOOL v21 = v14 == 2;
    }
    uint64_t v96 = (void *)*MEMORY[0x1E4FB0700];
    int v22 = v20 & v12 ^ 1;
    if (!v21) {
      int v22 = 1;
    }
    int v110 = v22;
    uint64_t v106 = v17;
    swift_retain();
    uint64_t v105 = v18;
    swift_retain();
    char v23 = 0;
    uint64_t v24 = 0;
    uint64_t v98 = v10;
    uint64_t v99 = v9;
    unsigned int v97 = v11;
    int v25 = v14;
    int v101 = v14;
    v100 = v16;
    while (1)
    {
      char v111 = v23;
      unsigned __int8 v112 = *((unsigned char *)&outlined read-only object #0 of closure #1 in BarAppearanceBridge.updateTabBarAppearance(_:tabBarController:)
             + v24
             + 32);
      long long v26 = &selRef_scrollEdgeAppearance;
      if (!v112) {
        long long v26 = &selRef_standardAppearance;
      }
      id v27 = [v16 *v26];
      if (v27)
      {
        long long v28 = v27;
        swift_getObjectType();
        unsigned int v29 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI);

        if (!v29) {
          goto LABEL_18;
        }
      }
      if (!v110)
      {
        if (v112) {
          objc_msgSend(v16, sel_setScrollEdgeAppearance_, 0);
        }
        else {
          objc_msgSend(v16, sel_setStandardAppearance_, 0);
        }
        goto LABEL_18;
      }
      if ((v112 & (v11 == 0)) != 0)
      {
        int v25 = 2;
        int v30 = 3;
      }
      else
      {
        int v30 = v11;
      }
      type metadata accessor for UIKitTabBarAppearance();
      id v31 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      swift_retain();
      swift_retain();
      swift_retain();
      id v32 = objc_msgSend(v31, sel_init);
      uint64_t v33 = v32;
      if (v30 == 1)
      {
        swift_retain();
        swift_retain();
        swift_retain();
        objc_msgSend(v33, sel_configureWithDefaultBackground);
        if (!v10) {
          goto LABEL_37;
        }
      }
      else
      {
        if (v30 == 3)
        {
          uint64_t v34 = v11;
          objc_msgSend(v32, sel_configureWithTransparentBackground);
          if (!v9) {
            goto LABEL_38;
          }
          goto LABEL_30;
        }
        swift_retain();
        swift_retain();
        swift_retain();
        if (!v10)
        {
LABEL_37:
          uint64_t v34 = v11;
          swift_release();
          swift_release();
          swift_release();
          if (!v9) {
            goto LABEL_38;
          }
          goto LABEL_30;
        }
      }
      id v108 = v33;
      uint64_t v114 = v10;
      *(void *)&v113[0] = v106;
      *((void *)&v113[0] + 1) = v105;
      swift_retain();
      ShapeStyle.resolveBackgroundMaterial(in:level:)();
      unsigned __int8 v37 = BYTE8(v115);
      if (BYTE8(v115) != 0xFF)
      {
        uint64_t v38 = v115;
        switch(BYTE8(v115))
        {
          case 1:
          case 2:
            outlined consume of Material?(v115, BYTE8(v115));
            goto LABEL_84;
          case 3:
            int v103 = v25;
            uint64_t v91 = 6;
            switch((uint64_t)v115)
            {
              case 1:
                uint64_t v91 = 7;
                goto LABEL_77;
              case 2:
                uint64_t v91 = 4;
                goto LABEL_77;
              case 3:
              case 4:
                uint64_t v91 = 9;
                goto LABEL_77;
              case 5:
                uint64_t v91 = 10;
                goto LABEL_77;
              case 6:
                uint64_t v93 = 6;
                goto LABEL_82;
              case 7:
                uint64_t v93 = 7;
LABEL_82:
                outlined consume of Material?(v93, BYTE8(v115));
                goto LABEL_83;
              default:
LABEL_77:
                uint64_t v34 = v11;
                id v90 = objc_msgSend(self, sel_effectWithStyle_, v91);
                goto LABEL_78;
            }
          default:
            int v103 = v25;
            uint64_t v81 = *(void *)(v115 + 16);
            uint64_t v82 = *(void *)(v115 + 24);
            uint64_t v83 = *(void *)(v115 + 32);
            uint64_t v84 = *(void *)(v115 + 40);
            v85 = *(void **)(v115 + 48);
            v86 = self;
            outlined copy of Material?(v38, v37);
            id v87 = v85;
            uint64_t v88 = (void *)MEMORY[0x18C115780](v81, v82);
            v89 = (void *)MEMORY[0x18C115780](v83, v84);
            id v90 = objc_msgSend(v86, sel__effectForLightMaterial_darkMaterial_bundle_, v88, v89, v87);

            if (!v90)
            {
              outlined consume of Material?(v38, v37);
              outlined consume of Material?(v38, v37);
              uint64_t v10 = v98;
              uint64_t v9 = v99;
              uint64_t v11 = v97;
LABEL_83:
              long long v16 = v100;
              int v25 = v103;
              goto LABEL_84;
            }

            outlined consume of Material?(v38, v37);
            uint64_t v10 = v98;
            uint64_t v9 = v99;
            uint64_t v34 = v97;
LABEL_78:
            objc_msgSend(v108, sel_setBackgroundEffect_, v90);

            unsigned __int8 v92 = v37;
            uint64_t v33 = v108;
            outlined consume of Material?(v38, v92);
            swift_release();
            swift_release();
            swift_release_n();
            long long v16 = v100;
            int v25 = v103;
            if (v9) {
              goto LABEL_30;
            }
            break;
        }
LABEL_38:
        swift_retain();
        swift_retain();
        swift_retain();
        if (v25 == 2)
        {
LABEL_39:
          swift_release();
          swift_release();
          uint64_t v11 = v34;
          int v25 = v101;
          goto LABEL_56;
        }
LABEL_44:
        if (v25) {
          static Color.white.getter();
        }
        else {
          static Color.black.getter();
        }
        uint64_t v36 = MEMORY[0x1E4FBC840];
        char v102 = v25;
        swift_release();
        int v104 = 0;
        goto LABEL_48;
      }
LABEL_84:
      uint64_t v34 = v11;
      *(void *)&v113[0] = v10;
      *(void *)&long long v115 = v106;
      *((void *)&v115 + 1) = v105;
      if (ShapeStyle.fallbackColor(in:level:)())
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
        uint64_t v94 = swift_retain();
        id v95 = UIColor.init(_:)(v94);
        objc_msgSend(v108, sel_setBackgroundColor_, v95);
        swift_release();
        swift_release();
        uint64_t v33 = v108;
        swift_release();

        swift_release_n();
        if (!v9) {
          goto LABEL_38;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release_n();
        uint64_t v33 = v108;
        if (!v9) {
          goto LABEL_38;
        }
      }
LABEL_30:
      *(void *)&v113[0] = v9;
      *(void *)&long long v115 = v106;
      *((void *)&v115 + 1) = v105;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v35 = ShapeStyle.fallbackColor(in:level:)();
      if (v25 != 2) {
        goto LABEL_44;
      }
      if (!v35) {
        goto LABEL_39;
      }
      char v102 = 2;
      int v104 = 1;
      uint64_t v36 = MEMORY[0x1E4FBC840];
LABEL_48:
      uint64_t v39 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      uint64_t v40 = swift_retain();
      id v41 = UIColor.init(_:)(v40);
      id v42 = objc_msgSend(v33, sel_stackedLayoutAppearance);
      id v43 = objc_msgSend(v42, sel_selected);

      id v109 = (id)v39;
      *(void *)&long long v117 = v39;
      *(void *)&long long v115 = v41;
      id v44 = v96;
      id v45 = v41;
      id v46 = objc_msgSend(v43, sel_titleTextAttributes);
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
      uint64_t v47 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v114 = v47;
      if ((void)v117)
      {
        outlined init with take of Any(&v115, v113);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v113, v44, isUniquelyReferenced_nonNull_native);
        uint64_t v114 = v47;

        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v115, (unint64_t *)&lazy cache variable for type metadata for Any?, v36 + 8);
        specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v44, v113);

        outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)v113, (unint64_t *)&lazy cache variable for type metadata for Any?, v36 + 8);
      }
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v43, sel_setTitleTextAttributes_, isa);

      objc_msgSend(v43, sel_setIconColor_, v45);
      id v50 = objc_msgSend(v33, sel_inlineLayoutAppearance);
      id v51 = objc_msgSend(v50, sel_selected);

      *(void *)&long long v117 = v109;
      *(void *)&long long v115 = v45;
      id v107 = v45;
      id v52 = v44;
      id v53 = objc_msgSend(v51, sel_titleTextAttributes);
      uint64_t v54 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v114 = v54;
      if ((void)v117)
      {
        outlined init with take of Any(&v115, v113);
        char v55 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v113, v52, v55);
        uint64_t v114 = v54;

        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v115, (unint64_t *)&lazy cache variable for type metadata for Any?, v36 + 8);
        specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v52, v113);

        outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)v113, (unint64_t *)&lazy cache variable for type metadata for Any?, v36 + 8);
      }
      Class v56 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v51, sel_setTitleTextAttributes_, v56);

      objc_msgSend(v51, sel_setIconColor_, v107);
      if (v104)
      {
        swift_release();
        uint64_t v10 = v98;
        swift_release();
        uint64_t v9 = v99;
        swift_release();

        uint64_t v11 = v97;
        int v25 = v101;
        long long v16 = v100;
LABEL_56:
        swift_release();
        if (v112) {
          goto LABEL_68;
        }
        goto LABEL_16;
      }
      if (v102) {
        uint64_t v57 = 2;
      }
      else {
        uint64_t v57 = 1;
      }
      id v58 = objc_msgSend(self, sel_secondaryLabelColor);
      id v59 = objc_msgSend(self, sel_traitCollectionWithUserInterfaceStyle_, v57);
      id v60 = objc_msgSend(v58, sel_resolvedColorWithTraitCollection_, v59);

      id v61 = objc_msgSend(v33, sel_stackedLayoutAppearance);
      id v62 = objc_msgSend(v61, sel_normal);

      *(void *)&long long v117 = v109;
      *(void *)&long long v115 = v60;
      id v63 = v52;
      id v64 = v60;
      id v65 = objc_msgSend(v62, sel_titleTextAttributes);
      uint64_t v66 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v114 = v66;
      if ((void)v117)
      {
        outlined init with take of Any(&v115, v113);
        char v67 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v113, v63, v67);
        uint64_t v114 = v66;

        swift_bridgeObjectRelease();
        uint64_t v68 = MEMORY[0x1E4FBC840];
      }
      else
      {
        uint64_t v69 = MEMORY[0x1E4FBC840] + 8;
        outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v115, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
        specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v63, v113);

        uint64_t v70 = v69;
        uint64_t v68 = MEMORY[0x1E4FBC840];
        outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)v113, (unint64_t *)&lazy cache variable for type metadata for Any?, v70);
      }
      uint64_t v71 = v68 + 8;
      Class v72 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v62, sel_setTitleTextAttributes_, v72);

      objc_msgSend(v62, sel_setIconColor_, v64);
      id v73 = objc_msgSend(v33, sel_inlineLayoutAppearance);
      id v74 = objc_msgSend(v73, sel_normal);

      *(void *)&long long v117 = v109;
      *(void *)&long long v115 = v64;
      id v75 = v64;
      id v76 = v63;
      id v77 = objc_msgSend(v74, sel_titleTextAttributes);
      uint64_t v78 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v114 = v78;
      if ((void)v117)
      {
        outlined init with take of Any(&v115, v113);
        char v79 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v113, v76, v79);
        uint64_t v114 = v78;

        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v115, (unint64_t *)&lazy cache variable for type metadata for Any?, v71);
        specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v76, v113);

        outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)v113, (unint64_t *)&lazy cache variable for type metadata for Any?, v71);
      }
      Class v80 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v74, sel_setTitleTextAttributes_, v80);

      objc_msgSend(v74, sel_setIconColor_, v75);
      swift_release();
      uint64_t v10 = v98;
      swift_release();
      uint64_t v9 = v99;
      swift_release();
      swift_release();

      uint64_t v11 = v97;
      int v25 = v101;
      long long v16 = v100;
      if (v112)
      {
LABEL_68:
        objc_msgSend(v16, sel_setScrollEdgeAppearance_, v33);
        goto LABEL_17;
      }
LABEL_16:
      objc_msgSend(v16, sel_setStandardAppearance_, v33);
LABEL_17:
      swift_release();
      swift_release();
      swift_release();

LABEL_18:
      char v23 = 1;
      uint64_t v24 = 1u;
      if (v111)
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        return;
      }
    }
  }
  swift_release();
  swift_release();
  swift_release();
}

id closure #1 in BarAppearanceBridge.updateTabBarVisibility(_:tabBarController:)(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, sel_hideBarWithTransition_duration_, a2);
}

id closure #2 in BarAppearanceBridge.updateTabBarVisibility(_:tabBarController:)(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, sel_showBarWithTransition_duration_, a2);
}

id UIKitNavigationBarAppearance.__deallocating_deinit()
{
  return UIKitNavigationBarAppearance.__deallocating_deinit(type metadata accessor for UIKitNavigationBarAppearance);
}

uint64_t type metadata accessor for UIKitNavigationBarAppearance()
{
  return self;
}

id @objc UIKitNavigationBarAppearance.init(idiom:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), SEL *a5)
{
  v8.receiver = a1;
  v8.super_class = (Class)a4();
  return objc_msgSendSuper2(&v8, *a5, a3);
}

id UIKitTabBarAppearance.__deallocating_deinit()
{
  return UIKitNavigationBarAppearance.__deallocating_deinit(type metadata accessor for UIKitTabBarAppearance);
}

id UIKitNavigationBarAppearance.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for UIKitTabBarAppearance()
{
  return self;
}

uint64_t type metadata accessor for UIKitAction()
{
  return self;
}

uint64_t key path getter for BarEnvironmentViewModel.visibility : BarEnvironmentViewModel@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for BarEnvironmentViewModel.visibility : BarEnvironmentViewModel()
{
  return static Published.subscript.setter();
}

uint64_t key path getter for BarEnvironmentViewModel.colorScheme : BarEnvironmentViewModel@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for BarEnvironmentViewModel.colorScheme : BarEnvironmentViewModel()
{
  return static Published.subscript.setter();
}

uint64_t sub_1880F6A98()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1880F6AD0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1880F6B08()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in BarAppearanceBridge.didUpdate(bar:barUpdates:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_setNeedsStatusBarAppearanceUpdate);
}

uint64_t outlined destroy of BarAppearanceBridge.UpdateContext?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for NavigationState.StackContent.Key?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1880F6BD0()
{
  return swift_deallocObject();
}

id _s7SwiftUI19BarAppearanceBridgeC09updateTabC10Visibility33_BF747AB022DCE7FC5B6AD0F035BC8E0DLL_03tabC10ControlleryAA07ToolbarD13ConfigurationV_So05UITabcS0CtFyycfU0_TA_0()
{
  return partial apply for closure #2 in BarAppearanceBridge.updateTabBarVisibility(_:tabBarController:)((SEL *)&selRef_showBarWithTransition_duration_);
}

id _s7SwiftUI19BarAppearanceBridgeC09updateTabC10Visibility33_BF747AB022DCE7FC5B6AD0F035BC8E0DLL_03tabC10ControlleryAA07ToolbarD13ConfigurationV_So05UITabcS0CtFyycfU_TA_0()
{
  return partial apply for closure #2 in BarAppearanceBridge.updateTabBarVisibility(_:tabBarController:)((SEL *)&selRef_hideBarWithTransition_duration_);
}

id partial apply for closure #2 in BarAppearanceBridge.updateTabBarVisibility(_:tabBarController:)(SEL *a1)
{
  return objc_msgSend(*(id *)(v1 + 16), *a1, *(unsigned int *)(v1 + 24), *(double *)(v1 + 32));
}

uint64_t sub_1880F6C38()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in BarAppearanceBridge.updateBackAction(_:)()
{
  return closure #1 in closure #1 in BarAppearanceBridge.updateBackAction(_:)();
}

uint64_t (*AnyFileDocument.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v6 = (void *)swift_allocObject();
  _OWORD v6[2] = a2;
  v6[3] = a3;
  v6[4] = a1;
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return partial apply for closure #1 in AnyFileDocument.init<A>(_:);
}

uint64_t closure #1 in AnyFileDocument.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  double v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  int v13 = (char *)&v15 - v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(a4 + 48))(a1, a3, a4, v11);
  if (!v4)
  {
    a2 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(a4 + 56))(v13, a1, a3, a4);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
  }
  return a2;
}

uint64_t sub_1880F6E84()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnyFileDocument.init<A>(_:)(uint64_t a1)
{
  return closure #1 in AnyFileDocument.init<A>(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t (*specialized AnyFileDocument.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  double v7 = MEMORY[0x1F4188790](a1);
  objc_super v8 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v5 + 16))(v8, v7);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, v8, a2);
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  return partial apply for closure #1 in AnyFileDocument.init<A>(_:);
}

uint64_t sub_1880F701C()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnyFileDocument.init<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 32))();
}

uint64_t destroy for AnyFileDocument()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for AnyFileDocument(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AnyFileDocument(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AnyFileDocument(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AnyFileDocument()
{
  return &type metadata for AnyFileDocument;
}

double protocol witness for Rule.value.getter in conformance AccessibilityOpacityAttachment@<D0>(void *a1@<X8>)
{
  uint64_t Value = (double *)AGGraphGetValue();
  double result = *Value;
  *a1 = *(void *)Value;
  return result;
}

uint64_t AccessibilityOpacityModifier.initialAttachment(for:)(double a1)
{
  if (a1 >= 0.001)
  {
    return AccessibilityAttachment.init()();
  }
  else
  {
    unsigned int v1 = dword_1ED451E60;
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v5 = Dictionary.init(minimumCapacity:)();
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0);
    v4[3] = v2;
    v4[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>();
    v4[0] = v1;
    specialized Dictionary.subscript.setter((uint64_t)v4, MEMORY[0x1E4F40AA8]);
    v4[0] = v5;
    static AccessibilityAttachment.properties(_:)();
    return swift_bridgeObjectRelease();
  }
}

uint64_t protocol witness for AccessibilityViewModifier.initialAttachment(for:) in conformance AccessibilityOpacityModifier()
{
  return AccessibilityOpacityModifier.initialAttachment(for:)(*v0);
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityOpacityModifier()
{
}

ValueMetadata *type metadata accessor for AccessibilityOpacityAttachment()
{
  return &type metadata for AccessibilityOpacityAttachment;
}

ValueMetadata *type metadata accessor for AccessibilityOpacityModifier()
{
  return &type metadata for AccessibilityOpacityModifier;
}

uint64_t View._gaugeTintOverride(primaryColor:secondaryColor:)()
{
  return swift_release();
}

uint64_t EnvironmentValues.gaugeTintOverride.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<GaugeTintOverrideKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<(Color, Color)?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<GaugeTintOverrideKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<GaugeTintOverrideKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<GaugeTintOverrideKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<(Color, Color)?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<GaugeTintOverrideKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<GaugeTintOverrideKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.gaugeTintOverride : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.gaugeTintOverride.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1880F761C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.gaugeTintOverride.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.gaugeTintOverride : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  outlined copy of (Color, Color)?(*a1);
  specialized EnvironmentValues.subscript.setter(v1);

  return outlined consume of ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?(v1);
}

uint64_t sub_1880F76B8()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<(Color, Color)?>(uint64_t a1)
{
}

void type metadata accessor for (Color, Color)?(uint64_t a1)
{
}

void type metadata accessor for _EnvironmentKeyWritingModifier<(Color, Color)?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (Color, Color)()
{
  if (!lazy cache variable for type metadata for (Color, Color))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Color, Color));
    }
  }
}

void type metadata accessor for EnvironmentPropertyKey<GaugeTintOverrideKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<GaugeTintOverrideKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<GaugeTintOverrideKey>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<(Color, Color)?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for GaugeTintOverrideKey()
{
  return &type metadata for GaugeTintOverrideKey;
}

double specialized AnimatedValueTrack<A>.VectorPath.arcLength.getter(uint64_t a1)
{
  type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>();
  uint64_t v30 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (double *)((char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v27 - v6;
  uint64_t v29 = type metadata accessor for Quadrature.Integrator();
  uint64_t v8 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v10 = (uint64_t *)((char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for Quadrature();
  MEMORY[0x1F4188790](v11);
  int v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a1 + 16);
  if (!v15) {
    return 0.0;
  }
  unsigned int v28 = *MEMORY[0x1E4FBAA18];
  long long v16 = (void (**)(void *, void, uint64_t))(v8 + 104);
  uint64_t v17 = (void (**)(char *, uint64_t))(v12 + 8);
  swift_bridgeObjectRetain();
  uint64_t v27 = a1;
  uint64_t v18 = (long long *)(a1 + 64);
  float64x2_t v19 = 0uLL;
  double v20 = 0.0;
  do
  {
    float64x2_t v21 = (float64x2_t)*(v18 - 2);
    if (*((unsigned char *)v18 + 57))
    {
      if (*((unsigned char *)v18 + 57) == 1)
      {
        float64x2_t v31 = (float64x2_t)*(v18 - 2);
        float64x2_t v32 = v19;
        float64x2_t v33 = v21;
        long long v22 = *v18;
        long long v34 = *(v18 - 1);
        long long v35 = v22;
        *uint64_t v10 = 8;
        (*v16)(v10, v28, v29);
        uint64_t v23 = Quadrature.init(integrator:absoluteTolerance:relativeTolerance:)();
        MEMORY[0x1F4188790](v23);
        *(&v27 - 2) = (uint64_t)&v32;
        Quadrature.integrate(over:integrand:)();
        outlined init with copy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v7, (uint64_t)v4);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          float64x2_t v24 = vsubq_f64(v33, v32);
          double v25 = sqrt(vaddvq_f64(vmulq_f64(v24, v24)));
          outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v7);
          (*v17)(v14, v11);
          outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v4);
        }
        else
        {
          outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v7);
          (*v17)(v14, v11);
          double v25 = *v4;
        }
        double v20 = v20 + v25;
        float64x2_t v19 = v31;
      }
    }
    else
    {
      float64x2_t v19 = (float64x2_t)*(v18 - 2);
    }
    v18 += 6;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  return v20;
}

double specialized Curve.velocity(at:)(double a1)
{
  *(void *)&double result = *(_OWORD *)&vaddq_f64(vaddq_f64(vmulq_n_f64(v1[2], a1 * a1 * 3.0 + a1 * -4.0 + 1.0), vaddq_f64(vmulq_n_f64(*v1, a1 * a1 * 6.0 - a1 * 6.0), vmulq_n_f64(v1[1], a1 * 6.0 - a1 * a1 * 6.0))), vmulq_n_f64(v1[3], a1 * a1 * 3.0 - (a1 + a1)));
  return result;
}

uint64_t AnimatedValueTrack.appending(track:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a3);
  uint64_t WitnessTable = swift_getWitnessTable();
  return AnimatedValueTrackSource.combined<A>(with:)(a1, v7, a2, v8, WitnessTable, a3);
}

uint64_t AnimatedValueTrack.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1, a2, a3, a4);
  *(void *)(a5 + 24) = type metadata accessor for EmptyAnimatedValueTrackSource();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a5 + 32) = result;
  return result;
}

uint64_t AnimatedValueTrack.init<A>(source:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  uint64_t v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v7(boxed_opaque_existential_1, a1, a2);
}

uint64_t AnimatedValueTrack.duration.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
}

uint64_t AnimatedValueTrack.update(value:mix:at:)(uint64_t a1, double a2, double a3)
{
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double))(v8 + 24))(a1, v7, v8, a2, a3);
}

uint64_t AnimatedValueTrack.update(value:at:)(uint64_t a1, double a2)
{
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double))(v6 + 24))(a1, v5, v6, 1.0, a2);
}

uint64_t AnimatedValueTrack.init(track:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  a2[3] = type metadata accessor for AnimatedValueTrack();
  a2[4] = swift_getWitnessTable();
  *a2 = swift_allocObject();
  return a1();
}

uint64_t type metadata accessor for AnimatedValueTrack()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1880F8060()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t AnimatedValueTrack.init<A>(path:velocity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v9 = MEMORY[0x1E4FBC860];
  Path.forEach(_:)();
  double v6 = specialized AnimatedValueTrack<A>.VectorPath.arcLength.getter(v9) / a3;
  type metadata accessor for AnimatedValueTrack<CGPoint><A>.PacedPathSource();
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = _sSo7CGPointVAB7SwiftUI10AnimatableACWlTm_0(&lazy protocol witness table cache variable for type AnimatedValueTrack<CGPoint><A>.PacedPathSource and conformance AnimatedValueTrack<A><A>.PacedPathSource, (void (*)(uint64_t))type metadata accessor for AnimatedValueTrack<CGPoint><A>.PacedPathSource);
  uint64_t result = outlined release of Path(a1);
  *(void *)a2 = v9;
  *(double *)(a2 + 8) = v6;
  return result;
}

void partial apply for closure #1 in AnimatedValueTrack<A>.VectorPath<>.init(path:)(uint64_t a1)
{
  closure #1 in AnimatedValueTrack<A>.VectorPath<>.init(path:)(a1, *(double **)(v1 + 16), *(char ***)(v1 + 24), *(float64x2_t **)(v1 + 32));
}

void type metadata accessor for AnimatedValueTrack<CGPoint><A>.PacedPathSource()
{
  if (!lazy cache variable for type metadata for AnimatedValueTrack<CGPoint><A>.PacedPathSource)
  {
    type metadata accessor for CGPoint(255);
    _sSo7CGPointVAB7SwiftUI10AnimatableACWlTm_0(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, type metadata accessor for CGPoint);
    unint64_t v0 = type metadata accessor for AnimatedValueTrack<A>.PacedPathSource();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatedValueTrack<CGPoint><A>.PacedPathSource);
    }
  }
}

uint64_t AnimatedValueTrack.update(velocity:mix:at:)(uint64_t a1, double a2, double a3)
{
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double))(v8 + 32))(a1, v7, v8, a2, a3);
}

uint64_t static AnimatedValueTrack.== infix(_:_:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(a1, v5);
  uint64_t v8 = a2[3];
  uint64_t v9 = __swift_project_boxed_opaque_existential_1(a2, v8);

  return static AnimatedValueTrack.areSourcesEqual<A, B>(_:_:)((uint64_t)v7, (uint64_t)v9, a3, v5, v8, v6);
}

uint64_t static AnimatedValueTrack.areSourcesEqual<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v26[1] = a6;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v26 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a4 - 8);
  double v18 = MEMORY[0x1F4188790](v17);
  double v20 = (char *)v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v15, a2, a5, v18);
  int v22 = swift_dynamicCast();
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if (v22)
  {
    v23(v12, 0, 1, a4);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v12, a4);
    char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, a4);
  }
  else
  {
    v23(v12, 1, 1, a4);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    char v24 = 0;
  }
  return v24 & 1;
}

uint64_t AnimatedValueTrack.keyPath<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[3];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  AnimatedValueTrackSource.keyPath<A>(_:)(a1, v5, v15);
  long long v14 = v16;
  uint64_t v6 = v16;
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(v15, v16);
  uint64_t v8 = *(void *)(v6 - 8);
  double v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v15[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v11, v9);
  *(_OWORD *)(a2 + 24) = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
  (*(void (**)(uint64_t *, char *, uint64_t))(v8 + 32))(boxed_opaque_existential_1, v11, v6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatedValueTrack<A>(void *a1, void *a2, uint64_t a3)
{
  return static AnimatedValueTrack.== infix(_:_:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t AnimatedValueTrack.update(velocity:at:)(uint64_t a1, double a2)
{
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double))(v6 + 32))(a1, v5, v6, 1.0, a2);
}

uint64_t AnimatedValueTrack<A>.init(duration:interpolation:constantVelocity:keyframes:)@<X0>(unsigned __int8 *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, double a7@<D0>)
{
  if (a2)
  {
    unsigned __int8 v12 = *a1;
    uint64_t v8 = AnimatedValueTrack<A>.PacedPathSource.init(duration:keyframes:interpolation:)(a3, &v12, a4, a5);
    uint64_t v10 = v9;
    a6[3] = type metadata accessor for AnimatedValueTrack<A>.PacedPathSource();
    uint64_t result = swift_getWitnessTable();
    a6[1] = v10;
  }
  else
  {
    unsigned __int8 v13 = *a1;
    uint64_t v8 = AnimatedValueTrack<A>.VectorPath.init(duration:keyframes:interpolation:)(a3, &v13, a4, a5, a7);
    a6[3] = type metadata accessor for AnimatedValueTrack<A>.VectorPath();
    uint64_t result = swift_getWitnessTable();
  }
  a6[4] = result;
  *a6 = v8;
  return result;
}

uint64_t AnimatedValueTrack<A>.init(duration:interpolation:constantVelocity:values:)@<X0>(unsigned __int8 *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, double a7@<D0>)
{
  unsigned __int8 v19 = *a1;
  v18[6] = a3;
  _OWORD v18[2] = a4;
  _OWORD v18[3] = a5;
  uint64_t v12 = type metadata accessor for Array();
  uint64_t v13 = type metadata accessor for AnimatedValueKeyframe();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in AnimatedValueTrack<A>.init(duration:interpolation:constantVelocity:values:), (uint64_t)v18, v12, v13, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v15);
  swift_bridgeObjectRelease();
  return AnimatedValueTrack<A>.init(duration:interpolation:constantVelocity:keyframes:)(&v19, a2, v16, a4, a5, a6, a7);
}

uint64_t closure #1 in AnimatedValueTrack<A>.init(duration:interpolation:constantVelocity:values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v15 - v7;
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v12, a1, a2, v10);
  static AnimatedValueKeyframe.InterpolationParameters.automatic.getter((uint64_t)v8);
  memset(v15, 0, sizeof(v15));
  char v16 = 1;
  return AnimatedValueKeyframe.init(value:interpolation:incomingTimingCurve:)((uint64_t)v12, (uint64_t)v8, v15, a2, a3);
}

uint64_t partial apply for closure #1 in AnimatedValueTrack<A>.init(duration:interpolation:constantVelocity:values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in AnimatedValueTrack<A>.init(duration:interpolation:constantVelocity:values:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t AnimatedValueTrack<A>.init(interpolation:keyframes:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  char v8 = *a1;
  uint64_t v6 = AnimatedValueTrack<A>.VectorPath.init(keyframes:interpolation:)(a2, &v8, a3, a4);
  a5[3] = type metadata accessor for AnimatedValueTrack<A>.VectorPath();
  uint64_t result = swift_getWitnessTable();
  a5[4] = result;
  *a5 = v6;
  return result;
}

uint64_t AnimatedValueTrack<A>.init(interpolation:values:)@<X0>(char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  char v9 = *a1;
  type metadata accessor for AnimatedValueKeyframe();
  uint64_t v7 = Dictionary.mapValues<A>(_:)();
  swift_bridgeObjectRelease();
  return AnimatedValueTrack<A>.init(interpolation:keyframes:)(&v9, v7, a2, a3, a4);
}

uint64_t partial apply for closure #1 in AnimatedValueTrack<A>.init(interpolation:values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in AnimatedValueTrack<A>.init(duration:interpolation:constantVelocity:values:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t AnimatedValueTrack<A>.init(duration:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v17 - v12;
  uint64_t v20 = AnimatedValueTrack<A>.VectorPath.init()();
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  uint64_t v14 = type metadata accessor for AnimatedValueTrack<A>.VectorPath();
  AnimatedValueTrack<A>.VectorPath.move(to:)((uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  AnimatedValueTrack<A>.VectorPath.hold(for:)(a5);
  uint64_t v15 = v20;
  uint64_t v18 = v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v17 = v15;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return outlined init with take of OptionalBinaryInteger(&v17, a4);
}

uint64_t AnimatedValueTrack<A>.init(discreteValues:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  float64x2_t v33 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t i = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v38 = (char *)&v32 - v5;
  long long v34 = *(void (***)(char *, uint64_t))(a1 - 8);
  MEMORY[0x1F4188790](v6);
  char v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v42 = type metadata accessor for Optional();
  uint64_t v40 = *(void (***)(double *, char *, uint64_t))(v42 - 8);
  MEMORY[0x1F4188790](v42);
  id v43 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (double *)((char *)&v32 - v12);
  uint64_t v49 = AnimatedValueTrack<A>.VectorPath.init()();
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  v48[0] = Dictionary.filter(_:)();
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  type metadata accessor for Dictionary();
  swift_getWitnessTable();
  uint64_t v14 = Sequence.sorted(by:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = 0;
  v40 += 4;
  uint64_t v36 = a2 + 24;
  unsigned __int8 v37 = (void (**)(char *, char *, uint64_t))(v34 + 4);
  long long v35 = (void (**)(uint64_t, uint64_t))(i + 8);
  double v16 = 0.0;
  ++v34;
  for (i = v14; ; uint64_t v14 = i)
  {
    if (v15 == MEMORY[0x18C115CB0](v14, TupleTypeMetadata2))
    {
      uint64_t v18 = *(void *)(TupleTypeMetadata2 - 8);
      unsigned __int8 v19 = v43;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v43, 1, 1, TupleTypeMetadata2);
      goto LABEL_9;
    }
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    unsigned __int8 v19 = v43;
    if (IsNativeType)
    {
      uint64_t v21 = *(void *)(TupleTypeMetadata2 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v43, v14+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(void *)(v21 + 72) * v15, TupleTypeMetadata2);
      BOOL v22 = __OFADD__(v15++, 1);
      if (v22) {
        break;
      }
      goto LABEL_8;
    }
    uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v21 = *(void *)(TupleTypeMetadata2 - 8);
    if (*(void *)(v21 + 64) != 8)
    {
      __break(1u);
      return result;
    }
    v48[0] = result;
    (*(void (**)(char *, void *, uint64_t))(v21 + 16))(v19, v48, TupleTypeMetadata2);
    swift_unknownObjectRelease();
    BOOL v22 = __OFADD__(v15++, 1);
    if (v22) {
      break;
    }
LABEL_8:
    uint64_t v18 = v21;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, TupleTypeMetadata2);
LABEL_9:
    (*v40)(v13, v19, v42);
    if ((*(unsigned int (**)(double *, uint64_t, uint64_t))(v18 + 48))(v13, 1, TupleTypeMetadata2) == 1) {
      goto LABEL_16;
    }
    double v23 = *v13;
    (*v37)(v8, (char *)v13 + *(int *)(TupleTypeMetadata2 + 48), a1);
    swift_bridgeObjectRetain();
    char v24 = AnimatedValueTrack<A>.VectorPath.isEmpty.getter();
    swift_bridgeObjectRelease();
    double v25 = v8;
    if (v24)
    {
      uint64_t v26 = (uint64_t)v38;
      (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
      type metadata accessor for AnimatedValueTrack<A>.VectorPath();
      AnimatedValueTrack<A>.VectorPath.move(to:)(v26);
      (*v35)(v26, AssociatedTypeWitness);
      AnimatedValueTrack<A>.VectorPath.hold(for:)(v23 - v16);
    }
    else
    {
      type metadata accessor for AnimatedValueTrack<A>.VectorPath();
      AnimatedValueTrack<A>.VectorPath.hold(for:)(v23 - v16);
      uint64_t v17 = (uint64_t)v38;
      (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
      AnimatedValueTrack<A>.VectorPath.move(to:)(v17);
      (*v35)(v17, AssociatedTypeWitness);
    }
    (*v34)(v25, a1);
    double v16 = v23;
    char v8 = v25;
  }
  __break(1u);
LABEL_16:
  swift_bridgeObjectRelease();
  if (v16 < 1.0)
  {
    type metadata accessor for AnimatedValueTrack<A>.VectorPath();
    AnimatedValueTrack<A>.VectorPath.hold(for:)(1.0 - v16);
  }
  v48[0] = v49;
  uint64_t v28 = type metadata accessor for AnimatedValueTrack<A>.VectorPath();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v30 = v33;
  v33[3] = v28;
  v30[4] = WitnessTable;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30);
  return (*(uint64_t (**)(uint64_t *, void *, uint64_t))(*(void *)(v28 - 8) + 32))(boxed_opaque_existential_1, v48, v28);
}

BOOL closure #1 in AnimatedValueTrack<A>.init(discreteValues:)(double *a1, uint64_t a2, uint64_t a3)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = *(void *)(TupleTypeMetadata2 - 8);
  double v8 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v15 - v9;
  double v11 = *a1;
  *(uint64_t *)((char *)&v15 - v9) = *(void *)a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a3 - 8) + 16))((char *)&v15 + *(int *)(v12 + 48) - v9, a2, a3, v8);
  BOOL v13 = v11 <= 1.0 && v11 >= 0.0;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, TupleTypeMetadata2);
  return v13;
}

BOOL partial apply for closure #1 in AnimatedValueTrack<A>.init(discreteValues:)(double *a1, uint64_t a2)
{
  return closure #1 in AnimatedValueTrack<A>.init(discreteValues:)(a1, a2, *(void *)(v2 + 16));
}

uint64_t AnimatedValueTrack<A>.init(discreteValues:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = v13;
  MEMORY[0x1F4188790](v15);
  uint64_t v40 = (char *)&v31 - v16;
  uint64_t v42 = a1;
  type metadata accessor for Array();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    return AnimatedValueTrack.init()(a2, v17, v18, v19, (uint64_t)a4);
  }
  uint64_t v21 = MEMORY[0x18C115C50](a1, a2);
  if (v21 < 2)
  {
LABEL_14:
    Array.subscript.getter();
    swift_bridgeObjectRelease();
    return AnimatedValueTrack<A>.init(duration:value:)((uint64_t)v14, a2, a3, (uint64_t)a4, 1.0);
  }
  uint64_t v22 = v21;
  uint64_t v23 = AnimatedValueTrack<A>.VectorPath.init()();
  uint64_t v42 = v23;
  if (MEMORY[0x18C115CB0](a1, a2))
  {
    float64x2_t v31 = a4;
    uint64_t v24 = 0;
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(a3 + 24);
    uint64_t v37 = a3 + 24;
    double v25 = 1.0 / (double)v22;
    uint64_t v38 = (void (**)(char *, uint64_t *, uint64_t))(v11 + 16);
    long long v34 = (void (**)(char *, uint64_t))(v8 + 8);
    long long v35 = (void (**)(char *, char *, uint64_t))(v11 + 32);
    float64x2_t v33 = (void (**)(char *, uint64_t))(v11 + 8);
    while (1)
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v40, a1+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v24, a2);
        uint64_t v27 = v24 + 1;
        if (__OFADD__(v24, 1)) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v32 != 8)
        {
          __break(1u);
          return result;
        }
        uint64_t v41 = result;
        (*v38)(v40, &v41, a2);
        swift_unknownObjectRelease();
        uint64_t v27 = v24 + 1;
        if (__OFADD__(v24, 1))
        {
LABEL_13:
          __break(1u);
          goto LABEL_14;
        }
      }
      (*v35)(v14, v40, a2);
      v36(a2, a3);
      type metadata accessor for AnimatedValueTrack<A>.VectorPath();
      a4 = (uint64_t *)a3;
      AnimatedValueTrack<A>.VectorPath.move(to:)((uint64_t)v10);
      (*v34)(v10, AssociatedTypeWitness);
      AnimatedValueTrack<A>.VectorPath.hold(for:)(v25);
      (*v33)(v14, a2);
      ++v24;
      if (v27 == MEMORY[0x18C115CB0](a1, a2))
      {
        swift_bridgeObjectRelease();
        uint64_t v23 = v42;
        a4 = v31;
        goto LABEL_16;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_16:
  uint64_t v41 = v23;
  uint64_t v28 = type metadata accessor for AnimatedValueTrack<A>.VectorPath();
  uint64_t WitnessTable = swift_getWitnessTable();
  a4[3] = v28;
  a4[4] = WitnessTable;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  return (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v28 - 8) + 32))(boxed_opaque_existential_1, &v41, v28);
}

uint64_t instantiation function for generic protocol witness table for AnimatedValueTrack<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t _sSo7CGPointVAB7SwiftUI10AnimatableACWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double partial apply for specialized closure #1 in Curve.arcLength(at:)(double a1)
{
  double v1 = specialized Curve.velocity(at:)(a1);
  return sqrt(v1 * v1 + v2 * v2);
}

uint64_t getEnumTagSinglePayload for ToolbarModifiedContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for ToolbarModifiedContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1880FA120);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ToolbarModifiedContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ToolbarContent.modifier<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x1F4188790](v12);
  BOOL v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, v4, a2, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
  return ToolbarModifiedContent.init(content:modifier:)((uint64_t)v15, (uint64_t)v11, a2, a3, a4);
}

void protocol witness for ToolbarContentModifier.body(content:) in conformance ToolbarItemHiddenModifier()
{
}

{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for ToolbarContentModifier.body(content:) in conformance CustomizationBehaviorModifier()
{
}

void protocol witness for ToolbarContentModifier.body(content:) in conformance CustomizationOptionsModifier()
{
}

uint64_t ToolbarModifiedContent.init(content:modifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = a5 + *(int *)(type metadata accessor for ToolbarModifiedContent() + 36);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32);

  return v9(v8, a2, a4);
}

uint64_t static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a2;
  int v13 = *((_DWORD *)a2 + 2);
  uint64_t v14 = a2[2];
  int v15 = *((_DWORD *)a2 + 14);
  uint64_t v22 = a2[8];
  int v21 = *((_DWORD *)a2 + 18);
  LODWORD(v23) = *a1;
  int v11 = v23;
  type metadata accessor for ToolbarModifiedContent();
  type metadata accessor for _GraphValue();
  long long v20 = *(_OWORD *)(a2 + 5);
  uint64_t v16 = a2[3];
  uint64_t v17 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v23 = v12;
  int v24 = v13;
  uint64_t v25 = v14;
  uint64_t v26 = v16;
  uint64_t v27 = v17;
  long long v28 = v20;
  int v29 = v15;
  uint64_t v30 = v22;
  int v31 = v21;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a3;
  *(void *)(v18 + 24) = a4;
  *(void *)(v18 + 32) = a5;
  *(void *)(v18 + 40) = a6;
  *(_DWORD *)(v18 + 48) = v11;
  (*(void (**)(unsigned char *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a6 + 32))(v32, &v23, partial apply for closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:), v18, a4, a6);
  return swift_release();
}

uint64_t closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *a2;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  int v12 = *((_DWORD *)a2 + 14);
  uint64_t v13 = a2[8];
  int v14 = *((_DWORD *)a2 + 18);
  LODWORD(v19) = a3;
  type metadata accessor for ToolbarModifiedContent();
  type metadata accessor for _GraphValue();
  long long v18 = *(_OWORD *)(a2 + 5);
  uint64_t v15 = a2[3];
  uint64_t v16 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v19 = v9;
  int v20 = v10;
  uint64_t v21 = v11;
  uint64_t v22 = v15;
  uint64_t v23 = v16;
  long long v24 = v18;
  int v25 = v12;
  uint64_t v26 = v13;
  int v27 = v14;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(a6 + 32))(v28, &v19, a4, a6);
}

uint64_t protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance <> ToolbarModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t static ToolbarModifiedContent<>._makeToolbar(content:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *a2;
  int v16 = *((_DWORD *)a2 + 2);
  uint64_t v17 = a2[2];
  int v26 = *((_DWORD *)a2 + 14);
  uint64_t v25 = a2[8];
  int v24 = *((_DWORD *)a2 + 18);
  LODWORD(v28) = *a1;
  int v14 = v28;
  type metadata accessor for ToolbarModifiedContent();
  type metadata accessor for _GraphValue();
  long long v23 = *(_OWORD *)(a2 + 5);
  uint64_t v18 = a2[3];
  uint64_t v19 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v28 = v15;
  int v29 = v16;
  uint64_t v30 = v17;
  uint64_t v31 = v18;
  uint64_t v32 = v19;
  long long v33 = v23;
  int v34 = v26;
  uint64_t v35 = v25;
  int v36 = v24;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a5;
  *(void *)(v20 + 24) = a6;
  *(void *)(v20 + 32) = a7;
  *(void *)(v20 + 40) = a8;
  *(_DWORD *)(v20 + 48) = v14;
  *(void *)(v20 + 56) = a3;
  *(void *)(v20 + 64) = a4;
  uint64_t v21 = *(void (**)(unsigned char *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a8 + 32);
  swift_retain();
  v21(v37, &v28, partial apply for closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:body:), v20, a6, a8);
  return swift_release();
}

uint64_t closure #1 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = type metadata accessor for ToolbarModifiedContent();
  uint64_t v10 = a1 + *(int *)(v9 + 36);
  void v14[2] = v9;
  v14[3] = a3;
  uint64_t v11 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v10, a6, (uint64_t)v14, a3, MEMORY[0x1E4FBC248], v11, MEMORY[0x1E4FBC278], v12);
  return v14[5];
}

uint64_t closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:body:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *a2;
  int v12 = *((_DWORD *)a2 + 2);
  uint64_t v13 = a2[2];
  int v14 = *((_DWORD *)a2 + 14);
  uint64_t v15 = a2[8];
  int v16 = *((_DWORD *)a2 + 18);
  LODWORD(v23) = a3;
  type metadata accessor for ToolbarModifiedContent();
  type metadata accessor for _GraphValue();
  long long v20 = *(_OWORD *)(a2 + 5);
  uint64_t v17 = a2[3];
  uint64_t v18 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v23 = v11;
  int v24 = v12;
  uint64_t v25 = v13;
  uint64_t v26 = v17;
  uint64_t v27 = v18;
  long long v28 = v20;
  int v29 = v14;
  uint64_t v30 = v15;
  int v31 = v16;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 32))(v32, &v23, a4, a5, a6, a8);
}

uint64_t closure #1 in closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v12[2] = type metadata accessor for ToolbarModifiedContent();
  v12[3] = a2;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a6, (uint64_t)v12, a2, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v12[5];
}

void protocol witness for ToolbarContentModifier.body(content:) in conformance <> ToolbarModifiedContent<A, B>()
{
}

uint64_t protocol witness for static ToolbarContentModifier._makeToolbar(content:inputs:body:) in conformance <> ToolbarModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ToolbarModifiedContent<>._makeToolbar(content:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), *(void *)(a6 - 8), *(void *)(a6 - 16));
}

uint64_t static ToolbarModifier_Content._makeToolbar(content:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  int v7 = *(_DWORD *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  int v9 = *(_DWORD *)(a1 + 72);
  uint64_t v23 = *(void (**)(uint64_t, void))a1;
  int v24 = v3;
  uint64_t v25 = v4;
  long long v26 = *(_OWORD *)(a1 + 24);
  uint64_t v27 = v5;
  uint64_t v28 = v6;
  int v29 = v7;
  uint64_t v30 = v8;
  int v31 = v9;
  type metadata accessor for ToolbarModifier_Content.BodyInput();
  type metadata accessor for (_:_:)();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  _GraphInputs.popLast<A, B>(_:)();
  uint64_t v10 = v14;
  if (v14)
  {
    int v14 = v23;
    LODWORD(v15) = v24;
    uint64_t v16 = v25;
    long long v17 = v26;
    uint64_t v18 = v27;
    uint64_t v19 = v28;
    int v20 = v29;
    uint64_t v21 = v30;
    int v22 = v31;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v11 = swift_bridgeObjectRetain();
    v10(v11, &v14);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v10);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    PreferencesOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    int v13 = v15;
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = v13;
    *(void *)(a2 + 16) = v8;
  }
  return result;
}

uint64_t static ToolbarModifier_Content.BodyInput.defaultValue.getter()
{
  unint64_t v0 = type metadata accessor for (_:_:)();

  return MEMORY[0x1F4100E88](v0);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance ToolbarModifier_Content<A>.BodyInput()
{
  return static ToolbarModifier_Content.BodyInput.defaultValue.getter();
}

uint64_t protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance ToolbarModifier_Content<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return static ToolbarModifier_Content._makeToolbar(content:inputs:)(a1, a2);
}

uint64_t instantiation function for generic protocol witness table for <> ToolbarModifiedContent<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t partial apply for closure #1 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(uint64_t a1)
{
  return closure #1 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t sub_1880FAE9C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(uint64_t a1, uint64_t *a2)
{
  return closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(a1, a2, *(_DWORD *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t partial apply for closure #1 in closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(uint64_t a1)
{
  return closure #1 in closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t sub_1880FAEF0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:body:)(uint64_t a1, uint64_t *a2)
{
  return closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:body:)(a1, a2, *(_DWORD *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t partial apply for closure #1 in closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:body:)(uint64_t a1)
{
  return closure #1 in closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

void specialized ToolbarContentModifier.toolbarBodyError()()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized ToolbarContentModifier<>.body(content:)()
{
}

uint64_t type metadata accessor for ToolbarModifier_Content.BodyInput()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ToolbarModifier_Content()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for PropertyKey in ToolbarModifier_Content<A>.BodyInput()
{
  return swift_getWitnessTable();
}

void (*EnvironmentValues.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  int v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *int v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  _OWORD v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  void v9[6] = malloc(v12);
  v9[7] = malloc(v12);
  EnvironmentValues.getBridgedValue<A>(for:)();
  return EnvironmentValues.subscript.modify;
}

void EnvironmentValues.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  int v3 = (void *)(*a1)[6];
  uint64_t v4 = (void *)(*a1)[7];
  uint64_t v5 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v7 = (*a1)[2];
  uint64_t v9 = **a1;
  uint64_t v8 = (*a1)[1];
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    EnvironmentValues.setBridgedValue<A>(value:for:)((uint64_t)v3, v9, v8, v7);
    uint64_t v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v3, v5);
    v10(v4, v5);
  }
  else
  {
    EnvironmentValues.setBridgedValue<A>(value:for:)((*a1)[7], v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

ValueMetadata *type metadata accessor for UITraitBridgedEnvironmentResolver()
{
  return &type metadata for UITraitBridgedEnvironmentResolver;
}

uint64_t *initializeBufferWithCopyOfBuffer for InsettableGroupedListBodyRule(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 42) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    unint64_t v9 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v10 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
    long long v11 = *(_OWORD *)v10;
    long long v12 = *(_OWORD *)(v10 + 16);
    *(_WORD *)(v9 + 32) = *(_WORD *)(v10 + 32);
    *(_OWORD *)unint64_t v9 = v11;
    *(_OWORD *)(v9 + 16) = v12;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))((v9 + v5 + 34) & ~v5, (v10 + v5 + 34) & ~v5);
  }
  return v3;
}

uint64_t destroy for InsettableGroupedListBodyRule(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 8))((((a1 + 11) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80) + 34) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80));
}

_DWORD *initializeWithCopy for InsettableGroupedListBodyRule(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  long long v6 = *(_OWORD *)v5;
  long long v7 = *(_OWORD *)(v5 + 16);
  *(_WORD *)(v4 + 32) = *(_WORD *)(v5 + 32);
  *(_OWORD *)unint64_t v4 = v6;
  *(_OWORD *)(v4 + 16) = v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 16))((*(unsigned __int8 *)(v8 + 80) + 34 + v4) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(unsigned __int8 *)(v8 + 80) + 34 + v5) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_DWORD *assignWithCopy for InsettableGroupedListBodyRule(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  long long v6 = *(_OWORD *)v5;
  long long v7 = *(_OWORD *)(v5 + 16);
  *(_WORD *)(v4 + 32) = *(_WORD *)(v5 + 32);
  *(_OWORD *)unint64_t v4 = v6;
  *(_OWORD *)(v4 + 16) = v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))((*(unsigned __int8 *)(v8 + 80) + 34 + v4) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(unsigned __int8 *)(v8 + 80) + 34 + v5) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_DWORD *initializeWithTake for InsettableGroupedListBodyRule(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  long long v6 = *(_OWORD *)v5;
  long long v7 = *(_OWORD *)(v5 + 16);
  *(_WORD *)(v4 + 32) = *(_WORD *)(v5 + 32);
  *(_OWORD *)unint64_t v4 = v6;
  *(_OWORD *)(v4 + 16) = v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))((*(unsigned __int8 *)(v8 + 80) + 34 + v4) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(unsigned __int8 *)(v8 + 80) + 34 + v5) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_DWORD *assignWithTake for InsettableGroupedListBodyRule(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  long long v6 = *(_OWORD *)v5;
  long long v7 = *(_OWORD *)(v5 + 16);
  *(_WORD *)(v4 + 32) = *(_WORD *)(v5 + 32);
  *(_OWORD *)unint64_t v4 = v6;
  *(_OWORD *)(v4 + 16) = v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))((*(unsigned __int8 *)(v8 + 80) + 34 + v4) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(unsigned __int8 *)(v8 + 80) + 34 + v5) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for InsettableGroupedListBodyRule(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 42) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                      + v6
                                                                      + 34) & ~v6);
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for InsettableGroupedListBodyRule(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 42) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1880FBA70);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (((unint64_t)(a1 + 11) & 0xFFFFFFFFFFFFFFF8) + v8 + 34) & ~v8;
        uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

void *initializeBufferWithCopyOfBuffer for InsettableGroupedListBody(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(_DWORD *)(v6 + 80);
  size_t v8 = ((v7 + 16) & ~v7) + *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(a3 + 16) - 8;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(_DWORD *)(*(void *)v9 + 80);
  if ((v11 | v7) <= 7
    && ((*(_DWORD *)(*(void *)v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0
    && ((v11 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 34) & ~v11) + *(void *)(*(void *)v9 + 64) <= 0x18)
  {
    unsigned int v15 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = ~v7;
    uint64_t v27 = *(void *)(a3 + 16);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      uint64_t v17 = ~v11;
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v15 + v7 + 8) & ~v7))
      {
LABEL_14:
        memcpy(__dst, __src, v8);
LABEL_17:
        unint64_t v20 = ((unint64_t)__dst + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v21 = ((unint64_t)__src + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
        long long v22 = *(_OWORD *)v21;
        long long v23 = *(_OWORD *)(v21 + 16);
        *(_WORD *)(v20 + 32) = *(_WORD *)(v21 + 32);
        *(_OWORD *)unint64_t v20 = v22;
        *(_OWORD *)(v20 + 16) = v23;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))((v20 + v11 + 34) & v17, (v21 + v11 + 34) & v17, v27);
        return __dst;
      }
    }
    else
    {
      uint64_t v16 = *v15;
      if ((unint64_t)*v15 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      uint64_t v17 = ~v11;
      if (v16 != -1) {
        goto LABEL_14;
      }
    }
    *__dst = *__src;
    uint64_t v18 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v18 = *v15;
    uint64_t v25 = ((unint64_t)v18 + v7 + 8) & v26;
    uint64_t v19 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v19(v25, ((unint64_t)v15 + v7 + 8) & v26, v5);
    goto LABEL_17;
  }
  uint64_t v14 = *__src;
  *__dst = *__src;
  __dst = (void *)(v14 + (((v11 | v7) & 0xF8 ^ 0x1F8) & ((v11 | v7) + 16)));
  swift_retain();
  return __dst;
}

void *assignWithCopy for InsettableGroupedListBody(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v7 + 64);
  size_t v11 = ((v9 + 16) & ~v9) + v10;
  int v12 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v39 = ~v9;
  if ((v8 & 0x80000000) != 0)
  {
    size_t v37 = ((v9 + 16) & ~v9) + v10;
    uint64_t v17 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    int v18 = v17(((unint64_t)v12 + v9 + 8) & ~v9, v8, v6);
    uint64_t v19 = v17;
    int v35 = v18;
    unsigned int v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v4 = a2;
    uint64_t v5 = a1;
    int v15 = v19(((unint64_t)v13 + v9 + 8) & ~v9, v8, v6);
    size_t v11 = v37;
    uint64_t v3 = a3;
    if (!v35)
    {
LABEL_5:
      if (!v15)
      {
        *uint64_t v5 = *v4;
        swift_retain();
        swift_release();
        *int v12 = *v13;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24))(((unint64_t)v12 + v9 + 8) & v39, ((unint64_t)v13 + v9 + 8) & v39, v6);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v12 + v9 + 8) & v39, v6);
      goto LABEL_9;
    }
  }
  else
  {
    unsigned int v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = *v13;
    if (*v13 >= 0xFFFFFFFFuLL) {
      LODWORD(v14) = -1;
    }
    int v15 = v14 + 1;
    if (*v12 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v15)
  {
    *uint64_t v5 = *v4;
    *int v12 = *v13;
    uint64_t v20 = v9 + 8;
    unint64_t v21 = (unint64_t)v12 + v9 + 8;
    long long v22 = v5;
    long long v23 = v4;
    uint64_t v24 = v6;
    unint64_t v25 = v21 & v39;
    unint64_t v26 = ((unint64_t)v13 + v20) & v39;
    uint64_t v27 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    uint64_t v28 = v24;
    uint64_t v4 = v23;
    uint64_t v5 = v22;
    v27(v25, v26, v28);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v5, v4, v11);
LABEL_12:
  unint64_t v29 = ((unint64_t)v5 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = ((unint64_t)v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v31 = *(_OWORD *)v30;
  long long v32 = *(_OWORD *)(v30 + 16);
  *(_WORD *)(v29 + 32) = *(_WORD *)(v30 + 32);
  *(_OWORD *)unint64_t v29 = v31;
  *(_OWORD *)(v29 + 16) = v32;
  uint64_t v33 = *(void *)(*(void *)(v3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v33 + 24))((*(unsigned __int8 *)(v33 + 80) + 34 + v29) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80), (*(unsigned __int8 *)(v33 + 80) + 34 + v30) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80));
  return v5;
}

void *initializeWithTake for InsettableGroupedListBody(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = (v8 + 16) & ~v8;
  uint64_t v11 = *(void *)(v7 + 64);
  int v12 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    uint64_t v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF) {
      LODWORD(v13) = -1;
    }
    size_t v14 = v10 + v11;
    if (v13 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *__dst = *__src;
    int v15 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v15 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v15 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v6);
    goto LABEL_8;
  }
  size_t v14 = v10 + v11;
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v9)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(__dst, __src, v14);
LABEL_8:
  unint64_t v16 = ((unint64_t)__dst + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)__src + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v18 = *(_OWORD *)v17;
  long long v19 = *(_OWORD *)(v17 + 16);
  *(_WORD *)(v16 + 32) = *(_WORD *)(v17 + 32);
  *(_OWORD *)unint64_t v16 = v18;
  *(_OWORD *)(v16 + 16) = v19;
  uint64_t v20 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v20 + 32))((*(unsigned __int8 *)(v20 + 80) + 34 + v16) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80), (*(unsigned __int8 *)(v20 + 80) + 34 + v17) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  return __dst;
}

void *assignWithTake for InsettableGroupedListBody(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64);
  size_t v10 = ((v8 + 16) & ~v8) + v9;
  uint64_t v11 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v32 = ~v8;
  if ((v7 & 0x80000000) != 0)
  {
    size_t v30 = ((v8 + 16) & ~v8) + v9;
    unint64_t v16 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    uint64_t v17 = *(void *)(a3 + 24);
    int v18 = v16(((unint64_t)v11 + v8 + 8) & ~v8, v7, v17);
    long long v19 = v16;
    int v28 = v18;
    uint64_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = v7;
    uint64_t v12 = v17;
    uint64_t v21 = v17;
    uint64_t v5 = a1;
    size_t v10 = v30;
    int v15 = v19(((unint64_t)v13 + v8 + 8) & ~v8, v20, v21);
    uint64_t v3 = a3;
    if (!v28)
    {
LABEL_5:
      if (!v15)
      {
        *uint64_t v5 = *a2;
        swift_release();
        *uint64_t v11 = *v13;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(((unint64_t)v11 + v8 + 8) & v32, ((unint64_t)v13 + v8 + 8) & v32, v12);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v11 + v8 + 8) & v32, v12);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a3 + 24);
    uint64_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = *v13;
    if (*v13 >= 0xFFFFFFFFuLL) {
      LODWORD(v14) = -1;
    }
    int v15 = v14 + 1;
    if (*v11 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v15)
  {
    *uint64_t v5 = *a2;
    *uint64_t v11 = *v13;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v11 + v8 + 8) & v32, ((unint64_t)v13 + v8 + 8) & v32, v12);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v5, a2, v10);
LABEL_12:
  unint64_t v22 = ((unint64_t)v5 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = ((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v24 = *(_OWORD *)v23;
  long long v25 = *(_OWORD *)(v23 + 16);
  *(_WORD *)(v22 + 32) = *(_WORD *)(v23 + 32);
  *(_OWORD *)unint64_t v22 = v24;
  *(_OWORD *)(v22 + 16) = v25;
  uint64_t v26 = *(void *)(*(void *)(v3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v26 + 40))((*(unsigned __int8 *)(v26 + 80) + 34 + v22) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80), (*(unsigned __int8 *)(v26 + 80) + 34 + v23) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
  return v5;
}

uint64_t getEnumTagSinglePayload for InsettableGroupedListBody(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    int v6 = 0x7FFFFFFF;
  }
  else {
    int v6 = *(_DWORD *)(v4 + 84);
  }
  unsigned int v7 = v6 - 1;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v13 = v7;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = ((v11 + 16) & ~v11) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  uint64_t v15 = v12 + 34;
  int v16 = a2 - v13;
  if (a2 <= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = ((v15 + ((v14 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v12) + *(void *)(*(void *)(v8 - 8) + 64);
  char v18 = 8 * v17;
  if (v17 <= 3)
  {
    unsigned int v21 = ((v16 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      int v19 = *(_DWORD *)((char *)a1 + v17);
      if (!v19) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v21 > 0xFF)
    {
      int v19 = *(unsigned __int16 *)((char *)a1 + v17);
      if (!*(unsigned __int16 *)((char *)a1 + v17)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v21 < 2)
    {
LABEL_28:
      if (v7 >= v10)
      {
        uint64_t v27 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v5 & 0x80000000) != 0)
        {
          unsigned int v29 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v27 + v11 + 8) & ~v11);
        }
        else
        {
          unint64_t v28 = *v27;
          if (v28 >= 0xFFFFFFFF) {
            LODWORD(v28) = -1;
          }
          unsigned int v29 = v28 + 1;
        }
        if (v29 >= 2) {
          return v29 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v25 = (v15 + (((unint64_t)a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v12;
        uint64_t v26 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
        return v26(v25, v10, v8);
      }
    }
  }
  int v19 = *((unsigned __int8 *)a1 + v17);
  if (!*((unsigned char *)a1 + v17)) {
    goto LABEL_28;
  }
LABEL_18:
  int v22 = (v19 - 1) << v18;
  if (v17 > 3) {
    int v22 = 0;
  }
  if (v17)
  {
    if (v17 <= 3) {
      int v23 = v17;
    }
    else {
      int v23 = 4;
    }
    switch(v23)
    {
      case 2:
        int v24 = *a1;
        break;
      case 3:
        int v24 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v24 = *(_DWORD *)a1;
        break;
      default:
        int v24 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v24 = 0;
  }
  return v13 + (v24 | v22) + 1;
}

void storeEnumTagSinglePayload for InsettableGroupedListBody(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 16) - 8);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v10 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v11 = *(_DWORD *)(v8 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = *(void *)(v8 + 64);
  unsigned int v15 = v9 - 1;
  if (v11 <= v9 - 1) {
    unsigned int v16 = v9 - 1;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v8 + 84);
  }
  size_t v17 = ((v12 + 16) & ~v12) + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  uint64_t v18 = v13 + 34;
  size_t v19 = ((v13 + 34 + ((v17 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v13) + v14;
  BOOL v20 = a3 >= v16;
  unsigned int v21 = a3 - v16;
  if (v21 != 0 && v20)
  {
    if (v19 <= 3)
    {
      unsigned int v26 = ((v21 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
      if (HIWORD(v26))
      {
        int v22 = 4;
      }
      else if (v26 >= 0x100)
      {
        int v22 = 2;
      }
      else
      {
        int v22 = v26 > 1;
      }
    }
    else
    {
      int v22 = 1;
    }
  }
  else
  {
    int v22 = 0;
  }
  if (v16 < a2)
  {
    unsigned int v23 = ~v16 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> (8 * v19)) + 1;
      if (v19)
      {
        int v27 = v23 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        a1[v19] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v24;
        return;
      case 3:
        goto LABEL_72;
      case 4:
        *(_DWORD *)&a1[v19] = v24;
        return;
      default:
        return;
    }
  }
  uint64_t v25 = ~v13;
  switch(v22)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_72:
      __break(1u);
      JUMPOUT(0x1880FCB50);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v15 >= v11)
        {
          if (v15 >= a2)
          {
            if (a2 + 1 <= v9)
            {
              if (a2 != -1)
              {
                int v35 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  size_t v37 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v38 = a2 + 1;
                  v37(((unint64_t)v35 + v12 + 8) & ~v12, v38);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v36 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v36 = a2;
                  }
                  *int v35 = v36;
                }
              }
            }
            else
            {
              if (v17 <= 3) {
                int v33 = ~(-1 << (8 * v17));
              }
              else {
                int v33 = -1;
              }
              if (v17)
              {
                int v31 = v33 & (a2 - v9);
                if (v17 <= 3) {
                  int v34 = v17;
                }
                else {
                  int v34 = 4;
                }
                bzero(a1, v17);
                switch(v34)
                {
                  case 2:
LABEL_64:
                    *(_WORD *)a1 = v31;
                    break;
                  case 3:
LABEL_65:
                    *(_WORD *)a1 = v31;
                    a1[2] = BYTE2(v31);
                    break;
                  case 4:
LABEL_66:
                    *(_DWORD *)a1 = v31;
                    break;
                  default:
LABEL_52:
                    *a1 = v31;
                    break;
                }
              }
            }
          }
          else
          {
            if (v17 <= 3) {
              int v30 = ~(-1 << (8 * v17));
            }
            else {
              int v30 = -1;
            }
            if (v17)
            {
              int v31 = v30 & (a2 - v9);
              if (v17 <= 3) {
                int v32 = v17;
              }
              else {
                int v32 = 4;
              }
              bzero(a1, v17);
              switch(v32)
              {
                case 2:
                  goto LABEL_64;
                case 3:
                  goto LABEL_65;
                case 4:
                  goto LABEL_66;
                default:
                  goto LABEL_52;
              }
            }
          }
        }
        else
        {
          unint64_t v28 = (v18 + ((unint64_t)&a1[v17 + 7] & 0xFFFFFFFFFFFFFFF8)) & v25;
          unsigned int v29 = *(void (**)(unint64_t))(v10 + 56);
          v29(v28);
        }
      }
      return;
  }
}

uint64_t EnvironmentValues.uiKitCellState.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<UIKitCellStateKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UIKitCellStateKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<UIKitCellStateKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance InsettableGroupedListBodyRule<A, B, C>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for StyleContextWriter();
  type metadata accessor for ModifiedContent();
  type metadata accessor for SelectionManagerBox();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for InsettableGroupedListBody();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t static InsettableGroupedListBody.TableViewRoot._viewListOptions.getter()
{
  uint64_t v0 = unk_1ED446D80;
  if ((unk_1ED446D80 & ~qword_1ED446D78) == 0) {
    uint64_t v0 = 0;
  }
  uint64_t v1 = v0 | qword_1ED446D78;
  uint64_t v3 = qword_1ED446D88;
  uint64_t v2 = unk_1ED446D90;
  if ((qword_1ED446D88 & ~v1) == 0) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3 | v1;
  if ((unk_1ED446D90 & ~v4) == 0) {
    uint64_t v2 = 0;
  }
  return v2 | v4;
}

uint64_t InsettableGroupedListBody.TableViewRoot.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v51 = a3;
  uint64_t v6 = *(void *)(a2 + 24);
  type metadata accessor for Binding();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v7 - 8);
  uint64_t v44 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v40 = (char *)v39 - v8;
  uint64_t v9 = *(void *)(a2 + 40);
  v39[2] = swift_getAssociatedTypeWitness();
  uint64_t v47 = v6;
  uint64_t v48 = v9;
  v39[1] = swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for TableViewListDataSource();
  uint64_t v46 = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  v70[0] = v10;
  v70[1] = v6;
  v70[2] = WitnessTable;
  v70[3] = v9;
  uint64_t v11 = type metadata accessor for TableViewListCore();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v49 = v11;
  uint64_t v50 = v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v41 = (uint64_t)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v42 = (char *)v39 - v15;
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v69);
  uint64_t v16 = 1;
  if (*(unsigned char *)(v3 + *(int *)(a2 + 64) + 33) != 1) {
    uint64_t v16 = 2;
  }
  v39[0] = v16;
  uint64_t v17 = *(void *)v3;
  uint64_t v18 = *(unsigned __int8 *)(v3 + 8);
  int v19 = *(unsigned __int8 *)(v3 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v3, v18, *(unsigned char *)(v3 + 9));
  uint64_t v20 = specialized Environment.wrappedValue.getter(v17, v18 | (v19 << 8));
  char v22 = v21 & 1;
  outlined consume of Environment<CGFloat?>.Content(v17, v18, v19);
  uint64_t v23 = *(void *)(v3 + 16);
  uint64_t v24 = *(unsigned __int8 *)(v3 + 24);
  LODWORD(v17) = *(unsigned __int8 *)(v3 + 25);
  outlined copy of Environment<CGFloat?>.Content(v23, v24, *(unsigned char *)(v3 + 25));
  uint64_t v25 = specialized Environment.wrappedValue.getter(v23, v24 | (v17 << 8));
  char v27 = v26;
  outlined consume of Environment<CGFloat?>.Content(v23, v24, v17);
  double v28 = *(double *)&v25;
  if (v27) {
    double v28 = 35.0;
  }
  double v29 = TableViewListDataSource.init(_:style:minRowHeight:minHeaderHeight:)((uint64_t)v69, v39[0], v20, v22, (uint64_t)v70, v28);
  uint64_t v30 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v43 + 16))(v40, v3 + *(int *)(a2 + 60), v44, v29);
  outlined init with take of SectionInsetMode(v3 + *(int *)(a2 + 64), (uint64_t)v71);
  long long v31 = *(_OWORD *)(v3 + 80);
  v72[2] = *(_OWORD *)(v3 + 64);
  v72[3] = v31;
  __int16 v73 = *(_WORD *)(v3 + 96);
  long long v32 = *(_OWORD *)(v3 + 48);
  v72[0] = *(_OWORD *)(v3 + 32);
  v72[1] = v32;
  outlined retain of Environment<ListPadding>((uint64_t)v72, (void (*)(void, void, void, void, void, void, void, void, _WORD))outlined copy of Environment<ListPadding>.Content);
  specialized Environment.wrappedValue.getter((uint64_t)v61);
  outlined retain of Environment<ListPadding>((uint64_t)v72, (void (*)(void, void, void, void, void, void, void, void, _WORD))outlined consume of Environment<ListPadding>.Content);
  uint64_t v53 = v61[1];
  char v54 = v62;
  uint64_t v55 = v63;
  char v56 = v64;
  uint64_t v57 = v65;
  char v58 = v66;
  uint64_t v59 = v67;
  char v60 = v68;
  uint64_t v33 = v46;
  TableViewListCore.Configuration.init(insetMode:padding:)((uint64_t)v71, &v53, v52);
  uint64_t v34 = v41;
  TableViewListCore.init(dataSource:selection:configuration:)((uint64_t)v70, v30, v52, v33, v41);
  int v35 = v42;
  uint64_t v36 = v49;
  static ViewBuilder.buildExpression<A>(_:)(v34);
  size_t v37 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
  v37(v34, v36);
  static ViewBuilder.buildExpression<A>(_:)(v35);
  return ((uint64_t (*)(char *, uint64_t))v37)(v35, v36);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance InsettableGroupedListBody<A, B>.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance InsettableGroupedListBody<A, B>.TableViewRoot()
{
  return static InsettableGroupedListBody.TableViewRoot._viewListOptions.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SectionInsetMode()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  int v5 = *((unsigned __int8 *)v0 + 32);
  int v6 = *((unsigned __int8 *)v0 + 33);
  Hasher.init(_seed:)();
  if (v6 == 1)
  {
    if (v4 | v2 | v1 | v3) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = v5 == 0;
    }
    if (v7) {
      Swift::UInt v8 = 3;
    }
    else {
      Swift::UInt v8 = 13;
    }
    Hasher._combine(_:)(v8);
  }
  else
  {
    Hasher._combine(_:)(0x1FuLL);
    if ((v5 & 1) == 0) {
      EdgeInsets.hash(into:)();
    }
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SectionInsetMode()
{
  int v1 = *(unsigned __int8 *)(v0 + 32);
  if (*(unsigned char *)(v0 + 33) == 1)
  {
    if (*(void *)(v0 + 16) | *(void *)(v0 + 8) | *(void *)v0 | *(void *)(v0 + 24)) {
      BOOL v2 = 0;
    }
    else {
      BOOL v2 = v1 == 0;
    }
    if (v2) {
      Swift::UInt v3 = 3;
    }
    else {
      Swift::UInt v3 = 13;
    }
    Hasher._combine(_:)(v3);
  }
  else
  {
    Hasher._combine(_:)(0x1FuLL);
    if ((v1 & 1) == 0)
    {
      EdgeInsets.hash(into:)();
    }
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SectionInsetMode()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  int v5 = *((unsigned __int8 *)v0 + 32);
  int v6 = *((unsigned __int8 *)v0 + 33);
  Hasher.init(_seed:)();
  if (v6 == 1)
  {
    if (v4 | v2 | v1 | v3) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = v5 == 0;
    }
    if (v7) {
      Swift::UInt v8 = 3;
    }
    else {
      Swift::UInt v8 = 13;
    }
    Hasher._combine(_:)(v8);
  }
  else
  {
    Hasher._combine(_:)(0x1FuLL);
    if ((v5 & 1) == 0) {
      EdgeInsets.hash(into:)();
    }
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SectionInsetMode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  int v6 = *((unsigned __int8 *)a1 + 32);
  int v7 = *((unsigned __int8 *)a1 + 33);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v11 = a2[2];
  uint64_t v10 = a2[3];
  int v12 = *((unsigned __int8 *)a2 + 32);
  uint64_t result = *((unsigned __int8 *)a2 + 33);
  if (v7 != 1)
  {
    if ((result & 1) == 0)
    {
      if (v6)
      {
        if ((v12 & 1) == 0) {
          return 0;
        }
      }
      else if ((v12 & 1) != 0 || (static EdgeInsets.== infix(_:_:)() & 1) == 0)
      {
        return 0;
      }
      return 1;
    }
    return 0;
  }
  if (v5 | v3 | v2 | v4) {
    BOOL v14 = 0;
  }
  else {
    BOOL v14 = v6 == 0;
  }
  if (!v14)
  {
    if (result)
    {
      if (v11 | v9 | v8 | v10) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == 0;
      }
      return !v15;
    }
    return 0;
  }
  if (*((unsigned char *)a2 + 33)) {
    return !(v11 | v9 | v8 | v10) && v12 == 0;
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContentConfigurationBasedRootEnvironment(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance ContentConfigurationBasedRootEnvironment()
{
}

uint64_t (*protocol witness for static UserDefaultKeyedFeature.cachedValue.modify in conformance DisableCollectionViewGroupedListsFeature())()
{
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance DisableCollectionViewGroupedListsFeature()
{
  lazy protocol witness table accessor for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature();

  return static UserDefaultKeyedFeature.isEnabled.getter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance DisableCollectionViewGroupedListsFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance DisableCollectionViewGroupedListsFeature(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance DisableCollectionViewGroupedListsFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance DisableCollectionViewGroupedListsFeature(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance DisableCollectionViewGroupedListsFeature@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v4 = lazy protocol witness table accessor for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature();
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(v4 + 16))(a1, v4);
  *a2 = result & 1;
  return result;
}

uint64_t EnvironmentValues.prominentHeaderStyling.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ProminentHeaderStylingKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ProminentHeaderStylingKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ProminentHeaderStylingKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ProminentHeaderStylingKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ProminentHeaderStylingKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ProminentHeaderStylingKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance ProminentHeaderStylingKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E9037400;
  uint64_t v4 = qword_1E9037408;
  uint64_t v3 = unk_1E9037410;
  char v5 = byte_1E9037418;
  uint64_t v6 = qword_1E9037420;
  uint64_t v7 = qword_1E9037428;
  long long v8 = *(_OWORD *)&qword_1E90373F0;
  *(_OWORD *)a1 = static ProminentHeaderStylingKey.defaultValue;
  *(_OWORD *)(a1 + 16) = v8;
  *(void *)(a1 + 32) = v2;
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v3;
  *(unsigned char *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v7;
  *(unsigned char *)(a1 + 80) = byte_1E9037430;
  swift_retain();
  swift_retain();

  return outlined copy of Transaction?(v7);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ListConcatenatesFooters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance DisableCollectionViewGroupedListsFeature(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type ListConcatenatesFooters and conformance ListConcatenatesFooters);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ListConcatenatesFooters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance DisableCollectionViewGroupedListsFeature(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type ListConcatenatesFooters and conformance ListConcatenatesFooters);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance DisableListSections(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance DisableCollectionViewGroupedListsFeature(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type DisableListSections and conformance DisableListSections);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance DisableCollectionViewGroupedListsFeature(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  PropertyList.subscript.getter();
  return v5;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance DisableListSections(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance DisableCollectionViewGroupedListsFeature(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type DisableListSections and conformance DisableListSections);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance DisableCollectionViewGroupedListsFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return PropertyList.subscript.setter();
}

void *type metadata accessor for UIKitCellStateKey()
{
  return &unk_1ED48EA90;
}

ValueMetadata *type metadata accessor for ProminentHeaderStylingKey()
{
  return &type metadata for ProminentHeaderStylingKey;
}

uint64_t initializeBufferWithCopyOfBuffer for InsettableGroupedListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0
    && ((((v6 + 16) & ~v6) + *(void *)(v5 + 64) + (((v6 | 7) + 98) & ~(v6 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 34 <= 0x18)
  {
    uint64_t v50 = *(void *)(*(void *)(a3 + 24) - 8);
    uint64_t __n = ((v6 + 16) & ~v6) + *(void *)(v5 + 64);
    uint64_t v52 = *(void *)(a3 + 24);
    uint64_t v48 = ~(v6 | 7);
    uint64_t v11 = *(void *)a2;
    char v12 = *(unsigned char *)(a2 + 9);
    unsigned __int8 v13 = *(unsigned char *)(a2 + 8);
    int v49 = *(_DWORD *)(v5 + 84);
    outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v13, v12);
    *(void *)a1 = v11;
    *(unsigned char *)(a1 + 8) = v13;
    *(unsigned char *)(a1 + 9) = v12;
    uint64_t v53 = a1;
    unint64_t v14 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v16 = *(void *)v15;
    LOBYTE(v11) = *(unsigned char *)(v15 + 9);
    unsigned __int8 v17 = *(unsigned char *)(v15 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(void *)v15, v17, v11);
    *(void *)unint64_t v14 = v16;
    *(unsigned char *)(v14 + 8) = v17;
    *(unsigned char *)(v14 + 9) = v11;
    unint64_t v18 = (v14 + 17) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v19 = (v15 + 17) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    uint64_t v22 = *(void *)(v19 + 16);
    uint64_t v23 = *(void *)(v19 + 24);
    uint64_t v24 = *(void *)(v19 + 32);
    uint64_t v25 = *(void *)(v19 + 40);
    uint64_t v26 = *(void *)(v19 + 56);
    uint64_t v45 = *(void *)(v19 + 48);
    char v46 = *(unsigned char *)(v19 + 64);
    char v47 = *(unsigned char *)(v19 + 65);
    outlined copy of Environment<ListPadding>.Content(*(void *)v19, v21, v22, v23, v24, v25, v45, v26, v46, v47);
    *(void *)unint64_t v18 = v20;
    *(void *)(v18 + 8) = v21;
    *(void *)(v18 + 16) = v22;
    *(void *)(v18 + 24) = v23;
    *(void *)(v18 + 32) = v24;
    *(void *)(v18 + 40) = v25;
    *(void *)(v18 + 48) = v45;
    *(void *)(v18 + 56) = v26;
    uint64_t v27 = (v18 + 73) & v48;
    *(unsigned char *)(v18 + 64) = v46;
    uint64_t v28 = (v19 + 73) & v48;
    double v29 = (uint64_t *)((v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    *(unsigned char *)(v18 + 65) = v47;
    if (v49 < 0)
    {
      uint64_t v32 = v50;
      uint64_t v31 = v52;
      int v35 = (*(uint64_t (**)(unint64_t))(v50 + 48))(((unint64_t)v29 + v6 + 8) & ~v6);
      uint64_t v33 = ~v6;
      uint64_t v10 = v53;
      if (v35)
      {
LABEL_14:
        uint64_t v34 = __n;
        memcpy((void *)v27, (const void *)v28, __n);
LABEL_17:
        unint64_t v40 = ((v28 | 7) + v34) & 0xFFFFFFFFFFFFFFF8;
        long long v41 = *(_OWORD *)v40;
        long long v42 = *(_OWORD *)(v40 + 16);
        unint64_t v43 = ((v27 | 7) + v34) & 0xFFFFFFFFFFFFFFF8;
        *(_WORD *)(v43 + 32) = *(_WORD *)(v40 + 32);
        *(_OWORD *)unint64_t v43 = v41;
        *(_OWORD *)(v43 + 16) = v42;
        return v10;
      }
    }
    else
    {
      uint64_t v30 = *v29;
      if ((unint64_t)*v29 >= 0xFFFFFFFF) {
        LODWORD(v30) = -1;
      }
      uint64_t v31 = v52;
      uint64_t v32 = v50;
      uint64_t v33 = ~v6;
      uint64_t v10 = v53;
      if (v30 != -1) {
        goto LABEL_14;
      }
    }
    *(void *)uint64_t v27 = *(void *)v28;
    uint64_t v36 = (void *)((v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v36 = *v29;
    uint64_t v37 = ((unint64_t)v36 + v6 + 8) & v33;
    uint64_t v38 = ((unint64_t)v29 + v6 + 8) & v33;
    uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
    swift_retain();
    swift_retain();
    v39(v37, v38, v31);
    uint64_t v34 = __n;
    goto LABEL_17;
  }
  uint64_t v9 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v10 = v9 + ((v6 + 16) & ~(v6 | 7));
  swift_retain();
  return v10;
}

__n128 assignWithCopy for InsettableGroupedListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a2;
  char v6 = *(unsigned char *)(a2 + 9);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v7, v6);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 9);
  *(void *)a1 = v5;
  uint64_t v10 = *(unsigned __int8 *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 9) = v6;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  unint64_t v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)v12;
  LOBYTE(v5) = *(unsigned char *)(v12 + 9);
  unsigned __int8 v14 = *(unsigned char *)(v12 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v12, v14, v5);
  uint64_t v15 = *(void *)v11;
  char v16 = *(unsigned char *)(v11 + 9);
  *(void *)unint64_t v11 = v13;
  uint64_t v17 = *(unsigned __int8 *)(v11 + 8);
  *(unsigned char *)(v11 + 8) = v14;
  *(unsigned char *)(v11 + 9) = v5;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  unint64_t v18 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = *(void *)v18;
  uint64_t v20 = *(void *)(v18 + 8);
  unint64_t v21 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void *)(v18 + 16);
  uint64_t v23 = *(void *)(v18 + 24);
  uint64_t v24 = *(void *)(v18 + 32);
  uint64_t v25 = *(void *)(v18 + 40);
  uint64_t v26 = *(void *)(v18 + 48);
  uint64_t v27 = *(void *)(v18 + 56);
  char v59 = *(unsigned char *)(v18 + 64);
  char v61 = *(unsigned char *)(v18 + 65);
  outlined copy of Environment<ListPadding>.Content(*(void *)v18, v20, v22, v23, v24, v25, v26, v27, v59, v61);
  uint64_t v28 = *(void *)v21;
  uint64_t v29 = *(void *)(v21 + 8);
  uint64_t v30 = *(void *)(v21 + 16);
  uint64_t v31 = *(void *)(v21 + 24);
  uint64_t v32 = *(void *)(v21 + 32);
  uint64_t v33 = *(void *)(v21 + 40);
  uint64_t v34 = *(void *)(v21 + 48);
  uint64_t v35 = *(void *)(v21 + 56);
  char v36 = *(unsigned char *)(v21 + 64);
  char v37 = *(unsigned char *)(v21 + 65);
  *(void *)unint64_t v21 = v19;
  *(void *)(v21 + 8) = v20;
  *(void *)(v21 + 16) = v22;
  *(void *)(v21 + 24) = v23;
  *(void *)(v21 + 32) = v24;
  *(void *)(v21 + 40) = v25;
  *(void *)(v21 + 48) = v26;
  *(void *)(v21 + 56) = v27;
  *(unsigned char *)(v21 + 64) = v59;
  *(unsigned char *)(v21 + 65) = v61;
  outlined consume of Environment<ListPadding>.Content(v28, v29, v30, v31, v32, v33, v34, v35, v36, v37);
  uint64_t v38 = *(void *)(a3 + 24);
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = *(unsigned __int8 *)(v39 + 80);
  uint64_t v41 = (v40 | 7) + 66;
  long long v42 = (void *)((v41 + v21) & ~(v40 | 7));
  unint64_t v43 = (void *)((v41 + v18) & ~(v40 | 7));
  uint64_t v44 = *(unsigned int *)(v39 + 84);
  uint64_t v45 = *(void *)(v39 + 64);
  size_t v46 = ((v40 + 16) & ~v40) + v45;
  char v47 = (void *)(((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v62 = ~v40;
  uint64_t v64 = v38;
  if ((v44 & 0x80000000) != 0)
  {
    size_t v60 = ((v40 + 16) & ~v40) + v45;
    uint64_t v51 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v39 + 48);
    int v58 = v51(((unint64_t)v47 + v40 + 8) & ~v40, v44, v38);
    uint64_t v52 = v38;
    uint64_t v48 = (void *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v50 = v51(((unint64_t)v48 + v40 + 8) & ~v40, v44, v52);
    size_t v46 = v60;
    if (!v58)
    {
LABEL_5:
      if (!v50)
      {
        *long long v42 = *v43;
        swift_retain();
        swift_release();
        *char v47 = *v48;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v39 + 24))(((unint64_t)v47 + v40 + 8) & v62, ((unint64_t)v48 + v40 + 8) & v62, v64);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v39 + 8))(((unint64_t)v47 + v40 + 8) & v62, v64);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v48 = (void *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v49 = *v48;
    if (*v48 >= 0xFFFFFFFFuLL) {
      LODWORD(v49) = -1;
    }
    int v50 = v49 + 1;
    if (*v47 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v50)
  {
    *long long v42 = *v43;
    *char v47 = *v48;
    uint64_t v53 = *(void (**)(unint64_t, unint64_t, uint64_t))(v39 + 16);
    swift_retain();
    swift_retain();
    v53(((unint64_t)v47 + v40 + 8) & v62, ((unint64_t)v48 + v40 + 8) & v62, v64);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v42, v43, v46);
LABEL_12:
  unint64_t v54 = ((unint64_t)v43 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v55 = ((unint64_t)v42 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  __n128 result = *(__n128 *)v54;
  long long v57 = *(_OWORD *)(v54 + 16);
  *(_WORD *)(v55 + 32) = *(_WORD *)(v54 + 32);
  *(__n128 *)unint64_t v55 = result;
  *(_OWORD *)(v55 + 16) = v57;
  return result;
}

uint64_t initializeWithTake for InsettableGroupedListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  unint64_t v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)v5;
  *(_WORD *)(v4 + 8) = *(_WORD *)(v5 + 8);
  *(void *)unint64_t v4 = v6;
  unint64_t v7 = (v4 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v5 + 17) & 0xFFFFFFFFFFFFFFF8;
  long long v10 = *(_OWORD *)(v8 + 32);
  long long v9 = *(_OWORD *)(v8 + 48);
  long long v11 = *(_OWORD *)(v8 + 16);
  *(_WORD *)(v7 + 64) = *(_WORD *)(v8 + 64);
  *(_OWORD *)(v7 + 32) = v10;
  *(_OWORD *)(v7 + 48) = v9;
  *(_OWORD *)(v7 + 16) = v11;
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  uint64_t v12 = *(void *)(a3 + 24);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = (v14 | 7) + 66;
  char v16 = (void *)((v15 + v7) & ~(v14 | 7));
  uint64_t v17 = (void *)((v15 + v8) & ~(v14 | 7));
  uint64_t v18 = ~v14;
  uint64_t v19 = (v14 + 16) & ~v14;
  uint64_t v20 = *(void *)(v13 + 64);
  unint64_t v21 = (uint64_t *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v13 + 84) & 0x80000000) == 0)
  {
    uint64_t v22 = *v21;
    if ((unint64_t)*v21 >= 0xFFFFFFFF) {
      LODWORD(v22) = -1;
    }
    size_t v23 = v19 + v20;
    if (v22 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *char v16 = *v17;
    uint64_t v24 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v24 = *v21;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 32))(((unint64_t)v24 + v14 + 8) & v18, ((unint64_t)v21 + v14 + 8) & v18, v12);
    goto LABEL_8;
  }
  size_t v23 = v19 + v20;
  if (!(*(unsigned int (**)(unint64_t))(v13 + 48))(((unint64_t)v21 + v14 + 8) & v18)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v16, v17, v23);
LABEL_8:
  unint64_t v25 = ((unint64_t)v17 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = ((unint64_t)v16 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v27 = *(_OWORD *)v25;
  long long v28 = *(_OWORD *)(v25 + 16);
  *(_WORD *)(v26 + 32) = *(_WORD *)(v25 + 32);
  *(_OWORD *)unint64_t v26 = v27;
  *(_OWORD *)(v26 + 16) = v28;
  return a1;
}

uint64_t assignWithTake for InsettableGroupedListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 9);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 9);
  *(void *)a1 = *(void *)a2;
  uint64_t v10 = *(unsigned __int8 *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 9) = v7;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  unint64_t v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  char v13 = *(unsigned char *)(v12 + 8);
  char v14 = *(unsigned char *)(v12 + 9);
  uint64_t v15 = *(void *)v11;
  char v16 = *(unsigned char *)(v11 + 9);
  *(void *)unint64_t v11 = *(void *)v12;
  uint64_t v17 = *(unsigned __int8 *)(v11 + 8);
  *(unsigned char *)(v11 + 8) = v13;
  *(unsigned char *)(v11 + 9) = v14;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  unint64_t v18 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  char v19 = *(unsigned char *)(v18 + 64);
  char v20 = *(unsigned char *)(v18 + 65);
  unint64_t v21 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void *)v21;
  uint64_t v23 = *(void *)(v21 + 8);
  uint64_t v24 = *(void *)(v21 + 16);
  uint64_t v25 = *(void *)(v21 + 24);
  uint64_t v26 = *(void *)(v21 + 32);
  uint64_t v27 = *(void *)(v21 + 40);
  uint64_t v28 = *(void *)(v21 + 48);
  uint64_t v29 = *(void *)(v21 + 56);
  char v30 = *(unsigned char *)(v21 + 64);
  char v31 = *(unsigned char *)(v21 + 65);
  long long v32 = *(_OWORD *)(v18 + 16);
  long long v33 = *(_OWORD *)(v18 + 32);
  long long v34 = *(_OWORD *)(v18 + 48);
  *(_OWORD *)unint64_t v21 = *(_OWORD *)v18;
  *(_OWORD *)(v21 + 16) = v32;
  *(_OWORD *)(v21 + 32) = v33;
  *(_OWORD *)(v21 + 48) = v34;
  *(unsigned char *)(v21 + 64) = v19;
  *(unsigned char *)(v21 + 65) = v20;
  outlined consume of Environment<ListPadding>.Content(v22, v23, v24, v25, v26, v27, v28, v29, v30, v31);
  uint64_t v35 = *(void *)(a3 + 24);
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(unsigned __int8 *)(v36 + 80);
  uint64_t v38 = (v37 | 7) + 66;
  uint64_t v39 = (void *)((v38 + v21) & ~(v37 | 7));
  uint64_t v40 = (void *)((v38 + v18) & ~(v37 | 7));
  uint64_t v41 = *(unsigned int *)(v36 + 84);
  uint64_t v42 = *(void *)(v36 + 64);
  size_t v43 = ((v37 + 16) & ~v37) + v42;
  uint64_t v44 = (void *)(((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v62 = ~v37;
  if ((v41 & 0x80000000) != 0)
  {
    size_t v60 = ((v37 + 16) & ~v37) + v42;
    char v61 = v39;
    uint64_t v49 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v36 + 48);
    uint64_t v50 = v35;
    int v51 = v49(((unint64_t)v44 + v37 + 8) & ~v37, v41, v35);
    uint64_t v52 = v49;
    int v59 = v51;
    size_t v46 = (void *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
    size_t v43 = v60;
    uint64_t v53 = v41;
    uint64_t v45 = v50;
    int v48 = v52(((unint64_t)v46 + v37 + 8) & ~v37, v53, v50);
    uint64_t v39 = v61;
    if (!v59)
    {
LABEL_5:
      if (!v48)
      {
        *uint64_t v39 = *v40;
        swift_release();
        *uint64_t v44 = *v46;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v36 + 40))(((unint64_t)v44 + v37 + 8) & v62, ((unint64_t)v46 + v37 + 8) & v62, v45);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v36 + 8))(((unint64_t)v44 + v37 + 8) & v62, v45);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v45 = v35;
    size_t v46 = (void *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v47 = *v46;
    if (*v46 >= 0xFFFFFFFFuLL) {
      LODWORD(v47) = -1;
    }
    int v48 = v47 + 1;
    if (*v44 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v48)
  {
    *uint64_t v39 = *v40;
    *uint64_t v44 = *v46;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v36 + 32))(((unint64_t)v44 + v37 + 8) & v62, ((unint64_t)v46 + v37 + 8) & v62, v45);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v39, v40, v43);
LABEL_12:
  unint64_t v54 = ((unint64_t)v40 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v55 = ((unint64_t)v39 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v56 = *(_OWORD *)v54;
  long long v57 = *(_OWORD *)(v54 + 16);
  *(_WORD *)(v55 + 32) = *(_WORD *)(v54 + 32);
  *(_OWORD *)unint64_t v55 = v56;
  *(_OWORD *)(v55 + 16) = v57;
  return a1;
}

uint64_t getEnumTagSinglePayload for InsettableGroupedListBody.TableViewRoot(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = v6 | 7;
  if (v7 - 1 < a2)
  {
    unint64_t v9 = ((*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + ((v6 + 16) & ~v6) + ((v8 + 98) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 34;
    unsigned int v10 = (a2 - v7 + 0x10000) >> (8 * v9);
    if (v9 <= 3) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!*((unsigned char *)a1 + v9)) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (*(unsigned __int16 *)((char *)a1 + v9)) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1880FE974);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = (v14 - 1) << (8 * v9);
        if (v9 <= 3)
        {
          int v17 = *a1;
        }
        else
        {
          int v16 = 0;
          int v17 = *(_DWORD *)a1;
        }
        return (v17 | v16) + v7;
      default:
        break;
    }
  }
  unint64_t v18 = (unint64_t *)(((((((((unint64_t)a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)
                              + v8
                              + 66) & ~v8)
                            + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 0x80000000) != 0)
  {
    unsigned int v20 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v18 + v6 + 8) & ~v6);
  }
  else
  {
    unint64_t v19 = *v18;
    if (v19 >= 0xFFFFFFFF) {
      LODWORD(v19) = -1;
    }
    unsigned int v20 = v19 + 1;
  }
  if (v20 >= 2) {
    return v20 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for InsettableGroupedListBody.TableViewRoot(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  size_t v12 = ((v10 + 16) & ~v10) + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  unint64_t v13 = ((v12 + (((v10 | 7) + 98) & ~(v10 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 34;
  char v14 = 8 * v13;
  if (v8 - 1 >= a3)
  {
    int v18 = 0;
    if (v9 >= a2)
    {
LABEL_17:
      switch(v18)
      {
        case 1:
          a1[v13] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v13] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_58;
        case 4:
          *(_DWORD *)&a1[v13] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            uint64_t v11 = v10 | 7;
            unint64_t v22 = (((((unint64_t)(a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + v11 + 66) & ~v11;
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                uint64_t v26 = (void *)((v22 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v28 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v29 = a2 + 1;
                  v28(((unint64_t)v26 + v10 + 8) & ~v10, v29);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v27 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v27 = a2;
                  }
                  *uint64_t v26 = v27;
                }
              }
            }
            else
            {
              if (v12 <= 3) {
                int v23 = ~(-1 << (8 * v12));
              }
              else {
                int v23 = -1;
              }
              if (v12)
              {
                int v24 = v23 & (a2 - v8);
                if (v12 <= 3) {
                  int v25 = v12;
                }
                else {
                  int v25 = 4;
                }
                bzero((void *)((((((unint64_t)(a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)+ v11+ 66) & ~v11), v12);
                switch(v25)
                {
                  case 2:
                    *(_WORD *)unint64_t v22 = v24;
                    break;
                  case 3:
                    *(_WORD *)unint64_t v22 = v24;
                    *(unsigned char *)(v22 + 2) = BYTE2(v24);
                    break;
                  case 4:
                    *(_DWORD *)unint64_t v22 = v24;
                    break;
                  default:
                    *(unsigned char *)unint64_t v22 = v24;
                    break;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v15 = (a3 - v8 + 0x10000) >> v14;
    if (v13 <= 3) {
      unsigned int v16 = v15 + 1;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      int v17 = 4;
    }
    else {
      int v17 = 2;
    }
    if (v16 < 0x100) {
      int v17 = 1;
    }
    if (v16 >= 2) {
      int v18 = v17;
    }
    else {
      int v18 = 0;
    }
    if (v9 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v19 = a2 - v8;
  unsigned int v20 = (a2 - v8) >> v14;
  bzero(a1, ((v12 + (((v10 | 7) + 98) & ~(v10 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 34);
  if (v13 <= 3) {
    int v21 = v20 + 1;
  }
  else {
    int v21 = 1;
  }
  if (v13 > 3) {
    *(_DWORD *)a1 = v19;
  }
  else {
    *(_WORD *)a1 = v19;
  }
  switch(v18)
  {
    case 1:
      a1[v13] = v21;
      break;
    case 2:
      *(_WORD *)&a1[v13] = v21;
      break;
    case 3:
LABEL_58:
      __break(1u);
      JUMPOUT(0x1880FEC68);
    case 4:
      *(_DWORD *)&a1[v13] = v21;
      break;
    default:
      return;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for InsettableGroupedListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = v8 | 7;
  uint64_t v10 = ((v8 + 16) & ~v8) + *(void *)(v7 + 64);
  uint64_t v11 = *(void *)(v5 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  if ((v8 | 7 | v12) == 7
    && ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) == 0
    && ((v12 + ((v10 + 7 + (((v8 | 7) + 98) & ~(v8 | 7))) & 0xFFFFFFFFFFFFFFF8) + 34) & ~v12)
     + *(void *)(*(void *)(v5 - 8) + 64) <= 0x18)
  {
    uint64_t __n = ((v8 + 16) & ~v8) + *(void *)(*(void *)(v6 - 8) + 64);
    uint64_t v62 = *(_DWORD *)(v11 + 80);
    uint64_t v63 = *(void *)(v6 - 8);
    uint64_t v64 = v10 + 7;
    uint64_t v65 = v6;
    uint64_t v66 = *(void *)(v5 - 8);
    uint64_t v67 = v5;
    uint64_t v58 = ~v9;
    uint64_t v60 = ~v8;
    uint64_t v17 = *(void *)a2;
    char v18 = *(unsigned char *)(a2 + 9);
    unsigned __int8 v19 = *(unsigned char *)(a2 + 8);
    int v61 = *(_DWORD *)(v7 + 84);
    outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v19, v18);
    *(void *)a1 = v17;
    *(unsigned char *)(a1 + 8) = v19;
    *(unsigned char *)(a1 + 9) = v18;
    uint64_t v68 = a1;
    unint64_t v20 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v59 = v8;
    unint64_t v21 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v22 = *(void *)v21;
    LOBYTE(v17) = *(unsigned char *)(v21 + 9);
    unsigned __int8 v23 = *(unsigned char *)(v21 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(void *)v21, v23, v17);
    *(void *)unint64_t v20 = v22;
    *(unsigned char *)(v20 + 8) = v23;
    *(unsigned char *)(v20 + 9) = v17;
    unint64_t v24 = (v20 + 17) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = (v21 + 17) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v26 = *(void *)v25;
    uint64_t v27 = *(void *)(v25 + 8);
    uint64_t v28 = *(void *)(v25 + 16);
    uint64_t v29 = *(void *)(v25 + 24);
    uint64_t v30 = *(void *)(v25 + 32);
    uint64_t v55 = *(void *)(v25 + 40);
    uint64_t v31 = *(void *)(v25 + 48);
    uint64_t v32 = *(void *)(v25 + 56);
    char v56 = *(unsigned char *)(v25 + 64);
    char v57 = *(unsigned char *)(v25 + 65);
    outlined copy of Environment<ListPadding>.Content(*(void *)v25, v27, v28, v29, v30, v55, v31, v32, v56, v57);
    *(void *)unint64_t v24 = v26;
    *(void *)(v24 + 8) = v27;
    *(void *)(v24 + 16) = v28;
    *(void *)(v24 + 24) = v29;
    *(void *)(v24 + 32) = v30;
    *(void *)(v24 + 40) = v55;
    *(void *)(v24 + 48) = v31;
    *(void *)(v24 + 56) = v32;
    *(unsigned char *)(v24 + 64) = v56;
    *(unsigned char *)(v24 + 65) = v57;
    long long v33 = (void *)((v24 + v9 + 66) & v58);
    long long v34 = (void *)((v25 + v9 + 66) & v58);
    uint64_t v35 = (uint64_t *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v61 < 0)
    {
      uint64_t v38 = v63;
      uint64_t v37 = v65;
      int v43 = (*(uint64_t (**)(unint64_t))(v63 + 48))(((unint64_t)v35 + v59 + 8) & v60);
      uint64_t v39 = v62;
      uint64_t v40 = v59;
      uint64_t v41 = v60;
      uint64_t v42 = ~v62;
      if (v43)
      {
LABEL_14:
        memcpy(v33, v34, __n);
LABEL_17:
        uint64_t v16 = v68;
        unint64_t v49 = ((unint64_t)v33 + v64) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v50 = ((unint64_t)v34 + v64) & 0xFFFFFFFFFFFFFFF8;
        long long v51 = *(_OWORD *)v50;
        long long v52 = *(_OWORD *)(v50 + 16);
        *(_WORD *)(v49 + 32) = *(_WORD *)(v50 + 32);
        *(_OWORD *)unint64_t v49 = v51;
        *(_OWORD *)(v49 + 16) = v52;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v66 + 16))((v49 + v39 + 34) & v42, (v50 + v39 + 34) & v42, v67);
        return v16;
      }
    }
    else
    {
      uint64_t v36 = *v35;
      if ((unint64_t)*v35 >= 0xFFFFFFFF) {
        LODWORD(v36) = -1;
      }
      uint64_t v37 = v65;
      uint64_t v39 = v62;
      uint64_t v38 = v63;
      uint64_t v40 = v59;
      uint64_t v41 = v60;
      uint64_t v42 = ~v62;
      if (v36 != -1) {
        goto LABEL_14;
      }
    }
    void *v33 = *v34;
    uint64_t v44 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v44 = *v35;
    uint64_t v45 = v40 + 8;
    unint64_t v46 = ((unint64_t)v44 + v45) & v41;
    unint64_t v47 = ((unint64_t)v35 + v45) & v41;
    int v48 = *(void (**)(unint64_t, unint64_t, uint64_t))(v38 + 16);
    swift_retain();
    swift_retain();
    v48(v46, v47, v37);
    goto LABEL_17;
  }
  uint64_t v15 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v16 = v15 + (((v8 | 7 | v12) + 16) & ~(v8 | 7 | v12));
  swift_retain();
  return v16;
}

uint64_t assignWithCopy for InsettableGroupedListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a2;
  char v6 = *(unsigned char *)(a2 + 9);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v7, v6);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 9);
  *(void *)a1 = v5;
  uint64_t v10 = *(unsigned __int8 *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 9) = v6;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  uint64_t v64 = a1;
  unint64_t v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)v12;
  LOBYTE(v5) = *(unsigned char *)(v12 + 9);
  unsigned __int8 v14 = *(unsigned char *)(v12 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v12, v14, v5);
  uint64_t v15 = *(void *)v11;
  char v16 = *(unsigned char *)(v11 + 9);
  *(void *)unint64_t v11 = v13;
  uint64_t v17 = *(unsigned __int8 *)(v11 + 8);
  *(unsigned char *)(v11 + 8) = v14;
  *(unsigned char *)(v11 + 9) = v5;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  unint64_t v18 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = *(void *)v18;
  uint64_t v20 = *(void *)(v18 + 8);
  unint64_t v21 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void *)(v18 + 16);
  uint64_t v23 = *(void *)(v18 + 24);
  uint64_t v24 = *(void *)(v18 + 32);
  uint64_t v25 = *(void *)(v18 + 40);
  uint64_t v26 = *(void *)(v18 + 48);
  uint64_t v27 = *(void *)(v18 + 56);
  char v65 = *(unsigned char *)(v18 + 64);
  char v67 = *(unsigned char *)(v18 + 65);
  outlined copy of Environment<ListPadding>.Content(*(void *)v18, v20, v22, v23, v24, v25, v26, v27, v65, v67);
  uint64_t v28 = *(void *)v21;
  uint64_t v29 = *(void *)(v21 + 8);
  uint64_t v30 = *(void *)(v21 + 16);
  uint64_t v31 = *(void *)(v21 + 24);
  uint64_t v32 = *(void *)(v21 + 32);
  uint64_t v33 = *(void *)(v21 + 40);
  uint64_t v34 = *(void *)(v21 + 48);
  uint64_t v35 = *(void *)(v21 + 56);
  char v36 = *(unsigned char *)(v21 + 64);
  char v37 = *(unsigned char *)(v21 + 65);
  *(void *)unint64_t v21 = v19;
  *(void *)(v21 + 8) = v20;
  *(void *)(v21 + 16) = v22;
  *(void *)(v21 + 24) = v23;
  *(void *)(v21 + 32) = v24;
  *(void *)(v21 + 40) = v25;
  *(void *)(v21 + 48) = v26;
  *(void *)(v21 + 56) = v27;
  uint64_t v38 = a3;
  *(unsigned char *)(v21 + 64) = v65;
  *(unsigned char *)(v21 + 65) = v67;
  outlined consume of Environment<ListPadding>.Content(v28, v29, v30, v31, v32, v33, v34, v35, v36, v37);
  uint64_t v39 = *(void *)(a3 + 24);
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(unsigned __int8 *)(v40 + 80);
  uint64_t v42 = (v41 | 7) + 66;
  int v43 = (void *)((v42 + v21) & ~(v41 | 7));
  uint64_t v44 = (void *)((v42 + v18) & ~(v41 | 7));
  uint64_t v45 = *(unsigned int *)(v40 + 84);
  uint64_t v46 = ~v41;
  uint64_t v47 = *(void *)(v40 + 64);
  size_t v48 = ((v41 + 16) & ~v41) + v47;
  unint64_t v49 = (void *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v66 = ~v41;
  uint64_t v68 = v39;
  if ((v45 & 0x80000000) != 0)
  {
    size_t v63 = ((v41 + 16) & ~v41) + v47;
    uint64_t v53 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v40 + 48);
    int v62 = v53(((unint64_t)v49 + v41 + 8) & v46, v45, v39);
    uint64_t v54 = v39;
    unint64_t v50 = (void *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v52 = v53(((unint64_t)v50 + v41 + 8) & v46, v45, v54);
    size_t v48 = v63;
    uint64_t v38 = a3;
    if (!v62)
    {
LABEL_5:
      if (!v52)
      {
        *int v43 = *v44;
        swift_retain();
        swift_release();
        *unint64_t v49 = *v50;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v40 + 24))(((unint64_t)v49 + v41 + 8) & v66, ((unint64_t)v50 + v41 + 8) & v66, v68);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v40 + 8))(((unint64_t)v49 + v41 + 8) & v66, v68);
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v50 = (void *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v51 = *v50;
    if (*v50 >= 0xFFFFFFFFuLL) {
      LODWORD(v51) = -1;
    }
    int v52 = v51 + 1;
    if (*v49 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v52)
  {
    *int v43 = *v44;
    *unint64_t v49 = *v50;
    uint64_t v55 = *(void (**)(unint64_t, unint64_t, uint64_t))(v40 + 16);
    swift_retain();
    swift_retain();
    v55(((unint64_t)v49 + v41 + 8) & v66, ((unint64_t)v50 + v41 + 8) & v66, v68);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v43, v44, v48);
LABEL_12:
  unint64_t v56 = ((unint64_t)v43 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v57 = ((unint64_t)v44 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v58 = *(_OWORD *)v57;
  long long v59 = *(_OWORD *)(v57 + 16);
  *(_WORD *)(v56 + 32) = *(_WORD *)(v57 + 32);
  *(_OWORD *)unint64_t v56 = v58;
  *(_OWORD *)(v56 + 16) = v59;
  uint64_t v60 = *(void *)(*(void *)(v38 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v60 + 24))((*(unsigned __int8 *)(v60 + 80) + 34 + v56) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80), (*(unsigned __int8 *)(v60 + 80) + 34 + v57) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80));
  return v64;
}

uint64_t initializeWithTake for InsettableGroupedListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  unint64_t v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)v5;
  *(_WORD *)(v4 + 8) = *(_WORD *)(v5 + 8);
  *(void *)unint64_t v4 = v6;
  unint64_t v7 = (v4 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v5 + 17) & 0xFFFFFFFFFFFFFFF8;
  long long v10 = *(_OWORD *)(v8 + 32);
  long long v9 = *(_OWORD *)(v8 + 48);
  long long v11 = *(_OWORD *)(v8 + 16);
  *(_WORD *)(v7 + 64) = *(_WORD *)(v8 + 64);
  *(_OWORD *)(v7 + 32) = v10;
  *(_OWORD *)(v7 + 48) = v9;
  *(_OWORD *)(v7 + 16) = v11;
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  uint64_t v12 = *(void *)(a3 + 24);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = (v14 | 7) + 66;
  char v16 = (void *)((v15 + v7) & ~(v14 | 7));
  uint64_t v17 = (void *)((v15 + v8) & ~(v14 | 7));
  uint64_t v18 = ~v14;
  uint64_t v19 = (v14 + 16) & ~v14;
  uint64_t v20 = *(void *)(v13 + 64);
  unint64_t v21 = (uint64_t *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v13 + 84) & 0x80000000) == 0)
  {
    uint64_t v22 = *v21;
    if ((unint64_t)*v21 >= 0xFFFFFFFF) {
      LODWORD(v22) = -1;
    }
    size_t v23 = v19 + v20;
    if (v22 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *char v16 = *v17;
    uint64_t v24 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v24 = *v21;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 32))(((unint64_t)v24 + v14 + 8) & v18, ((unint64_t)v21 + v14 + 8) & v18, v12);
    goto LABEL_8;
  }
  size_t v23 = v19 + v20;
  if (!(*(unsigned int (**)(unint64_t))(v13 + 48))(((unint64_t)v21 + v14 + 8) & v18)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v16, v17, v23);
LABEL_8:
  unint64_t v25 = ((unint64_t)v16 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = ((unint64_t)v17 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v27 = *(_OWORD *)v26;
  long long v28 = *(_OWORD *)(v26 + 16);
  *(_WORD *)(v25 + 32) = *(_WORD *)(v26 + 32);
  *(_OWORD *)unint64_t v25 = v27;
  *(_OWORD *)(v25 + 16) = v28;
  uint64_t v29 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v29 + 32))((*(unsigned __int8 *)(v29 + 80) + 34 + v25) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80), (*(unsigned __int8 *)(v29 + 80) + 34 + v26) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
  return a1;
}

uint64_t assignWithTake for InsettableGroupedListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 9);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 9);
  *(void *)a1 = *(void *)a2;
  uint64_t v10 = *(unsigned __int8 *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 9) = v7;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  unint64_t v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  char v13 = *(unsigned char *)(v12 + 8);
  char v14 = *(unsigned char *)(v12 + 9);
  uint64_t v15 = *(void *)v11;
  char v16 = *(unsigned char *)(v11 + 9);
  *(void *)unint64_t v11 = *(void *)v12;
  uint64_t v17 = *(unsigned __int8 *)(v11 + 8);
  *(unsigned char *)(v11 + 8) = v13;
  *(unsigned char *)(v11 + 9) = v14;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  unint64_t v18 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  char v19 = *(unsigned char *)(v18 + 64);
  char v20 = *(unsigned char *)(v18 + 65);
  unint64_t v21 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void *)v21;
  uint64_t v23 = *(void *)(v21 + 8);
  uint64_t v24 = *(void *)(v21 + 16);
  uint64_t v25 = *(void *)(v21 + 24);
  uint64_t v26 = *(void *)(v21 + 32);
  uint64_t v27 = *(void *)(v21 + 40);
  uint64_t v28 = *(void *)(v21 + 48);
  uint64_t v29 = *(void *)(v21 + 56);
  char v30 = *(unsigned char *)(v21 + 64);
  char v31 = *(unsigned char *)(v21 + 65);
  long long v32 = *(_OWORD *)(v18 + 16);
  long long v33 = *(_OWORD *)(v18 + 32);
  long long v34 = *(_OWORD *)(v18 + 48);
  *(_OWORD *)unint64_t v21 = *(_OWORD *)v18;
  *(_OWORD *)(v21 + 16) = v32;
  *(_OWORD *)(v21 + 32) = v33;
  *(_OWORD *)(v21 + 48) = v34;
  *(unsigned char *)(v21 + 64) = v19;
  *(unsigned char *)(v21 + 65) = v20;
  outlined consume of Environment<ListPadding>.Content(v22, v23, v24, v25, v26, v27, v28, v29, v30, v31);
  uint64_t v64 = a3;
  uint64_t v35 = *(void *)(a3 + 24);
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(unsigned __int8 *)(v36 + 80);
  uint64_t v38 = (v37 | 7) + 66;
  uint64_t v39 = (void *)((v38 + v21) & ~(v37 | 7));
  uint64_t v40 = (void *)((v38 + v18) & ~(v37 | 7));
  uint64_t v41 = *(unsigned int *)(v36 + 84);
  uint64_t v42 = *(void *)(v36 + 64);
  size_t v43 = ((v37 + 16) & ~v37) + v42;
  uint64_t v44 = (void *)(((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v63 = ~v37;
  if ((v41 & 0x80000000) != 0)
  {
    size_t v61 = ((v37 + 16) & ~v37) + v42;
    int v62 = v39;
    unint64_t v49 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v36 + 48);
    uint64_t v50 = v35;
    int v51 = v49(((unint64_t)v44 + v37 + 8) & ~v37, v41, v35);
    int v52 = v49;
    int v60 = v51;
    uint64_t v46 = (void *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v53 = v41;
    uint64_t v45 = v50;
    int v48 = v52(((unint64_t)v46 + v37 + 8) & ~v37, v53, v50);
    size_t v43 = v61;
    uint64_t v39 = v62;
    if (!v60)
    {
LABEL_5:
      if (!v48)
      {
        *uint64_t v39 = *v40;
        swift_release();
        *uint64_t v44 = *v46;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v36 + 40))(((unint64_t)v44 + v37 + 8) & v63, ((unint64_t)v46 + v37 + 8) & v63, v45);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v36 + 8))(((unint64_t)v44 + v37 + 8) & v63, v45);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v45 = v35;
    uint64_t v46 = (void *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v47 = *v46;
    if (*v46 >= 0xFFFFFFFFuLL) {
      LODWORD(v47) = -1;
    }
    int v48 = v47 + 1;
    if (*v44 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v48)
  {
    *uint64_t v39 = *v40;
    *uint64_t v44 = *v46;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v36 + 32))(((unint64_t)v44 + v37 + 8) & v63, ((unint64_t)v46 + v37 + 8) & v63, v45);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v39, v40, v43);
LABEL_12:
  unint64_t v54 = ((unint64_t)v39 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v55 = ((unint64_t)v40 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v56 = *(_OWORD *)v55;
  long long v57 = *(_OWORD *)(v55 + 16);
  *(_WORD *)(v54 + 32) = *(_WORD *)(v55 + 32);
  *(_OWORD *)unint64_t v54 = v56;
  *(_OWORD *)(v54 + 16) = v57;
  uint64_t v58 = *(void *)(*(void *)(v64 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v58 + 40))((*(unsigned __int8 *)(v58 + 80) + 34 + v54) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80), (*(unsigned __int8 *)(v58 + 80) + 34 + v55) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for InsettableGroupedListBody.CollectionViewBody(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    int v6 = 0x7FFFFFFF;
  }
  else {
    int v6 = *(_DWORD *)(v4 + 84);
  }
  unsigned int v7 = v6 - 1;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= v10) {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v13 = v7;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v11 | 7;
  uint64_t v15 = ((v11 + 16) & ~v11) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + 7;
  uint64_t v16 = v12 + 34;
  int v17 = a2 - v13;
  if (a2 <= v13) {
    goto LABEL_28;
  }
  unint64_t v18 = ((v16 + ((v15 + ((v14 + 98) & ~v14)) & 0xFFFFFFFFFFFFFFF8)) & ~v12) + *(void *)(*(void *)(v8 - 8) + 64);
  char v19 = 8 * v18;
  if (v18 <= 3)
  {
    unsigned int v22 = ((v17 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v22))
    {
      int v20 = *(_DWORD *)((char *)a1 + v18);
      if (!v20) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v22 > 0xFF)
    {
      int v20 = *(unsigned __int16 *)((char *)a1 + v18);
      if (!*(unsigned __int16 *)((char *)a1 + v18)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v22 < 2)
    {
LABEL_28:
      unint64_t v26 = ((((((unint64_t)a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + v14 + 66) & ~v14;
      if (v7 >= v10)
      {
        uint64_t v29 = (unint64_t *)((v26 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v5 & 0x80000000) != 0)
        {
          unsigned int v31 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v29 + v11 + 8) & ~v11);
        }
        else
        {
          unint64_t v30 = *v29;
          if (v30 >= 0xFFFFFFFF) {
            LODWORD(v30) = -1;
          }
          unsigned int v31 = v30 + 1;
        }
        if (v31 >= 2) {
          return v31 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v27 = (v16 + ((v15 + v26) & 0xFFFFFFFFFFFFFFF8)) & ~v12;
        uint64_t v28 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
        return v28(v27, v10, v8);
      }
    }
  }
  int v20 = *((unsigned __int8 *)a1 + v18);
  if (!*((unsigned char *)a1 + v18)) {
    goto LABEL_28;
  }
LABEL_18:
  int v23 = (v20 - 1) << v19;
  if (v18 > 3) {
    int v23 = 0;
  }
  if (v18)
  {
    if (v18 <= 3) {
      int v24 = v18;
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v13 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for InsettableGroupedListBody.CollectionViewBody(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  unsigned int v13 = v8 - 1;
  if (v8 - 1 <= v10) {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v14 = v8 - 1;
  }
  size_t v15 = ((v11 + 16) & ~v11) + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  uint64_t v16 = v12 + 34;
  size_t v17 = ((v12 + 34 + ((v15 + 7 + (((v11 | 7) + 98) & ~(v11 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~v12)
      + *(void *)(v9 + 64);
  BOOL v18 = a3 >= v14;
  unsigned int v19 = a3 - v14;
  if (v19 != 0 && v18)
  {
    if (v17 <= 3)
    {
      unsigned int v24 = ((v19 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
      if (HIWORD(v24))
      {
        int v20 = 4;
      }
      else if (v24 >= 0x100)
      {
        int v20 = 2;
      }
      else
      {
        int v20 = v24 > 1;
      }
    }
    else
    {
      int v20 = 1;
    }
  }
  else
  {
    int v20 = 0;
  }
  if (v14 < a2)
  {
    unsigned int v21 = ~v14 + a2;
    if (v17 < 4)
    {
      int v22 = (v21 >> (8 * v17)) + 1;
      if (v17)
      {
        int v25 = v21 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if (v17 == 3)
        {
          *(_WORD *)a1 = v25;
          a1[2] = BYTE2(v25);
        }
        else if (v17 == 2)
        {
          *(_WORD *)a1 = v25;
        }
        else
        {
          *a1 = v25;
        }
      }
    }
    else
    {
      bzero(a1, v17);
      *(_DWORD *)a1 = v21;
      int v22 = 1;
    }
    switch(v20)
    {
      case 1:
        a1[v17] = v22;
        return;
      case 2:
        *(_WORD *)&a1[v17] = v22;
        return;
      case 3:
        goto LABEL_72;
      case 4:
        *(_DWORD *)&a1[v17] = v22;
        return;
      default:
        return;
    }
  }
  uint64_t v23 = ~v12;
  switch(v20)
  {
    case 1:
      a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_72:
      __break(1u);
      JUMPOUT(0x188100154);
    case 4:
      *(_DWORD *)&a1[v17] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        unint64_t v26 = (unsigned char *)((((((unint64_t)(a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)
                       + (v11 | 7)
                       + 66) & ~(v11 | 7));
        if (v13 >= v10)
        {
          if (v13 >= a2)
          {
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                long long v33 = (void *)((unint64_t)(v26 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v35 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v36 = a2 + 1;
                  v35(((unint64_t)v33 + v11 + 8) & ~v11, v36);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v34 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v34 = a2;
                  }
                  void *v33 = v34;
                }
              }
            }
            else
            {
              if (v15 <= 3) {
                int v31 = ~(-1 << (8 * v15));
              }
              else {
                int v31 = -1;
              }
              if (v15)
              {
                int v29 = v31 & (a2 - v8);
                if (v15 <= 3) {
                  int v32 = v15;
                }
                else {
                  int v32 = 4;
                }
                bzero(v26, v15);
                switch(v32)
                {
                  case 2:
LABEL_64:
                    *(_WORD *)unint64_t v26 = v29;
                    break;
                  case 3:
LABEL_65:
                    *(_WORD *)unint64_t v26 = v29;
                    void v26[2] = BYTE2(v29);
                    break;
                  case 4:
LABEL_66:
                    *(_DWORD *)unint64_t v26 = v29;
                    break;
                  default:
LABEL_52:
                    *unint64_t v26 = v29;
                    break;
                }
              }
            }
          }
          else
          {
            if (v15 <= 3) {
              int v28 = ~(-1 << (8 * v15));
            }
            else {
              int v28 = -1;
            }
            if (v15)
            {
              int v29 = v28 & (a2 - v8);
              if (v15 <= 3) {
                int v30 = v15;
              }
              else {
                int v30 = 4;
              }
              bzero(v26, v15);
              switch(v30)
              {
                case 2:
                  goto LABEL_64;
                case 3:
                  goto LABEL_65;
                case 4:
                  goto LABEL_66;
                default:
                  goto LABEL_52;
              }
            }
          }
        }
        else
        {
          unint64_t v27 = *(void (**)(unint64_t))(v9 + 56);
          v27((v16 + ((unint64_t)&v26[v15 + 7] & 0xFFFFFFFFFFFFFFF8)) & v23);
        }
      }
      return;
  }
}

_OWORD *initializeBufferWithCopyOfBuffer for ContentConfigurationBasedRootEnvironment(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (_OWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v7;
    uint64_t v8 = a2[5];
    *((void *)v4 + 4) = a2[4];
    *((void *)v4 + 5) = v8;
    *((void *)v4 + 6) = a2[6];
    *((unsigned char *)v4 + 56) = *((unsigned char *)a2 + 56);
    *((void *)v4 + 8) = a2[8];
    unsigned int v10 = a2 + 9;
    uint64_t v9 = a2[9];
    swift_retain();
    swift_retain();
    if (v9 == 1)
    {
      *((void *)v4 + 9) = *v10;
      *((unsigned char *)v4 + 80) = *((unsigned char *)a2 + 80);
    }
    else
    {
      *((void *)v4 + 9) = v9;
      *((unsigned char *)v4 + 80) = *((unsigned char *)a2 + 80);
      swift_retain();
    }
    *((unsigned char *)v4 + 81) = *((unsigned char *)a2 + 81);
    uint64_t v12 = *(int *)(a3 + 24);
    unsigned int v13 = (char *)v4 + v12;
    unsigned int v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for UICellConfigurationState();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      type metadata accessor for UICellConfigurationState?(0);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t initializeWithTake for ContentConfigurationBasedRootEnvironment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  long long v7 = (const void *)(a2 + v6);
  uint64_t v8 = (void *)(a1 + v6);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  uint64_t v9 = type metadata accessor for UICellConfigurationState();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
  {
    type metadata accessor for UICellConfigurationState?(0);
    memcpy(v8, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v8, v7, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  }
  return a1;
}

uint64_t assignWithTake for ContentConfigurationBasedRootEnvironment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  uint64_t v7 = *(void *)(a2 + 72);
  uint64_t v8 = *(void *)(a1 + 72);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  if (v8 == 1) {
    goto LABEL_4;
  }
  if (v7 == 1)
  {
    outlined destroy of ListItemTint(a1 + 72);
LABEL_4:
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    goto LABEL_6;
  }
  *(void *)(a1 + 72) = v7;
  swift_release();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
LABEL_6:
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for UICellConfigurationState();
  uint64_t v13 = *(void *)(v12 - 8);
  unsigned int v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_11;
  }
  if (v16)
  {
LABEL_11:
    type metadata accessor for UICellConfigurationState?(0);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentConfigurationBasedRootEnvironment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1881006B8);
}

uint64_t sub_1881006B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    type metadata accessor for UICellConfigurationState?(0);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for ContentConfigurationBasedRootEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_188100788);
}

uint64_t sub_188100788(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 40) = a2;
  }
  else
  {
    type metadata accessor for UICellConfigurationState?(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t assignWithCopy for ListContentStyling(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  unint64_t v4 = (uint64_t *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 72);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v7 = (uint64_t *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 72);
  if (v5 == 1)
  {
    if (v6 == 1)
    {
      uint64_t v8 = *v7;
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      *unint64_t v4 = v8;
    }
    else
    {
      *(void *)(a1 + 72) = v6;
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      swift_retain();
    }
  }
  else if (v6 == 1)
  {
    outlined destroy of ListItemTint(a1 + 72);
    char v9 = *(unsigned char *)(a2 + 80);
    *unint64_t v4 = *v7;
    *(unsigned char *)(a1 + 80) = v9;
  }
  else
  {
    *(void *)(a1 + 72) = v6;
    swift_retain();
    swift_release();
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  }
  return a1;
}

uint64_t assignWithTake for ListContentStyling(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 72);
  uint64_t v6 = *(void *)(a1 + 72);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  if (v6 != 1)
  {
    if (v5 != 1)
    {
      *(void *)(a1 + 72) = v5;
      swift_release();
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      return a1;
    }
    outlined destroy of ListItemTint(a1 + 72);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionInsetMode(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 34)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SectionInsetMode(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 32) = 0;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 34) = v3;
  return result;
}

uint64_t getEnumTag for SectionInsetMode(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for SectionInsetMode(uint64_t result, int a2)
{
  if (a2)
  {
    *(unsigned char *)(result + 32) = 0;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 1;
    *(unsigned char *)(result + 33) = 1;
  }
  else
  {
    *(unsigned char *)(result + 33) = 0;
  }
  return result;
}

uint64_t sub_188100AAC()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type SectionInsetMode and conformance SectionInsetMode()
{
  unint64_t result = lazy protocol witness table cache variable for type SectionInsetMode and conformance SectionInsetMode;
  if (!lazy protocol witness table cache variable for type SectionInsetMode and conformance SectionInsetMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionInsetMode and conformance SectionInsetMode);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in ContentConfigurationBasedRootEnvironment()
{
  return &protocol witness table for ContentConfigurationBasedRootEnvironment;
}

uint64_t instantiation function for generic protocol witness table for InsettableGroupedListBody<A, B>.TableViewRoot(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in InsettableGroupedListBody<A, B>.TableViewRoot()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

void *type metadata accessor for DisableCollectionViewGroupedListsFeature()
{
  return &unk_1ED4647D8;
}

ValueMetadata *type metadata accessor for ListConcatenatesFooters()
{
  return &type metadata for ListConcatenatesFooters;
}

_UNKNOWN **sub_188100CFC()
{
  return &protocol witness table for CollectionViewListRoot<A, B>;
}

_UNKNOWN **sub_188100D08()
{
  return &protocol witness table for TableViewListCore<A, B>;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ListConcatenatesFooters()
{
  return &protocol witness table for ListConcatenatesFooters;
}

ValueMetadata *type metadata accessor for DisableListSections()
{
  return &type metadata for DisableListSections;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in DisableListSections()
{
  return &protocol witness table for DisableListSections;
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in FallbackLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for LabelStyle.makeBody(configuration:) in conformance FallbackLabelStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(_WORD *)(a1 + 8) = 0;
  return result;
}

uint64_t destroy for ResolvedFallbackLabel(uint64_t a1)
{
  return outlined consume of Environment<CGFloat?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(unsigned char *)(a1 + 9));
}

uint64_t initializeBufferWithCopyOfBuffer for ResolvedFallbackLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 9);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v5, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 9) = v4;
  return a1;
}

uint64_t assignWithCopy for ResolvedFallbackLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 9);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v5, v4);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 9);
  *(void *)a1 = v3;
  uint64_t v8 = *(unsigned __int8 *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 9) = v4;
  outlined consume of Environment<CGFloat?>.Content(v6, v8, v7);
  return a1;
}

uint64_t assignWithTake for ResolvedFallbackLabel(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 9);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 9);
  *(void *)a1 = *(void *)a2;
  uint64_t v7 = *(unsigned __int8 *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4;
  outlined consume of Environment<CGFloat?>.Content(v5, v7, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedFallbackLabel(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 9);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedFallbackLabel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 9) = -(char)a2;
    }
  }
  return result;
}

void *type metadata accessor for ResolvedFallbackLabel()
{
  return &unk_1ED4364E8;
}

uint64_t sub_1881011BC()
{
  return lazy protocol witness table accessor for type StaticIf<ButtonContainerIsBorderedInput, ResolvedFallbackLabel, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ButtonContainerIsBorderedInput, ResolvedFallbackLabel, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<ButtonContainerIsBorderedInput, ResolvedFallbackLabel, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>>, (void (*)(void))lazy protocol witness table accessor for type ResolvedFallbackLabel and conformance ResolvedFallbackLabel);
}

void type metadata accessor for StaticIf<ButtonContainerIsBorderedInput, ResolvedFallbackLabel, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<ButtonContainerIsBorderedInput, ResolvedFallbackLabel, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>>)
  {
    type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle);
    lazy protocol witness table accessor for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<ButtonContainerIsBorderedInput, ResolvedFallbackLabel, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ResolvedFallbackLabel and conformance ResolvedFallbackLabel()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedFallbackLabel and conformance ResolvedFallbackLabel;
  if (!lazy protocol witness table cache variable for type ResolvedFallbackLabel and conformance ResolvedFallbackLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedFallbackLabel and conformance ResolvedFallbackLabel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle);
    lazy protocol witness table accessor for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>();
    lazy protocol witness table accessor for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for LabelStyleWritingModifier<TitleAndIconLabelStyle>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedFallbackLabel()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedFallbackLabel()
{
  type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>();
  type metadata accessor for LabelStyleWritingModifier<TitleAndIconLabelStyle>(0, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle);
  lazy protocol witness table accessor for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>();
  lazy protocol witness table accessor for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle);
  uint64_t v0 = static ModifiedContent<>._viewListCount(inputs:)();
  if ((v1 & 1) == 0)
  {
    type metadata accessor for LabelStyleWritingModifier<TitleAndIconLabelStyle>(0, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle);
    lazy protocol witness table accessor for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle);
    BOOL v2 = v0 != static ModifiedContent<>._viewListCount(inputs:)();
    if ((v3 | v2)) {
      return 0;
    }
  }
  return v0;
}

uint64_t protocol witness for View.body.getter in conformance ResolvedFallbackLabel@<X0>(BOOL *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(unsigned __int8 *)(v1 + 8);
  int v5 = *(unsigned __int8 *)(v1 + 9);
  outlined copy of Environment<CGFloat?>.Content(v3, v4, v5);
  specialized Environment.wrappedValue.getter(v3, v4 | (v5 << 8), (uint64_t)&v7);
  uint64_t result = outlined consume of Environment<CGFloat?>.Content(v3, v4, v5);
  *a1 = v7 < 3 || (v8 & 1) == 0;
  return result;
}

void type metadata accessor for LabelStyleWritingModifier<TitleAndIconLabelStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for LabelStyleWritingModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1881016C0()
{
  return lazy protocol witness table accessor for type StaticIf<ButtonContainerIsBorderedInput, ResolvedFallbackLabel, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>> and conformance <> _ConditionalContent<A, B>, (void (*)(uint64_t))type metadata accessor for _ConditionalContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type StaticIf<ButtonContainerIsBorderedInput, ResolvedFallbackLabel, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>>)
  {
    type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle);
    type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle);
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  if (!*a2)
  {
    type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>();
    type metadata accessor for LabelStyleWritingModifier<TitleAndIconLabelStyle>(255, a3, a4);
    unint64_t v7 = type metadata accessor for ModifiedContent();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle);
    lazy protocol witness table accessor for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>();
    lazy protocol witness table accessor for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (void (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void __swiftcall GroupedTabViewStyle.init()()
{
}

void static GroupedTabViewStyle._makeView<A>(value:inputs:)()
{
}

void static GroupedTabViewStyle._makeViewList<A>(value:inputs:)()
{
}

ValueMetadata *type metadata accessor for GroupedTabViewStyle()
{
  return &type metadata for GroupedTabViewStyle;
}

uint64_t AnyRowSource.init<A>(_:)()
{
  uint64_t v0 = type metadata accessor for RowSourceFormula();
  AGCreateWeakAttribute();
  return v0;
}

uint64_t AnyColumnSource.init<A>(_:)()
{
  uint64_t v0 = type metadata accessor for ColumnSourceFormula();
  AGCreateWeakAttribute();
  return v0;
}

uint64_t View.tableStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TableStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  int v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for TableStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static TableStyleConfiguration.RowsAlias._makeRows(content:inputs:)(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 112);
  long long v3 = *(_OWORD *)(a2 + 80);
  long long v43 = *(_OWORD *)(a2 + 96);
  long long v44 = v2;
  long long v4 = *(_OWORD *)(a2 + 112);
  long long v45 = *(_OWORD *)(a2 + 128);
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v39 = *(_OWORD *)(a2 + 32);
  long long v40 = v5;
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 80);
  long long v41 = *(_OWORD *)(a2 + 64);
  long long v42 = v8;
  long long v9 = *(_OWORD *)(a2 + 16);
  v38[0] = *(_OWORD *)a2;
  v38[1] = v9;
  long long v34 = v43;
  long long v35 = v4;
  long long v36 = *(_OWORD *)(a2 + 128);
  long long v30 = v39;
  long long v31 = v7;
  long long v32 = v41;
  long long v33 = v3;
  uint64_t v46 = *(void *)(a2 + 144);
  uint64_t v37 = *(void *)(a2 + 144);
  long long v28 = v38[0];
  long long v29 = v6;
  outlined retain of _TableRowInputs((uint64_t)v38);
  lazy protocol witness table accessor for type RowSourceInput and conformance RowSourceInput();
  PropertyList.subscript.getter();
  if (!(void)v18)
  {
    *(void *)&v15[0] = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v10 = *(void *)(v18 + 16);
  uint64_t v11 = *(void *)(v18 + 24);
  uint64_t v12 = *(void *)(v18 + 32);
  uint64_t v13 = *(void *)(v18 + 40);
  swift_retain();
  swift_release();
  *(void *)&v15[0] = v13;
  PropertyList.subscript.setter();
  if (!v10)
  {
LABEL_5:
    PreferencesOutputs.init()();
    long long v24 = v34;
    long long v25 = v35;
    long long v26 = v36;
    uint64_t v27 = v37;
    long long v20 = v30;
    long long v21 = v31;
    long long v22 = v32;
    long long v23 = v33;
    long long v18 = v28;
    long long v19 = v29;
    return outlined release of _TableRowInputs((uint64_t)&v18);
  }
  long long v24 = v34;
  long long v25 = v35;
  long long v26 = v36;
  long long v20 = v30;
  long long v21 = v31;
  long long v22 = v32;
  long long v23 = v33;
  long long v18 = v28;
  long long v19 = v29;
  v15[6] = v34;
  v15[7] = v35;
  v15[8] = v36;
  long long v15[2] = v30;
  uint64_t v15[3] = v31;
  v15[4] = v32;
  v15[5] = v33;
  uint64_t v27 = v37;
  uint64_t v16 = v37;
  v15[0] = v28;
  v15[1] = v29;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t))(v11 + 8))(v17, v10, v11, v12, v15, v10, v11);
  return outlined release of _TableRowInputs((uint64_t)&v18);
}

uint64_t protocol witness for static TableRowContent._tableRowCount(inputs:) in conformance TableStyleConfiguration.RowsAlias(uint64_t a1)
{
  return specialized static TableStyleConfiguration.RowsAlias._tableRowCount(inputs:)(a1);
}

uint64_t static TableStyleConfiguration.ColumnsAlias._makeContent(content:inputs:)(uint64_t a1, uint64_t *a2)
{
  int v2 = *((_DWORD *)a2 + 2);
  uint64_t v3 = a2[2];
  uint64_t v5 = a2[5];
  uint64_t v4 = a2[6];
  uint64_t v6 = a2[7];
  uint64_t v7 = a2[8];
  uint64_t v8 = a2[9];
  int v14 = *((_DWORD *)a2 + 20);
  uint64_t v15 = *a2;
  int v16 = v2;
  uint64_t v17 = v3;
  long long v18 = *(_OWORD *)(a2 + 3);
  uint64_t v19 = v5;
  lazy protocol witness table accessor for type ColumnSourceInput and conformance ColumnSourceInput();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  if (v26)
  {
    uint64_t v9 = v26[2];
    uint64_t v10 = v26[3];
    uint64_t v12 = v26[4];
    uint64_t v11 = v26[5];
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v25 = v11;
  PropertyList.subscript.setter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v9)
  {
    uint64_t v20 = v4;
    uint64_t v21 = v6;
    uint64_t v22 = v7;
    uint64_t v23 = v8;
    int v24 = v14;
    (*(void (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(v10 + 8))(&v26, v9, v10, v12, &v15, v9, v10);
  }
  else
  {
    PreferencesOutputs.init()();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static TableColumnContent._tableColumnCount(inputs:) in conformance TableStyleConfiguration.ColumnsAlias(uint64_t *a1)
{
  return specialized static TableStyleConfiguration.ColumnsAlias._tableColumnCount(inputs:)(a1);
}

uint64_t dispatch thunk of TableStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t outlined destroy of SelectionManagerBox<AnyHashable>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined destroy of Binding<AnyTableColumnCustomization>(uint64_t a1)
{
  _sSay7SwiftUI0A19UIAnySortComparatorVGMaTm_2(0, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization, MEMORY[0x1E4F41638]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for TableStyleConfiguration()
{
  return &type metadata for TableStyleConfiguration;
}

uint64_t sub_1881021AC()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for TableStyleConfiguration.ColumnsAlias()
{
  return &type metadata for TableStyleConfiguration.ColumnsAlias;
}

ValueMetadata *type metadata accessor for TableStyleConfiguration.RowsAlias()
{
  return &type metadata for TableStyleConfiguration.RowsAlias;
}

uint64_t getEnumTagSinglePayload for TableStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for TableStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1881025B0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t destroy for TableStyleConfiguration(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (!result) {
    goto LABEL_8;
  }
  swift_release();
  swift_release();
  uint64_t result = a1 + 16;
  int v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 == 2)
  {
LABEL_7:
    uint64_t result = __swift_destroy_boxed_opaque_existential_1(result);
    goto LABEL_8;
  }
  if (v3 == 1)
  {
    if (!*(void *)(a1 + 40)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (!*(unsigned char *)(a1 + 56)) {
    uint64_t result = swift_bridgeObjectRelease();
  }
LABEL_8:
  if (*(void *)(a1 + 72))
  {
    swift_release();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 96))
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for TableStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    long long v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    uint64_t v11 = *(void *)(a2 + 72);
    if (v11) {
      goto LABEL_15;
    }
    goto LABEL_7;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  unsigned int v5 = (_OWORD *)(a1 + 16);
  uint64_t v6 = (void *)(a2 + 16);
  int v7 = *(unsigned __int8 *)(a2 + 56);
  swift_retain();
  swift_retain();
  if (v7 == 2)
  {
    long long v14 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 16, a2 + 16);
    char v15 = 2;
  }
  else
  {
    if (v7 != 1)
    {
      *(void *)(a1 + 16) = *v6;
      *(unsigned char *)(a1 + 56) = 0;
      swift_bridgeObjectRetain();
      uint64_t v11 = *(void *)(a2 + 72);
      if (v11) {
        goto LABEL_15;
      }
      goto LABEL_7;
    }
    uint64_t v8 = *(void *)(a2 + 40);
    if (v8)
    {
      uint64_t v9 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v8;
      *(void *)(a1 + 48) = v9;
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 16, a2 + 16);
    }
    else
    {
      long long v16 = *(_OWORD *)(a2 + 32);
      *unsigned int v5 = *(_OWORD *)v6;
      *(_OWORD *)(a1 + 32) = v16;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
    }
    char v15 = 1;
  }
  *(unsigned char *)(a1 + 56) = v15;
  uint64_t v11 = *(void *)(a2 + 72);
  if (v11)
  {
LABEL_15:
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v11;
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v12 = *(void *)(a2 + 96);
    if (v12) {
      goto LABEL_16;
    }
    goto LABEL_8;
  }
LABEL_7:
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v12 = *(void *)(a2 + 96);
  if (v12)
  {
LABEL_16:
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = v12;
    uint64_t v18 = *(void *)(a2 + 104);
    uint64_t v17 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + 112) = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }
LABEL_8:
  long long v13 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v13;
  return a1;
}

uint64_t assignWithCopy for TableStyleConfiguration(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8))
  {
    if (!v4)
    {
      outlined destroy of SelectionManagerBox<AnyHashable>(a1, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
      long long v11 = a2[1];
      long long v10 = a2[2];
      long long v12 = *a2;
      *(_OWORD *)(a1 + 41) = *(long long *)((char *)a2 + 41);
      *(_OWORD *)(a1 + 16) = v11;
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)a1 = v12;
      goto LABEL_18;
    }
    *(void *)a1 = *(void *)a2;
    swift_retain();
    swift_release();
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    swift_retain();
    swift_release();
    if ((long long *)a1 == a2) {
      goto LABEL_18;
    }
    uint64_t v5 = a1 + 16;
    uint64_t v6 = a2 + 1;
    outlined destroy of SelectionManagerBox<AnyHashable>(a1 + 16, (uint64_t (*)(void))type metadata accessor for SelectionManagerBox<AnyHashable>);
    int v7 = *((unsigned __int8 *)a2 + 56);
    if (v7 != 2)
    {
      if (v7 == 1)
      {
LABEL_6:
        uint64_t v8 = *((void *)a2 + 5);
        if (v8)
        {
          *(void *)(a1 + 40) = v8;
          *(void *)(a1 + 48) = *((void *)a2 + 6);
          (**(void (***)(uint64_t, long long *))(v8 - 8))(v5, v6);
        }
        else
        {
          long long v18 = *v6;
          long long v19 = v6[1];
          *(void *)(v5 + 32) = *((void *)v6 + 4);
          *(_OWORD *)uint64_t v5 = v18;
          *(_OWORD *)(v5 + 16) = v19;
        }
        char v14 = 1;
        goto LABEL_17;
      }
LABEL_11:
      *(void *)(a1 + 16) = *(void *)v6;
      *(unsigned char *)(a1 + 56) = 0;
      swift_bridgeObjectRetain();
      goto LABEL_18;
    }
  }
  else
  {
    if (!v4)
    {
      long long v15 = *a2;
      long long v16 = a2[1];
      long long v17 = a2[2];
      *(_OWORD *)(a1 + 41) = *(long long *)((char *)a2 + 41);
      *(_OWORD *)(a1 + 16) = v16;
      *(_OWORD *)(a1 + 32) = v17;
      *(_OWORD *)a1 = v15;
      goto LABEL_18;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    uint64_t v5 = a1 + 16;
    uint64_t v6 = a2 + 1;
    int v9 = *((unsigned __int8 *)a2 + 56);
    swift_retain();
    swift_retain();
    if (v9 != 2)
    {
      if (v9 == 1) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  uint64_t v13 = *((void *)a2 + 5);
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  (**(void (***)(uint64_t, long long *))(v13 - 8))(v5, v6);
  char v14 = 2;
LABEL_17:
  *(unsigned char *)(a1 + 56) = v14;
LABEL_18:
  uint64_t v20 = (_OWORD *)(a1 + 64);
  uint64_t v21 = a2 + 4;
  uint64_t v22 = *((void *)a2 + 9);
  if (*(void *)(a1 + 72))
  {
    if (v22)
    {
      *(void *)(a1 + 64) = *((void *)a2 + 8);
      swift_retain();
      swift_release();
      *(void *)(a1 + 72) = *((void *)a2 + 9);
      swift_retain();
      swift_release();
      *(void *)(a1 + 80) = *((void *)a2 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of SelectionManagerBox<AnyHashable>(a1 + 64, (uint64_t (*)(void))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
      uint64_t v23 = *((void *)a2 + 10);
      *uint64_t v20 = *v21;
      *(void *)(a1 + 80) = v23;
    }
  }
  else if (v22)
  {
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v24 = *v21;
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *uint64_t v20 = v24;
  }
  uint64_t v25 = (_OWORD *)(a1 + 88);
  long long v26 = (long long *)((char *)a2 + 88);
  uint64_t v27 = *((void *)a2 + 12);
  if (*(void *)(a1 + 96))
  {
    if (v27)
    {
      *(void *)(a1 + 88) = *((void *)a2 + 11);
      swift_retain();
      swift_release();
      *(void *)(a1 + 96) = *((void *)a2 + 12);
      swift_retain();
      swift_release();
      *(void *)(a1 + 104) = *((void *)a2 + 13);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *((void *)a2 + 14);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Binding<AnyTableColumnCustomization>(a1 + 88);
      long long v28 = *(long long *)((char *)a2 + 104);
      *uint64_t v25 = *v26;
      *(_OWORD *)(a1 + 104) = v28;
    }
  }
  else if (v27)
  {
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    *(void *)(a1 + 96) = *((void *)a2 + 12);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v29 = *(long long *)((char *)a2 + 104);
    *uint64_t v25 = *v26;
    *(_OWORD *)(a1 + 104) = v29;
  }
  return a1;
}

uint64_t assignWithTake for TableStyleConfiguration(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8)) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    outlined destroy of SelectionManagerBox<AnyHashable>(a1, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
LABEL_6:
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_7;
  }
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = v4;
  swift_release();
  if (a1 == a2) {
    goto LABEL_8;
  }
  outlined destroy of SelectionManagerBox<AnyHashable>(a1 + 16, (uint64_t (*)(void))type metadata accessor for SelectionManagerBox<AnyHashable>);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
LABEL_7:
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
LABEL_8:
  if (*(void *)(a1 + 72))
  {
    if (*(void *)(a2 + 72))
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_release();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_release();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of SelectionManagerBox<AnyHashable>(a1 + 64, (uint64_t (*)(void))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
LABEL_13:
  if (!*(void *)(a1 + 96))
  {
LABEL_17:
    long long v7 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v7;
    return a1;
  }
  if (!*(void *)(a2 + 96))
  {
    outlined destroy of Binding<AnyTableColumnCustomization>(a1 + 88);
    goto LABEL_17;
  }
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ResolvedTableStyle()
{
  return &type metadata for ResolvedTableStyle;
}

ValueMetadata *type metadata accessor for ColumnSourceInput()
{
  return &type metadata for ColumnSourceInput;
}

ValueMetadata *type metadata accessor for RowSourceInput()
{
  return &type metadata for RowSourceInput;
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedTableStyle@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of TableStyleConfiguration(v1, a1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedTableStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedTableStyle and conformance ResolvedTableStyle();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedTableStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedTableStyle and conformance ResolvedTableStyle();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedTableStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance ResolvedTableStyle@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ResolvedTableStyle(v1, a1);
}

uint64_t TableStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  long long v12 = (char *)&v15 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 24))(a1, v4, v3, v10);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v13)(v12, AssociatedTypeWitness);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TableStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TableStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance TableStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t static RowSourceFormula.makeRows(content:source:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x1E4F4E7A0])
  {
    return PreferencesOutputs.init()();
  }
  else
  {
    _GraphValue.init(_:)();
    long long v11 = *(_OWORD *)(a5 + 112);
    v15[6] = *(_OWORD *)(a5 + 96);
    v15[7] = v11;
    v15[8] = *(_OWORD *)(a5 + 128);
    uint64_t v16 = *(void *)(a5 + 144);
    long long v12 = *(_OWORD *)(a5 + 48);
    long long v15[2] = *(_OWORD *)(a5 + 32);
    uint64_t v15[3] = v12;
    long long v13 = *(_OWORD *)(a5 + 80);
    v15[4] = *(_OWORD *)(a5 + 64);
    v15[5] = v13;
    long long v14 = *(_OWORD *)(a5 + 16);
    v15[0] = *(_OWORD *)a5;
    v15[1] = v14;
    return (*(uint64_t (**)(unsigned char *, _OWORD *, uint64_t, uint64_t))(a7 + 48))(v17, v15, a6, a7);
  }
}

uint64_t static RowSourceFormula.tableRowCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 144);
  long long v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return (*(uint64_t (**)(_OWORD *))(a3 + 56))(v8);
}

uint64_t static RowSourceFormula.containsOutlineSymbol(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 144);
  long long v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return (*(uint64_t (**)(_OWORD *))(a3 + 64))(v8) & 1;
}

uint64_t protocol witness for static AnyRowSourceFormula.makeRows(content:source:inputs:) in conformance RowSourceFormula<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static RowSourceFormula.makeRows(content:source:inputs:)(a1, a2, a3, a4, a5, *(void *)(a6 + 16), *(void *)(a6 + 24));
}

uint64_t protocol witness for static AnyRowSourceFormula.tableRowCount(inputs:) in conformance RowSourceFormula<A>(uint64_t a1, uint64_t a2)
{
  return static RowSourceFormula.tableRowCount(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t protocol witness for static AnyRowSourceFormula.containsOutlineSymbol(inputs:) in conformance RowSourceFormula<A>(uint64_t a1, uint64_t a2)
{
  return static RowSourceFormula.containsOutlineSymbol(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

unint64_t lazy protocol witness table accessor for type TableStyleModifier<AutomaticTableStyle> and conformance TableStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TableStyleModifier<AutomaticTableStyle> and conformance TableStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type TableStyleModifier<AutomaticTableStyle> and conformance TableStyleModifier<A>)
  {
    type metadata accessor for TableStyleModifier<AutomaticTableStyle>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableStyleModifier<AutomaticTableStyle> and conformance TableStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for TableStyleModifier<AutomaticTableStyle>()
{
  if (!lazy cache variable for type metadata for TableStyleModifier<AutomaticTableStyle>)
  {
    lazy protocol witness table accessor for type AutomaticTableStyle and conformance AutomaticTableStyle();
    unint64_t v0 = type metadata accessor for TableStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TableStyleModifier<AutomaticTableStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticTableStyle and conformance AutomaticTableStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomaticTableStyle and conformance AutomaticTableStyle;
  if (!lazy protocol witness table cache variable for type AutomaticTableStyle and conformance AutomaticTableStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticTableStyle and conformance AutomaticTableStyle);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in TableStyleModifier<A>()
{
  return &protocol witness table for TableStyleModifier<A>;
}

uint64_t base witness table accessor for MultiViewModifier in TableStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in TableStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in TableStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedTableStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of ResolvedTableStyle(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t static ColumnSourceFormula.makeColumns(content:source:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x1E4F4E7A0])
  {
    return PreferencesOutputs.init()();
  }
  else
  {
    int v11 = *((_DWORD *)a5 + 20);
    uint64_t v12 = a5[2];
    int v13 = *((_DWORD *)a5 + 2);
    uint64_t v14 = *a5;
    _GraphValue.init(_:)();
    uint64_t v16 = v14;
    int v17 = v13;
    uint64_t v18 = v12;
    long long v15 = *(_OWORD *)(a5 + 5);
    long long v19 = *(_OWORD *)(a5 + 3);
    long long v20 = v15;
    long long v21 = *(_OWORD *)(a5 + 7);
    uint64_t v22 = a5[9];
    int v23 = v11;
    return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(a7 + 64))(v24, &v16, a6, a7);
  }
}

uint64_t static ColumnSourceFormula.tableColumnCount(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  int v5 = *((_DWORD *)a1 + 20);
  uint64_t v8 = *a1;
  int v9 = v3;
  uint64_t v10 = v4;
  long long v6 = *(_OWORD *)(a1 + 5);
  long long v11 = *(_OWORD *)(a1 + 3);
  long long v12 = v6;
  long long v13 = *(_OWORD *)(a1 + 7);
  uint64_t v14 = a1[9];
  int v15 = v5;
  return (*(uint64_t (**)(uint64_t *))(a3 + 72))(&v8);
}

uint64_t protocol witness for static AnyColumnSourceFormula.makeColumns(content:source:inputs:) in conformance ColumnSourceFormula<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  return static ColumnSourceFormula.makeColumns(content:source:inputs:)(a1, a2, a3, a4, a5, *(void *)(a6 + 16), *(void *)(a6 + 24));
}

uint64_t protocol witness for static AnyColumnSourceFormula.tableColumnCount(inputs:) in conformance ColumnSourceFormula<A>(uint64_t *a1, uint64_t a2)
{
  return static ColumnSourceFormula.tableColumnCount(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t specialized static TableStyleConfiguration.ColumnsAlias._tableColumnCount(inputs:)(uint64_t *a1)
{
  int v1 = *((_DWORD *)a1 + 2);
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[5];
  uint64_t v3 = a1[6];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[8];
  uint64_t v7 = a1[9];
  int v8 = *((_DWORD *)a1 + 20);
  uint64_t v14 = *a1;
  int v15 = v1;
  uint64_t v16 = v2;
  long long v17 = *(_OWORD *)(a1 + 3);
  uint64_t v18 = v4;
  lazy protocol witness table accessor for type ColumnSourceInput and conformance ColumnSourceInput();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  if (v25)
  {
    uint64_t v9 = v25[5];
    uint64_t v10 = v25[2];
    uint64_t v11 = v25[3];
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v24 = v9;
  PropertyList.subscript.setter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v10)
  {
    uint64_t v19 = v3;
    uint64_t v20 = v5;
    uint64_t v21 = v6;
    uint64_t v22 = v7;
    int v23 = v8;
    uint64_t v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(&v14, v10, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return 0;
  }
  return v12;
}

uint64_t specialized static TableStyleConfiguration.RowsAlias._tableRowCount(inputs:)(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 112);
  long long v2 = *(_OWORD *)(a1 + 80);
  long long v41 = *(_OWORD *)(a1 + 96);
  long long v42 = v1;
  long long v3 = *(_OWORD *)(a1 + 112);
  long long v43 = *(_OWORD *)(a1 + 128);
  long long v4 = *(_OWORD *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v37 = *(_OWORD *)(a1 + 32);
  long long v38 = v4;
  long long v6 = *(_OWORD *)(a1 + 48);
  long long v7 = *(_OWORD *)(a1 + 80);
  long long v39 = *(_OWORD *)(a1 + 64);
  long long v40 = v7;
  long long v8 = *(_OWORD *)(a1 + 16);
  v36[0] = *(_OWORD *)a1;
  v36[1] = v8;
  long long v32 = v41;
  long long v33 = v3;
  long long v34 = *(_OWORD *)(a1 + 128);
  long long v28 = v37;
  long long v29 = v6;
  long long v30 = v39;
  long long v31 = v2;
  uint64_t v44 = *(void *)(a1 + 144);
  uint64_t v35 = *(void *)(a1 + 144);
  long long v26 = v36[0];
  long long v27 = v5;
  outlined retain of _TableRowInputs((uint64_t)v36);
  lazy protocol witness table accessor for type RowSourceInput and conformance RowSourceInput();
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    *(void *)&v14[0] = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v16 + 40);
  uint64_t v10 = *(void *)(v16 + 16);
  uint64_t v11 = *(void *)(v16 + 24);
  swift_retain();
  swift_release();
  *(void *)&v14[0] = v9;
  PropertyList.subscript.setter();
  if (!v10)
  {
LABEL_5:
    long long v22 = v32;
    long long v23 = v33;
    long long v24 = v34;
    uint64_t v25 = v35;
    long long v18 = v28;
    long long v19 = v29;
    long long v20 = v30;
    long long v21 = v31;
    long long v16 = v26;
    long long v17 = v27;
    outlined release of _TableRowInputs((uint64_t)&v16);
    return 0;
  }
  long long v22 = v32;
  long long v23 = v33;
  long long v24 = v34;
  long long v18 = v28;
  long long v19 = v29;
  long long v20 = v30;
  long long v21 = v31;
  long long v16 = v26;
  long long v17 = v27;
  void v14[6] = v32;
  v14[7] = v33;
  v14[8] = v34;
  void v14[2] = v28;
  v14[3] = v29;
  v14[4] = v30;
  long long v14[5] = v31;
  uint64_t v25 = v35;
  uint64_t v15 = v35;
  v14[0] = v26;
  v14[1] = v27;
  uint64_t v12 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v11 + 16))(v14, v10, v11);
  outlined release of _TableRowInputs((uint64_t)&v16);
  return v12;
}

uint64_t specialized static TableStyleConfiguration.RowsAlias._containsOutlineSymbol(inputs:)(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 112);
  long long v2 = *(_OWORD *)(a1 + 80);
  long long v41 = *(_OWORD *)(a1 + 96);
  long long v42 = v1;
  long long v3 = *(_OWORD *)(a1 + 112);
  long long v43 = *(_OWORD *)(a1 + 128);
  long long v4 = *(_OWORD *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v37 = *(_OWORD *)(a1 + 32);
  long long v38 = v4;
  long long v6 = *(_OWORD *)(a1 + 48);
  long long v7 = *(_OWORD *)(a1 + 80);
  long long v39 = *(_OWORD *)(a1 + 64);
  long long v40 = v7;
  long long v8 = *(_OWORD *)(a1 + 16);
  v36[0] = *(_OWORD *)a1;
  v36[1] = v8;
  long long v32 = v41;
  long long v33 = v3;
  long long v34 = *(_OWORD *)(a1 + 128);
  long long v28 = v37;
  long long v29 = v6;
  long long v30 = v39;
  long long v31 = v2;
  uint64_t v44 = *(void *)(a1 + 144);
  uint64_t v35 = *(void *)(a1 + 144);
  long long v26 = v36[0];
  long long v27 = v5;
  outlined retain of _TableRowInputs((uint64_t)v36);
  lazy protocol witness table accessor for type RowSourceInput and conformance RowSourceInput();
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    *(void *)&v14[0] = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(v16 + 40);
  uint64_t v10 = *(void *)(v16 + 16);
  uint64_t v11 = *(void *)(v16 + 24);
  swift_retain();
  swift_release();
  *(void *)&v14[0] = v9;
  PropertyList.subscript.setter();
  if (!v10)
  {
LABEL_5:
    long long v22 = v32;
    long long v23 = v33;
    long long v24 = v34;
    uint64_t v25 = v35;
    long long v18 = v28;
    long long v19 = v29;
    long long v20 = v30;
    long long v21 = v31;
    long long v16 = v26;
    long long v17 = v27;
    outlined release of _TableRowInputs((uint64_t)&v16);
    char v12 = 0;
    return v12 & 1;
  }
  long long v22 = v32;
  long long v23 = v33;
  long long v24 = v34;
  long long v18 = v28;
  long long v19 = v29;
  long long v20 = v30;
  long long v21 = v31;
  long long v16 = v26;
  long long v17 = v27;
  void v14[6] = v32;
  v14[7] = v33;
  v14[8] = v34;
  void v14[2] = v28;
  v14[3] = v29;
  v14[4] = v30;
  long long v14[5] = v31;
  uint64_t v25 = v35;
  uint64_t v15 = v35;
  v14[0] = v26;
  v14[1] = v27;
  char v12 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v11 + 24))(v14, v10, v11);
  outlined release of _TableRowInputs((uint64_t)&v16);
  return v12 & 1;
}

uint64_t outlined init with copy of TableStyleConfiguration(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t type metadata accessor for ColumnSourceFormula()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for RowSourceFormula()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for AnyRowSource()
{
  return &type metadata for AnyRowSource;
}

ValueMetadata *type metadata accessor for AnyColumnSource()
{
  return &type metadata for AnyColumnSource;
}

uint64_t sub_188103F30()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

void View.modifierKeyAlternate<A>(_:_:)()
{
}

uint64_t sub_188103FB8()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for ModifierKeyAlternateModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for ModifierKeyAlternateModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for ModifierKeyAlternateModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 8) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x188104470);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 8] & ~v8;
        long long v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in ModifierKeyAlternateModifier<A>()
{
  return &protocol witness table for ModifierKeyAlternateModifier<A>;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ModifierKeyAlternateModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for AccessibilityAction.matches<A>(_:) in conformance AccessibilitySetValueAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return AccessibilityAction.matches<A>(_:)(a1, a4, a2, a5);
}

uint64_t AccessibilityAction.matches<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = a4;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  long long v39 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v41 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v44 = (char *)&v38 - v11;
  uint64_t v45 = *(void *)(v9 - 8);
  uint64_t v12 = v45;
  MEMORY[0x1F4188790](v13);
  uint64_t v47 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  unint64_t v17 = (char *)&v38 - v16;
  MEMORY[0x1F4188790](v18);
  long long v20 = (char *)&v38 - v19;
  double v22 = MEMORY[0x1F4188790](v21);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))((char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3, v22);
  int v25 = swift_dynamicCast();
  long long v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
  v26(v20, v25 ^ 1u, 1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v17, v46, a2);
  v26(v17, 0, 1, a2);
  uint64_t v42 = TupleTypeMetadata2;
  uint64_t v27 = *(int *)(TupleTypeMetadata2 + 48);
  long long v28 = v44;
  long long v29 = &v44[v27];
  uint64_t v46 = v12;
  long long v30 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v30(v44, v20, v9);
  v30(v29, v17, v9);
  uint64_t v43 = v7;
  long long v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v31(v28, 1, a2) != 1)
  {
    v30(v47, v28, v9);
    if (v31(v29, 1, a2) != 1)
    {
      uint64_t v34 = v43;
      uint64_t v35 = v39;
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v39, v29, a2);
      char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      long long v36 = *(void (**)(char *, uint64_t))(v34 + 8);
      v36(v35, a2);
      long long v32 = *(void (**)(char *, uint64_t))(v45 + 8);
      v32(v17, v9);
      v36(v47, a2);
      v32(v28, v9);
      goto LABEL_8;
    }
    long long v32 = *(void (**)(char *, uint64_t))(v45 + 8);
    v32(v17, v9);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v47, a2);
    goto LABEL_6;
  }
  long long v32 = *(void (**)(char *, uint64_t))(v45 + 8);
  v32(v17, v9);
  if (v31(v29, 1, a2) != 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v41 + 8))(v28, v42);
    char v33 = 0;
    goto LABEL_8;
  }
  v32(v28, v9);
  char v33 = 1;
LABEL_8:
  v32(v20, v9);
  return v33 & 1;
}

uint64_t AccessibilityActionResult.init(BOOLeanLiteral:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result) {
    char v2 = 2;
  }
  else {
    char v2 = 1;
  }
  *a2 = v2;
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByBooleanLiteral.BooleanLiteralType : _ExpressibleByBuiltinBooleanLiteral in AccessibilityActionResult()
{
  return MEMORY[0x1E4FBB3C0];
}

uint64_t protocol witness for AccessibilityAction.impliedRole(for:) in conformance AccessibilityScrollAction()
{
  return 0;
}

uint64_t specialized Sequence.reversed()(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0) {
    goto LABEL_39;
  }
  uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  uint64_t v18 = v1 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v2 & 0x4000000000000000) == 0)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    swift_bridgeObjectRelease();
    unint64_t v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    swift_retain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v17 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1) {
      __break(1u);
    }
    unint64_t v4 = v17 >> 1;
LABEL_6:
    if ((unint64_t)(v3 + 1) < 3) {
      return v2;
    }
    unint64_t v5 = 0;
    while (1)
    {
      unint64_t v7 = v5 + 1;
      unint64_t v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1)) {
        break;
      }
      if (v5 != v1)
      {
        uint64_t v8 = v18;
        if ((v18 & 0xC000000000000001) != 0)
        {
          uint64_t v11 = MEMORY[0x18C117680](v5, v18);
          id v12 = (id)MEMORY[0x18C117680](v3 - (v5 + 1), v18);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0) {
            goto LABEL_33;
          }
          unint64_t v9 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v5 >= v9) {
            goto LABEL_34;
          }
          id v10 = *(id *)(v18 + 8 * v5 + 32);
          if ((v1 & 0x8000000000000000) != 0) {
            goto LABEL_35;
          }
          if (v1 >= v9) {
            goto LABEL_37;
          }
          uint64_t v11 = (uint64_t)v10;
          id v12 = *(id *)(v18 + 32 + 8 * v1);
        }
        id v13 = v12;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || v18 < 0
          || (v18 & 0x4000000000000000) != 0)
        {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
          uint64_t v18 = v8;
        }
        uint64_t v14 = (v8 & 0xFFFFFFFFFFFFFF8) + 8 * v5;

        *(void *)(v14 + 32) = v13;
        specialized Array._endMutation()();
        uint64_t v15 = v18;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || v18 < 0
          || (v18 & 0x4000000000000000) != 0)
        {
          uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
          uint64_t v18 = v15;
        }
        if ((v1 & 0x8000000000000000) != 0) {
          goto LABEL_36;
        }
        if (v1 >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_38;
        }
        uint64_t v6 = (v15 & 0xFFFFFFFFFFFFFF8) + 8 * v1;

        *(void *)(v6 + 32) = v11;
        specialized Array._endMutation()();
      }
      unint64_t v5 = v7;
      if (v4 == v7) {
        return v18;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    uint64_t v2 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v1);
    uint64_t v18 = v2;
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
  }
}

uint64_t specialized Sequence.reversed()(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v9 = *(void *)(v8 + 16);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v9 < 2) {
    return v8;
  }
  unint64_t v11 = 0;
  unint64_t v12 = v9 >> 1;
  unint64_t v13 = v9 - 1;
  uint64_t v14 = 56 * v9 - 24;
  uint64_t v15 = 80;
  unint64_t v31 = v9 >> 1;
  while (1)
  {
    if (v11 == v13) {
      goto LABEL_4;
    }
    unint64_t v16 = *(void *)(v8 + 16);
    if (v11 >= v16) {
      break;
    }
    if (v13 >= v16) {
      goto LABEL_13;
    }
    uint64_t v18 = *(void *)(v8 + v15 - 48);
    uint64_t v17 = *(void *)(v8 + v15 - 40);
    uint64_t v19 = *(void *)(v8 + v15 - 24);
    uint64_t v44 = *(void *)(v8 + v15 - 32);
    uint64_t v20 = *(void *)(v8 + v15);
    uint64_t v33 = *(void *)(v8 + v15 - 8);
    uint64_t v34 = *(void *)(v8 + v15 - 16);
    uint64_t v21 = (void *)(v8 + v14);
    uint64_t v42 = v8;
    uint64_t v22 = *(void *)(v8 + v14);
    uint64_t v23 = v21[1];
    uint64_t v24 = v21[3];
    uint64_t v46 = v21[2];
    uint64_t v38 = v21[5];
    uint64_t v39 = v21[4];
    uint64_t v45 = v21[6];
    uint64_t v36 = v17;
    swift_retain();
    uint64_t v37 = v18;
    swift_retain();
    uint64_t v35 = v19;
    outlined copy of Text.LineStyle?(v44, v19);
    uint64_t v41 = v23;
    swift_retain();
    uint64_t v32 = v20;
    swift_retain();
    uint64_t v43 = v22;
    unint64_t v8 = v42;
    swift_retain();
    uint64_t v40 = v24;
    outlined copy of Text.LineStyle?(v46, v24);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v8 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v42);
    }
    int v25 = (void *)(v8 + v15);
    uint64_t v26 = *(void *)(v8 + v15 - 32);
    uint64_t v27 = *(void *)(v8 + v15 - 24);
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(v26, v27);
    uint64_t result = swift_release();
    *(v25 - 6) = v43;
    *(v25 - 5) = v41;
    *(v25 - 4) = v46;
    *(v25 - 3) = v40;
    *(v25 - 2) = v39;
    *(v25 - 1) = v38;
    *int v25 = v45;
    if (v13 >= *(void *)(v8 + 16)) {
      goto LABEL_14;
    }
    long long v28 = (void *)(v8 + v14);
    uint64_t v29 = *(void *)(v8 + v14 + 16);
    uint64_t v30 = *(void *)(v8 + v14 + 24);
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(v29, v30);
    uint64_t result = swift_release();
    *long long v28 = v37;
    v28[1] = v36;
    v28[2] = v44;
    v28[3] = v35;
    v28[4] = v34;
    v28[5] = v33;
    unint64_t v12 = v31;
    v28[6] = v32;
LABEL_4:
    ++v11;
    v15 += 56;
    --v13;
    v14 -= 56;
    if (v12 == v11) {
      return v8;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.reversed()(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(void *)(result + 16);
  if (v2 < 2) {
    return v1;
  }
  unint64_t v3 = 0;
  unint64_t v4 = v2 >> 1;
  unint64_t v5 = v2 - 1;
  uint64_t v6 = 48 * v2 - 16;
  for (uint64_t i = 32; ; i += 48)
  {
    if (v3 == v5) {
      goto LABEL_4;
    }
    unint64_t v8 = *(void *)(v1 + 16);
    if (v3 >= v8) {
      break;
    }
    uint64_t result = outlined init with copy of AnyAccessibilityAction(v1 + i, (uint64_t)v10);
    if (v5 >= v8) {
      goto LABEL_14;
    }
    outlined init with copy of AnyAccessibilityAction(v1 + v6, (uint64_t)v9);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      uint64_t v1 = result;
    }
    if (v3 >= *(void *)(v1 + 16)) {
      goto LABEL_15;
    }
    uint64_t result = outlined assign with take of AnyAccessibilityAction(v9, v1 + i);
    if (v5 >= *(void *)(v1 + 16)) {
      goto LABEL_16;
    }
    uint64_t result = outlined assign with take of AnyAccessibilityAction(v10, v1 + v6);
LABEL_4:
    ++v3;
    --v5;
    v6 -= 48;
    if (v4 == v3) {
      return v1;
    }
  }
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t AnyAccessibilityAction.matches<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 80))(a1, a2, a3, v7, v8) & 1;
}

uint64_t specialized AccessibilityNode.sendAction<A>(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v19)(char *__return_ptr, void *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void v27[4];
  char v28;
  id v29[3];
  uint64_t v30;
  uint64_t v31;

  uint64_t v5 = v4;
  *(_OWORD *)uint64_t v29 = *(_OWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  if ((EnvironmentValues.isEnabled.getter() & 1) == 0) {
    return 0;
  }
  if (a4 != 1)
  {
    AccessibilityNode.attachment.getter((uint64_t *)v29);

    uint64_t v20 = swift_bridgeObjectRetain();
    uint64_t v9 = specialized AccessibilityProperties.subscript.getter(v20);
    uint64_t result = swift_bridgeObjectRelease_n();
    uint64_t v11 = *(void *)(v9 + 16);
    if (v11) {
      goto LABEL_4;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  outlined copy of AccessibilityActionKind.ActionKind(a1, a2, a3, 1uLL);
  AccessibilityNode.attachment.getter((uint64_t *)v29);

  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = specialized AccessibilityProperties.subscript.getter(v7);
  swift_bridgeObjectRelease_n();
  uint64_t v9 = specialized Sequence.reversed()(v8);
  uint64_t result = outlined consume of AccessibilityActionKind.ActionKind(a1, a2, a3, 1uLL);
  uint64_t v11 = *(void *)(v9 + 16);
  if (!v11) {
    goto LABEL_15;
  }
LABEL_4:
  uint64_t v12 = 0;
  char v13 = 0;
  uint64_t v14 = v9 + 32;
  uint64_t v22 = v5;
LABEL_5:
  uint64_t v23 = v13;
  uint64_t v15 = v14 + 48 * v12;
  do
  {
    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      return result;
    }
    outlined init with copy of AnyAccessibilityAction(v15, (uint64_t)v29);
    v27[0] = a1;
    v27[1] = a2;
    v27[2] = a3;
    v27[3] = a4;
    uint64_t v17 = a4;
    uint64_t v18 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    uint64_t v19 = *(void (**)(char *__return_ptr, void *))(v18 + 40);
    lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
    v19(&v28, v27);
    uint64_t result = outlined destroy of AnyAccessibilityAction((uint64_t)v29);
    if (v28 == 2) {
      goto LABEL_13;
    }
    if (v28 == 3)
    {
      char v13 = 1;
      ++v12;
      a4 = v17;
      uint64_t v14 = v9 + 32;
      if (v16 != v11) {
        goto LABEL_5;
      }
LABEL_13:
      swift_bridgeObjectRelease();
LABEL_19:
      uint64_t v21 = 1;
      if (MEMORY[0x18C119DF0](v22 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost))
      {
        swift_getObjectType();
        v29[0] = 0;
        LOBYTE(v29[1]) = 1;
        ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
        swift_unknownObjectRelease();
      }
      return v21;
    }
    if ((v28 & 1) == 0) {
      goto LABEL_15;
    }
    ++v12;
    v15 += 48;
    a4 = v17;
  }
  while (v16 != v11);
  swift_bridgeObjectRelease();
  if (v23) {
    goto LABEL_19;
  }
  return 0;
}

uint64_t specialized AccessibilityNode.sendAction<A>(_:value:)(char a1)
{
  void (*v14)(char *__return_ptr, unint64_t, char *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  id v21[3];
  uint64_t v22;
  uint64_t v23;

  *(_OWORD *)uint64_t v21 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  if (EnvironmentValues.isEnabled.getter())
  {
    AccessibilityNode.attachment.getter((uint64_t *)v21);

    uint64_t v3 = swift_bridgeObjectRetain();
    uint64_t v4 = specialized AccessibilityProperties.subscript.getter(v3);
    uint64_t result = swift_bridgeObjectRelease_n();
    uint64_t v6 = *(void *)(v4 + 16);
    if (v6)
    {
      uint64_t v7 = 0;
      char v8 = 0;
      uint64_t v9 = v4 + 32;
      uint64_t v17 = v4 + 32;
LABEL_4:
      uint64_t v18 = v8;
      uint64_t v10 = v9 + 48 * v7;
      uint64_t v11 = v7;
      do
      {
        uint64_t v7 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
          return result;
        }
        outlined init with copy of AnyAccessibilityAction(v10, (uint64_t)v21);
        uint64_t v19 = a1;
        uint64_t v13 = v22;
        uint64_t v12 = v23;
        __swift_project_boxed_opaque_existential_1(v21, v22);
        uint64_t v14 = *(void (**)(char *__return_ptr, unint64_t, char *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v12 + 40);
        uint64_t v15 = lazy protocol witness table accessor for type AccessibilityScrollAction and conformance AccessibilityScrollAction();
        v14(&v20, v15, &v19, &type metadata for AccessibilityScrollAction, v15, v13, v12);
        uint64_t result = outlined destroy of AnyAccessibilityAction((uint64_t)v21);
        if (v20 == 2) {
          goto LABEL_12;
        }
        if (v20 == 3)
        {
          char v8 = 1;
          uint64_t v9 = v17;
          if (v7 != v6) {
            goto LABEL_4;
          }
LABEL_12:
          swift_bridgeObjectRelease();
LABEL_17:
          uint64_t v16 = 1;
          if (MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost))
          {
            swift_getObjectType();
            v21[0] = 0;
            LOBYTE(v21[1]) = 1;
            ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
            swift_unknownObjectRelease();
          }
          return v16;
        }
        if ((v20 & 1) == 0) {
          goto LABEL_13;
        }
        ++v11;
        v10 += 48;
      }
      while (v7 != v6);
      swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_17;
      }
    }
    else
    {
LABEL_13:
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

uint64_t specialized AccessibilityNode.sendAction<A>(_:value:)(char a1, char a2)
{
  void (*v16)(char *__return_ptr, char *, char *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v22;
  char v23;
  char v24;
  id v25[3];
  uint64_t v26;
  uint64_t v27;

  *(_OWORD *)int v25 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  if (EnvironmentValues.isEnabled.getter())
  {
    AccessibilityNode.attachment.getter((uint64_t *)v25);

    uint64_t v4 = swift_bridgeObjectRetain();
    uint64_t v5 = specialized AccessibilityProperties.subscript.getter(v4);
    uint64_t result = swift_bridgeObjectRelease_n();
    uint64_t v7 = *(void *)(v5 + 16);
    if (v7)
    {
      uint64_t v8 = 0;
      char v9 = 0;
      char v10 = a2 & 1;
      uint64_t v11 = v5 + 32;
      uint64_t v19 = v5 + 32;
LABEL_4:
      uint64_t v20 = v9;
      uint64_t v12 = v11 + 48 * v8;
      uint64_t v13 = v8;
      do
      {
        uint64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
          return result;
        }
        outlined init with copy of AnyAccessibilityAction(v12, (uint64_t)v25);
        uint64_t v23 = a1;
        uint64_t v22 = v10;
        uint64_t v15 = v26;
        uint64_t v14 = v27;
        __swift_project_boxed_opaque_existential_1(v25, v26);
        uint64_t v16 = *(void (**)(char *__return_ptr, char *, char *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v14 + 40);
        uint64_t v17 = lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction();
        v16(&v24, &v23, &v22, &type metadata for AccessibilityAdjustableAction, v17, v15, v14);
        uint64_t result = outlined destroy of AnyAccessibilityAction((uint64_t)v25);
        if (v24 == 2) {
          goto LABEL_12;
        }
        if (v24 == 3)
        {
          char v9 = 1;
          uint64_t v11 = v19;
          if (v8 != v7) {
            goto LABEL_4;
          }
LABEL_12:
          swift_bridgeObjectRelease();
LABEL_17:
          uint64_t v18 = 1;
          if (MEMORY[0x18C119DF0](v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost))
          {
            swift_getObjectType();
            v25[0] = 0;
            LOBYTE(v25[1]) = 1;
            ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
            swift_unknownObjectRelease();
          }
          return v18;
        }
        if ((v24 & 1) == 0) {
          goto LABEL_13;
        }
        ++v13;
        v12 += 48;
      }
      while (v8 != v7);
      swift_bridgeObjectRelease();
      if (v20) {
        goto LABEL_17;
      }
    }
    else
    {
LABEL_13:
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

uint64_t specialized AccessibilityNode.sendAction<A>(_:value:)(uint64_t a1)
{
  void (*v15)(char *__return_ptr, unint64_t, _OWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v16;
  uint64_t v17;
  char v18;
  _OWORD v19[2];
  uint64_t v20;
  char v21;
  id v22[3];
  uint64_t v23;
  uint64_t v24;

  *(_OWORD *)uint64_t v22 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  if (EnvironmentValues.isEnabled.getter())
  {
    AccessibilityNode.attachment.getter((uint64_t *)v22);

    uint64_t v3 = swift_bridgeObjectRetain();
    uint64_t v4 = specialized AccessibilityProperties.subscript.getter(v3);
    uint64_t result = swift_bridgeObjectRelease_n();
    uint64_t v6 = *(void *)(v4 + 16);
    if (v6)
    {
      char v7 = 0;
      unint64_t v8 = 0;
      uint64_t v9 = v4 + 32;
LABEL_4:
      uint64_t v18 = v7;
      uint64_t v10 = v9 + 48 * v8;
      unint64_t v11 = v8;
      do
      {
        if (v11 >= *(void *)(v4 + 16))
        {
          __break(1u);
          return result;
        }
        outlined init with copy of AnyAccessibilityAction(v10, (uint64_t)v22);
        long long v12 = *(_OWORD *)(a1 + 16);
        v19[0] = *(_OWORD *)a1;
        v19[1] = v12;
        uint64_t v20 = *(void *)(a1 + 32);
        uint64_t v14 = v23;
        uint64_t v13 = v24;
        __swift_project_boxed_opaque_existential_1(v22, v23);
        uint64_t v15 = *(void (**)(char *__return_ptr, unint64_t, _OWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v13 + 40);
        uint64_t v16 = lazy protocol witness table accessor for type AccessibilityZoomAction and conformance AccessibilityZoomAction();
        v15(&v21, v16, v19, &type metadata for AccessibilityZoomAction, v16, v14, v13);
        uint64_t result = outlined destroy of AnyAccessibilityAction((uint64_t)v22);
        if (v21 == 2) {
          goto LABEL_12;
        }
        if (v21 == 3)
        {
          unint64_t v8 = v11 + 1;
          char v7 = 1;
          uint64_t v9 = v4 + 32;
          if (v6 - 1 != v11) {
            goto LABEL_4;
          }
LABEL_12:
          swift_bridgeObjectRelease();
LABEL_17:
          uint64_t v17 = 1;
          if (MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost))
          {
            swift_getObjectType();
            v22[0] = 0;
            LOBYTE(v22[1]) = 1;
            ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
            swift_unknownObjectRelease();
          }
          return v17;
        }
        if ((v21 & 1) == 0) {
          goto LABEL_13;
        }
        ++v11;
        v10 += 48;
      }
      while (v6 != v11);
      swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_17;
      }
    }
    else
    {
LABEL_13:
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

uint64_t AnyAccessibilityAction.perform<A>(action:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = v4[3];
  uint64_t v10 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 40))(a1, a2, a3, a4, v9, v10);
}

BOOL protocol witness for AccessibilityAction.impliedRole(for:) in conformance AccessibilityAppIntentHandler(_OWORD *a1)
{
  char v2 = *(unsigned char *)(v1 + 48);
  uint64_t v3 = *(void *)(v1 + 72);
  long long v4 = *(_OWORD *)(v1 + 16);
  v6[1] = *(_OWORD *)v1;
  _OWORD v6[2] = v4;
  v6[3] = *(_OWORD *)(v1 + 32);
  char v7 = v2;
  long long v8 = *(_OWORD *)(v1 + 56);
  uint64_t v9 = v3;
  v6[0] = *a1;
  return AccessibilityAppIntentAction.impliedRole(for:)((uint64_t)v6);
}

uint64_t AccessibilityActionHandler.impliedRole(for:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  double v8 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)v17 - v9;
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 32))(a2, a3, v8);
  v17[0] = v12;
  v17[1] = v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v17, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  return v14;
}

unsigned char *protocol witness for ExpressibleByBooleanLiteral.init(BOOLeanLiteral:) in conformance AccessibilityActionResult@<X0>(unsigned char *result@<X0>, char *a2@<X8>)
{
  if (*result) {
    char v2 = 2;
  }
  else {
    char v2 = 1;
  }
  *a2 = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AccessibilityActionResult(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD)
  {
    unsigned int v2 = a2 + 3;
    if (a2 + 3 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 3;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x188105D00);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 < 2) {
    return 0;
  }
  unsigned int v8 = (v7 + 2147483646) & 0x7FFFFFFF;
  uint64_t result = v8 - 1;
  if (v8 <= 1) {
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityActionResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFD) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v7 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x188105DE8);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityActionResult()
{
  return &type metadata for AccessibilityActionResult;
}

uint64_t getEnumTagSinglePayload for AnyAccessibilityAction.ConcreteBase(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for AnyAccessibilityAction.ConcreteBase(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x188106194);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t assignWithCopy for AnyAccessibilityAction(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for AnyAccessibilityAction(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyAccessibilityAction(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyAccessibilityAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t AccessibilityActionHandler.name.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v5 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 32))(a1, a2, v5);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for AccessibilityKindActionProvider);
  if (swift_dynamicCast())
  {
    outlined init with take of OptionalBinaryInteger(&v15, (uint64_t)v18);
    uint64_t v6 = v19;
    uint64_t v7 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v7 + 8))(&v15, v6, v7);
    uint64_t v9 = *((void *)&v15 + 1);
    uint64_t v8 = v15;
    long long v10 = v16;
    if (*((void *)&v16 + 1) >= 5uLL)
    {
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
      if (v12)
      {
        uint64_t v13 = v11;
        outlined consume of AccessibilityActionKind.ActionKind(v8, v9, v10, *((unint64_t *)&v10 + 1));
        uint64_t v8 = v13;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    }
    else
    {
      outlined consume of AccessibilityActionKind.ActionKind(v15, *((uint64_t *)&v15 + 1), v16, *((unint64_t *)&v16 + 1));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      return 0;
    }
  }
  else
  {
    uint64_t v17 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    outlined destroy of AnyAccessibilityAction?((uint64_t)&v15, (uint64_t (*)(void))type metadata accessor for AccessibilityKindActionProvider?);
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  }
  return v8;
}

double AccessibilityActionHandler.asCombinedAction(name:properties:child:)@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)((char *)a1 + 25) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t AccessibilityActionStorage.perform(value:)()
{
  return static Update.dispatchImmediately<A>(_:)();
}

double AccessibilityActionStorage.asCustomAction(category:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v46 = a3;
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = v10[1];
  uint64_t v12 = v10[2];
  uint64_t v44 = *v10;
  uint64_t v45 = v11;
  unint64_t v13 = v10[3];
  unsigned int v14 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v14((char *)&v38 - v15, v3, a2, v9);
  type metadata accessor for AccessibilityActionStorage<AccessibilityVoidAction>();
  if (swift_dynamicCast())
  {
    uint64_t v42 = v12;
    uint64_t v43 = (void (*)(char *, uint64_t, uint64_t))v14;
    long long v16 = v7;
    unint64_t v41 = v13;
    uint64_t v17 = v45;
    long long v51 = v57;
    long long v52 = v58;
    *(_OWORD *)uint64_t v53 = v59[0];
    *(_OWORD *)((char *)&v53[1] + 4) = *(_OWORD *)((char *)v59 + 12);
    long long v47 = *(_OWORD *)&v53[5];
    long long v48 = v54;
    long long v49 = v55;
    long long v50 = v56;
    uint64_t v18 = *((void *)&v54 + 1);
    if (*((void *)&v54 + 1) >= 5uLL)
    {
      LOBYTE(v23) = v48;
      long long v40 = v47;
      outlined copy of AccessibilityActionKind.ActionKind(v47, *((uint64_t *)&v47 + 1), v48, *((unint64_t *)&v54 + 1));
      v43(v16, v3, a2);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v16, a2);
      goto LABEL_6;
    }
    uint64_t v19 = v7;
    v43(v7, v3, a2);
    uint64_t v20 = (uint64_t *)&v7[*(int *)(a2 + 40)];
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = v20[2];
    uint64_t v18 = v20[3];
    outlined copy of Text?(*v20, v21, v23, v18);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v19, a2);
    if (v18)
    {
      *(void *)&long long v40 = v22;
      *((void *)&v40 + 1) = v21;
LABEL_6:
      uint64_t v38 = v23 & 1;
      uint64_t v24 = *(void *)(v3 + *(int *)(a2 + 44));
      uint64_t v25 = v53[2];
      uint64_t v43 = (void (*)(char *, uint64_t, uint64_t))v53[1];
      Swift::UInt32 v39 = AccessibilityActionHandlerSeed++;
      type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>();
      uint64_t v26 = v46;
      *(void *)(v46 + 24) = v27;
      *(void *)(v26 + 32) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
      uint64_t v28 = swift_allocObject();
      *(void *)uint64_t v26 = v28;
      uint64_t v29 = v44;
      uint64_t v30 = v17;
      uint64_t v31 = v17;
      unint64_t v32 = v41;
      uint64_t v33 = v42;
      outlined copy of AccessibilityActionCategory?(v44, v31, v42, v41);
      swift_retain();
      swift_retain();
      outlined release of AccessibilityActionStorage<AccessibilityVoidAction>((uint64_t *)&v47);
      uint64_t v34 = *((void *)&v40 + 1);
      *(void *)(v28 + 16) = v40;
      *(void *)(v28 + 24) = v34;
      *(void *)(v28 + 32) = v38;
      *(void *)(v28 + 40) = v18;
      *(void *)(v28 + 48) = v29;
      *(void *)(v28 + 56) = v30;
      *(void *)(v28 + 64) = v33;
      *(void *)(v28 + 72) = v32;
      double result = 0.0;
      *(_OWORD *)(v28 + 80) = 0u;
      *(_OWORD *)(v28 + 96) = 0u;
      uint64_t v36 = v43;
      *(void *)(v28 + 112) = v24;
      *(void *)(v28 + 120) = v36;
      *(void *)(v28 + 128) = v25;
      *(_DWORD *)(v28 + 136) = v39;
      *(unsigned char *)(v26 + 40) = 0;
      return result;
    }
    outlined release of AccessibilityActionStorage<AccessibilityVoidAction>((uint64_t *)&v47);
  }
  double result = 0.0;
  uint64_t v37 = (_OWORD *)v46;
  *(_OWORD *)(v46 + 25) = 0u;
  *uint64_t v37 = 0u;
  v37[1] = 0u;
  return result;
}

uint64_t static AccessibilityActionStorage.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v138 = a4;
  uint64_t v139 = a3;
  uint64_t v6 = type metadata accessor for AccessibilityActionStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  v141 = (char *)&v133 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  v142 = (char *)&v133 - v10;
  MEMORY[0x1F4188790](v11);
  v144 = (char *)&v133 - v12;
  MEMORY[0x1F4188790](v13);
  v143 = (char *)&v133 - v14;
  MEMORY[0x1F4188790](v15);
  v145 = (char *)&v133 - v16;
  MEMORY[0x1F4188790](v17);
  unint64_t v140 = (unint64_t)&v133 - v18;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v133 - v20;
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v133 - v24;
  uint64_t v27 = *(int *)(v26 + 52);
  int v28 = *(_DWORD *)(a1 + v27);
  int v29 = *(_DWORD *)(a2 + v27);
  uint64_t v148 = v7;
  uint64_t v149 = a1;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  uint64_t v30 = v7 + 16;
  v31((char *)&v133 - v24, a1, v6, v23);
  v146 = (void (*)(char *, uint64_t, int *))v31;
  uint64_t v147 = a2;
  unint64_t v32 = (int *)v6;
  ((void (*)(char *, uint64_t, uint64_t))v31)(v21, a2, v6);
  if (v28 == v29) {
    char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v33 = 0;
  }
  uint64_t v34 = v149;
  uint64_t v35 = v30;
  unint64_t v36 = v140;
  uint64_t v37 = *(void (**)(char *, int *))(v148 + 8);
  v37(v21, v32);
  v37(v25, v32);
  uint64_t v38 = v146;
  v146((char *)v36, v34, v32);
  Swift::UInt32 v39 = v145;
  uint64_t v40 = v147;
  v38(v145, v147, v32);
  uint64_t v148 = v35;
  if ((v33 & 1) == 0)
  {
    v37(v39, v32);
    v37((char *)v36, v32);
    int v62 = v141;
LABEL_29:
    Class v80 = v143;
    uint64_t v110 = v149;
    v38(v143, v149, v32);
    uint64_t v81 = v144;
    v38(v144, v40, v32);
LABEL_30:
    v37(v81, v32);
    v37(v80, v32);
LABEL_31:
    uint64_t v99 = v142;
    v38(v142, v110, v32);
    v38(v62, v40, v32);
    goto LABEL_32;
  }
  uint64_t v41 = v32[9];
  uint64_t v43 = *(void *)(v36 + v41);
  uint64_t v42 = *(void *)(v36 + v41 + 8);
  uint64_t v45 = *(void *)(v36 + v41 + 16);
  unint64_t v44 = *(void *)(v36 + v41 + 24);
  uint64_t v46 = (uint64_t *)&v39[v41];
  uint64_t v47 = *v46;
  uint64_t v48 = v46[1];
  unint64_t v50 = v46[2];
  unint64_t v49 = v46[3];
  if (v44 == 2)
  {
    uint64_t v51 = v43;
    uint64_t v52 = v42;
    uint64_t v53 = v39;
    uint64_t v138 = v48;
    uint64_t v139 = v47;
    unint64_t v140 = v50;
    uint64_t v54 = v49;
    outlined copy of AccessibilityActionCategory?(v47, v48, v50, v49);
    v37(v53, v32);
    v37((char *)v36, v32);
    char v55 = v45;
    if (v54 == 2)
    {
      unint64_t v56 = 2;
      long long v58 = v146;
      uint64_t v57 = v147;
      uint64_t v59 = v52;
      uint64_t v60 = v51;
      uint64_t v61 = v149;
LABEL_18:
      outlined consume of AccessibilityActionCategory?(v60, v59, v55, v56);
      Class v80 = v143;
      v58(v143, v61, v32);
      uint64_t v81 = v144;
      v58(v144, v57, v32);
      goto LABEL_19;
    }
    goto LABEL_11;
  }
  if (v49 == 2)
  {
    uint64_t v138 = v48;
    uint64_t v139 = v47;
    uint64_t v63 = v42;
    unint64_t v140 = v50;
    uint64_t v54 = 2;
    outlined copy of AccessibilityActionCategory.Category(v43, v42, v45, v44);
    outlined copy of AccessibilityActionCategory.Category(v43, v63, v45, v44);
    v37(v145, v32);
    unint64_t v64 = v36;
    char v55 = v45;
    v37((char *)v64, v32);
    uint64_t v51 = v43;
    uint64_t v65 = v43;
    uint64_t v52 = v63;
    outlined consume of AccessibilityActionCategory.Category(v65, v63, v45, v44);
LABEL_11:
    outlined consume of AccessibilityActionCategory?(v51, v52, v55, v44);
    uint64_t v67 = v138;
    uint64_t v66 = v139;
    char v68 = v140;
    unint64_t v69 = v54;
LABEL_28:
    outlined consume of AccessibilityActionCategory?(v66, v67, v68, v69);
    int v62 = v141;
    uint64_t v38 = v146;
    uint64_t v40 = v147;
    goto LABEL_29;
  }
  if (!v44)
  {
    unint64_t v140 = 0;
    uint64_t v74 = v42;
    unint64_t v137 = v49;
    outlined copy of AccessibilityActionCategory.Category(v43, v42, v45, 0);
    uint64_t v71 = v74;
    uint64_t v75 = v74;
    char v73 = v45;
    outlined copy of AccessibilityActionCategory.Category(v43, v75, v45, 0);
    if (!v137) {
      goto LABEL_17;
    }
LABEL_27:
    v37(v145, v32);
    v37((char *)v36, v32);
    uint64_t v107 = v43;
    uint64_t v108 = v43;
    unint64_t v109 = v140;
    outlined consume of AccessibilityActionCategory.Category(v107, v71, v73, v140);
    uint64_t v66 = v108;
    uint64_t v67 = v71;
    char v68 = v73;
    unint64_t v69 = v109;
    goto LABEL_28;
  }
  if (v44 == 1)
  {
    unint64_t v140 = 1;
    uint64_t v70 = v42;
    unint64_t v137 = v49;
    outlined copy of AccessibilityActionCategory.Category(v43, v42, v45, 1uLL);
    uint64_t v71 = v70;
    uint64_t v72 = v70;
    char v73 = v45;
    outlined copy of AccessibilityActionCategory.Category(v43, v72, v45, 1uLL);
    if (v137 != 1) {
      goto LABEL_27;
    }
LABEL_17:
    v37(v145, v32);
    v37((char *)v36, v32);
    uint64_t v76 = v43;
    uint64_t v77 = v71;
    uint64_t v78 = v43;
    unint64_t v79 = v140;
    outlined consume of AccessibilityActionCategory.Category(v76, v71, v73, v140);
    unint64_t v56 = v79;
    uint64_t v60 = v78;
    long long v58 = v146;
    uint64_t v57 = v147;
    uint64_t v61 = v149;
    uint64_t v59 = v77;
    char v55 = v73;
    goto LABEL_18;
  }
  if (v49 < 2)
  {
    uint64_t v101 = v43;
    uint64_t v102 = v42;
    uint64_t v103 = v43;
    unint64_t v104 = v44;
    outlined copy of AccessibilityActionCategory.Category(v101, v42, v45, v44);
    uint64_t v105 = v103;
    uint64_t v71 = v102;
    unint64_t v140 = v104;
    unint64_t v106 = v104;
    uint64_t v43 = v103;
    char v73 = v45;
    outlined copy of AccessibilityActionCategory.Category(v105, v102, v45, v106);
    goto LABEL_27;
  }
  uint64_t v119 = v47;
  uint64_t v138 = v48;
  uint64_t v139 = v47;
  uint64_t v120 = v43;
  uint64_t v135 = v42;
  uint64_t v136 = v45;
  uint64_t v121 = v48;
  char v122 = v45;
  char v123 = v50;
  unint64_t v140 = v50;
  uint64_t v133 = v43;
  unint64_t v124 = v44;
  unint64_t v125 = v49;
  unint64_t v137 = v49;
  outlined copy of AccessibilityActionCategory?(v120, v42, v122, v124);
  outlined copy of AccessibilityActionCategory?(v119, v121, v123, v125);
  uint64_t v126 = v133;
  uint64_t v127 = v135;
  LOBYTE(v125) = v136;
  outlined copy of AccessibilityActionCategory?(v133, v135, v136, v124);
  outlined copy of AccessibilityActionCategory.Category(v126, v127, v125, v124);
  char v151 = v125 & 1;
  uint64_t v128 = v139;
  char v150 = v140 & 1;
  uint64_t v129 = v138;
  int v134 = static Text.== infix(_:_:)();
  outlined consume of AccessibilityActionCategory.Category(v126, v127, v136, v124);
  outlined consume of AccessibilityActionCategory?(v128, v129, v140, v137);
  v37(v145, v32);
  v37((char *)v36, v32);
  uint64_t v130 = v126;
  uint64_t v131 = v126;
  uint64_t v132 = v135;
  LOBYTE(v126) = v136;
  outlined consume of AccessibilityActionCategory.Category(v131, v135, v136, v124);
  outlined consume of AccessibilityActionCategory?(v130, v132, v126, v124);
  Class v80 = v143;
  uint64_t v110 = v149;
  uint64_t v38 = v146;
  v146(v143, v149, v32);
  uint64_t v81 = v144;
  uint64_t v40 = v147;
  v38(v144, v147, v32);
  int v62 = v141;
  if ((v134 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_19:
  uint64_t v82 = v32[10];
  uint64_t v83 = (uint64_t *)&v80[v82];
  uint64_t v84 = v80;
  uint64_t v85 = *(void *)&v80[v82 + 24];
  v86 = (uint64_t *)&v81[v82];
  uint64_t v88 = *v86;
  uint64_t v87 = v86[1];
  uint64_t v89 = v86[2];
  uint64_t v90 = v86[3];
  if (v85)
  {
    uint64_t v91 = v86[1];
    uint64_t v92 = *v83;
    uint64_t v93 = v83[1];
    unint64_t v94 = v83[2];
    if (v90)
    {
      v145 = (char *)(v94 & 1);
      unint64_t v137 = v92;
      uint64_t v138 = v89 & 1;
      uint64_t v95 = v92;
      char v96 = v94;
      unint64_t v140 = v94;
      outlined copy of Text?(v95, v93, v94, v85);
      outlined copy of Text?(v88, v91, v89, v90);
      uint64_t v97 = v137;
      outlined copy of Text?(v137, v93, v96, v85);
      char v153 = (char)v145;
      char v98 = v138;
      char v152 = v138;
      LODWORD(v139) = static Text.== infix(_:_:)();
      outlined consume of Text.Storage(v88, v91, v98);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v97, v93, (char)v145);
      swift_bridgeObjectRelease();
      v37(v144, v32);
      v37(v143, v32);
      outlined consume of Text?(v97, v93, v140, v85);
      uint64_t v99 = v142;
      v100 = v146;
      v146(v142, v149, v32);
      int v62 = v141;
      v100(v141, v147, v32);
      if (v139) {
        goto LABEL_38;
      }
LABEL_32:
      v37(v62, v32);
      v37(v99, v32);
      goto LABEL_33;
    }
    char v113 = v94 & 1;
    outlined copy of Text.Storage(v92, v93, v94 & 1);
    swift_bridgeObjectRetain();
    v37(v144, v32);
    v37(v143, v32);
    outlined consume of Text.Storage(v92, v93, v113);
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  outlined copy of Text?(*v86, v86[1], v86[2], v86[3]);
  v37(v81, v32);
  v37(v84, v32);
  if (v90)
  {
    outlined consume of Text?(v88, v87, v89, v90);
LABEL_36:
    int v62 = v141;
    uint64_t v38 = v146;
    uint64_t v40 = v147;
    uint64_t v110 = v149;
    goto LABEL_31;
  }
  uint64_t v99 = v142;
  uint64_t v114 = v146;
  v146(v142, v149, v32);
  int v62 = v141;
  v114(v141, v147, v32);
LABEL_38:
  uint64_t v115 = v32[11];
  uint64_t v116 = *(void *)&v99[v115];
  long long v117 = v99;
  uint64_t v118 = *(void *)&v62[v115];
  if (v116)
  {
    if (v118)
    {
      swift_retain();
      swift_retain();
      char v111 = static Image.== infix(_:_:)();
      swift_release();
      v37(v62, v32);
      v37(v142, v32);
      swift_release();
      return v111 & 1;
    }
    swift_retain();
    v37(v62, v32);
    v37(v142, v32);
  }
  else
  {
    swift_retain();
    v37(v62, v32);
    v37(v117, v32);
    if (!v118)
    {
      char v111 = 1;
      return v111 & 1;
    }
  }
  swift_release();
LABEL_33:
  char v111 = 0;
  return v111 & 1;
}

uint64_t protocol witness for AccessibilityActionHandler.image.getter in conformance AccessibilityActionStorage<A>()
{
  return swift_retain();
}

double protocol witness for AccessibilityActionHandler.asCombinedAction(name:properties:child:) in conformance AccessibilityActionStorage<A>@<D0>(_OWORD *a1@<X8>)
{
  return AccessibilityActionHandler.asCombinedAction(name:properties:child:)(a1);
}

double protocol witness for AccessibilityActionHandler.asCodableAction(in:) in conformance AccessibilityActionStorage<A>@<D0>(uint64_t a1@<X8>)
{
  return protocol witness for static StatefulRule.initialValue.getter in conformance ScrollBehaviorModifier<A>.ScrollBehaviorProvider(a1);
}

uint64_t protocol witness for AccessibilityAction.impliedRole(for:) in conformance AccessibilityActionStorage<A>(uint64_t *a1, uint64_t a2)
{
  return protocol witness for AccessibilityAction.impliedRole(for:) in conformance AccessibilityActionStorage<A>(a1, a2);
}

{
  uint64_t WitnessTable;

  uint64_t WitnessTable = swift_getWitnessTable();
  return AccessibilityActionHandler.impliedRole(for:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityActionStorage<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static AccessibilityActionStorage.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

void *AccessibilityActionReference.image.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  double v4 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void **)(v1 + *(int *)(v7 + 44));
  (*(void (**)(char *, double))(v3 + 16))(v6, v4);
  uint64_t v9 = v8;
  if (!v8)
  {
    uint64_t v9 = (void *)MEMORY[0x18C119DF0](&v6[*(int *)(a1 + 48)]);
    if (v9)
    {
      AccessibilityNode.attachment.getter(v15);
      uint64_t v12 = (void *)v15[1];

      uint64_t v13 = swift_bridgeObjectRetain();
      uint64_t v14 = specialized AccessibilityProperties.subscript.getter(v13);
      swift_bridgeObjectRelease_n();
      if (*(void *)(v14 + 16))
      {
        uint64_t v9 = *(void **)(v14 + 32);
        swift_retain();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v9 = 0;
      }
    }
  }
  uint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  swift_retain();
  v10(v6, a1);
  return v9;
}

void AccessibilityActionReference.init<A>(_:_:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = (int *)type metadata accessor for AccessibilityActionReference();
  swift_unknownObjectWeakInit();
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(a4 + 40))(v19, a3, a4);
  uint64_t v10 = (_OWORD *)(a5 + v9[9]);
  long long v11 = v19[1];
  *uint64_t v10 = v19[0];
  v10[1] = v11;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
  uint64_t v13 = (uint64_t *)(a5 + v9[10]);
  *uint64_t v13 = v12;
  v13[1] = v14;
  void v13[2] = v15;
  v13[3] = v16;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  *(void *)(a5 + v9[11]) = v17;
  swift_unknownObjectWeakAssign();
}

void AccessibilityActionReference.perform(value:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v7 = MEMORY[0x18C119DF0](v3 + *(int *)(a2 + 48));
  if (v7
    && (uint64_t v8 = (void *)v7,
        char v9 = AccessibilityNode.sendAction<A>(_:value:)(v3, a1, *(void *)(a2 + 16), *(void *)(a2 + 24)),
        v8,
        (v9 & 1) != 0))
  {
    char v10 = 2;
  }
  else
  {
    char v10 = 1;
  }
  *a3 = v10;
}

BOOL static AccessibilityActionReference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  double v4 = (int *)type metadata accessor for AccessibilityActionReference();
  uint64_t v5 = v4[9];
  uint64_t v7 = *(void *)(a1 + v5);
  uint64_t v6 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = *(void *)(a1 + v5 + 16);
  unint64_t v9 = *(void *)(a1 + v5 + 24);
  char v10 = (uint64_t *)(a2 + v5);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = v10[2];
  unint64_t v14 = v10[3];
  if (v9 == 2)
  {
    if (v14 == 2) {
      goto LABEL_4;
    }
LABEL_10:
    outlined copy of AccessibilityActionCategory?(v11, v12, v13, v14);
    outlined consume of AccessibilityActionCategory?(v7, v6, v8, v9);
    outlined consume of AccessibilityActionCategory?(v11, v12, v13, v14);
    return 0;
  }
  if (v14 == 2)
  {
    outlined copy of AccessibilityActionCategory.Category(v7, v6, v8, v9);
    outlined copy of AccessibilityActionCategory.Category(v7, v6, v8, v9);
    outlined consume of AccessibilityActionCategory.Category(v7, v6, v8, v9);
    goto LABEL_10;
  }
  if (v9)
  {
    if (v9 == 1)
    {
      uint64_t v26 = v4;
      outlined copy of AccessibilityActionCategory.Category(v7, v6, v8, 1uLL);
      double v4 = v26;
      if (v14 != 1) {
        return 0;
      }
    }
    else
    {
      if (v14 < 2)
      {
        outlined copy of AccessibilityActionCategory?(v7, v6, v8, v9);
        outlined consume of AccessibilityActionCategory.Category(v7, v6, v8, v9);
        return 0;
      }
      uint64_t v43 = v4;
      outlined copy of AccessibilityActionCategory?(v7, v6, v8, v9);
      outlined copy of AccessibilityActionCategory?(v7, v6, v8, v9);
      outlined copy of AccessibilityActionCategory?(v11, v12, v13, v14);
      outlined copy of AccessibilityActionCategory.Category(v7, v6, v8, v9);
      char v41 = static Text.== infix(_:_:)();
      outlined consume of AccessibilityActionCategory.Category(v7, v6, v8, v9);
      outlined consume of AccessibilityActionCategory?(v11, v12, v13, v14);
      outlined consume of AccessibilityActionCategory.Category(v7, v6, v8, v9);
      outlined consume of AccessibilityActionCategory?(v7, v6, v8, v9);
      double v4 = v43;
      if ((v41 & 1) == 0) {
        return 0;
      }
    }
  }
  else
  {
    uint64_t v31 = v4;
    outlined copy of AccessibilityActionCategory.Category(v7, v6, v8, 0);
    double v4 = v31;
    if (v14) {
      return 0;
    }
  }
LABEL_4:
  uint64_t v15 = v4[10];
  uint64_t v16 = (uint64_t *)(a1 + v15);
  uint64_t v17 = *(void *)(a1 + v15 + 24);
  uint64_t v18 = (uint64_t *)(a2 + v15);
  uint64_t v19 = v18[3];
  if (v17)
  {
    if (!v19) {
      return 0;
    }
    uint64_t v20 = *v16;
    uint64_t v21 = v16[1];
    uint64_t v22 = *v18;
    uint64_t v23 = v18[1];
    uint64_t v24 = v18[2];
    uint64_t v38 = v16[2] & 1;
    uint64_t v40 = v16[2];
    uint64_t v42 = v4;
    outlined copy of Text?(*v16, v21, v40, v17);
    outlined copy of Text?(v20, v21, v40, v17);
    outlined copy of Text?(v22, v23, v24, v19);
    char v39 = static Text.== infix(_:_:)();
    outlined consume of Text.Storage(v22, v23, v24 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v20, v21, v38);
    swift_bridgeObjectRelease();
    outlined consume of Text?(v20, v21, v40, v17);
    double v4 = v42;
    if ((v39 & 1) == 0) {
      return 0;
    }
  }
  else if (v19)
  {
    return 0;
  }
  uint64_t v27 = v4[11];
  uint64_t v28 = *(void *)(a2 + v27);
  if (!*(void *)(a1 + v27))
  {
    if (!v28) {
      goto LABEL_26;
    }
    return 0;
  }
  if (!v28) {
    return 0;
  }
  int v29 = v4;
  swift_retain();
  swift_retain();
  char v30 = static Image.== infix(_:_:)();
  swift_release();
  swift_release();
  double v4 = v29;
  if ((v30 & 1) == 0) {
    return 0;
  }
LABEL_26:
  unint64_t v32 = v4;
  char v33 = (void *)MEMORY[0x18C119DF0](a1 + v4[12]);
  uint64_t v34 = MEMORY[0x18C119DF0](a2 + v32[12]);
  uint64_t v35 = (void *)v34;
  if (!v33)
  {
    if (!v34) {
      return 1;
    }
    goto LABEL_35;
  }
  if (!v34)
  {
    uint64_t v35 = v33;
LABEL_35:

    return 0;
  }
  type metadata accessor for AccessibilityNode();
  id v36 = v33;
  char v37 = static NSObject.== infix(_:_:)();

  return (v37 & 1) != 0;
}

uint64_t protocol witness for AccessibilityActionHandler.category.getter in conformance AccessibilityActionStorage<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(v2 + *(int *)(a1 + 36));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  unint64_t v7 = v3[3];
  *a2 = *v3;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return outlined copy of AccessibilityActionCategory?(v4, v5, v6, v7);
}

uint64_t protocol witness for AccessibilityActionHandler.label.getter in conformance AccessibilityActionStorage<A>(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 40));
  uint64_t v3 = *v2;
  outlined copy of Text?(*v2, v2[1], v2[2], v2[3]);
  return v3;
}

uint64_t protocol witness for AccessibilityAction.impliedRole(for:) in conformance AccessibilityActionReference<A>(uint64_t *a1, uint64_t a2)
{
  return protocol witness for AccessibilityAction.impliedRole(for:) in conformance AccessibilityActionStorage<A>(a1, a2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityActionReference<A>(uint64_t a1, uint64_t a2)
{
  return static AccessibilityActionReference.== infix(_:_:)(a1, a2);
}

uint64_t AnyAccessibilityAction.ConcreteBase.name.getter(uint64_t a1)
{
  return AccessibilityActionHandler.name.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t AnyAccessibilityAction.ConcreteBase.image.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 56))(*(void *)(a1 + 16));
}

uint64_t AnyAccessibilityAction.ConcreteBase.category.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))(*(void *)(a1 + 16));
}

uint64_t AnyAccessibilityAction.ConcreteBase.perform(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v20[-v10];
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = &v20[-v14];
  outlined init with copy of Any(a1, (uint64_t)v20);
  int v16 = swift_dynamicCast();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  if (v16)
  {
    v17(v11, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v11, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 64))(v15, v6, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, AssociatedTypeWitness);
  }
  else
  {
    v17(v11, 1, 1, AssociatedTypeWitness);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *a3 = 1;
  }
  return result;
}

uint64_t AnyAccessibilityAction.ConcreteBase.perform<A>(action:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  uint64_t v34 = a6;
  uint64_t v33 = a2;
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v30 = *(void *)(a3 + 16);
  uint64_t v31 = v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v28 = *(void *)(v12 - 8);
  uint64_t v29 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v28 - v17;
  uint64_t v32 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v28 - v20;
  uint64_t v22 = a3;
  uint64_t v23 = v34;
  uint64_t result = AnyAccessibilityAction.ConcreteBase.matches<A>(_:)(a1, v22, a4, a5);
  if (result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v33, v15);
    char v25 = swift_dynamicCast();
    uint64_t v26 = v32;
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
    if (v25)
    {
      v27(v14, 0, 1, AssociatedTypeWitness);
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v21, v14, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v31 + 64))(v21, v30);
      return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v21, AssociatedTypeWitness);
    }
    v27(v14, 1, 1, AssociatedTypeWitness);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v14, v29);
  }
  *uint64_t v23 = 1;
  return result;
}

uint64_t AnyAccessibilityAction.ConcreteBase.matches<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  double v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v16 - v12;
  (*(void (**)(uint64_t, uint64_t, double))(v7 + 32))(v8, v7, v11);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  LOBYTE(a4) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(a1, a3, a4, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
  return a4 & 1;
}

uint64_t AnyAccessibilityAction.ConcreteBase.impliedRole(for:)(long long *a1, uint64_t a2)
{
  long long v3 = *a1;
  return (*(uint64_t (**)(long long *, void))(*(void *)(*(void *)(a2 + 24) + 8) + 24))(&v3, *(void *)(a2 + 16));
}

uint64_t AnyAccessibilityAction.ConcreteBase.asReference(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for AccessibilityActionReference();
  double v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, v4, v7, v14);
  AccessibilityActionReference.init<A>(_:_:)((uint64_t)v10, a1, v7, v12, (uint64_t)v16);
  swift_getWitnessTable();
  return AnyAccessibilityAction.init<A>(_:bridged:)((uint64_t)v16, 0, v13, a3);
}

uint64_t AnyAccessibilityAction.ConcreteBase.asCustomAction(category:)(_OWORD *a1, uint64_t a2)
{
  long long v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  return (*(uint64_t (**)(_OWORD *, void))(*(void *)(a2 + 24) + 72))(v4, *(void *)(a2 + 16));
}

uint64_t AnyAccessibilityAction.ConcreteBase.asCombinedAction(name:properties:child:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *a5;
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, uint64_t, void))(*(void *)(a7 + 24)
                                                                                                  + 80))(a1, a2, a3 & 1, a4, &v8, a6, *(void *)(a7 + 16));
}

uint64_t AnyAccessibilityAction.ConcreteBase.asCodableAction(in:)(long long *a1, uint64_t a2)
{
  long long v3 = *a1;
  return (*(uint64_t (**)(long long *, void))(*(void *)(a2 + 24) + 88))(&v3, *(void *)(a2 + 16));
}

uint64_t AnyAccessibilityAction.ConcreteBase.isEqual(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v57 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = v7;
  uint64_t v8 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v61 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v63 = (char *)&v55 - v9;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v55 - v12;
  uint64_t v62 = v8;
  uint64_t v64 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v55 - v18;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v55 - v21;
  outlined init with copy of TableColumnList(a1, (uint64_t)v68);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for AbstractAnyAccessibilityAction);
  int v23 = swift_dynamicCast();
  uint64_t v24 = *(void *)(a2 - 8);
  char v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  uint64_t v66 = v22;
  uint64_t v58 = a2;
  uint64_t v60 = v16;
  if (v23)
  {
    uint64_t v26 = v24;
    v25(v13, 0, 1, a2);
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    uint64_t v28 = v22;
    uint64_t v29 = v67;
    v27(v28, v13, v67);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v13, a2);
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    uint64_t v31 = v29;
    uint64_t v22 = v66;
    v30(v66, 0, 1, v31);
  }
  else
  {
    v25(v13, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v30(v22, 1, 1, v67);
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  }
  uint64_t v32 = v19;
  uint64_t v33 = v2;
  uint64_t v34 = v19;
  uint64_t v35 = v67;
  v27(v32, v33, v67);
  v30(v34, 0, 1, v35);
  uint64_t v36 = v64;
  char v37 = v63;
  uint64_t v38 = &v63[*(int *)(TupleTypeMetadata2 + 48)];
  char v39 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
  uint64_t v40 = v22;
  uint64_t v41 = v62;
  v39(v63, v40, v62);
  v39(v38, v34, v41);
  uint64_t v59 = v5;
  uint64_t v42 = v5;
  uint64_t v43 = v37;
  unint64_t v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
  if (v44(v43, 1, v35) != 1)
  {
    unint64_t v56 = v34;
    uint64_t v47 = v60;
    v39(v60, v43, v41);
    if (v44(v38, 1, v67) != 1)
    {
      uint64_t v49 = v59;
      unint64_t v50 = v57;
      uint64_t v51 = v67;
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v57, v38, v67);
      char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v52 = *(void (**)(char *, uint64_t))(v49 + 8);
      v52(v50, v51);
      uint64_t v53 = *(void (**)(char *, uint64_t))(v64 + 8);
      v53(v56, v41);
      v53(v66, v41);
      v52(v47, v51);
      v53(v43, v41);
      return v46 & 1;
    }
    uint64_t v48 = *(void (**)(char *, uint64_t))(v64 + 8);
    v48(v56, v41);
    v48(v66, v41);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v47, v67);
    goto LABEL_9;
  }
  uint64_t v45 = *(void (**)(char *, uint64_t))(v36 + 8);
  v45(v34, v41);
  v45(v66, v41);
  if (v44(v38, 1, v67) != 1)
  {
LABEL_9:
    (*(void (**)(char *, uint64_t))(v61 + 8))(v43, TupleTypeMetadata2);
    char v46 = 0;
    return v46 & 1;
  }
  v45(v43, v41);
  char v46 = 1;
  return v46 & 1;
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.perform<A>(action:value:) in conformance AnyAccessibilityAction.ConcreteBase<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  return AnyAccessibilityAction.ConcreteBase.perform<A>(action:value:)(a1, a2, a5, a3, a4, a6);
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.impliedRole(for:) in conformance AnyAccessibilityAction.ConcreteBase<A>(long long *a1, uint64_t a2)
{
  return AnyAccessibilityAction.ConcreteBase.impliedRole(for:)(a1, a2);
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.asCombinedAction(name:properties:child:) in conformance AnyAccessibilityAction.ConcreteBase<A>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  return AnyAccessibilityAction.ConcreteBase.asCombinedAction(name:properties:child:)(a1, a2, a3 & 1, a4, a5, a6, a7);
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.matches<A>(_:) in conformance AnyAccessibilityAction.ConcreteBase<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AnyAccessibilityAction.ConcreteBase.matches<A>(_:)(a1, a4, a2, a3);
}

void *AnyAccessibilityAction.asCombinedAction(name:properties:child:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X5>, _OWORD *a7@<X8>)
{
  uint64_t v8 = (uint64_t)v7;
  uint64_t v13 = *a5;
  uint64_t v14 = v7[3];
  uint64_t v15 = v7[4];
  uint64_t v16 = a3 & 1;
  __swift_project_boxed_opaque_existential_1(v7, v14);
  uint64_t v38 = v13;
  uint64_t result = (*(void *(**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, void *, uint64_t, uint64_t))(v15 + 72))(&v39, a1, a2, v16, a4, &v38, a6, v14, v15);
  if (*(void *)&v40[8])
  {
    long long v18 = *(_OWORD *)v40;
    *a7 = v39;
    a7[1] = v18;
    *(_OWORD *)((char *)a7 + 25) = *(_OWORD *)&v40[9];
  }
  else
  {
    uint64_t v36 = a7;
    outlined destroy of AnyAccessibilityAction?((uint64_t)&v39, (uint64_t (*)(void))type metadata accessor for AnyAccessibilityAction?);
    uint64_t v19 = v16;
    uint64_t v20 = a1;
    uint64_t v21 = a4;
    uint64_t v23 = v7[3];
    uint64_t v22 = v7[4];
    __swift_project_boxed_opaque_existential_1(v7, v23);
    uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 16);
    swift_bridgeObjectRetain();
    uint64_t v35 = a2;
    outlined copy of Text.Storage(v20, a2, v19);
    uint64_t v24 = v34(v23, v22);
    if (!v24)
    {
      uint64_t v25 = swift_bridgeObjectRetain();
      uint64_t v26 = specialized AccessibilityProperties.subscript.getter(v25);
      swift_bridgeObjectRelease();
      if (*(void *)(v26 + 16))
      {
        uint64_t v24 = *(void *)(v26 + 32);
        swift_retain();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v24 = 0;
      }
    }
    outlined init with copy of AnyAccessibilityAction(v8, (uint64_t)&v39);
    uint64_t v27 = swift_allocObject();
    long long v28 = *(_OWORD *)v40;
    *(_OWORD *)(v27 + 16) = v39;
    *(_OWORD *)(v27 + 32) = v28;
    *(_OWORD *)(v27 + 41) = *(_OWORD *)&v40[9];
    *(void *)(v27 + 64) = a6;
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = partial apply for closure #1 in AnyAccessibilityAction.asCombinedAction(name:properties:child:);
    *(void *)(v29 + 24) = v27;
    char v30 = *(unsigned char *)(v8 + 40);
    Swift::UInt32 v31 = AccessibilityActionHandlerSeed++;
    type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>();
    *((void *)v36 + 3) = v32;
    *((void *)v36 + 4) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
    uint64_t v33 = swift_allocObject();
    *(void *)uint64_t v36 = v33;
    *(void *)(v33 + 16) = v20;
    *(void *)(v33 + 24) = v35;
    *(void *)(v33 + 32) = v19;
    *(void *)(v33 + 40) = v21;
    *(void *)(v33 + 48) = 0;
    *(void *)(v33 + 56) = 0;
    *(void *)(v33 + 64) = 0;
    *(void *)(v33 + 72) = 2;
    *(_OWORD *)(v33 + 80) = 0u;
    *(_OWORD *)(v33 + 96) = 0u;
    *(void *)(v33 + 112) = v24;
    *(void *)(v33 + 120) = partial apply for thunk for @escaping @callee_guaranteed () -> (@out AccessibilityActionResult);
    *(void *)(v33 + 128) = v29;
    *(_DWORD *)(v33 + 136) = v31;
    *((unsigned char *)v36 + 40) = v30;
    return a6;
  }
  return result;
}

uint64_t closure #1 in AnyAccessibilityAction.asCombinedAction(name:properties:child:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 40) == 1)
  {
    v7[3] = MEMORY[0x1E4FBC848] + 8;
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 32);
    __swift_project_boxed_opaque_existential_1((void *)a1, v3);
    (*(void (**)(void *, uint64_t, uint64_t))(v4 + 32))(v7, v3, v4);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    uint64_t result = specialized AccessibilityNode.sendAction<A>(_:value:)(0, 0, 0, 0);
    if (result) {
      char v6 = 2;
    }
    else {
      char v6 = 1;
    }
    *a2 = v6;
  }
  return result;
}

uint64_t AnyAccessibilityAction.isEqual(to:)(uint64_t a1)
{
  outlined init with copy of TableColumnList(a1, (uint64_t)v18);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for AbstractAnyAccessibilityAction);
  if ((swift_dynamicCast() & 1) == 0) {
    memset(v17, 0, 41);
  }
  outlined init with copy of AnyAccessibilityAction(v1, (uint64_t)v16);
  outlined init with copy of AnyAccessibilityAction?((uint64_t)v17, (uint64_t)v12);
  outlined init with copy of AnyAccessibilityAction?((uint64_t)v16, (uint64_t)&v14);
  if (v13)
  {
    outlined init with copy of AnyAccessibilityAction?((uint64_t)v12, (uint64_t)v9);
    if (*(void *)&v15[8])
    {
      long long v7 = v14;
      v8[0] = *(_OWORD *)v15;
      *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)&v15[9];
      uint64_t v2 = v10;
      uint64_t v3 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      char v4 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v3 + 88))(&v7, v2, v3);
      outlined destroy of AnyAccessibilityAction((uint64_t)&v7);
      uint64_t v5 = type metadata accessor for AnyAccessibilityAction?;
      outlined destroy of AnyAccessibilityAction?((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for AnyAccessibilityAction?);
      outlined destroy of AnyAccessibilityAction((uint64_t)v9);
    }
    else
    {
      outlined destroy of AnyAccessibilityAction?((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for AnyAccessibilityAction?);
      outlined destroy of AnyAccessibilityAction((uint64_t)v9);
      char v4 = 0;
      uint64_t v5 = type metadata accessor for (AnyAccessibilityAction?, AnyAccessibilityAction?);
    }
  }
  else
  {
    outlined destroy of AnyAccessibilityAction?((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for AnyAccessibilityAction?);
    if (*(void *)&v15[8]) {
      uint64_t v5 = type metadata accessor for (AnyAccessibilityAction?, AnyAccessibilityAction?);
    }
    else {
      uint64_t v5 = type metadata accessor for AnyAccessibilityAction?;
    }
    if (*(void *)&v15[8]) {
      char v4 = 0;
    }
    else {
      char v4 = -1;
    }
  }
  outlined destroy of AnyAccessibilityAction?((uint64_t)v12, (uint64_t (*)(void))v5);
  outlined destroy of AnyAccessibilityAction?((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for AnyAccessibilityAction?);
  return v4 & 1;
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.name.getter in conformance AnyAccessibilityAction()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.image.getter in conformance AnyAccessibilityAction()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.category.getter in conformance AnyAccessibilityAction()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.perform(value:) in conformance AnyAccessibilityAction(uint64_t a1)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(a1, v3, v4);
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.impliedRole(for:) in conformance AnyAccessibilityAction(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  v7[0] = v2;
  v7[1] = v3;
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48))(v7, v4, v5);
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.asReference(for:) in conformance AnyAccessibilityAction(uint64_t a1)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, v3, v4);
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.asCustomAction(category:) in conformance AnyAccessibilityAction(long long *a1)
{
  long long v7 = *a1;
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v3 = *((void *)a1 + 3);
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  long long v8 = v7;
  uint64_t v9 = v2;
  uint64_t v10 = v3;
  return (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v5 + 64))(&v8, v4, v5);
}

void *protocol witness for AbstractAnyAccessibilityAction.asCombinedAction(name:properties:child:) in conformance AnyAccessibilityAction@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X5>, _OWORD *a7@<X8>)
{
  return AnyAccessibilityAction.asCombinedAction(name:properties:child:)(a1, a2, a3 & 1, a4, a5, a6, a7);
}

uint64_t protocol witness for AbstractAnyAccessibilityAction.asCodableAction(in:) in conformance AnyAccessibilityAction(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  v7[0] = v2;
  v7[1] = v3;
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 96))(v7, v4, v5);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyAccessibilityAction(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 88))(a2, v3, v4) & 1;
}

uint64_t closure #1 in AnyAccessibilityAction.init(_:appIntentExecutor:)()
{
  return static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)();
}

uint64_t closure #1 in closure #1 in AnyAccessibilityAction.init(_:appIntentExecutor:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  if (a1)
  {
    uint64_t v5 = *(void *)(a2 + 48);
    swift_retain();
    a1(v5);
    uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)a1);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void))(a2 + 56))();
  }
  *a3 = 2;
  return result;
}

uint64_t sub_1881098E4()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnyAccessibilityAction.asCombinedAction(name:properties:child:)@<X0>(char *a1@<X8>)
{
  return closure #1 in AnyAccessibilityAction.asCombinedAction(name:properties:child:)(v1 + 16, a1);
}

uint64_t sub_188109930()
{
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for AccessibilityActionStorage<AccessibilityVoidAction>()
{
  if (!lazy cache variable for type metadata for AccessibilityActionStorage<AccessibilityVoidAction>)
  {
    lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
    unint64_t v0 = type metadata accessor for AccessibilityActionStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActionStorage<AccessibilityVoidAction>);
    }
  }
}

uint64_t sub_1881099C4()
{
  if (*(void *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 72) >= 3uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 104))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 96));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined assign with take of AnyAccessibilityAction(long long *a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a2);
  long long v4 = *a1;
  long long v5 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 40) = *((unsigned char *)a1 + 40);
  return a2;
}

uint64_t type metadata accessor for AccessibilityActionReference()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for AccessibilityKindActionProvider?()
{
  if (!lazy cache variable for type metadata for AccessibilityKindActionProvider?)
  {
    type metadata accessor for CVarArg(255, &lazy cache variable for type metadata for AccessibilityKindActionProvider);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityKindActionProvider?);
    }
  }
}

uint64_t partial apply for closure #1 in closure #1 in AnyAccessibilityAction.init(_:appIntentExecutor:)@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in closure #1 in AnyAccessibilityAction.init(_:appIntentExecutor:)(*(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 32), a1);
}

uint64_t outlined init with copy of AnyAccessibilityAction?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyAccessibilityAction?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AnyAccessibilityAction?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for (AnyAccessibilityAction?, AnyAccessibilityAction?)()
{
  if (!lazy cache variable for type metadata for (AnyAccessibilityAction?, AnyAccessibilityAction?))
  {
    type metadata accessor for AnyAccessibilityAction?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyAccessibilityAction?, AnyAccessibilityAction?));
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityZoomAction and conformance AccessibilityZoomAction()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityZoomAction and conformance AccessibilityZoomAction;
  if (!lazy protocol witness table cache variable for type AccessibilityZoomAction and conformance AccessibilityZoomAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityZoomAction and conformance AccessibilityZoomAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityZoomAction and conformance AccessibilityZoomAction;
  if (!lazy protocol witness table cache variable for type AccessibilityZoomAction and conformance AccessibilityZoomAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityZoomAction and conformance AccessibilityZoomAction);
  }
  return result;
}

void destroy for AnyAccessibilityAction.Resolved(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 24);
}

void *initializeWithCopy for AnyAccessibilityAction.Resolved(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  long long v5 = *(void **)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  id v6 = v3;
  swift_bridgeObjectRetain();
  id v7 = v5;
  return a1;
}

uint64_t assignWithCopy for AnyAccessibilityAction.Resolved(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  long long v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v7 = *(void **)(a1 + 24);
  long long v8 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v8;
  id v9 = v8;

  return a1;
}

uint64_t assignWithTake for AnyAccessibilityAction.Resolved(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  long long v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for AnyAccessibilityAction.Resolved()
{
  return &type metadata for AnyAccessibilityAction.Resolved;
}

uint64_t type metadata completion function for AccessibilityActionReference()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for AccessibilityActionReference(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = *(void *)(v4 + 24);
  LODWORD(v6) = -1;
  if (v5 < 0xFFFFFFFF) {
    uint64_t v6 = *(void *)(v4 + 24);
  }
  if ((int)v6 - 2 < 0 && v5 >= 2)
  {
    outlined consume of Text.Storage(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
    swift_bridgeObjectRelease();
  }
  unint64_t v7 = (v4 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v7 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for AccessibilityActionReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = *(void *)(v8 + 24);
  LODWORD(v10) = -1;
  if (v9 < 0xFFFFFFFF) {
    uint64_t v10 = *(void *)(v8 + 24);
  }
  if ((int)v10 - 2 < 0 && v9 >= 2)
  {
    uint64_t v12 = *(void *)v8;
    uint64_t v13 = *(void *)(v8 + 8);
    char v14 = *(unsigned char *)(v8 + 16);
    outlined copy of Text.Storage(*(void *)v8, v13, v14);
    *(void *)unint64_t v7 = v12;
    *(void *)(v7 + 8) = v13;
    *(unsigned char *)(v7 + 16) = v14;
    *(void *)(v7 + 24) = *(void *)(v8 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v11;
  }
  unint64_t v15 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v16 + 24) < 0xFFFFFFFFuLL)
  {
    long long v20 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
    *(_OWORD *)(v15 + 16) = v20;
  }
  else
  {
    uint64_t v17 = *(void *)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    char v19 = *(unsigned char *)(v16 + 16);
    outlined copy of Text.Storage(*(void *)v16, v18, v19);
    *(void *)unint64_t v15 = v17;
    *(void *)(v15 + 8) = v18;
    *(unsigned char *)(v15 + 16) = v19;
    *(void *)(v15 + 24) = *(void *)(v16 + 24);
    swift_bridgeObjectRetain();
  }
  *(void *)((v15 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t assignWithCopy for AccessibilityActionReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = *(void *)(v7 + 24);
  LODWORD(v10) = -1;
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  else {
    uint64_t v11 = *(void *)(v7 + 24);
  }
  int v12 = v11 - 2;
  unint64_t v13 = *(void *)(v8 + 24);
  if (v13 < 0xFFFFFFFF) {
    uint64_t v10 = *(void *)(v8 + 24);
  }
  int v14 = v10 - 2;
  if (v12 < 0)
  {
    if ((v14 & 0x80000000) == 0)
    {
      if (v9 >= 2)
      {
        outlined consume of Text.Storage(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
        swift_bridgeObjectRelease();
      }
      goto LABEL_14;
    }
    if (v9 >= 2)
    {
      if (v13 >= 2)
      {
        uint64_t v34 = *(void *)v8;
        uint64_t v35 = *(void *)(v8 + 8);
        char v36 = *(unsigned char *)(v8 + 16);
        outlined copy of Text.Storage(*(void *)v8, v35, v36);
        uint64_t v37 = *(void *)v7;
        uint64_t v38 = *(void *)(v7 + 8);
        char v39 = *(unsigned char *)(v7 + 16);
        *(void *)unint64_t v7 = v34;
        *(void *)(v7 + 8) = v35;
        *(unsigned char *)(v7 + 16) = v36;
        outlined consume of Text.Storage(v37, v38, v39);
        *(void *)(v7 + 24) = *(void *)(v8 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(v7);
        long long v33 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
        *(_OWORD *)(v7 + 16) = v33;
      }
      goto LABEL_15;
    }
  }
  else if ((v14 & 0x80000000) == 0)
  {
LABEL_14:
    long long v15 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v15;
    goto LABEL_15;
  }
  if (v13 < 2) {
    goto LABEL_14;
  }
  uint64_t v30 = *(void *)v8;
  uint64_t v31 = *(void *)(v8 + 8);
  char v32 = *(unsigned char *)(v8 + 16);
  outlined copy of Text.Storage(*(void *)v8, v31, v32);
  *(void *)unint64_t v7 = v30;
  *(void *)(v7 + 8) = v31;
  *(unsigned char *)(v7 + 16) = v32;
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRetain();
LABEL_15:
  unint64_t v16 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = *(void *)(v17 + 24);
  if (*(void *)(v16 + 24) < 0xFFFFFFFFuLL)
  {
    if (v18 >= 0xFFFFFFFF)
    {
      uint64_t v25 = *(void *)v17;
      uint64_t v26 = *(void *)(v17 + 8);
      char v27 = *(unsigned char *)(v17 + 16);
      outlined copy of Text.Storage(*(void *)v17, v26, v27);
      *(void *)unint64_t v16 = v25;
      *(void *)(v16 + 8) = v26;
      *(unsigned char *)(v16 + 16) = v27;
      *(void *)(v16 + 24) = *(void *)(v17 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_22;
    }
LABEL_21:
    long long v28 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v28;
    goto LABEL_22;
  }
  if (v18 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(void *)v16, *(void *)(v16 + 8), *(unsigned char *)(v16 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  uint64_t v19 = *(void *)v17;
  uint64_t v20 = *(void *)(v17 + 8);
  char v21 = *(unsigned char *)(v17 + 16);
  outlined copy of Text.Storage(*(void *)v17, v20, v21);
  uint64_t v22 = *(void *)v16;
  uint64_t v23 = *(void *)(v16 + 8);
  char v24 = *(unsigned char *)(v16 + 16);
  *(void *)unint64_t v16 = v19;
  *(void *)(v16 + 8) = v20;
  *(unsigned char *)(v16 + 16) = v21;
  outlined consume of Text.Storage(v22, v23, v24);
  *(void *)(v16 + 24) = *(void *)(v17 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_22:
  *(void *)((v16 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v17 + 39) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for AccessibilityActionReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = v8[1];
  *unint64_t v7 = *v8;
  v7[1] = v9;
  uint64_t v10 = (_OWORD *)(((unint64_t)v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (_OWORD *)(((unint64_t)v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  long long v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  *(void *)(((unint64_t)v10 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v11 + 39) & 0xFFFFFFFFFFFFFFF8);
  swift_unknownObjectWeakTakeInit();
  return a1;
}

uint64_t assignWithTake for AccessibilityActionReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = *(void *)(v7 + 24);
  LODWORD(v10) = -1;
  if (v9 < 0xFFFFFFFF) {
    uint64_t v10 = *(void *)(v7 + 24);
  }
  if ((int)v10 - 2 >= 0) {
    goto LABEL_4;
  }
  unint64_t v18 = *(void *)(v8 + 24);
  LODWORD(v19) = -1;
  if (v18 < 0xFFFFFFFF) {
    uint64_t v19 = *(void *)(v8 + 24);
  }
  if ((int)v19 - 2 >= 0)
  {
    if (v9 >= 2)
    {
      outlined consume of Text.Storage(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
      swift_bridgeObjectRelease();
    }
    goto LABEL_4;
  }
  if (v9 < 2)
  {
LABEL_4:
    long long v11 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v11;
    goto LABEL_5;
  }
  if (v18 >= 2)
  {
    char v23 = *(unsigned char *)(v8 + 16);
    uint64_t v24 = *(void *)v7;
    uint64_t v25 = *(void *)(v7 + 8);
    char v26 = *(unsigned char *)(v7 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    *(unsigned char *)(v7 + 16) = v23;
    outlined consume of Text.Storage(v24, v25, v26);
    *(void *)(v7 + 24) = *(void *)(v8 + 24);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Text(v7);
    long long v22 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v22;
  }
LABEL_5:
  unint64_t v12 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v12 + 24) < 0xFFFFFFFFuLL)
  {
LABEL_14:
    long long v20 = *(_OWORD *)(v13 + 16);
    *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
    *(_OWORD *)(v12 + 16) = v20;
    goto LABEL_15;
  }
  if (*(void *)(v13 + 24) < 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v12, *(void *)(v12 + 8), *(unsigned char *)(v12 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  char v14 = *(unsigned char *)(v13 + 16);
  uint64_t v15 = *(void *)v12;
  uint64_t v16 = *(void *)(v12 + 8);
  char v17 = *(unsigned char *)(v12 + 16);
  *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
  *(unsigned char *)(v12 + 16) = v14;
  outlined consume of Text.Storage(v15, v16, v17);
  *(void *)(v12 + 24) = *(void *)(v13 + 24);
  swift_bridgeObjectRelease();
LABEL_15:
  *(void *)((v12 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v13 + 39) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityActionReference(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18810A798);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

double storeEnumTagSinglePayload for AccessibilityActionReference(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFE)
            {
              unint64_t v20 = (((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
              if (a2 > 0x7FFFFFFE)
              {
                double result = 0.0;
                *(_OWORD *)unint64_t v20 = 0u;
                *(_OWORD *)(v20 + 16) = 0u;
                *(_DWORD *)unint64_t v20 = a2 - 0x7FFFFFFF;
              }
              else
              {
                *(void *)(v20 + 24) = a2;
              }
            }
            else
            {
              uint64_t v19 = *(void (**)(void))(v6 + 56);
              v19();
            }
          }
          break;
      }
      return result;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((((v9 + 7) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((((v9 + 7) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((((v9 + 7) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v17 = ~v8 + a2;
    bzero(a1, ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x18810A9C8);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityActionStorage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 19) & 0xFFFFFFFFFFFFFFF8 | 4) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v12 = *(void *)(v11 + 24);
    LODWORD(v13) = -1;
    if (v12 < 0xFFFFFFFF) {
      uint64_t v13 = *(void *)(v11 + 24);
    }
    if ((int)v13 - 2 < 0 && v12 >= 2)
    {
      uint64_t v15 = *(void *)v11;
      uint64_t v16 = *(void *)(v11 + 8);
      char v17 = *(unsigned char *)(v11 + 16);
      outlined copy of Text.Storage(*(void *)v11, v16, v17);
      *(void *)unint64_t v10 = v15;
      *(void *)(v10 + 8) = v16;
      *(unsigned char *)(v10 + 16) = v17;
      *(void *)(v10 + 24) = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v14 = *(_OWORD *)(v11 + 16);
      *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
      *(_OWORD *)(v10 + 16) = v14;
    }
    unint64_t v18 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v19 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)(v19 + 24) < 0xFFFFFFFFuLL)
    {
      long long v23 = *(_OWORD *)(v19 + 16);
      *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 16) = v23;
    }
    else
    {
      uint64_t v20 = *(void *)v19;
      uint64_t v21 = *(void *)(v19 + 8);
      char v22 = *(unsigned char *)(v19 + 16);
      outlined copy of Text.Storage(*(void *)v19, v21, v22);
      *(void *)unint64_t v18 = v20;
      *(void *)(v18 + 8) = v21;
      *(unsigned char *)(v18 + 16) = v22;
      *(void *)(v18 + 24) = *(void *)(v19 + 24);
      swift_bridgeObjectRetain();
    }
    uint64_t v24 = (void *)((v18 + 39) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v25 = (void *)((v19 + 39) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v24 = *v25;
    char v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    char v27 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v28 = v27[1];
    *char v26 = *v27;
    v26[1] = v28;
    *(_DWORD *)(((unint64_t)v26 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v27 + 19) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithCopy for AccessibilityActionStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = *(void *)(v8 + 24);
  LODWORD(v10) = -1;
  if (v9 < 0xFFFFFFFF) {
    uint64_t v10 = *(void *)(v8 + 24);
  }
  if ((int)v10 - 2 < 0 && v9 >= 2)
  {
    uint64_t v12 = *(void *)v8;
    uint64_t v13 = *(void *)(v8 + 8);
    char v14 = *(unsigned char *)(v8 + 16);
    outlined copy of Text.Storage(*(void *)v8, v13, v14);
    *(void *)unint64_t v7 = v12;
    *(void *)(v7 + 8) = v13;
    *(unsigned char *)(v7 + 16) = v14;
    *(void *)(v7 + 24) = *(void *)(v8 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v11;
  }
  unint64_t v15 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v16 + 24) < 0xFFFFFFFFuLL)
  {
    long long v20 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
    *(_OWORD *)(v15 + 16) = v20;
  }
  else
  {
    uint64_t v17 = *(void *)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    char v19 = *(unsigned char *)(v16 + 16);
    outlined copy of Text.Storage(*(void *)v16, v18, v19);
    *(void *)unint64_t v15 = v17;
    *(void *)(v15 + 8) = v18;
    *(unsigned char *)(v15 + 16) = v19;
    *(void *)(v15 + 24) = *(void *)(v16 + 24);
    swift_bridgeObjectRetain();
  }
  uint64_t v21 = (void *)((v15 + 39) & 0xFFFFFFFFFFFFFFF8);
  char v22 = (void *)((v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v21 = *v22;
  long long v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = v24[1];
  *long long v23 = *v24;
  v23[1] = v25;
  *(_DWORD *)(((unint64_t)v23 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v24 + 19) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityActionStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = *(void *)(v7 + 24);
  LODWORD(v10) = -1;
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  else {
    uint64_t v11 = *(void *)(v7 + 24);
  }
  int v12 = v11 - 2;
  unint64_t v13 = *(void *)(v8 + 24);
  if (v13 < 0xFFFFFFFF) {
    uint64_t v10 = *(void *)(v8 + 24);
  }
  int v14 = v10 - 2;
  if (v12 < 0)
  {
    if ((v14 & 0x80000000) == 0)
    {
      if (v9 >= 2)
      {
        outlined consume of Text.Storage(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
        swift_bridgeObjectRelease();
      }
      goto LABEL_14;
    }
    if (v9 >= 2)
    {
      if (v13 >= 2)
      {
        uint64_t v39 = *(void *)v8;
        uint64_t v40 = *(void *)(v8 + 8);
        char v41 = *(unsigned char *)(v8 + 16);
        outlined copy of Text.Storage(*(void *)v8, v40, v41);
        uint64_t v42 = *(void *)v7;
        uint64_t v43 = *(void *)(v7 + 8);
        char v44 = *(unsigned char *)(v7 + 16);
        *(void *)unint64_t v7 = v39;
        *(void *)(v7 + 8) = v40;
        *(unsigned char *)(v7 + 16) = v41;
        outlined consume of Text.Storage(v42, v43, v44);
        *(void *)(v7 + 24) = *(void *)(v8 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(v7);
        long long v38 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
        *(_OWORD *)(v7 + 16) = v38;
      }
      goto LABEL_15;
    }
  }
  else if ((v14 & 0x80000000) == 0)
  {
LABEL_14:
    long long v15 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v15;
    goto LABEL_15;
  }
  if (v13 < 2) {
    goto LABEL_14;
  }
  uint64_t v35 = *(void *)v8;
  uint64_t v36 = *(void *)(v8 + 8);
  char v37 = *(unsigned char *)(v8 + 16);
  outlined copy of Text.Storage(*(void *)v8, v36, v37);
  *(void *)unint64_t v7 = v35;
  *(void *)(v7 + 8) = v36;
  *(unsigned char *)(v7 + 16) = v37;
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRetain();
LABEL_15:
  unint64_t v16 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = *(void *)(v17 + 24);
  if (*(void *)(v16 + 24) < 0xFFFFFFFFuLL)
  {
    if (v18 >= 0xFFFFFFFF)
    {
      uint64_t v25 = *(void *)v17;
      uint64_t v26 = *(void *)(v17 + 8);
      char v27 = *(unsigned char *)(v17 + 16);
      outlined copy of Text.Storage(*(void *)v17, v26, v27);
      *(void *)unint64_t v16 = v25;
      *(void *)(v16 + 8) = v26;
      *(unsigned char *)(v16 + 16) = v27;
      *(void *)(v16 + 24) = *(void *)(v17 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_22;
    }
LABEL_21:
    long long v28 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v28;
    goto LABEL_22;
  }
  if (v18 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(void *)v16, *(void *)(v16 + 8), *(unsigned char *)(v16 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  uint64_t v19 = *(void *)v17;
  uint64_t v20 = *(void *)(v17 + 8);
  char v21 = *(unsigned char *)(v17 + 16);
  outlined copy of Text.Storage(*(void *)v17, v20, v21);
  uint64_t v22 = *(void *)v16;
  uint64_t v23 = *(void *)(v16 + 8);
  char v24 = *(unsigned char *)(v16 + 16);
  *(void *)unint64_t v16 = v19;
  *(void *)(v16 + 8) = v20;
  *(unsigned char *)(v16 + 16) = v21;
  outlined consume of Text.Storage(v22, v23, v24);
  *(void *)(v16 + 24) = *(void *)(v17 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_22:
  uint64_t v29 = (void *)((v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = (void *)((v17 + 39) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v29 = *v30;
  swift_retain();
  swift_release();
  uint64_t v31 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  char v32 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  swift_retain();
  swift_release();
  *(_DWORD *)(((unint64_t)v31 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v32 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for AccessibilityActionStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = v8[1];
  *unint64_t v7 = *v8;
  v7[1] = v9;
  uint64_t v10 = (_OWORD *)(((unint64_t)v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (_OWORD *)(((unint64_t)v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  long long v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  unint64_t v13 = (void *)(((unint64_t)v10 + 39) & 0xFFFFFFFFFFFFFFF8);
  int v14 = (void *)(((unint64_t)v11 + 39) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v13 = *v14;
  long long v15 = (_OWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (_OWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v15 = *v16;
  *(_DWORD *)(((unint64_t)v15 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v16 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AccessibilityActionStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = *(void *)(v7 + 24);
  LODWORD(v10) = -1;
  if (v9 < 0xFFFFFFFF) {
    uint64_t v10 = *(void *)(v7 + 24);
  }
  if ((int)v10 - 2 >= 0) {
    goto LABEL_4;
  }
  unint64_t v18 = *(void *)(v8 + 24);
  LODWORD(v19) = -1;
  if (v18 < 0xFFFFFFFF) {
    uint64_t v19 = *(void *)(v8 + 24);
  }
  if ((int)v19 - 2 >= 0)
  {
    if (v9 >= 2)
    {
      outlined consume of Text.Storage(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
      swift_bridgeObjectRelease();
    }
    goto LABEL_4;
  }
  if (v9 < 2)
  {
LABEL_4:
    long long v11 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v11;
    goto LABEL_5;
  }
  if (v18 >= 2)
  {
    char v27 = *(unsigned char *)(v8 + 16);
    uint64_t v28 = *(void *)v7;
    uint64_t v29 = *(void *)(v7 + 8);
    char v30 = *(unsigned char *)(v7 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    *(unsigned char *)(v7 + 16) = v27;
    outlined consume of Text.Storage(v28, v29, v30);
    *(void *)(v7 + 24) = *(void *)(v8 + 24);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Text(v7);
    long long v26 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v26;
  }
LABEL_5:
  unint64_t v12 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v12 + 24) < 0xFFFFFFFFuLL)
  {
LABEL_14:
    long long v20 = *(_OWORD *)(v13 + 16);
    *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
    *(_OWORD *)(v12 + 16) = v20;
    goto LABEL_15;
  }
  if (*(void *)(v13 + 24) < 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v12, *(void *)(v12 + 8), *(unsigned char *)(v12 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  char v14 = *(unsigned char *)(v13 + 16);
  uint64_t v15 = *(void *)v12;
  uint64_t v16 = *(void *)(v12 + 8);
  char v17 = *(unsigned char *)(v12 + 16);
  *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
  *(unsigned char *)(v12 + 16) = v14;
  outlined consume of Text.Storage(v15, v16, v17);
  *(void *)(v12 + 24) = *(void *)(v13 + 24);
  swift_bridgeObjectRelease();
LABEL_15:
  char v21 = (void *)((v12 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (void *)((v13 + 39) & 0xFFFFFFFFFFFFFFF8);
  *char v21 = *v22;
  swift_release();
  uint64_t v23 = (_OWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  char v24 = (_OWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v23 = *v24;
  swift_release();
  *(_DWORD *)(((unint64_t)v23 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v24 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityActionStorage(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2
    && *((unsigned char *)a1
       + ((((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 19) & 0xFFFFFFFFFFFFFFF8 | 4)))
  {
    return v7 + *a1 + 1;
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v9 = *(void *)(((((((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

void storeEnumTagSinglePayload for AccessibilityActionStorage(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = (((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 19) & 0xFFFFFFFFFFFFFFF8 | 4;
  if (v8 >= a2)
  {
    if (v8 < a3) {
      a1[v10] = 0;
    }
    if (a2)
    {
      if (v7 < 0x7FFFFFFF)
      {
        unint64_t v13 = (void *)((((((((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((a2 & 0x80000000) != 0)
        {
          *unint64_t v13 = a2 ^ 0x80000000;
          v13[1] = 0;
        }
        else
        {
          *unint64_t v13 = a2 - 1;
        }
      }
      else
      {
        unint64_t v12 = *(void (**)(void))(v6 + 56);
        v12();
      }
    }
  }
  else
  {
    int v11 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v11;
    if (v8 < a3) {
      a1[v10] = 1;
    }
  }
}

uint64_t instantiation function for generic protocol witness table for AccessibilityActionReference<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t *outlined release of AccessibilityActionStorage<AccessibilityVoidAction>(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  uint64_t v6 = a1[8];
  uint64_t v7 = a1[9];
  uint64_t v8 = a1[10];
  uint64_t v9 = a1[11];
  outlined consume of AccessibilityActionKind.ActionKind(*a1, a1[1], a1[2], a1[3]);
  outlined consume of AccessibilityActionCategory?(v2, v3, v4, v5);
  outlined consume of Text?(v6, v7, v8, v9);
  swift_release();
  swift_release();
  return a1;
}

uint64_t partial apply for closure #1 in AccessibilityActionStorage.perform(value:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v3 = type metadata accessor for AccessibilityActionStorage();
  return (*(uint64_t (**)(uint64_t))(v2 + *(int *)(v3 + 48)))(v1);
}

uint64_t type metadata completion function for BadgedView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BadgedView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 32) & (unint64_t)~v7) + *(void *)(v6 + 64) > 0x18)
  {
    uint64_t v10 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    unint64_t v11 = a2[2];
    if ((v11 >> 1) > 0x80000000)
    {
      long long v15 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v15;
    }
    else
    {
      uint64_t v12 = *a2;
      uint64_t v13 = a2[1];
      uint64_t v14 = a2[3];
      outlined copy of BadgeLabel(*a2, v13, a2[2]);
      *uint64_t v4 = v12;
      v4[1] = v13;
      _OWORD v4[2] = v11;
      v4[3] = v14;
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v4 + v7 + 32) & ~v7, ((unint64_t)a2 + v7 + 32) & ~v7, v5);
  }
  return v4;
}

uint64_t destroy for BadgedView(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  if ((v4 >> 1) <= 0x80000000) {
    outlined consume of BadgeLabel(*a1, a1[1], v4);
  }
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = ((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t initializeWithCopy for BadgedView(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a2[2];
  if ((v6 >> 1) > 0x80000000)
  {
    long long v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    uint64_t v9 = a2[3];
    outlined copy of BadgeLabel(*a2, v8, v6);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v9;
  }
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 16))((*(unsigned __int8 *)(v11 + 80) + 32 + a1) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t *assignWithCopy for BadgedView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a1[2];
  unint64_t v7 = a2[2];
  unint64_t v8 = v7 >> 1;
  if ((v6 >> 1) > 0x80000000)
  {
    if (v8 <= 0x80000000)
    {
      uint64_t v15 = *a2;
      uint64_t v16 = a2[1];
      uint64_t v17 = a2[3];
      outlined copy of BadgeLabel(*a2, v16, v7);
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v7;
      a1[3] = v17;
      goto LABEL_8;
    }
LABEL_7:
    long long v18 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v18;
    goto LABEL_8;
  }
  if (v8 > 0x80000000)
  {
    outlined consume of BadgeLabel(*a1, a1[1], v6);
    goto LABEL_7;
  }
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  outlined copy of BadgeLabel(*a2, v10, v7);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v7;
  a1[3] = v11;
  outlined consume of BadgeLabel(v12, v13, v14);
LABEL_8:
  uint64_t v19 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v19 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  return a1;
}

uint64_t *assignWithTake for BadgedView(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = a1[2];
  if ((v6 >> 1) > 0x80000000) {
    goto LABEL_5;
  }
  unint64_t v7 = *(void *)(a2 + 16);
  if ((v7 >> 1) > 0x80000000)
  {
    outlined consume of BadgeLabel(*a1, a1[1], v6);
LABEL_5:
    long long v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v11;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v7;
  a1[3] = v8;
  outlined consume of BadgeLabel(v9, v10, v6);
LABEL_6:
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(unsigned __int8 *)(v12 + 80) + 32 + a2) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for BadgedView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 32) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0x7FFFFFFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 32) & ~v6);
      }
      uint64_t v15 = *((void *)a1 + 2) >> 1;
      if (v15 > 0x80000000) {
        unsigned int v16 = ~v15;
      }
      else {
        unsigned int v16 = -1;
      }
      if (v16 + 1 >= 2) {
        return v16;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for BadgedView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 32) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x18810C044);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0x7FFFFFFE)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 32] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *(_OWORD *)a1 = 0u;
          *((_OWORD *)a1 + 1) = 0u;
          *(_DWORD *)a1 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *(void *)a1 = 0;
          *((void *)a1 + 1) = 0;
          *((void *)a1 + 2) = 2 * ~a2;
          *((void *)a1 + 3) = 0;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for BadgedView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for BadgeLabel(uint64_t *a1)
{
  return outlined consume of BadgeLabel(*a1, a1[1], a1[2]);
}

uint64_t *initializeWithCopy for BadgeLabel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of BadgeLabel(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for BadgeLabel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of BadgeLabel(*a2, v4, v5);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of BadgeLabel(v7, v8, v9);
  return a1;
}

uint64_t *assignWithTake for BadgeLabel(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  long long v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v6;
  outlined consume of BadgeLabel(v3, v5, v4);
  return a1;
}

ValueMetadata *type metadata accessor for BadgeLabel()
{
  return &type metadata for BadgeLabel;
}

unint64_t lazy protocol witness table accessor for type BadgeLabel and conformance BadgeLabel()
{
  unint64_t result = lazy protocol witness table cache variable for type BadgeLabel and conformance BadgeLabel;
  if (!lazy protocol witness table cache variable for type BadgeLabel and conformance BadgeLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BadgeLabel and conformance BadgeLabel);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in BadgeLabel()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized closure #1 in AccessibilityBadgedViewModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = a1;
  if (a3 < 0)
  {
    uint64_t v8 = a2;
    char v9 = a3 & 1;
    outlined copy of Text.Storage(a1, a2, a3 & 1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v17[0] = a1;
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v8 = v7;
    char v9 = 0;
  }
  uint64_t v10 = *a5;
  uint64_t v11 = a5[1];
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v6, v8, v9);
  swift_bridgeObjectRetain();
  AccessibilityValueStorage.init(description:)();
  outlined init with copy of AccessibilityValueStorage((uint64_t)v17, (uint64_t)v16);
  swift_beginAccess();
  uint64_t v12 = *(void *)(v10 + 16);
  swift_retain();
  swift_retain();
  specialized AccessibilityProperties.subscript.getter(v12, v15);
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v16, (uint64_t)v14);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v14);
  specialized AccessibilityProperties.subscript.getter(*(void *)(v10 + 16), v14);
  specialized Optional<A>.merge(with:)((uint64_t)v15);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v14);
  outlined destroy of AccessibilityValueStorage?((uint64_t)v15);
  swift_endAccess();
  outlined destroy of AccessibilityValueStorage?((uint64_t)v16);
  outlined destroy of AccessibilityValueStorage((uint64_t)v17);
  outlined consume of Text.Storage(v6, v8, v9);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *a5 = v10;
  a5[1] = v11;
  return result;
}

uint64_t BadgedView.init(badgeLabel:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void)@<X4>, void *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  type metadata accessor for BadgedView();
  return a5();
}

uint64_t BadgedView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v21[1] = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  type metadata accessor for StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier>();
  uint64_t v5 = type metadata accessor for ModifiedContent();
  unint64_t v6 = lazy protocol witness table accessor for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content();
  uint64_t v32 = *(void *)(a1 + 24);
  uint64_t v7 = v32;
  unint64_t v33 = lazy protocol witness table accessor for type StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v21[0] = MEMORY[0x1E4F3FBC0];
  uint64_t v28 = &type metadata for BadgeViewStyleConfiguration.Content;
  uint64_t v29 = v5;
  uint64_t v30 = v6;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for StaticSourceWriter();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unsigned int v14 = (char *)v21 - v13;
  uint64_t v15 = *(void *)(v2 + 8);
  uint64_t v16 = *(void *)(v2 + 16);
  uint64_t v17 = *(void *)(v2 + 24);
  uint64_t v28 = *(ValueMetadata **)v2;
  uint64_t v29 = v15;
  uint64_t v30 = v16;
  uint64_t WitnessTable = v17;
  uint64_t v23 = v4;
  uint64_t v24 = v7;
  uint64_t v25 = v2;
  outlined copy of BadgeLabel?((uint64_t)v28, v15, v16);
  unint64_t v18 = lazy protocol witness table accessor for type ResolvedBadgedView and conformance ResolvedBadgedView();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for BadgeViewStyleConfiguration.Content, (void (*)(double))partial apply for closure #1 in BadgedView.body.getter, (uint64_t)v22, (uint64_t)&type metadata for ResolvedBadgedView, (uint64_t)&type metadata for BadgeViewStyleConfiguration.Content, v5, v18);
  outlined consume of BadgeLabel?((uint64_t)v28, v29, v30);
  unint64_t v26 = v18;
  char v27 = &protocol witness table for StaticSourceWriter<A, B>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v11, v8);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v19)(v14, v8);
}

uint64_t closure #1 in BadgedView.body.getter(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier>();
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unsigned int v14 = (char *)v19 - v13;
  type metadata accessor for BadgedView();
  long long v15 = a1[1];
  v20[0] = *a1;
  v20[1] = v15;
  MEMORY[0x18C113660](v20, a2, v7, a3);
  unint64_t v16 = lazy protocol witness table accessor for type StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v19[0] = a3;
  v19[1] = v16;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v11, v8);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v17)(v14, v8);
}

uint64_t AccessibilityConfigurationViewModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  outlined copy of BadgeLabel?(a1, a2, a3);
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  Dictionary.init(minimumCapacity:)();
  AccessibilityAttachment.init(properties:)();
  uint64_t v10 = v14;
  _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v13;
  *(void *)(result + 24) = v10;
  uint64_t v13 = result;
  uint64_t v14 = 0;
  if (a3 >> 1 == 0xFFFFFFFF)
  {
    uint64_t v12 = 0;
  }
  else
  {
    outlined copy of BadgeLabel(a1, a2, a3);
    specialized closure #1 in AccessibilityBadgedViewModifier.body(content:)(a1, a2, a3, a4, &v13);
    outlined consume of BadgeLabel?(a1, a2, a3);
    outlined consume of BadgeLabel?(a1, a2, a3);
    uint64_t result = v13;
    uint64_t v12 = v14;
  }
  *a5 = result;
  a5[1] = v12;
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance AccessibilityConfigurationViewModifier@<X0>(uint64_t *a1@<X8>)
{
  return AccessibilityConfigurationViewModifier.body(content:)(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t protocol witness for View.body.getter in conformance BadgeLabel@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Locale();
  MEMORY[0x1F4188790](v3 - 8);
  _s10Foundation18IntegerFormatStyleVySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for IntegerFormatStyle<Int>, (uint64_t (*)(void))lazy protocol witness table accessor for type Int and conformance Int, MEMORY[0x1E4FBB550], MEMORY[0x1E4F27420]);
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = *v1;
  uint64_t v6 = v1[2];
  if (v6 < 0)
  {
    uint64_t v11 = v1[3];
    uint64_t v9 = v1[1];
    char v13 = v6 & 1;
    outlined copy of Text.Storage(v5, v9, v6 & 1);
    uint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    static Locale.autoupdatingCurrent.getter();
    lazy protocol witness table accessor for type Int and conformance Int();
    IntegerFormatStyle.init(locale:)();
    lazy protocol witness table accessor for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>();
    uint64_t result = Text.init<A>(_:format:)();
    uint64_t v5 = result;
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    char v13 = v12 & 1;
  }
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v13;
  *(void *)(a1 + 24) = v11;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in BadgedView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier>)
  {
    lazy protocol witness table accessor for type AccessibilityBadgedViewNeedsValue and conformance AccessibilityBadgedViewNeedsValue();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityBadgedViewNeedsValue and conformance AccessibilityBadgedViewNeedsValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityBadgedViewNeedsValue and conformance AccessibilityBadgedViewNeedsValue;
  if (!lazy protocol witness table cache variable for type AccessibilityBadgedViewNeedsValue and conformance AccessibilityBadgedViewNeedsValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBadgedViewNeedsValue and conformance AccessibilityBadgedViewNeedsValue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier>();
    lazy protocol witness table accessor for type AccessibilityConfigurationViewModifier and conformance AccessibilityConfigurationViewModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<AccessibilityBadgedViewNeedsValue, AccessibilityConfigurationViewModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityConfigurationViewModifier and conformance AccessibilityConfigurationViewModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityConfigurationViewModifier and conformance AccessibilityConfigurationViewModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityConfigurationViewModifier and conformance AccessibilityConfigurationViewModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityConfigurationViewModifier and conformance AccessibilityConfigurationViewModifier);
  }
  return result;
}

uint64_t partial apply for closure #1 in BadgedView.body.getter()
{
  return closure #1 in BadgedView.body.getter(*(_OWORD **)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

void *type metadata accessor for AccessibilityConfigurationViewModifier()
{
  return &unk_1ED4636C0;
}

uint64_t sub_18810CD94()
{
  return swift_getWitnessTable();
}

uint64_t sub_18810CE68()
{
  return MEMORY[0x1E4F41418];
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityConfigurationViewModifier()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityConfigurationViewModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityConfigurationViewModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityConfigurationViewModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityConfigurationViewModifier>, AccessibilityAttachmentModifier>();
    lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityConfigurationViewModifier> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityConfigurationViewModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityConfigurationViewModifier>, AccessibilityAttachmentModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityConfigurationViewModifier>, AccessibilityAttachmentModifier>)
  {
    _s10Foundation18IntegerFormatStyleVySiGMaTm_0(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityConfigurationViewModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityConfigurationViewModifier and conformance AccessibilityConfigurationViewModifier, (uint64_t)&unk_1ED4636C0, MEMORY[0x1E4F408E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityConfigurationViewModifier>, AccessibilityAttachmentModifier>);
    }
  }
}

void _s10Foundation18IntegerFormatStyleVySiGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityConfigurationViewModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityConfigurationViewModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityConfigurationViewModifier> and conformance _ViewModifier_Content<A>)
  {
    _s10Foundation18IntegerFormatStyleVySiGMaTm_0(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityConfigurationViewModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityConfigurationViewModifier and conformance AccessibilityConfigurationViewModifier, (uint64_t)&unk_1ED4636C0, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityConfigurationViewModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ViewTransform.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ViewTransform.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ViewTransform.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ViewTransform.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ViewTransform.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ViewTransform.CodingKeys.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ViewTransform.CodingKeys(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x736D657469;
  if (*v1) {
    unint64_t v2 = 0xD000000000000012;
  }
  unint64_t v3 = 0x8000000188325FC0;
  if (!*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ViewTransform.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000012;
  }
  else {
    return 0x736D657469;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ViewTransform.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ViewTransform.CodingKeys.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ViewTransform.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ViewTransform.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t ViewTransform.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<ViewTransform.CodingKeys>();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = *v1;
  uint64_t v10 = v1[1];
  uint64_t v11 = v1[2];
  uint64_t v12 = v1[3];
  uint64_t v13 = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v25 = MEMORY[0x1E4FBC860];
  uint64_t v20 = v9;
  uint64_t v21 = v10;
  uint64_t v22 = v11;
  uint64_t v23 = v12;
  uint64_t v24 = v13;
  unint64_t v18 = &v25;
  ViewTransform.forEach(inverted:_:)();
  uint64_t v20 = v25;
  char v19 = 0;
  type metadata accessor for [ViewTransform.Item]();
  lazy protocol witness table accessor for type [ViewTransform.Item] and conformance <A> [A]();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v20 = v9;
    uint64_t v21 = v10;
    uint64_t v22 = v11;
    uint64_t v23 = v12;
    uint64_t v24 = v13;
    ViewTransform.positionAdjustment.getter();
    uint64_t v20 = v14;
    uint64_t v21 = v15;
    char v19 = 1;
    type metadata accessor for CGSize(0);
    lazy protocol witness table accessor for type CGSize and conformance CGSize();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_bridgeObjectRelease();
}

void type metadata accessor for KeyedEncodingContainer<ViewTransform.CodingKeys>()
{
  if (!lazy cache variable for type metadata for KeyedEncodingContainer<ViewTransform.CodingKeys>)
  {
    lazy protocol witness table accessor for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys();
    unint64_t v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<ViewTransform.CodingKeys>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys;
  if (!lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys;
  if (!lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys;
  if (!lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys;
  if (!lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.CodingKeys and conformance ViewTransform.CodingKeys);
  }
  return result;
}

uint64_t closure #1 in ViewTransform.encode(to:)(uint64_t a1, uint64_t a2, char **a3)
{
  outlined init with copy of ViewTransform.Item(a1, (uint64_t)v9);
  uint64_t v4 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v4 + 2) + 1, 1, v4);
    *a3 = v4;
  }
  unint64_t v7 = *((void *)v4 + 2);
  unint64_t v6 = *((void *)v4 + 3);
  if (v7 >= v6 >> 1)
  {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v4);
    *a3 = v4;
  }
  *((void *)v4 + 2) = v7 + 1;
  return outlined init with take of ViewTransform.Item((uint64_t)v9, (uint64_t)&v4[120 * v7 + 32]);
}

uint64_t partial apply for closure #1 in ViewTransform.encode(to:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in ViewTransform.encode(to:)(a1, a2, *(char ***)(v2 + 16));
}

void type metadata accessor for [ViewTransform.Item]()
{
  if (!lazy cache variable for type metadata for [ViewTransform.Item])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [ViewTransform.Item]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [ViewTransform.Item] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ViewTransform.Item] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [ViewTransform.Item] and conformance <A> [A])
  {
    type metadata accessor for [ViewTransform.Item]();
    lazy protocol witness table accessor for type ViewTransform.Item and conformance ViewTransform.Item();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ViewTransform.Item] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewTransform.Item and conformance ViewTransform.Item()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewTransform.Item and conformance ViewTransform.Item;
  if (!lazy protocol witness table cache variable for type ViewTransform.Item and conformance ViewTransform.Item)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.Item and conformance ViewTransform.Item);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGSize and conformance CGSize()
{
  unint64_t result = lazy protocol witness table cache variable for type CGSize and conformance CGSize;
  if (!lazy protocol witness table cache variable for type CGSize and conformance CGSize)
  {
    type metadata accessor for CGSize(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGSize and conformance CGSize);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ViewTransform(void *a1)
{
  return ViewTransform.encode(to:)(a1);
}

unsigned char *storeEnumTagSinglePayload for ViewTransform.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18810D9B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewTransform.CodingKeys()
{
  return &type metadata for ViewTransform.CodingKeys;
}

uint64_t outlined init with copy of ViewTransform.Item(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of ViewTransform.Item(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t specialized Collection.subscript.getter(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed TextSelection) -> (@out PlatformItemList)(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  return v3;
}

unsigned char *TextEditorTextView.helper.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI18TextEditorTextView____lazy_storage___helper;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI18TextEditorTextView____lazy_storage___helper);
  if (v2)
  {
    uint64_t v3 = *(unsigned char **)(v0 + OBJC_IVAR____TtC7SwiftUI18TextEditorTextView____lazy_storage___helper);
  }
  else
  {
    uint64_t v4 = v0;
    id v5 = objc_allocWithZone((Class)type metadata accessor for ScrollViewHelper());
    unsigned int v6 = ScrollViewHelper.init(layoutState:phaseState:prefetchState:containerSize:axes:)(0, 1, 0, 1, 0, 1, 0, 1, 2);
    swift_unknownObjectWeakAssign();
    *(void *)&v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_delegate + 8] = &protocol witness table for TextEditorTextView;
    swift_unknownObjectWeakAssign();
    v6[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_defaultDismissKeyboardMode] = 2;
    unint64_t v7 = *(void **)(v4 + v1);
    *(void *)(v4 + v1) = v6;
    uint64_t v3 = v6;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

uint64_t specialized StringProtocol.replacingCharacters<A, B>(in:with:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  swift_bridgeObjectRetain();
  Substring.init<A>(_:)();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if ((v13 & 0x1000000000000000) != 0) {
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  Substring.init<A>(_:)();
  uint64_t v15 = v14;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v15 & 0x1000000000000000) != 0) {
    goto LABEL_25;
  }
  uint64_t v17 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v17) = 1;
  }
  uint64_t v18 = 4 << v17;
  unint64_t v19 = a1;
  if ((a1 & 0xC) == 4 << v17)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a5, a6);
    unint64_t v19 = result;
  }
  uint64_t v40 = a3;
  unint64_t v20 = a2;
  unint64_t v21 = a5 & 0x800000000000000;
  if ((a6 & 0x1000000000000000) != 0)
  {
    uint64_t v23 = a6 & 0x2000000000000000;
    uint64_t v25 = a5 & 0xFFFFFFFFFFFFLL;
    unint64_t v24 = HIBYTE(a6) & 0xF;
    if ((a6 & 0x2000000000000000) != 0) {
      unint64_t v32 = HIBYTE(a6) & 0xF;
    }
    else {
      unint64_t v32 = a5 & 0xFFFFFFFFFFFFLL;
    }
    if (v32 < v19 >> 16) {
      goto LABEL_43;
    }
    uint64_t result = String.UTF8View._foreignDistance(from:to:)();
    uint64_t v22 = result;
    if (v21) {
      uint64_t v26 = 7;
    }
    else {
      uint64_t v26 = 11;
    }
  }
  else
  {
    uint64_t v22 = v19 >> 16;
    uint64_t v23 = a6 & 0x2000000000000000;
    unint64_t v24 = HIBYTE(a6) & 0xF;
    uint64_t v25 = a5 & 0xFFFFFFFFFFFFLL;
    uint64_t v26 = 7;
  }
  if (!v23) {
    unint64_t v24 = v25;
  }
  uint64_t v27 = 4 << (v21 >> 59);
  unint64_t v28 = v26 | (v24 << 16);
  a2 = v20;
  if ((a6 & 0x1000000000000000) == 0) {
    uint64_t v27 = 8;
  }
  unint64_t v29 = v20;
  if ((v20 & 0xC) == v27)
  {
    unint64_t v33 = v20;
    uint64_t v34 = v22;
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v33, a5, a6);
    uint64_t v22 = v34;
    unint64_t v29 = result;
  }
  if ((v26 & 0xC) == v18)
  {
    unint64_t v35 = v26 | (v24 << 16);
    uint64_t v36 = v22;
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v35, a5, a6);
    uint64_t v22 = v36;
    unint64_t v28 = result;
    if ((a6 & 0x1000000000000000) == 0)
    {
LABEL_17:
      uint64_t v30 = (v28 >> 16) - (v29 >> 16);
      if ((a4 & 0x1000000000000000) == 0) {
        goto LABEL_18;
      }
      goto LABEL_37;
    }
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
    goto LABEL_17;
  }
  if (v24 < v29 >> 16)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v24 >= v28 >> 16)
  {
    uint64_t v37 = v22;
    uint64_t v38 = String.UTF8View._foreignDistance(from:to:)();
    uint64_t v22 = v37;
    uint64_t v30 = v38;
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_18:
      if ((a4 & 0x2000000000000000) != 0)
      {
        uint64_t result = HIBYTE(a4) & 0xF;
        uint64_t v31 = v22 + result;
        if (!__OFADD__(v22, result)) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v40 & 0xFFFFFFFFFFFFLL;
        uint64_t v31 = v22 + (v40 & 0xFFFFFFFFFFFFLL);
        if (!__OFADD__(v22, v40 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_23;
        }
      }
      goto LABEL_39;
    }
LABEL_37:
    uint64_t v39 = v22;
    uint64_t result = String.UTF8View._foreignCount()();
    uint64_t v31 = v39 + result;
    if (!__OFADD__(v39, result))
    {
LABEL_23:
      uint64_t result = v31 + v30;
      if (!__OFADD__(v31, v30))
      {
        MEMORY[0x18C115880](result);
LABEL_25:
        String.subscript.getter();
        lazy protocol witness table accessor for type Substring and conformance Substring();
        String.append<A>(contentsOf:)();
        swift_bridgeObjectRelease();
        String.append<A>(contentsOf:)();
        specialized Collection.subscript.getter(a2, a5, a6);
        String.append<A>(contentsOf:)();
        swift_bridgeObjectRelease();
        return 0;
      }
      goto LABEL_40;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

void static UIKitTextEditor._makeView(view:inputs:)(uint64_t a1@<X1>, double *a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v2 = *(_OWORD *)(a1 + 48);
  long long v8 = *(_OWORD *)(a1 + 32);
  long long v9 = v2;
  long long v10 = *(_OWORD *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v12[0] = v7[0];
  v12[1] = v3;
  v12[2] = v8;
  int v11 = *(_DWORD *)(a1 + 80);
  long long v6 = v7[0];
  if ((static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) == 0)
  {
    long long v6 = v12[0];
    static StyleContextAcceptsPredicate.evaluate(inputs:)();
  }
  type metadata accessor for _GraphInputs.SelectionBasedStorageKey<TextSelection>(0);
  outlined retain of _GraphInputs((uint64_t)v12);
  _sSo21NSAttributedStringKeyaABSHSCWlTm_0(&lazy protocol witness table cache variable for type _GraphInputs.SelectionBasedStorageKey<TextSelection> and conformance _GraphInputs.SelectionBasedStorageKey<A>, type metadata accessor for _GraphInputs.SelectionBasedStorageKey<TextSelection>);
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v12);
  int v4 = *MEMORY[0x1E4F4E7A0];
  if (v6 == *MEMORY[0x1E4F4E7A0])
  {
    if (DWORD1(v6) != v4) {
      goto LABEL_5;
    }
  }
  else
  {
    AGCreateWeakAttribute();
    if (DWORD1(v6) != v4)
    {
LABEL_5:
      AGCreateWeakAttribute();
      if (DWORD2(v6) != v4) {
        goto LABEL_6;
      }
LABEL_10:
      if (HIDWORD(v6) == v4) {
        goto LABEL_11;
      }
      goto LABEL_7;
    }
  }
  if (DWORD2(v6) == v4) {
    goto LABEL_10;
  }
LABEL_6:
  AGCreateWeakAttribute();
  if (HIDWORD(v6) != v4) {
LABEL_7:
  }
    AGCreateWeakAttribute();
LABEL_11:
  _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_5(0, &lazy cache variable for type metadata for _GraphValue<UIKitTextEditor>, type metadata accessor for UIKitTextEditor, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  type metadata accessor for TextEditorStyleConfiguration(0);
  AGGraphCreateOffsetAttribute2();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for UIKitTextViewAdaptor(0);
  lazy protocol witness table accessor for type UIKitTextEditor.MakeRepresentable and conformance UIKitTextEditor.MakeRepresentable();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v7, a2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance UIKitTextEditor.MakeRepresentable@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UIKitTextViewAdaptor(0);
  long long v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

double protocol witness for Rule.value.getter in conformance UIKitTextEditor.MakeRepresentable@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TextEditorStyleConfiguration(0);
  MEMORY[0x1F4188790](v3);
  id v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v6 = *(unsigned char *)(v1 + 4);
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI7BindingVyAA13TextSelectionVSgGSgWOcTm_0(Value, (uint64_t)v5, type metadata accessor for TextEditorStyleConfiguration);
  *(void *)a1 = swift_getKeyPath();
  *(unsigned char *)(a1 + 8) = 0;
  long long v8 = (int *)type metadata accessor for UIKitTextViewAdaptor(0);
  uint64_t v9 = a1 + v8[6];
  type metadata accessor for Binding<TextSelection?>(0);
  int v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  long long v18 = *(_OWORD *)(v1 + 8);
  uint64_t v12 = *(void *)(v1 + 24);
  uint64_t v13 = *(void *)(v1 + 32);
  v11(v9, 1, 1, v10);
  uint64_t v14 = *((void *)v5 + 2);
  uint64_t v15 = *((void *)v5 + 3);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = v15;
  outlined assign with take of TextInputValidation?((uint64_t)&v5[*(int *)(v3 + 20)], v9, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>?);
  uint64_t v16 = a1 + v8[7];
  double result = *(double *)&v18;
  *(_OWORD *)uint64_t v16 = v18;
  *(void *)(v16 + 16) = v12;
  *(void *)(v16 + 24) = v13;
  *(unsigned char *)(a1 + v8[8]) = v6;
  return result;
}

void protocol witness for View.body.getter in conformance UIKitTextEditor()
{
}

id UIKitTextViewAdaptor.makeUIView(context:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  type metadata accessor for TextEditorTextView();
  id v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v3, sel_setAllowsEditingTextAttributes_, 0);
  objc_msgSend(v3, sel_setDelegate_, v2);
  uint64_t v4 = *(void *)v1;
  char v5 = *(unsigned char *)(v1 + 8);
  id v6 = v3;
  outlined copy of Environment<Bool>.Content(v4, v5);
  specialized Environment.wrappedValue.getter(v4, v5);
  outlined consume of Environment<Bool>.Content(v4, v5);
  objc_msgSend(v6, sel_setBorderStyle_, 0);

  return v6;
}

uint64_t UIKitTextViewAdaptor.updateUIView(_:context:)(void *a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void **)(a2 + 40);
  if (*(unsigned char *)(a2 + 32) == 1)
  {
    MEMORY[0x1F4188790](a1);
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v6, 1);
    id v8 = v7;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v6, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v5, v6, 1);
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v5, v6, 1);

    uint64_t v5 = v13;
    uint64_t v6 = v14;
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollContentBackgroundKey>, (uint64_t)&type metadata for ScrollContentBackgroundKey, (uint64_t)&protocol witness table for ScrollContentBackgroundKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v6)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v9 = *((unsigned char *)v2 + *(int *)(type metadata accessor for UIKitTextViewAdaptor(0) + 32));
  TextEditorTextView.updateBackground(_:inheritBackground:)(v13, v14, v9);
  swift_release();
  uint64_t v10 = *v2;
  char v11 = *((unsigned char *)v3 + 8);
  outlined copy of Environment<Bool>.Content(*v3, v11);
  specialized Environment.wrappedValue.getter(v10, v11);
  outlined consume of Environment<Bool>.Content(v10, v11);
  objc_msgSend(a1, sel_setBorderStyle_, 0);
  specialized UIKitTextInputTraits.updateTraits(in:)(v5, v6);
  specialized UITextInputTraits_Private.updatePrivateTraits(in:)(v5, v6);
  uint64_t v13 = v5;
  uint64_t v14 = v6;
  UIKitTextEditorCoordinator.update(_:configuration:env:)((char *)a1, v3, &v13);
  uint64_t v13 = v5;
  uint64_t v14 = v6;
  specialized UIKitTextEditorCoordinatorBase.updateInputAccessoryGenerator(textView:env:)(a1, (uint64_t)&v13);
  swift_release();
  return swift_release();
}

void TextEditorTextView.updateBackground(_:inheritBackground:)(uint64_t a1, unsigned __int8 a2, char a3)
{
  int v6 = a2;
  id v7 = objc_msgSend(v3, sel_traitCollection);
  id v8 = objc_msgSend(v7, sel_userInterfaceIdiom);

  char v9 = self;
  uint64_t v10 = &selRef_clearColor;
  if (v8 != (id)6) {
    uint64_t v10 = &selRef_systemBackgroundColor;
  }
  id v11 = [v9 *v10];
  uint64_t v12 = v11;
  id v13 = 0;
  if (v6 != 2 && !a1 && (a3 & 1) == 0) {
    id v13 = v11;
  }
  id v14 = v13;
  objc_msgSend(v3, sel_setBackgroundColor_);
}

void UIKitTextEditorCoordinator.update(_:configuration:env:)(char *a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = MEMORY[0x1E4FBB128];
  uint64_t v9 = MEMORY[0x1E4FBB138];
  _ss8RangeSetVySS5IndexVGMaTm_1(0, &lazy cache variable for type metadata for RangeSet<String.Index>.Ranges, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC760]);
  uint64_t v11 = v10;
  uint64_t v111 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v110 = (char *)&v110 - v12;
  _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, v8, v9, MEMORY[0x1E4FBC788]);
  uint64_t v113 = v13;
  uint64_t v115 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v114 = (char *)&v110 - v14;
  uint64_t v116 = type metadata accessor for TextSelection.Indices(0);
  MEMORY[0x1F4188790](v116);
  long long v117 = (unint64_t *)((char *)&v110 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v123 = (uint64_t)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TextSelection?(0);
  MEMORY[0x1F4188790](v18 - 8);
  unint64_t v124 = (char *)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for TextSelection(0);
  uint64_t v121 = *(void *)(v20 - 8);
  uint64_t v122 = v20;
  MEMORY[0x1F4188790](v20);
  uint64_t v118 = (uint64_t)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *a3;
  uint64_t v22 = a3[1];
  uint64_t v24 = OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_viewIsUpdating;
  *(unsigned char *)(v4 + OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_viewIsUpdating) = 1;
  uint64_t v25 = v4 + OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_configuration;
  swift_beginAccess();
  outlined assign with copy of UIKitTextViewAdaptor((uint64_t)a2, v25, type metadata accessor for UIKitTextViewAdaptor);
  swift_endAccess();
  _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v22)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v26 = v4
      + OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_textInputValidation;
  swift_beginAccess();
  outlined assign with take of TextInputValidation?((uint64_t)&v130, v26, (uint64_t (*)(void))type metadata accessor for TextInputValidation?);
  swift_endAccess();
  *(void *)&long long v126 = v23;
  *((void *)&v126 + 1) = v22;
  *(void *)&long long v130 = v23;
  *((void *)&v130 + 1) = v22;
  specialized UIKitTextEditorCoordinatorBase.updateFindInteraction(textView:env:)(a1, (uint64_t)&v130);
  id v27 = objc_msgSend(a1, sel_text);
  uint64_t v119 = v24;
  uint64_t v120 = v4;
  unint64_t v125 = a1;
  uint64_t v112 = v11;
  if (v27)
  {
    unint64_t v28 = v27;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v31 = v30;
  }
  else
  {
    uint64_t v29 = 0;
    unint64_t v31 = 0;
  }
  uint64_t v33 = a2[2];
  uint64_t v32 = a2[3];
  uint64_t v35 = a2[4];
  uint64_t v34 = a2[5];
  *(void *)&long long v130 = v33;
  *((void *)&v130 + 1) = v32;
  *(void *)&long long v131 = v35;
  *((void *)&v131 + 1) = v34;
  _s7SwiftUI7BindingVySbGMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>);
  uint64_t v37 = v36;
  MEMORY[0x18C113DA0](v127);
  if (!v31)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    *(void *)&long long v130 = v33;
    *((void *)&v130 + 1) = v32;
    *(void *)&long long v131 = v35;
    *((void *)&v131 + 1) = v34;
    MEMORY[0x18C113DA0](v127, v37);
    uint64_t v39 = (void *)MEMORY[0x18C115780](*(void *)&v127[0], *((void *)&v127[0] + 1));
    swift_bridgeObjectRelease();
    objc_msgSend(v125, sel_setText_, v39);

    goto LABEL_13;
  }
  if (__PAIR128__(v31, v29) == v127[0])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v38 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v40 = type metadata accessor for UIKitTextViewAdaptor(0);
  uint64_t v41 = v123;
  _s7SwiftUI7BindingVyAA13TextSelectionVSgGSgWOcTm_0((uint64_t)a2 + *(int *)(v40 + 24), v123, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>?);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v43 = v42;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48))(v41, 1, v42) != 1)
  {
    uint64_t v44 = (uint64_t)v124;
    MEMORY[0x18C113DA0](v43);
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4(v41, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
    int v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v121 + 48))(v44, 1, v122);
    uint64_t v45 = v125;
    uint64_t v46 = *((void *)&v126 + 1);
    uint64_t v47 = v126;
    if (v48 == 1) {
      goto LABEL_16;
    }
    uint64_t v51 = v118;
    outlined init with take of TextSelection(v44, v118, type metadata accessor for TextSelection);
    uint64_t v52 = v117;
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGSgWOcTm_0(v51, (uint64_t)v117, type metadata accessor for TextSelection.Indices);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v54 = v114;
      uint64_t v53 = v115;
      uint64_t v55 = v113;
      (*(void (**)(char *, unint64_t *, uint64_t))(v115 + 32))(v114, v52, v113);
      unint64_t v56 = v110;
      RangeSet.ranges.getter();
      lazy protocol witness table accessor for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges();
      uint64_t v57 = v112;
      if (dispatch thunk of Collection.isEmpty.getter())
      {
        (*(void (**)(char *, uint64_t))(v111 + 8))(v56, v57);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
        uint64_t v51 = v118;
        uint64_t v45 = v125;
        goto LABEL_30;
      }
      dispatch thunk of Collection.endIndex.getter();
      lazy protocol witness table accessor for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges();
      dispatch thunk of BidirectionalCollection.index(before:)();
      char v68 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read();
      unint64_t v70 = *v69;
      unint64_t v71 = v69[1];
      v68(&v130, 0);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v56, v57);
      uint64_t v45 = v125;
      if (!((UITextView.range.getter() ^ v70) >> 14) && (v72 ^ v71) < 0x4000)
      {
        (*(void (**)(char *, uint64_t))(v115 + 8))(v114, v55);
LABEL_29:
        uint64_t v51 = v118;
        goto LABEL_30;
      }
      *(void *)&long long v130 = v70;
      *((void *)&v130 + 1) = v71;
      id v73 = objc_msgSend(v45, sel_text);
      uint64_t v74 = v114;
      if (v73)
      {
        uint64_t v75 = v73;
        uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v78 = v77;

        *(void *)&v127[0] = v76;
        *((void *)&v127[0] + 1) = v78;
        _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBB6A0]);
        lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v79 = _NSRange.init<A, B>(_:in:)();
        objc_msgSend(v45, sel_setSelectedRange_, v79, v80);
        (*(void (**)(char *, uint64_t))(v115 + 8))(v74, v55);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v58 = *v52;
      unint64_t v59 = v52[1];
      if (!((UITextView.range.getter() ^ v58) >> 14) && (v60 ^ v59) < 0x4000)
      {
LABEL_30:
        if (v46)
        {
          _ss8RangeSetVySS5IndexVGMaTm_1(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, MEMORY[0x1E4F40930]);
          lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
          swift_retain_n();
          swift_retain_n();
          PropertyList.Tracker.value<A>(_:for:)();
          swift_release_n();
          swift_release_n();
          if ((_BYTE)v130)
          {
            swift_retain_n();
            swift_retain_n();
            PropertyList.Tracker.value<A>(_:for:)();
            swift_release_n();
LABEL_35:
            swift_release_n();
            if ((_BYTE)v130)
            {
              BOOL v81 = v130 != 1;
              if ((id)v81 != objc_msgSend(v45, sel_selectionAffinity)) {
                objc_msgSend(v45, sel_setSelectionAffinity_, v81);
              }
            }
          }
        }
        else
        {
          _ss8RangeSetVySS5IndexVGMaTm_1(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, MEMORY[0x1E4F40930]);
          lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
          swift_retain_n();
          PropertyList.subscript.getter();
          swift_release_n();
          if ((_BYTE)v130)
          {
            swift_retain_n();
            PropertyList.subscript.getter();
            goto LABEL_35;
          }
        }
        uint64_t v49 = type metadata accessor for TextSelection;
        uint64_t v50 = v51;
        goto LABEL_39;
      }
      *(void *)&long long v130 = v58;
      *((void *)&v130 + 1) = v59;
      id v61 = objc_msgSend(v45, sel_text);
      if (v61)
      {
        uint64_t v62 = v61;
        uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v65 = v64;

        *(void *)&v127[0] = v63;
        *((void *)&v127[0] + 1) = v65;
        _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBB6A0]);
        lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v66 = _NSRange.init<A, B>(_:in:)();
        objc_msgSend(v45, sel_setSelectedRange_, v66, v67);
        goto LABEL_30;
      }
      __break(1u);
    }
    __break(1u);
    return;
  }
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4(v41, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>?);
  uint64_t v44 = (uint64_t)v124;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v121 + 56))(v124, 1, 1, v122);
  uint64_t v45 = v125;
  uint64_t v46 = *((void *)&v126 + 1);
  uint64_t v47 = v126;
LABEL_16:
  uint64_t v49 = (uint64_t (*)(void))type metadata accessor for TextSelection?;
  uint64_t v50 = v44;
LABEL_39:
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4(v50, v49);
  uint64_t v82 = TextEditorTextView.helper.getter();
  *(void *)&v127[0] = v47;
  *((void *)&v127[0] + 1) = v46;
  swift_retain();
  swift_retain();
  ScrollEnvironmentProperties.init(environment:)((uint64_t)v127, (uint64_t)&v130);
  uint64_t v83 = (uint64_t)&v82[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties];
  swift_beginAccess();
  outlined init with copy of ScrollEnvironmentProperties(v83, (uint64_t)v127);
  swift_beginAccess();
  outlined assign with copy of ScrollEnvironmentProperties((uint64_t)&v130, v83);
  swift_endAccess();
  ScrollViewHelper.didChangeProperties(from:)((uint64_t)v127);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)&v130);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v127);

  uint64_t v84 = TextEditorTextView.helper.getter();
  *(void *)&v127[0] = v47;
  *((void *)&v127[0] + 1) = v46;
  EnvironmentValues.contentMarginProxy.getter((uint64_t)&v130);
  uint64_t v85 = &v84[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins];
  v127[12] = *(_OWORD *)&v84[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 192];
  v127[13] = *(_OWORD *)&v84[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 208];
  v128[0] = *(_OWORD *)&v84[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 224];
  *(_OWORD *)((char *)v128 + 9) = *(_OWORD *)&v84[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 233];
  v127[8] = *(_OWORD *)&v84[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 128];
  v127[9] = *(_OWORD *)&v84[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 144];
  v127[10] = *(_OWORD *)&v84[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 160];
  v127[11] = *(_OWORD *)&v84[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 176];
  v127[4] = *(_OWORD *)&v84[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 64];
  v127[5] = *(_OWORD *)&v84[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 80];
  v127[6] = *(_OWORD *)&v84[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 96];
  v127[7] = *(_OWORD *)&v84[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 112];
  v127[0] = *(_OWORD *)&v84[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins];
  v127[1] = *(_OWORD *)&v84[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 16];
  v127[2] = *(_OWORD *)&v84[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 32];
  v127[3] = *(_OWORD *)&v84[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 48];
  v85[12] = v142;
  v85[13] = v143;
  v85[14] = v144[0];
  *(_OWORD *)((char *)v85 + 233) = *(_OWORD *)((char *)v144 + 9);
  v85[8] = v138;
  v85[9] = v139;
  v85[10] = v140;
  v85[11] = v141;
  v85[4] = v134;
  v85[5] = v135;
  v85[6] = v136;
  v85[7] = v137;
  _OWORD *v85 = v130;
  v85[1] = v131;
  v85[2] = v132;
  v85[3] = v133;
  ScrollViewHelper.didChangeMargins(from:)(v127);

  *(void *)&v127[0] = v47;
  *((void *)&v127[0] + 1) = v46;
  if (EnvironmentValues.font.getter())
  {
    *(void *)&v127[0] = v47;
    *((void *)&v127[0] + 1) = v46;
    v86 = (void *)Font.platformFont(in:)();
    swift_release();
  }
  else
  {
    *(void *)&v127[0] = v47;
    *((void *)&v127[0] + 1) = v46;
    EnvironmentValues.dynamicTypeSize.getter();
    uint64_t v87 = (void *)**((void **)&unk_1E53B9718 + (char)v129);
    uint64_t v88 = self;
    id v89 = v87;
    id v90 = objc_msgSend(v88, sel_traitCollectionWithPreferredContentSizeCategory_, v89);
    id v91 = objc_msgSend(self, sel_preferredFontForTextStyle_compatibleWithTraitCollection_, *MEMORY[0x1E4FB28C8], v90);
    Font.init(_:)();
    v127[0] = v126;
    long long v129 = v126;
    EnvironmentValues.fontModifiers.getter();
    v86 = (void *)Font.platformFont(in:modifiers:)();
    swift_bridgeObjectRelease();
    swift_release();

    uint64_t v46 = *((void *)&v126 + 1);
    uint64_t v47 = v126;
  }
  *(void *)&v127[0] = v47;
  *((void *)&v127[0] + 1) = v46;
  uint64_t v92 = (void *)makeParagraphStyle(environment:)();
  objc_msgSend(v92, sel_setLineBreakMode_, 0);
  objc_msgSend(v92, sel_setLineBreakStrategy_, 0);
  *(void *)&v127[0] = v47;
  *((void *)&v127[0] + 1) = v46;
  if (EnvironmentValues.foregroundColor.getter())
  {
    *(void *)&v127[0] = v47;
    *((void *)&v127[0] + 1) = v46;
    dispatch thunk of AnyColorBox.resolve(in:)();
    swift_release();
    Color.Resolved.kitColor.getter();
    self;
    id v93 = (id)swift_dynamicCastObjCClassUnconditional();
  }
  else
  {
    id v93 = objc_msgSend(self, sel_labelColor);
  }
  unint64_t v94 = v93;
  _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_5(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (NSAttributedStringKey, Any), MEMORY[0x1E4FBBE00]);
  uint64_t v95 = swift_allocObject();
  *(_OWORD *)(v95 + 16) = xmmword_188357320;
  char v96 = (void *)*MEMORY[0x1E4FB0738];
  *(void *)(v95 + 32) = *MEMORY[0x1E4FB0738];
  uint64_t v97 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
  *(void *)(v95 + 40) = v92;
  char v98 = (void *)*MEMORY[0x1E4FB0700];
  *(void *)(v95 + 64) = v97;
  *(void *)(v95 + 72) = v98;
  uint64_t v99 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  *(void *)(v95 + 80) = v94;
  v100 = (void *)*MEMORY[0x1E4FB06F8];
  *(void *)(v95 + 104) = v99;
  *(void *)(v95 + 112) = v100;
  *(void *)(v95 + 144) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
  *(void *)(v95 + 120) = v86;
  id v101 = v96;
  *((void *)&v126 + 1) = v92;
  id v102 = v98;
  id v103 = v94;
  id v104 = v100;
  id v105 = v86;
  specialized Dictionary.init(dictionaryLiteral:)(v95);
  id v106 = objc_msgSend(v45, sel_textStorage);
  type metadata accessor for NSAttributedStringKey(0);
  _sSo21NSAttributedStringKeyaABSHSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  uint64_t v107 = v45;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v106, sel_addAttributes_range_, isa, 0, objc_msgSend(v106, sel_length));

  Class v109 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v107, sel_setTypingAttributes_, v109);

  *(unsigned char *)(v120 + v119) = 0;
}

uint64_t protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitTextViewAdaptor@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1 - 8;
  MEMORY[0x1F4188790](a1);
  id v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI7BindingVyAA13TextSelectionVSgGSgWOcTm_0(v3, (uint64_t)v7, type metadata accessor for UIKitTextViewAdaptor);
  uint64_t v8 = v3 + *(int *)(v5 + 36);
  uint64_t v9 = (objc_class *)type metadata accessor for UIKitTextEditorCoordinator(0);
  long long v17 = *(_OWORD *)v8;
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v11 = *(void *)(v8 + 24);
  uint64_t v12 = objc_allocWithZone(v9);
  uint64_t v13 = &v12[OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_textInputValidation];
  *(_OWORD *)uint64_t v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *((void *)v13 + 4) = 0;
  v12[OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_viewIsUpdating] = 0;
  _s7SwiftUI7BindingVyAA13TextSelectionVSgGSgWOcTm_0((uint64_t)v7, (uint64_t)&v12[OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_configuration], type metadata accessor for UIKitTextViewAdaptor);
  uint64_t v14 = &v12[OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_selectionStorage];
  *(_OWORD *)uint64_t v14 = v17;
  *((void *)v14 + 2) = v10;
  *((void *)v14 + 3) = v11;
  v18.receiver = v12;
  v18.super_class = v9;
  id v15 = objc_msgSendSuper2(&v18, sel_init);
  uint64_t result = _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4((uint64_t)v7, type metadata accessor for UIKitTextViewAdaptor);
  *a2 = v15;
  return result;
}

uint64_t protocol witness for UIViewRepresentable._overrideLayoutTraits(_:for:) in conformance UIKitTextViewAdaptor(int a1, id a2)
{
  return _LayoutTraits.Dimension.max.setter();
}

id UIKitTextEditorCoordinatorBase.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIKitTextEditorCoordinatorBase();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for UIKitTextEditorCoordinatorBase()
{
  return self;
}

void UIKitTextEditorCoordinator.textViewDidChange(_:)(void *a1)
{
  if ((*(unsigned char *)(v1
                 + OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_viewIsUpdating) & 1) == 0)
  {
    swift_beginAccess();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    id v3 = objc_msgSend(a1, sel_text);
    if (!v3)
    {
      __break(1u);
      return;
    }
    uint64_t v4 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    _s7SwiftUI7BindingVySbGMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>);
    uint64_t v6 = v5;
    MEMORY[0x18C113DA0](&v16);
    uint64_t v8 = v16;
    uint64_t v7 = v17;
    id v9 = objc_msgSend(a1, sel_text);
    if (!v9)
    {
      swift_bridgeObjectRelease();
LABEL_9:
      MEMORY[0x18C113DA0](&v16, v6);
      id v15 = (void *)MEMORY[0x18C115780](v16, v17);
      swift_bridgeObjectRelease();
      objc_msgSend(a1, sel_setText_, v15);

      return;
    }
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    if (v8 == v11 && v7 == v13)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0) {
      goto LABEL_9;
    }
  }
}

id UIKitTextEditorCoordinator.textView(_:shouldChangeTextIn:replacementText:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = v5 + OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_textInputValidation;
  swift_beginAccess();
  _s7SwiftUI7BindingVyAA13TextSelectionVSgGSgWOcTm_0(v9, (uint64_t)&v22, (uint64_t (*)(void))type metadata accessor for TextInputValidation?);
  if (!v23)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4((uint64_t)&v22, (uint64_t (*)(void))type metadata accessor for TextInputValidation?);
    char v21 = 1;
    return (id)(v21 & 1);
  }
  outlined init with take of OptionalBinaryInteger(&v22, (uint64_t)v24);
  uint64_t v10 = (uint64_t (**)(uint64_t))__swift_project_boxed_opaque_existential_1(v24, v24[3]);
  id result = objc_msgSend(a1, sel_text);
  if (result)
  {
    uint64_t v12 = result;
    unint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    uint64_t v16 = *v10;
    unint64_t v17 = Range<>.init(_:in:)();
    if (v19)
    {
      char v21 = 1;
    }
    else
    {
      uint64_t v20 = specialized StringProtocol.replacingCharacters<A, B>(in:with:)(v17, v18, a4, a5, v13, v15);
      char v21 = v16(v20);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    return (id)(v21 & 1);
  }
  __break(1u);
  return result;
}

uint64_t *closure #1 in UIKitTextEditorCoordinator.textView(_:editMenuForTextIn:suggestedActions:)@<X0>(void *a1@<X8>)
{
  type metadata accessor for (_:)();
  id result = (uint64_t *)AGGraphGetWeakValue();
  if (result)
  {
    uint64_t v3 = *result;
    id result = (uint64_t *)swift_retain();
  }
  else
  {
    uint64_t v3 = 0;
  }
  *a1 = v3;
  a1[1] = result;
  return result;
}

uint64_t closure #2 in UIKitTextEditorCoordinator.textView(_:editMenuForTextIn:suggestedActions:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for TextSelection(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI7BindingVyAA13TextSelectionVSgGSgWOcTm_0(a2, (uint64_t)v8, type metadata accessor for TextSelection);
  uint64_t v9 = a1(v8);
  uint64_t result = _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4((uint64_t)v8, type metadata accessor for TextSelection);
  *a3 = v9;
  return result;
}

void UIKitTextEditorCoordinator.textViewDidChangeSelection(_:)(void *a1)
{
  uint64_t v76 = a1;
  uint64_t v74 = type metadata accessor for TextSelection.Indices(0);
  MEMORY[0x1F4188790](v74);
  uint64_t v75 = (uint64_t *)((char *)&v65 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v2 = type metadata accessor for TextSelection(0);
  uint64_t v77 = *(void *)(v2 - 8);
  uint64_t v78 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v73 = (uint64_t)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TextSelection?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v65 - v8;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v65 - v11;
  MEMORY[0x1F4188790](v13);
  unint64_t v15 = (char *)&v65 - v14;
  MEMORY[0x1F4188790](v16);
  unint64_t v18 = (char *)&v65 - v17;
  MEMORY[0x1F4188790](v19);
  char v21 = (char *)&v65 - v20;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v24 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v26 = v25;
  uint64_t v27 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v29 = (char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*((unsigned char *)v79
        + OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_viewIsUpdating) & 1) == 0)
  {
    unint64_t v71 = v12;
    uint64_t v72 = v21;
    uint64_t v66 = v15;
    char v68 = v18;
    unint64_t v69 = v6;
    uint64_t v30 = v78;
    unint64_t v70 = v9;
    unint64_t v31 = (char *)v79
        + OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_configuration;
    swift_beginAccess();
    uint64_t v32 = type metadata accessor for UIKitTextViewAdaptor(0);
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGSgWOcTm_0((uint64_t)&v31[*(int *)(v32 + 24)], (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v26) == 1)
    {
      uint64_t v33 = type metadata accessor for Binding<TextSelection?>?;
      uint64_t v34 = (uint64_t)v24;
LABEL_25:
      _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4(v34, (uint64_t (*)(void))v33);
      return;
    }
    uint64_t v35 = (uint64_t)v29;
    outlined init with take of TextSelection((uint64_t)v24, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
    uint64_t v36 = (uint64_t)v72;
    MEMORY[0x18C113DA0](v26);
    uint64_t v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
    uint64_t v37 = v30;
    int v38 = v79(v36, 1, v30);
    uint64_t v67 = v26;
    if (v38)
    {
      _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4(v36, (uint64_t (*)(void))type metadata accessor for TextSelection?);
      unint64_t v39 = 0;
      unint64_t v40 = 0;
      BOOL v41 = 0;
    }
    else
    {
      uint64_t v42 = v73;
      _s7SwiftUI7BindingVyAA13TextSelectionVSgGSgWOcTm_0(v36, v73, type metadata accessor for TextSelection);
      _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4(v36, (uint64_t (*)(void))type metadata accessor for TextSelection?);
      unint64_t v43 = TextSelection.range.getter();
      unint64_t v45 = v44;
      BOOL v41 = (v46 & 1) == 0;
      _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4(v42, type metadata accessor for TextSelection);
      unint64_t v39 = v43 >> 14;
      unint64_t v40 = v45 >> 14;
    }
    uint64_t v47 = v76;
    uint64_t v48 = (uint64_t)v71;
    unint64_t v49 = UITextView.range.getter();
    if (!v41 || v39 != v49 >> 14 || v40 != v50 >> 14)
    {
      uint64_t v51 = UITextView.range.getter();
      uint64_t v52 = (uint64_t)v75;
      *uint64_t v75 = v51;
      *(void *)(v52 + 8) = v53;
      swift_storeEnumTagMultiPayload();
      uint64_t v54 = (uint64_t)v68;
      MEMORY[0x18C113DA0](v67);
      uint64_t v55 = (uint64_t)v66;
      _s7SwiftUI7BindingVyAA13TextSelectionVSgGSgWOcTm_0(v54, (uint64_t)v66, (uint64_t (*)(void))type metadata accessor for TextSelection?);
      unint64_t v56 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v79;
      int v57 = v79(v55, 1, v37);
      _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4(v55, (uint64_t (*)(void))type metadata accessor for TextSelection?);
      if (v57 == 1)
      {
        _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4(v54, (uint64_t (*)(void))type metadata accessor for TextSelection?);
        _s7SwiftUI7BindingVyAA13TextSelectionVSgGSgWOcTm_0(v52, v54, type metadata accessor for TextSelection.Indices);
        *(unsigned char *)(v54 + *(int *)(v37 + 20)) = 0;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v77 + 56))(v54, 0, 1, v37);
      }
      else if (!v56(v54, 1, v37))
      {
        outlined assign with copy of UIKitTextViewAdaptor(v52, v54, type metadata accessor for TextSelection.Indices);
      }
      _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4(v52, type metadata accessor for TextSelection.Indices);
      dispatch thunk of AnyLocation.set(_:transaction:)();
      _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4(v54, (uint64_t (*)(void))type metadata accessor for TextSelection?);
    }
    id v58 = objc_msgSend(v47, sel_selectionAffinity);
    if (v58) {
      int v59 = 2 * (v58 == (id)1);
    }
    else {
      int v59 = 1;
    }
    uint64_t v60 = v67;
    MEMORY[0x18C113DA0](v67);
    id v61 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v79;
    if (v79(v48, 1, v37))
    {
      _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4(v48, (uint64_t (*)(void))type metadata accessor for TextSelection?);
    }
    else
    {
      int v62 = *(unsigned __int8 *)(v48 + *(int *)(v37 + 20));
      _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4(v48, (uint64_t (*)(void))type metadata accessor for TextSelection?);
      if (v62 == v59) {
        goto LABEL_24;
      }
    }
    uint64_t v63 = (uint64_t)v70;
    MEMORY[0x18C113DA0](v60);
    if (v61(v63, 1, v37))
    {
      uint64_t v64 = (uint64_t)v69;
      _s7SwiftUI7BindingVyAA13TextSelectionVSgGSgWOcTm_0(v63, (uint64_t)v69, (uint64_t (*)(void))type metadata accessor for TextSelection?);
      dispatch thunk of AnyLocation.set(_:transaction:)();
      _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4(v64, (uint64_t (*)(void))type metadata accessor for TextSelection?);
      _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4(v35, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
      uint64_t v34 = v63;
      uint64_t v33 = type metadata accessor for TextSelection?;
      goto LABEL_25;
    }
    *(unsigned char *)(v63 + *(int *)(v37 + 20)) = v59;
    dispatch thunk of AnyLocation.set(_:transaction:)();
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4(v63, (uint64_t (*)(void))type metadata accessor for TextSelection?);
LABEL_24:
    uint64_t v33 = type metadata accessor for Binding<TextSelection?>;
    uint64_t v34 = v35;
    goto LABEL_25;
  }
}

uint64_t UIKitTextEditorCoordinator.__ivar_destroyer()
{
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4(v0 + OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_configuration, type metadata accessor for UIKitTextViewAdaptor);
  return _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4(v0+ OBJC_IVAR____TtC7SwiftUIP33_A90AD0DD13E6C72FFE734B65FAFF6EFF26UIKitTextEditorCoordinator_textInputValidation, (uint64_t (*)(void))type metadata accessor for TextInputValidation?);
}

uint64_t ObjC metadata update function for UIKitTextEditorCoordinator()
{
  return type metadata accessor for UIKitTextEditorCoordinator(0);
}

uint64_t type metadata accessor for UIKitTextEditorCoordinator(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitTextEditorCoordinator);
}

uint64_t type metadata completion function for UIKitTextEditorCoordinator()
{
  uint64_t result = type metadata accessor for UIKitTextViewAdaptor(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for UIKitTextViewAdaptor(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitTextViewAdaptor);
}

id TextEditorTextView.findInteraction(_:didBegin:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  v13.receiver = v3;
  v13.super_class = (Class)swift_getObjectType();
  id result = objc_msgSendSuper2(&v13, *a3, a1, a2);
  uint64_t v8 = &v3[OBJC_IVAR____TtC7SwiftUI18TextEditorTextView_findContext];
  unint64_t v9 = *(void *)&v3[OBJC_IVAR____TtC7SwiftUI18TextEditorTextView_findContext + 8];
  if (v9 >= 2)
  {
    uint64_t v10 = *(void *)v8;
    char v11 = v8[16] & 1;
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v10;
    *(void *)(v12 + 24) = v9;
    *(unsigned char *)(v12 + 32) = v11;
    outlined copy of Binding<NavigationSplitViewColumn>?(v10, v9);
    swift_retain();
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    return (id)outlined consume of Binding<NavigationSplitViewColumn>?(v10, v9);
  }
  return result;
}

void TextEditorTextView.__ivar_destroyer()
{
  outlined consume of FindContext?(*(void *)(v0 + OBJC_IVAR____TtC7SwiftUI18TextEditorTextView_findContext), *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI18TextEditorTextView_findContext + 8));
  unint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI18TextEditorTextView____lazy_storage___helper);
}

uint64_t type metadata accessor for TextEditorTextView()
{
  return self;
}

unint64_t initializeBufferWithCopyOfBuffer for UIKitTextViewAdaptor(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    uint64_t v9 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v9;
    uint64_t v10 = *(void *)(a2 + 40);
    uint64_t v41 = a3;
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (void *)(a1 + v11);
    objc_super v13 = (void *)(a2 + v11);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v10;
    type metadata accessor for Binding<TextSelection?>(0);
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48);
    uint64_t v17 = v14;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v17))
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
      uint64_t v19 = v41;
    }
    else
    {
      uint64_t v21 = v13[1];
      *uint64_t v12 = *v13;
      v12[1] = v21;
      uint64_t v39 = v17;
      unint64_t v40 = v12;
      uint64_t v22 = *(int *)(v17 + 32);
      __dst = (char *)v12 + v22;
      uint64_t v23 = (char *)v13 + v22;
      uint64_t v24 = type metadata accessor for TextSelection(0);
      uint64_t v25 = *(void *)(v24 - 8);
      uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
      swift_retain();
      swift_retain();
      if (v26(v23, 1, v24))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v23, *(void *)(*(void *)(v27 - 8) + 64));
        uint64_t v29 = v39;
        uint64_t v28 = v40;
      }
      else
      {
        uint64_t v30 = type metadata accessor for TextSelection.Indices(0);
        uint64_t v29 = v39;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(__dst, v23, v31);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v23, *(void *)(*(void *)(v30 - 8) + 64));
        }
        __dst[*(int *)(v24 + 20)] = v23[*(int *)(v24 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v24);
        uint64_t v28 = v40;
      }
      uint64_t v19 = v41;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v28, 0, 1, v29);
    }
    uint64_t v32 = *(int *)(v19 + 28);
    uint64_t v33 = *(int *)(v19 + 32);
    uint64_t v34 = (_OWORD *)(a1 + v32);
    uint64_t v35 = (_OWORD *)(a2 + v32);
    long long v36 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v36;
    *(unsigned char *)(a1 + v33) = *(unsigned char *)(a2 + v33);
  }
  return a1;
}

uint64_t destroy for UIKitTextViewAdaptor(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v6 = v5;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    swift_release();
    swift_release();
    uint64_t v8 = v4 + *(int *)(v6 + 32);
    uint64_t v9 = type metadata accessor for TextSelection(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
    if (!result)
    {
      type metadata accessor for TextSelection.Indices(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result == 1)
      {
        _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
        return v11(v8, v10);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for UIKitTextViewAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v43 = a3;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v9;
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v14 + 48);
  uint64_t v16 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v15(v12, 1, v16))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
    uint64_t v18 = v43;
  }
  else
  {
    uint64_t v40 = v14;
    uint64_t v41 = v16;
    uint64_t v19 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v19;
    uint64_t v20 = *(int *)(v16 + 32);
    uint64_t v42 = v11;
    uint64_t v21 = (char *)v11 + v20;
    uint64_t v22 = (char *)v12 + v20;
    uint64_t v23 = type metadata accessor for TextSelection(0);
    uint64_t v24 = *(void *)(v23 - 8);
    uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
    swift_retain();
    uint64_t v26 = v22;
    swift_retain();
    if (v25(v22, 1, v23))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64));
      uint64_t v28 = v42;
      uint64_t v18 = v43;
      uint64_t v30 = v40;
      uint64_t v29 = v41;
    }
    else
    {
      uint64_t v31 = v21;
      uint64_t v32 = type metadata accessor for TextSelection.Indices(0);
      uint64_t v18 = v43;
      uint64_t v30 = v40;
      uint64_t v29 = v41;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v26, v33);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v31, v26, *(void *)(*(void *)(v32 - 8) + 64));
      }
      *((unsigned char *)v31 + *(int *)(v23 + 20)) = *((unsigned char *)v26 + *(int *)(v23 + 20));
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v31, 0, 1, v23);
      uint64_t v28 = v42;
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v28, 0, 1, v29);
  }
  uint64_t v34 = *(int *)(v18 + 28);
  uint64_t v35 = *(int *)(v18 + 32);
  long long v36 = (_OWORD *)(a1 + v34);
  uint64_t v37 = (_OWORD *)(a2 + v34);
  long long v38 = v37[1];
  *long long v36 = *v37;
  v36[1] = v38;
  *(unsigned char *)(a1 + v35) = *(unsigned char *)(a2 + v35);
  return a1;
}

uint64_t assignWithCopy for UIKitTextViewAdaptor(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v11, 1, v13);
  int v18 = v16(v12, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *(void *)uint64_t v11 = *(void *)v12;
      *((void *)v11 + 1) = *((void *)v12 + 1);
      uint64_t v19 = *(int *)(v14 + 32);
      __dst = &v11[v19];
      unint64_t v49 = &v12[v19];
      uint64_t v20 = type metadata accessor for TextSelection(0);
      uint64_t v47 = *(void *)(v20 - 8);
      uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
      swift_retain();
      swift_retain();
      if (v21(v49, 1, v20))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v49, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        uint64_t v37 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          uint64_t v39 = v49;
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(__dst, v49, v38);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          uint64_t v39 = v49;
          memcpy(__dst, v49, *(void *)(*(void *)(v37 - 8) + 64));
        }
        __dst[*(int *)(v20 + 20)] = v39[*(int *)(v20 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(__dst, 0, 1, v20);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      goto LABEL_21;
    }
    goto LABEL_7;
  }
  if (v18)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_7:
    type metadata accessor for Binding<TextSelection?>?(0);
    size_t v24 = *(void *)(*(void *)(v23 - 8) + 64);
    uint64_t v25 = v11;
    uint64_t v26 = v12;
LABEL_8:
    memcpy(v25, v26, v24);
    goto LABEL_21;
  }
  *(void *)uint64_t v11 = *(void *)v12;
  swift_retain();
  swift_release();
  *((void *)v11 + 1) = *((void *)v12 + 1);
  swift_retain();
  swift_release();
  uint64_t v27 = *(int *)(v14 + 32);
  uint64_t v28 = &v11[v27];
  uint64_t v29 = &v12[v27];
  uint64_t v30 = type metadata accessor for TextSelection(0);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1, v30);
  int v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      uint64_t v35 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v28, v29, v36);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v28, v29, *(void *)(*(void *)(v35 - 8) + 64));
      }
      v28[*(int *)(v30 + 20)] = v29[*(int *)(v30 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  if (v34)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4((uint64_t)v28, type metadata accessor for TextSelection);
LABEL_17:
    type metadata accessor for TextSelection?(0);
    size_t v24 = *(void *)(*(void *)(v40 - 8) + 64);
    uint64_t v25 = v28;
    uint64_t v26 = v29;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4((uint64_t)v28, type metadata accessor for TextSelection.Indices);
    uint64_t v45 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16))(v28, v29, v46);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v28, v29, *(void *)(*(void *)(v45 - 8) + 64));
    }
  }
  v28[*(int *)(v30 + 20)] = v29[*(int *)(v30 + 20)];
LABEL_21:
  uint64_t v41 = a3[7];
  uint64_t v42 = (_DWORD *)(a1 + v41);
  uint64_t v43 = (_DWORD *)(a2 + v41);
  *uint64_t v42 = *v43;
  v42[1] = v43[1];
  v42[2] = v43[2];
  v42[3] = v43[3];
  v42[4] = v43[4];
  v42[5] = v43[5];
  v42[6] = v43[6];
  v42[7] = v43[7];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for UIKitTextViewAdaptor(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  char v9 = (void *)(a2 + v7);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v10))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = v9[1];
    *uint64_t v8 = *v9;
    v8[1] = v14;
    uint64_t v15 = *(int *)(v11 + 32);
    uint64_t v16 = (char *)v8 + v15;
    int v17 = (char *)v9 + v15;
    uint64_t v18 = type metadata accessor for TextSelection(0);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      uint64_t v28 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v16, v17, v21);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v16, v17, *(void *)(*(void *)(v28 - 8) + 64));
      }
      v16[*(int *)(v18 + 20)] = v17[*(int *)(v18 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
  }
  uint64_t v22 = a3[7];
  uint64_t v23 = a3[8];
  size_t v24 = (_OWORD *)(a1 + v22);
  uint64_t v25 = (_OWORD *)(a2 + v22);
  long long v26 = v25[1];
  *size_t v24 = *v25;
  v24[1] = v26;
  *(unsigned char *)(a1 + v23) = *(unsigned char *)(a2 + v23);
  return a1;
}

uint64_t assignWithTake for UIKitTextViewAdaptor(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  *(void *)(a1 + 16) = a2[2];
  swift_release();
  *(void *)(a1 + 24) = a2[3];
  swift_release();
  uint64_t v10 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)a2 + v11;
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  int v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v12, 1, v14);
  int v19 = v17(v13, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      uint64_t v20 = *((void *)v13 + 1);
      *(void *)uint64_t v12 = *(void *)v13;
      *((void *)v12 + 1) = v20;
      uint64_t v21 = *(int *)(v15 + 32);
      uint64_t v22 = &v12[v21];
      uint64_t v23 = &v13[v21];
      uint64_t v24 = type metadata accessor for TextSelection(0);
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        uint64_t v51 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v22, v23, v41);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v22, v23, *(void *)(*(void *)(v51 - 8) + 64));
        }
        v22[*(int *)(v24 + 20)] = v23[*(int *)(v24 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
      goto LABEL_21;
    }
    goto LABEL_7;
  }
  if (v19)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_7:
    type metadata accessor for Binding<TextSelection?>?(0);
    size_t v28 = *(void *)(*(void *)(v27 - 8) + 64);
    uint64_t v29 = v12;
    uint64_t v30 = v13;
LABEL_8:
    memcpy(v29, v30, v28);
    goto LABEL_21;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  swift_release();
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_release();
  uint64_t v31 = *(int *)(v15 + 32);
  uint64_t v32 = &v12[v31];
  int v33 = &v13[v31];
  uint64_t v34 = type metadata accessor for TextSelection(0);
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  int v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      uint64_t v39 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v32, v33, v40);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v32, v33, *(void *)(*(void *)(v39 - 8) + 64));
      }
      v32[*(int *)(v34 + 20)] = v33[*(int *)(v34 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  if (v38)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4((uint64_t)v32, type metadata accessor for TextSelection);
LABEL_17:
    type metadata accessor for TextSelection?(0);
    size_t v28 = *(void *)(*(void *)(v42 - 8) + 64);
    uint64_t v29 = v32;
    uint64_t v30 = v33;
    goto LABEL_8;
  }
  if ((uint64_t *)a1 != a2)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4((uint64_t)v32, type metadata accessor for TextSelection.Indices);
    uint64_t v49 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32))(v32, v33, v50);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v32, v33, *(void *)(*(void *)(v49 - 8) + 64));
    }
  }
  v32[*(int *)(v34 + 20)] = v33[*(int *)(v34 + 20)];
LABEL_21:
  uint64_t v43 = a3[7];
  uint64_t v44 = a3[8];
  uint64_t v45 = (_OWORD *)(a1 + v43);
  uint64_t v46 = (_OWORD *)((char *)a2 + v43);
  long long v47 = v46[1];
  *uint64_t v45 = *v46;
  v45[1] = v47;
  *(unsigned char *)(a1 + v44) = *((unsigned char *)a2 + v44);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitTextViewAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_188112C00);
}

uint64_t sub_188112C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for UIKitTextViewAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_188112CC4);
}

uint64_t sub_188112CC4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for UIKitTextViewAdaptor()
{
  type metadata accessor for Binding<TextSelection?>?(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for UIKitTextEditor(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    a1[3] = a2[3];
    uint64_t v8 = *(int *)(v4 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    type metadata accessor for Binding<TextSelection?>(0);
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(v11 - 8);
    uint64_t v14 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v14(v10, 1, v12))
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      uint64_t v16 = v10[1];
      *uint64_t v9 = *v10;
      v9[1] = v16;
      uint64_t v17 = *(int *)(v12 + 32);
      __dst = (char *)v9 + v17;
      int v18 = (char *)v10 + v17;
      uint64_t v19 = type metadata accessor for TextSelection(0);
      uint64_t v25 = *(void *)(v19 - 8);
      uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
      swift_retain();
      swift_retain();
      if (v20(v18, 1, v19))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        uint64_t v22 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(__dst, v18, v23);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v18, *(void *)(*(void *)(v22 - 8) + 64));
        }
        __dst[*(int *)(v19 + 20)] = v18[*(int *)(v19 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v19);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for UIKitTextEditor(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v4 = v3;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3);
  if (!result)
  {
    swift_release();
    swift_release();
    uint64_t v6 = v2 + *(int *)(v4 + 32);
    uint64_t v7 = type metadata accessor for TextSelection(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
    if (!result)
    {
      type metadata accessor for TextSelection.Indices(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result == 1)
      {
        _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
        return v9(v6, v8);
      }
    }
  }
  return result;
}

void *initializeWithCopy for UIKitTextEditor(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  uint64_t v12 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v12(v8, 1, v10))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v14;
    uint64_t v15 = *(int *)(v10 + 32);
    __dst = (char *)v7 + v15;
    uint64_t v16 = (char *)v8 + v15;
    uint64_t v17 = type metadata accessor for TextSelection(0);
    uint64_t v23 = *(void *)(v17 - 8);
    int v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    swift_retain();
    swift_retain();
    if (v18(v16, 1, v17))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v20 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(__dst, v16, v21);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v16, *(void *)(*(void *)(v20 - 8) + 64));
      }
      __dst[*(int *)(v17 + 20)] = v16[*(int *)(v17 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v17);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  return a1;
}

void *assignWithCopy for UIKitTextEditor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v5, 1, v7);
  int v12 = v10(v6, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      *(void *)uint64_t v5 = *(void *)v6;
      *((void *)v5 + 1) = *((void *)v6 + 1);
      uint64_t v13 = *(int *)(v8 + 32);
      __dst = &v5[v13];
      uint64_t v39 = &v6[v13];
      uint64_t v14 = type metadata accessor for TextSelection(0);
      uint64_t v15 = *(void *)(v14 - 8);
      uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
      swift_retain();
      swift_retain();
      if (v16(v39, 1, v14))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v39, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        uint64_t v32 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(__dst, v39, v33);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v39, *(void *)(*(void *)(v32 - 8) + 64));
        }
        __dst[*(int *)(v14 + 20)] = v39[*(int *)(v14 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
      return a1;
    }
    goto LABEL_7;
  }
  if (v12)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_7:
    type metadata accessor for Binding<TextSelection?>?(0);
    size_t v19 = *(void *)(*(void *)(v18 - 8) + 64);
    uint64_t v20 = v5;
    uint64_t v21 = v6;
LABEL_8:
    memcpy(v20, v21, v19);
    return a1;
  }
  *(void *)uint64_t v5 = *(void *)v6;
  swift_retain();
  swift_release();
  *((void *)v5 + 1) = *((void *)v6 + 1);
  swift_retain();
  swift_release();
  uint64_t v22 = *(int *)(v8 + 32);
  uint64_t v23 = &v5[v22];
  uint64_t v24 = &v6[v22];
  uint64_t v25 = type metadata accessor for TextSelection(0);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1, v25);
  int v29 = v27(v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      uint64_t v30 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v23, v24, v31);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64));
      }
      v23[*(int *)(v25 + 20)] = v24[*(int *)(v25 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      return a1;
    }
    goto LABEL_17;
  }
  if (v29)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4((uint64_t)v23, type metadata accessor for TextSelection);
LABEL_17:
    type metadata accessor for TextSelection?(0);
    size_t v19 = *(void *)(*(void *)(v34 - 8) + 64);
    uint64_t v20 = v23;
    uint64_t v21 = v24;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4((uint64_t)v23, type metadata accessor for TextSelection.Indices);
    uint64_t v36 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v23, v24, v37);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v23, v24, *(void *)(*(void *)(v36 - 8) + 64));
    }
  }
  v23[*(int *)(v25 + 20)] = v24[*(int *)(v25 + 20)];
  return a1;
}

_OWORD *initializeWithTake for UIKitTextEditor(_OWORD *a1, _OWORD *a2)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  uint64_t v6 = (void *)((char *)a1 + v5);
  uint64_t v7 = (void *)((char *)a2 + v5);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v8))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = v7[1];
    *uint64_t v6 = *v7;
    v6[1] = v12;
    uint64_t v13 = *(int *)(v9 + 32);
    uint64_t v14 = (char *)v6 + v13;
    uint64_t v15 = (char *)v7 + v13;
    uint64_t v16 = type metadata accessor for TextSelection(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v19 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v14, v15, v20);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
      }
      v14[*(int *)(v16 + 20)] = v15[*(int *)(v16 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
  }
  return a1;
}

void *assignWithTake for UIKitTextEditor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v6, 1, v8);
  int v13 = v11(v7, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      uint64_t v14 = *((void *)v7 + 1);
      *(void *)uint64_t v6 = *(void *)v7;
      *((void *)v6 + 1) = v14;
      uint64_t v15 = *(int *)(v9 + 32);
      uint64_t v16 = &v6[v15];
      uint64_t v17 = &v7[v15];
      uint64_t v18 = type metadata accessor for TextSelection(0);
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        uint64_t v35 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v16, v17, v36);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v16, v17, *(void *)(*(void *)(v35 - 8) + 64));
        }
        v16[*(int *)(v18 + 20)] = v17[*(int *)(v18 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
      return a1;
    }
    goto LABEL_7;
  }
  if (v13)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_7:
    type metadata accessor for Binding<TextSelection?>?(0);
    size_t v22 = *(void *)(*(void *)(v21 - 8) + 64);
    uint64_t v23 = v6;
    uint64_t v24 = v7;
LABEL_8:
    memcpy(v23, v24, v22);
    return a1;
  }
  *(void *)uint64_t v6 = *(void *)v7;
  swift_release();
  *((void *)v6 + 1) = *((void *)v7 + 1);
  swift_release();
  uint64_t v25 = *(int *)(v9 + 32);
  uint64_t v26 = &v6[v25];
  uint64_t v27 = &v7[v25];
  uint64_t v28 = type metadata accessor for TextSelection(0);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      uint64_t v33 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v26, v27, v34);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64));
      }
      v26[*(int *)(v28 + 20)] = v27[*(int *)(v28 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      return a1;
    }
    goto LABEL_17;
  }
  if (v32)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4((uint64_t)v26, type metadata accessor for TextSelection);
LABEL_17:
    type metadata accessor for TextSelection?(0);
    size_t v22 = *(void *)(*(void *)(v37 - 8) + 64);
    uint64_t v23 = v26;
    uint64_t v24 = v27;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4((uint64_t)v26, type metadata accessor for TextSelection.Indices);
    uint64_t v39 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v26, v27, v40);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v26, v27, *(void *)(*(void *)(v39 - 8) + 64));
    }
  }
  v26[*(int *)(v28 + 20)] = v27[*(int *)(v28 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitTextEditor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_188114420);
}

uint64_t sub_188114420(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for UIKitTextEditor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1881144A0);
}

uint64_t sub_1881144A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for UIKitTextEditor(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitTextEditor);
}

_UNKNOWN **base witness table accessor for View in UIKitTextEditor()
{
  return &protocol witness table for UIKitTextEditor;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x18C115940](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

void specialized UIKitTextEditorCoordinatorBase.updateFindInteraction(textView:env:)(char *a1, uint64_t a2)
{
  if (*(void *)(a2 + 8))
  {
    _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FindContext.Key>, (uint64_t)&type metadata for FindContext.Key, (uint64_t)&protocol witness table for FindContext.Key, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FindContext.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    _ss8RangeSetVySS5IndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FindContext.Key>, (uint64_t)&type metadata for FindContext.Key, (uint64_t)&protocol witness table for FindContext.Key, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FindContext.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v4 = v24;
  uint64_t v3 = v25;
  unsigned __int8 v5 = v26;
  uint64_t v6 = v27;
  int v7 = v28;
  if (v27) {
    __int16 v8 = 256;
  }
  else {
    __int16 v8 = 0;
  }
  __int16 v9 = v8 | v26;
  uint64_t v10 = &a1[OBJC_IVAR____TtC7SwiftUI18TextEditorTextView_findContext];
  uint64_t v11 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI18TextEditorTextView_findContext];
  uint64_t v12 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI18TextEditorTextView_findContext + 8];
  *(void *)uint64_t v10 = v24;
  *((void *)v10 + 1) = v3;
  v10 += 16;
  *(_WORD *)uint64_t v10 = v9;
  v10[2] = v7 != 0;
  outlined copy of Binding<NavigationSplitViewColumn>?(v4, v3);
  outlined consume of FindContext?(v11, v12);
  objc_msgSend(a1, sel_setFindInteractionEnabled_, v6);
  id v13 = objc_msgSend(a1, sel_findInteraction);
  if (v13)
  {
    uint64_t v14 = v13;
    id v15 = objc_msgSend(a1, sel_window);
    if (v15)
    {

      unsigned int v16 = objc_msgSend(v14, sel_isFindNavigatorVisible);
      if (v6)
      {
        if (v3)
        {
          unsigned __int8 v17 = v5 & 1;
          uint64_t v24 = v4;
          uint64_t v25 = v3;
          unsigned __int8 v26 = v5 & 1;
          _s7SwiftUI7BindingVySbGMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>);
          uint64_t v19 = v18;
          swift_retain();
          swift_retain();
          MEMORY[0x18C113DA0](&v23, v19);
          swift_release();
          swift_release();
          if (!(v16 & 1 | ((v23 & 1) == 0)))
          {
LABEL_18:
            *(void *)(swift_allocObject() + 16) = v14;
            id v22 = v14;
            onNextMainRunLoop(do:)();

            outlined consume of Binding<NavigationSplitViewColumn>?(v4, v3);
            swift_release();
            return;
          }
          goto LABEL_16;
        }
      }
      else if (v3)
      {
        unsigned __int8 v17 = v5 & 1;
LABEL_16:
        uint64_t v24 = v4;
        uint64_t v25 = v3;
        unsigned __int8 v26 = v17;
        _s7SwiftUI7BindingVySbGMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>);
        uint64_t v21 = v20;
        swift_retain();
        swift_retain();
        MEMORY[0x18C113DA0](&v23, v21);
        swift_release();
        swift_release();
        if (v23 != 1 && v16) {
          goto LABEL_18;
        }

        goto LABEL_21;
      }
    }
    else
    {
      outlined consume of Binding<NavigationSplitViewColumn>?(v4, v3);
    }

    return;
  }
LABEL_21:
  outlined consume of Binding<NavigationSplitViewColumn>?(v4, v3);
}

void specialized UIKitTextEditorCoordinatorBase.updateInputAccessoryGenerator(textView:env:)(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + 8))
  {
    _ss8RangeSetVySS5IndexVGMaTm_1(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey>, (uint64_t)&type metadata for EnvironmentValues.InputAccessoryKey, (uint64_t)&protocol witness table for EnvironmentValues.InputAccessoryKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    _ss8RangeSetVySS5IndexVGMaTm_1(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey>, (uint64_t)&type metadata for EnvironmentValues.InputAccessoryKey, (uint64_t)&protocol witness table for EnvironmentValues.InputAccessoryKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release();
  uint64_t Strong = swift_weakLoadStrong();
  _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for WeakBox<InputAccessoryGenerator>);
  swift_release();
  swift_release();
  if (Strong)
  {
    uint64_t v4 = *(void **)(Strong + 24);
    if (v4) {
      goto LABEL_7;
    }
    id v5 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for InputAccessoryGenerator.RootUIView()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v5, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    uint64_t v6 = *(void **)(Strong + 24);
    *(void *)(Strong + 24) = v5;
    id v7 = v5;

    InputAccessoryGenerator.updateHostIfNeeded()();
    uint64_t v4 = *(void **)(Strong + 24);
    if (v4)
    {
LABEL_7:
      id v8 = v4;
      id v9 = objc_msgSend(a1, sel_inputAccessoryView);
      if (v9 && (id v10 = v9, v9, v10 == v8))
      {
        swift_release();
      }
      else
      {
        objc_msgSend(a1, sel_setInputAccessoryView_, v8);

        swift_release();
      }
    }
    else
    {
      __break(1u);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey> and conformance EnvironmentPropertyKey<A>)
  {
    _ss8RangeSetVySS5IndexVGMaTm_1(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey>, (uint64_t)&type metadata for EnvironmentValues.InputAccessoryKey, (uint64_t)&protocol witness table for EnvironmentValues.InputAccessoryKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined consume of FindContext?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return outlined consume of Binding<NavigationSplitViewColumn>?(a1, a2);
  }
  return a1;
}

uint64_t sub_188114C40()
{
  return swift_deallocObject();
}

id partial apply for closure #2 in UIKitTextEditorCoordinatorBase.updateFindInteraction(textView:env:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_dismissFindNavigator);
}

id partial apply for closure #1 in UIKitTextEditorCoordinatorBase.updateFindInteraction(textView:env:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_presentFindNavigatorShowingReplace_, 0);
}

uint64_t _sSo21NSAttributedStringKeyaABSHSCWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UIKitTextEditor.MakeRepresentable and conformance UIKitTextEditor.MakeRepresentable()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitTextEditor.MakeRepresentable and conformance UIKitTextEditor.MakeRepresentable;
  if (!lazy protocol witness table cache variable for type UIKitTextEditor.MakeRepresentable and conformance UIKitTextEditor.MakeRepresentable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitTextEditor.MakeRepresentable and conformance UIKitTextEditor.MakeRepresentable);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>)
  {
    _ss8RangeSetVySS5IndexVGMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges()
{
  unint64_t result = lazy protocol witness table cache variable for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges;
  if (!lazy protocol witness table cache variable for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges)
  {
    _ss8RangeSetVySS5IndexVGMaTm_1(255, &lazy cache variable for type metadata for RangeSet<String.Index>.Ranges, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC760]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges;
  if (!lazy protocol witness table cache variable for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges)
  {
    _ss8RangeSetVySS5IndexVGMaTm_1(255, &lazy cache variable for type metadata for RangeSet<String.Index>.Ranges, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC760]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges);
  }
  return result;
}

uint64_t outlined assign with take of TextInputValidation?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in TextEditorTextView.findInteraction(_:didEnd:)()
{
  return closure #2 in GridBadgeInfosActionBinding.updateValue()();
}

uint64_t partial apply for closure #1 in TextEditorTextView.findInteraction(_:didBegin:)()
{
  return closure #2 in GridBadgeInfosActionBinding.updateValue()();
}

uint64_t _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of TextSelection(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with copy of UIKitTextViewAdaptor(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t specialized UIKitTextEditorCoordinator.textView(_:editMenuForTextIn:suggestedActions:)(void *a1, UIMenu *a2)
{
  uint64_t v5 = type metadata accessor for TextSelection(0);
  MEMORY[0x1F4188790](v5);
  id v7 = (uint64_t *)&v34[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v35 = v2;
  _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_5(0, &lazy cache variable for type metadata for ((_:))?, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4FBB718]);
  static Update.ensure<A>(_:)();
  id v8 = v36;
  if (v36)
  {
    uint64_t v9 = v37;
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = v9;
    id v11 = objc_msgSend(a1, sel_selectionAffinity);
    if (v11) {
      char v12 = 2 * (v11 == (id)1);
    }
    else {
      char v12 = 1;
    }
    *id v7 = UITextView.range.getter();
    v7[1] = v13;
    type metadata accessor for TextSelection.Indices(0);
    uint64_t v14 = swift_storeEnumTagMultiPayload();
    *((unsigned char *)v7 + *(int *)(v5 + 20)) = v12;
    MEMORY[0x1F4188790](v14);
    *(void *)&v34[-32] = _s7SwiftUI13TextSelectionVAA16PlatformItemListVIegnr_AcEIegno_TRTA_0;
    *(void *)&v34[-24] = v10;
    int v32 = v7;
    static Update.ensure<A>(_:)();
    id v15 = v36;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
    unint64_t v16 = MEMORY[0x1E4FBC860];
    uint64_t v44 = MEMORY[0x1E4FBC860];
    unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    LOBYTE(v36) = 0;
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_5(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
    uint64_t v18 = type metadata accessor for MenuVisitor.MenuStackGroup();
    unint64_t v19 = (*(unsigned __int8 *)(*(void *)(v18 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v18 - 8) + 80);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_18834BB80;
    uint64_t v21 = v20 + v19;
    if (one-time initialization token for empty != -1) {
      swift_once();
    }
    uint64_t v22 = __swift_project_value_buffer(v18, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGSgWOcTm_0(v22, v21, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
    char v23 = (char)v36;
    uint64_t v36 = 0;
    LOBYTE(v37) = 0;
    uint64_t v38 = MEMORY[0x1E4FBC868];
    unint64_t v39 = v17;
    unint64_t v40 = v16;
    uint64_t v41 = MEMORY[0x1E4FBC868];
    char v42 = v23;
    uint64_t v43 = v20;
    MenuVisitor.visit(_:uniqueNames:)((uint64_t)v15, &v44);
    swift_bridgeObjectRelease();
    unint64_t v24 = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v36 = a2;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v24);
    v25._countAndFlagsBits = 0;
    v25._object = (void *)0xE000000000000000;
    v45.value.super.Class isa = 0;
    v45.is_nil = 0;
    UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v36, v25, (Swift::String_optional)0, v45, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)v36, v33);
    uint64_t v27 = v26;
    swift_release();
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_4((uint64_t)v7, type metadata accessor for TextSelection);
  }
  else
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
    swift_bridgeObjectRetain();
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    v46.value.super.Class isa = 0;
    v46.is_nil = 0;
    UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v29, v28, (Swift::String_optional)0, v46, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)a2, v33);
    return v30;
  }
  return v27;
}

uint64_t *partial apply for closure #1 in UIKitTextEditorCoordinator.textView(_:editMenuForTextIn:suggestedActions:)@<X0>(void *a1@<X8>)
{
  return closure #1 in UIKitTextEditorCoordinator.textView(_:editMenuForTextIn:suggestedActions:)(a1);
}

uint64_t sub_18811553C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t _s7SwiftUI13TextSelectionVAA16PlatformItemListVIegnr_AcEIegno_TRTA_0()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t partial apply for closure #2 in UIKitTextEditorCoordinator.textView(_:editMenuForTextIn:suggestedActions:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in UIKitTextEditorCoordinator.textView(_:editMenuForTextIn:suggestedActions:)(*(uint64_t (**)(char *))(v1 + 16), *(void *)(v1 + 32), a1);
}

uint64_t _s7SwiftUI7BindingVyAA13TextSelectionVSgGSgWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t getEnumTagSinglePayload for UIKitTextEditor.MakeRepresentable(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitTextEditor.MakeRepresentable(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for UIKitTextEditor.MakeRepresentable()
{
  return &unk_1ED41C688;
}

uint64_t one-time initialization function for specificationClass()
{
  uint64_t result = type metadata accessor for ClarityUIApplicationSceneSpecification();
  static ClarityUIApplicationSceneSpecificationWrapper.specificationClass = result;
  return result;
}

uint64_t static ClarityUIApplicationSceneSpecificationWrapper.specificationClass.getter()
{
  if (one-time initialization token for specificationClass != -1) {
    swift_once();
  }
  return static ClarityUIApplicationSceneSpecificationWrapper.specificationClass;
}

uint64_t ClarityUIApplicationSceneSpecificationWrapper.deinit()
{
  return v0;
}

uint64_t ClarityUIApplicationSceneSpecificationWrapper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ClarityUIApplicationSceneSpecificationWrapper()
{
  return self;
}

uint64_t method lookup function for ClarityUIApplicationSceneSpecificationWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ClarityUIApplicationSceneSpecificationWrapper);
}

uint64_t ClarityUIApplicationSceneSpecification.initialSettingsDiffActions.getter()
{
  uint64_t v5 = MEMORY[0x1E4FBC860];
  objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ClarityUIListLayoutSettingsDiffAction()), sel_init);
  MEMORY[0x18C115B40]();
  if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for ClarityUIApplicationSceneSpecification();
  id v1 = objc_msgSendSuper2(&v4, sel_initialSettingsDiffActions);
  type metadata accessor for _UISceneBSActionHandler(0, &lazy cache variable for type metadata for _UISceneSettingsDiffAction);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Array.append<A>(contentsOf:)(v2);
  return v5;
}

Class @objc ClarityUIApplicationSceneSpecification.initialSettingsDiffActions.getter(void *a1, uint64_t a2, void (*a3)(void), unint64_t *a4)
{
  id v6 = a1;
  a3();

  type metadata accessor for _UISceneBSActionHandler(0, a4);
  v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v7.super.isa;
}

uint64_t ClarityUIApplicationSceneSpecification.initialActionHandlers.getter()
{
  uint64_t v5 = MEMORY[0x1E4FBC860];
  objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ClarityUIBackButtonActionHandler()), sel_init);
  MEMORY[0x18C115B40]();
  if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for ClarityUIApplicationSceneSpecification();
  id v1 = objc_msgSendSuper2(&v4, sel_initialActionHandlers);
  type metadata accessor for _UISceneBSActionHandler(0, &lazy cache variable for type metadata for _UISceneBSActionHandler);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Array.append<A>(contentsOf:)(v2);
  return v5;
}

id ClarityUIApplicationSceneSpecification.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClarityUIApplicationSceneSpecification();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ClarityUIApplicationSceneSpecification()
{
  return self;
}

void protocol witness for View.body.getter in conformance GaugeStyleConfiguration.MarkedValueLabel()
{
}

double GaugeStyleConfiguration.value.getter()
{
  return *(double *)v0;
}

void GaugeStyleConfiguration.value.setter(double a1)
{
  double *v1 = a1;
}

uint64_t (*GaugeStyleConfiguration.value.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t (*GaugeStyleConfiguration.label.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void GaugeStyleConfiguration.currentValueLabel.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

unsigned char *GaugeStyleConfiguration.currentValueLabel.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 8) = *result;
  return result;
}

uint64_t (*GaugeStyleConfiguration.currentValueLabel.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void GaugeStyleConfiguration.minimumValueLabel.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 9);
}

unsigned char *GaugeStyleConfiguration.minimumValueLabel.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 9) = *result;
  return result;
}

uint64_t (*GaugeStyleConfiguration.minimumValueLabel.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void GaugeStyleConfiguration.maximumValueLabel.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 10);
}

unsigned char *GaugeStyleConfiguration.maximumValueLabel.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 10) = *result;
  return result;
}

uint64_t (*GaugeStyleConfiguration.maximumValueLabel.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double protocol witness for StyleableView.configuration.getter in conformance ResolvedGaugeStyle@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)v1;
  char v3 = *(unsigned char *)(v1 + 8);
  char v4 = *(unsigned char *)(v1 + 9);
  char v5 = *(unsigned char *)(v1 + 10);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4;
  *(unsigned char *)(a1 + 10) = v5;
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedGaugeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedGaugeStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t View.gaugeStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for GaugeStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  id v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for GaugeStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t instantiation function for generic protocol witness table for GaugeStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in GaugeStyleConfiguration.Label()
{
  return &protocol witness table for GaugeStyleConfiguration.Label;
}

unint64_t instantiation function for generic protocol witness table for GaugeStyleConfiguration.CurrentValueLabel(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in GaugeStyleConfiguration.CurrentValueLabel()
{
  return &protocol witness table for GaugeStyleConfiguration.CurrentValueLabel;
}

unint64_t instantiation function for generic protocol witness table for GaugeStyleConfiguration.MinimumValueLabel(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in GaugeStyleConfiguration.MinimumValueLabel()
{
  return &protocol witness table for GaugeStyleConfiguration.MinimumValueLabel;
}

unint64_t instantiation function for generic protocol witness table for GaugeStyleConfiguration.MaximumValueLabel(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in GaugeStyleConfiguration.MaximumValueLabel()
{
  return &protocol witness table for GaugeStyleConfiguration.MaximumValueLabel;
}

unint64_t instantiation function for generic protocol witness table for GaugeStyleConfiguration.MarkedValueLabel(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel()
{
  unint64_t result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in GaugeStyleConfiguration.MarkedValueLabel()
{
  return &protocol witness table for GaugeStyleConfiguration.MarkedValueLabel;
}

uint64_t dispatch thunk of GaugeStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for GaugeStyleConfiguration.MarkedValueLabel()
{
  return &type metadata for GaugeStyleConfiguration.MarkedValueLabel;
}

uint64_t sub_1881162EC()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for GaugeStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for GaugeStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1881166D0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in GaugeStyleModifier<A>()
{
  return &protocol witness table for GaugeStyleModifier<A>;
}

uint64_t base witness table accessor for MultiViewModifier in GaugeStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in GaugeStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t GaugeStyleModifier.styleBody(configuration:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  size_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  int v11 = (char *)&v17 - v10;
  char v12 = *((unsigned char *)a1 + 8);
  char v13 = *((unsigned char *)a1 + 9);
  char v14 = *((unsigned char *)a1 + 10);
  uint64_t v17 = *a1;
  char v18 = v12;
  char v19 = v13;
  char v20 = v14;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 24))(&v17, v4, v3);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  int v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v15)(v11, AssociatedTypeWitness);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance GaugeStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance GaugeStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance GaugeStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t sub_188116A98()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

unint64_t lazy protocol witness table accessor for type GaugeStyleModifier<DefaultGaugeStyle> and conformance GaugeStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type GaugeStyleModifier<DefaultGaugeStyle> and conformance GaugeStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type GaugeStyleModifier<DefaultGaugeStyle> and conformance GaugeStyleModifier<A>)
  {
    type metadata accessor for GaugeStyleModifier<DefaultGaugeStyle>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleModifier<DefaultGaugeStyle> and conformance GaugeStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for GaugeStyleModifier<DefaultGaugeStyle>()
{
  if (!lazy cache variable for type metadata for GaugeStyleModifier<DefaultGaugeStyle>)
  {
    lazy protocol witness table accessor for type DefaultGaugeStyle and conformance DefaultGaugeStyle();
    unint64_t v0 = type metadata accessor for GaugeStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GaugeStyleModifier<DefaultGaugeStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DefaultGaugeStyle and conformance DefaultGaugeStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultGaugeStyle and conformance DefaultGaugeStyle;
  if (!lazy protocol witness table cache variable for type DefaultGaugeStyle and conformance DefaultGaugeStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultGaugeStyle and conformance DefaultGaugeStyle);
  }
  return result;
}

uint64_t destroy for AnyToken(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 32);
}

uint64_t initializeWithCopy for AnyToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 32, a2 + 32);
  return a1;
}

uint64_t *assignWithCopy for AnyToken(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t assignWithTake for AnyToken(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

ValueMetadata *type metadata accessor for AnyToken()
{
  return &type metadata for AnyToken;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8AnyTokenVG_s0F8HashableVs5NeverOTg503_s7d91UI024StringTokensToAttributedC10ProjectionV3set4base8newValueyx_SStz_10Foundation0fC0VtFs11fh6VAA0M5G53Vcfu0_32e55f43d5f68d0f276a2331b4c7561cb4AmKTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v13;
    uint64_t v4 = a1 + 64;
    do
    {
      outlined init with copy of AnyHashable(v4, (uint64_t)v11);
      uint64_t v13 = v2;
      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1);
        uint64_t v2 = v13;
      }
      *(void *)(v2 + 16) = v6 + 1;
      uint64_t v7 = v2 + 40 * v6;
      long long v8 = v11[0];
      long long v9 = v11[1];
      *(void *)(v7 + 64) = v12;
      *(_OWORD *)(v7 + 32) = v8;
      *(_OWORD *)(v7 + 48) = v9;
      v4 += 72;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized BidirectionalCollection.last.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AttributedString.Runs.Index();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unint64_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v6);
  long long v8 = &v18[-v7];
  type metadata accessor for AttributedString.Runs();
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x1E4F27368]);
  if (dispatch thunk of Collection.isEmpty.getter())
  {
    uint64_t v9 = type metadata accessor for AttributedString.Runs.Run();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    return v10(a1, 1, 1, v9);
  }
  else
  {
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x1E4F27368]);
    dispatch thunk of BidirectionalCollection.index(before:)();
    uint64_t v12 = *(void (**)(unsigned char *, uint64_t))(v3 + 8);
    v12(v5, v2);
    uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v15 = v14;
    uint64_t v16 = type metadata accessor for AttributedString.Runs.Run();
    uint64_t v17 = *(void *)(v16 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, v15, v16);
    v13(v18, 0);
    v12(v8, v2);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
  }
}

uint64_t AttributedString.search.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AttributedString();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

Swift::Void __swiftcall SearchAttributedString.update(tokens:text:)(Swift::OpaquePointer tokens, Swift::String text)
{
  uint64_t v3 = v2;
  object = text._object;
  uint64_t countAndFlagsBits = text._countAndFlagsBits;
  uint64_t v7 = type metadata accessor for AttributeContainer();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v8 = type metadata accessor for AttributedString();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  int v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v20 - v13;
  AttributedString.init()();
  uint64_t v15 = *((void *)tokens._rawValue + 2);
  if (v15)
  {
    v20[1] = countAndFlagsBits;
    _OWORD v20[2] = object;
    uint64_t v21 = v9;
    uint64_t v22 = v3;
    rawuint64_t Value = tokens._rawValue;
    uint64_t v17 = (char *)tokens._rawValue + 32;
    v20[0] = rawValue;
    swift_bridgeObjectRetain();
    do
    {
      v23[0] = 12369903;
      MEMORY[0x18C115890](v23, 3);
      AttributeContainer.init()();
      AttributedString.init(_:attributes:)();
      uint64_t KeyPath = swift_getKeyPath();
      MEMORY[0x1F4188790](KeyPath);
      v20[-2] = v19;
      swift_getKeyPath();
      outlined init with copy of AnyToken((uint64_t)v17, (uint64_t)v23);
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();
      AttributedString.subscript.setter();
      static AttributedString.+= infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v17 += 72;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    uint64_t v9 = v21;
    uint64_t v3 = v22;
  }
  swift_bridgeObjectRetain();
  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
  AttributedString.append<A>(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 40))(v3, v14, v8);
}

char *SearchAttributedString.tokens.getter()
{
  uint64_t v60 = type metadata accessor for AttributedString.Runs.Run();
  uint64_t v67 = *(char **)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  char v68 = (char *)&v48 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributedString.Runs.Run?(0);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v66 = (char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for AttributedString.Runs.Index();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v64 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v48 - v7;
  uint64_t v9 = type metadata accessor for AttributedString.Runs();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  uint64_t v14 = v13 - 8;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v48 - v18;
  AttributedString.runs.getter();
  char v20 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v54 = v10 + 16;
  uint64_t v53 = v20;
  v20(v16, (uint64_t)v12, v9);
  uint64_t v61 = lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x1E4F27368]);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v55 = v12;
  uint64_t v56 = v10 + 8;
  uint64_t v52 = v21;
  v21(v12, v9);
  uint64_t v22 = &v16[*(int *)(v14 + 44)];
  uint64_t v23 = v4;
  unint64_t v24 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
  uint64_t v63 = v8;
  v24(v22, v8, v3);
  outlined init with take of IndexingIterator<AttributedString.Runs>((uint64_t)v16, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  uint64_t v25 = *(int *)(v14 + 44);
  int v62 = v19;
  uint64_t v26 = &v19[v25];
  id v58 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  uint64_t v65 = v23 + 16;
  uint64_t v57 = v23 + 8;
  uint64_t v51 = (void (**)(char *))(v67 + 16);
  int v59 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56);
  uint64_t v50 = (unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
  uint64_t v49 = (void (**)(char *, char *, uint64_t))(v67 + 32);
  uint64_t v48 = (void (**)(char *, uint64_t))(v67 + 8);
  uint64_t v67 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v27 = (uint64_t)v19;
  Swift::String v28 = (void (**)(char *, uint64_t))(v23 + 8);
  while (1)
  {
    uint64_t v29 = v63;
    v58(v63, v26, v3);
    uint64_t v30 = v64;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, MEMORY[0x1E4F27358]);
    char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v32 = *v28;
    (*v28)(v30, v3);
    v32(v29, v3);
    if (v31) {
      break;
    }
    Swift::OpaquePointer v33 = (void (*)(_OWORD *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v34 = v66;
    uint64_t v35 = v60;
    (*v51)(v66);
    v33(v74, 0);
    uint64_t v36 = v55;
    v53(v55, v27, v9);
    dispatch thunk of Collection.formIndex(after:)();
    v52(v36, v9);
    (*v59)(v34, 0, 1, v35);
    if ((*v50)(v34, 1, v35) == 1) {
      goto LABEL_12;
    }
    uint64_t v37 = v68;
    (*v49)(v68, v34, v35);
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    *(&v48 - 2) = v39;
    swift_getKeyPath();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();
    AttributedString.Runs.Run.subscript.getter();
    swift_release();
    if (*((void *)&v70 + 1))
    {
      v74[2] = v71;
      v74[3] = v72;
      uint64_t v75 = v73;
      v74[0] = v69;
      v74[1] = v70;
      outlined init with copy of AnyToken((uint64_t)v74, (uint64_t)&v69);
      unint64_t v40 = v67;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v40 + 2) + 1, 1, v40);
      }
      unint64_t v42 = *((void *)v40 + 2);
      unint64_t v41 = *((void *)v40 + 3);
      if (v42 >= v41 >> 1) {
        unint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, v40);
      }
      *((void *)v40 + 2) = v42 + 1;
      uint64_t v67 = v40;
      uint64_t v43 = &v40[72 * v42];
      *((_OWORD *)v43 + 2) = v69;
      long long v44 = v70;
      long long v45 = v71;
      long long v46 = v72;
      *((void *)v43 + 12) = v73;
      *((_OWORD *)v43 + 4) = v45;
      *((_OWORD *)v43 + 5) = v46;
      *((_OWORD *)v43 + 3) = v44;
      outlined destroy of AnyToken((uint64_t)v74);
      (*v48)(v68, v35);
    }
    else
    {
      (*v48)(v37, v35);
      outlined destroy of AnyToken?((uint64_t)&v69);
    }
  }
  (*v59)(v66, 1, 1, v60);
LABEL_12:
  _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_1(v27, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  return v67;
}

double AnyToken.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  *(void *)(a3 + 24) = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
  uint64_t v8 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(boxed_opaque_existential_1, a1, a2);
  dispatch thunk of Identifiable.id.getter();
  swift_getAssociatedConformanceWitness();
  AnyHashable.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, a2);
  double result = *(double *)&v10;
  *(_OWORD *)(a3 + 32) = v10;
  *(_OWORD *)(a3 + 48) = v11;
  *(void *)(a3 + 64) = v12;
  return result;
}

Swift::Void __swiftcall SearchAttributedString.update(text:)(Swift::String text)
{
  uint64_t countAndFlagsBits = text._countAndFlagsBits;
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v26 = v1;
  MEMORY[0x1F4188790](v1);
  uint64_t v25 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributedString.Runs.Run?(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AttributedString.Runs();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AttributedString.Runs.Run();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v27 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttributeContainer();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v29 = type metadata accessor for AttributedString();
  uint64_t v14 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  AttributedString.runs.getter();
  specialized BidirectionalCollection.last.getter((uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10) == 1)
  {
    _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_1((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for AttributedString.Runs.Run?);
  }
  else
  {
    uint64_t v17 = v27;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v27, v5, v10);
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    *(&v24 - 2) = v19;
    swift_getKeyPath();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();
    AttributedString.Runs.Run.subscript.getter();
    swift_release();
    uint64_t v20 = v31;
    outlined destroy of AnyToken?((uint64_t)v30);
    if (!v20)
    {
      uint64_t v22 = (uint64_t)v25;
      AttributedString.Runs.Run.range.getter();
      lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
      lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
      uint64_t v23 = v17;
      uint64_t v21 = v29;
      AttributedString.replaceSubrange<A, B>(_:with:)();
      _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_1(v22, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v23, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  }
  uint64_t v21 = v29;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
  AttributedString.append<A>(_:)();
LABEL_7:
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v21);
}

uint64_t SearchAttributedString.append(token:)(uint64_t a1)
{
  uint64_t v33 = a1;
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v28 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v27 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributedString.Runs.Run?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttributedString.Runs();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AttributedString.Runs.Run();
  uint64_t v30 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v29 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttributeContainer();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v14 = type metadata accessor for AttributedString();
  uint64_t v31 = *(void *)(v14 - 8);
  uint64_t v32 = v14;
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35[0] = 12369903;
  MEMORY[0x18C115890](v35, 3, v15);
  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  outlined init with copy of AnyToken(v33, (uint64_t)v35);
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();
  AttributedString.subscript.setter();
  uint64_t v33 = v1;
  AttributedString.runs.getter();
  specialized BidirectionalCollection.last.getter((uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v18 = v30;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v6, 1, v11) == 1)
  {
    _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_1((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for AttributedString.Runs.Run?);
  }
  else
  {
    uint64_t v19 = v29;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v29, v6, v11);
    uint64_t v20 = swift_getKeyPath();
    MEMORY[0x1F4188790](v20);
    *(&v26 - 2) = v21;
    swift_getKeyPath();
    AttributedString.Runs.Run.subscript.getter();
    swift_release();
    uint64_t v22 = v35[3];
    outlined destroy of AnyToken?((uint64_t)v35);
    if (!v22)
    {
      uint64_t v24 = (uint64_t)v27;
      AttributedString.Runs.Run.range.getter();
      lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
      lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
      uint64_t v23 = v32;
      AttributedString.replaceSubrange<A, B>(_:with:)();
      _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_1(v24, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v17, v23);
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v11);
  }
  uint64_t v23 = v32;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
  AttributedString.append<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v17, v23);
}

uint64_t SearchAttributedString.lastText.getter()
{
  uint64_t v0 = type metadata accessor for AttributedString.Index();
  uint64_t v48 = *(void *)(v0 - 8);
  uint64_t v49 = v0;
  MEMORY[0x1F4188790](v0);
  long long v47 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  MEMORY[0x1F4188790](v2 - 8);
  long long v45 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v44 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  unint64_t v41 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Slice<AttributedString.CharacterView>();
  uint64_t v42 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v43 = (char *)&v39 - v9;
  type metadata accessor for AttributedString.Runs.Run?(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttributedString.Runs();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for AttributedString.Runs.Run();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  AttributedString.runs.getter();
  specialized BidirectionalCollection.last.getter((uint64_t)v12);
  uint64_t v21 = v13;
  uint64_t v22 = v18;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v12, 1, v17) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v12, v17);
    uint64_t v23 = v41;
    AttributedString.characters.getter();
    uint64_t v24 = (uint64_t)v45;
    AttributedString.Runs.Run.range.getter();
    uint64_t v25 = (uint64_t)v43;
    AttributedString.CharacterView.subscript.getter();
    _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_1(v24, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v23, v46);
    uint64_t v27 = (uint64_t)v47;
    uint64_t v26 = v48;
    uint64_t v28 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, v25, v49);
    lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x1E4F27388]);
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v40 = v17;
    uint64_t v30 = v22;
    if (v29)
    {
      uint64_t v31 = 0;
      uint64_t v32 = 0;
    }
    else
    {
      uint64_t v31 = specialized Slice.subscript.getter(v27);
      uint64_t v32 = v33;
    }
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
    uint64_t v50 = 12369903;
    uint64_t v34 = MEMORY[0x18C115890](&v50, 3);
    if (v32)
    {
      if (v31 == v34 && v32 == v35)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_12:
        _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_1(v25, (uint64_t (*)(void))type metadata accessor for Slice<AttributedString.CharacterView>);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v20, v40);
        return 0;
      }
      char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v36) {
        goto LABEL_12;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    outlined init with copy of Slice<AttributedString.CharacterView>(v25, (uint64_t)v7);
    uint64_t v37 = String.init(_:)();
    _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_1(v25, (uint64_t (*)(void))type metadata accessor for Slice<AttributedString.CharacterView>);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v20, v40);
    return v37;
  }
  _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_1((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for AttributedString.Runs.Run?);
  return 0;
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>)()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

uint64_t key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.AnyTokenAttribute()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();

  return AttributeDynamicLookup.subscript.getter();
}

uint64_t protocol witness for Identifiable.id.getter in conformance AnyToken@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AnyHashable(v1 + 32, a1);
}

Swift::Void __swiftcall SearchAttributedString.update(tokens:)(Swift::OpaquePointer tokens)
{
  type metadata accessor for Slice<AttributedString.CharacterView>();
  uint64_t v74 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v73 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for AttributedString.CharacterView();
  char v68 = *(void (***)(char *, uint64_t))(v72 - 8);
  MEMORY[0x1F4188790](v72);
  long long v71 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  MEMORY[0x1F4188790](v5 - 8);
  long long v70 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for AttributedString.Runs.Run();
  uint64_t v7 = *(void *)(v100 - 8);
  MEMORY[0x1F4188790](v100);
  uint64_t v97 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributedString.Runs.Run?(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v99 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for AttributedString.Runs.Index();
  uint64_t v11 = *(void *)(v94 - 8);
  MEMORY[0x1F4188790](v94);
  uint64_t v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v95 = (char *)&v65 - v15;
  uint64_t v16 = type metadata accessor for AttributedString.Runs();
  uint64_t v96 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v92 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  uint64_t v19 = v18;
  MEMORY[0x1F4188790](v18);
  uint64_t v88 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v85 = (uint64_t)&v65 - v22;
  uint64_t v23 = type metadata accessor for AttributeContainer();
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v75 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for AttributedString();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v65 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  char v98 = (char *)&v65 - v30;
  AttributedString.init()();
  uint64_t v31 = *((void *)tokens._rawValue + 2);
  id v90 = v13;
  uint64_t v93 = v16;
  uint64_t v66 = v26;
  if (v31)
  {
    uint64_t v89 = v19;
    uint64_t v91 = v11;
    uint64_t v32 = (char *)tokens._rawValue + 32;
    swift_bridgeObjectRetain();
    do
    {
      v101[0] = 12369903;
      MEMORY[0x18C115890](v101, 3);
      AttributeContainer.init()();
      AttributedString.init(_:attributes:)();
      uint64_t KeyPath = swift_getKeyPath();
      MEMORY[0x1F4188790](KeyPath);
      *(&v65 - 2) = v34;
      swift_getKeyPath();
      outlined init with copy of AnyToken((uint64_t)v32, (uint64_t)v101);
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();
      AttributedString.subscript.setter();
      static AttributedString.+= infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
      v32 += 72;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
    uint64_t v11 = v91;
    uint64_t v16 = v93;
    uint64_t v26 = v66;
    uint64_t v19 = v89;
  }
  long long v69 = v28;
  uint64_t v76 = v25;
  uint64_t v35 = v92;
  AttributedString.runs.getter();
  uint64_t v36 = v11;
  uint64_t v37 = v96;
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v96 + 16);
  uint64_t v39 = (uint64_t)v88;
  uint64_t v84 = v96 + 16;
  uint64_t v83 = v38;
  v38(v88, (uint64_t)v35, v16);
  uint64_t v40 = lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x1E4F27368]);
  unint64_t v41 = v95;
  uint64_t v89 = v40;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v37 + 8);
  uint64_t v96 = v37 + 8;
  uint64_t v82 = v42;
  v42(v35, v16);
  uint64_t v43 = v36;
  (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v39 + *(int *)(v19 + 36), v41, v94);
  uint64_t v44 = v85;
  outlined init with take of IndexingIterator<AttributedString.Runs>(v39, v85, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  uint64_t v45 = v44 + *(int *)(v19 + 36);
  uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  v43 += 16;
  uint64_t v87 = v46;
  v86 = (void (**)(char *, uint64_t))(v43 - 8);
  BOOL v81 = (void (**)(char *))(v7 + 16);
  uint64_t v88 = (char *)(v7 + 56);
  uint64_t v80 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v79 = (void (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v78 = (void (**)(char *, uint64_t))(v7 + 8);
  ++v68;
  uint64_t v67 = (void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v91 = v43;
  uint64_t v47 = v94;
  while (1)
  {
    uint64_t v48 = v95;
    v87(v95, v45, v47);
    uint64_t v49 = v90;
    uint64_t v50 = v93;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, MEMORY[0x1E4F27358]);
    char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v52 = *v86;
    (*v86)(v49, v47);
    v52(v48, v47);
    if (v51) {
      break;
    }
    uint64_t v53 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v54 = v99;
    uint64_t v55 = v100;
    (*v81)(v99);
    v53(v101, 0);
    uint64_t v56 = v92;
    v83(v92, v44, v50);
    dispatch thunk of Collection.formIndex(after:)();
    v82(v56, v50);
    (*(void (**)(char *, void, uint64_t, uint64_t))v88)(v54, 0, 1, v55);
    if ((*v80)(v54, 1, v55) == 1) {
      goto LABEL_12;
    }
    uint64_t v57 = v97;
    (*v79)(v97, v99, v100);
    uint64_t v58 = swift_getKeyPath();
    MEMORY[0x1F4188790](v58);
    *(&v65 - 2) = v59;
    swift_getKeyPath();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();
    AttributedString.Runs.Run.subscript.getter();
    swift_release();
    uint64_t v60 = v101[3];
    outlined destroy of AnyToken?((uint64_t)v101);
    if (!v60)
    {
      uint64_t v61 = (uint64_t)v70;
      AttributedString.Runs.Run.range.getter();
      int v62 = v71;
      AttributedString.characters.getter();
      AttributedString.CharacterView.subscript.getter();
      uint64_t v57 = v97;
      (*v68)(v62, v72);
      _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_1(v61, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      AttributeContainer.init()();
      lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(&lazy protocol witness table cache variable for type Slice<AttributedString.CharacterView> and conformance Slice<A>, (void (*)(uint64_t))type metadata accessor for Slice<AttributedString.CharacterView>);
      uint64_t v63 = v69;
      AttributedString.init<A>(_:attributes:)();
      lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
      uint64_t v64 = v76;
      AttributedString.append<A>(_:)();
      (*v67)(v63, v64);
    }
    (*v78)(v57, v100);
    uint64_t v44 = v85;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))v88)(v99, 1, 1, v100);
LABEL_12:
  _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_1(v44, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  (*(void (**)(uint64_t, char *, uint64_t))(v66 + 40))(v77, v98, v76);
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for static AttributedStringKey.runBoundaries.getter in conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute()
{
  return MEMORY[0x1F40E4140]();
}

uint64_t protocol witness for static AttributedStringKey.inheritedByAddedText.getter in conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute()
{
  return MEMORY[0x1F40E4150]();
}

uint64_t protocol witness for static AttributedStringKey.invalidationConditions.getter in conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute()
{
  return MEMORY[0x1F40E4160]();
}

uint64_t sub_188119C38()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();

  return AttributeDynamicLookup.subscript.getter();
}

uint64_t sub_188119C74()
{
  return 8;
}

uint64_t sub_188119C80()
{
  return swift_release();
}

uint64_t sub_188119C88(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_188119C98()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void *sub_188119CDC(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t outlined destroy of AnyToken?(uint64_t a1)
{
  type metadata accessor for AnyToken?(0, &lazy cache variable for type metadata for AnyToken?, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>()
{
  if (!lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>)
  {
    type metadata accessor for AttributeScopes.SwiftUIAttributes();
    unint64_t v0 = type metadata accessor for KeyPath();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>);
    }
  }
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance StringToAttributedStringProjection(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t result = String.init(_:)();
  *a1 = result;
  a1[1] = v9;
  return result;
}

uint64_t StringTokensToAttributedStringProjection.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  uint64_t v34 = a5;
  uint64_t v35 = a7;
  uint64_t v33 = a2;
  uint64_t v31 = a1;
  uint64_t v36 = a8;
  uint64_t v11 = type metadata accessor for SearchAttributedString();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AttributedString();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v32 = TupleTypeMetadata2;
  uint64_t v19 = *(void *)(TupleTypeMetadata2 - 8);
  double v20 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v22 = (char *)&v31 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a4 - 8) + 16))((char *)&v31 - v21, v31, a4, v20);
  uint64_t v23 = (uint64_t *)&v22[*(int *)(TupleTypeMetadata2 + 48)];
  *uint64_t v23 = v33;
  v23[1] = a3;
  swift_bridgeObjectRetain();
  AttributedString.init()();
  uint64_t v38 = a4;
  uint64_t v39 = v34;
  uint64_t v40 = a6;
  uint64_t v41 = v35;
  uint64_t v25 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in StringTokensToAttributedStringProjection.get(base:), (uint64_t)v37, a4, (uint64_t)&type metadata for AnyToken, MEMORY[0x1E4FBC248], *(void *)(a6 + 8), MEMORY[0x1E4FBC278], v24);
  uint64_t v26 = *v23;
  uint64_t v27 = (void *)v23[1];
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v13, v17, v14);
  v28._uint64_t countAndFlagsBits = v26;
  v28._object = v27;
  SearchAttributedString.update(tokens:text:)((Swift::OpaquePointer)v25, v28);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v29(v17, v13, v14);
  v29(v36, v17, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, v32);
}

double implicit closure #1 in StringTokensToAttributedStringProjection.get(base:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v5 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v10 - v6;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v10 - v6, a1, AssociatedTypeWitness, v5);
  return AnyToken.init<A>(_:)((uint64_t)v7, AssociatedTypeWitness, a2);
}

uint64_t closure #1 in StringTokensToAttributedStringProjection.set(base:newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of Any(a1, (uint64_t)&v6);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v4 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(a2, v4 ^ 1u, 1, AssociatedTypeWitness);
}

uint64_t key path getter for Identifiable.id : <A>A.Sequence.Element()
{
  return dispatch thunk of Identifiable.id.getter();
}

uint64_t protocol witness for Projection.get(base:) in conformance StringTokensToAttributedStringProjection<A>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  uint64_t v6 = a2[2];
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[4];
  uint64_t v12 = a2[5];

  return StringTokensToAttributedStringProjection.get(base:)(a1, v8, v9, v6, v10, v11, v12, a3);
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance StringTokensToAttributedStringProjection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized StringTokensToAttributedStringProjection.set(base:newValue:)(a1, a2, *(void *)(a3 + 16), *(char **)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40));
}

uint64_t specialized Slice.subscript.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v37 = a1;
  type metadata accessor for (lower: AttributedString.Index, upper: AttributedString.Index)();
  uint64_t v4 = v3 - 8;
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v30 - v8;
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v35 = v10 - 8;
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v32 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v36 = (uint64_t)&v30 - v13;
  type metadata accessor for Slice<AttributedString.CharacterView>();
  uint64_t v33 = v1;
  uint64_t v34 = v14;
  uint64_t v15 = v1 + *(int *)(v14 + 36);
  uint64_t v16 = &v9[*(int *)(v4 + 56)];
  uint64_t v17 = type metadata accessor for AttributedString.Index();
  uint64_t v18 = *(void **)(v17 - 8);
  uint64_t v19 = (void (*)(char *, uint64_t, uint64_t))v18[2];
  v19(v9, v2, v17);
  uint64_t v31 = v16;
  v19(v16, v15, v17);
  double v20 = &v6[*(int *)(v4 + 56)];
  v19(v6, (uint64_t)v9, v17);
  v19(v20, (uint64_t)v16, v17);
  uint64_t v21 = (void (*)(char *, char *, uint64_t))v18[4];
  uint64_t v22 = (uint64_t)v32;
  v21(v32, v6, v17);
  uint64_t v23 = (void (*)(char *, uint64_t))v18[1];
  v23(v20, v17);
  uint64_t v24 = &v6[*(int *)(v4 + 56)];
  v21(v6, v9, v17);
  v21(v24, v31, v17);
  v21((char *)(v22 + *(int *)(v35 + 44)), v24, v17);
  v23(v6, v17);
  uint64_t v25 = v36;
  outlined init with take of IndexingIterator<AttributedString.Runs>(v22, v36, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
  type metadata accessor for AttributedString.CharacterView();
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x1E4F27270]);
  dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
  _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_1(v25, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
  uint64_t v26 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v28 = *v27;
  swift_bridgeObjectRetain();
  v26(v38, 0);
  return v28;
}

uint64_t outlined init with copy of Slice<AttributedString.CharacterView>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Slice<AttributedString.CharacterView>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for StringTokensToAttributedStringProjection()
{
  return swift_getGenericMetadata();
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.AnyTokenAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.AnyTokenAttribute;
}

uint64_t initializeBufferWithCopyOfBuffer for SearchAttributedString(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t initializeWithCopy for SearchAttributedString(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for SearchAttributedString(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for SearchAttributedString(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for SearchAttributedString(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchAttributedString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18811AA78);
}

uint64_t sub_18811AA78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SearchAttributedString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18811AAF8);
}

uint64_t sub_18811AAF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

ValueMetadata *type metadata accessor for StringToAttributedStringProjection()
{
  return &type metadata for StringToAttributedStringProjection;
}

uint64_t base witness table accessor for Equatable in StringTokensToAttributedStringProjection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in StringTokensToAttributedStringProjection<A>()
{
  return swift_getWitnessTable();
}

uint64_t specialized StringTokensToAttributedStringProjection.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v118 = a6;
  uint64_t v115 = a4;
  uint64_t v113 = a1;
  uint64_t v9 = *(void *)(a5 + 8);
  uint64_t v111 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v119 = AssociatedTypeWitness;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v108 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v107 = (char *)&v90 - v13;
  uint64_t v112 = v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v106 = type metadata accessor for Range();
  char v98 = *(void (***)(char *, uint64_t))(v106 - 8);
  MEMORY[0x1F4188790](v106);
  id v105 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  id v104 = (char *)&v90 - v16;
  uint64_t v96 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v110 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  unint64_t v21 = (unint64_t)&v90 - v20;
  uint64_t v103 = *(void *)(a3 - 8);
  uint64_t v22 = v103;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for SearchAttributedString();
  MEMORY[0x1F4188790](v26 - 8);
  uint64_t v28 = (char *)&v90 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for AttributedString();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v28, a2, v29);
  Swift::tuple_OpaquePointer_String v139 = SearchAttributedString.splitIntoTokensAndText()();
  rawuint64_t Value = v139._0._rawValue;
  uint64_t v114 = (void (*)(char *, uint64_t))v139._0._rawValue;
  uint64_t countAndFlagsBits = v139._1._countAndFlagsBits;
  object = v139._1._object;
  _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_1((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for SearchAttributedString);
  uint64_t v31 = v115;
  uint64_t v130 = a3;
  long long v131 = v115;
  uint64_t v132 = a5;
  uint64_t v32 = v118;
  uint64_t v133 = v118;
  uint64_t v134 = (uint64_t)rawValue;
  type metadata accessor for AnyToken?(0, &lazy cache variable for type metadata for [AnyToken], MEMORY[0x1E4FBB320]);
  uint64_t v33 = swift_getAssociatedTypeWitness();
  lazy protocol witness table accessor for type [AnyToken] and conformance [A]();
  uint64_t v95 = Sequence.compactMap<A>(_:)();
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v35 = v25;
  v34(v25, v113, a3);
  uint64_t v126 = a3;
  uint64_t v127 = v31;
  uint64_t v36 = v31;
  uint64_t v37 = v111;
  uint64_t v128 = v111;
  uint64_t v129 = v32;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v121 = a3;
  uint64_t v122 = v36;
  uint64_t v123 = v37;
  uint64_t v124 = v32;
  uint64_t v125 = KeyPath;
  uint64_t v94 = v33;
  uint64_t v39 = swift_getAssociatedTypeWitness();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in StringTokensToAttributedStringProjection.set(base:newValue:), (uint64_t)v120, a3, v39, MEMORY[0x1E4FBC248], v112, MEMORY[0x1E4FBC278], v40);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v103 + 8);
  uint64_t v117 = a3;
  v41(v35, a3);
  swift_release();
  uint64_t v42 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8AnyTokenVG_s0F8HashableVs5NeverOTg503_s7d91UI024StringTokensToAttributedC10ProjectionV3set4base8newValueyx_SStz_10Foundation0fC0VtFs11fh6VAA0M5G53Vcfu0_32e55f43d5f68d0f276a2331b4c7561cb4AmKTf3nnnpk_nTf1cn_n((uint64_t)v114);
  swift_bridgeObjectRelease();
  uint64_t v43 = _arrayForceCast<A, B>(_:)();
  swift_bridgeObjectRelease();
  uint64_t v134 = MEMORY[0x1E4FBC860];
  uint64_t v44 = &v134;
  specialized CollectionChanges.formChanges<A, B>(from:to:)(v43, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v45 = v134;
  char v46 = specialized CollectionChanges.Projection.init(kind:changes:)(0, v134);
  uint64_t v118 = v48;
  uint64_t v103 = v49;
  if (v47 == v49) {
    goto LABEL_47;
  }
  char v50 = v46;
  uint64_t v51 = v47;
  id v102 = (void (**)(char *, uint64_t *, uint64_t *))(v96 + 16);
  id v101 = (void (**)(char *, char *, uint64_t))(v96 + 32);
  uint64_t v100 = (void **)(v96 + 8);
  uint64_t v99 = (void (**)(char *, char *, uint64_t))(v98 + 4);
  ++v98;
  uint64_t v93 = v45;
  char v52 = swift_bridgeObjectRetain();
  uint64_t v55 = v110;
  uint64_t v97 = (uint64_t *)v21;
LABEL_3:
  uint64_t v56 = v51 - 1;
  if (__OFSUB__(v51, 1)) {
    goto LABEL_23;
  }
  if (v56 < -1) {
    goto LABEL_24;
  }
  uint64_t v57 = *(char **)(v118 + 16);
  if ((unint64_t)v57 < v51) {
    goto LABEL_25;
  }
  if (!v51) {
    goto LABEL_50;
  }
  uint64_t v58 = v118 + 40 * v51;
  uint64_t v45 = v51 - 1;
  while (1)
  {
    if (v45 > v56)
    {
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      char v79 = v52;
      unint64_t v21 = (unint64_t)v53;
      uint64_t v51 = (uint64_t)v54;
      TupleTypeMetadata2 = v118 + 32;
      uint64_t v80 = (void (**)(uint64_t *, uint64_t))(v56 + 8);
      uint64_t v115 = (char *)(v118 + 104);
      while ((v21 & 0x8000000000000000) == 0)
      {
        uint64_t v84 = *(char **)(v118 + 16);
        if (v21 >= (unint64_t)v84) {
          goto LABEL_49;
        }
        uint64_t v85 = TupleTypeMetadata2 + 40 * v21;
        if (*(unsigned __int8 *)(v85 + 32) >= 2u)
        {
          uint64_t v134 = 0;
          unint64_t v135 = 0xE000000000000000;
          _StringGuts.grow(_:)(17);
          swift_bridgeObjectRelease();
          uint64_t v134 = 0x2064696C61766E69;
          unint64_t v135 = 0xEF203A7865646E69;
          long long v138 = (uint64_t *)v21;
LABEL_54:
          v89._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v89);
          swift_bridgeObjectRelease();
          goto LABEL_51;
        }
        uint64_t v45 = *(void *)v85;
        v86 = (char *)v51;
        if ((uint64_t)(v21 + 1) < v51)
        {
          if ((char *)(v21 + 1) == v84)
          {
            while (1)
            {
LABEL_52:
              uint64_t v134 = 0;
              unint64_t v135 = 0xE000000000000000;
              swift_bridgeObjectRetain();
              _StringGuts.grow(_:)(23);
              swift_bridgeObjectRelease();
              uint64_t v134 = 0xD000000000000015;
              unint64_t v135 = 0x800000018832DE70;
              long long v138 = (uint64_t *)v21;
              v88._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v88);
              swift_bridgeObjectRelease();
LABEL_51:
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
            }
          }
          uint64_t v57 = &v115[40 * v21];
          v86 = (char *)(v21 + 1);
          while ((uint64_t)v86 < (uint64_t)v84)
          {
            if (*v57)
            {
              if (*v57 == 1)
              {
                if (v79 == 1) {
                  goto LABEL_28;
                }
              }
              else if (v79 == 2)
              {
                goto LABEL_28;
              }
            }
            else if (!v79)
            {
              goto LABEL_28;
            }
            ++v86;
            v57 += 40;
            if (v84 == v86) {
              goto LABEL_52;
            }
          }
          __break(1u);
          goto LABEL_45;
        }
LABEL_28:
        dispatch thunk of Collection.startIndex.getter();
        Collection.formIndex(_:offsetBy:)();
        uint64_t v134 = Array.subscript.getter();
        unint64_t v135 = v81;
        uint64_t v136 = v82;
        uint64_t v137 = v83;
        type metadata accessor for ArraySlice();
        swift_getWitnessTable();
        dispatch thunk of RangeReplaceableCollection.insert<A>(contentsOf:at:)();
        (*v80)(v44, v119);
        unint64_t v21 = (unint64_t)v86;
        if (v86 == (char *)v51) {
          goto LABEL_21;
        }
      }
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      uint64_t v134 = 0;
      unint64_t v135 = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      uint64_t v134 = 0xD000000000000015;
      unint64_t v135 = 0x800000018832DE70;
      long long v138 = (uint64_t *)v51;
      v87._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v87);
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
    if (*(unsigned char *)(v58 + 24)) {
      break;
    }
    if (!v50)
    {
LABEL_16:
      if (v45 >= (uint64_t)v57) {
        goto LABEL_46;
      }
      uint64_t v59 = (uint64_t *)v21;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of Collection.startIndex.getter();
      Collection.formIndex(_:offsetBy:)();
      uint64_t v60 = (uint64_t *)v119;
      Collection.formIndex(_:offsetBy:)();
      uint64_t v44 = v60;
      char v52 = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((v52 & 1) == 0) {
        goto LABEL_26;
      }
      uint64_t v61 = TupleTypeMetadata2;
      int v62 = v107;
      uint64_t v63 = &v107[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v64 = *v102;
      (*v102)(v107, v59, v60);
      uint64_t v115 = v63;
      v64(v63, (uint64_t *)v55, v60);
      uint64_t v65 = v108;
      uint64_t v66 = &v108[*(int *)(v61 + 48)];
      v64(v108, (uint64_t *)v62, v60);
      v64(v66, (uint64_t *)v63, v60);
      uint64_t v67 = *v101;
      char v68 = v105;
      (*v101)(v105, v65, v119);
      uint64_t v114 = (void (*)(char *, uint64_t))*v100;
      v114(v66, v119);
      long long v69 = &v65[*(int *)(TupleTypeMetadata2 + 48)];
      v67(v65, v62, v119);
      v67(v69, v115, v119);
      uint64_t v70 = v106;
      v67(&v68[*(int *)(v106 + 36)], v69, v119);
      uint64_t v71 = v119;
      uint64_t v72 = (uint64_t *)v114;
      v114(v65, v119);
      uint64_t v73 = v104;
      (*v99)(v104, v68, v70);
      dispatch thunk of RangeReplaceableCollection.removeSubrange(_:)();
      uint64_t v74 = v73;
      uint64_t v55 = v110;
      (*v98)(v74, v70);
      uint64_t v44 = v72;
      ((void (*)(char *, uint64_t))v72)(v55, v71);
      unint64_t v21 = (unint64_t)v97;
      char v52 = ((uint64_t (*)(uint64_t *, uint64_t))v44)(v97, v71);
      uint64_t v51 = v45;
      if (v103 == v45)
      {
        uint64_t v44 = (uint64_t *)v21;
        swift_bridgeObjectRelease();
        uint64_t v45 = v93;
        goto LABEL_20;
      }
      goto LABEL_3;
    }
LABEL_9:
    --v45;
    v58 -= 40;
    if (v45 == -1) {
      goto LABEL_50;
    }
  }
  if (*(unsigned char *)(v58 + 24) == 1)
  {
    if (v50 == 1) {
      goto LABEL_16;
    }
    goto LABEL_9;
  }
  if (v50 != 2) {
    goto LABEL_9;
  }
LABEL_45:
  if (v45 < (uint64_t)v57)
  {
    uint64_t v134 = 0;
    unint64_t v135 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    uint64_t v134 = 0x2064696C61766E69;
    unint64_t v135 = 0xEF203A7865646E69;
    long long v138 = (uint64_t *)v45;
    goto LABEL_54;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  uint64_t v44 = (uint64_t *)v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_20:
  char v52 = specialized CollectionChanges.Projection.init(kind:changes:)(1, v45);
  uint64_t v118 = v75;
  uint64_t v56 = v96;
  if (v53 != (uint64_t *)v54) {
    goto LABEL_27;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v76 = (uint64_t *)(v113 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v78 = (uint64_t)object;
  *uint64_t v76 = countAndFlagsBits;
  v76[1] = v78;
  return result;
}

uint64_t partial apply for closure #1 in StringTokensToAttributedStringProjection.set(base:newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in StringTokensToAttributedStringProjection.set(base:newValue:)(a1, a2);
}

void type metadata accessor for AnyToken?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for AnyToken);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [AnyToken] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [AnyToken] and conformance [A];
  if (!lazy protocol witness table cache variable for type [AnyToken] and conformance [A])
  {
    type metadata accessor for AnyToken?(255, &lazy cache variable for type metadata for [AnyToken], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AnyToken] and conformance [A]);
  }
  return result;
}

uint64_t sub_18811BBB8()
{
  return 32;
}

__n128 sub_18811BBC4(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t partial apply for implicit closure #1 in StringTokensToAttributedStringProjection.set(base:newValue:)()
{
  return swift_getAtKeyPath();
}

double partial apply for implicit closure #1 in StringTokensToAttributedStringProjection.get(base:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return implicit closure #1 in StringTokensToAttributedStringProjection.get(base:)(a1, a2);
}

int *_OutlineGenerator_Configuration.init(element:isExpanded:grouping:parentContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(a9, a1, a10);
  __n128 result = (int *)type metadata accessor for _OutlineGenerator_Configuration();
  uint64_t v18 = a9 + result[15];
  *(void *)uint64_t v18 = a2;
  *(void *)(v18 + 8) = a3;
  *(unsigned char *)(v18 + 16) = a4;
  uint64_t v19 = (void *)(a9 + result[16]);
  *uint64_t v19 = a5;
  v19[1] = a6;
  uint64_t v20 = (void *)(a9 + result[17]);
  *uint64_t v20 = a7;
  v20[1] = a8;
  return result;
}

uint64_t OutlineGenerator<>.init(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
  uint64_t v5 = (int *)type metadata accessor for _OutlineGenerator_Configuration();
  uint64_t v6 = (uint64_t *)(a1 + v5[15]);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  char v21 = *((unsigned char *)v6 + 16);
  type metadata accessor for _OutlineGenerator_Configuration.Subtree();
  uint64_t v9 = (int *)type metadata accessor for OutlineGenerator();
  uint64_t v10 = a3 + v9[23];
  *(void *)uint64_t v10 = v8;
  *(void *)(v10 + 8) = v7;
  *(unsigned char *)(v10 + 16) = v21;
  uint64_t v11 = (uint64_t *)(a1 + v5[16]);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = (void *)(a3 + v9[24]);
  *uint64_t v14 = v12;
  v14[1] = v13;
  uint64_t v15 = (uint64_t *)(a1 + v5[17]);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  uint64_t v18 = (void *)(a3 + v9[25]);
  void *v18 = v16;
  v18[1] = v17;
  uint64_t v19 = *(uint64_t (**)(uint64_t, int *))(*((void *)v5 - 1) + 8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v19(a1, v5);
}

uint64_t type metadata accessor for _OutlineGenerator_Configuration()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for _OutlineGenerator_Configuration.Subtree()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for OutlineGenerator()
{
  return swift_getGenericMetadata();
}

uint64_t OutlineGenerator.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v40 = *(void *)(a1 + 24);
  uint64_t v39 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *(void *)(v6 + 32);
  uint64_t v42 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v9[6];
  uint64_t v34 = v9[5];
  uint64_t v35 = v10;
  uint64_t v36 = v9[9];
  uint64_t v37 = v9[10];
  uint64_t v57 = v34;
  uint64_t v58 = v10;
  uint64_t v59 = v36;
  uint64_t v60 = v37;
  type metadata accessor for StaticSourceWriter();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v41 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v33 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x1F4188790](v13);
  uint64_t v38 = (char *)&v30 - v15;
  uint64_t v17 = *(int *)(a1 + 92);
  uint64_t v16 = *(int *)(a1 + 96);
  uint64_t v31 = v2;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, char *))(v2 + v16);
  uint64_t v20 = *(void *)(v2 + v17);
  uint64_t v19 = *(void *)(v2 + v17 + 8);
  uint64_t v21 = *(unsigned __int8 *)(v2 + v17 + 16);
  (*(void (**)(uint64_t, double))(v2 + *(int *)(a1 + 100)))(v2, v14);
  v18(v20, v19, v21, v5);
  uint64_t v22 = v40;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v5, v40);
  uint64_t v45 = *(void *)(a1 + 16);
  uint64_t v46 = v22;
  uint64_t v23 = v32;
  uint64_t v47 = v32;
  uint64_t v48 = v34;
  uint64_t v24 = *(void *)(a1 + 56);
  uint64_t v25 = *(void *)(a1 + 64);
  uint64_t v49 = v35;
  uint64_t v50 = v24;
  uint64_t v51 = v25;
  uint64_t v52 = v36;
  uint64_t v53 = v37;
  uint64_t v54 = v31;
  uint64_t v26 = v33;
  View.viewAlias<A, B>(_:_:)(v34, (void (*)(double))partial apply for closure #1 in OutlineGenerator.body.getter, (uint64_t)v44, v32, v34, v35, v25);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v23);
  uint64_t v55 = v25;
  uint64_t v56 = &protocol witness table for StaticSourceWriter<A, B>;
  swift_getWitnessTable();
  uint64_t v27 = v38;
  static ViewBuilder.buildExpression<A>(_:)(v26);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v41 + 8);
  v28(v26, v11);
  static ViewBuilder.buildExpression<A>(_:)(v27);
  return ((uint64_t (*)(char *, uint64_t))v28)(v27, v11);
}

uint64_t closure #1 in OutlineGenerator.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  double v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[1] = v15;
  v25[2] = v16;
  v25[3] = v17;
  v25[4] = v18;
  v25[5] = v19;
  v25[6] = v20;
  v25[7] = v21;
  v25[8] = v22;
  v25[9] = a10;
  uint64_t v23 = type metadata accessor for OutlineGenerator();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v23 + 104));
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a6);
}

uint64_t type metadata completion function for _OutlineGenerator_Configuration()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _OutlineGenerator_Configuration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = *(void *)(v11 + 8);
    *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
    uint64_t v12 = (void *)(((unint64_t)v4 + v6 + 31) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = (void *)(((unint64_t)a2 + v6 + 31) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v14;
    uint64_t v15 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = (void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for _OutlineGenerator_Configuration(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for _OutlineGenerator_Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  unint64_t v11 = (void *)((v7 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = v12[1];
  *unint64_t v11 = *v12;
  v11[1] = v13;
  uint64_t v14 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _OutlineGenerator_Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  swift_retain();
  swift_release();
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  unint64_t v11 = (void *)((v7 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = v12[1];
  *unint64_t v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  uint64_t v14 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for _OutlineGenerator_Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v11 = *(unsigned char *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = v11;
  uint64_t v12 = (_OWORD *)((v7 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (_OWORD *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  *(_OWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for _OutlineGenerator_Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  swift_release();
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  swift_release();
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  char v11 = (_OWORD *)((v7 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (_OWORD *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  *char v11 = *v12;
  swift_release();
  *(_OWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _OutlineGenerator_Configuration(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18811CB74);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for _OutlineGenerator_Configuration(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v19 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if ((a2 & 0x80000000) != 0)
              {
                *(unsigned char *)(v19 + 16) = 0;
                *(void *)unint64_t v19 = a2 ^ 0x80000000;
                *(void *)(v19 + 8) = 0;
              }
              else
              {
                *(void *)(v19 + 8) = a2 - 1;
              }
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x18811CD80);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for OutlineGenerator()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for OutlineGenerator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 48);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  unsigned int v10 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || (((v9 + ((((v6 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v9) + *(void *)(v8 + 64) <= 0x18
      ? (BOOL v11 = v10 > 7)
      : (BOOL v11 = 1),
        v11))
  {
    uint64_t v25 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v25 + (((v10 | 7) + 16) & ~(unint64_t)(v10 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v13 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v13 = *(void *)v14;
    *(void *)(v13 + 8) = *(void *)(v14 + 8);
    *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
    int v15 = (void *)(((unint64_t)v4 + v6 + 31) & 0xFFFFFFFFFFFFFFF8);
    int v16 = (void *)(((unint64_t)a2 + v6 + 31) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = (void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v19 = (void *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = v19[1];
    void *v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = (char *)v19 + v9;
    uint64_t v22 = ((unint64_t)v18 + v9 + 16) & ~v9;
    uint64_t v23 = (unint64_t)(v21 + 16) & v12;
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v24(v22, v23, v7);
  }
  return v4;
}

uint64_t destroy for OutlineGenerator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a2 + 48) - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t))(v6 + 8);
  unint64_t v8 = (((((v5 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v8);
}

uint64_t initializeWithCopy for OutlineGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = v7 + a1;
  uint64_t v9 = v7 + a2;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v10 = *(void *)v11;
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  uint64_t v12 = (void *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (void *)((v9 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  int v15 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v16 = (void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = v16[1];
  void *v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = *(void *)(a3 + 48);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  uint64_t v21 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v22 = ((unint64_t)v15 + v21 + 16) & ~v21;
  uint64_t v23 = ((unint64_t)v16 + v21 + 16) & ~v21;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v20(v22, v23, v18);
  return a1;
}

uint64_t assignWithCopy for OutlineGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = v7 + a1;
  uint64_t v9 = v7 + a2;
  unint64_t v10 = (v7 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v7 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v10 = *(void *)v11;
  swift_retain();
  swift_release();
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  uint64_t v12 = (void *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (void *)((v9 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  int v15 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v16 = (void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = v16[1];
  void *v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_release();
  uint64_t v18 = *(void *)(*(void *)(a3 + 48) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 24))(((unint64_t)v15 + *(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), ((unint64_t)v16 + *(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t initializeWithTake for OutlineGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = v7 + a1;
  uint64_t v9 = v7 + a2;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v12 = *(unsigned char *)(v11 + 16);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  *(unsigned char *)(v10 + 16) = v12;
  unint64_t v13 = (_OWORD *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (_OWORD *)((v9 + 31) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v13 = *v14;
  int v15 = (_OWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v16 = (_OWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v15 = *v16;
  uint64_t v17 = *(void *)(*(void *)(a3 + 48) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 32))(((unint64_t)v15 + *(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), ((unint64_t)v16 + *(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t assignWithTake for OutlineGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = v7 + a1;
  uint64_t v9 = v7 + a2;
  unint64_t v10 = (v7 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v10 = *(void *)v11;
  swift_release();
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  swift_release();
  *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  char v12 = (_OWORD *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (_OWORD *)((v9 + 31) & 0xFFFFFFFFFFFFFFF8);
  *char v12 = *v13;
  swift_release();
  uint64_t v14 = (_OWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v15 = (_OWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  swift_release();
  uint64_t v16 = *(void *)(*(void *)(a3 + 48) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 40))(((unint64_t)v14 + *(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), ((unint64_t)v15 + *(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for OutlineGenerator(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v4 = *(_DWORD *)(v3 + 84);
  uint64_t v5 = *(void *)(*(void *)(a3 + 48) - 8);
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  if (v4 <= *(_DWORD *)(v5 + 84)) {
    unsigned int v8 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v3 + 84);
  }
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v8;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v10 = v7 + 16;
  if (a2 <= v9) {
    goto LABEL_28;
  }
  unint64_t v11 = ((v10 + ((((v6 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v7)
      + *(void *)(*(void *)(*(void *)(a3 + 48) - 8) + 64);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((a2 - v9 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v15 < 2)
    {
LABEL_28:
      if (v4 == v9) {
        return (*(uint64_t (**)(void))(v3 + 48))();
      }
      uint64_t v19 = (char *)a1 + v6;
      if ((v8 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v5 + 48))((v10
      }
                                                                      + ((((unint64_t)(v19 + 31) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v7);
      unint64_t v20 = *(void *)(((unint64_t)(v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v20 >= 0xFFFFFFFF) {
        LODWORD(v20) = -1;
      }
      return (v20 + 1);
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_28;
  }
LABEL_18:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 <= 3) {
      int v17 = ((v10 + ((((v6 + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)) & ~v7)
    }
          + *(_DWORD *)(*(void *)(*(void *)(a3 + 48) - 8) + 64);
    else {
      int v17 = 4;
    }
    switch(v17)
    {
      case 2:
        int v18 = *a1;
        break;
      case 3:
        int v18 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v18 = *(_DWORD *)a1;
        break;
      default:
        int v18 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v18 = 0;
  }
  return v9 + (v18 | v16) + 1;
}

void storeEnumTagSinglePayload for OutlineGenerator(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a4 + 48) - 8);
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v6 <= *(_DWORD *)(v7 + 84)) {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v5 + 84);
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v10;
  }
  size_t v12 = ((v9 + 16 + ((((v8 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v9)
      + *(void *)(*(void *)(*(void *)(a4 + 48) - 8) + 64);
  if (a3 > v11)
  {
    if (v12 <= 3)
    {
      unsigned int v16 = ((a3 - v11 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v11 < a2)
  {
    unsigned int v14 = ~v11 + a2;
    if (v12 < 4)
    {
      int v15 = (v14 >> (8 * v12)) + 1;
      if (v12)
      {
        int v17 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if (v12 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v12 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v12] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v15;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)&a1[v12] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x18811DBB4);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v6 == v11)
        {
          int v18 = *(void (**)(char *))(v5 + 56);
          v18(a1);
        }
        else
        {
          uint64_t v19 = &a1[v8];
          if ((v10 & 0x80000000) != 0)
          {
            uint64_t v21 = *(void (**)(unint64_t))(v7 + 56);
            v21((v9 + 16 + ((((unint64_t)(v19 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v9);
          }
          else
          {
            unint64_t v20 = (unint64_t)(v19 + 7) & 0xFFFFFFFFFFFFFFF8;
            if ((a2 & 0x80000000) != 0)
            {
              *(unsigned char *)(v20 + 16) = 0;
              *(void *)unint64_t v20 = a2 ^ 0x80000000;
              *(void *)(v20 + 8) = 0;
            }
            else
            {
              *(void *)(v20 + 8) = a2 - 1;
            }
          }
        }
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for View in _OutlineGenerator_Configuration<A, B, C>.Subtree()
{
  return &protocol witness table for _OutlineGenerator_Configuration<A, B, C>.Subtree;
}

uint64_t associated type witness table accessor for View.Body : View in OutlineGenerator<A, B, C, D, E>()
{
  return swift_getOpaqueTypeConformance2();
}

void protocol witness for View.body.getter in conformance _OutlineGenerator_Configuration<A, B, C>.Subtree()
{
}

uint64_t instantiation function for generic protocol witness table for _OutlineGenerator_Configuration<A, B, C>.Subtree(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t partial apply for closure #1 in OutlineGenerator.body.getter()
{
  return closure #1 in OutlineGenerator.body.getter(v0[11], v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v0[10]);
}

uint64_t sub_18811DCF4()
{
  return swift_getWitnessTable();
}

double Stepper.init(onIncrement:onDecrement:onEditingChanged:label:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>, uint64_t a8)
{
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v13 = *(void *)(a8 - 8);
  double v14 = MEMORY[0x1F4188790](a1);
  unsigned int v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17(v14);
  uint64_t v18 = type metadata accessor for Stepper();
  uint64_t v19 = &a7[*(int *)(v18 + 40)];
  *(void *)a7 = 0;
  *((void *)a7 + 1) = a1;
  *((void *)a7 + 2) = a2;
  *((void *)a7 + 3) = a3;
  uint64_t v20 = v22;
  *((void *)a7 + 4) = a4;
  *((void *)a7 + 5) = v20;
  *((void *)a7 + 6) = v23;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&a7[*(int *)(v18 + 36)], v16, a8);
  double result = 0.0;
  *(_OWORD *)uint64_t v19 = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  return result;
}

void Stepper.init<A>(label:currentValueLabel:onIncrement:onDecrement:onEditingChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

uint64_t Stepper.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  *(void *)&long long v52 = a1;
  uint64_t v59 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v50 = lazy protocol witness table accessor for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label();
  unsigned int v6 = *(void **)(a1 + 24);
  uint64_t v76 = &type metadata for StepperStyleConfiguration.Label;
  uint64_t v77 = (void *)v5;
  uint64_t v78 = (void *)v50;
  char v79 = v6;
  type metadata accessor for StaticSourceWriter();
  uint64_t v53 = type metadata accessor for ModifiedContent();
  uint64_t v58 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  uint64_t v51 = (char *)&v44 - v7;
  uint64_t v55 = type metadata accessor for ModifiedContent();
  uint64_t v57 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  uint64_t v54 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v56 = (char *)&v44 - v10;
  uint64_t v11 = *(void *)(v3 + 8);
  size_t v12 = *(void **)(v3 + 16);
  uint64_t v13 = *(void *)(v3 + 24);
  uint64_t v15 = *(void *)(v3 + 32);
  uint64_t v14 = *(void *)(v3 + 40);
  uint64_t v16 = *(void *)(v3 + 48);
  uint64_t v76 = *(ValueMetadata **)v3;
  uint64_t v77 = (void *)v11;
  uint64_t v78 = v12;
  char v79 = (void *)v13;
  uint64_t v80 = v15;
  uint64_t v81 = v14;
  uint64_t v82 = v16;
  v60[2] = v5;
  v60[3] = v6;
  v60[4] = v3;
  swift_retain();
  outlined copy of AppIntentExecutor?(v11);
  outlined copy of AppIntentExecutor?(v13);
  unint64_t v17 = lazy protocol witness table accessor for type StepperBody and conformance StepperBody();
  uint64_t v49 = v17;
  swift_retain();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for StepperStyleConfiguration.Label, (void (*)(double))partial apply for closure #1 in Stepper.body.getter, (uint64_t)v60, (uint64_t)&type metadata for StepperBody, (uint64_t)&type metadata for StepperStyleConfiguration.Label, v5, v17);
  uint64_t v18 = (uint64_t)v77;
  uint64_t v19 = (uint64_t)v79;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v18);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v19);
  swift_release();
  uint64_t v20 = *(void *)(v3 + 8);
  uint64_t v21 = *(void **)(v3 + 16);
  uint64_t v22 = *(void *)(v3 + 24);
  uint64_t v24 = *(void *)(v3 + 32);
  uint64_t v23 = *(void *)(v3 + 40);
  uint64_t v25 = *(void *)(v3 + 48);
  uint64_t v61 = *(ValueMetadata **)v3;
  uint64_t v62 = v20;
  uint64_t v63 = v21;
  uint64_t v64 = v22;
  uint64_t v65 = v24;
  uint64_t v66 = v23;
  uint64_t v67 = v25;
  uint64_t v26 = (void *)(v3 + *(int *)(v52 + 40));
  uint64_t v28 = (void *)v26[1];
  uint64_t v30 = (void *)v26[2];
  uint64_t v29 = (void *)v26[3];
  v75[0] = *v26;
  uint64_t v27 = (void *)v75[0];
  v75[1] = v28;
  v75[2] = v30;
  v75[3] = v29;
  swift_retain();
  outlined copy of AppIntentExecutor?(v20);
  outlined copy of AppIntentExecutor?(v22);
  swift_retain();
  outlined copy of AccessibilitySliderValue?(v27, v28, v30, v29);
  uint64_t v73 = v49;
  uint64_t v74 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v31 = v53;
  uint64_t WitnessTable = swift_getWitnessTable();
  AccessibilityStepperModifier.init(_:value:)((uint64_t *)&v61, (uint64_t)v75, v31, WitnessTable, (uint64_t)&v76);
  uint64_t v33 = v77;
  uint64_t v34 = v78;
  uint64_t v44 = v79;
  uint64_t v45 = v76;
  uint64_t v46 = v82;
  uint64_t v47 = v81;
  uint64_t v48 = v84;
  uint64_t v49 = v83;
  unint64_t v50 = v87;
  uint64_t v61 = v76;
  uint64_t v62 = (uint64_t)v77;
  uint64_t v63 = v78;
  uint64_t v64 = (uint64_t)v79;
  LOBYTE(v65) = v80;
  uint64_t v66 = v81;
  uint64_t v67 = v82;
  uint64_t v68 = v83;
  uint64_t v69 = v84;
  uint64_t v70 = v85;
  long long v52 = v86;
  long long v71 = v86;
  unint64_t v72 = v87;
  uint64_t v35 = type metadata accessor for AccessibilityStepperModifier();
  uint64_t v36 = swift_getWitnessTable();
  v60[5] = WitnessTable;
  v60[6] = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v37 = v55;
  swift_getWitnessTable();
  uint64_t v38 = v54;
  uint64_t v39 = WitnessTable;
  uint64_t v40 = v51;
  View.accessibilityConfiguration<A>(_:)((uint64_t)&v61, v31, v35, v39, v36);
  outlined consume of AccessibilitySliderValue?(v45, v33, v34, v44);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v47);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v49);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v40, v31);
  uint64_t v41 = v56;
  static ViewBuilder.buildExpression<A>(_:)(v38);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v57 + 8);
  v42(v38, v37);
  static ViewBuilder.buildExpression<A>(_:)(v41);
  return ((uint64_t (*)(char *, uint64_t))v42)(v41, v37);
}

uint64_t closure #1 in Stepper.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Stepper();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v7 + 36));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t partial apply for closure #1 in Stepper.body.getter()
{
  return closure #1 in Stepper.body.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

double Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v234 = a7;
  uint64_t v233 = a6;
  uint64_t v232 = a5;
  uint64_t v229 = a4;
  uint64_t v253 = a3;
  *(void *)&long long v254 = a1;
  v224 = a9;
  uint64_t v247 = a11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v15 - 8);
  v228 = (char *)&v202 - v16;
  uint64_t v248 = a8;
  uint64_t v230 = *(void *)(a8 - 8);
  MEMORY[0x1F4188790](v17);
  v245 = (char *)&v202 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v235 = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](v19);
  v220 = (char *)&v202 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  v237 = (char *)&v202 - v22;
  MEMORY[0x1F4188790](v23);
  v225 = (char *)&v202 - v24;
  MEMORY[0x1F4188790](v25);
  v239 = (char *)&v202 - v26;
  uint64_t v250 = AssociatedTypeWitness;
  uint64_t v246 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v27 = *(void *)(v246 + 64);
  MEMORY[0x1F4188790](v28);
  v218 = (char *)&v202 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  v222 = (uint64_t (*)())((char *)&v202 - v30);
  MEMORY[0x1F4188790](v31);
  v236 = (char *)&v202 - v32;
  MEMORY[0x1F4188790](v33);
  v242 = (uint64_t (*)())((char *)&v202 - v34);
  uint64_t v251 = type metadata accessor for Binding();
  uint64_t v243 = *(void *)(v251 - 8);
  uint64_t v221 = *(void *)(v243 + 64);
  MEMORY[0x1F4188790](v251);
  v241 = (char *)&v202 - v35;
  uint64_t v252 = a12;
  uint64_t v36 = *(void *)(a12 + 8);
  uint64_t v249 = a10;
  uint64_t v219 = v36;
  uint64_t v37 = type metadata accessor for ClosedRange();
  uint64_t v38 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v38);
  v227 = (char *)&v202 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v40);
  uint64_t v42 = (char *)&v202 - v41;
  uint64_t v43 = *(void *)(v37 - 8);
  uint64_t v44 = *(void *)(v43 + 64);
  MEMORY[0x1F4188790](v45);
  MEMORY[0x1F4188790](v46);
  uint64_t v48 = (char *)&v202 - v47;
  MEMORY[0x1F4188790](v49);
  uint64_t v51 = (char *)&v202 - v50;
  double v53 = MEMORY[0x1F4188790](v52);
  uint64_t v55 = (char *)&v202 - v54;
  uint64_t v240 = v56;
  uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 16);
  uint64_t v231 = a2;
  uint64_t v58 = a2;
  uint64_t v60 = v59;
  uint64_t v223 = v56 + 16;
  v226 = v57;
  ((void (*)(char *, uint64_t, uint64_t, double))v57)(v42, v58, v59, v53);
  uint64_t v238 = v43;
  int v61 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48))(v42, 1, v37);
  uint64_t v244 = v60;
  if (v61 != 1)
  {
    v210 = v51;
    v209 = (char *)&v202 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v211 = v44;
    uint64_t v208 = v27;
    v217 = v48;
    uint64_t v86 = v238;
    unint64_t v87 = *(void (**)(char *, char *, uint64_t))(v238 + 32);
    uint64_t v215 = v238 + 32;
    v214 = v87;
    v87(v55, v42, v37);
    MEMORY[0x18C113DA0](v251);
    uint64_t v88 = v249;
    dispatch thunk of Strideable.distance(to:)();
    v212 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t))(v219 + 8);
    char v89 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v90 = v55;
    v213 = v55;
    uint64_t v216 = v37;
    if (v89)
    {
      v222 = 0;
      uint64_t v91 = 0;
      uint64_t v92 = v246;
      uint64_t v93 = v239;
      uint64_t v94 = v220;
      uint64_t v95 = v90;
      uint64_t v96 = v250;
      goto LABEL_11;
    }
    uint64_t v97 = v250;
    swift_getAssociatedConformanceWitness();
    uint64_t v98 = v253;
    char v99 = dispatch thunk of static Comparable.> infix(_:_:)();
    (*(void (**)(char *, char *, uint64_t))(v235 + 16))(v225, v239, v88);
    uint64_t v100 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
    uint64_t v207 = v86 + 16;
    v206 = v100;
    v100(v210, v90, v37);
    uint64_t v101 = v37;
    uint64_t v102 = v246;
    uint64_t v104 = v246 + 16;
    uint64_t v103 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t))(v246 + 16);
    id v105 = v222;
    v103(v222, v98, v97);
    if (v99)
    {
      v203 = v103;
      uint64_t v204 = v104;
      uint64_t v106 = v210;
      swift_getAssociatedConformanceWitness();
      uint64_t v107 = v242;
      dispatch thunk of static SignedNumeric.- prefix(_:)();
      uint64_t v108 = v237;
      dispatch thunk of Strideable.advanced(by:)();
      Class v109 = *(void (**)(uint64_t (*)(), uint64_t))(v102 + 8);
      v109(v107, v97);
      uint64_t v110 = v225;
      int v205 = dispatch thunk of static Comparable.<= infix(_:_:)();
      uint64_t v111 = v106;
      uint64_t v112 = *(void (**)(char *, uint64_t))(v235 + 8);
      v112(v108, v88);
      v109(v105, v250);
      uint64_t v113 = v238;
      uint64_t v114 = v216;
      (*(void (**)(char *, uint64_t))(v238 + 8))(v111, v216);
      v112(v110, v88);
      uint64_t v115 = v254;
      uint64_t v116 = v251;
      uint64_t v117 = v243;
      uint64_t v118 = v241;
      uint64_t v119 = v217;
      uint64_t v120 = v211;
      uint64_t v121 = v206;
      if (v205)
      {
        (*(void (**)(char *, void, uint64_t))(v243 + 16))(v241, v254, v251);
        uint64_t v122 = v119;
        uint64_t v95 = v213;
        v121(v122, v213, v114);
        uint64_t v123 = v113;
        uint64_t v96 = v250;
        v203(v242, v253, v250);
        uint64_t v124 = v117;
        unint64_t v125 = (*(unsigned __int8 *)(v117 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80);
        unint64_t v126 = (v221 + v125 + *(unsigned __int8 *)(v123 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80);
        uint64_t v127 = v246;
        uint64_t v128 = v114;
        unint64_t v129 = (v120 + *(unsigned __int8 *)(v246 + 80) + v126) & ~(unint64_t)*(unsigned __int8 *)(v246 + 80);
        uint64_t v91 = (char *)swift_allocObject();
        *((void *)v91 + 2) = v248;
        *((void *)v91 + 3) = v88;
        uint64_t v130 = v251;
        uint64_t v131 = v252;
        *((void *)v91 + 4) = v247;
        *((void *)v91 + 5) = v131;
        uint64_t v132 = &v91[v125];
        uint64_t v92 = v127;
        (*(void (**)(char *, char *, uint64_t))(v124 + 32))(v132, v241, v130);
        v214(&v91[v126], v217, v128);
        (*(void (**)(char *, uint64_t (*)(), uint64_t))(v127 + 32))(&v91[v129], v242, v96);
        v222 = partial apply for closure #1 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:);
LABEL_10:
        uint64_t v93 = v239;
        uint64_t v94 = v220;
LABEL_11:
        char v138 = dispatch thunk of static Equatable.== infix(_:_:)();
        v225 = v91;
        if (v138)
        {
          (*(void (**)(char *, uint64_t))(v92 + 8))(v236, v96);
          (*(void (**)(char *, uint64_t))(v235 + 8))(v93, v88);
          (*(void (**)(char *, uint64_t))(v238 + 8))(v95, v216);
          v241 = 0;
          v242 = 0;
          uint64_t v84 = v224;
          uint64_t v83 = v251;
        }
        else
        {
          swift_getAssociatedConformanceWitness();
          uint64_t v139 = v253;
          char v140 = dispatch thunk of static Comparable.> infix(_:_:)();
          (*(void (**)(char *, char *, uint64_t))(v235 + 16))(v94, v93, v88);
          uint64_t v141 = v238;
          long long v142 = v209;
          long long v143 = v95;
          uint64_t v144 = v216;
          (*(void (**)(char *, char *, uint64_t))(v238 + 16))(v209, v143, v216);
          v145 = v218;
          uint64_t v146 = v139;
          uint64_t v147 = *(void (**)(char *, uint64_t, uint64_t))(v92 + 16);
          v147(v218, v146, v96);
          if (v140)
          {
            v212 = (void (*)(uint64_t (*)(), uint64_t, uint64_t))v147;
            uint64_t v148 = v237;
            dispatch thunk of Strideable.advanced(by:)();
            LODWORD(v219) = dispatch thunk of static Comparable.>= infix(_:_:)();
            uint64_t v149 = *(void (**)(char *, uint64_t))(v235 + 8);
            v149(v148, v88);
            uint64_t v150 = v144;
            uint64_t v151 = v88;
            char v152 = *(void (**)(char *, uint64_t))(v246 + 8);
            v152(v218, v96);
            char v153 = v142;
            uint64_t v154 = v144;
            (*(void (**)(char *, uint64_t))(v141 + 8))(v153, v144);
            v149(v220, v151);
            v152(v236, v96);
            uint64_t v155 = v251;
            v149(v239, v151);
            uint64_t v156 = v221;
            uint64_t v157 = v254;
            uint64_t v158 = v243;
            v159 = v241;
            v160 = v217;
            if (v219)
            {
              uint64_t v161 = v243;
              (*(void (**)(char *, void, uint64_t))(v243 + 16))(v241, v254, v155);
              v162 = v214;
              v214(v160, v213, v150);
              v212(v242, v253, v96);
              unint64_t v163 = (*(unsigned __int8 *)(v161 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80);
              unint64_t v164 = (v156 + v163 + *(unsigned __int8 *)(v238 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v238 + 80);
              uint64_t v165 = v246;
              uint64_t v166 = v155;
              unint64_t v167 = (v211 + *(unsigned __int8 *)(v246 + 80) + v164) & ~(unint64_t)*(unsigned __int8 *)(v246 + 80);
              v168 = v160;
              v169 = (char *)swift_allocObject();
              *((void *)v169 + 2) = v248;
              *((void *)v169 + 3) = v151;
              uint64_t v170 = v252;
              *((void *)v169 + 4) = v247;
              *((void *)v169 + 5) = v170;
              (*(void (**)(char *, char *, uint64_t))(v161 + 32))(&v169[v163], v241, v166);
              v171 = &v169[v164];
              uint64_t v83 = v166;
              v162(v171, v168, v216);
              v241 = v169;
              (*(void (**)(char *, uint64_t (*)(), uint64_t))(v165 + 32))(&v169[v167], v242, v250);
              v242 = partial apply for closure #3 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:);
              uint64_t v84 = v224;
              uint64_t v85 = v253;
              goto LABEL_19;
            }
          }
          else
          {
            v172 = *(void (**)(char *, uint64_t))(v92 + 8);
            v172(v145, v96);
            (*(void (**)(char *, uint64_t))(v141 + 8))(v142, v144);
            uint64_t v154 = v144;
            v173 = *(void (**)(char *, uint64_t))(v235 + 8);
            v173(v220, v88);
            v172(v236, v96);
            v173(v239, v88);
            uint64_t v156 = v221;
            uint64_t v155 = v251;
            uint64_t v157 = v254;
            uint64_t v158 = v243;
            v159 = v241;
            v160 = v217;
            uint64_t v151 = v88;
          }
          uint64_t v174 = v158;
          v175 = v159;
          (*(void (**)(char *, uint64_t, uint64_t))(v158 + 16))(v159, v157, v155);
          v176 = v214;
          v214(v160, v213, v154);
          uint64_t v177 = v151;
          unint64_t v178 = (*(unsigned __int8 *)(v174 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80);
          unint64_t v179 = (v156 + v178 + *(unsigned __int8 *)(v238 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v238 + 80);
          uint64_t v180 = v154;
          v181 = v160;
          v182 = (char *)swift_allocObject();
          *((void *)v182 + 2) = v248;
          *((void *)v182 + 3) = v177;
          uint64_t v183 = v252;
          *((void *)v182 + 4) = v247;
          *((void *)v182 + 5) = v183;
          v184 = &v182[v178];
          uint64_t v185 = v251;
          (*(void (**)(char *, char *, uint64_t))(v174 + 32))(v184, v175, v251);
          v241 = v182;
          v176(&v182[v179], v181, v180);
          v242 = partial apply for closure #4 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:);
          uint64_t v84 = v224;
          uint64_t v83 = v185;
        }
        uint64_t v85 = v253;
        goto LABEL_19;
      }
    }
    else
    {
      (*(void (**)(uint64_t (*)(), uint64_t))(v102 + 8))(v105, v97);
      uint64_t v133 = v238;
      uint64_t v114 = v101;
      (*(void (**)(char *, uint64_t))(v238 + 8))(v210, v101);
      (*(void (**)(char *, uint64_t))(v235 + 8))(v225, v88);
      uint64_t v115 = v254;
      uint64_t v116 = v251;
      uint64_t v117 = v243;
      uint64_t v118 = v241;
      uint64_t v119 = v217;
      uint64_t v113 = v133;
      uint64_t v121 = v206;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v118, v115, v116);
    uint64_t v134 = v119;
    uint64_t v95 = v213;
    v121(v134, v213, v114);
    unint64_t v135 = (*(unsigned __int8 *)(v117 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80);
    unint64_t v136 = (v221 + v135 + *(unsigned __int8 *)(v113 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80);
    uint64_t v91 = (char *)swift_allocObject();
    *((void *)v91 + 2) = v248;
    *((void *)v91 + 3) = v88;
    uint64_t v137 = v252;
    *((void *)v91 + 4) = v247;
    *((void *)v91 + 5) = v137;
    (*(void (**)(char *, char *, uint64_t))(v117 + 32))(&v91[v135], v241, v116);
    v214(&v91[v136], v217, v114);
    v222 = partial apply for closure #2 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:);
    uint64_t v92 = v246;
    uint64_t v96 = v250;
    goto LABEL_10;
  }
  (*(void (**)(char *, uint64_t))(v240 + 8))(v42, v60);
  uint64_t v62 = v243;
  uint64_t v63 = *(char **)(v243 + 16);
  v236 = (char *)(v243 + 16);
  v239 = v63;
  uint64_t v64 = v251;
  ((void (*)(char *, void, uint64_t))v63)(v241, v254, v251);
  uint64_t v65 = v246;
  uint64_t v238 = *(void *)(v246 + 16);
  ((void (*)(uint64_t (*)(), uint64_t, uint64_t))v238)(v242, v253, v250);
  uint64_t v66 = *(unsigned __int8 *)(v62 + 80);
  uint64_t v67 = *(unsigned __int8 *)(v65 + 80);
  uint64_t v68 = (v66 + 48) & ~v66;
  uint64_t v235 = v68;
  uint64_t v69 = (char *)((v221 + v67 + v68) & ~v67);
  v222 = (uint64_t (*)())&v69[v27];
  v220 = v69;
  uint64_t v221 = v66 | v67 | 7;
  uint64_t v70 = (char *)swift_allocObject();
  uint64_t v71 = v249;
  *((void *)v70 + 2) = v248;
  *((void *)v70 + 3) = v71;
  uint64_t v72 = v252;
  *((void *)v70 + 4) = v247;
  *((void *)v70 + 5) = v72;
  uint64_t v219 = *(void *)(v62 + 32);
  uint64_t v73 = v241;
  ((void (*)(char *, char *, uint64_t))v219)(&v70[v68], v241, v64);
  v225 = v70;
  uint64_t v74 = &v69[(void)v70];
  uint64_t v75 = v64;
  v218 = *(char **)(v65 + 32);
  uint64_t v76 = v242;
  uint64_t v77 = v250;
  ((void (*)(char *, uint64_t (*)(), uint64_t))v218)(v74, v242, v250);
  uint64_t v78 = v73;
  ((void (*)(char *, void, uint64_t))v239)(v73, v254, v64);
  uint64_t v79 = v253;
  uint64_t v80 = v77;
  ((void (*)(uint64_t (*)(), uint64_t, uint64_t))v238)(v76, v253, v77);
  uint64_t v81 = swift_allocObject();
  uint64_t v82 = v249;
  *(void *)(v81 + 16) = v248;
  *(void *)(v81 + 24) = v82;
  *(void *)(v81 + 32) = v247;
  *(void *)(v81 + 40) = v72;
  uint64_t v83 = v75;
  ((void (*)(uint64_t, char *, uint64_t))v219)(v81 + v235, v78, v75);
  v241 = (char *)v81;
  ((void (*)(char *, uint64_t (*)(), uint64_t))v218)(&v220[v81], v242, v80);
  v222 = partial apply for closure #5 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:);
  v242 = partial apply for closure #6 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:);
  uint64_t v84 = v224;
  uint64_t v85 = v79;
LABEL_19:
  uint64_t v186 = v230;
  uint64_t v187 = v229;
  uint64_t v188 = v248;
  (*(void (**)(char *, uint64_t, uint64_t))(v230 + 16))(v245, v229, v248);
  MEMORY[0x18C113DA0](v83);
  uint64_t v189 = v231;
  v226(v227, v231, v244);
  uint64_t v190 = v246;
  v191 = v228;
  uint64_t v192 = v85;
  uint64_t v193 = v250;
  (*(void (**)(char *, uint64_t, uint64_t))(v246 + 16))(v228, v192, v250);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v190 + 56))(v191, 0, 1, v193);
  AccessibilityBoundedNumber.init<A>(for:in:by:)();
  (*(void (**)(uint64_t, uint64_t))(v186 + 8))(v187, v188);
  (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v253, v193);
  (*(void (**)(uint64_t, uint64_t))(v240 + 8))(v189, v244);
  (*(void (**)(void, uint64_t))(v243 + 8))(v254, v251);
  long long v254 = v255;
  uint64_t v194 = v256;
  uint64_t v195 = v257;
  uint64_t v196 = type metadata accessor for Stepper();
  v197 = &v84[*(int *)(v196 + 40)];
  v198 = v222;
  *(void *)uint64_t v84 = v232;
  *((void *)v84 + 1) = v198;
  v199 = v242;
  *((void *)v84 + 2) = v225;
  *((void *)v84 + 3) = v199;
  uint64_t v200 = v233;
  *((void *)v84 + 4) = v241;
  *((void *)v84 + 5) = v200;
  *((void *)v84 + 6) = v234;
  (*(void (**)(char *, char *, uint64_t))(v186 + 32))(&v84[*(int *)(v196 + 36)], v245, v188);
  double result = *(double *)&v254;
  *(_OWORD *)v197 = v254;
  *((void *)v197 + 2) = v194;
  *((void *)v197 + 3) = v195;
  return result;
}

uint64_t closure #1 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v17[1] = a3;
  uint64_t v6 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v17 - v10;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v17 - v13;
  type metadata accessor for Binding();
  MEMORY[0x18C113DA0]();
  Comparable.clamped(to:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v8, a5);
  dispatch thunk of Strideable.advanced(by:)();
  v15(v11, a5);
  specialized Binding.wrappedValue.setter();
  return ((uint64_t (*)(char *, uint64_t))v15)(v14, a5);
}

uint64_t closure #2 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  return specialized Binding.wrappedValue.setter();
}

uint64_t closure #3 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a3;
  v22[1] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)v22 - v7;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v22 - v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v22 - v17;
  v22[0] = type metadata accessor for Binding();
  MEMORY[0x18C113DA0](v22[0], v19);
  Comparable.clamped(to:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v12, a5);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static SignedNumeric.- prefix(_:)();
  dispatch thunk of Strideable.advanced(by:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, AssociatedTypeWitness);
  v20(v15, a5);
  specialized Binding.wrappedValue.setter();
  return ((uint64_t (*)(char *, uint64_t))v20)(v18, a5);
}

uint64_t closure #5 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v13 - v9;
  type metadata accessor for Binding();
  MEMORY[0x18C113DA0]();
  dispatch thunk of Strideable.advanced(by:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, a4);
  specialized Binding.wrappedValue.setter();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, a4);
}

uint64_t closure #6 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[1] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17[0] = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)v17 - v6;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v17 - v13;
  type metadata accessor for Binding();
  MEMORY[0x18C113DA0]();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static SignedNumeric.- prefix(_:)();
  dispatch thunk of Strideable.advanced(by:)();
  (*(void (**)(char *, uint64_t))(v17[0] + 8))(v7, AssociatedTypeWitness);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v11, a4);
  specialized Binding.wrappedValue.setter();
  return ((uint64_t (*)(char *, uint64_t))v15)(v14, a4);
}

uint64_t Stepper.init<A>(value:step:onEditingChanged:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10)
{
  uint64_t v40 = a7;
  uint64_t v41 = a3;
  uint64_t v37 = a6;
  uint64_t v38 = a5;
  uint64_t v42 = a4;
  uint64_t v43 = a1;
  uint64_t v39 = a9;
  uint64_t v36 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v35 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = v13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v17 = (char *)&v32 - v16;
  uint64_t v33 = a8;
  uint64_t v18 = type metadata accessor for ClosedRange();
  uint64_t v19 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v32 - v20;
  uint64_t v22 = type metadata accessor for Binding();
  uint64_t v23 = *(void *)(v22 - 8);
  double v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v32 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))((char *)&v32 - v25, v43, v22, v24);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v21, 1, 1, v18);
  uint64_t v27 = AssociatedTypeWitness;
  uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, AssociatedTypeWitness);
  uint64_t v29 = (uint64_t)v35;
  v38(v28);
  double v30 = Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)((uint64_t)v26, (uint64_t)v21, (uint64_t)v17, v29, 0, v41, v42, v40, v39, v33, v36, v34);
  (*(void (**)(uint64_t, uint64_t, double))(v15 + 8))(a2, v27, v30);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v43, v22);
}

void Stepper.init<A, B>(value:step:label:currentValueLabel:onEditingChanged:)()
{
}

uint64_t Stepper.init<A>(value:in:step:onEditingChanged:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v48 = a8;
  uint64_t v49 = a4;
  uint64_t v45 = a7;
  uint64_t v46 = a6;
  uint64_t v50 = a5;
  uint64_t v42 = a3;
  uint64_t v37 = a2;
  uint64_t v40 = a1;
  uint64_t v47 = a9;
  uint64_t v44 = a11;
  MEMORY[0x1F4188790](a1);
  uint64_t v43 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = v36;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v18 = (char *)&v35 - v17;
  uint64_t v38 = a10;
  uint64_t v19 = type metadata accessor for ClosedRange();
  uint64_t v20 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)&v35 - v21;
  uint64_t v39 = type metadata accessor for Binding();
  uint64_t v23 = *(void *)(v39 - 8);
  double v24 = MEMORY[0x1F4188790](v39);
  uint64_t v26 = (char *)&v35 - v25;
  (*(void (**)(char *, uint64_t, double))(v23 + 16))((char *)&v35 - v25, a1, v24);
  uint64_t v27 = *(void *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v22, a2, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v22, 0, 1, v19);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v29 = v42;
  uint64_t v30 = AssociatedTypeWitness;
  uint64_t v31 = v28(v18, v42, AssociatedTypeWitness);
  uint64_t v32 = (uint64_t)v43;
  v46(v31);
  double v33 = Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)((uint64_t)v26, (uint64_t)v22, (uint64_t)v18, v32, 0, v49, v50, v48, v47, v38, v44, v41);
  (*(void (**)(uint64_t, uint64_t, double))(v36 + 8))(v29, v30, v33);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v37, v19);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v40, v39);
}

void Stepper.init<A, B>(value:in:step:label:currentValueLabel:onEditingChanged:)()
{
}

double Stepper<>.init(_:onIncrement:onDecrement:onEditingChanged:)@<D0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = Text.init(_:tableName:bundle:comment:)();
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = a1;
  *(void *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = a3;
  *(void *)(a5 + 32) = a4;
  *(void *)(a5 + 40) = a6;
  *(void *)(a5 + 48) = a7;
  *(void *)(a5 + 56) = v12;
  *(void *)(a5 + 64) = v13;
  *(unsigned char *)(a5 + 72) = v14 & 1;
  *(void *)(a5 + 80) = v15;
  double result = 0.0;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_OWORD *)(a5 + 104) = 0u;
  return result;
}

double Stepper<>.init<A>(_:onIncrement:onDecrement:onEditingChanged:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  closure #1 in Stepper<>.init<A>(_:onIncrement:onDecrement:onEditingChanged:)(a1, (uint64_t)v23);
  uint64_t v16 = v23[0];
  uint64_t v15 = v23[1];
  char v17 = v24;
  uint64_t v18 = v25;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a8 - 8) + 8))(a1, a8);
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = v16;
  *(void *)(a9 + 64) = v15;
  *(unsigned char *)(a9 + 72) = v17;
  *(void *)(a9 + 80) = v18;
  double result = 0.0;
  *(_OWORD *)(a9 + 88) = 0u;
  *(_OWORD *)(a9 + 104) = 0u;
  return result;
}

uint64_t closure #1 in Stepper<>.init<A>(_:onIncrement:onDecrement:onEditingChanged:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

__n128 Stepper<>.init<A>(_:value:step:onEditingChanged:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v40 = a8;
  uint64_t v39 = a7;
  uint64_t v32 = a5;
  uint64_t v38 = a4;
  int v37 = a3;
  uint64_t v36 = a2;
  uint64_t v35 = a1;
  uint64_t v34 = a11;
  uint64_t v33 = a10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v17 = (char *)&v31 - v16;
  uint64_t v18 = type metadata accessor for Binding();
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v31 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v31 - v21, a5, v18, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a6, AssociatedTypeWitness);
  uint64_t v42 = v35;
  uint64_t v43 = v36;
  char v44 = v37;
  uint64_t v45 = v38;
  Stepper.init<A>(value:step:onEditingChanged:label:)((uint64_t)v22, (uint64_t)v17, v39, v40, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v41, MEMORY[0x1E4F41420], v33, (char *)v46, MEMORY[0x1E4F41418]);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a6, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v32, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = v47;
  char v24 = v50;
  uint64_t v25 = v51;
  __n128 result = v48;
  long long v27 = v46[1];
  long long v28 = v49;
  long long v29 = v52;
  long long v30 = v53;
  *(_OWORD *)a9 = v46[0];
  *(_OWORD *)(a9 + 16) = v27;
  *(void *)(a9 + 32) = v23;
  *(__n128 *)(a9 + 40) = result;
  *(_OWORD *)(a9 + 56) = v28;
  *(unsigned char *)(a9 + 72) = v24;
  *(void *)(a9 + 80) = v25;
  *(_OWORD *)(a9 + 88) = v29;
  *(_OWORD *)(a9 + 104) = v30;
  return result;
}

__n128 Stepper<>.init<A, B>(_:value:step:onEditingChanged:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v36 = a8;
  uint64_t v39 = a6;
  uint64_t v38 = a5;
  uint64_t v37 = a4;
  uint64_t v33 = a2;
  uint64_t v35 = a1;
  uint64_t v34 = a10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v17 = (char *)&v32 - v16;
  uint64_t v18 = type metadata accessor for Binding();
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v32 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v32 - v21, a2, v18, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, AssociatedTypeWitness);
  uint64_t v41 = v39;
  uint64_t v42 = a7;
  uint64_t v43 = v36;
  uint64_t v44 = v34;
  uint64_t v23 = v35;
  uint64_t v45 = v35;
  Stepper.init<A>(value:step:onEditingChanged:label:)((uint64_t)v22, (uint64_t)v17, v37, v38, (void (*)(uint64_t))partial apply for closure #1 in Stepper<>.init<A, B>(_:value:step:onEditingChanged:), (uint64_t)v40, MEMORY[0x1E4F41420], a7, (char *)v46, MEMORY[0x1E4F41418]);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v33, v18);
  (*(void (**)(uint64_t))(*(void *)(v39 - 8) + 8))(v23);
  uint64_t v24 = v47;
  char v25 = v50;
  uint64_t v26 = v51;
  __n128 result = v48;
  long long v28 = v46[1];
  long long v29 = v49;
  long long v30 = v52;
  long long v31 = v53;
  *(_OWORD *)a9 = v46[0];
  *(_OWORD *)(a9 + 16) = v28;
  *(void *)(a9 + 32) = v24;
  *(__n128 *)(a9 + 40) = result;
  *(_OWORD *)(a9 + 56) = v29;
  *(unsigned char *)(a9 + 72) = v25;
  *(void *)(a9 + 80) = v26;
  *(_OWORD *)(a9 + 88) = v30;
  *(_OWORD *)(a9 + 104) = v31;
  return result;
}

__n128 Stepper<>.init<A>(_:value:in:step:onEditingChanged:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v52 = a8;
  uint64_t v46 = a7;
  uint64_t v40 = a6;
  uint64_t v43 = a5;
  uint64_t v50 = a4;
  int v49 = a3;
  uint64_t v48 = a2;
  uint64_t v47 = a1;
  uint64_t v51 = a10;
  uint64_t v44 = a12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = v38;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v17 = (char *)&v37 - v16;
  uint64_t v41 = a11;
  uint64_t v18 = type metadata accessor for ClosedRange();
  uint64_t v39 = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v37 - v20;
  uint64_t v42 = type metadata accessor for Binding();
  uint64_t v22 = *(void *)(v42 - 8);
  double v23 = MEMORY[0x1F4188790](v42);
  char v25 = (char *)&v37 - v24;
  (*(void (**)(char *, uint64_t, double))(v22 + 16))((char *)&v37 - v24, a5, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a6, v18);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v27 = v46;
  uint64_t v28 = AssociatedTypeWitness;
  v26(v17, v46, AssociatedTypeWitness);
  uint64_t v54 = v47;
  uint64_t v55 = v48;
  char v56 = v49;
  uint64_t v57 = v50;
  Stepper.init<A>(value:in:step:onEditingChanged:label:)((uint64_t)v25, (uint64_t)v21, (uint64_t)v17, v52, v51, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v53, MEMORY[0x1E4F41420], (char *)v58, v41, MEMORY[0x1E4F41418]);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v27, v28);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v40, v39);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v43, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v29 = v59;
  char v30 = v62;
  uint64_t v31 = v63;
  __n128 result = v60;
  long long v33 = v58[1];
  long long v34 = v61;
  long long v35 = v64;
  long long v36 = v65;
  *(_OWORD *)a9 = v58[0];
  *(_OWORD *)(a9 + 16) = v33;
  *(void *)(a9 + 32) = v29;
  *(__n128 *)(a9 + 40) = result;
  *(_OWORD *)(a9 + 56) = v34;
  *(unsigned char *)(a9 + 72) = v30;
  *(void *)(a9 + 80) = v31;
  *(_OWORD *)(a9 + 88) = v35;
  *(_OWORD *)(a9 + 104) = v36;
  return result;
}

__n128 Stepper<>.init<A, B>(_:value:in:step:onEditingChanged:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v51 = a7;
  uint64_t v49 = a6;
  uint64_t v48 = a5;
  uint64_t v46 = a4;
  uint64_t v42 = a2;
  uint64_t v50 = a1;
  uint64_t v47 = a10;
  uint64_t v44 = a11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v39 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = v39;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v43 = (char *)&v38 - v16;
  uint64_t v17 = type metadata accessor for ClosedRange();
  uint64_t v40 = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v38 - v19;
  uint64_t v41 = type metadata accessor for Binding();
  uint64_t v21 = *(void *)(v41 - 8);
  double v22 = MEMORY[0x1F4188790](v41);
  uint64_t v24 = (char *)&v38 - v23;
  (*(void (**)(char *, uint64_t, double))(v21 + 16))((char *)&v38 - v23, a2, v22);
  uint64_t v25 = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a3, v17);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v27 = (uint64_t)v43;
  uint64_t v28 = v46;
  uint64_t v29 = AssociatedTypeWitness;
  v26(v43, v46, AssociatedTypeWitness);
  uint64_t v53 = v51;
  uint64_t v54 = a8;
  uint64_t v55 = v47;
  uint64_t v56 = v44;
  uint64_t v57 = v50;
  Stepper.init<A>(value:in:step:onEditingChanged:label:)((uint64_t)v24, (uint64_t)v20, v27, v48, v49, (void (*)(uint64_t))partial apply for closure #1 in Stepper<>.init<A, B>(_:value:step:onEditingChanged:), (uint64_t)v52, MEMORY[0x1E4F41420], (char *)v58, a8, MEMORY[0x1E4F41418]);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v28, v29);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v25, v40);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v42, v41);
  (*(void (**)(uint64_t))(*(void *)(v51 - 8) + 8))(v50);
  uint64_t v30 = v59;
  char v31 = v62;
  uint64_t v32 = v63;
  __n128 result = v60;
  long long v34 = v58[1];
  long long v35 = v61;
  long long v36 = v64;
  long long v37 = v65;
  *(_OWORD *)a9 = v58[0];
  *(_OWORD *)(a9 + 16) = v34;
  *(void *)(a9 + 32) = v30;
  *(__n128 *)(a9 + 40) = result;
  *(_OWORD *)(a9 + 56) = v35;
  *(unsigned char *)(a9 + 72) = v31;
  *(void *)(a9 + 80) = v32;
  *(_OWORD *)(a9 + 88) = v36;
  *(_OWORD *)(a9 + 104) = v37;
  return result;
}

uint64_t closure #1 in Stepper<>.init<A, B>(_:value:step:onEditingChanged:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #1 in Stepper<>.init<A, B>(_:value:step:onEditingChanged:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Stepper<>.init<A, B>(_:value:step:onEditingChanged:)(*(void *)(v1 + 48), a1);
}

void Stepper.init<A>(value:step:format:label:onEditingChanged:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v59 = a6;
  uint64_t v60 = a7;
  uint64_t v50 = a5;
  uint64_t v66 = a4;
  uint64_t v67 = a3;
  uint64_t v57 = a2;
  uint64_t v65 = a1;
  uint64_t v58 = a9;
  uint64_t v62 = a11;
  uint64_t v48 = a12;
  uint64_t v49 = a13;
  MEMORY[0x1F4188790](a1);
  uint64_t v56 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(*(void *)(v15 + 16) + 24);
  uint64_t v18 = v17;
  uint64_t v63 = v17;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v55 = v16;
  uint64_t v20 = AssociatedTypeWitness;
  uint64_t v54 = swift_getAssociatedTypeWitness();
  uint64_t v53 = *(void *)(v54 - 8);
  MEMORY[0x1F4188790](v54);
  uint64_t v52 = (char *)v42 - v21;
  uint64_t v51 = v20;
  uint64_t v47 = type metadata accessor for ClosedRange();
  uint64_t v22 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v46 = (char *)v42 - v23;
  uint64_t v44 = *(void *)(v18 - 8);
  uint64_t v24 = v44;
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)v42 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for Binding();
  uint64_t v45 = *(void *)(v28 - 8);
  uint64_t v29 = v45;
  MEMORY[0x1F4188790](v28);
  char v31 = (char *)v42 - v30;
  uint64_t v61 = (uint64_t)v42 - v30;
  uint64_t v32 = type metadata accessor for TextField();
  v42[2] = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  long long v34 = (char *)v42 - v33;
  uint64_t v43 = type metadata accessor for ModifiedContent();
  uint64_t v64 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  v42[3] = (char *)v42 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v37 = MEMORY[0x1F4188790](v36);
  v42[0] = (char *)v42 - v38;
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, double))(v29 + 16);
  v42[1] = v28;
  v39(v31, v65, v28, v37);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v41 = v63;
  v40(v27, v67, v63);
  v42[4] = a8;
  uint64_t v69 = a8;
  uint64_t v70 = v41;
  uint64_t v71 = v62;
  uint64_t v72 = v48;
  uint64_t v73 = v49;
  uint64_t v74 = v66;
  uint64_t v75 = v50;
  TextField.init<A>(value:format:prompt:label:)(v61, (uint64_t)v27, 0, 0, 0, 0, (void (*)(uint64_t))partial apply for closure #1 in Stepper.init<A>(value:step:format:label:onEditingChanged:), (uint64_t)v68, (uint64_t)v34, a8, v41, v62, v48);
  swift_getWitnessTable();
  View.labelsHidden()();
}

uint64_t sub_188122140()
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 400) + 8))(v1, v2);
  v0(v5, v3, v6);
  uint64_t v8 = *(void *)(v7 - 352);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(v7 - 344) - 8) + 56))(v8, 1, 1);
  uint64_t v9 = *(void *)(v7 - 296);
  uint64_t v10 = *(void *)(v7 - 304);
  uint64_t v11 = *(void *)(v7 - 264);
  uint64_t v12 = *(void *)(v7 - 288);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v10, v11, v12);
  uint64_t v14 = *(void *)(v7 - 272);
  (*(void (**)(uint64_t))(v7 - 192))(v13);
  uint64_t v15 = *(void *)(v7 - 416);
  uint64_t v16 = *(void *)(v7 - 376);
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v7 - 208) + 16))(*(void *)(v7 - 392), v15, v16);
  unint64_t v17 = lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier();
  *(void *)(v7 - 104) = v4;
  *(void *)(v7 - 96) = v17;
  swift_getWitnessTable();
  uint64_t v18 = AnyView.init<A>(_:)();
  double v19 = Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(*(void *)(v7 - 232), v8, v10, v14, v18, *(void *)(v7 - 248), *(void *)(v7 - 240), *(void *)(v7 - 384), *(char **)(v7 - 256), *(void *)(v7 - 312), *(void *)(v7 - 224), *(void *)(v7 - 280));
  (*(void (**)(void, void, double))(*(void *)(v7 - 368) + 8))(*(void *)(v7 - 184), *(void *)(v7 - 216), v19);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v12);
  (*(void (**)(void, void))(*(void *)(v7 - 360) + 8))(*(void *)(v7 - 200), *(void *)(v7 - 408));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 208) + 8))(v15, v16);
}

void Stepper.init<A>(value:in:step:format:label:onEditingChanged:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v53 = a8;
  uint64_t v52 = a7;
  uint64_t v44 = a6;
  uint64_t v61 = a5;
  uint64_t v64 = a4;
  uint64_t v50 = a3;
  uint64_t v62 = a2;
  uint64_t v59 = a1;
  uint64_t v51 = a9;
  uint64_t v54 = a12;
  uint64_t v42 = a13;
  uint64_t v55 = a10;
  uint64_t v43 = a14;
  MEMORY[0x1F4188790](a1);
  uint64_t v49 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(*(void *)(v15 + 16) + 24);
  uint64_t v18 = v17;
  uint64_t v56 = v17;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v48 = v16;
  uint64_t v20 = AssociatedTypeWitness;
  uint64_t v47 = swift_getAssociatedTypeWitness();
  uint64_t v63 = *(void *)(v47 - 8);
  MEMORY[0x1F4188790](v47);
  uint64_t v46 = (char *)v39 - v21;
  uint64_t v45 = v20;
  uint64_t v58 = type metadata accessor for ClosedRange();
  uint64_t v22 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v57 = (char *)v39 - v23;
  uint64_t v60 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)v39 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for Binding();
  uint64_t v41 = *(void *)(v27 - 8);
  uint64_t v28 = v41;
  MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)v39 - v29;
  uint64_t v31 = type metadata accessor for TextField();
  v39[1] = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  uint64_t v33 = (char *)v39 - v32;
  uint64_t v40 = type metadata accessor for ModifiedContent();
  v39[4] = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  uint64_t v39[3] = (char *)v39 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v36 = MEMORY[0x1F4188790](v35);
  double v37 = *(void (**)(char *, uint64_t, uint64_t, double))(v28 + 16);
  v39[2] = v27;
  v37(v30, v59, v27, v36);
  uint64_t v38 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v26, v64, v56);
  uint64_t v66 = v55;
  uint64_t v67 = v38;
  uint64_t v68 = v54;
  uint64_t v69 = v42;
  uint64_t v70 = v43;
  uint64_t v71 = v61;
  uint64_t v72 = v44;
  v39[0] = v30;
  TextField.init<A>(value:format:prompt:label:)((uint64_t)v30, (uint64_t)v26, 0, 0, 0, 0, (void (*)(uint64_t))partial apply for closure #1 in Stepper.init<A>(value:step:format:label:onEditingChanged:), (uint64_t)v65, (uint64_t)v33, v55, v38, v54, v42);
  swift_getWitnessTable();
  View.labelsHidden()();
}

uint64_t sub_1881228A4()
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 408) + 8))(v0, v6);
  v7(v1, v3, v5);
  uint64_t v9 = *(void *)(v8 - 240);
  uint64_t v10 = *(void *)(v8 - 232);
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(uint64_t, void, uint64_t))(v11 + 16))(v9, *(void *)(v8 - 200), v10);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  uint64_t v12 = *(void *)(v8 - 328);
  uint64_t v13 = *(void *)(v8 - 296);
  uint64_t v14 = *(void *)(v8 - 320);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 192) + 16))(v12, v13, v14);
  uint64_t v16 = *(void *)(v8 - 304);
  (*(void (**)(uint64_t))(v8 - 208))(v15);
  uint64_t v17 = *(void *)(v8 - 384);
  uint64_t v18 = *(void *)(v8 - 376);
  (*(void (**)(void, uint64_t, uint64_t))(v17 + 16))(*(void *)(v8 - 392), v2, v18);
  unint64_t v19 = lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier();
  *(void *)(v8 - 104) = v4;
  *(void *)(v8 - 96) = v19;
  swift_getWitnessTable();
  uint64_t v20 = AnyView.init<A>(_:)();
  double v21 = Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(*(void *)(v8 - 416), *(void *)(v8 - 240), v12, v16, v20, *(void *)(v8 - 280), *(void *)(v8 - 272), *(void *)(v8 - 256), *(char **)(v8 - 288), *(void *)(v8 - 336), *(void *)(v8 - 264), *(void *)(v8 - 312));
  (*(void (**)(void, void, double))(*(void *)(v8 - 216) + 8))(*(void *)(v8 - 184), *(void *)(v8 - 248), v21);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 192) + 8))(v13, v14);
  (*(void (**)(void, void))(v11 + 8))(*(void *)(v8 - 200), *(void *)(v8 - 232));
  (*(void (**)(void, void))(*(void *)(v8 - 368) + 8))(*(void *)(v8 - 224), *(void *)(v8 - 400));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v2, v18);
}

uint64_t closure #1 in Stepper.init<A>(value:step:format:label:onEditingChanged:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v14 - v9;
  v11(v8);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, a3);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(char *, uint64_t))v12)(v10, a3);
}

uint64_t partial apply for closure #1 in Stepper.init<A>(value:step:format:label:onEditingChanged:)()
{
  return closure #1 in Stepper.init<A>(value:step:format:label:onEditingChanged:)(v0[7], v0[8], v0[2]);
}

void Stepper<>.init<A>(_:value:step:format:onEditingChanged:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v38 = a8;
  uint64_t v34 = a7;
  uint64_t v41 = a6;
  uint64_t v31 = a5;
  uint64_t v40 = a4;
  int v36 = a3;
  uint64_t v39 = a2;
  uint64_t v35 = a1;
  uint64_t v37 = a9;
  uint64_t v27 = *(void *)(a10 - 8);
  uint64_t v13 = v27;
  uint64_t v32 = a11;
  uint64_t v33 = a12;
  MEMORY[0x1F4188790](a1);
  uint64_t v29 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = AssociatedTypeWitness;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v18 = (char *)&v26 - v17;
  uint64_t v30 = type metadata accessor for Binding();
  uint64_t v19 = *(void *)(v30 - 8);
  double v20 = MEMORY[0x1F4188790](v30);
  uint64_t v22 = (char *)&v26 - v21;
  (*(void (**)(char *, uint64_t, double))(v19 + 16))((char *)&v26 - v21, a5, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v41, AssociatedTypeWitness);
  uint64_t v23 = (uint64_t)v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v29, v34, a10);
  uint64_t v43 = v35;
  uint64_t v44 = v39;
  char v45 = v36;
  uint64_t v46 = v40;
  uint64_t v24 = swift_allocObject();
  uint64_t v25 = v37;
  *(void *)(v24 + 16) = v38;
  *(void *)(v24 + 24) = v25;
  swift_retain();
  Stepper.init<A>(value:step:format:label:onEditingChanged:)((uint64_t)v22, (uint64_t)v18, v23, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v42, (uint64_t)partial apply for closure #2 in Stepper<>.init<A, B>(_:value:step:format:onEditingChanged:), v24, MEMORY[0x1E4F41420], (uint64_t)v47, a10, MEMORY[0x1E4F41418], v32, v33);
}

__n128 sub_188123014()
{
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 392) + 8))(v1, v2);
  (*(void (**)(void, void))(v3 + 8))(*(void *)(v5 - 280), *(void *)(v5 - 384));
  (*(void (**)(void, void))(v4 + 8))(*(void *)(v5 - 360), *(void *)(v5 - 368));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v5 - 192);
  char v7 = *(unsigned char *)(v5 - 152);
  uint64_t v8 = *(void *)(v5 - 144);
  __n128 result = *(__n128 *)(v5 - 184);
  long long v10 = *(_OWORD *)(v5 - 208);
  long long v11 = *(_OWORD *)(v5 - 168);
  long long v12 = *(_OWORD *)(v5 - 136);
  long long v13 = *(_OWORD *)(v5 - 120);
  *(_OWORD *)uint64_t v0 = *(_OWORD *)(v5 - 224);
  *(_OWORD *)(v0 + 16) = v10;
  *(void *)(v0 + 32) = v6;
  *(__n128 *)(v0 + 40) = result;
  *(_OWORD *)(v0 + 56) = v11;
  *(unsigned char *)(v0 + 72) = v7;
  *(void *)(v0 + 80) = v8;
  *(_OWORD *)(v0 + 88) = v12;
  *(_OWORD *)(v0 + 104) = v13;
  return result;
}

uint64_t sub_1881230FC()
{
  swift_release();

  return swift_deallocObject();
}

void Stepper<>.init<A, B>(_:value:step:format:onEditingChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v41 = a7;
  uint64_t v40 = a6;
  uint64_t v39 = a5;
  uint64_t v38 = a4;
  uint64_t v43 = a3;
  uint64_t v34 = a2;
  uint64_t v42 = a1;
  uint64_t v37 = a9;
  uint64_t v35 = a10;
  uint64_t v30 = *(void *)(a8 - 8);
  uint64_t v13 = v30;
  uint64_t v36 = a11;
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = v15;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = AssociatedTypeWitness;
  uint64_t v32 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v17 = v32;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v19 = (char *)&v28 - v18;
  uint64_t v33 = type metadata accessor for Binding();
  uint64_t v20 = *(void *)(v33 - 8);
  double v21 = MEMORY[0x1F4188790](v33);
  uint64_t v23 = (char *)&v28 - v22;
  (*(void (**)(char *, uint64_t, double))(v20 + 16))((char *)&v28 - v22, a2, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v43, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v38, a8);
  uint64_t v45 = v41;
  uint64_t v46 = a8;
  uint64_t v24 = v35;
  uint64_t v47 = v37;
  uint64_t v48 = v35;
  uint64_t v25 = v36;
  uint64_t v49 = v36;
  uint64_t v50 = v42;
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = v40;
  *(void *)(v26 + 16) = v39;
  *(void *)(v26 + 24) = v27;
  swift_retain();
  Stepper.init<A>(value:step:format:label:onEditingChanged:)((uint64_t)v23, (uint64_t)v19, (uint64_t)v29, (uint64_t)partial apply for closure #1 in Stepper<>.init<A, B>(_:value:step:format:onEditingChanged:), (uint64_t)v44, (uint64_t)partial apply for closure #2 in Stepper<>.init<A, B>(_:value:step:format:onEditingChanged:), v26, MEMORY[0x1E4F41420], (uint64_t)v51, a8, MEMORY[0x1E4F41418], v24, v25);
}

__n128 sub_1881234C4()
{
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 400) + 8))(v1, v2);
  (*(void (**)(void, void))(*(void *)(v4 - 384) + 8))(*(void *)(v4 - 296), *(void *)(v4 - 392));
  (*(void (**)(void, void))(v3 + 8))(*(void *)(v4 - 368), *(void *)(v4 - 376));
  (*(void (**)(void))(*(void *)(*(void *)(v4 - 312) - 8) + 8))(*(void *)(v4 - 304));
  uint64_t v5 = *(void *)(v4 - 192);
  char v6 = *(unsigned char *)(v4 - 152);
  uint64_t v7 = *(void *)(v4 - 144);
  __n128 result = *(__n128 *)(v4 - 184);
  long long v9 = *(_OWORD *)(v4 - 208);
  long long v10 = *(_OWORD *)(v4 - 168);
  long long v11 = *(_OWORD *)(v4 - 136);
  long long v12 = *(_OWORD *)(v4 - 120);
  *(_OWORD *)uint64_t v0 = *(_OWORD *)(v4 - 224);
  *(_OWORD *)(v0 + 16) = v9;
  *(void *)(v0 + 32) = v5;
  *(__n128 *)(v0 + 40) = result;
  *(_OWORD *)(v0 + 56) = v10;
  *(unsigned char *)(v0 + 72) = v6;
  *(void *)(v0 + 80) = v7;
  *(_OWORD *)(v0 + 88) = v11;
  *(_OWORD *)(v0 + 104) = v12;
  return result;
}

void Stepper<>.init<A>(_:value:in:step:format:onEditingChanged:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v38 = a8;
  uint64_t v45 = a7;
  uint64_t v47 = a6;
  uint64_t v43 = a5;
  uint64_t v46 = a4;
  int v40 = a3;
  uint64_t v48 = a2;
  uint64_t v39 = a1;
  uint64_t v42 = a10;
  uint64_t v41 = a9;
  uint64_t v37 = a12;
  uint64_t v34 = a11;
  uint64_t v44 = *(void *)(a11 - 8);
  uint64_t v36 = a13;
  MEMORY[0x1F4188790](a1);
  uint64_t v35 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30[1] = AssociatedTypeWitness;
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = v31;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v17 = (char *)v30 - v16;
  v30[0] = (uint64_t)v30 - v16;
  uint64_t v18 = type metadata accessor for ClosedRange();
  uint64_t v32 = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  double v21 = (char *)v30 - v20;
  uint64_t v33 = type metadata accessor for Binding();
  uint64_t v22 = *(void *)(v33 - 8);
  double v23 = MEMORY[0x1F4188790](v33);
  uint64_t v25 = (char *)v30 - v24;
  (*(void (**)(char *, uint64_t, double))(v22 + 16))((char *)v30 - v24, v43, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v47, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v45, AssociatedTypeWitness);
  uint64_t v26 = (uint64_t)v35;
  uint64_t v27 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v35, v38, v34);
  uint64_t v50 = v39;
  uint64_t v51 = v48;
  char v52 = v40;
  uint64_t v53 = v46;
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = v42;
  *(void *)(v28 + 16) = v41;
  *(void *)(v28 + 24) = v29;
  swift_retain();
  Stepper.init<A>(value:in:step:format:label:onEditingChanged:)((uint64_t)v25, (uint64_t)v21, v30[0], v26, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v49, (uint64_t)partial apply for closure #2 in Stepper<>.init<A>(_:value:in:step:format:onEditingChanged:), v28, (uint64_t)v54, MEMORY[0x1E4F41420], v27, MEMORY[0x1E4F41418], v37, v36);
}

__n128 sub_188123A44()
{
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 312) + 8))(v3, v2);
  (*(void (**)(void, void))(*(void *)(v5 - 416) + 8))(*(void *)(v5 - 304), *(void *)(v5 - 424));
  (*(void (**)(void, void))(v4 + 8))(*(void *)(v5 - 288), *(void *)(v5 - 408));
  (*(void (**)(void, void))(v1 + 8))(*(void *)(v5 - 320), *(void *)(v5 - 400));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v5 - 192);
  char v7 = *(unsigned char *)(v5 - 152);
  uint64_t v8 = *(void *)(v5 - 144);
  __n128 result = *(__n128 *)(v5 - 184);
  long long v10 = *(_OWORD *)(v5 - 208);
  long long v11 = *(_OWORD *)(v5 - 168);
  long long v12 = *(_OWORD *)(v5 - 136);
  long long v13 = *(_OWORD *)(v5 - 120);
  *(_OWORD *)uint64_t v0 = *(_OWORD *)(v5 - 224);
  *(_OWORD *)(v0 + 16) = v10;
  *(void *)(v0 + 32) = v6;
  *(__n128 *)(v0 + 40) = result;
  *(_OWORD *)(v0 + 56) = v11;
  *(unsigned char *)(v0 + 72) = v7;
  *(void *)(v0 + 80) = v8;
  *(_OWORD *)(v0 + 88) = v12;
  *(_OWORD *)(v0 + 104) = v13;
  return result;
}

uint64_t partial apply for closure #2 in Stepper<>.init<A>(_:value:in:step:format:onEditingChanged:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void Stepper<>.init<A, B>(_:value:in:step:format:onEditingChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v46 = a8;
  uint64_t v41 = a7;
  uint64_t v40 = a6;
  uint64_t v39 = a5;
  uint64_t v45 = a4;
  uint64_t v47 = a3;
  uint64_t v43 = a2;
  uint64_t v48 = a1;
  uint64_t v38 = a10;
  uint64_t v44 = *(void *)(a9 - 8);
  uint64_t v36 = a11;
  uint64_t v37 = a12;
  MEMORY[0x1F4188790](a1);
  uint64_t v35 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = v31;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v29 = (uint64_t)&v29 - v14;
  uint64_t v16 = type metadata accessor for ClosedRange();
  uint64_t v32 = v16;
  uint64_t v33 = *(void *)(v16 - 8);
  uint64_t v17 = v33;
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v29 - v18;
  uint64_t v30 = (uint64_t)&v29 - v18;
  uint64_t v34 = type metadata accessor for Binding();
  uint64_t v20 = *(void *)(v34 - 8);
  double v21 = MEMORY[0x1F4188790](v34);
  double v23 = (char *)&v29 - v22;
  (*(void (**)(char *, uint64_t, double))(v20 + 16))((char *)&v29 - v22, v43, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v47, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v45, AssociatedTypeWitness);
  uint64_t v24 = (uint64_t)v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v35, v39, a9);
  uint64_t v50 = v46;
  uint64_t v51 = a9;
  uint64_t v25 = v36;
  uint64_t v52 = v38;
  uint64_t v53 = v36;
  uint64_t v26 = v37;
  uint64_t v54 = v37;
  uint64_t v55 = v48;
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = v41;
  *(void *)(v27 + 16) = v40;
  *(void *)(v27 + 24) = v28;
  swift_retain();
  Stepper.init<A>(value:in:step:format:label:onEditingChanged:)((uint64_t)v23, v30, v29, v24, (uint64_t)partial apply for closure #1 in Stepper<>.init<A, B>(_:value:step:format:onEditingChanged:), (uint64_t)v49, (uint64_t)partial apply for closure #2 in Stepper<>.init<A, B>(_:value:step:format:onEditingChanged:), v27, (uint64_t)v56, MEMORY[0x1E4F41420], a9, MEMORY[0x1E4F41418], v25, v26);
}

__n128 sub_188123FE0()
{
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 328) + 8))(v1, v3);
  (*(void (**)(void, void))(*(void *)(v4 - 432) + 8))(*(void *)(v4 - 320), *(void *)(v4 - 344));
  (*(void (**)(void, void))(*(void *)(v4 - 416) + 8))(*(void *)(v4 - 304), *(void *)(v4 - 424));
  (*(void (**)(void, void))(v2 + 8))(*(void *)(v4 - 336), *(void *)(v4 - 408));
  (*(void (**)(void))(*(void *)(*(void *)(v4 - 312) - 8) + 8))(*(void *)(v4 - 296));
  uint64_t v5 = *(void *)(v4 - 192);
  char v6 = *(unsigned char *)(v4 - 152);
  uint64_t v7 = *(void *)(v4 - 144);
  __n128 result = *(__n128 *)(v4 - 184);
  long long v9 = *(_OWORD *)(v4 - 208);
  long long v10 = *(_OWORD *)(v4 - 168);
  long long v11 = *(_OWORD *)(v4 - 136);
  long long v12 = *(_OWORD *)(v4 - 120);
  *(_OWORD *)uint64_t v0 = *(_OWORD *)(v4 - 224);
  *(_OWORD *)(v0 + 16) = v9;
  *(void *)(v0 + 32) = v5;
  *(__n128 *)(v0 + 40) = result;
  *(_OWORD *)(v0 + 56) = v10;
  *(unsigned char *)(v0 + 72) = v6;
  *(void *)(v0 + 80) = v7;
  *(_OWORD *)(v0 + 88) = v11;
  *(_OWORD *)(v0 + 104) = v12;
  return result;
}

uint64_t partial apply for closure #1 in Stepper<>.init<A, B>(_:value:step:format:onEditingChanged:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Stepper<>.init<A, B>(_:value:step:onEditingChanged:)(*(void *)(v1 + 56), a1);
}

uint64_t associated type witness table accessor for View.Body : View in Stepper<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for Stepper()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for Stepper(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + ((v6 + 56) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    a1 = (void *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v14 = a2 + 1;
    uint64_t v13 = a2[1];
    swift_retain();
    if (v13)
    {
      uint64_t v15 = a2[2];
      a1[1] = v13;
      a1[2] = v15;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 1) = *v14;
    }
    uint64_t v16 = ~v6;
    uint64_t v17 = a2[3];
    if (v17)
    {
      uint64_t v18 = a2[4];
      a1[3] = v17;
      a1[4] = v18;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    }
    uint64_t v19 = a2[6];
    a1[5] = a2[5];
    a1[6] = v19;
    uint64_t v20 = (char *)a2 + v6;
    uint64_t v21 = ((unint64_t)a1 + v6 + 56) & v16;
    uint64_t v22 = (unint64_t)(v20 + 56) & v16;
    double v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v23(v21, v22, v4);
    unint64_t v24 = (v7 + v21) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = (v7 + v22) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v26 = *(void **)v25;
    if (*(void *)v25 < 0xFFFFFFFFuLL)
    {
      long long v34 = *(_OWORD *)(v25 + 16);
      *(_OWORD *)unint64_t v24 = *(_OWORD *)v25;
      *(_OWORD *)(v24 + 16) = v34;
    }
    else
    {
      *(void *)unint64_t v24 = v26;
      uint64_t v27 = *(void **)(v25 + 8);
      *(void *)(v24 + 8) = v27;
      uint64_t v28 = *(void **)(v25 + 16);
      *(void *)(v24 + 16) = v28;
      uint64_t v29 = *(void **)(v25 + 24);
      *(void *)(v24 + 24) = v29;
      id v30 = v26;
      id v31 = v27;
      id v32 = v28;
      id v33 = v29;
    }
  }
  return a1;
}

void destroy for Stepper(uint64_t a1, uint64_t a2)
{
  swift_release();
  if (*(void *)(a1 + 8)) {
    swift_release();
  }
  if (*(void *)(a1 + 24)) {
    swift_release();
  }
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  unint64_t v7 = (*(void *)(v5 + 56) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v7 >= 0xFFFFFFFFuLL)
  {

    int v8 = *(void **)(v7 + 24);
  }
}

void *initializeWithCopy for Stepper(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v7 = a2 + 1;
  uint64_t v6 = a2[1];
  swift_retain();
  if (v6)
  {
    uint64_t v8 = a2[2];
    a1[1] = v6;
    a1[2] = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *v7;
  }
  uint64_t v9 = a2[3];
  if (v9)
  {
    uint64_t v10 = a2[4];
    a1[3] = v9;
    a1[4] = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  }
  uint64_t v11 = a2[6];
  a1[5] = a2[5];
  a1[6] = v11;
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  uint64_t v15 = v13 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = ((unint64_t)a1 + v16 + 56) & ~v16;
  uint64_t v18 = ((unint64_t)a2 + v16 + 56) & ~v16;
  swift_retain();
  v14(v17, v18, v12);
  uint64_t v19 = *(void *)(v15 + 48) + 7;
  unint64_t v20 = (v19 + v17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = (v19 + v18) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void **)v21;
  if (*(void *)v21 < 0xFFFFFFFFuLL)
  {
    long long v30 = *(_OWORD *)(v21 + 16);
    *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
    *(_OWORD *)(v20 + 16) = v30;
  }
  else
  {
    *(void *)unint64_t v20 = v22;
    double v23 = *(void **)(v21 + 8);
    *(void *)(v20 + 8) = v23;
    unint64_t v24 = *(void **)(v21 + 16);
    *(void *)(v20 + 16) = v24;
    unint64_t v25 = *(void **)(v21 + 24);
    *(void *)(v20 + 24) = v25;
    id v26 = v22;
    id v27 = v23;
    id v28 = v24;
    id v29 = v25;
  }
  return a1;
}

void *assignWithCopy for Stepper(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[1];
  if (a1[1])
  {
    if (v6)
    {
      uint64_t v7 = a2[2];
      a1[1] = v6;
      a1[2] = v7;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v6)
  {
    uint64_t v8 = a2[2];
    a1[1] = v6;
    a1[2] = v8;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
LABEL_8:
  uint64_t v9 = a2[3];
  if (a1[3])
  {
    if (v9)
    {
      uint64_t v10 = a2[4];
      a1[3] = v9;
      a1[4] = v10;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v9)
  {
    uint64_t v11 = a2[4];
    a1[3] = v9;
    a1[4] = v11;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
LABEL_15:
  uint64_t v12 = a2[6];
  a1[5] = a2[5];
  a1[6] = v12;
  swift_retain();
  swift_release();
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = v13 + 24;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = ((unint64_t)a1 + v15 + 56) & ~v15;
  uint64_t v17 = ((unint64_t)a2 + v15 + 56) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v16, v17);
  uint64_t v18 = *(void *)(v14 + 40) + 7;
  unint64_t v19 = (v18 + v16) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v18 + v17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = *(void **)v19;
  uint64_t v22 = *(void **)v20;
  if (*(void *)v19 < 0xFFFFFFFFuLL)
  {
    if ((unint64_t)v22 >= 0xFFFFFFFF)
    {
      *(void *)unint64_t v19 = v22;
      id v33 = *(void **)(v20 + 8);
      *(void *)(v19 + 8) = v33;
      long long v34 = *(void **)(v20 + 16);
      *(void *)(v19 + 16) = v34;
      uint64_t v35 = *(void **)(v20 + 24);
      *(void *)(v19 + 24) = v35;
      id v36 = v22;
      id v37 = v33;
      id v38 = v34;
      id v39 = v35;
      return a1;
    }
LABEL_21:
    long long v40 = *(_OWORD *)(v20 + 16);
    *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
    *(_OWORD *)(v19 + 16) = v40;
    return a1;
  }
  if ((unint64_t)v22 < 0xFFFFFFFF)
  {

    goto LABEL_21;
  }
  *(void *)unint64_t v19 = v22;
  id v23 = v22;

  unint64_t v24 = *(void **)(v19 + 8);
  unint64_t v25 = *(void **)(v20 + 8);
  *(void *)(v19 + 8) = v25;
  id v26 = v25;

  id v27 = *(void **)(v19 + 16);
  id v28 = *(void **)(v20 + 16);
  *(void *)(v19 + 16) = v28;
  id v29 = v28;

  long long v30 = *(void **)(v19 + 24);
  id v31 = *(void **)(v20 + 24);
  *(void *)(v19 + 24) = v31;
  id v32 = v31;

  return a1;
}

uint64_t initializeWithTake for Stepper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 56 + a1) & ~v7;
  uint64_t v9 = (v7 + 56 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 32) + 7;
  uint64_t v11 = (_OWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (_OWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  long long v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  return a1;
}

uint64_t assignWithTake for Stepper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v6 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v6;
      *(void *)(a1 + 16) = v7;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v6)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v8;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
LABEL_8:
  uint64_t v9 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = v10;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v11;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_15:
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v13 = v12 + 40;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 56 + a1) & ~v14;
  uint64_t v16 = (v14 + 56 + a2) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(v15, v16);
  uint64_t v17 = *(void *)(v13 + 24) + 7;
  unint64_t v18 = (v17 + v15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v17 + v16) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = *(void **)v18;
  if (*(void *)v18 < 0xFFFFFFFFuLL)
  {
LABEL_19:
    long long v24 = *(_OWORD *)(v19 + 16);
    *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
    *(_OWORD *)(v18 + 16) = v24;
    return a1;
  }
  if (*(void *)v19 < 0xFFFFFFFFuLL)
  {

    goto LABEL_19;
  }
  *(void *)unint64_t v18 = *(void *)v19;

  unint64_t v21 = *(void **)(v18 + 8);
  *(void *)(v18 + 8) = *(void *)(v19 + 8);

  uint64_t v22 = *(void **)(v18 + 16);
  *(void *)(v18 + 16) = *(void *)(v19 + 16);

  id v23 = *(void **)(v18 + 24);
  *(void *)(v18 + 24) = *(void *)(v19 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for Stepper(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 56) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x188124C5CLL);
      case 4:
        int v14 = *(_DWORD *)(a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *(_DWORD *)a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 56) & ~v6);
  }
  unint64_t v17 = *(void *)(a1 + 40);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

double storeEnumTagSinglePayload for Stepper(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 56) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 32;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v19 = (unint64_t)&a1[v9 + 56] & ~v9;
              unint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
            else if ((a2 & 0x80000000) != 0)
            {
              double result = 0.0;
              *(_OWORD *)(a1 + 40) = 0u;
              *(_OWORD *)(a1 + 24) = 0u;
              *(_OWORD *)(a1 + 8) = 0u;
              *(void *)a1 = a2 ^ 0x80000000;
            }
            else
            {
              *((void *)a1 + 5) = a2 - 1;
            }
          }
          break;
      }
      return result;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 56) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 56) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 56) & ~v9) + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x188124E74);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for Stepper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_188124EB4()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #5 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  return partial apply for closure #5 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)((uint64_t (*)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))closure #5 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:));
}

uint64_t objectdestroy_12Tm_0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = (int *)(type metadata accessor for Binding() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = *(void *)(*(void *)v2 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v3 + v2[10], v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t partial apply for closure #6 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  return partial apply for closure #5 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)((uint64_t (*)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))closure #6 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:));
}

uint64_t partial apply for closure #5 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(uint64_t (*a1)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *((void *)v1 + 2);
  uint64_t v3 = *((void *)v1 + 3);
  uint64_t v4 = *((void *)v1 + 4);
  uint64_t v5 = *((void *)v1 + 5);
  uint64_t v6 = *(void *)(type metadata accessor for Binding() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  size_t v10 = &v1[(v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)];

  return a1(&v1[v7], v10, v2, v3, v4, v5);
}

uint64_t partial apply for closure #2 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  type metadata accessor for Binding();
  type metadata accessor for ClosedRange();

  return closure #2 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)();
}

uint64_t objectdestroy_18Tm_0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = (int *)(type metadata accessor for Binding() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  unint64_t v4 = v3 + *(void *)(*(void *)v2 + 64);
  uint64_t v5 = (int *)(type metadata accessor for ClosedRange() - 8);
  unint64_t v6 = (v4 + *(unsigned __int8 *)(*(void *)v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v5 + 80);
  swift_release();
  swift_release();
  unint64_t v7 = v0 + v3 + v2[10];
  uint64_t v8 = *(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
  v8(v7, v1);
  v8(v0 + v6, v1);
  v8(v0 + v6 + v5[11], v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  return specialized Binding.wrappedValue.setter();
}

uint64_t partial apply for closure #3 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  return partial apply for closure #3 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)((uint64_t (*)(char *, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:));
}

uint64_t objectdestroy_24Tm_0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = (int *)(type metadata accessor for Binding() - 8);
  unint64_t v12 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  unint64_t v3 = v12 + *(void *)(*(void *)v2 + 64);
  unint64_t v4 = (int *)(type metadata accessor for ClosedRange() - 8);
  unint64_t v11 = (v3 + *(unsigned __int8 *)(*(void *)v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v5 = *(void *)(*(void *)v4 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v8 = (v11 + v5 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  swift_release();
  swift_release();
  uint64_t v9 = *(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
  v9(v0 + v12 + v2[10], v1);
  v9(v0 + v11, v1);
  v9(v0 + v11 + v4[11], v1);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v8, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  return partial apply for closure #3 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)((uint64_t (*)(char *, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:));
}

uint64_t partial apply for closure #3 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(uint64_t (*a1)(char *, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *((void *)v1 + 2);
  uint64_t v3 = *((void *)v1 + 3);
  uint64_t v4 = *((void *)v1 + 4);
  uint64_t v5 = *((void *)v1 + 5);
  uint64_t v6 = *(void *)(type metadata accessor for Binding() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = v7 + *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(type metadata accessor for ClosedRange() - 8);
  unint64_t v10 = (v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 64);
  uint64_t v12 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v13 = &v1[(v10 + v11 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)];

  return a1(&v1[v7], &v1[v10], v13, v2, v3, v4, v5);
}

uint64_t static _SegmentedControl._makeView(view:inputs:)()
{
  return static _VariadicView.Tree<>._makeView(view:inputs:)();
}

uint64_t closure #1 in static _SegmentedControl._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  v9[2] = type metadata accessor for _SegmentedControl();
  type metadata accessor for _SegmentedControlContainer();
  uint64_t v10 = type metadata accessor for _VariadicView.Tree();
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, v10, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v11;
}

uint64_t partial apply for closure #1 in static _SegmentedControl._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static _SegmentedControl._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t type metadata accessor for _SegmentedControl()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for _SegmentedControlContainer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _SegmentedControl<A, B>()
{
  return static _SegmentedControl._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _SegmentedControl<A, B>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _SegmentedControl<A, B>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance _SegmentedControl<A, B>()
{
}

uint64_t _SegmentedControlContainer.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v7);
  uint64_t v3 = type metadata accessor for PickerStyleConfiguration();
  uint64_t v4 = PickerStyleConfiguration.selectedBoundIndices(children:)((uint64_t)v7, v3);
  outlined init with copy of SubviewsCollection((uint64_t)v7, (uint64_t)v6);
  ResolvedSegmentedControl.init(selectedIndices:segments:)(v4, (uint64_t)v6, a2);
  return outlined destroy of SubviewsCollection((uint64_t)v7);
}

double ResolvedSegmentedControl.init(selectedIndices:segments:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 96) = swift_getKeyPath();
  *(unsigned char *)(a3 + 104) = 0;
  outlined init with copy of SubviewsCollection(a2, a3);
  type metadata accessor for MainActor();
  swift_bridgeObjectRetain();
  uint64_t v6 = static MainActor.shared.getter();
  uint64_t v7 = (void *)swift_allocObject();
  uint64_t v8 = MEMORY[0x1E4FBCFD8];
  _OWORD v7[2] = v6;
  v7[3] = v8;
  void v7[4] = a1;
  swift_bridgeObjectRetain();
  uint64_t v9 = static MainActor.shared.getter();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v9;
  long long v10[3] = v8;
  v10[4] = a1;
  type metadata accessor for Int?();
  Binding.init(get:set:)();
  outlined destroy of SubviewsCollection(a2);
  double result = *(double *)&v12;
  *(_OWORD *)(a3 + 56) = v12;
  *(void *)(a3 + 72) = v13;
  *(unsigned char *)(a3 + 80) = v14;
  *(void *)(a3 + 88) = a1;
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _SegmentedControlContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, WitnessTable);
}

void closure #1 in ResolvedSegmentedControl.init(selectedIndices:segments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    type metadata accessor for Binding<Int?>();
    MEMORY[0x18C113DA0](v3, v4, v5, v6);
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #2 in ResolvedSegmentedControl.init(selectedIndices:segments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = a4 + 40;
    do
    {
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_release();
      v6 += 32;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for View.body.getter in conformance ResolvedSegmentedControl@<X0>(uint64_t *a1@<X8>)
{
  char v3 = *(unsigned char *)(v1 + 104);
  uint64_t v4 = swift_retain();
  uint64_t v5 = specialized Environment.wrappedValue.getter(v4, v3);
  swift_release();
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 80))(v1);
  uint64_t result = swift_release();
  *a1 = v6;
  return result;
}

uint64_t getEnumTagSinglePayload for _SegmentedControlContainer(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 9;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x188126360);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  int v17 = (unint64_t *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v6 + 8) & ~v6);
  }
  unint64_t v18 = *v17;
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  return (v18 + 1);
}

void storeEnumTagSinglePayload for _SegmentedControlContainer(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_47;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            unint64_t v19 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v21 = *(void (**)(unint64_t))(v6 + 56);
              v21(((unint64_t)v19 + v9 + 8) & ~v9);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              *unint64_t v19 = v20;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = (~v8 + a2) >> v11;
  if (v10 < 4) {
    int v17 = v16 + 1;
  }
  else {
    int v17 = 1;
  }
  if (v10 >= 4) {
    unsigned int v18 = ~v8 + a2;
  }
  else {
    unsigned int v18 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v18;
  }
  else {
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v17;
      break;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x188126594);
    case 4:
      *(_DWORD *)&a1[v10] = v17;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for _SegmentedControl()
{
  type metadata accessor for _SegmentedControlContainer();
  uint64_t result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _SegmentedControl(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = ((v7 + 16) & ~v7) + *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(v4 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  unint64_t v11 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + v10 + 9;
  unint64_t v12 = (v11 & ~v10) + *(void *)(v9 + 64);
  int v13 = (*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000;
  uint64_t v14 = *a2;
  *a1 = *a2;
  if ((v10 | v7) > 7 || v13 != 0 || v12 > 0x18)
  {
    a1 = (uint64_t *)(v14 + (((v10 | v7) & 0xF8 ^ 0x1F8) & ((v10 | v7) + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v27 = v4;
    uint64_t v28 = ~v10;
    unsigned int v18 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v19 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v18 = *v19;
    uint64_t v26 = ((unint64_t)v18 + v7 + 8) & ~v7;
    uint64_t v20 = ((unint64_t)v19 + v7 + 8) & ~v7;
    unint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v21(v26, v20, v5);
    unint64_t v22 = ((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = ((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v22 = *(void *)v23;
    *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
    long long v24 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
    swift_bridgeObjectRetain();
    v24(((unint64_t)a1 + v11) & v28, ((unint64_t)a2 + v11) & v28, v27);
  }
  return a1;
}

uint64_t destroy for _SegmentedControl(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 15;
  swift_release();
  swift_release();
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = v5 + 8;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(((v4 & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7);
  uint64_t v8 = ((v7 + 16) & ~v7) + *(void *)(v6 + 56) + 7;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v10 = *(uint64_t (**)(unint64_t))(v9 + 8);
  unint64_t v11 = (a1 + *(unsigned __int8 *)(v9 + 80) + (v8 & 0xFFFFFFFFFFFFFFF8) + 9) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);

  return v10(v11);
}

void *initializeWithCopy for _SegmentedControl(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *v7;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  uint64_t v10 = *(void *)(v8 - 8) + 16;
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(v8 - 8) + 80);
  uint64_t v12 = ((unint64_t)v6 + v11 + 8) & ~v11;
  uint64_t v13 = ((unint64_t)v7 + v11 + 8) & ~v11;
  swift_retain();
  swift_retain();
  v9(v12, v13, v8);
  uint64_t v14 = ((v11 + 16) & ~v11) + *(void *)(v10 + 48) + 7;
  unint64_t v15 = ((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = *(void *)(a3 + 24);
  uint64_t v18 = *(void *)(v17 - 8);
  unint64_t v19 = *(void (**)(unint64_t, unint64_t, uint64_t))(v18 + 16);
  uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
  unint64_t v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + v20 + 9;
  unint64_t v22 = ((unint64_t)a1 + v21) & ~v20;
  unint64_t v23 = ((unint64_t)a2 + v21) & ~v20;
  swift_bridgeObjectRetain();
  v19(v22, v23, v17);
  return a1;
}

void *assignWithCopy for _SegmentedControl(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)v6;
  swift_retain();
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v7 + v10 + 8) & ~v10, (v10 + 8 + v6) & ~v10);
  uint64_t v11 = ((v10 + 16) & ~v10) + *(void *)(v9 + 40) + 7;
  unint64_t v12 = ((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v12 = *(void *)v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  uint64_t v14 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 24))(((unint64_t)a1 + (v11 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v14 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), ((unint64_t)a2 + (v11 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v14 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

void *initializeWithTake for _SegmentedControl(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((unint64_t)v6 + v10 + 8) & ~v10, ((unint64_t)v7 + v10 + 8) & ~v10);
  uint64_t v11 = ((v10 + 16) & ~v10) + *(void *)(v9 + 32) + 7;
  unint64_t v12 = ((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  uint64_t v14 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 32))(((unint64_t)a1 + (v11 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v14 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), ((unint64_t)a2 + (v11 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v14 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

void *assignWithTake for _SegmentedControl(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)v6;
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((unint64_t)v7 + v10 + 8) & ~v10, (v10 + 8 + v6) & ~v10);
  uint64_t v11 = ((v10 + 16) & ~v10) + *(void *)(v9 + 24) + 7;
  unint64_t v12 = ((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v12 = *(void *)v13;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  uint64_t v14 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 40))(((unint64_t)a1 + (v11 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v14 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), ((unint64_t)a2 + (v11 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v14 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _SegmentedControl(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  if (v9 <= v6) {
    unsigned int v12 = v6;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (!a2) {
    return 0;
  }
  unint64_t v13 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v10 + 16) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8)
      + v11
      + 9;
  int v14 = a2 - v12;
  if (a2 <= v12) {
    goto LABEL_28;
  }
  unint64_t v15 = (v13 & ~v11) + *(void *)(*(void *)(v7 - 8) + 64);
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v19 = ((v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)((char *)a1 + v15);
      if (!v17) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)((char *)a1 + v15);
      if (!*(unsigned __int16 *)((char *)a1 + v15)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 < 2)
    {
LABEL_28:
      if (v6 < v9) {
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(((unint64_t)a1 + v13) & ~v11, v9, v7);
      }
      unint64_t v23 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v23 + v10 + 8) & ~v10);
      }
      unint64_t v24 = *v23;
      if (v24 >= 0xFFFFFFFF) {
        LODWORD(v24) = -1;
      }
      return (v24 + 1);
    }
  }
  int v17 = *((unsigned __int8 *)a1 + v15);
  if (!*((unsigned char *)a1 + v15)) {
    goto LABEL_28;
  }
LABEL_18:
  int v20 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v20 = 0;
  }
  if (v15)
  {
    if (v15 <= 3) {
      int v21 = v15;
    }
    else {
      int v21 = 4;
    }
    switch(v21)
    {
      case 2:
        int v22 = *a1;
        break;
      case 3:
        int v22 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v22 = *(_DWORD *)a1;
        break;
      default:
        int v22 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v22 = 0;
  }
  return v12 + (v22 | v20) + 1;
}

void storeEnumTagSinglePayload for _SegmentedControl(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  if (v11 <= v8) {
    unsigned int v14 = v8;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v10 + 84);
  }
  size_t v15 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v12 + 16) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  size_t v16 = ((v15 + v13) & ~v13) + *(void *)(*(void *)(v9 - 8) + 64);
  BOOL v17 = a3 >= v14;
  unsigned int v18 = a3 - v14;
  if (v18 != 0 && v17)
  {
    if (v16 <= 3)
    {
      unsigned int v22 = ((v18 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
      if (HIWORD(v22))
      {
        int v19 = 4;
      }
      else if (v22 >= 0x100)
      {
        int v19 = 2;
      }
      else
      {
        int v19 = v22 > 1;
      }
    }
    else
    {
      int v19 = 1;
    }
  }
  else
  {
    int v19 = 0;
  }
  if (v14 < a2)
  {
    unsigned int v20 = ~v14 + a2;
    if (v16 < 4)
    {
      int v21 = (v20 >> (8 * v16)) + 1;
      if (v16)
      {
        int v23 = v20 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v23;
          a1[2] = BYTE2(v23);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v23;
        }
        else
        {
          *a1 = v23;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v20;
      int v21 = 1;
    }
    switch(v19)
    {
      case 1:
        a1[v16] = v21;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v21;
        return;
      case 3:
        goto LABEL_56;
      case 4:
        *(_DWORD *)&a1[v16] = v21;
        return;
      default:
        return;
    }
  }
  switch(v19)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_56:
      __break(1u);
      JUMPOUT(0x18812743CLL);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v8 >= v11)
        {
          if (v8 >= a2)
          {
            uint64_t v26 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v7 & 0x80000000) != 0)
            {
              uint64_t v28 = *(void (**)(unint64_t))(v6 + 56);
              v28(((unint64_t)v26 + v12 + 8) & ~v12);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v27 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v27 = a2 - 1;
              }
              *uint64_t v26 = v27;
            }
          }
          else
          {
            if (v15 >= 4) {
              int v25 = ~v8 + a2;
            }
            else {
              int v25 = (~(_BYTE)v8 + a2);
            }
            bzero(a1, v15);
            if (v15 == 1) {
              *a1 = v25;
            }
            else {
              *(_DWORD *)a1 = v25;
            }
          }
        }
        else
        {
          unint64_t v24 = *(void (**)(unint64_t))(v10 + 56);
          v24((unint64_t)&a1[v15 + v13] & ~v13);
        }
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for View in _SegmentedControl<A, B>()
{
  return &protocol witness table for _SegmentedControl<A, B>;
}

uint64_t instantiation function for generic protocol witness table for _SegmentedControlContainer<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in _SegmentedControlContainer<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1881274F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.segmentedControlStyle.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18812752C()
{
  swift_retain();
  specialized EnvironmentValues.subscript.setter();

  return swift_release();
}

void partial apply for closure #1 in ResolvedSegmentedControl.init(selectedIndices:segments:)()
{
  closure #1 in ResolvedSegmentedControl.init(selectedIndices:segments:)(v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #2 in ResolvedSegmentedControl.init(selectedIndices:segments:)(uint64_t a1)
{
  return closure #2 in ResolvedSegmentedControl.init(selectedIndices:segments:)(a1, v1[2], v1[3], v1[4]);
}

ValueMetadata *type metadata accessor for ResolvedSegmentedControl()
{
  return &type metadata for ResolvedSegmentedControl;
}

unint64_t lazy protocol witness table accessor for type ResolvedSegmentedControl and conformance ResolvedSegmentedControl()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedSegmentedControl and conformance ResolvedSegmentedControl;
  if (!lazy protocol witness table cache variable for type ResolvedSegmentedControl and conformance ResolvedSegmentedControl)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedSegmentedControl and conformance ResolvedSegmentedControl);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedSegmentedControl()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_188127614()
{
  return MEMORY[0x1E4F41610];
}

uint64_t _ShadowView.init(shape:effect:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t result = type metadata accessor for _ShadowView();
  uint64_t v13 = a4 + *(int *)(result + 36);
  *(void *)uint64_t v13 = a2;
  *(double *)(v13 + 8) = a5;
  *(double *)(v13 + 16) = a6;
  *(double *)(v13 + 24) = a7;
  return result;
}

uint64_t _ShadowView.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ShadowView.shape.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_ShadowView.shape.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double _ShadowView.effect.getter(uint64_t a1)
{
  double v2 = *(double *)(v1 + *(int *)(a1 + 36) + 8);
  swift_retain();
  return v2;
}

uint64_t _ShadowView.effect.setter(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v10 = v5 + *(int *)(a2 + 36);
  uint64_t result = swift_release();
  *(void *)uint64_t v10 = a1;
  *(double *)(v10 + 8) = a3;
  *(double *)(v10 + 16) = a4;
  *(double *)(v10 + 24) = a5;
  return result;
}

uint64_t (*_ShadowView.effect.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

_UNKNOWN **base witness table accessor for View in _ShadowView<A>()
{
  return &protocol witness table for _ShadowView<A>;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ShadowView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = *(void *)(v11 + 8);
    *(_OWORD *)(v10 + 16) = *(_OWORD *)(v11 + 16);
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithTake for _ShadowView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  return a1;
}

uint64_t assignWithTake for _ShadowView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  swift_release();
  v7[1] = v8[1];
  _OWORD v7[2] = v8[2];
  v7[3] = v8[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShadowView(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x188127B8CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for _ShadowView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 32);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x188127D84);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unsigned int v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            _OWORD v18[2] = 0;
            void v18[3] = 0;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          void *v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

_UNKNOWN **sub_188127DAC()
{
  return &protocol witness table for _ShadowView<A>;
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvedShadowView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 45 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    long long v11 = *(_OWORD *)((char *)v10 + 29);
    long long v12 = v10[1];
    unsigned int v13 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v13 = *v10;
    v13[1] = v12;
    *(_OWORD *)((char *)v13 + 29) = v11;
  }
  return v4;
}

uint64_t initializeWithCopy for ResolvedShadowView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = *(_OWORD *)((char *)v8 + 29);
  long long v10 = v8[1];
  *int v7 = *v8;
  v7[1] = v10;
  *(_OWORD *)((char *)v7 + 29) = v9;
  return a1;
}

uint64_t assignWithCopy for ResolvedShadowView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  *(_DWORD *)(v7 + 40) = *(_DWORD *)(v8 + 40);
  *(unsigned char *)(v7 + 44) = *(unsigned char *)(v8 + 44);
  return a1;
}

uint64_t initializeWithTake for ResolvedShadowView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = *(_OWORD *)((char *)v8 + 29);
  long long v10 = v8[1];
  *unint64_t v7 = *v8;
  v7[1] = v10;
  *(_OWORD *)((char *)v7 + 29) = v9;
  return a1;
}

uint64_t assignWithTake for ResolvedShadowView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  *(_DWORD *)(v7 + 40) = *(_DWORD *)(v8 + 40);
  *(unsigned char *)(v7 + 44) = *(unsigned char *)(v8 + 44);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedShadowView(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2
    && *((unsigned char *)a1 + ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 45))
  {
    return v5 + *a1 + 1;
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ResolvedShadowView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 45;
  if (v7 >= a2)
  {
    if (v7 < a3) {
      a1[v8] = 0;
    }
    if (a2)
    {
      long long v10 = *(void (**)(void))(v6 + 56);
      v10();
    }
  }
  else
  {
    unsigned int v9 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v9;
    if (v7 < a3) {
      a1[v8] = 1;
    }
  }
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance ShadowChild<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ResolvedShadowView();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t ResolvedShadowView.animatableData.setter(uint64_t a1, uint64_t a2)
{
  specialized ResolvedShadowView.animatableData.setter(a1, a2);
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
  uint64_t v3 = type metadata accessor for AnimatablePair();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
}

void (*protocol witness for Animatable.animatableData.modify in conformance ResolvedShadowView<A>(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  unsigned int v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = v2;
  v5[5] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>();
  uint64_t v8 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
  *unsigned int v5 = AssociatedTypeWitness;
  v5[1] = v8;
  _OWORD v5[2] = AssociatedConformanceWitness;
  v5[3] = v10;
  uint64_t v11 = type metadata accessor for AnimatablePair();
  v5[6] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[7] = v12;
  size_t v13 = *(void *)(v12 + 64);
  v5[8] = malloc(v13);
  v5[9] = malloc(v13);
  ResolvedShadowView.animatableData.getter(a2);
  return protocol witness for Animatable.animatableData.modify in conformance ResolvedShadowView<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance ResolvedShadowView<A>(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 64);
  uint64_t v4 = *(void **)(*(void *)a1 + 72);
  uint64_t v5 = *(void *)(*(void *)a1 + 48);
  uint64_t v6 = *(void *)(*(void *)a1 + 56);
  uint64_t v7 = *(void *)(*(void *)a1 + 40);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 64), v4, v5);
    specialized ResolvedShadowView.animatableData.setter((uint64_t)v3, v7);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    specialized ResolvedShadowView.animatableData.setter(*(void *)(*(void *)a1 + 72), v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

double protocol witness for ContentResponder.contentPath(size:) in conformance ResolvedShadowView<A>@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 6;
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedShadowView<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedShadowView<A>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance ResolvedShadowView<A>()
{
}

uint64_t specialized ResolvedShadowView.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v6 = &v12[-v5];
  type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>();
  uint64_t v8 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = lazy protocol witness table accessor for type AnimatablePair<Float, Float> and conformance AnimatablePair<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
  *(void *)&long long v15 = AssociatedTypeWitness;
  *((void *)&v15 + 1) = v8;
  *(void *)&long long v16 = AssociatedConformanceWitness;
  *((void *)&v16 + 1) = v10;
  type metadata accessor for AnimatablePair();
  AnimatablePair.subscript.getter();
  long long v15 = *(_OWORD *)&v12[8];
  long long v16 = v13;
  uint64_t v17 = v14;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 32))(v6, v2, v3);
  return ResolvedShadowStyle.animatableData.setter();
}

uint64_t sub_18812894C()
{
  outlined consume of Path.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return swift_deallocObject();
}

uint64_t EnvironmentValues.tableColumnHeadersVisibility.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<TableColumnHeadersVisibilityKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableColumnHeadersVisibilityKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnHeadersVisibilityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TableColumnHeadersVisibilityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<TableColumnHeadersVisibilityKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableColumnHeadersVisibilityKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnHeadersVisibilityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TableColumnHeadersVisibilityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.tableColumnHeadersVisibility : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tableColumnHeadersVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.tableColumnHeadersVisibility : EnvironmentValues()
{
  return EnvironmentValues.tableColumnHeadersVisibility.setter();
}

uint64_t EnvironmentValues.tableColumnHeadersVisibility.setter()
{
  type metadata accessor for EnvironmentPropertyKey<TableColumnHeadersVisibilityKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TableColumnHeadersVisibilityKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnHeadersVisibilityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TableColumnHeadersVisibilityKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_188128C10@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tableColumnHeadersVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t sub_188128C4C()
{
  return EnvironmentValues.tableColumnHeadersVisibility.setter();
}

void View.tableHeaderBezelVisibility(_:)()
{
}

uint64_t View.tableColumnHeaders(_:)()
{
  return swift_release();
}

uint64_t sub_188128D00()
{
  return swift_getWitnessTable();
}

uint64_t sub_188128D88()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Visibility?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>(255, &lazy cache variable for type metadata for Visibility?, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility?>);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x1E4F3F3F0]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TableColumnHeadersVisibilityKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<TableColumnHeadersVisibilityKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnHeadersVisibilityKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnHeadersVisibilityKey>);
    }
  }
}

void *type metadata accessor for TableColumnHeadersVisibilityKey()
{
  return &unk_1ED45BBA0;
}

void FetchedResults.nsSortDescriptors.getter()
{
  if (*(void *)(*(void *)(v0 + 8) + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 8)) + 0x70)))
  {
    swift_retain();
    id v1 = DeferredFetchRequest.result.getter();
    swift_release();
    id v2 = objc_msgSend(v1, sel_sortDescriptors);

    if (v2)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
      static Array._unconditionallyBridgeFromObjectiveC(_:)();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void key path setter for FetchedResults.nsSortDescriptors : <A>FetchedResults<A>()
{
}

void FetchedResults.nsSortDescriptors.setter()
{
  if (*(void *)(*(void *)(v0 + 8) + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 8)) + 0x70)))
  {
    swift_retain();
    id v1 = DeferredFetchRequest.result.getter();
    swift_release();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setSortDescriptors_, isa);

    v3.value.super.Class isa = 0;
    FetchController.update(in:)(v3);
  }
  else
  {
    __break(1u);
  }
}

void (*FetchedResults.nsSortDescriptors.modify(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  a1[1] = a2;
  a1[2] = v4;
  a1[3] = v5;
  FetchedResults.nsSortDescriptors.getter();
  *a1 = v6;
  return FetchedResults.nsSortDescriptors.modify;
}

void FetchedResults.nsSortDescriptors.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    FetchedResults.nsSortDescriptors.setter();
    swift_bridgeObjectRelease();
  }
  else
  {
    FetchedResults.nsSortDescriptors.setter();
  }
}

void FetchedResults.nsPredicate.getter()
{
  if (*(void *)(*(void *)(v0 + 8) + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 8)) + 0x70)))
  {
    swift_retain();
    id v1 = DeferredFetchRequest.result.getter();
    swift_release();
    objc_msgSend(v1, sel_predicate);
  }
  else
  {
    __break(1u);
  }
}

void key path setter for FetchedResults.nsPredicate : <A>FetchedResults<A>(void **a1)
{
  id v1 = *a1;
  type metadata accessor for FetchedResults();
  id v2 = v1;
  specialized FetchedResults.nsPredicate.setter((uint64_t)v1);
}

void FetchedResults.nsPredicate.setter(void *a1)
{
  specialized FetchedResults.nsPredicate.setter((uint64_t)a1);
}

void (*FetchedResults.nsPredicate.modify(void *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  a1[1] = a2;
  a1[2] = v4;
  a1[3] = v5;
  FetchedResults.nsPredicate.getter();
  *a1 = v6;
  return FetchedResults.nsPredicate.modify;
}

void FetchedResults.nsPredicate.modify(uint64_t *a1, char a2)
{
  id v4 = (id)*a1;
  if (a2)
  {
    id v3 = v4;
    specialized FetchedResults.nsPredicate.setter((uint64_t)v4);

    id v2 = v3;
  }
  else
  {
    specialized FetchedResults.nsPredicate.setter(*a1);
    id v2 = v4;
  }
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance FetchedResults<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842B0](a1, a2, WitnessTable, v5);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance FetchedResults<A>(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance FetchedResults<A>(a1, a2, a3, MEMORY[0x1E4FBB618]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance FetchedResults<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842B8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance FetchedResults<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41842A0](a1, a2, a3, a4, WitnessTable);
}

uint64_t protocol witness for Collection.indices.getter in conformance FetchedResults<A>()
{
  swift_getWitnessTable();

  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.index(after:) in conformance FetchedResults<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842A8](a1, a2, WitnessTable, v5);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance FetchedResults<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance FetchedResults<A>()
{
  swift_getWitnessTable();
  uint64_t v1 = specialized Collection._copyToContiguousArray()();
  id v2 = *v0;

  return v1;
}

uint64_t FetchRequest.Configuration.nsSortDescriptors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FetchRequest.Configuration.nsSortDescriptors.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*FetchRequest.Configuration.nsSortDescriptors.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void *FetchRequest.Configuration.nsPredicate.getter()
{
  uint64_t v1 = *(void **)(v0 + 8);
  id v2 = v1;
  return v1;
}

void FetchRequest.Configuration.nsPredicate.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
}

uint64_t (*FetchRequest.Configuration.nsPredicate.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t FetchRequest.projectedValue.getter(uint64_t a1)
{
  long long v3 = v1[3];
  long long v18 = v1[2];
  long long v19 = v3;
  long long v20 = v1[4];
  long long v4 = v1[1];
  long long v16 = *v1;
  long long v17 = v4;
  type metadata accessor for MainActor();
  outlined retain of FetchRequest<A>((uint64_t)&v16);
  uint64_t v5 = static MainActor.shared.getter();
  uint64_t v6 = swift_allocObject();
  long long v7 = v16;
  *(_OWORD *)(v6 + 56) = v17;
  long long v8 = v19;
  *(_OWORD *)(v6 + 72) = v18;
  uint64_t v9 = MEMORY[0x1E4FBCFD8];
  *(_OWORD *)(v6 + 88) = v8;
  *(_OWORD *)(v6 + 104) = v20;
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v9;
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(v6 + 32) = v10;
  *(_OWORD *)(v6 + 40) = v7;
  outlined retain of FetchRequest<A>((uint64_t)&v16);
  uint64_t v11 = static MainActor.shared.getter();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = v9;
  *(void *)(v12 + 32) = v10;
  long long v13 = v16;
  *(_OWORD *)(v12 + 56) = v17;
  long long v14 = v19;
  *(_OWORD *)(v12 + 72) = v18;
  *(_OWORD *)(v12 + 88) = v14;
  *(_OWORD *)(v12 + 104) = v20;
  *(_OWORD *)(v12 + 40) = v13;
  type metadata accessor for FetchRequest.Configuration();
  return Binding.init(get:set:)();
}

void closure #1 in FetchRequest.projectedValue.getter(uint64_t *a1@<X8>)
{
  id v6 = DeferredFetchRequest.result.getter();
  id v2 = objc_msgSend(v6, sel_sortDescriptors);
  if (v2)
  {
    long long v3 = v2;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v5 = objc_msgSend(v6, sel_predicate);
    *a1 = v4;
    a1[1] = (uint64_t)v5;
  }
  else
  {
    __break(1u);
  }
}

void closure #2 in FetchRequest.projectedValue.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  id v3 = DeferredFetchRequest.result.getter();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, sel_setSortDescriptors_, isa);

  objc_msgSend(v3, sel_setPredicate_, v1);
  type metadata accessor for FetchRequest();
  FetchRequest.update(_:)();
}

uint64_t static FetchRequest._propertyBehaviors.getter()
{
  return 2;
}

__n128 FetchRequest.init(entity:sortDescriptors:predicate:animation:)@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  type metadata accessor for DeferredFetchRequest();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a4;
  long long v10[3] = a1;
  v10[4] = a2;
  v10[5] = a3;
  uint64_t v11 = DeferredFetchRequest.__allocating_init(_:)((uint64_t)partial apply for closure #1 in FetchRequest.init(entity:sortDescriptors:predicate:animation:), (uint64_t)v10);
  swift_retain();
  id v12 = a1;
  id v13 = a3;
  uint64_t v14 = Transaction.init(animation:)();
  FetchRequest.init(deferredFetchRequest:transaction:)(v11, v14, (uint64_t)&v21);

  swift_release();
  char v15 = v22;
  char v16 = v24;
  uint64_t v17 = v27;
  __n128 result = v23;
  long long v19 = v25;
  long long v20 = v26;
  *(void *)a5 = v21;
  *(unsigned char *)(a5 + 8) = v15;
  *(__n128 *)(a5 + 16) = result;
  *(unsigned char *)(a5 + 32) = v16;
  *(_OWORD *)(a5 + 40) = v19;
  *(_OWORD *)(a5 + 56) = v20;
  *(void *)(a5 + 72) = v17;
  return result;
}

id closure #1 in FetchRequest.init(entity:sortDescriptors:predicate:animation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSFetchRequest);
  id v5 = NSFetchRequest.__allocating_init()();
  objc_msgSend(v5, sel_setEntity_, a1);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, sel_setSortDescriptors_, isa);

  objc_msgSend(v5, sel_setPredicate_, a3);
  return v5;
}

uint64_t FetchRequest.Configuration<>.sortDescriptors.getter(uint64_t a1)
{
  _OWORD v9[5] = *v1;
  v9[2] = *(void *)(a1 + 16);
  type metadata accessor for [NSSortDescriptor]();
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for SortDescriptor();
  unint64_t v5 = lazy protocol witness table accessor for type [NSSortDescriptor] and conformance [A]();
  swift_bridgeObjectRetain();
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in FetchRequest.Configuration<>.sortDescriptors.getter, (uint64_t)v9, v3, v4, MEMORY[0x1E4FBC248], v5, MEMORY[0x1E4FBC278], v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t key path setter for FetchRequest.Configuration<>.sortDescriptors : <A>FetchRequest<A>.Configuration()
{
  uint64_t v0 = type metadata accessor for FetchRequest.Configuration();
  uint64_t v1 = swift_bridgeObjectRetain();
  return FetchRequest.Configuration<>.sortDescriptors.setter(v1, v0);
}

uint64_t FetchRequest.Configuration<>.sortDescriptors.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v10[5] = a1;
  v10[2] = *(void *)(a2 + 16);
  type metadata accessor for SortDescriptor();
  uint64_t v4 = type metadata accessor for Array();
  uint64_t v5 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in FetchRequest.Configuration<>.sortDescriptors.setter, (uint64_t)v10, v4, v5, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v7);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v3 = v8;
  return result;
}

uint64_t closure #1 in FetchRequest<>.init(sortDescriptors:predicate:animation:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SortDescriptor();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v9 - v6;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t result = NSSortDescriptor.init<A>(_:)();
  *a2 = result;
  return result;
}

uint64_t (*FetchRequest.Configuration<>.sortDescriptors.modify(uint64_t *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  a1[1] = a2;
  a1[2] = v2;
  *a1 = FetchRequest.Configuration<>.sortDescriptors.getter(a2);
  return FetchRequest.Configuration<>.sortDescriptors.modify;
}

uint64_t FetchRequest.Configuration<>.sortDescriptors.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  if ((a2 & 1) == 0) {
    return FetchRequest.Configuration<>.sortDescriptors.setter(*a1, v2);
  }
  uint64_t v3 = swift_bridgeObjectRetain();
  FetchRequest.Configuration<>.sortDescriptors.setter(v3, v2);

  return swift_bridgeObjectRelease();
}

uint64_t FetchedResults<>.sortDescriptors.getter(uint64_t a1)
{
  long long v12 = *v1;
  FetchedResults.nsSortDescriptors.getter();
  *(void *)&long long v12 = v3;
  _OWORD v11[2] = *(void *)(a1 + 16);
  type metadata accessor for [NSSortDescriptor]();
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for SortDescriptor();
  unint64_t v7 = lazy protocol witness table accessor for type [NSSortDescriptor] and conformance [A]();
  uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in FetchedResults<>.sortDescriptors.getter, (uint64_t)v11, v5, v6, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  swift_bridgeObjectRelease();
  return v9;
}

void key path setter for FetchedResults<>.sortDescriptors : <A>FetchedResults<A>()
{
  uint64_t v0 = type metadata accessor for FetchedResults();
  uint64_t v1 = swift_bridgeObjectRetain();
  FetchedResults<>.sortDescriptors.setter(v1, v0);
}

void FetchedResults<>.sortDescriptors.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v3 = *(void **)(v2 + 8);
  id v13 = v4;
  id v14 = v3;
  v12[5] = a1;
  v12[2] = *(void *)(a2 + 16);
  type metadata accessor for SortDescriptor();
  uint64_t v5 = type metadata accessor for Array();
  uint64_t v6 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  id v7 = v4;
  id v8 = v3;
  uint64_t WitnessTable = swift_getWitnessTable();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in FetchRequest<>.init(sortDescriptors:predicate:animation:), (uint64_t)v12, v5, v6, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v10);
  swift_bridgeObjectRelease();
  FetchedResults.nsSortDescriptors.setter();
  uint64_t v11 = v13;
}

uint64_t closure #1 in FetchRequest.Configuration<>.sortDescriptors.getter@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SortDescriptor();
  uint64_t v5 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v5 - 8);
  id v7 = (char *)&v11 - v6;
  id v8 = *a1;
  SortDescriptor.init<A>(_:comparing:)();
  uint64_t v9 = *(void *)(v4 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v4);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v7, v4);
  }
  __break(1u);
  return result;
}

void (*FetchedResults<>.sortDescriptors.modify(uint64_t *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  a1[1] = a2;
  a1[2] = v3;
  a1[3] = v4;
  *a1 = FetchedResults<>.sortDescriptors.getter(a2);
  return FetchedResults<>.sortDescriptors.modify;
}

void FetchedResults<>.sortDescriptors.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  if (a2)
  {
    uint64_t v3 = swift_bridgeObjectRetain();
    FetchedResults<>.sortDescriptors.setter(v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    FetchedResults<>.sortDescriptors.setter(*a1, v2);
  }
}

uint64_t specialized Collection._copyToContiguousArray()()
{
  return MEMORY[0x1F4185D38]();
}

void specialized FetchedResults.nsPredicate.setter(uint64_t a1)
{
  if (*(void *)(*(void *)(v1 + 8) + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(v1 + 8)) + 0x70)))
  {
    swift_retain();
    id v3 = DeferredFetchRequest.result.getter();
    swift_release();
    objc_msgSend(v3, sel_setPredicate_, a1);

    v4.value.super.Class isa = 0;
    FetchController.update(in:)(v4);
  }
  else
  {
    __break(1u);
  }
}

uint64_t outlined retain of FetchRequest<A>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  id v3 = *(void **)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 48);
  outlined copy of Environment<UISceneSession?>.Content(*(id *)a1, *(unsigned char *)(a1 + 8));
  outlined copy of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(v2, v3, v4);
  outlined copy of FetchedResults<A>?<A>(v5, v6);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void partial apply for closure #1 in FetchRequest.projectedValue.getter(uint64_t *a1@<X8>)
{
}

void partial apply for closure #2 in FetchRequest.projectedValue.getter(uint64_t a1)
{
}

uint64_t type metadata accessor for FetchRequest.Configuration()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_18812A81C()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

id partial apply for closure #1 in FetchRequest.init(entity:sortDescriptors:predicate:animation:)()
{
  return closure #1 in FetchRequest.init(entity:sortDescriptors:predicate:animation:)(v0[3], v0[4], v0[5]);
}

uint64_t sub_18812A870()
{
  return swift_deallocObject();
}

uint64_t sub_18812A8A8()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FetchRequest.Configuration<>.sortDescriptors.getter@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in FetchRequest.Configuration<>.sortDescriptors.getter(a1, a2);
}

void type metadata accessor for [NSSortDescriptor]()
{
  if (!lazy cache variable for type metadata for [NSSortDescriptor])
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [NSSortDescriptor]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [NSSortDescriptor] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [NSSortDescriptor] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NSSortDescriptor] and conformance [A])
  {
    type metadata accessor for [NSSortDescriptor]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [NSSortDescriptor] and conformance [A]);
  }
  return result;
}

uint64_t partial apply for closure #1 in FetchRequest.Configuration<>.sortDescriptors.setter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in FetchRequest<>.init(sortDescriptors:predicate:animation:)(a1, a2);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in FetchedResults<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in FetchedResults<A>()
{
  return swift_getWitnessTable();
}

void sub_18812AAB0(void *a1@<X8>)
{
  FetchedResults.nsSortDescriptors.getter();
  *a1 = v2;
}

uint64_t sub_18812AAF0()
{
  return 8;
}

void *sub_18812AAFC(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void sub_18812AB08(void *a1@<X8>)
{
  FetchedResults.nsPredicate.getter();
  *a1 = v2;
}

uint64_t sub_18812AB48()
{
  return 8;
}

uint64_t sub_18812AB54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for FetchRequest.Configuration();
  uint64_t result = FetchRequest.Configuration<>.sortDescriptors.getter(v2);
  *a1 = result;
  return result;
}

uint64_t sub_18812ABA4()
{
  return 8;
}

uint64_t sub_18812ABB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for FetchedResults();
  uint64_t result = FetchedResults<>.sortDescriptors.getter(v2);
  *a1 = result;
  return result;
}

uint64_t sub_18812AC00()
{
  return 8;
}

uint64_t assignWithCopy for FetchedResults(uint64_t a1, uint64_t a2)
{
  char v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for FetchRequest(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  id v6 = *(void **)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<UISceneSession?>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 32);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void **)(a1 + 24);
  char v11 = *(unsigned char *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(v9, v10, v11);
  long long v12 = *(void **)(a1 + 40);
  uint64_t v13 = a2[5];
  if (!v12) {
    goto LABEL_5;
  }
  if (!v13)
  {
    uint64_t v15 = type metadata accessor for FetchedResults();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1 + 40, v15);
LABEL_5:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    goto LABEL_6;
  }
  *(void *)(a1 + 40) = v13;

  id v14 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = a2[6];

LABEL_6:
  *(void *)(a1 + 56) = a2[7];
  swift_release();
  *(void *)(a1 + 64) = a2[8];
  swift_release();
  *(void *)(a1 + 72) = a2[9];
  swift_release();
  return a1;
}

uint64_t sub_18812AD88()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type NSManagedObjectContext and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NSManagedObjectContext and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSManagedObjectContext and conformance NSObject)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSManagedObjectContext);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSManagedObjectContext and conformance NSObject);
  }
  return result;
}

uint64_t partial apply for closure #1 in FetchRequest<>.init(sortDescriptors:predicate:animation:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for closure #1 in FetchRequest.Configuration<>.sortDescriptors.setter(a1, a2);
}

uint64_t partial apply for closure #1 in FetchedResults<>.sortDescriptors.getter@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in FetchRequest.Configuration<>.sortDescriptors.getter(a1, a2);
}

uint64_t destroy for FoundationProgressView(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_release();
}

uint64_t initializeWithCopy for FoundationProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  char v5 = (_OWORD *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 32);
  id v7 = v4;
  if (v6)
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = v6;
    uint64_t v8 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 24);
    *char v5 = *(_OWORD *)(a2 + 8);
    v5[1] = v9;
    _OWORD v5[2] = *(_OWORD *)(a2 + 40);
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FoundationProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  char v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = (_OWORD *)(a1 + 8);
  uint64_t v8 = (_OWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32))
  {
    if (v9)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of NSProgress.UIState(a1 + 8);
      long long v11 = *(_OWORD *)(a2 + 24);
      long long v10 = *(_OWORD *)(a2 + 40);
      *id v7 = *v8;
      *(_OWORD *)(a1 + 24) = v11;
      *(_OWORD *)(a1 + 40) = v10;
    }
  }
  else if (v9)
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v12 = *v8;
    long long v13 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v13;
    *id v7 = v12;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of NSProgress.UIState(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for FoundationProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  if (!*(void *)(a1 + 32)) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 32);
  if (!v5)
  {
    outlined destroy of NSProgress.UIState(a1 + 8);
LABEL_5:
    long long v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_6;
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
LABEL_6:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  return a1;
}

_UNKNOWN **base witness table accessor for View in FoundationProgressView.Body()
{
  return &protocol witness table for FoundationProgressView.Body;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FoundationProgressView.Body(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static View._makeView(view:inputs:) in conformance FoundationProgressView.Body(a1, a2, a3, a4, MEMORY[0x1E4F41460]);
}

uint64_t static FoundationProgressView.Body._makeViewList(view:inputs:)()
{
  return swift_release();
}

void protocol witness for View.body.getter in conformance FoundationProgressView.Body()
{
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FoundationProgressView(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static View._makeView(view:inputs:) in conformance FoundationProgressView.Body(a1, a2, a3, a4, MEMORY[0x1E4F41430]);
}

__n128 protocol witness for View.body.getter in conformance FoundationProgressView@<Q0>(uint64_t a1@<X8>)
{
  id v3 = *v1;
  type metadata accessor for State<NSProgress.UIState?>(0, &lazy cache variable for type metadata for State<NSProgress.UIState?>, MEMORY[0x1E4F41580]);
  id v4 = v3;
  State.projectedValue.getter();
  __n128 result = v8;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(__n128 *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 56) = v10;
  return result;
}

void type metadata accessor for SubscriptionLifetime<Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState>>()
{
  if (!lazy cache variable for type metadata for SubscriptionLifetime<Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState>>)
  {
    type metadata accessor for Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState>();
    lazy protocol witness table accessor for type ResolvedProgressView and conformance ResolvedProgressView(&lazy protocol witness table cache variable for type Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState> and conformance Publishers.Map<A, B>, (void (*)(uint64_t))type metadata accessor for Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState>);
    unint64_t v0 = type metadata accessor for SubscriptionLifetime();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SubscriptionLifetime<Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState>>);
    }
  }
}

void type metadata accessor for Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState>()
{
  if (!lazy cache variable for type metadata for Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState>)
  {
    type metadata accessor for Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>();
    lazy protocol witness table accessor for type ResolvedProgressView and conformance ResolvedProgressView(&lazy protocol witness table cache variable for type Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>> and conformance Publishers.CombineLatest4<A, B, C, D>, (void (*)(uint64_t))type metadata accessor for Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>);
    unint64_t v0 = type metadata accessor for Publishers.Map();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState>);
    }
  }
}

void type metadata accessor for Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>()
{
  if (!lazy cache variable for type metadata for Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>)
  {
    type metadata accessor for NSObject.KeyValueObservingPublisher<NSProgress, Int64>(255, &lazy cache variable for type metadata for NSObject.KeyValueObservingPublisher<NSProgress, Int64>);
    type metadata accessor for NSObject.KeyValueObservingPublisher<NSProgress, Int64>(255, &lazy cache variable for type metadata for NSObject.KeyValueObservingPublisher<NSProgress, String>);
    lazy protocol witness table accessor for type NSObject.KeyValueObservingPublisher<NSProgress, Int64> and conformance NSObject.KeyValueObservingPublisher<A, B>(&lazy protocol witness table cache variable for type NSObject.KeyValueObservingPublisher<NSProgress, Int64> and conformance NSObject.KeyValueObservingPublisher<A, B>, &lazy cache variable for type metadata for NSObject.KeyValueObservingPublisher<NSProgress, Int64>);
    lazy protocol witness table accessor for type NSObject.KeyValueObservingPublisher<NSProgress, Int64> and conformance NSObject.KeyValueObservingPublisher<A, B>(&lazy protocol witness table cache variable for type NSObject.KeyValueObservingPublisher<NSProgress, String> and conformance NSObject.KeyValueObservingPublisher<A, B>, &lazy cache variable for type metadata for NSObject.KeyValueObservingPublisher<NSProgress, String>);
    unint64_t v0 = type metadata accessor for Publishers.CombineLatest4();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>);
    }
  }
}

unint64_t type metadata accessor for NSProgress()
{
  unint64_t result = lazy cache variable for type metadata for NSProgress;
  if (!lazy cache variable for type metadata for NSProgress)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSProgress);
  }
  return result;
}

void type metadata accessor for NSObject.KeyValueObservingPublisher<NSProgress, Int64>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    type metadata accessor for NSProgress();
    unint64_t v3 = type metadata accessor for NSObject.KeyValueObservingPublisher();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type NSObject.KeyValueObservingPublisher<NSProgress, Int64> and conformance NSObject.KeyValueObservingPublisher<A, B>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSObject.KeyValueObservingPublisher<NSProgress, Int64>(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ResolvedProgressView and conformance ResolvedProgressView(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id FoundationProgressView.Body.BodyAttribute.updateValue()()
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  type metadata accessor for NSObject.KeyValueObservingPublisher<NSProgress, Int64>(0, &lazy cache variable for type metadata for NSObject.KeyValueObservingPublisher<NSProgress, String>);
  uint64_t v67 = v1;
  uint64_t v69 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v63 = (char *)v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v61 = (char *)v57 - v4;
  type metadata accessor for NSObject.KeyValueObservingPublisher<NSProgress, Int64>(0, &lazy cache variable for type metadata for NSObject.KeyValueObservingPublisher<NSProgress, Int64>);
  uint64_t v64 = v5;
  uint64_t v66 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v59 = (char *)v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v58 = (char *)v57 - v8;
  type metadata accessor for Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>();
  uint64_t v70 = v9;
  uint64_t v71 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v60 = (char *)v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Publishers.Map<Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>, NSProgress.UIState>();
  uint64_t v73 = *(void *)(v11 - 8);
  uint64_t v74 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v65 = (char *)v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for NSProgress.UIStateSubscriber();
  MEMORY[0x1F4188790](v75);
  id v14 = (void *)((char *)v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v72 = v0;
  uint64_t v68 = *(void *)(v0 + 8);
  v57[3] = *(_DWORD *)v0;
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v16 = Value[1];
  uint64_t v17 = Value[2];
  uint64_t v19 = Value[3];
  uint64_t v18 = Value[4];
  uint64_t v20 = Value[5];
  uint64_t v21 = Value[6];
  uint64_t v23 = Value[7];
  uint64_t v22 = Value[8];
  swift_retain();
  swift_retain();
  outlined copy of NSProgress.UIState?(v19, v18, v20, v21);
  CombineIdentifier.init()();
  uint64_t v62 = v14;
  *id v14 = v16;
  v14[1] = v17;
  void v14[2] = v19;
  _OWORD v14[3] = v18;
  v14[4] = v20;
  long long v14[5] = v21;
  void v14[6] = v23;
  v14[7] = v22;
  char v24 = *(void **)AGGraphGetValue();
  swift_getKeyPath();
  id v25 = v24;
  long long v26 = v58;
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
  swift_release();
  swift_getKeyPath();
  uint64_t v27 = v59;
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
  swift_release();
  swift_getKeyPath();
  uint64_t v28 = v61;
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
  swift_release();
  swift_getKeyPath();
  id v29 = v63;
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
  swift_release();
  lazy protocol witness table accessor for type NSObject.KeyValueObservingPublisher<NSProgress, Int64> and conformance NSObject.KeyValueObservingPublisher<A, B>(&lazy protocol witness table cache variable for type NSObject.KeyValueObservingPublisher<NSProgress, Int64> and conformance NSObject.KeyValueObservingPublisher<A, B>, &lazy cache variable for type metadata for NSObject.KeyValueObservingPublisher<NSProgress, Int64>);
  lazy protocol witness table accessor for type NSObject.KeyValueObservingPublisher<NSProgress, Int64> and conformance NSObject.KeyValueObservingPublisher<A, B>(&lazy protocol witness table cache variable for type NSObject.KeyValueObservingPublisher<NSProgress, String> and conformance NSObject.KeyValueObservingPublisher<A, B>, &lazy cache variable for type metadata for NSObject.KeyValueObservingPublisher<NSProgress, String>);
  long long v30 = v60;
  id v31 = v29;
  uint64_t v32 = v64;
  uint64_t v33 = v67;
  Publisher.combineLatest<A, B, C>(_:_:_:)();
  long long v34 = *(void (**)(char *, uint64_t))(v69 + 8);
  v34(v31, v33);
  v34(v28, v33);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v66 + 8);
  v35(v27, v32);
  v35(v26, v32);
  swift_allocObject();
  swift_unknownObjectUnownedInit();
  lazy protocol witness table accessor for type ResolvedProgressView and conformance ResolvedProgressView(&lazy protocol witness table cache variable for type Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>> and conformance Publishers.CombineLatest4<A, B, C, D>, (void (*)(uint64_t))type metadata accessor for Publishers.CombineLatest4<NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, Int64>, NSObject.KeyValueObservingPublisher<NSProgress, String>, NSObject.KeyValueObservingPublisher<NSProgress, String>>);
  id v36 = v65;
  uint64_t v37 = v70;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v30, v37);

  lazy protocol witness table accessor for type ResolvedProgressView and conformance ResolvedProgressView(&lazy protocol witness table cache variable for type NSProgress.UIStateSubscriber and conformance NSProgress.UIStateSubscriber, (void (*)(uint64_t))type metadata accessor for NSProgress.UIStateSubscriber);
  lazy protocol witness table accessor for type ResolvedProgressView and conformance ResolvedProgressView(&lazy protocol witness table cache variable for type NSProgress.UIStateSubscriber and conformance NSProgress.UIStateSubscriber, (void (*)(uint64_t))type metadata accessor for NSProgress.UIStateSubscriber);
  uint64_t v38 = (uint64_t)v62;
  SubscriptionLifetime.subscribe<A>(subscriber:to:)();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v36, v74);
  outlined destroy of NSProgress.UIStateSubscriber(v38, (uint64_t (*)(void))type metadata accessor for NSProgress.UIStateSubscriber);
  uint64_t v39 = AGGraphGetValue();
  uint64_t v40 = *(void *)(v39 + 16);
  long long v41 = *(_OWORD *)(v39 + 24);
  long long v42 = *(_OWORD *)(v39 + 40);
  long long v43 = *(_OWORD *)(v39 + 56);
  uint64_t v76 = *(void *)(v39 + 8);
  uint64_t v77 = v40;
  long long v78 = v41;
  long long v79 = v42;
  long long v80 = v43;
  type metadata accessor for State<NSProgress.UIState?>(0, &lazy cache variable for type metadata for Binding<NSProgress.UIState?>, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v81);
  uint64_t v44 = v84;
  if (v84)
  {
    uint64_t v45 = v81;
    uint64_t v46 = v83;
    uint64_t v48 = v85;
    uint64_t v47 = v86;
    unsigned __int8 v49 = v82 & 1;
LABEL_6:
    uint64_t v76 = v45;
    LOBYTE(v77) = v49;
    *(void *)&long long v78 = v46;
    *((void *)&v78 + 1) = v44;
    *(void *)&long long v79 = v48;
    *((void *)&v79 + 1) = v47;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    return (id)swift_bridgeObjectRelease();
  }
  id v50 = *(id *)AGGraphGetValue();
  objc_msgSend(v50, sel_fractionCompleted);
  uint64_t v45 = v51;
  unsigned __int8 v49 = objc_msgSend(v50, sel_isIndeterminate);
  id result = objc_msgSend(v50, sel_localizedDescription);
  if (result)
  {
    uint64_t v53 = result;
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v54;

    id result = objc_msgSend(v50, sel_localizedAdditionalDescription);
    if (result)
    {
      uint64_t v55 = result;
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v47 = v56;

      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t FoundationProgressView.Body.BodyAttribute.Value.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v2 = type metadata accessor for ProgressViewValue(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ResolvedProgressView(0);
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>>();
  uint64_t v43 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v1;
  char v17 = *((unsigned char *)v1 + 8);
  unint64_t v18 = v1[3];
  uint64_t v42 = v1[2];
  uint64_t v20 = v1[4];
  unint64_t v19 = v1[5];
  int v21 = v17 & 1;
  if (v21) {
    uint64_t v16 = 0;
  }
  *(void *)uint64_t v4 = v16;
  v4[8] = v21;
  v4[9] = 0;
  swift_storeEnumTagMultiPayload();
  _s7SwiftUI17ProgressViewValueOWObTm_0((uint64_t)v4, (uint64_t)v8, type metadata accessor for ProgressViewValue);
  v8[*(int *)(v6 + 28)] = 0;
  v8[*(int *)(v6 + 32)] = 0;
  uint64_t v22 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0) {
    uint64_t v22 = v20 & 0xFFFFFFFFFFFFLL;
  }
  if (v22)
  {
    uint64_t v45 = v20;
    unint64_t v46 = v19;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    uint64_t v23 = Text.init<A>(_:)();
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    uint64_t v29 = v28 & 1;
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v25 = 0;
    uint64_t v29 = 0;
    uint64_t v27 = 0;
  }
  outlined init with copy of ResolvedProgressView((uint64_t)v8, (uint64_t)v12, type metadata accessor for ResolvedProgressView);
  long long v30 = (uint64_t *)&v12[*(int *)(v10 + 36)];
  *long long v30 = v23;
  v30[1] = v25;
  uint64_t v30[2] = v29;
  v30[3] = v27;
  outlined destroy of NSProgress.UIStateSubscriber((uint64_t)v8, type metadata accessor for ResolvedProgressView);
  uint64_t v31 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000) == 0) {
    uint64_t v31 = v42 & 0xFFFFFFFFFFFFLL;
  }
  if (v31)
  {
    uint64_t v45 = v42;
    unint64_t v46 = v18;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    uint64_t v32 = Text.init<A>(_:)();
    uint64_t v34 = v33;
    uint64_t v36 = v35;
    uint64_t v38 = v37 & 1;
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v34 = 0;
    uint64_t v38 = 0;
    uint64_t v36 = 0;
  }
  outlined init with copy of ResolvedProgressView((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>);
  uint64_t v39 = (uint64_t *)&v15[*(int *)(v43 + 36)];
  *uint64_t v39 = v32;
  v39[1] = v34;
  v39[2] = v38;
  uint64_t v39[3] = v36;
  outlined destroy of NSProgress.UIStateSubscriber((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>);
  return _s7SwiftUI17ProgressViewValueOWObTm_0((uint64_t)v15, v44, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FoundationProgressView.Body(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(int *, uint64_t *))
{
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  int v8 = *((_DWORD *)a2 + 20);
  int v19 = *a1;
  uint64_t v11 = v5;
  int v12 = v6;
  uint64_t v13 = v7;
  long long v9 = *(_OWORD *)(a2 + 5);
  long long v14 = *(_OWORD *)(a2 + 3);
  long long v15 = v9;
  long long v16 = *(_OWORD *)(a2 + 7);
  uint64_t v17 = a2[9];
  int v18 = v8;
  return a5(&v19, &v11);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance FoundationProgressView.Body.BodyAttribute.Value()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance FoundationProgressView.Body.BodyAttribute.Value@<X0>(uint64_t a1@<X8>)
{
  return FoundationProgressView.Body.BodyAttribute.Value.body.getter(a1);
}

void key path getter for NSProgress.localizedDescription : NSProgress(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4 = [*a1 *a2];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  *a3 = v6;
  a3[1] = v8;
}

void key path setter for NSProgress.localizedDescription : NSProgress(void *a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v6 = *a2;
  if (a1[1]) {
    uint64_t v7 = MEMORY[0x18C115780](*a1);
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = (id)v7;
  [v6 *a5];
}

void closure #1 in NSProgress.uiStatePublisher.getter(uint64_t a1@<X8>)
{
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  objc_msgSend(Strong, sel_fractionCompleted);
  uint64_t v4 = v3;
  unsigned __int8 v5 = objc_msgSend(Strong, sel_isIndeterminate);
  id v6 = objc_msgSend(Strong, sel_localizedDescription);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    id v11 = objc_msgSend(Strong, sel_localizedAdditionalDescription);
    if (v11)
    {
      int v12 = v11;
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      *(void *)a1 = v4;
      *(unsigned char *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v10;
      *(void *)(a1 + 32) = v13;
      *(void *)(a1 + 40) = v15;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t NSProgress.UIStateSubscriber.respond(to:)(uint64_t *a1)
{
  uint64_t v3 = *a1;
  unsigned __int8 v5 = (long long *)(a1 + 2);
  uint64_t v4 = a1[2];
  char v6 = *((unsigned char *)a1 + 8);
  uint64_t v23 = a1[3];
  uint64_t v24 = v4;
  uint64_t v8 = (long long *)(a1 + 4);
  uint64_t v7 = a1[4];
  uint64_t v22 = a1[5];
  uint64_t v9 = type metadata accessor for NSProgress.UIStateSubscriber();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9 - 8);
  if (objc_msgSend(self, sel_isMainThread))
  {
    outlined init with copy of ResolvedProgressView((uint64_t)v1, (uint64_t)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for NSProgress.UIStateSubscriber);
    long long v25 = *v5;
    long long v31 = *v8;
    unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v13 = swift_allocObject();
    _s7SwiftUI17ProgressViewValueOWObTm_0((uint64_t)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, (uint64_t (*)(void))type metadata accessor for NSProgress.UIStateSubscriber);
    uint64_t v14 = (_OWORD *)(v13 + ((v11 + v12 + 7) & 0xFFFFFFFFFFFFFFF8));
    long long v15 = *((_OWORD *)a1 + 1);
    *uint64_t v14 = *(_OWORD *)a1;
    v14[1] = v15;
    void v14[2] = *((_OWORD *)a1 + 2);
    outlined retain of String?((uint64_t)&v25);
    outlined retain of String?((uint64_t)&v31);
    static Update.enqueueAction(_:)();
    return swift_release();
  }
  else
  {
    uint64_t v17 = v1[2];
    uint64_t v18 = v1[3];
    uint64_t v19 = v1[4];
    uint64_t v21 = v1[5];
    *(void *)&long long v25 = v3;
    *((void *)&v25 + 1) = v6 & 1;
    uint64_t v26 = v24;
    uint64_t v27 = v23;
    uint64_t v28 = v7;
    uint64_t v29 = v22;
    long long v20 = *v5;
    long long v30 = *v8;
    long long v31 = v20;
    outlined retain of String?((uint64_t)&v31);
    outlined retain of String?((uint64_t)&v30);
    swift_retain();
    swift_retain();
    outlined copy of NSProgress.UIState?(v17, v18, v19, v21);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined release of String?((uint64_t)&v31);
    outlined release of String?((uint64_t)&v30);
    swift_release();
    swift_release();
    return outlined consume of NSProgress.UIState?(v17, v18, v19, v21);
  }
}

uint64_t update #1 () in NSProgress.UIStateSubscriber.respond(to:)(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v8 = *(_OWORD *)(a2 + 32);
  long long v9 = v6;
  outlined retain of String?((uint64_t)&v9);
  outlined retain of String?((uint64_t)&v8);
  swift_retain();
  swift_retain();
  outlined copy of NSProgress.UIState?(v2, v3, v4, v5);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  outlined release of String?((uint64_t)&v9);
  outlined release of String?((uint64_t)&v8);
  swift_release();
  swift_release();
  return outlined consume of NSProgress.UIState?(v2, v3, v4, v5);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance NSProgress.UIStateSubscriber(_OWORD *a1)
{
  long long v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  _OWORD v4[2] = a1[2];
  uint64_t v2 = NSProgress.UIStateSubscriber.respond(to:)((uint64_t *)v4);

  return MEMORY[0x1F40D6900](v2);
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance NSProgress.UIStateSubscriber@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for CombineIdentifier();
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

unint64_t lazy protocol witness table accessor for type FoundationProgressView.Body.BodyAttribute and conformance FoundationProgressView.Body.BodyAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type FoundationProgressView.Body.BodyAttribute and conformance FoundationProgressView.Body.BodyAttribute;
  if (!lazy protocol witness table cache variable for type FoundationProgressView.Body.BodyAttribute and conformance FoundationProgressView.Body.BodyAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FoundationProgressView.Body.BodyAttribute and conformance FoundationProgressView.Body.BodyAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FoundationProgressView.Body.BodyAttribute.Value and conformance FoundationProgressView.Body.BodyAttribute.Value()
{
  unint64_t result = lazy protocol witness table cache variable for type FoundationProgressView.Body.BodyAttribute.Value and conformance FoundationProgressView.Body.BodyAttribute.Value;
  if (!lazy protocol witness table cache variable for type FoundationProgressView.Body.BodyAttribute.Value and conformance FoundationProgressView.Body.BodyAttribute.Value)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FoundationProgressView.Body.BodyAttribute.Value and conformance FoundationProgressView.Body.BodyAttribute.Value);
  }
  return result;
}

uint64_t type metadata accessor for NSProgress.UIStateSubscriber()
{
  uint64_t result = type metadata singleton initialization cache for NSProgress.UIStateSubscriber;
  if (!type metadata singleton initialization cache for NSProgress.UIStateSubscriber) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined copy of NSProgress.UIState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

char *keypath_get_selector_completedUnitCount()
{
  return sel_completedUnitCount;
}

id sub_18812CC88@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_completedUnitCount);
  *a2 = result;
  return result;
}

id sub_18812CCBC(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCompletedUnitCount_, *a1);
}

char *keypath_get_selector_totalUnitCount()
{
  return sel_totalUnitCount;
}

id sub_18812CCDC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_totalUnitCount);
  *a2 = result;
  return result;
}

id sub_18812CD10(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTotalUnitCount_, *a1);
}

char *keypath_get_selector_localizedDescription()
{
  return sel_localizedDescription;
}

void sub_18812CD30(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_18812CD50(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_localizedAdditionalDescription()
{
  return sel_localizedAdditionalDescription;
}

void sub_18812CD7C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_18812CD9C(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_18812CDBC()
{
  swift_unknownObjectUnownedDestroy();

  return swift_deallocObject();
}

void partial apply for closure #1 in NSProgress.uiStatePublisher.getter(uint64_t a1@<X8>)
{
}

void type metadata accessor for State<NSProgress.UIState?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for PlatformItem.SelectionContent.AuxiliaryContent?(255, &lazy cache variable for type metadata for NSProgress.UIState?, (uint64_t)&unk_1ED4697A8, MEMORY[0x1E4FBB718]);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for NSProgress.UIStateSubscriber(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *(void *)(a1 + 8) = a2[1];
    uint64_t v8 = a2[5];
    swift_retain();
    swift_retain();
    if (v8)
    {
      *(void *)(a1 + 16) = a2[2];
      *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
      *(void *)(a1 + 32) = a2[4];
      *(void *)(a1 + 40) = v8;
      uint64_t v9 = a2[7];
      *(void *)(a1 + 48) = a2[6];
      *(void *)(a1 + 56) = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v10 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    }
    uint64_t v11 = *(int *)(a3 + 20);
    uint64_t v12 = a1 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    uint64_t v14 = type metadata accessor for CombineIdentifier();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for NSProgress.UIStateSubscriber(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  if (*(void *)(a1 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for CombineIdentifier();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for NSProgress.UIStateSubscriber(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  swift_retain();
  swift_retain();
  if (v7)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v7;
    uint64_t v8 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v9;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for CombineIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t assignWithCopy for NSProgress.UIStateSubscriber(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v6 = (_OWORD *)(a1 + 16);
  uint64_t v7 = (_OWORD *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v8)
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of NSProgress.UIState(a1 + 16);
      long long v10 = *(_OWORD *)(a2 + 32);
      long long v9 = *(_OWORD *)(a2 + 48);
      *uint64_t v6 = *v7;
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)(a1 + 48) = v9;
    }
  }
  else if (v8)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *v7;
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
    *uint64_t v6 = v11;
  }
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for CombineIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

_OWORD *initializeWithTake for NSProgress.UIStateSubscriber(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  long long v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CombineIdentifier();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for NSProgress.UIStateSubscriber(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  if (!*(void *)(a1 + 40)) {
    goto LABEL_5;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  if (!v6)
  {
    outlined destroy of NSProgress.UIState(a1 + 16);
LABEL_5:
    long long v8 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    goto LABEL_6;
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for CombineIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSProgress.UIStateSubscriber(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18812D464);
}

uint64_t sub_18812D464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for CombineIdentifier();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NSProgress.UIStateSubscriber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18812D528);
}

uint64_t sub_18812D528(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for CombineIdentifier();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for NSProgress.UIStateSubscriber()
{
  uint64_t result = type metadata accessor for CombineIdentifier();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *type metadata accessor for FoundationProgressView.Body.BodyAttribute()
{
  return &unk_1ED439700;
}

uint64_t destroy for NSProgress.UIState()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NSProgress.UIState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NSProgress.UIState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NSProgress.UIState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for FoundationProgressView.Body.BodyAttribute.Value()
{
  return &unk_1ED439680;
}

uint64_t destroy for FoundationProgressView.Body(uint64_t a1)
{
  swift_release();
  swift_release();
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for FoundationProgressView.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 48);
  id v7 = v4;
  swift_retain();
  swift_retain();
  if (v6)
  {
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v6;
    uint64_t v8 = *(void *)(a2 + 56);
    uint64_t v9 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v10;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }
  return a1;
}

uint64_t assignWithCopy for FoundationProgressView.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  id v7 = (_OWORD *)(a1 + 24);
  uint64_t v8 = (_OWORD *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v9)
    {
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of NSProgress.UIState(a1 + 24);
      long long v11 = *(_OWORD *)(a2 + 40);
      long long v10 = *(_OWORD *)(a2 + 56);
      *id v7 = *v8;
      *(_OWORD *)(a1 + 40) = v11;
      *(_OWORD *)(a1 + 56) = v10;
    }
  }
  else if (v9)
  {
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v12 = *v8;
    long long v13 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v13;
    *id v7 = v12;
  }
  return a1;
}

uint64_t assignWithTake for FoundationProgressView.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  if (!*(void *)(a1 + 48)) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 48);
  if (!v5)
  {
    outlined destroy of NSProgress.UIState(a1 + 24);
LABEL_5:
    long long v7 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v7;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    return a1;
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FoundationProgressView.Body()
{
  return &type metadata for FoundationProgressView.Body;
}

uint64_t base witness table accessor for CustomCombineIdentifierConvertible in NSProgress.UIStateSubscriber()
{
  return lazy protocol witness table accessor for type ResolvedProgressView and conformance ResolvedProgressView(&lazy protocol witness table cache variable for type NSProgress.UIStateSubscriber and conformance NSProgress.UIStateSubscriber, (void (*)(uint64_t))type metadata accessor for NSProgress.UIStateSubscriber);
}

uint64_t associated type witness table accessor for View.Body : View in FoundationProgressView.Body.BodyAttribute.Value()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>)
  {
    type metadata accessor for ResolvedProgressView(255);
    type metadata accessor for OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>(255, &lazy cache variable for type metadata for OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>, (void (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>>)
  {
    type metadata accessor for ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>();
    type metadata accessor for OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>(255, &lazy cache variable for type metadata for OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>, (void (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>>);
    }
  }
}

void type metadata accessor for OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for OptionalSourceWriter();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined destroy of NSProgress.UIStateSubscriber(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>();
    lazy protocol witness table accessor for type ResolvedProgressView and conformance ResolvedProgressView(&lazy protocol witness table cache variable for type ResolvedProgressView and conformance ResolvedProgressView, (void (*)(uint64_t))type metadata accessor for ResolvedProgressView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined init with copy of ResolvedProgressView(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_18812DE90()
{
  uint64_t v1 = type metadata accessor for NSProgress.UIStateSubscriber();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  swift_release();
  swift_release();
  if (*(void *)(v0 + v2 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v3 = v0 + v2 + *(int *)(v1 + 20);
  uint64_t v4 = type metadata accessor for CombineIdentifier();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t _s7SwiftUI17ProgressViewValueOWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for update #1 () in NSProgress.UIStateSubscriber.respond(to:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for NSProgress.UIStateSubscriber() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);

  return update #1 () in NSProgress.UIStateSubscriber.respond(to:)((void *)(v0 + v2), v3);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>>();
    lazy protocol witness table accessor for type ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedProgressView, OptionalSourceWriter<ProgressViewStyleConfiguration.CurrentValueLabel, Text>>, OptionalSourceWriter<ProgressViewStyleConfiguration.Label, Text>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for OptionalSourceWriter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *initializeWithCopy for OptionalSourceWriter(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for OptionalSourceWriter(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    long long v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

void *initializeWithTake for OptionalSourceWriter(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for OptionalSourceWriter(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    long long v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for OptionalSourceWriter(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for OptionalSourceWriter(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x18812EB18);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          uint64_t v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for StaticSourceWriter(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for StaticSourceWriter(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18812EEB4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in StaticSourceWriter<A, B>()
{
  return &protocol witness table for StaticSourceWriter<A, B>;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ListStyleContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t static ViewAlias._makeView(view:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  int v10 = *((_DWORD *)a2 + 20);
  uint64_t v28 = *a2;
  int v29 = v6;
  uint64_t v30 = v7;
  long long v31 = *(_OWORD *)(a2 + 3);
  uint64_t v32 = v8;
  uint64_t v33 = v9;
  long long v34 = *(_OWORD *)(a2 + 7);
  uint64_t v35 = a2[9];
  int v36 = v10;
  type metadata accessor for SourceInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  _GraphInputs.popLast<A, B>(_:)();
  uint64_t v11 = v18;
  if (v18)
  {
    uint64_t v17 = a4;
    uint64_t v12 = v21;
    char v13 = BYTE4(v21);
    uint64_t v14 = v19;
    uint64_t v16 = v20;
    _GraphInputs.resetCurrentStyleableView()();
    uint64_t v18 = v28;
    LODWORD(v19) = v29;
    uint64_t v20 = v30;
    long long v21 = v31;
    uint64_t v22 = v32;
    uint64_t v23 = v33;
    long long v24 = v34;
    uint64_t v25 = v35;
    int v26 = v36;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8))(v27, v11, v14, v16, v12 | ((unint64_t)(v13 & 1) << 32), &v18, a3, v17, v11, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ListStyleContent>, (void (*)(void))lazy protocol witness table accessor for type ListStyleContent and conformance ListStyleContent, (uint64_t)&type metadata for ListStyleContent, &lazy protocol witness table cache variable for type SourceInput<ListStyleContent> and conformance SourceInput<A>);
}

uint64_t specialized static ViewAlias._viewListCount(inputs:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return specialized static ViewAlias._viewListCount(inputs:)(a1, a2, a3, a4, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MinimumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel, (uint64_t)&type metadata for SliderStyleConfiguration.MinimumValueLabel, &lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.MinimumValueLabel> and conformance SourceInput<A>);
}

{
  return specialized static ViewAlias._viewListCount(inputs:)(a1, a2, a3, a4, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MaximumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel, (uint64_t)&type metadata for SliderStyleConfiguration.MaximumValueLabel, &lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.MaximumValueLabel> and conformance SourceInput<A>);
}

uint64_t static ViewAlias._viewListCount(inputs:)(long long *a1)
{
  int v1 = *((_DWORD *)a1 + 4);
  uint64_t v2 = *((void *)a1 + 3);
  long long v13 = *a1;
  int v14 = v1;
  uint64_t v15 = v2;
  type metadata accessor for SourceInput();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  _ViewListCountInputs.popLast<A, B>(_:)();
  uint64_t v3 = v10;
  if ((void)v10)
  {
    uint64_t v4 = v12;
    char v5 = BYTE4(v12);
    uint64_t v7 = *((void *)&v10 + 1);
    uint64_t v6 = v11;
    _ViewListCountInputs.resetCurrentStyleableView()();
    long long v10 = v13;
    LODWORD(v11) = v14;
    uint64_t v12 = v15;
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, long long *, uint64_t, uint64_t))(v7 + 24))(v3, v7, v6, v4 | ((unint64_t)(v5 & 1) << 32), &v10, v3, v7);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  return v8;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance UIKitButtonConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance UIKitButtonConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance UIKitButtonConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<UIKitButtonConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<UIKitButtonConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance EnvironmentValues.TextInputSuggestions(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance EnvironmentValues.TextInputSuggestions(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EnvironmentValues.TextInputSuggestions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.TextInputSuggestions>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions, (uint64_t)&type metadata for EnvironmentValues.TextInputSuggestions, &lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.TextInputSuggestions> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PreviewModifierContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PreviewModifierContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PreviewModifierContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<PreviewModifierContent>, (void (*)(void))lazy protocol witness table accessor for type PreviewModifierContent and conformance PreviewModifierContent, (uint64_t)&type metadata for PreviewModifierContent, &lazy protocol witness table cache variable for type SourceInput<PreviewModifierContent> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ListRowHeightTemplateContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ListRowHeightTemplateContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ListRowHeightTemplateContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ListRowHeightTemplateContent>, (void (*)(void))lazy protocol witness table accessor for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent, (uint64_t)&type metadata for ListRowHeightTemplateContent, &lazy protocol witness table cache variable for type SourceInput<ListRowHeightTemplateContent> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ListFirstRowHeightTemplateContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ListFirstRowHeightTemplateContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ListFirstRowHeightTemplateContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ListFirstRowHeightTemplateContent>, (void (*)(void))lazy protocol witness table accessor for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent, (uint64_t)&type metadata for ListFirstRowHeightTemplateContent, &lazy protocol witness table cache variable for type SourceInput<ListFirstRowHeightTemplateContent> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ColorPickerStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ColorPickerStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ColorPickerStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ColorPickerStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label, (uint64_t)&type metadata for ColorPickerStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ColorPickerStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance MenuStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MenuStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MenuStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<MenuStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label, (uint64_t)&type metadata for MenuStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<MenuStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance MenuStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MenuStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MenuStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<MenuStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content, (uint64_t)&type metadata for MenuStyleConfiguration.Content, (unint64_t *)&lazy protocol witness table cache variable for type SourceInput<MenuStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ToggleStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ToggleStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ToggleStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance OutlineSubgroupChildren(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance OutlineSubgroupChildren(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance OutlineSubgroupChildren(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<OutlineSubgroupChildren>, (void (*)(void))lazy protocol witness table accessor for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren, (uint64_t)&type metadata for OutlineSubgroupChildren, &lazy protocol witness table cache variable for type SourceInput<OutlineSubgroupChildren> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance TabViewStyleConfiguration<A>.Content(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return static ViewAlias._makeView(view:inputs:)(WitnessTable, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TabViewStyleConfiguration<A>.Content(long long *a1)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance TabViewStyleConfiguration<A>.Content(a1);
}

{
  swift_getWitnessTable();
  return static ViewAlias._viewListCount(inputs:)(a1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance DisclosureGroupStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance DisclosureGroupStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DisclosureGroupStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<DisclosureGroupStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<DisclosureGroupStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance DisclosureGroupStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance DisclosureGroupStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DisclosureGroupStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<DisclosureGroupStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<DisclosureGroupStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedRadioGroupPicker.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedRadioGroupPicker.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedRadioGroupPicker.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ResolvedRadioGroupPicker.Label>, (void (*)(void))lazy protocol witness table accessor for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label, (uint64_t)&type metadata for ResolvedRadioGroupPicker.Label, &lazy protocol witness table cache variable for type SourceInput<ResolvedRadioGroupPicker.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance NavigationSplitViewStyleConfiguration.Sidebar(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance NavigationSplitViewStyleConfiguration.Sidebar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Sidebar>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar, &lazy protocol witness table cache variable for type SourceInput<NavigationSplitViewStyleConfiguration.Sidebar> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance NavigationSplitViewStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance NavigationSplitViewStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<NavigationSplitViewStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance NavigationSplitViewStyleConfiguration.Detail(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance NavigationSplitViewStyleConfiguration.Detail(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Detail>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail, &lazy protocol witness table cache variable for type SourceInput<NavigationSplitViewStyleConfiguration.Detail> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PrimitiveButtonStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PrimitiveButtonStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<PrimitiveButtonStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<PrimitiveButtonStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _NavigationViewStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _NavigationViewStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _NavigationViewStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<_NavigationViewStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content, (uint64_t)&type metadata for _NavigationViewStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<_NavigationViewStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance MultiDatePickerStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MultiDatePickerStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MultiDatePickerStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<MultiDatePickerStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label, (uint64_t)&type metadata for MultiDatePickerStyleConfiguration.Label, (unint64_t *)&lazy protocol witness table cache variable for type SourceInput<MultiDatePickerStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ButtonStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ButtonStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ButtonStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label, (uint64_t)&type metadata for ButtonStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ButtonStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _TextFieldStyleLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _TextFieldStyleLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _TextFieldStyleLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<_TextFieldStyleLabel>, (void (*)(void))lazy protocol witness table accessor for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel, (uint64_t)&type metadata for _TextFieldStyleLabel, &lazy protocol witness table cache variable for type SourceInput<_TextFieldStyleLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ProgressViewStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ProgressViewStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ProgressViewStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ProgressViewStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label, (uint64_t)&type metadata for ProgressViewStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ProgressViewStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ProgressViewStyleConfiguration.CurrentValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ProgressViewStyleConfiguration.CurrentValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ProgressViewStyleConfiguration.CurrentValueLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ProgressViewStyleConfiguration.CurrentValueLabel>, (void (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel, (uint64_t)&type metadata for ProgressViewStyleConfiguration.CurrentValueLabel, &lazy protocol witness table cache variable for type SourceInput<ProgressViewStyleConfiguration.CurrentValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SliderStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SliderStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SliderStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label, (uint64_t)&type metadata for SliderStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SliderStyleConfiguration.MinimumValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SliderStyleConfiguration.MinimumValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SliderStyleConfiguration.MinimumValueLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MinimumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel, (uint64_t)&type metadata for SliderStyleConfiguration.MinimumValueLabel, &lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.MinimumValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SliderStyleConfiguration.MaximumValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SliderStyleConfiguration.MaximumValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SliderStyleConfiguration.MaximumValueLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MaximumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel, (uint64_t)&type metadata for SliderStyleConfiguration.MaximumValueLabel, &lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.MaximumValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LabelGroupStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LabelGroupStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<LabelGroupStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content, (uint64_t)&type metadata for LabelGroupStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<LabelGroupStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PickerStyleConfiguration<A>.Label(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return static ViewAlias._makeView(view:inputs:)(WitnessTable, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PickerStyleConfiguration<A>.Label(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return static ViewAlias._makeViewList(view:inputs:)(WitnessTable, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PickerStyleConfiguration<A>.Label(long long *a1)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance TabViewStyleConfiguration<A>.Content(a1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PickerStyleConfiguration<A>.Content(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return static ViewAlias._makeView(view:inputs:)(WitnessTable, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PickerStyleConfiguration<A>.Content(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return static ViewAlias._makeViewList(view:inputs:)(WitnessTable, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PickerStyleConfiguration<A>.Content(long long *a1)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance TabViewStyleConfiguration<A>.Content(a1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PickerStyleConfiguration<A>.CurrentValueLabel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return static ViewAlias._makeView(view:inputs:)(WitnessTable, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PickerStyleConfiguration<A>.CurrentValueLabel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return static ViewAlias._makeViewList(view:inputs:)(WitnessTable, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PickerStyleConfiguration<A>.CurrentValueLabel(long long *a1)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance TabViewStyleConfiguration<A>.Content(a1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SectionStyleConfiguration.Header(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SectionStyleConfiguration.Header(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Header>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header, (uint64_t)&type metadata for SectionStyleConfiguration.Header, &lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.Header> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SectionStyleConfiguration.Footer(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SectionStyleConfiguration.Footer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Footer>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer, (uint64_t)&type metadata for SectionStyleConfiguration.Footer, &lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.Footer> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SectionStyleConfiguration.Actions(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SectionStyleConfiguration.Actions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Actions>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions, (uint64_t)&type metadata for SectionStyleConfiguration.Actions, &lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.Actions> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SectionStyleConfiguration.RawContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance EnvironmentValues.SearchField(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EnvironmentValues.SearchField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchField>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField, (uint64_t)&type metadata for EnvironmentValues.SearchField, (unint64_t *)&lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchField> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance EnvironmentValues.SearchSuggestions(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance EnvironmentValues.SearchSuggestions(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EnvironmentValues.SearchSuggestions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchSuggestions>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions, (uint64_t)&type metadata for EnvironmentValues.SearchSuggestions, &lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchSuggestions> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance EnvironmentValues.SearchCustomScopeBar(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance EnvironmentValues.SearchCustomScopeBar(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EnvironmentValues.SearchCustomScopeBar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchCustomScopeBar>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar, (uint64_t)&type metadata for EnvironmentValues.SearchCustomScopeBar, &lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchCustomScopeBar> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance EnvironmentValues.SearchCustomAccessory(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance EnvironmentValues.SearchCustomAccessory(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EnvironmentValues.SearchCustomAccessory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchCustomAccessory>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory, (uint64_t)&type metadata for EnvironmentValues.SearchCustomAccessory, &lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchCustomAccessory> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance AccessoryBarContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance AccessoryBarContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance AccessoryBarContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<AccessoryBarContent>, (void (*)(void))lazy protocol witness table accessor for type AccessoryBarContent and conformance AccessoryBarContent, (uint64_t)&type metadata for AccessoryBarContent, &lazy protocol witness table cache variable for type SourceInput<AccessoryBarContent> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FormStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance FormStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance FormStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<FormStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content, (uint64_t)&type metadata for FormStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<FormStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FormStyleConfiguration.Footer(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance FormStyleConfiguration.Footer(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance FormStyleConfiguration.Footer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<FormStyleConfiguration.Footer>, (void (*)(void))lazy protocol witness table accessor for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer, (uint64_t)&type metadata for FormStyleConfiguration.Footer, &lazy protocol witness table cache variable for type SourceInput<FormStyleConfiguration.Footer> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _NavigationStackStyleConfiguration.Root(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _NavigationStackStyleConfiguration.Root(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<_NavigationStackStyleConfiguration.Root>, (void (*)(void))lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root, (uint64_t)&type metadata for _NavigationStackStyleConfiguration.Root, &lazy protocol witness table cache variable for type SourceInput<_NavigationStackStyleConfiguration.Root> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance StepperStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance StepperStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance StepperStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<StepperStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label, (uint64_t)&type metadata for StepperStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<StepperStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance TokenFieldConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance TokenFieldConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TokenFieldConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<TokenFieldConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label, (uint64_t)&type metadata for TokenFieldConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<TokenFieldConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance BadgeViewStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance BadgeViewStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance BadgeViewStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<BadgeViewStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content, (uint64_t)&type metadata for BadgeViewStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<BadgeViewStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GaugeStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance GaugeStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label, (uint64_t)&type metadata for GaugeStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GaugeStyleConfiguration.CurrentValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance GaugeStyleConfiguration.CurrentValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance GaugeStyleConfiguration.CurrentValueLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.CurrentValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel, (uint64_t)&type metadata for GaugeStyleConfiguration.CurrentValueLabel, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.CurrentValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GaugeStyleConfiguration.MinimumValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance GaugeStyleConfiguration.MinimumValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance GaugeStyleConfiguration.MinimumValueLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MinimumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel, (uint64_t)&type metadata for GaugeStyleConfiguration.MinimumValueLabel, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.MinimumValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GaugeStyleConfiguration.MaximumValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance GaugeStyleConfiguration.MaximumValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance GaugeStyleConfiguration.MaximumValueLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MaximumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel, (uint64_t)&type metadata for GaugeStyleConfiguration.MaximumValueLabel, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.MaximumValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GaugeStyleConfiguration.MarkedValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance GaugeStyleConfiguration.MarkedValueLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance GaugeStyleConfiguration.MarkedValueLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MarkedValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel, (uint64_t)&type metadata for GaugeStyleConfiguration.MarkedValueLabel, &lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.MarkedValueLabel> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _OutlineGenerator_Configuration<A, B, C>.Subtree(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return static ViewAlias._makeView(view:inputs:)(WitnessTable, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _OutlineGenerator_Configuration<A, B, C>.Subtree(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return static ViewAlias._makeViewList(view:inputs:)(WitnessTable, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _OutlineGenerator_Configuration<A, B, C>.Subtree(long long *a1)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance TabViewStyleConfiguration<A>.Content(a1);
}

_UNKNOWN **base witness table accessor for ViewModifier in OptionalSourceWriter<A, B>()
{
  return &protocol witness table for OptionalSourceWriter<A, B>;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance OptionalSourceWriter<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for OptionalSourceWriter<A, B>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance OptionalSourceWriter<A, B>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t OptionalViewAlias.wrappedValue.getter@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (a1)
  {
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a3 + 16))(a4, a2, a3);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }
  char v7 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);

  return v7(a4, v6, 1, a2);
}

uint64_t protocol witness for static GraphInput.tryToReuse(_:by:indirectMap:testOnly:) in conformance SourceInput<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = lazy protocol witness table accessor for type Stack<AnySource> and conformance <A> Stack<A>();

  return MEMORY[0x1F40FD0F0](a1, a2, a3, a4, a5, a6, v12);
}

uint64_t AnySource.tryToReuse(by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  if (a7 != a1) {
    goto LABEL_10;
  }
  unsigned int Attribute = AGWeakAttributeGetAttribute();
  int v9 = *MEMORY[0x1E4F4E7A0];
  if (Attribute == *MEMORY[0x1E4F4E7A0]) {
    goto LABEL_10;
  }
  unsigned int v10 = Attribute;
  if (!*(void *)(IndirectAttributeMap.map.getter() + 16)
    || (specialized __RawDictionaryStorage.find<A>(_:)(v10), (v11 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  if (AGWeakAttributeGetAttribute() == v9)
  {
LABEL_10:
    static ReuseTrace.traceNeverMadeReusableFailure(_:)();
    return 0;
  }
  if ((a6 & 1) == 0) {
    AGGraphSetIndirectAttribute();
  }
  return 1;
}

uint64_t protocol witness for GraphReusable.tryToReuse(by:indirectMap:testOnly:) in conformance AnySource(uint64_t a1, uint64_t a2, char a3)
{
  return AnySource.tryToReuse(by:indirectMap:testOnly:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned int *)(a1 + 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 28) << 32), a2, a3, *v3) & 1;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ControlGroupStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ControlGroupStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ControlGroupStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ControlGroupStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<ControlGroupStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ControlGroupStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ControlGroupStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ControlGroupStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<ControlGroupStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ControlGroupStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GroupBoxStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance GroupBoxStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance GroupBoxStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<GroupBoxStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label, (uint64_t)&type metadata for GroupBoxStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<GroupBoxStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GroupBoxStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance GroupBoxStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance GroupBoxStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<GroupBoxStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content, (uint64_t)&type metadata for GroupBoxStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<GroupBoxStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _MenuButtonStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _MenuButtonStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _MenuButtonStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<_MenuButtonStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label, (uint64_t)&type metadata for _MenuButtonStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<_MenuButtonStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _MenuButtonStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _MenuButtonStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _MenuButtonStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<_MenuButtonStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content, (uint64_t)&type metadata for _MenuButtonStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<_MenuButtonStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance HelpStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance HelpStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<HelpStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content, (uint64_t)&type metadata for HelpStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<HelpStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LabeledContentStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<LabeledContentStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<LabeledContentStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LabeledContentStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LabeledContentStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<LabeledContentStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Content, &lazy protocol witness table cache variable for type SourceInput<LabeledContentStyleConfiguration.Content> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SearchFieldConfiguration.Control(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SearchFieldConfiguration.Control(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SearchFieldConfiguration.Control(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Control>, (void (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control, (uint64_t)&type metadata for SearchFieldConfiguration.Control, &lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Control> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SearchFieldConfiguration.Suggestions(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SearchFieldConfiguration.Suggestions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Suggestions>, (void (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions, (uint64_t)&type metadata for SearchFieldConfiguration.Suggestions, &lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Suggestions> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SearchFieldConfiguration.Scopes(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SearchFieldConfiguration.Scopes(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SearchFieldConfiguration.Scopes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Scopes>, (void (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes, (uint64_t)&type metadata for SearchFieldConfiguration.Scopes, (unint64_t *)&lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Scopes> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LabelStyleConfiguration.Title(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<LabelStyleConfiguration.Title>, (void (*)(void))lazy protocol witness table accessor for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title, (uint64_t)&type metadata for LabelStyleConfiguration.Title, &lazy protocol witness table cache variable for type SourceInput<LabelStyleConfiguration.Title> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LabelStyleConfiguration.Icon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<LabelStyleConfiguration.Icon>, (void (*)(void))lazy protocol witness table accessor for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, &lazy protocol witness table cache variable for type SourceInput<LabelStyleConfiguration.Icon> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance DatePickerStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance DatePickerStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DatePickerStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<DatePickerStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<DatePickerStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _DatePickerStyleLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _DatePickerStyleLabel(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  _OWORD v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _DatePickerStyleLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ListStyleContent(a1, a2, a3, &lazy cache variable for type metadata for SourceInput<_DatePickerStyleLabel>, (void (*)(void))lazy protocol witness table accessor for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel, (uint64_t)&type metadata for _DatePickerStyleLabel, &lazy protocol witness table cache variable for type SourceInput<_DatePickerStyleLabel> and conformance SourceInput<A>);
}

unint64_t lazy protocol witness table accessor for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel()
{
  unint64_t result = lazy protocol witness table cache variable for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel;
  if (!lazy protocol witness table cache variable for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel;
  if (!lazy protocol witness table cache variable for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for OptionalViewAlias(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18814160CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in OptionalViewAlias<A>.OptionalSourceBox()
{
  return &protocol witness table for OptionalViewAlias<A>;
}

uint64_t base witness table accessor for GraphInput in SourceInput<A>()
{
  return swift_getWitnessTable();
}

void *initializeBufferWithCopyOfBuffer for FileImportOperation(void *a1, void *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    unsigned int v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    int v9 = (char *)a1 + v8;
    unsigned int v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    long long v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      _s10Foundation3URLVSgMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[6];
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (char *)a2 + v16;
    if (*(void *)((char *)a2 + v16 + 24))
    {
      uint64_t v19 = *(void *)v18;
      uint64_t v20 = *((void *)v18 + 1);
      char v21 = v18[16];
      outlined copy of Text.Storage(*(void *)v18, v20, v21);
      *(void *)uint64_t v17 = v19;
      *((void *)v17 + 1) = v20;
      unsigned char v17[16] = v21;
      *((void *)v17 + 3) = *((void *)v18 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v22 = *((_OWORD *)v18 + 1);
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v22;
    }
    uint64_t v23 = a3[7];
    long long v24 = (char *)v4 + v23;
    uint64_t v25 = (char *)a2 + v23;
    if (*(void *)((char *)a2 + v23 + 24))
    {
      uint64_t v26 = *(void *)v25;
      uint64_t v27 = *((void *)v25 + 1);
      char v28 = v25[16];
      outlined copy of Text.Storage(*(void *)v25, v27, v28);
      *(void *)long long v24 = v26;
      *((void *)v24 + 1) = v27;
      v24[16] = v28;
      *((void *)v24 + 3) = *((void *)v25 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v29 = *((_OWORD *)v25 + 1);
      *(_OWORD *)long long v24 = *(_OWORD *)v25;
      *((_OWORD *)v24 + 1) = v29;
    }
    uint64_t v30 = a3[8];
    long long v31 = (char *)v4 + v30;
    uint64_t v32 = (char *)a2 + v30;
    if (*(void *)((char *)a2 + v30 + 24))
    {
      uint64_t v33 = *(void *)v32;
      uint64_t v34 = *((void *)v32 + 1);
      char v35 = v32[16];
      outlined copy of Text.Storage(*(void *)v32, v34, v35);
      *(void *)long long v31 = v33;
      *((void *)v31 + 1) = v34;
      v31[16] = v35;
      *((void *)v31 + 3) = *((void *)v32 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v36 = *((_OWORD *)v32 + 1);
      *(_OWORD *)long long v31 = *(_OWORD *)v32;
      *((_OWORD *)v31 + 1) = v36;
    }
    uint64_t v37 = a3[10];
    *(void *)((char *)v4 + a3[9]) = *(void *)((char *)a2 + a3[9]);
    *((unsigned char *)v4 + v37) = *((unsigned char *)a2 + v37);
    uint64_t v38 = a3[11];
    uint64_t v39 = (char *)v4 + v38;
    uint64_t v40 = (char *)a2 + v38;
    type metadata accessor for Predicate<Pack{URL}>();
    uint64_t v42 = v41;
    uint64_t v43 = *(void *)(v41 - 8);
    uint64_t v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
    swift_bridgeObjectRetain();
    if (v44(v40, 1, v42))
    {
      _s10Foundation3URLVSgMaTm_8(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
      memcpy(v39, v40, *(void *)(*(void *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v39, v40, v42);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v39, 0, 1, v42);
    }
    uint64_t v46 = a3[13];
    *((unsigned char *)v4 + a3[12]) = *((unsigned char *)a2 + a3[12]);
    uint64_t v47 = (char *)v4 + v46;
    uint64_t v48 = (char *)a2 + v46;
    *(void *)uint64_t v47 = *(void *)v48;
    v47[8] = v48[8];
    uint64_t v49 = a3[14];
    uint64_t v50 = a3[15];
    uint64_t v51 = (void *)((char *)v4 + v49);
    uint64_t v52 = (void *)((char *)a2 + v49);
    uint64_t v53 = v52[1];
    *uint64_t v51 = *v52;
    v51[1] = v53;
    uint64_t v54 = (void *)((char *)v4 + v50);
    uint64_t v55 = (void *)((char *)a2 + v50);
    uint64_t v56 = v55[1];
    *uint64_t v54 = *v55;
    v54[1] = v56;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for FileImportOperation(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + a2[6];
  if (*(void *)(v7 + 24))
  {
    outlined consume of Text.Storage(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = a1 + a2[7];
  if (*(void *)(v8 + 24))
  {
    outlined consume of Text.Storage(*(void *)v8, *(void *)(v8 + 8), *(unsigned char *)(v8 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = a1 + a2[8];
  if (*(void *)(v9 + 24))
  {
    outlined consume of Text.Storage(*(void *)v9, *(void *)(v9 + 8), *(unsigned char *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + a2[11];
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v10, v12);
  }
  swift_release();

  return swift_release();
}

void *initializeWithCopy for FileImportOperation(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    _s10Foundation3URLVSgMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  if (*(void *)((char *)a2 + v14 + 24))
  {
    uint64_t v17 = *(void *)v16;
    uint64_t v18 = *((void *)v16 + 1);
    char v19 = v16[16];
    outlined copy of Text.Storage(*(void *)v16, v18, v19);
    *(void *)uint64_t v15 = v17;
    *((void *)v15 + 1) = v18;
    v15[16] = v19;
    *((void *)v15 + 3) = *((void *)v16 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v20 = *((_OWORD *)v16 + 1);
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v20;
  }
  uint64_t v21 = a3[7];
  long long v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  if (*(void *)((char *)a2 + v21 + 24))
  {
    uint64_t v24 = *(void *)v23;
    uint64_t v25 = *((void *)v23 + 1);
    char v26 = v23[16];
    outlined copy of Text.Storage(*(void *)v23, v25, v26);
    *(void *)long long v22 = v24;
    *((void *)v22 + 1) = v25;
    unsigned char v22[16] = v26;
    *((void *)v22 + 3) = *((void *)v23 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v27 = *((_OWORD *)v23 + 1);
    *(_OWORD *)long long v22 = *(_OWORD *)v23;
    *((_OWORD *)v22 + 1) = v27;
  }
  uint64_t v28 = a3[8];
  long long v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  if (*(void *)((char *)a2 + v28 + 24))
  {
    uint64_t v31 = *(void *)v30;
    uint64_t v32 = *((void *)v30 + 1);
    char v33 = v30[16];
    outlined copy of Text.Storage(*(void *)v30, v32, v33);
    *(void *)long long v29 = v31;
    *((void *)v29 + 1) = v32;
    v29[16] = v33;
    *((void *)v29 + 3) = *((void *)v30 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v34 = *((_OWORD *)v30 + 1);
    *(_OWORD *)long long v29 = *(_OWORD *)v30;
    *((_OWORD *)v29 + 1) = v34;
  }
  uint64_t v35 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *((unsigned char *)a1 + v35) = *((unsigned char *)a2 + v35);
  uint64_t v36 = a3[11];
  uint64_t v37 = (char *)a1 + v36;
  uint64_t v38 = (char *)a2 + v36;
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v40 = v39;
  uint64_t v41 = *(void *)(v39 - 8);
  uint64_t v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
  swift_bridgeObjectRetain();
  if (v42(v38, 1, v40))
  {
    _s10Foundation3URLVSgMaTm_8(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    memcpy(v37, v38, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v37, v38, v40);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v37, 0, 1, v40);
  }
  uint64_t v44 = a3[13];
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  uint64_t v45 = (char *)a1 + v44;
  uint64_t v46 = (char *)a2 + v44;
  *(void *)uint64_t v45 = *(void *)v46;
  v45[8] = v46[8];
  uint64_t v47 = a3[14];
  uint64_t v48 = a3[15];
  uint64_t v49 = (void *)((char *)a1 + v47);
  uint64_t v50 = (void *)((char *)a2 + v47);
  uint64_t v51 = v50[1];
  *uint64_t v49 = *v50;
  v49[1] = v51;
  uint64_t v52 = (void *)((char *)a1 + v48);
  uint64_t v53 = (void *)((char *)a2 + v48);
  uint64_t v54 = v53[1];
  *uint64_t v52 = *v53;
  v52[1] = v54;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for FileImportOperation(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    _s10Foundation3URLVSgMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (uint64_t)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)((char *)a1 + v15 + 24);
  uint64_t v19 = *(void *)((char *)a2 + v15 + 24);
  if (v18)
  {
    if (v19)
    {
      uint64_t v20 = *(void *)v17;
      uint64_t v21 = *((void *)v17 + 1);
      char v22 = v17[16];
      outlined copy of Text.Storage(*(void *)v17, v21, v22);
      uint64_t v23 = *(void *)v16;
      uint64_t v24 = *(void *)(v16 + 8);
      char v25 = *(unsigned char *)(v16 + 16);
      *(void *)uint64_t v16 = v20;
      *(void *)(v16 + 8) = v21;
      *(unsigned char *)(v16 + 16) = v22;
      outlined consume of Text.Storage(v23, v24, v25);
      *(void *)(v16 + 24) = *((void *)v17 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v16);
      long long v29 = *((_OWORD *)v17 + 1);
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      *(_OWORD *)(v16 + 16) = v29;
    }
  }
  else if (v19)
  {
    uint64_t v26 = *(void *)v17;
    uint64_t v27 = *((void *)v17 + 1);
    char v28 = v17[16];
    outlined copy of Text.Storage(*(void *)v17, v27, v28);
    *(void *)uint64_t v16 = v26;
    *(void *)(v16 + 8) = v27;
    *(unsigned char *)(v16 + 16) = v28;
    *(void *)(v16 + 24) = *((void *)v17 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v30 = *((_OWORD *)v17 + 1);
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v30;
  }
  uint64_t v31 = a3[7];
  uint64_t v32 = (uint64_t)a1 + v31;
  char v33 = (char *)a2 + v31;
  uint64_t v34 = *(void *)((char *)a1 + v31 + 24);
  uint64_t v35 = *(void *)((char *)a2 + v31 + 24);
  if (v34)
  {
    if (v35)
    {
      uint64_t v36 = *(void *)v33;
      uint64_t v37 = *((void *)v33 + 1);
      char v38 = v33[16];
      outlined copy of Text.Storage(*(void *)v33, v37, v38);
      uint64_t v39 = *(void *)v32;
      uint64_t v40 = *(void *)(v32 + 8);
      char v41 = *(unsigned char *)(v32 + 16);
      *(void *)uint64_t v32 = v36;
      *(void *)(v32 + 8) = v37;
      *(unsigned char *)(v32 + 16) = v38;
      outlined consume of Text.Storage(v39, v40, v41);
      *(void *)(v32 + 24) = *((void *)v33 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v32);
      long long v45 = *((_OWORD *)v33 + 1);
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
      *(_OWORD *)(v32 + 16) = v45;
    }
  }
  else if (v35)
  {
    uint64_t v42 = *(void *)v33;
    uint64_t v43 = *((void *)v33 + 1);
    char v44 = v33[16];
    outlined copy of Text.Storage(*(void *)v33, v43, v44);
    *(void *)uint64_t v32 = v42;
    *(void *)(v32 + 8) = v43;
    *(unsigned char *)(v32 + 16) = v44;
    *(void *)(v32 + 24) = *((void *)v33 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v46 = *((_OWORD *)v33 + 1);
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    *(_OWORD *)(v32 + 16) = v46;
  }
  uint64_t v47 = a3[8];
  uint64_t v48 = (uint64_t)a1 + v47;
  uint64_t v49 = (char *)a2 + v47;
  uint64_t v50 = *(void *)((char *)a1 + v47 + 24);
  uint64_t v51 = *(void *)((char *)a2 + v47 + 24);
  if (v50)
  {
    if (v51)
    {
      uint64_t v52 = *(void *)v49;
      uint64_t v53 = *((void *)v49 + 1);
      char v54 = v49[16];
      outlined copy of Text.Storage(*(void *)v49, v53, v54);
      uint64_t v55 = *(void *)v48;
      uint64_t v56 = *(void *)(v48 + 8);
      char v57 = *(unsigned char *)(v48 + 16);
      *(void *)uint64_t v48 = v52;
      *(void *)(v48 + 8) = v53;
      *(unsigned char *)(v48 + 16) = v54;
      outlined consume of Text.Storage(v55, v56, v57);
      *(void *)(v48 + 24) = *((void *)v49 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v48);
      long long v61 = *((_OWORD *)v49 + 1);
      *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
      *(_OWORD *)(v48 + 16) = v61;
    }
  }
  else if (v51)
  {
    uint64_t v58 = *(void *)v49;
    uint64_t v59 = *((void *)v49 + 1);
    char v60 = v49[16];
    outlined copy of Text.Storage(*(void *)v49, v59, v60);
    *(void *)uint64_t v48 = v58;
    *(void *)(v48 + 8) = v59;
    *(unsigned char *)(v48 + 16) = v60;
    *(void *)(v48 + 24) = *((void *)v49 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v62 = *((_OWORD *)v49 + 1);
    *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
    *(_OWORD *)(v48 + 16) = v62;
  }
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  uint64_t v63 = a3[11];
  uint64_t v64 = (char *)a1 + v63;
  uint64_t v65 = (char *)a2 + v63;
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v67 = v66;
  uint64_t v68 = *(void *)(v66 - 8);
  uint64_t v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 48);
  int v70 = v69(v64, 1, v66);
  int v71 = v69(v65, 1, v67);
  if (!v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 24))(v64, v65, v67);
      goto LABEL_35;
    }
    (*(void (**)(char *, uint64_t))(v68 + 8))(v64, v67);
    goto LABEL_34;
  }
  if (v71)
  {
LABEL_34:
    _s10Foundation3URLVSgMaTm_8(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    memcpy(v64, v65, *(void *)(*(void *)(v72 - 8) + 64));
    goto LABEL_35;
  }
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v64, v65, v67);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v64, 0, 1, v67);
LABEL_35:
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  uint64_t v73 = a3[13];
  uint64_t v74 = (char *)a1 + v73;
  uint64_t v75 = (char *)a2 + v73;
  uint64_t v76 = *(void *)v75;
  v74[8] = v75[8];
  *(void *)uint64_t v74 = v76;
  uint64_t v77 = a3[14];
  long long v78 = (void *)((char *)a1 + v77);
  long long v79 = (void *)((char *)a2 + v77);
  uint64_t v80 = v79[1];
  *long long v78 = *v79;
  v78[1] = v80;
  swift_retain();
  swift_release();
  uint64_t v81 = a3[15];
  uint64_t v82 = (void *)((char *)a1 + v81);
  uint64_t v83 = (void *)((char *)a2 + v81);
  uint64_t v84 = v83[1];
  *uint64_t v82 = *v83;
  v82[1] = v84;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for FileImportOperation(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    _s10Foundation3URLVSgMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (_OWORD *)((char *)a1 + v12);
  uint64_t v15 = (_OWORD *)((char *)a2 + v12);
  long long v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (_OWORD *)((char *)a1 + v13);
  uint64_t v18 = (_OWORD *)((char *)a2 + v13);
  long long v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[8];
  uint64_t v21 = a3[9];
  char v22 = (_OWORD *)((char *)a1 + v20);
  uint64_t v23 = (_OWORD *)((char *)a2 + v20);
  long long v24 = v23[1];
  _OWORD *v22 = *v23;
  v22[1] = v24;
  *(void *)((char *)a1 + v21) = *(void *)((char *)a2 + v21);
  uint64_t v25 = a3[11];
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v29 = v28;
  uint64_t v30 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v27, 1, v28))
  {
    _s10Foundation3URLVSgMaTm_8(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v26, v27, v29);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v26, 0, 1, v29);
  }
  uint64_t v32 = a3[13];
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  char v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  *(void *)char v33 = *(void *)v34;
  v33[8] = v34[8];
  uint64_t v35 = a3[15];
  *(_OWORD *)((char *)a1 + a3[14]) = *(_OWORD *)((char *)a2 + a3[14]);
  *(_OWORD *)((char *)a1 + v35) = *(_OWORD *)((char *)a2 + v35);
  return a1;
}

void *assignWithTake for FileImportOperation(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    _s10Foundation3URLVSgMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  uint64_t v17 = (uint64_t)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  if (*(void *)((char *)a1 + v16 + 24))
  {
    if (*((void *)v18 + 3))
    {
      char v19 = v18[16];
      uint64_t v20 = *(void *)v17;
      uint64_t v21 = *(void *)(v17 + 8);
      char v22 = *(unsigned char *)(v17 + 16);
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
      *(unsigned char *)(v17 + 16) = v19;
      outlined consume of Text.Storage(v20, v21, v22);
      *(void *)(v17 + 24) = *((void *)v18 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    outlined destroy of Text(v17);
  }
  long long v23 = *((_OWORD *)v18 + 1);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v23;
LABEL_12:
  uint64_t v24 = a3[7];
  uint64_t v25 = (uint64_t)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  if (*(void *)((char *)a1 + v24 + 24))
  {
    if (*((void *)v26 + 3))
    {
      char v27 = v26[16];
      uint64_t v28 = *(void *)v25;
      uint64_t v29 = *(void *)(v25 + 8);
      char v30 = *(unsigned char *)(v25 + 16);
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      *(unsigned char *)(v25 + 16) = v27;
      outlined consume of Text.Storage(v28, v29, v30);
      *(void *)(v25 + 24) = *((void *)v26 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    outlined destroy of Text(v25);
  }
  long long v31 = *((_OWORD *)v26 + 1);
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  *(_OWORD *)(v25 + 16) = v31;
LABEL_17:
  uint64_t v32 = a3[8];
  uint64_t v33 = (uint64_t)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  if (*(void *)((char *)a1 + v32 + 24))
  {
    if (*((void *)v34 + 3))
    {
      char v35 = v34[16];
      uint64_t v36 = *(void *)v33;
      uint64_t v37 = *(void *)(v33 + 8);
      char v38 = *(unsigned char *)(v33 + 16);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
      *(unsigned char *)(v33 + 16) = v35;
      outlined consume of Text.Storage(v36, v37, v38);
      *(void *)(v33 + 24) = *((void *)v34 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    outlined destroy of Text(v33);
  }
  long long v39 = *((_OWORD *)v34 + 1);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  *(_OWORD *)(v33 + 16) = v39;
LABEL_22:
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[11];
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  char v41 = (char *)a1 + v40;
  uint64_t v42 = (char *)a2 + v40;
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v44 = v43;
  uint64_t v45 = *(void *)(v43 - 8);
  long long v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  int v47 = v46(v41, 1, v43);
  int v48 = v46(v42, 1, v44);
  if (!v47)
  {
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 40))(v41, v42, v44);
      goto LABEL_28;
    }
    (*(void (**)(char *, uint64_t))(v45 + 8))(v41, v44);
    goto LABEL_27;
  }
  if (v48)
  {
LABEL_27:
    _s10Foundation3URLVSgMaTm_8(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    memcpy(v41, v42, *(void *)(*(void *)(v49 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v41, v42, v44);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v41, 0, 1, v44);
LABEL_28:
  uint64_t v50 = a3[13];
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  uint64_t v51 = (char *)a1 + v50;
  uint64_t v52 = (char *)a2 + v50;
  *(void *)uint64_t v51 = *(void *)v52;
  v51[8] = v52[8];
  *(_OWORD *)((char *)a1 + a3[14]) = *(_OWORD *)((char *)a2 + a3[14]);
  swift_release();
  *(_OWORD *)((char *)a1 + a3[15]) = *(_OWORD *)((char *)a2 + a3[15]);
  swift_release();
  return a1;
}

uint64_t sub_188142D24(uint64_t a1, uint64_t a2, int *a3)
{
  _s10Foundation3URLVSgMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + a3[5];
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v12 = *(void *)(a1 + a3[9]);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
  else
  {
    _s10Foundation3URLVSgMaTm_8(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a3[11];
    return v14(v16, a2, v15);
  }
}

void sub_188142E8C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  _s10Foundation3URLVSgMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + a4[5];
    unint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12(v11, a2, a2, v10);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[9]) = (a2 - 1);
  }
  else
  {
    _s10Foundation3URLVSgMaTm_8(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    int v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a4[11];
    v14(v16, a2, a2, v15);
  }
}

ValueMetadata *type metadata accessor for FileImportOperation.Key()
{
  return &type metadata for FileImportOperation.Key;
}

uint64_t protocol witness for ConfigurableFileOperation.customizationID.setter in conformance FileImportOperation(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t protocol witness for ConfigurableFileOperation.defaultDirectory.setter in conformance FileImportOperation(uint64_t a1, uint64_t a2)
{
  return _s10Foundation9PredicateVyAA3URLV_QPGSgWOdTm_0(a1, v2 + *(int *)(a2 + 20), (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
}

uint64_t protocol witness for ConfigurableFileOperation.message.setter in conformance FileImportOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (uint64_t *)(v5 + *(int *)(a5 + 24));
  uint64_t result = outlined consume of Text?(*v10, v10[1], v10[2], v10[3]);
  *uint64_t v10 = a1;
  v10[1] = a2;
  v10[2] = a3;
  long long v10[3] = a4;
  return result;
}

uint64_t protocol witness for ConfigurableFileOperation.urlEnabled.setter in conformance FileImportOperation(uint64_t a1, uint64_t a2)
{
  return _s10Foundation9PredicateVyAA3URLV_QPGSgWOdTm_0(a1, v2 + *(int *)(a2 + 44), &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
}

uint64_t protocol witness for ConfigurableFileOperation.importsUnresolvedAliases.setter in conformance FileImportOperation(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 48)) = result;
  return result;
}

uint64_t protocol witness for ConfigurableFileOperation.browserOptions.setter in conformance FileImportOperation(uint64_t result, uint64_t a2)
{
  char v3 = *(unsigned char *)(result + 8);
  uint64_t v4 = v2 + *(int *)(a2 + 52);
  *(void *)uint64_t v4 = *(void *)result;
  *(unsigned char *)(v4 + 8) = v3;
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FileImportOperation.Key(uint64_t a1, void (*a2)(void))
{
  _s10Foundation3URLVSgMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for FileImportOperation?, (void (*)(uint64_t))type metadata accessor for FileImportOperation);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v13 - v8;
  outlined init with take of FileImportOperation?(a1, (uint64_t)v6);
  uint64_t v10 = type metadata accessor for FileImportOperation(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    a2();
    outlined destroy of FileImportOperation?((uint64_t)v6);
  }
  else
  {
    outlined init with take of FileImportOperation((uint64_t)v6, (uint64_t)v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  }
  return outlined init with take of FileImportOperation?((uint64_t)v9, a1);
}

uint64_t outlined init with take of FileImportOperation?(uint64_t a1, uint64_t a2)
{
  _s10Foundation3URLVSgMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for FileImportOperation?, (void (*)(uint64_t))type metadata accessor for FileImportOperation);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of FileImportOperation?(uint64_t a1)
{
  _s10Foundation3URLVSgMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for FileImportOperation?, (void (*)(uint64_t))type metadata accessor for FileImportOperation);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of FileImportOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FileImportOperation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s10Foundation9PredicateVyAA3URLV_QPGSgWOdTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  _s10Foundation3URLVSgMaTm_8(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

void *initializeBufferWithCopyOfBuffer for FileImportOperation.Resolved(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = (int *)type metadata accessor for FileImportOperation(0);
    uint64_t v8 = v7[5];
    uint64_t v9 = (char *)v4 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      _s10Foundation3URLVSgMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = v7[6];
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (char *)a2 + v16;
    if (*(void *)((char *)a2 + v16 + 24))
    {
      uint64_t v19 = *(void *)v18;
      uint64_t v20 = *((void *)v18 + 1);
      char v21 = v18[16];
      outlined copy of Text.Storage(*(void *)v18, v20, v21);
      *(void *)uint64_t v17 = v19;
      *((void *)v17 + 1) = v20;
      unsigned char v17[16] = v21;
      *((void *)v17 + 3) = *((void *)v18 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v22 = *((_OWORD *)v18 + 1);
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v22;
    }
    uint64_t v23 = v7[7];
    uint64_t v24 = (char *)v4 + v23;
    uint64_t v25 = (char *)a2 + v23;
    if (*(void *)((char *)a2 + v23 + 24))
    {
      uint64_t v26 = *(void *)v25;
      uint64_t v27 = *((void *)v25 + 1);
      char v28 = v25[16];
      outlined copy of Text.Storage(*(void *)v25, v27, v28);
      *(void *)uint64_t v24 = v26;
      *((void *)v24 + 1) = v27;
      v24[16] = v28;
      *((void *)v24 + 3) = *((void *)v25 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v29 = *((_OWORD *)v25 + 1);
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
      *((_OWORD *)v24 + 1) = v29;
    }
    uint64_t v30 = v7[8];
    long long v31 = (char *)v4 + v30;
    uint64_t v32 = (char *)a2 + v30;
    if (*(void *)((char *)a2 + v30 + 24))
    {
      uint64_t v33 = *(void *)v32;
      uint64_t v34 = *((void *)v32 + 1);
      char v35 = v32[16];
      outlined copy of Text.Storage(*(void *)v32, v34, v35);
      *(void *)long long v31 = v33;
      *((void *)v31 + 1) = v34;
      v31[16] = v35;
      *((void *)v31 + 3) = *((void *)v32 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v36 = *((_OWORD *)v32 + 1);
      *(_OWORD *)long long v31 = *(_OWORD *)v32;
      *((_OWORD *)v31 + 1) = v36;
    }
    *(void *)((char *)v4 + v7[9]) = *(void *)((char *)a2 + v7[9]);
    *((unsigned char *)v4 + v7[10]) = *((unsigned char *)a2 + v7[10]);
    uint64_t v37 = v7[11];
    char v38 = (char *)v4 + v37;
    long long v39 = (char *)a2 + v37;
    type metadata accessor for Predicate<Pack{URL}>();
    uint64_t v41 = v40;
    uint64_t v42 = *(void *)(v40 - 8);
    uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
    swift_bridgeObjectRetain();
    if (v43(v39, 1, v41))
    {
      _s10Foundation3URLVSgMaTm_8(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
      memcpy(v38, v39, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v38, v39, v41);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v38, 0, 1, v41);
    }
    *((unsigned char *)v4 + v7[12]) = *((unsigned char *)a2 + v7[12]);
    uint64_t v45 = v7[13];
    long long v46 = (char *)v4 + v45;
    int v47 = (char *)a2 + v45;
    *(void *)long long v46 = *(void *)v47;
    v46[8] = v47[8];
    uint64_t v48 = v7[14];
    uint64_t v49 = (void *)((char *)v4 + v48);
    uint64_t v50 = (void *)((char *)a2 + v48);
    uint64_t v51 = v50[1];
    *uint64_t v49 = *v50;
    v49[1] = v51;
    uint64_t v52 = v7[15];
    uint64_t v53 = (void *)((char *)v4 + v52);
    char v54 = (void *)((char *)a2 + v52);
    uint64_t v55 = v54[1];
    *uint64_t v53 = *v54;
    v53[1] = v55;
    uint64_t v56 = a3[5];
    uint64_t v57 = a3[6];
    uint64_t v58 = (void *)((char *)v4 + v56);
    uint64_t v59 = (void *)((char *)a2 + v56);
    uint64_t v60 = v59[1];
    *uint64_t v58 = *v59;
    v58[1] = v60;
    long long v61 = (void *)((char *)v4 + v57);
    long long v62 = (void *)((char *)a2 + v57);
    uint64_t v63 = v62[1];
    *long long v61 = *v62;
    v61[1] = v63;
    uint64_t v64 = a3[7];
    uint64_t v65 = (void *)((char *)v4 + v64);
    uint64_t v66 = (void *)((char *)a2 + v64);
    uint64_t v67 = v66[1];
    *uint64_t v65 = *v66;
    v65[1] = v67;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for FileImportOperation.Resolved(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = (int *)type metadata accessor for FileImportOperation(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  uint64_t v6 = a1 + v2[6];
  if (*(void *)(v6 + 24))
  {
    outlined consume of Text.Storage(*(void *)v6, *(void *)(v6 + 8), *(unsigned char *)(v6 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = a1 + v2[7];
  if (*(void *)(v7 + 24))
  {
    outlined consume of Text.Storage(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = a1 + v2[8];
  if (*(void *)(v8 + 24))
  {
    outlined consume of Text.Storage(*(void *)v8, *(void *)(v8 + 8), *(unsigned char *)(v8 + 16));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + v2[11];
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v9, v11);
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for FileImportOperation.Resolved(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for FileImportOperation(0);
  uint64_t v7 = v6[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    _s10Foundation3URLVSgMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = v6[6];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  if (*(void *)((char *)a2 + v14 + 24))
  {
    uint64_t v17 = *(void *)v16;
    uint64_t v18 = *((void *)v16 + 1);
    char v19 = v16[16];
    outlined copy of Text.Storage(*(void *)v16, v18, v19);
    *(void *)uint64_t v15 = v17;
    *((void *)v15 + 1) = v18;
    v15[16] = v19;
    *((void *)v15 + 3) = *((void *)v16 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v20 = *((_OWORD *)v16 + 1);
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v20;
  }
  uint64_t v21 = v6[7];
  long long v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  if (*(void *)((char *)a2 + v21 + 24))
  {
    uint64_t v24 = *(void *)v23;
    uint64_t v25 = *((void *)v23 + 1);
    char v26 = v23[16];
    outlined copy of Text.Storage(*(void *)v23, v25, v26);
    *(void *)long long v22 = v24;
    *((void *)v22 + 1) = v25;
    unsigned char v22[16] = v26;
    *((void *)v22 + 3) = *((void *)v23 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v27 = *((_OWORD *)v23 + 1);
    *(_OWORD *)long long v22 = *(_OWORD *)v23;
    *((_OWORD *)v22 + 1) = v27;
  }
  uint64_t v28 = v6[8];
  long long v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  if (*(void *)((char *)a2 + v28 + 24))
  {
    uint64_t v31 = *(void *)v30;
    uint64_t v32 = *((void *)v30 + 1);
    char v33 = v30[16];
    outlined copy of Text.Storage(*(void *)v30, v32, v33);
    *(void *)long long v29 = v31;
    *((void *)v29 + 1) = v32;
    v29[16] = v33;
    *((void *)v29 + 3) = *((void *)v30 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v34 = *((_OWORD *)v30 + 1);
    *(_OWORD *)long long v29 = *(_OWORD *)v30;
    *((_OWORD *)v29 + 1) = v34;
  }
  *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
  *((unsigned char *)a1 + v6[10]) = *((unsigned char *)a2 + v6[10]);
  uint64_t v35 = v6[11];
  long long v36 = (char *)a1 + v35;
  uint64_t v37 = (char *)a2 + v35;
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v39 = v38;
  uint64_t v40 = *(void *)(v38 - 8);
  uint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
  swift_bridgeObjectRetain();
  if (v41(v37, 1, v39))
  {
    _s10Foundation3URLVSgMaTm_8(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    memcpy(v36, v37, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v36, v37, v39);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v36, 0, 1, v39);
  }
  *((unsigned char *)a1 + v6[12]) = *((unsigned char *)a2 + v6[12]);
  uint64_t v43 = v6[13];
  uint64_t v44 = (char *)a1 + v43;
  uint64_t v45 = (char *)a2 + v43;
  *(void *)uint64_t v44 = *(void *)v45;
  v44[8] = v45[8];
  uint64_t v46 = v6[14];
  int v47 = (void *)((char *)a1 + v46);
  uint64_t v48 = (void *)((char *)a2 + v46);
  uint64_t v49 = v48[1];
  *int v47 = *v48;
  v47[1] = v49;
  uint64_t v50 = v6[15];
  uint64_t v51 = (void *)((char *)a1 + v50);
  uint64_t v52 = (void *)((char *)a2 + v50);
  uint64_t v53 = v52[1];
  *uint64_t v51 = *v52;
  v51[1] = v53;
  uint64_t v54 = a3[5];
  uint64_t v55 = a3[6];
  uint64_t v56 = (void *)((char *)a1 + v54);
  uint64_t v57 = (void *)((char *)a2 + v54);
  uint64_t v58 = v57[1];
  *uint64_t v56 = *v57;
  v56[1] = v58;
  uint64_t v59 = (void *)((char *)a1 + v55);
  uint64_t v60 = (void *)((char *)a2 + v55);
  uint64_t v61 = v60[1];
  *uint64_t v59 = *v60;
  v59[1] = v61;
  uint64_t v62 = a3[7];
  uint64_t v63 = (void *)((char *)a1 + v62);
  uint64_t v64 = (void *)((char *)a2 + v62);
  uint64_t v65 = v64[1];
  *uint64_t v63 = *v64;
  v63[1] = v65;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for FileImportOperation.Resolved(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for FileImportOperation(0);
  uint64_t v6 = v5[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    _s10Foundation3URLVSgMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = v5[6];
  uint64_t v16 = (uint64_t)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)((char *)a1 + v15 + 24);
  uint64_t v19 = *(void *)((char *)a2 + v15 + 24);
  if (v18)
  {
    if (v19)
    {
      uint64_t v20 = *(void *)v17;
      uint64_t v21 = *((void *)v17 + 1);
      char v22 = v17[16];
      outlined copy of Text.Storage(*(void *)v17, v21, v22);
      uint64_t v23 = *(void *)v16;
      uint64_t v24 = *(void *)(v16 + 8);
      char v25 = *(unsigned char *)(v16 + 16);
      *(void *)uint64_t v16 = v20;
      *(void *)(v16 + 8) = v21;
      *(unsigned char *)(v16 + 16) = v22;
      outlined consume of Text.Storage(v23, v24, v25);
      *(void *)(v16 + 24) = *((void *)v17 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v16);
      long long v29 = *((_OWORD *)v17 + 1);
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      *(_OWORD *)(v16 + 16) = v29;
    }
  }
  else if (v19)
  {
    uint64_t v26 = *(void *)v17;
    uint64_t v27 = *((void *)v17 + 1);
    char v28 = v17[16];
    outlined copy of Text.Storage(*(void *)v17, v27, v28);
    *(void *)uint64_t v16 = v26;
    *(void *)(v16 + 8) = v27;
    *(unsigned char *)(v16 + 16) = v28;
    *(void *)(v16 + 24) = *((void *)v17 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v30 = *((_OWORD *)v17 + 1);
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v30;
  }
  uint64_t v31 = v5[7];
  uint64_t v32 = (uint64_t)a1 + v31;
  char v33 = (char *)a2 + v31;
  uint64_t v34 = *(void *)((char *)a1 + v31 + 24);
  uint64_t v35 = *(void *)((char *)a2 + v31 + 24);
  if (v34)
  {
    if (v35)
    {
      uint64_t v36 = *(void *)v33;
      uint64_t v37 = *((void *)v33 + 1);
      char v38 = v33[16];
      outlined copy of Text.Storage(*(void *)v33, v37, v38);
      uint64_t v39 = *(void *)v32;
      uint64_t v40 = *(void *)(v32 + 8);
      char v41 = *(unsigned char *)(v32 + 16);
      *(void *)uint64_t v32 = v36;
      *(void *)(v32 + 8) = v37;
      *(unsigned char *)(v32 + 16) = v38;
      outlined consume of Text.Storage(v39, v40, v41);
      *(void *)(v32 + 24) = *((void *)v33 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v32);
      long long v45 = *((_OWORD *)v33 + 1);
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
      *(_OWORD *)(v32 + 16) = v45;
    }
  }
  else if (v35)
  {
    uint64_t v42 = *(void *)v33;
    uint64_t v43 = *((void *)v33 + 1);
    char v44 = v33[16];
    outlined copy of Text.Storage(*(void *)v33, v43, v44);
    *(void *)uint64_t v32 = v42;
    *(void *)(v32 + 8) = v43;
    *(unsigned char *)(v32 + 16) = v44;
    *(void *)(v32 + 24) = *((void *)v33 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v46 = *((_OWORD *)v33 + 1);
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    *(_OWORD *)(v32 + 16) = v46;
  }
  uint64_t v47 = v5[8];
  uint64_t v48 = (uint64_t)a1 + v47;
  uint64_t v49 = (char *)a2 + v47;
  uint64_t v50 = *(void *)((char *)a1 + v47 + 24);
  uint64_t v51 = *(void *)((char *)a2 + v47 + 24);
  if (v50)
  {
    if (v51)
    {
      uint64_t v52 = *(void *)v49;
      uint64_t v53 = *((void *)v49 + 1);
      char v54 = v49[16];
      outlined copy of Text.Storage(*(void *)v49, v53, v54);
      uint64_t v55 = *(void *)v48;
      uint64_t v56 = *(void *)(v48 + 8);
      char v57 = *(unsigned char *)(v48 + 16);
      *(void *)uint64_t v48 = v52;
      *(void *)(v48 + 8) = v53;
      *(unsigned char *)(v48 + 16) = v54;
      outlined consume of Text.Storage(v55, v56, v57);
      *(void *)(v48 + 24) = *((void *)v49 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v48);
      long long v61 = *((_OWORD *)v49 + 1);
      *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
      *(_OWORD *)(v48 + 16) = v61;
    }
  }
  else if (v51)
  {
    uint64_t v58 = *(void *)v49;
    uint64_t v59 = *((void *)v49 + 1);
    char v60 = v49[16];
    outlined copy of Text.Storage(*(void *)v49, v59, v60);
    *(void *)uint64_t v48 = v58;
    *(void *)(v48 + 8) = v59;
    *(unsigned char *)(v48 + 16) = v60;
    *(void *)(v48 + 24) = *((void *)v49 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v62 = *((_OWORD *)v49 + 1);
    *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
    *(_OWORD *)(v48 + 16) = v62;
  }
  *(void *)((char *)a1 + v5[9]) = *(void *)((char *)a2 + v5[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v5[10]) = *((unsigned char *)a2 + v5[10]);
  uint64_t v63 = v5[11];
  uint64_t v64 = (char *)a1 + v63;
  uint64_t v65 = (char *)a2 + v63;
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v67 = v66;
  uint64_t v68 = *(void *)(v66 - 8);
  uint64_t v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 48);
  int v70 = v69(v64, 1, v66);
  int v71 = v69(v65, 1, v67);
  if (!v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 24))(v64, v65, v67);
      goto LABEL_35;
    }
    (*(void (**)(char *, uint64_t))(v68 + 8))(v64, v67);
    goto LABEL_34;
  }
  if (v71)
  {
LABEL_34:
    _s10Foundation3URLVSgMaTm_8(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    memcpy(v64, v65, *(void *)(*(void *)(v72 - 8) + 64));
    goto LABEL_35;
  }
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v64, v65, v67);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v64, 0, 1, v67);
LABEL_35:
  *((unsigned char *)a1 + v5[12]) = *((unsigned char *)a2 + v5[12]);
  uint64_t v73 = v5[13];
  uint64_t v74 = (char *)a1 + v73;
  uint64_t v75 = (char *)a2 + v73;
  uint64_t v76 = *(void *)v75;
  v74[8] = v75[8];
  *(void *)uint64_t v74 = v76;
  uint64_t v77 = v5[14];
  long long v78 = (void *)((char *)a1 + v77);
  long long v79 = (void *)((char *)a2 + v77);
  uint64_t v80 = v79[1];
  *long long v78 = *v79;
  v78[1] = v80;
  swift_retain();
  swift_release();
  uint64_t v81 = v5[15];
  uint64_t v82 = (void *)((char *)a1 + v81);
  uint64_t v83 = (void *)((char *)a2 + v81);
  uint64_t v84 = v83[1];
  *uint64_t v82 = *v83;
  v82[1] = v84;
  swift_retain();
  swift_release();
  uint64_t v85 = a3[5];
  uint64_t v86 = (void *)((char *)a1 + v85);
  uint64_t v87 = (void *)((char *)a2 + v85);
  void *v86 = *v87;
  v86[1] = v87[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v88 = a3[6];
  char v89 = (void *)((char *)a1 + v88);
  uint64_t v90 = (void *)((char *)a2 + v88);
  void *v89 = *v90;
  v89[1] = v90[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v91 = a3[7];
  uint64_t v92 = (void *)((char *)a1 + v91);
  uint64_t v93 = (void *)((char *)a2 + v91);
  *uint64_t v92 = *v93;
  v92[1] = v93[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for FileImportOperation.Resolved(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = (int *)type metadata accessor for FileImportOperation(0);
  uint64_t v7 = v6[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    _s10Foundation3URLVSgMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = v6[6];
  uint64_t v14 = (_OWORD *)((char *)a1 + v13);
  uint64_t v15 = (_OWORD *)((char *)a2 + v13);
  long long v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = v6[7];
  uint64_t v18 = (_OWORD *)((char *)a1 + v17);
  uint64_t v19 = (_OWORD *)((char *)a2 + v17);
  long long v20 = v19[1];
  _OWORD *v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = v6[8];
  char v22 = (_OWORD *)((char *)a1 + v21);
  uint64_t v23 = (_OWORD *)((char *)a2 + v21);
  long long v24 = v23[1];
  _OWORD *v22 = *v23;
  v22[1] = v24;
  *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
  *((unsigned char *)a1 + v6[10]) = *((unsigned char *)a2 + v6[10]);
  uint64_t v25 = v6[11];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v29 = v28;
  uint64_t v30 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v27, 1, v28))
  {
    _s10Foundation3URLVSgMaTm_8(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v26, v27, v29);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v26, 0, 1, v29);
  }
  *((unsigned char *)a1 + v6[12]) = *((unsigned char *)a2 + v6[12]);
  uint64_t v32 = v6[13];
  char v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  *(void *)char v33 = *(void *)v34;
  v33[8] = v34[8];
  *(_OWORD *)((char *)a1 + v6[14]) = *(_OWORD *)((char *)a2 + v6[14]);
  *(_OWORD *)((char *)a1 + v6[15]) = *(_OWORD *)((char *)a2 + v6[15]);
  uint64_t v35 = a3[6];
  *(_OWORD *)((char *)a1 + a3[5]) = *(_OWORD *)((char *)a2 + a3[5]);
  *(_OWORD *)((char *)a1 + v35) = *(_OWORD *)((char *)a2 + v35);
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  return a1;
}

void *assignWithTake for FileImportOperation.Resolved(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = (int *)type metadata accessor for FileImportOperation(0);
  uint64_t v7 = v6[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    _s10Foundation3URLVSgMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = v6[6];
  uint64_t v17 = (uint64_t)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  if (*(void *)((char *)a1 + v16 + 24))
  {
    if (*((void *)v18 + 3))
    {
      char v19 = v18[16];
      uint64_t v20 = *(void *)v17;
      uint64_t v21 = *(void *)(v17 + 8);
      char v22 = *(unsigned char *)(v17 + 16);
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
      *(unsigned char *)(v17 + 16) = v19;
      outlined consume of Text.Storage(v20, v21, v22);
      *(void *)(v17 + 24) = *((void *)v18 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    outlined destroy of Text(v17);
  }
  long long v23 = *((_OWORD *)v18 + 1);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v23;
LABEL_12:
  uint64_t v24 = v6[7];
  uint64_t v25 = (uint64_t)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  if (*(void *)((char *)a1 + v24 + 24))
  {
    if (*((void *)v26 + 3))
    {
      char v27 = v26[16];
      uint64_t v28 = *(void *)v25;
      uint64_t v29 = *(void *)(v25 + 8);
      char v30 = *(unsigned char *)(v25 + 16);
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      *(unsigned char *)(v25 + 16) = v27;
      outlined consume of Text.Storage(v28, v29, v30);
      *(void *)(v25 + 24) = *((void *)v26 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    outlined destroy of Text(v25);
  }
  long long v31 = *((_OWORD *)v26 + 1);
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  *(_OWORD *)(v25 + 16) = v31;
LABEL_17:
  uint64_t v32 = v6[8];
  uint64_t v33 = (uint64_t)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  if (*(void *)((char *)a1 + v32 + 24))
  {
    if (*((void *)v34 + 3))
    {
      char v35 = v34[16];
      uint64_t v36 = *(void *)v33;
      uint64_t v37 = *(void *)(v33 + 8);
      char v38 = *(unsigned char *)(v33 + 16);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
      *(unsigned char *)(v33 + 16) = v35;
      outlined consume of Text.Storage(v36, v37, v38);
      *(void *)(v33 + 24) = *((void *)v34 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    outlined destroy of Text(v33);
  }
  long long v39 = *((_OWORD *)v34 + 1);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  *(_OWORD *)(v33 + 16) = v39;
LABEL_22:
  *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v6[10]) = *((unsigned char *)a2 + v6[10]);
  uint64_t v40 = v6[11];
  char v41 = (char *)a1 + v40;
  uint64_t v42 = (char *)a2 + v40;
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v44 = v43;
  uint64_t v45 = *(void *)(v43 - 8);
  long long v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  int v47 = v46(v41, 1, v43);
  int v48 = v46(v42, 1, v44);
  if (!v47)
  {
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 40))(v41, v42, v44);
      goto LABEL_28;
    }
    (*(void (**)(char *, uint64_t))(v45 + 8))(v41, v44);
    goto LABEL_27;
  }
  if (v48)
  {
LABEL_27:
    _s10Foundation3URLVSgMaTm_8(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
    memcpy(v41, v42, *(void *)(*(void *)(v49 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v41, v42, v44);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v41, 0, 1, v44);
LABEL_28:
  *((unsigned char *)a1 + v6[12]) = *((unsigned char *)a2 + v6[12]);
  uint64_t v50 = v6[13];
  uint64_t v51 = (char *)a1 + v50;
  uint64_t v52 = (char *)a2 + v50;
  *(void *)uint64_t v51 = *(void *)v52;
  v51[8] = v52[8];
  *(_OWORD *)((char *)a1 + v6[14]) = *(_OWORD *)((char *)a2 + v6[14]);
  swift_release();
  *(_OWORD *)((char *)a1 + v6[15]) = *(_OWORD *)((char *)a2 + v6[15]);
  swift_release();
  uint64_t v53 = a3[5];
  char v54 = (void *)((char *)a1 + v53);
  uint64_t v55 = (void *)((char *)a2 + v53);
  uint64_t v57 = *v55;
  uint64_t v56 = v55[1];
  *char v54 = v57;
  v54[1] = v56;
  swift_bridgeObjectRelease();
  uint64_t v58 = a3[6];
  uint64_t v59 = (void *)((char *)a1 + v58);
  char v60 = (void *)((char *)a2 + v58);
  uint64_t v62 = *v60;
  uint64_t v61 = v60[1];
  *uint64_t v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease();
  uint64_t v63 = a3[7];
  uint64_t v64 = (void *)((char *)a1 + v63);
  uint64_t v65 = (void *)((char *)a2 + v63);
  uint64_t v67 = *v65;
  uint64_t v66 = v65[1];
  *uint64_t v64 = v67;
  v64[1] = v66;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FileImportOperation.Resolved(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_188144D28);
}

uint64_t sub_188144D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FileImportOperation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for FileImportOperation.Resolved(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_188144E0C);
}

uint64_t sub_188144E0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for FileImportOperation(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t type metadata accessor for FileImportOperation.Resolved(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileImportOperation.Resolved);
}

uint64_t type metadata completion function for FileImportOperation.Resolved()
{
  uint64_t result = type metadata accessor for FileImportOperation(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void closure #1 in HostingScrollView.updateContext(_:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x18C119DF0](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    MEMORY[0x1F4188790](v2);
    static Update.ensure<A>(_:)();
  }
}

uint64_t closure #1 in closure #1 in HostingScrollView.updateContext(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget);
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget);
  *uint64_t v5 = a2;
  v5[1] = a3;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v6);
  uint64_t v7 = (void *)(a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset);
  *(int64x2_t *)(a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset) = vdupq_n_s64(0x7FF0000000000000uLL);
  swift_retain();
  HostingScrollView.updateAnimationTarget(_:)(a2);
  *uint64_t v7 = 0;
  v7[1] = 0;
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTargetConfig) != 2)
  {
    uint64_t v8 = a1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTargetConfig;
    *(unsigned char *)(v8 + 2) = 0;
    *(_WORD *)uint64_t v8 = 2;
  }
  uint64_t v9 = *v5;
  *uint64_t v5 = 0;
  v5[1] = 0;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v9);
}

uint64_t HostingScrollView.updateAnimationTarget(_:)(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  objc_msgSend(v1, sel_adjustedContentInset);
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  objc_msgSend(v1, sel_contentOffset);
  double v13 = v7 + v12;
  double v15 = v5 + v14;
  v35.receiver = v1;
  v35.super_class = ObjectType;
  objc_msgSendSuper2(&v35, sel_bounds);
  if (v16 - (v7 + v11) < 0.0) {
    double v18 = 0.0;
  }
  else {
    double v18 = v16 - (v7 + v11);
  }
  if (v17 - (v5 + v9) < 0.0) {
    double v19 = 0.0;
  }
  else {
    double v19 = v17 - (v5 + v9);
  }
  objc_msgSend(v1, sel_contentSize);
  *(double *)&uint64_t result = COERCE_DOUBLE(specialized static ScrollViewUtilities.animationOffset(target:bounds:contentSize:contentInsets:layoutDirection:)(a1, v13, v15, v18, v19, v20, v21));
  if ((v24 & 1) == 0)
  {
    uint64_t v25 = result;
    double v26 = v23;
    double v27 = *(double *)&result;
    double v28 = v23;
    uint64_t v29 = (double *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset];
    if (*(double *)&result - *(double *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset] != 0.0
      || v23 - v29[1] != 0.0)
    {
      objc_msgSend(v1, sel_adjustedContentInset, *(void *)&v9, *(void *)&v11);
      double v31 = v27 - v30;
      double v33 = v28 - v32;
      if (!objc_msgSend(v1, sel_isScrollAnimating)
        || (uint64_t v34 = &selRef__updateScrollAnimationForChangedTargetOffset_,
            (objc_msgSend(v1, sel_respondsToSelector_, sel__updateScrollAnimationForChangedTargetOffset_) & 1) == 0))
      {
        uint64_t v34 = &selRef_setContentOffset_;
      }
      *(double *)&uint64_t result = COERCE_DOUBLE(objc_msgSend(v1, *v34, v31, v33));
      *(void *)uint64_t v29 = v25;
      v29[1] = v26;
    }
  }
  return result;
}

void closure #1 in HostingScrollView.checkAnimationCompletion()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x18C119DF0](v1);
  if (!v2) {
    return;
  }
  uint64_t v3 = (char *)v2;
  double v4 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget);
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget);
  if (!v5) {
    goto LABEL_25;
  }
  uint64_t v6 = swift_retain();
  MEMORY[0x18C113CA0](v6);
  uint64_t v7 = OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper;
  uint64_t v8 = *(void *)&v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper];
  uint64_t v9 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates;
  int v10 = *(_DWORD *)(v8 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates);
  BOOL v11 = __OFADD__(v10, 1);
  int v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  *(_DWORD *)(v8 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates) = v12;
  objc_msgSend(v3, sel_adjustedContentInset);
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;
  double v20 = v19;
  objc_msgSend(v3, sel_contentOffset);
  double v22 = v16 + v21;
  double v24 = v14 + v23;
  uint64_t v25 = (objc_class *)type metadata accessor for HostingScrollView();
  v51.receiver = v3;
  v51.super_class = v25;
  objc_msgSendSuper2(&v51, sel_bounds);
  if (v26 - (v16 + v20) < 0.0) {
    double v28 = 0.0;
  }
  else {
    double v28 = v26 - (v16 + v20);
  }
  if (v27 - (v14 + v18) < 0.0) {
    double v29 = 0.0;
  }
  else {
    double v29 = v27 - (v14 + v18);
  }
  objc_msgSend(v3, sel_contentSize);
  char v50 = v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_layoutDirection];
  double v32 = COERCE_DOUBLE(specialized static ScrollViewUtilities.animationOffset(target:bounds:contentSize:contentInsets:layoutDirection:)(v5, v22, v24, v28, v29, v30, v31));
  if ((v34 & 1) == 0)
  {
    double v35 = v32;
    double v36 = v33;
    uint64_t v37 = (double *)&v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset];
    if (v32 - *(double *)&v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset] != 0.0 || v33 - v37[1] != 0.0)
    {
      objc_msgSend(v3, sel_adjustedContentInset, *(void *)&v18, *(void *)&v20);
      double v44 = v35 - v43;
      double v46 = v36 - v45;
      v49.receiver = v3;
      v49.super_class = v25;
      objc_msgSendSuper2(&v49, sel_setContentOffset_animated_, 1, v44, v46);
      *(unsigned char *)(v8 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase) = 4;
      ScrollViewHelper.updateGraphState(isPreferred:)(0);
      *uint64_t v37 = v44;
      v37[1] = v46;
      int v47 = *(_DWORD *)(v8 + v9);
      BOOL v11 = __OFSUB__(v47, 1);
      int v48 = v47 - 1;
      if (v11)
      {
LABEL_29:
        __break(1u);
        return;
      }
      *(_DWORD *)(v8 + v9) = v48;
      if (!v48 && *(unsigned char *)(v8 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2) {
        ScrollViewHelper.updateGraphState(isPreferred:)(0);
      }
      static Update.end()();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
LABEL_25:

      return;
    }
  }
  if (v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTargetConfig] != 2)
  {
    char v38 = &v3[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTargetConfig];
    _OWORD v38[2] = 0;
    *(_WORD *)char v38 = 2;
  }
  uint64_t v39 = *v4;
  *double v4 = 0;
  v4[1] = 0;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v39);
  uint64_t v40 = *(void *)&v3[v7];
  int v41 = *(_DWORD *)(v40 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates);
  BOOL v11 = __OFSUB__(v41, 1);
  int v42 = v41 - 1;
  if (v11) {
    goto LABEL_28;
  }
  *(_DWORD *)(v40 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates) = v42;
  if (!v42 && *(unsigned char *)(v40 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2) {
    ScrollViewHelper.updateGraphState(isPreferred:)(0);
  }
  static Update.end()();

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
}

uint64_t HostingScrollView._shouldScrollToContentBeginningInRightToLeft.getter()
{
  if ((*(unsigned char *)(*(void *)(v0 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_helper)
                 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_axes) & 1) != 0
    && (static Semantics.v6.getter(), (isLinkedOnOrAfter(_:)() & 1) == 0))
  {
    static Semantics.v4_4.getter();
    char v1 = isLinkedOnOrAfter(_:)();
  }
  else
  {
    char v1 = 0;
  }
  return v1 & 1;
}

uint64_t protocol witness for AnyPlatformViewHost.responder.getter in conformance HostingScrollView()
{
  return swift_weakLoadStrong();
}

BOOL protocol witness for ScrollViewHelperDelegate.scrollToTop() in conformance HostingScrollView()
{
  char v1 = *(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_onScrollToTopGesture);
  if (v1)
  {
    uint64_t v2 = swift_retain();
    v1(v2);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v1);
  }
  return v1 != 0;
}

uint64_t HostingScrollView.PlatformGroupContainer._childContainers.getter()
{
  ObjectType = (objc_class *)swift_getObjectType();
  if (MEMORY[0x18C111F70]())
  {
    uint64_t v2 = MEMORY[0x18C119DF0](&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_scrollView]);
    if (v2 && (uint64_t v3 = (void *)v2, Strong = swift_weakLoadStrong(), v3, Strong))
    {
      unint64_t v5 = ViewResponder.childGestureContainers.getter();
      swift_release();
      if (v5 >> 62)
      {
LABEL_5:
        type metadata accessor for _UIGestureRecognizerContainer();
        swift_bridgeObjectRetain();
        uint64_t v6 = _bridgeCocoaArray<A>(_:)();
        swift_bridgeObjectRelease_n();
        return v6;
      }
    }
    else
    {
      unint64_t v5 = MEMORY[0x1E4FBC860];
      if (MEMORY[0x1E4FBC860] >> 62) {
        goto LABEL_5;
      }
    }
    uint64_t v9 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for _UIGestureRecognizerContainer();
    if (swift_dynamicCastMetatype() || (uint64_t v10 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) == 0)
    {
LABEL_9:
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v11 = v9 + 32;
      while (swift_dynamicCastObjCProtocolConditional())
      {
        v11 += 8;
        if (!--v10) {
          goto LABEL_9;
        }
      }
      swift_bridgeObjectRelease();
      return v9 | 1;
    }
  }
  else
  {
    v12.receiver = v0;
    v12.super_class = ObjectType;
    id v8 = objc_msgSendSuper2(&v12, sel__childGestureRecognizerContainers);
    type metadata accessor for _UIGestureRecognizerContainer();
    unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return v5;
}

id HostingScrollView.PlatformGroupContainer.init(coder:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__focusableBounds] = 0;
  *(void *)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__focusableFillerBounds] = 0;
  *(void *)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__focusableBorder] = 0;
  *(void *)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer__pixelLength] = 0;
  *(void *)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_fillerItems] = MEMORY[0x1E4FBC860];
  *(void *)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView22PlatformGroupContainer_requestedFocusItem] = 0;
  v6.receiver = v1;
  v6.super_class = ObjectType;
  id v4 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);

  return v4;
}

uint64_t sub_188145C78()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_188145CB4()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in HostingScrollView.updateContext(_:)()
{
  closure #1 in HostingScrollView.updateContext(_:)(*(void *)(v0 + 16));
}

void partial apply for closure #1 in HostingScrollView.checkAnimationCompletion()()
{
  closure #1 in HostingScrollView.checkAnimationCompletion()(v0);
}

uint64_t partial apply for closure #1 in closure #1 in HostingScrollView.updateContext(_:)()
{
  return closure #1 in closure #1 in HostingScrollView.updateContext(_:)(v0[2], v0[3], v0[4]);
}

void specialized HostingScrollView.init(coder:)()
{
  swift_weakInit();
  v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_layoutDirection] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_rtlAdjustment] = 0;
  char v1 = &v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_onScrollToTopGesture];
  void *v1 = 0;
  v1[1] = 0;
  v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_descendantScrollableAxes] = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_pendingContext];
  *(_OWORD *)uint64_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((void *)v2 + 8) = 0xF000000000000004;
  uint64_t v3 = &v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_lastAdjustedContentInsets];
  *uint64_t v3 = 0u;
  v3[1] = 0u;
  id v4 = &v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTarget];
  *id v4 = 0;
  v4[1] = 0;
  unint64_t v5 = &v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationTargetConfig];
  _OWORD v5[2] = 0;
  *(_WORD *)unint64_t v5 = 2;
  objc_super v6 = &v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_animationOffset];
  *objc_super v6 = 0;
  v6[1] = 0;
  uint64_t v7 = (uint64_t *)&v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_safeAreaTransitionState];
  type metadata accessor for FalseSafeAreaTransitionState();
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = 0;
  *uint64_t v7 = v8;
  v7[1] = (uint64_t)&protocol witness table for FalseSafeAreaTransitionState;
  uint64_t v9 = &v0[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_oldContentMargins];
  OptionalEdgeInsets.init()();
  OptionalEdgeInsets.init()();
  OptionalEdgeInsets.init()();
  OptionalEdgeInsets.init()();
  *(void *)uint64_t v9 = v34;
  v9[8] = v35;
  *((void *)v9 + 2) = v36;
  v9[24] = v37;
  *((void *)v9 + 4) = v38;
  v9[40] = v39;
  *((void *)v9 + 6) = v40;
  v9[56] = v41;
  *((void *)v9 + 8) = v26;
  v9[72] = v27;
  *((void *)v9 + 10) = v28;
  v9[88] = v29;
  *((void *)v9 + 12) = v30;
  v9[104] = v31;
  *((void *)v9 + 14) = v32;
  unsigned char v9[120] = v33;
  *((void *)v9 + 16) = v18;
  v9[136] = v19;
  *((void *)v9 + 18) = v20;
  v9[152] = v21;
  *((void *)v9 + 20) = v22;
  v9[168] = v23;
  *((void *)v9 + 22) = v24;
  v9[184] = v25;
  *((void *)v9 + 24) = v10;
  v9[200] = v11;
  *((void *)v9 + 26) = v12;
  v9[216] = v13;
  *((void *)v9 + 28) = v14;
  v9[232] = v15;
  *((void *)v9 + 30) = v16;
  v9[248] = v17;
  swift_weakInit();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t TabViewCustomization.init()@<X0>(uint64_t a1@<X8>)
{
  UUID.init()();
  uint64_t v2 = type metadata accessor for TabViewCustomization();
  uint64_t v3 = *(int *)(v2 + 20);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + v3) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v5 = *(int *)(v2 + 24);
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(v4);
  *(void *)(a1 + v5) = result;
  return result;
}

uint64_t type metadata accessor for TabViewCustomization()
{
  uint64_t result = type metadata singleton initialization cache for TabViewCustomization;
  if (!type metadata singleton initialization cache for TabViewCustomization) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t TabViewCustomization.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + *(int *)(type metadata accessor for TabViewCustomization() + 20));
  if (!*(void *)(v5 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, 0);
  uint64_t v7 = 0;
  if (v8) {
    uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 + 56) + 2 * v6);
  }
  swift_bridgeObjectRelease();
  return v7;
}

{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v5 = *(void *)(v2 + *(int *)(type metadata accessor for TabViewCustomization() + 24));
  if (!*(void *)(v5 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain_n();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, 0);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease_n();
    return 0;
  }
  char v8 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
  if (!*(void *)(v8 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = specialized _ArrayProtocol.filter(_:)(v9);
  swift_bridgeObjectRelease();
  char v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18TabCustomizationIDVG_SSs5NeverOTg503_s7d4UI28f7SectionG93EntryV11clientOrderSaySSGSgvgSSAA0cE2IDVcfu0_32e1885d3bbc99997a9c2787f67e5aae26AHSSTf3nnnpk_nTf1cn_n(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;

  uint64_t v5 = *(void *)(v2 + *(int *)(type metadata accessor for TabViewCustomization() + 20));
  if (!*(void *)(v5 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, 0);
  uint64_t v7 = 0;
  if (v8) {
    uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 + 56) + 2 * v6 + 1);
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t TabViewCustomization.subscript.setter(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  return TabViewCustomization.subscript.setter(a1, a2, a3, 0);
}

Swift::Void __swiftcall TabViewCustomization.resetVisibility()()
{
  unint64_t v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v2 = *(int *)(type metadata accessor for TabViewCustomization() + 20);
  swift_bridgeObjectRelease();
  *(void *)(v0 + v2) = v1;
}

Swift::Void __swiftcall TabViewCustomization.resetSectionOrder()()
{
  unint64_t v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v2 = *(int *)(type metadata accessor for TabViewCustomization() + 24);
  swift_bridgeObjectRelease();
  *(void *)(v0 + v2) = v1;
}

Swift::Void __swiftcall TabViewCustomization.resetSectionOrder(for:)(Swift::String a1)
{
  uint64_t v2 = v1;
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v5 = *(int *)(type metadata accessor for TabViewCustomization() + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object, 0);
  LOBYTE(countAndFlagsBits) = v7;
  swift_bridgeObjectRelease();
  if (countAndFlagsBits)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *(void *)(v2 + v5);
    *(void *)(v2 + v5) = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
    outlined consume of TabCustomizationID.Base();
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *(void *)(v2 + v5) = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
}

uint64_t static TabViewCustomization.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for TabViewCustomization();
  if ((specialized static Dictionary<>.== infix(_:_:)(*(void *)(a1 + *(int *)(v4 + 20)), *(void *)(a2 + *(int *)(v4 + 20))) & 1) == 0)return 0; {
  uint64_t v5 = *(int *)(v4 + 24);
  }
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a2 + v5);

  return specialized static Dictionary<>.== infix(_:_:)(v6, v7);
}

Swift::Void __swiftcall TabViewCustomization.removeTransientIdentifiers()()
{
  uint64_t v1 = type metadata accessor for TabViewCustomization();
  uint64_t v2 = *(int *)(v1 + 20);
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized _NativeDictionary.filter(_:)(v3);
  swift_bridgeObjectRelease_n();
  *(void *)(v0 + v2) = v4;
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v36 = *(int *)(v1 + 24);
  uint64_t v37 = v0;
  uint64_t v6 = *(void *)(v0 + v36);
  uint64_t v7 = v6 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(v6 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v12 = 0;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v12 << 6))
  {
    uint64_t v15 = *(void *)(v6 + 48) + 24 * i;
    if (*(unsigned char *)(v15 + 16))
    {
      if (v10) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v20 = *(void *)v15;
      uint64_t v19 = *(void *)(v15 + 8);
      uint64_t v21 = *(void *)(*(void *)(v6 + 56) + 8 * i);
      swift_bridgeObjectRetain_n();
      outlined copy of TabCustomizationID.Base();
      uint64_t v38 = specialized _ArrayProtocol.filter(_:)(v21);
      swift_bridgeObjectRelease_n();
      uint64_t v22 = (void *)v5;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v39 = v20;
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v19, 0);
      uint64_t v26 = v22[2];
      BOOL v27 = (v24 & 1) == 0;
      uint64_t v28 = v26 + v27;
      if (__OFADD__(v26, v27)) {
        goto LABEL_37;
      }
      char v29 = v24;
      if (v22[3] >= v28)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, isUniquelyReferenced_nonNull_native);
        unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v19, 0);
        if ((v29 & 1) != (v31 & 1)) {
          goto LABEL_39;
        }
        unint64_t v25 = v30;
      }
      unint64_t v5 = (unint64_t)v22;
      if (v29)
      {
        uint64_t v32 = v22[7];
        swift_bridgeObjectRelease();
        *(void *)(v32 + 8 * v25) = v38;
      }
      else
      {
        v22[(v25 >> 6) + 8] |= 1 << v25;
        uint64_t v33 = v22[6] + 24 * v25;
        *(void *)uint64_t v33 = v39;
        *(void *)(v33 + 8) = v19;
        *(unsigned char *)(v33 + 16) = 0;
        *(void *)(v22[7] + 8 * v25) = v38;
        uint64_t v34 = v22[2];
        BOOL v16 = __OFADD__(v34, 1);
        uint64_t v35 = v34 + 1;
        if (v16) {
          goto LABEL_38;
        }
        void v22[2] = v35;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      outlined consume of TabCustomizationID.Base();
      uint64_t v7 = v6 + 64;
      if (v10) {
        goto LABEL_4;
      }
    }
LABEL_7:
    BOOL v16 = __OFADD__(v12++, 1);
    if (v16)
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v12 >= v11) {
      goto LABEL_34;
    }
    unint64_t v17 = *(void *)(v7 + 8 * v12);
    if (!v17) {
      break;
    }
LABEL_17:
    unint64_t v10 = (v17 - 1) & v17;
  }
  int64_t v18 = v12 + 1;
  if (v12 + 1 >= v11) {
    goto LABEL_34;
  }
  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v12 + 2;
  if (v12 + 2 >= v11) {
    goto LABEL_34;
  }
  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v12 + 3;
  if (v12 + 3 >= v11)
  {
LABEL_34:
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)(v37 + v36) = v5;
    return;
  }
  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17)
  {
LABEL_16:
    int64_t v12 = v18;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v11) {
      goto LABEL_34;
    }
    unint64_t v17 = *(void *)(v7 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_17;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

Swift::Void __swiftcall TabViewCustomization.validateCustomization(entries:)(Swift::OpaquePointer entries)
{
  uint64_t v1 = *((void *)entries._rawValue + 2);
  if (v1)
  {
    uint64_t v2 = (char *)entries._rawValue + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of TabEntry((uint64_t)v2, (uint64_t)__src);
      if (v57)
      {
        memcpy(__dst, __src, 0x108uLL);
        TabViewCustomization.validateCustomization(entries:)((Swift::OpaquePointer)__dst[1]);
        outlined destroy of TabItemGroup((uint64_t)__dst);
        goto LABEL_7;
      }
      long long v54 = *(_OWORD *)&__src[80];
      v53[3] = *(_OWORD *)&__src[48];
      v53[4] = *(_OWORD *)&__src[64];
      v53[0] = *(_OWORD *)__src;
      v53[1] = *(_OWORD *)&__src[16];
      uint64_t v55 = *(void *)&__src[96];
      v53[2] = *(_OWORD *)&__src[32];
      uint64_t v6 = *(void *)&__src[88];
      __dst[0] = *(void *)&__src[88];
      if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) == 0)
      {
        uint64_t v33 = v6;
        uint64_t v7 = one-time initialization token for defaultValue;
        swift_bridgeObjectRetain();
        if (v7 != -1) {
          swift_once();
        }
        LOWORD(v39) = static TabOptions.TraitKey.defaultValue;
        BYTE2(v39) = byte_1E90FC582;
        long long v40 = *(_OWORD *)&qword_1E90FC588;
        __int16 v41 = word_1E90FC598;
        char v42 = byte_1E90FC59A;
        uint64_t v43 = qword_1E90FC5A0;
        __int16 v44 = word_1E90FC5A8;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        swift_bridgeObjectRelease();
        int v8 = LOBYTE(__dst[0]);
        outlined consume of TabCustomizationID?(__dst[1], __dst[2], __dst[3]);
        swift_bridgeObjectRelease();
        outlined init with copy of TabItem((uint64_t)v53, (uint64_t)__dst);
        if (v8 == 2)
        {
          outlined destroy of TabItem((uint64_t)__dst);
          outlined init with copy of TabItem((uint64_t)v53, (uint64_t)&v39);
          BOOL v9 = 0;
        }
        else
        {
          uint64_t v46 = __dst[11];
          LOWORD(v33) = static TabOptions.TraitKey.defaultValue;
          BYTE2(v33) = byte_1E90FC582;
          long long v34 = *(_OWORD *)&qword_1E90FC588;
          __int16 v35 = word_1E90FC598;
          unsigned __int8 v36 = byte_1E90FC59A;
          uint64_t v37 = qword_1E90FC5A0;
          __int16 v38 = word_1E90FC5A8;
          ViewTraitCollection.value<A>(for:defaultValue:)();
          unsigned int v10 = v39;
          char v11 = v44;
          int v12 = HIBYTE(v44);
          outlined consume of TabCustomizationID?(v40, *((uint64_t *)&v40 + 1), v41);
          swift_bridgeObjectRelease();
          if (v12 == 1 && (v11 & 1) != 0) {
            BOOL v13 = v10 == 1;
          }
          else {
            BOOL v13 = v10 < 2;
          }
          outlined destroy of TabItem((uint64_t)__dst);
          outlined init with copy of TabItem((uint64_t)v53, (uint64_t)&v39);
          if (v13)
          {
            BOOL v9 = 0;
          }
          else
          {
            uint64_t v31 = v45;
            LOWORD(v46) = static TabOptions.TraitKey.defaultValue;
            BYTE2(v46) = byte_1E90FC582;
            long long v47 = *(_OWORD *)&qword_1E90FC588;
            __int16 v48 = word_1E90FC598;
            char v49 = byte_1E90FC59A;
            uint64_t v50 = qword_1E90FC5A0;
            __int16 v51 = word_1E90FC5A8;
            ViewTraitCollection.value<A>(for:defaultValue:)();
            int v14 = v36;
            outlined consume of TabCustomizationID?(v34, *((uint64_t *)&v34 + 1), v35);
            swift_bridgeObjectRelease();
            BOOL v9 = v14 == 1;
          }
        }
        outlined destroy of TabItem((uint64_t)&v39);
        uint64_t v31 = *((void *)&v54 + 1);
        LOWORD(v46) = static TabOptions.TraitKey.defaultValue;
        BYTE2(v46) = byte_1E90FC582;
        long long v47 = *(_OWORD *)&qword_1E90FC588;
        __int16 v48 = word_1E90FC598;
        char v49 = byte_1E90FC59A;
        uint64_t v50 = qword_1E90FC5A0;
        __int16 v51 = word_1E90FC5A8;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        int v15 = HIBYTE(v35);
        outlined consume of TabCustomizationID?(v34, *((uint64_t *)&v34 + 1), v35);
        swift_bridgeObjectRelease();
        outlined init with copy of TabItem((uint64_t)v53, (uint64_t)&v46);
        if (v9 || v15 == 1)
        {
          uint64_t v33 = v52;
          LOWORD(v39) = static TabOptions.TraitKey.defaultValue;
          BYTE2(v39) = byte_1E90FC582;
          long long v40 = *(_OWORD *)&qword_1E90FC588;
          __int16 v41 = word_1E90FC598;
          char v42 = byte_1E90FC59A;
          uint64_t v43 = qword_1E90FC5A0;
          __int16 v44 = word_1E90FC5A8;
          ViewTraitCollection.value<A>(for:defaultValue:)();
          uint64_t v3 = __dst[1];
          uint64_t v4 = __dst[2];
          int v5 = LOBYTE(__dst[3]);
          outlined copy of TabCustomizationID?(__dst[1], __dst[2], __dst[3]);
          outlined consume of TabCustomizationID?(v3, v4, v5);
          swift_bridgeObjectRelease();
          if (v5 == 255)
          {
            outlined destroy of TabItem((uint64_t)&v46);
            __dst[0] = 0;
            __dst[1] = 0xE000000000000000;
            _StringGuts.grow(_:)(215);
            uint64_t v31 = __dst[0];
            uint64_t v32 = __dst[1];
            v16._uint64_t countAndFlagsBits = 0xD000000000000045;
            v16._object = (void *)0x8000000188340710;
            String.append(_:)(v16);
            id v39 = (id)*((void *)&v54 + 1);
            uint64_t v17 = one-time initialization token for defaultValue;
            swift_bridgeObjectRetain();
            if (v17 != -1) {
              swift_once();
            }
            ViewTraitCollection.value<A>(for:defaultValue:)();
            swift_bridgeObjectRelease();
            outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&__dst[3], (uint64_t)&v33);
            outlined retain of PlatformItem.PrimaryContent?(&v33, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of PlatformItem.PrimaryContent?);
            outlined destroy of PlatformItem((uint64_t)__dst);
            outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v33, (uint64_t)&v39);
            if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)&v39) == 1
              || (id v18 = v39,
                  id v19 = v39,
                  outlined retain of PlatformItem.PrimaryContent?(&v33, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of PlatformItem.PrimaryContent?), !v18))
            {
              uint64_t v26 = 0;
              unint64_t v27 = 0xE000000000000000;
            }
            else
            {
              id v20 = objc_msgSend(v19, sel_string);

              uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              char v23 = v22;

              __dst[0] = 39;
              __dst[1] = 0xE100000000000000;
              v24._uint64_t countAndFlagsBits = v21;
              v24._object = v23;
              String.append(_:)(v24);
              v25._uint64_t countAndFlagsBits = 8231;
              v25._object = (void *)0xE200000000000000;
              String.append(_:)(v25);
              swift_bridgeObjectRelease();
              uint64_t v26 = __dst[0];
              unint64_t v27 = __dst[1];
            }
            unint64_t v28 = v27;
            String.append(_:)(*(Swift::String *)&v26);
            swift_bridgeObjectRelease();
            v29._uint64_t countAndFlagsBits = 0xD000000000000090;
            v29._object = (void *)0x8000000188340760;
            String.append(_:)(v29);
            MEMORY[0x18C112B90](v31, v32);
            swift_bridgeObjectRelease();
            goto LABEL_6;
          }
          outlined consume of TabCustomizationID?(v3, v4, v5);
        }
        outlined destroy of TabItem((uint64_t)&v46);
      }
LABEL_6:
      outlined destroy of TabItem((uint64_t)v53);
LABEL_7:
      v2 += 272;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
}

uint64_t TabViewCustomization.subscript.setter(unsigned __int8 a1, uint64_t a2, uint64_t a3, char a4)
{
  int v8 = a1;
  char v9 = a4 & 1;
  unsigned int v10 = (uint64_t *)(v4 + *(int *)(type metadata accessor for TabViewCustomization() + 20));
  if (v8)
  {
    uint64_t v11 = *v10;
    if (*(void *)(*v10 + 16) && (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v9), (v13 & 1) != 0)) {
      __int16 v14 = *(unsigned __int8 *)(*(void *)(v11 + 56) + 2 * v12 + 1);
    }
    else {
      __int16 v14 = 0;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19[0] = *v10;
    *unsigned int v10 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1 | (unsigned __int16)(v14 << 8), a2, a3, v9, isUniquelyReferenced_nonNull_native);
    *unsigned int v10 = v19[0];
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = specialized Dictionary.subscript.modify(v19, a2, a3, v9);
    if (*v16 != 3) {
      *Swift::String v16 = 0;
    }
    ((void (*)(void *, void))v17)(v19, 0);
  }
  return outlined consume of TabCustomizationID.Base();
}

uint64_t TabViewCustomization.subscript.setter(__int16 a1, uint64_t a2, uint64_t a3, char a4)
{
  int v8 = a1;
  char v9 = a4 & 1;
  unsigned int v10 = (uint64_t *)(v4 + *(int *)(type metadata accessor for TabViewCustomization() + 20));
  if (v8)
  {
    uint64_t v11 = *v10;
    if (*(void *)(*v10 + 16) && (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v9), (v13 & 1) != 0)) {
      __int16 v14 = *(unsigned __int8 *)(*(void *)(v11 + 56) + 2 * v12);
    }
    else {
      __int16 v14 = 0;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19[0] = *v10;
    *unsigned int v10 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14 | (a1 << 8), a2, a3, v9, isUniquelyReferenced_nonNull_native);
    *unsigned int v10 = v19[0];
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = specialized Dictionary.subscript.modify(v19, a2, a3, v9);
    if (*v16 != 3) {
      v16[1] = 0;
    }
    ((void (*)(void *, void))v17)(v19, 0);
  }
  return outlined consume of TabCustomizationID.Base();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance TabViewCustomization.Key@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  type metadata accessor for Binding<TabViewCustomization>?(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static TabViewCustomization.Key.defaultValue);
  return _s7SwiftUI20TabViewCustomizationVWOcTm_0(v3, a1, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
}

uint64_t (*TabViewCustomization.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v3;
  *(void *)a1 = a2;
  uint64_t v7 = *(void *)(v3 + *(int *)(type metadata accessor for TabViewCustomization() + 20));
  if (*(void *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, 0);
    char v9 = 0;
    if (v10) {
      char v9 = *(unsigned char *)(*(void *)(v7 + 56) + 2 * v8);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v9 = 0;
  }
  *(unsigned char *)(a1 + 24) = v9;
  return TabSidebarCustomization.subscript.modify;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TabViewCustomization.CodingKeys()
{
  uint64_t v1 = 0x7453626154726570;
  if (*v0 != 1) {
    uint64_t v1 = 0x6974636553726570;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x696669746E656469;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TabViewCustomization.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TabViewCustomization.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabViewCustomization.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabViewCustomization.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t TabViewCustomization.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedEncodingContainer<TabViewCustomization.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabViewCustomization.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys, (uint64_t)&unk_1ED432D60, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for TabViewCustomization();
    uint64_t v14 = *(void *)(v3 + *(int *)(v10 + 20));
    char v13 = 1;
    type metadata accessor for [TabCustomizationID : TabCustomizationEntry](0, &lazy cache variable for type metadata for [TabCustomizationID : TabCustomizationEntry]);
    lazy protocol witness table accessor for type [TabCustomizationID : TabCustomizationEntry] and conformance <> [A : B](&lazy protocol witness table cache variable for type [TabCustomizationID : TabCustomizationEntry] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID, (void (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry and conformance TabCustomizationEntry);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v14 = *(void *)(v3 + *(int *)(v10 + 24));
    char v13 = 2;
    type metadata accessor for [TabCustomizationID : TabCustomizationEntry](0, &lazy cache variable for type metadata for [TabCustomizationID : TabSectionCustomizationEntry]);
    lazy protocol witness table accessor for type [TabCustomizationID : TabSectionCustomizationEntry] and conformance <> [A : B](&lazy protocol witness table cache variable for type [TabCustomizationID : TabSectionCustomizationEntry] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID, (void (*)(void))lazy protocol witness table accessor for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t TabViewCustomization.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v31 = *(void *)(v3 - 8);
  uint64_t v32 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v33 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<TabViewCustomization.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabViewCustomization.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys, (uint64_t)&unk_1ED432D60, MEMORY[0x1E4FBBDC0]);
  uint64_t v34 = v5;
  uint64_t v30 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v27 - v6;
  uint64_t v8 = type metadata accessor for TabViewCustomization();
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v12 = *(int *)(v9 + 28);
  uint64_t v13 = MEMORY[0x1E4FBC860];
  *(void *)&v11[v12] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v14 = *(int *)(v9 + 32);
  *(void *)&v11[v14] = specialized Dictionary.init(dictionaryLiteral:)(v13);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys();
  int v15 = v7;
  uint64_t v16 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v16)
  {
    uint64_t v35 = v12;
    uint64_t v17 = v30;
    uint64_t v18 = v31;
    uint64_t v28 = v14;
    LOBYTE(v37) = 0;
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v19 = v32;
    id v20 = v33;
    uint64_t v21 = v15;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v11, v20, v19);
    type metadata accessor for [TabCustomizationID : TabCustomizationEntry](0, &lazy cache variable for type metadata for [TabCustomizationID : TabCustomizationEntry]);
    char v36 = 1;
    lazy protocol witness table accessor for type [TabCustomizationID : TabCustomizationEntry] and conformance <> [A : B](&lazy protocol witness table cache variable for type [TabCustomizationID : TabCustomizationEntry] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID, (void (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry and conformance TabCustomizationEntry);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v22 = v37;
    uint64_t v23 = v35;
    swift_bridgeObjectRelease();
    *(void *)&v11[v23] = v22;
    type metadata accessor for [TabCustomizationID : TabCustomizationEntry](0, &lazy cache variable for type metadata for [TabCustomizationID : TabSectionCustomizationEntry]);
    char v36 = 2;
    lazy protocol witness table accessor for type [TabCustomizationID : TabSectionCustomizationEntry] and conformance <> [A : B](&lazy protocol witness table cache variable for type [TabCustomizationID : TabSectionCustomizationEntry] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID, (void (*)(void))lazy protocol witness table accessor for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v34);
    uint64_t v25 = v37;
    uint64_t v26 = v28;
    swift_bridgeObjectRelease();
    *(void *)&v11[v26] = v25;
    _s7SwiftUI20TabViewCustomizationVWOcTm_0((uint64_t)v11, v29, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of TabViewCustomization((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TabViewCustomization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(*(void *)(a1 + *(int *)(a3 + 20)), *(void *)(a2 + *(int *)(a3 + 20))) & 1) == 0)
  {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(void *)(a2 + v6);

  return specialized static Dictionary<>.== infix(_:_:)(v7, v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TabViewCustomization@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TabViewCustomization.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TabViewCustomization(void *a1)
{
  return TabViewCustomization.encode(to:)(a1);
}

void TabSectionCustomizationEntry.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = (unsigned __int8 *)(a2 + 48);
    do
    {
      unsigned int v5 = *v4;
      v4 += 24;
      Hasher._combine(_:)(v5);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of TabCustomizationID.Base();
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
}

uint64_t TabSectionCustomizationEntry.encode(to:)(void *a1, uint64_t a2)
{
  type metadata accessor for KeyedEncodingContainer<TabViewCustomization.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabSectionCustomizationEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys, (uint64_t)&unk_1ED454680, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v10 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[1] = a2;
  type metadata accessor for [Any](0, &lazy cache variable for type metadata for [TabCustomizationID], (uint64_t)&type metadata for TabCustomizationID, MEMORY[0x1E4FBB320]);
  _sSay7SwiftUI18TabCustomizationIDVGSayxGSEsSERzlWlTm_0(&lazy protocol witness table cache variable for type [TabCustomizationID] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t TabCustomizationEntry.Visibility.encode(to:)(void *a1, int a2)
{
  int v28 = a2;
  Swift::UInt v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDE0];
  type metadata accessor for KeyedEncodingContainer<TabViewCustomization.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabCustomizationEntry.Visibility.HiddenCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys, (uint64_t)&unk_1ED4371B0, MEMORY[0x1E4FBBDE0]);
  uint64_t v26 = *(void *)(v4 - 8);
  uint64_t v27 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v25 = (char *)&v21 - v5;
  type metadata accessor for KeyedEncodingContainer<TabViewCustomization.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabCustomizationEntry.Visibility.VisibleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys, (uint64_t)&unk_1ED4371D0, v3);
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v22 = (char *)&v21 - v7;
  type metadata accessor for KeyedEncodingContainer<TabViewCustomization.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabCustomizationEntry.Visibility.AutomaticCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys, (uint64_t)&unk_1ED4371F0, v3);
  uint64_t v9 = v8;
  uint64_t v21 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v21 - v10;
  type metadata accessor for KeyedEncodingContainer<TabViewCustomization.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabCustomizationEntry.Visibility.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys, (uint64_t)&unk_1ED437120, v3);
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v21 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((_BYTE)v28)
  {
    if (v28 == 1)
    {
      char v30 = 1;
      lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys();
      uint64_t v17 = v22;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v23;
      uint64_t v18 = v24;
    }
    else
    {
      char v31 = 2;
      lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys();
      uint64_t v17 = v25;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v26;
      uint64_t v18 = v27;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
  }
  else
  {
    char v29 = 0;
    lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabSectionCustomizationEntry.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabSectionCustomizationEntry.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

void *protocol witness for Decodable.init(from:) in conformance TabSectionCustomizationEntry@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = specialized TabSectionCustomizationEntry.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TabSectionCustomizationEntry(void *a1)
{
  return TabSectionCustomizationEntry.encode(to:)(a1, *v1);
}

void protocol witness for Hashable.hash(into:) in conformance TabSectionCustomizationEntry(uint64_t a1)
{
  TabSectionCustomizationEntry.hash(into:)(a1, *v1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationEntry.Visibility.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabCustomizationEntry.Visibility.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationEntry.Visibility.HiddenCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabCustomizationEntry.Visibility.HiddenCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationEntry.Visibility.VisibleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabCustomizationEntry.Visibility.VisibleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TabCustomizationEntry.Visibility@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized TabCustomizationEntry.Visibility.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TabCustomizationEntry.Visibility(void *a1)
{
  return TabCustomizationEntry.Visibility.encode(to:)(a1, *v1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TabCustomizationEntry()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TabCustomizationEntry()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TabCustomizationEntry()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t TabViewCustomizationTransform.readValue(from:key:read:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X8>)
{
  *a4 = 1;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v7, (uint64_t)&v13);
  }
  else
  {
    long long v13 = 0u;
    long long v14 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v12);
  if (*((void *)&v14 + 1))
  {
    uint64_t result = swift_dynamicCast();
    if (result)
    {
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      *(void *)(a5 + 24) = type metadata accessor for TabViewCustomization();
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)a5);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type TabViewCustomization and conformance TabViewCustomization, (void (*)(uint64_t))type metadata accessor for TabViewCustomization);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      outlined consume of Data._Representation(a2, a3);
      return swift_release();
    }
  }
  else
  {
    uint64_t result = outlined destroy of Any?((uint64_t)&v13);
  }
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  return result;
}

void static TabViewCustomizationTransform.readValue(from:key:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (void *)MEMORY[0x18C115780](a2, a3);
  id v7 = objc_msgSend(a1, sel_dataForKey_, v6);

  if (v7)
  {
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    *(void *)(a4 + 24) = type metadata accessor for TabViewCustomization();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)a4);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type TabViewCustomization and conformance TabViewCustomization, (void (*)(uint64_t))type metadata accessor for TabViewCustomization);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v8, v10);
    swift_release();
  }
  else
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TabCustomizationEntry.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TabCustomizationEntry.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TabCustomizationEntry.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TabCustomizationEntry.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TabCustomizationEntry.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TabCustomizationEntry.CodingKeys.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TabCustomizationEntry.CodingKeys(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x696C696269736976;
  if (*v1) {
    unint64_t v2 = 0xD000000000000010;
  }
  unint64_t v3 = 0x8000000188326030;
  if (!*v1) {
    unint64_t v3 = 0xEA00000000007974;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TabCustomizationEntry.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0x696C696269736976;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TabCustomizationEntry.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TabCustomizationEntry.CodingKeys.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationEntry.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabCustomizationEntry.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t TabCustomizationEntry.encode(to:)(void *a1, __int16 a2)
{
  type metadata accessor for KeyedEncodingContainer<TabViewCustomization.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabCustomizationEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys, (uint64_t)&unk_1ED437090, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v9 = (char *)&v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = a2;
  char v14 = 0;
  lazy protocol witness table accessor for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v13 = HIBYTE(a2);
    char v12 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TabCustomizationEntry@<X0>(void *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result = specialized TabCustomizationEntry.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TabCustomizationEntry(void *a1)
{
  return TabCustomizationEntry.encode(to:)(a1, *v1);
}

unint64_t *specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = (unint64_t *)isStackAllocationSafe;
  v9[1] = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = specialized closure #1 in _NativeDictionary.filter(_:)((void *)((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, (uint64_t)v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v2 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v7, v4, (uint64_t)v2);
    MEMORY[0x18C119C60](v7, -1, -1);
  }
  return v2;
}

unint64_t *specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10) {
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if ((*(unsigned char *)(*(void *)(a3 + 48) + 24 * v12 + 16) & 1) == 0)
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
      }
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v10) {
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10) {
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if (*(unsigned char *)(*(void *)(a3 + 56) + 248 * v12) == 1)
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
      }
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v10) {
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewCustomization.CodingKeys and conformance TabViewCustomization.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationEntry and conformance TabCustomizationEntry()
{
  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry and conformance TabCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry and conformance TabCustomizationEntry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry and conformance TabCustomizationEntry);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry and conformance TabCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry and conformance TabCustomizationEntry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry and conformance TabCustomizationEntry);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry and conformance TabCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry and conformance TabCustomizationEntry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry and conformance TabCustomizationEntry);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry()
{
  unint64_t result = lazy protocol witness table cache variable for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSectionCustomizationEntry and conformance TabSectionCustomizationEntry);
  }
  return result;
}

uint64_t outlined init with take of TabViewCustomization(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TabViewCustomization();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for TransformBox<TabViewCustomizationTransform>()
{
  if (!lazy cache variable for type metadata for TransformBox<TabViewCustomizationTransform>)
  {
    unint64_t v0 = type metadata accessor for TransformBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TransformBox<TabViewCustomizationTransform>);
    }
  }
}

uint64_t sub_188149954@<X0>(uint64_t *a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t result = TabViewCustomization.subscript.getter(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_188149984(unsigned __int8 *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return keypath_setTm_1(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))TabViewCustomization.subscript.setter);
}

uint64_t sub_18814999C()
{
  return 0;
}

uint64_t sub_1881499AC@<X0>(uint64_t *a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t result = TabViewCustomization.subscript.getter(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1881499DC(unsigned __int8 *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return keypath_setTm_1(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))TabViewCustomization.subscript.setter);
}

uint64_t keypath_setTm_1(unsigned __int8 *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, void))
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  uint64_t v8 = *a1;
  swift_bridgeObjectRetain();
  return a5(v8, v6, v7, 0);
}

uint64_t sub_188149A50()
{
  return 0;
}

uint64_t sub_188149A60@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = TabViewCustomization.subscript.getter(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_188149A94()
{
  return 0;
}

uint64_t *initializeBufferWithCopyOfBuffer for TabViewCustomization(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for TabViewCustomization(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TabViewCustomization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TabViewCustomization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TabViewCustomization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for TabViewCustomization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TabViewCustomization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_188149E6C);
}

uint64_t sub_188149E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for TabViewCustomization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_188149F40);
}

uint64_t sub_188149F40(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for TabViewCustomization()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *type metadata accessor for TabViewCustomizationTransform()
{
  return &unk_1ED457130;
}

ValueMetadata *type metadata accessor for TabSectionCustomizationEntry()
{
  return &type metadata for TabSectionCustomizationEntry;
}

uint64_t storeEnumTagSinglePayload for TabCustomizationEntry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65282 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 254;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18814A184);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TabCustomizationEntry()
{
  return &type metadata for TabCustomizationEntry;
}

void *type metadata accessor for TabViewCustomization.CodingKeys()
{
  return &unk_1ED432D60;
}

uint64_t specialized TabViewCustomizationTransform.writeValue(_:to:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TabViewCustomization?(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TabViewCustomization();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  int64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)v24);
  int v14 = swift_dynamicCast();
  int64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v14)
  {
    v15(v9, 0, 1, v10);
    outlined init with take of TabViewCustomization((uint64_t)v9, (uint64_t)v13);
    TabViewCustomization.removeTransientIdentifiers()();
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type TabViewCustomization and conformance TabViewCustomization, (void (*)(uint64_t))type metadata accessor for TabViewCustomization);
    uint64_t v18 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v20 = v19;
    swift_release();
    *(void *)&long long v22 = a3;
    *((void *)&v22 + 1) = a4;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (v20 >> 60 == 15)
    {
      long long v22 = 0u;
      long long v23 = 0u;
    }
    else
    {
      *((void *)&v23 + 1) = MEMORY[0x1E4F277C0];
      *(void *)&long long v22 = v18;
      *((void *)&v22 + 1) = v20;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v22, (uint64_t)v24);
    uint64_t v16 = (uint64_t (*)(void))type metadata accessor for TabViewCustomization;
    uint64_t v17 = (uint64_t)v13;
  }
  else
  {
    v15(v9, 1, 1, v10);
    uint64_t v16 = (uint64_t (*)(void))type metadata accessor for TabViewCustomization?;
    uint64_t v17 = (uint64_t)v9;
  }
  return outlined destroy of TabViewCustomization(v17, v16);
}

uint64_t specialized TabCustomizationEntry.Visibility.init(from:)(uint64_t a1)
{
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDC0];
  type metadata accessor for KeyedEncodingContainer<TabViewCustomization.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabCustomizationEntry.Visibility.HiddenCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys, (uint64_t)&unk_1ED4371B0, MEMORY[0x1E4FBBDC0]);
  uint64_t v30 = v3;
  uint64_t v28 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v33 = (char *)&v25 - v4;
  type metadata accessor for KeyedEncodingContainer<TabViewCustomization.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabCustomizationEntry.Visibility.VisibleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys, (uint64_t)&unk_1ED4371D0, v2);
  uint64_t v29 = v5;
  uint64_t v27 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v32 = (char *)&v25 - v6;
  type metadata accessor for KeyedEncodingContainer<TabViewCustomization.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabCustomizationEntry.Visibility.AutomaticCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys, (uint64_t)&unk_1ED4371F0, v2);
  uint64_t v8 = v7;
  uint64_t v26 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v25 - v9;
  type metadata accessor for KeyedEncodingContainer<TabViewCustomization.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabCustomizationEntry.Visibility.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys, (uint64_t)&unk_1ED437120, v2);
  uint64_t v12 = v11;
  uint64_t v31 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  int v14 = (char *)&v25 - v13;
  __swift_project_boxed_opaque_existential_1((void *)a1, *(void *)(a1 + 24));
  lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys();
  uint64_t v15 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15) {
    goto LABEL_7;
  }
  uint64_t v25 = v8;
  uint64_t v16 = v32;
  uint64_t v17 = v33;
  uint64_t v34 = a1;
  uint64_t v18 = v14;
  uint64_t v19 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v19 + 16) != 1)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    long long v23 = v22;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *long long v23 = &type metadata for TabCustomizationEntry.Visibility;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, *MEMORY[0x1E4FBBA70], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v12);
    a1 = v34;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1(a1);
    return a1;
  }
  a1 = *(unsigned __int8 *)(v19 + 32);
  if (*(unsigned char *)(v19 + 32))
  {
    if (a1 == 1)
    {
      char v36 = 1;
      lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v31;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v29);
    }
    else
    {
      char v37 = 2;
      lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v31;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v30);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v35 = 0;
    lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v25);
    swift_bridgeObjectRelease();
    uint64_t v20 = v31;
  }
  (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v12);
  __swift_destroy_boxed_opaque_existential_1(v34);
  return a1;
}

uint64_t specialized TabCustomizationEntry.init(from:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<TabViewCustomization.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabCustomizationEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys, (uint64_t)&unk_1ED437090, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v11 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v14 = 0;
  lazy protocol witness table accessor for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v8 = v15;
  char v12 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v9 = v13;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v8 | (v9 << 8);
}

void *specialized TabSectionCustomizationEntry.init(from:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<TabViewCustomization.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabSectionCustomizationEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys, (uint64_t)&unk_1ED454680, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v11 - v6;
  int v8 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys();
  int v9 = v8;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    type metadata accessor for [Any](0, &lazy cache variable for type metadata for [TabCustomizationID], (uint64_t)&type metadata for TabCustomizationID, MEMORY[0x1E4FBB320]);
    _sSay7SwiftUI18TabCustomizationIDVGSayxGSEsSERzlWlTm_0(&lazy protocol witness table cache variable for type [TabCustomizationID] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    int v9 = (void *)v11[1];
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v9;
}

uint64_t specialized TabViewCustomization.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7453626154726570 && a2 == 0xEB00000000657461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6974636553726570 && a2 == 0xEF65746174536E6FLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t lazy protocol witness table accessor for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.CodingKeys and conformance TabCustomizationEntry.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility()
{
  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility and conformance TabCustomizationEntry.Visibility);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSectionCustomizationEntry.CodingKeys and conformance TabSectionCustomizationEntry.CodingKeys);
  }
  return result;
}

uint64_t _sSay7SwiftUI18TabCustomizationIDVGSayxGSEsSERzlWlTm_0(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for [Any](255, &lazy cache variable for type metadata for [TabCustomizationID], (uint64_t)&type metadata for TabCustomizationID, MEMORY[0x1E4FBB320]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of TabViewCustomization(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized static TabViewCustomizationTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TabViewCustomization?(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unsigned __int8 v13 = (char *)v29 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v29 - v15;
  outlined init with copy of Any?(a1, (uint64_t)v30);
  v29[0] = a3;
  if (v31)
  {
    uint64_t v17 = type metadata accessor for TabViewCustomization();
    int v18 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, v18 ^ 1u, 1, v17);
  }
  else
  {
    outlined destroy of Any?((uint64_t)v30);
    uint64_t v17 = type metadata accessor for TabViewCustomization();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  }
  type metadata accessor for TabViewCustomization();
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48);
  if (!v19(v16, 1, v17)) {
    TabViewCustomization.removeTransientIdentifiers()();
  }
  _s7SwiftUI20TabViewCustomizationVWOcTm_0((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for TabViewCustomization?);
  unsigned int v20 = v19(v13, 1, v17);
  outlined destroy of TabViewCustomization((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for TabViewCustomization?);
  if (v20 == 1)
  {
    uint64_t v21 = (void *)MEMORY[0x18C115780](v29[0], a4);
    objc_msgSend(a2, sel_removeObjectForKey_, v21);
  }
  else
  {
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    _s7SwiftUI20TabViewCustomizationVWOcTm_0((uint64_t)v16, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TabViewCustomization?);
    lazy protocol witness table accessor for type TabViewCustomization? and conformance <A> A?();
    long long v22 = a2;
    uint64_t v23 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v25 = v24;
    outlined destroy of TabViewCustomization((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TabViewCustomization?);
    swift_release();
    outlined copy of Data._Representation(v23, v25);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v23, v25);
    uint64_t v27 = (void *)MEMORY[0x18C115780](v29[0], a4);
    objc_msgSend(v22, sel_setObject_forKey_, isa, v27);
    swift_unknownObjectRelease();

    outlined consume of Data?(v23, v25);
  }
  return outlined destroy of TabViewCustomization((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for TabViewCustomization?);
}

unint64_t lazy protocol witness table accessor for type TabViewCustomization? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type TabViewCustomization? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type TabViewCustomization? and conformance <A> A?)
  {
    type metadata accessor for TabViewCustomization?(255);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type TabViewCustomization and conformance TabViewCustomization, (void (*)(uint64_t))type metadata accessor for TabViewCustomization);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewCustomization? and conformance <A> A?);
  }
  return result;
}

ValueMetadata *type metadata accessor for TabViewCustomization.Key()
{
  return &type metadata for TabViewCustomization.Key;
}

unsigned char *storeEnumTagSinglePayload for TabSectionCustomizationEntry.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x18814B934);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for TabSectionCustomizationEntry.CodingKeys()
{
  return &unk_1ED454680;
}

unsigned char *storeEnumTagSinglePayload for TabCustomizationEntry.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18814BA38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TabCustomizationEntry.CodingKeys()
{
  return &unk_1ED437090;
}

ValueMetadata *type metadata accessor for TabCustomizationEntry.Visibility()
{
  return &type metadata for TabCustomizationEntry.Visibility;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.HiddenCodingKeys and conformance TabCustomizationEntry.Visibility.HiddenCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.VisibleCodingKeys and conformance TabCustomizationEntry.Visibility.VisibleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.AutomaticCodingKeys and conformance TabCustomizationEntry.Visibility.AutomaticCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationEntry.Visibility.CodingKeys and conformance TabCustomizationEntry.Visibility.CodingKeys);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<TabViewCustomization.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for SceneStorage<TabViewCustomization>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for TabViewCustomization.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18814BFD0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TabCustomizationEntry.Visibility.CodingKeys()
{
  return &unk_1ED437120;
}

void *type metadata accessor for TabCustomizationEntry.Visibility.AutomaticCodingKeys()
{
  return &unk_1ED4371F0;
}

void *type metadata accessor for TabCustomizationEntry.Visibility.VisibleCodingKeys()
{
  return &unk_1ED4371D0;
}

void *type metadata accessor for TabCustomizationEntry.Visibility.HiddenCodingKeys()
{
  return &unk_1ED4371B0;
}

uint64_t outlined copy of PlatformItem.PrimaryContent?(uint64_t result, void *a2, void *a3, void *a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  if (result != 1)
  {
    uint64_t v30 = (void *)result;
    id v33 = a3;
    id v34 = v30;
    id v35 = a2;
    outlined copy of Image.Resolved?(a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22,
      a23,
      a24,
      a25);
    return swift_retain();
  }
  return result;
}

void *outlined retain of PlatformItem.PrimaryContent?(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25],
    a1[26]);
  return a1;
}

uint64_t View.interactionRepresentable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for InteractionRepresentableModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for InteractionRepresentableModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of _UIInteractionRepresentable.makeUIInteraction()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of _UIInteractionRepresentable.updateUIInteraction(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t type metadata completion function for _UIInteractionView()
{
  return swift_initClassMetadata2();
}

uint64_t InteractionRepresentableEffect.effectValue(size:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (uint64_t *)swift_allocObject();
  v5[5] = a1;
  v5[6] = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5 + 2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(boxed_opaque_existential_1, v2, a1);
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 3;
  return result;
}

uint64_t protocol witness for static _RendererEffect.isolatesChildPosition.getter in conformance InteractionRepresentableEffect<A>()
{
  return MEMORY[0x1F40FE838]();
}

uint64_t protocol witness for static _RendererEffect.disabledForFlattenedContent.getter in conformance InteractionRepresentableEffect<A>()
{
  return protocol witness for static PreferenceKey._isReadableByHost.getter in conformance AccessibilityLargeContentViewTree.Key();
}

uint64_t protocol witness for static _RendererEffect.preservesEmptyContent.getter in conformance InteractionRepresentableEffect<A>()
{
  return MEMORY[0x1F40FE838]();
}

uint64_t protocol witness for static _RendererEffect.isScrapeable.getter in conformance InteractionRepresentableEffect<A>()
{
  return MEMORY[0x1F40FE838]();
}

uint64_t protocol witness for _RendererEffect.scrapeableContent.getter in conformance InteractionRepresentableEffect<A>()
{
  return MEMORY[0x1F40FE840]();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance InteractionRepresentableEffect<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE470](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance InteractionRepresentableEffect<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance InteractionRepresentableEffect<A>()
{
  return static RendererEffect._viewListCount(inputs:body:)();
}

void InteractionRepresentableEffect.updatePlatformGroup(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  type metadata accessor for _UIInteractionView();
  swift_unknownObjectRetain();
  uint64_t v3 = swift_dynamicCastClass();
  if (v3 && (unsigned int v4 = *(void **)(v3 + direct field offset for _UIInteractionView.managedInteraction)) != 0)
  {
    uint64_t v5 = *(void (**)(void))(v2 + 24);
    id v6 = v4;
    v5();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
  }
}

uint64_t protocol witness for PlatformGroupFactory.makePlatformGroup() in conformance InteractionRepresentableEffect<A>(uint64_t a1)
{
  specialized InteractionRepresentableEffect.makePlatformGroup()(a1);

  return swift_unknownObjectRetain();
}

uint64_t protocol witness for PlatformGroupFactory.features.getter in conformance InteractionRepresentableEffect<A>()
{
  return MEMORY[0x1F40FF928]();
}

uint64_t protocol witness for AnyViewFactory.viewType.getter in conformance InteractionRepresentableEffect<A>()
{
  return specialized InteractionRepresentableEffect.viewType.getter();
}

uint64_t protocol witness for AnyViewFactory.encoding() in conformance InteractionRepresentableEffect<A>()
{
  return MEMORY[0x1F40FE380]();
}

double static InteractionRepresentableModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v35 = a3;
  char v36 = a5;
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  int v6 = *a1;
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v62 = *(_OWORD *)(a2 + 32);
  long long v63 = v7;
  long long v64 = *(_OWORD *)(a2 + 64);
  int v65 = *(_DWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 16);
  long long v60 = *(_OWORD *)a2;
  long long v61 = v8;
  LODWORD(v51) = v6;
  type metadata accessor for InteractionRepresentableModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(a4 - 8) + 64)) {
    closure #1 in static InteractionRepresentableModifier._makeView(modifier:inputs:body:)(1, a4);
  }
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  long long v53 = v62;
  long long v54 = v63;
  long long v55 = v64;
  LODWORD(v56) = v65;
  HIDWORD(v52) = HIDWORD(v61);
  uint64_t v10 = _ViewInputs.viewPhase.getter();
  long long v51 = __PAIR64__(v10, OffsetAttribute2);
  *(void *)&long long v52 = 0;
  DWORD2(v52) = 0;
  MEMORY[0x1F4188790](v10);
  uint64_t v31 = type metadata accessor for InteractionRepresentableEffect();
  uint64_t v32 = type metadata accessor for InteractionEffect();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v51, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v30, v32, MEMORY[0x1E4FBC248], v11, MEMORY[0x1E4FBC278], v12);

  int v13 = v49[0];
  _GraphValue.init(_:)();
  long long v53 = v62;
  long long v54 = v63;
  long long v55 = v64;
  LODWORD(v56) = v65;
  long long v51 = v60;
  long long v52 = v61;
  static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
  uint64_t v38 = v63;
  int v39 = DWORD2(v63);
  *(void *)&long long v51 = v63;
  DWORD2(v51) = DWORD2(v63);
  uint64_t v14 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (v14 & 1) != 0 && (MEMORY[0x18C111F70](v14))
  {
    long long v53 = v62;
    long long v54 = v63;
    long long v55 = v64;
    LODWORD(v56) = v65;
    long long v51 = v60;
    long long v52 = v61;
    outlined retain of _ViewInputs((uint64_t)&v60);
    closure #2 in static InteractionRepresentableModifier._makeView(modifier:inputs:body:)(1);
    int v15 = AGGraphCreateOffsetAttribute2();
    v49[0] = v37;
    int v16 = _ViewOutputs.viewResponders()();
    swift_getAssociatedTypeWitness();
    id v17 = InteractionRepresentableResponderFilter.init(inputs:view:children:)((uint64_t *)&v51, v15, v16, (uint64_t)v49);
    uint64_t v35 = (uint64_t)&v35;
    uint64_t v48 = v50;
    long long v46 = v49[6];
    long long v47 = v49[7];
    long long v42 = v49[2];
    long long v43 = v49[3];
    long long v44 = v49[4];
    long long v45 = v49[5];
    long long v40 = v49[0];
    long long v41 = v49[1];
    MEMORY[0x1F4188790](v17);
    uint64_t v18 = type metadata accessor for InteractionRepresentableResponderFilter();
    uint64_t WitnessTable = v18;
    uint64_t v34 = swift_getWitnessTable();
    outlined retain of InteractionRepresentableResponderFilter<A.UIInteractionType>((void **)v49);
    _sSay7SwiftUI13ViewResponderCGMaTm_5(0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v40, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_14, (uint64_t)&v31, v18, MEMORY[0x1E4FBC248], v19, MEMORY[0x1E4FBC278], v20);
    long long v57 = v46;
    long long v58 = v47;
    uint64_t v59 = v48;
    long long v53 = v42;
    long long v54 = v43;
    long long v55 = v44;
    long long v56 = v45;
    long long v51 = v40;
    long long v52 = v41;
    outlined release of InteractionRepresentableResponderFilter<A.UIInteractionType>((void **)&v51);
    LOBYTE(v40) = 0;
    _ViewOutputs.subscript.setter();
    outlined release of InteractionRepresentableResponderFilter<A.UIInteractionType>((void **)v49);
  }
  *(void *)&long long v51 = v38;
  DWORD2(v51) = v39;
  uint64_t v21 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (v21)
  {
    LODWORD(v51) = v13;
    MEMORY[0x1F4188790](v21);
    uint64_t v22 = type metadata accessor for AccessibilityBridgedInteraction();
    v30[0] = v22;
    v30[1] = swift_getWitnessTable();
    type metadata accessor for Attribute<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for Attribute<AccessibilityAttachmentModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v51, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_26, (uint64_t)(&v31 - 4), v22, MEMORY[0x1E4FBC248], v23, MEMORY[0x1E4FBC278], v24);
    _GraphValue.init(_:)();
    int v25 = v49[0];
    long long v26 = v37;
    *(void *)&long long v51 = v38;
    DWORD2(v51) = v39;
    swift_bridgeObjectRetain();
    char v27 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (v27) {
      specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v25, &v60, v26, *((unint64_t *)&v26 + 1), 0);
    }
    swift_bridgeObjectRelease();
    LOBYTE(v51) = (v27 & 1) == 0;
    _ViewOutputs.subscript.setter();
  }
  uint64_t v28 = v36;
  *char v36 = v37;
  double result = *((double *)&v37 + 1);
  v28[1] = *((void *)&v37 + 1);
  return result;
}

uint64_t closure #1 in static InteractionRepresentableModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  _OWORD v7[2] = type metadata accessor for InteractionRepresentableModifier();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t closure #2 in static InteractionRepresentableModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InteractionRepresentableEffect();
  uint64_t v3 = a1 + *(int *)(v2 + 40);
  _OWORD v7[2] = v2;
  swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for _UIInteractionView();
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v8, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v9;
}

id InteractionRepresentableResponderFilter.init(inputs:view:children:)@<X0>(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a1;
  int v6 = *((_DWORD *)a1 + 2);
  uint64_t v7 = a1[2];
  int v8 = *((_DWORD *)a1 + 6);
  int v9 = *((_DWORD *)a1 + 7);
  int v10 = *((_DWORD *)a1 + 9);
  uint64_t v12 = a1[5];
  uint64_t v11 = a1[6];
  int v27 = *((_DWORD *)a1 + 15);
  int v28 = *((_DWORD *)a1 + 8);
  int v23 = *((_DWORD *)a1 + 16);
  int v24 = *((_DWORD *)a1 + 14);
  int v22 = *((_DWORD *)a1 + 18);
  int v25 = *((_DWORD *)a1 + 19);
  int v26 = *((_DWORD *)a1 + 17);
  int v21 = *((_DWORD *)a1 + 20);
  id result = (id)AGSubgraphGetCurrent();
  id v18 = result;
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v17 = _ViewInputs.animatedPosition()();
    int v16 = _ViewInputs.animatedSize()();
    int v15 = _ViewInputs.transform.getter();
    int v29 = v6;
    swift_getKeyPath();
    int v14 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    id result = (id)swift_release();
    *(void *)a4 = v18;
    *(void *)(a4 + 8) = v5;
    *(_DWORD *)(a4 + 16) = v29;
    *(void *)(a4 + 24) = v7;
    *(_DWORD *)(a4 + 32) = v8;
    *(_DWORD *)(a4 + 36) = v9;
    *(_DWORD *)(a4 + 40) = v28;
    *(_DWORD *)(a4 + 44) = v10;
    *(void *)(a4 + 48) = v12;
    *(void *)(a4 + 56) = v11;
    *(_DWORD *)(a4 + 64) = v24;
    *(_DWORD *)(a4 + 68) = v27;
    *(_DWORD *)(a4 + 72) = v23;
    *(_DWORD *)(a4 + 76) = v26;
    *(_DWORD *)(a4 + 80) = v22;
    *(_DWORD *)(a4 + 84) = v25;
    *(_DWORD *)(a4 + 88) = v21;
    *(_DWORD *)(a4 + 92) = a2;
    *(_DWORD *)(a4 + 96) = v17;
    *(_DWORD *)(a4 + 100) = v16;
    *(_DWORD *)(a4 + 104) = v15;
    *(_DWORD *)(a4 + 108) = v14;
    *(_DWORD *)(a4 + 112) = a3;
    *(void *)(a4 + 120) = 0;
    *(void *)(a4 + 128) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance InteractionRepresentableModifier<A>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  return static InteractionRepresentableModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance InteractionRepresentableModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t InteractionRepresentableResponderFilter.layoutResponder.getter()
{
  if (*(void *)(v0 + 120))
  {
    uint64_t v1 = *(void *)(v0 + 120);
  }
  else
  {
    uint64_t v2 = v0;
    type metadata accessor for DefaultLayoutViewResponder();
    swift_allocObject();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v1 = DefaultLayoutViewResponder.init(inputs:)();
    *(void *)(v2 + 120) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t InteractionRepresentableResponderFilter.responder.getter()
{
  if (*(void *)(v0 + 128))
  {
    uint64_t v1 = *(void *)(v0 + 128);
  }
  else
  {
    uint64_t v1 = closure #1 in InteractionRepresentableResponderFilter.responder.getter((id *)v0);
    *(void *)(v0 + 128) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t closure #1 in InteractionRepresentableResponderFilter.responder.getter(id *a1)
{
  id v1 = *a1;
  AGGraphClearUpdate();
  id v2 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in closure #1 in InteractionRepresentableResponderFilter.responder.getter(&v4);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  return v4;
}

uint64_t closure #1 in closure #1 in InteractionRepresentableResponderFilter.responder.getter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for InteractionRepresentableResponderFilter();
  uint64_t v2 = InteractionRepresentableResponderFilter.layoutResponder.getter();
  type metadata accessor for PlatformUnaryViewResponder();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 224) = v2;
  swift_retain();
  uint64_t v4 = specialized UIViewResponder.init()(v3);
  swift_release();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_retain_n();
  swift_retain();
  swift_release();
  swift_weakAssign();
  swift_release_n();
  uint64_t result = swift_release_n();
  *a1 = v4;
  return result;
}

uint64_t InteractionRepresentableResponderFilter.updateValue()()
{
  InteractionRepresentableResponderFilter.responder.getter();
  type metadata accessor for _UIInteractionView();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  swift_release();
  InteractionRepresentableResponderFilter.responder.getter();
  AGGraphGetValue();
  swift_unknownObjectWeakAssign();
  swift_release();
  InteractionRepresentableResponderFilter.responder.getter();
  AGGraphGetValue();
  AGGraphGetValue();
  AGGraphGetValue();
  swift_retain();
  InteractionRepresentableResponderFilter.responder.getter();
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_release();
  InteractionRepresentableResponderFilter.layoutResponder.getter();
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if (v0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for Attribute<AccessibilityAttachmentModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_188351940;
    *(void *)(v2 + 32) = InteractionRepresentableResponderFilter.responder.getter();
    specialized Array._endMutation()();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t AccessibilityBridgedInteraction.updateValue()()
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = type metadata accessor for InteractionRepresentableEffect();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v14 - v2;
  uint64_t Value = AGGraphGetValue();
  char v6 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, Value, v0);
  if ((v6 & 1) != 0 || !AGGraphGetOutputValue())
  {
    uint64_t v7 = *(void **)&v3[*(int *)(v0 + 36)];
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    id v8 = v7;
    v14[1] = Dictionary.init(minimumCapacity:)();
    _sSay7SwiftUI13ViewResponderCGMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<(NSObject & UIInteraction)?>, (uint64_t (*)(uint64_t))type metadata accessor for (NSObject & UIInteraction)?, MEMORY[0x1E4F41090]);
    uint64_t v17 = v9;
    unint64_t v18 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<(NSObject & UIInteraction)?> and conformance AccessibilityPropertiesEntry<A>();
    uint64_t v15 = (uint64_t)v7;
    specialized Dictionary.subscript.setter((uint64_t)&v15, (uint64_t)&type metadata for AccessibilityProperties.UIKitBridgedInteractionKey);
    AccessibilityAttachment.init(properties:)();
    uint64_t v10 = v15;
    uint64_t v11 = v16;
    type metadata accessor for Attribute<AccessibilityAttachmentModifier>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v10;
    *(void *)(v12 + 24) = v11;
    uint64_t v15 = v12;
    uint64_t v16 = 0;
    AGGraphSetOutputValue();
    swift_release();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t InteractionEffect.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v40 = 0;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v36 = a1;
  uint64_t v41 = v3;
  uint64_t v5 = type metadata accessor for InteractionRepresentableEffect();
  uint64_t v37 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v35 - v6;
  uint64_t v8 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v9);
  int v39 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  int v13 = (char *)&v35 - v12;
  int v14 = *(_DWORD *)(v1 + 24);
  uint64_t Value = AGGraphGetValue();
  uint64_t v35 = v16;
  uint64_t v42 = v8;
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v38(v13, Value, v4);
  int v18 = *(_DWORD *)AGGraphGetValue() >> 1;
  uint64_t v19 = *(void **)(v1 + 8);
  if (v18 != v14)
  {

    *(void *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 24) = v18;
    goto LABEL_9;
  }
  int v20 = v17;
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    if (v19)
    {
LABEL_11:
      int v22 = v39;
      int v23 = *(char **)(v2 + 16);
      if (v23) {
        goto LABEL_14;
      }
      goto LABEL_12;
    }
LABEL_9:
    uint64_t v24 = type metadata accessor for MainActor();
    MEMORY[0x1F4188790](v24);
    uint64_t v25 = v41;
    *(&v35 - 4) = v4;
    *(&v35 - 3) = v25;
    *(&v35 - 2) = v2;
    *(&v35 - 1) = (uint64_t)v13;
    uint64_t result = specialized static MainActor.assumeIsolated<A>(_:file:line:)((uint64_t)partial apply for closure #1 in InteractionEffect.updateValue(), (uint64_t)(&v35 - 6));
    goto LABEL_11;
  }
  if (!v19) {
    goto LABEL_9;
  }
  if ((v35 | v20)) {
    goto LABEL_11;
  }
  uint64_t result = AGGraphCurrentAttributeWasModified();
  int v22 = v39;
  if ((result & 1) == 0) {
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v13, v4);
  }
  int v23 = *(char **)(v2 + 16);
  if (v23) {
    goto LABEL_14;
  }
LABEL_12:
  int v26 = *(void **)(v2 + 8);
  if (!v26) {
    goto LABEL_18;
  }
  swift_getAssociatedTypeWitness();
  int v27 = (objc_class *)type metadata accessor for _UIInteractionView();
  id v28 = v26;
  id v29 = objc_allocWithZone(v27);
  int v23 = _UIInteractionView.init(_:)((uint64_t)v28);
  *(void *)(v2 + 16) = v23;
LABEL_14:
  uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v38)(v22, v13, v4);
  uint64_t v30 = *(void **)(v2 + 8);
  if (v30)
  {
    uint64_t v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v42 + 32))(v7, v22, v4);
    *(void *)&v7[*(int *)(v5 + 36)] = v30;
    *(void *)&v7[*(int *)(v5 + 40)] = v23;
    MEMORY[0x1F4188790](v31);
    *(&v35 - 2) = v36;
    *(&v35 - 1) = swift_getWitnessTable();
    id v32 = v30;
    id v33 = v23;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v7, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v35 - 4), v5, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v34);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v13, v4);
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void InteractionEffect.destroy()()
{
  *(void *)(v0 + 8) = 0;
}

char *_UIInteractionView.__allocating_init(_:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return _UIInteractionView.init(_:)(a1);
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance InteractionEffect<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for InteractionRepresentableEffect();
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance InteractionEffect<A>()
{
}

char *_UIInteractionView.init(_:)(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[direct field offset for _UIInteractionView.managedInteraction] = 0;
  v6.receiver = v1;
  v6.super_class = ObjectType;
  uint64_t v4 = (char *)objc_msgSendSuper2(&v6, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(void *)&v4[direct field offset for _UIInteractionView.managedInteraction] = a1;
  swift_unknownObjectRelease();
  return v4;
}

id _UIInteractionView.init(coder:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[direct field offset for _UIInteractionView.managedInteraction] = 0;
  v6.receiver = v1;
  v6.super_class = ObjectType;
  id v4 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);

  return v4;
}

id @objc _UIInteractionView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return _UIInteractionView.init(coder:)(a3);
}

void @objc _UIInteractionView.init(frame:)()
{
}

uint64_t _UIInteractionView.__ivar_destroyer()
{
  return swift_unknownObjectRelease();
}

uint64_t @objc _UIInteractionView.__ivar_destroyer()
{
  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for _UIInteractionView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_18814E568()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for InteractionRepresentableModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for InteractionRepresentableModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18814E94CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in InteractionRepresentableModifier<A>()
{
  return &protocol witness table for InteractionRepresentableModifier<A>;
}

uint64_t base witness table accessor for AnyViewFactory in InteractionRepresentableEffect<A>()
{
  return swift_getWitnessTable();
}

void *specialized InteractionRepresentableEffect.makePlatformGroup()(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + *(int *)(a1 + 40));
  objc_msgSend(v2, sel_addInteraction_, *(void *)(v1 + *(int *)(a1 + 36)));
  return v2;
}

uint64_t specialized InteractionRepresentableEffect.viewType.getter()
{
  return type metadata accessor for InteractionRepresentableEffect();
}

uint64_t type metadata accessor for InteractionRepresentableEffect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for InteractionEffect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityBridgedInteraction()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for InteractionRepresentableResponderFilter()
{
  return __swift_instantiateGenericMetadata();
}

void **outlined retain of InteractionRepresentableResponderFilter<A.UIInteractionType>(void **a1)
{
  uint64_t v2 = *a1;
  swift_retain();
  id v3 = v2;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void **outlined release of InteractionRepresentableResponderFilter<A.UIInteractionType>(void **a1)
{
  uint64_t v2 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  return a1;
}

void specialized _UIInteractionView.init(frame:)()
{
}

uint64_t destroy for InteractionRepresentableResponderFilter(id *a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for InteractionRepresentableResponderFilter(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  uint64_t v7 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v7;
  id v8 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for InteractionRepresentableResponderFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_retain();
  swift_release();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for InteractionRepresentableResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  swift_release();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for InteractionRepresentableResponderFilter(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InteractionRepresentableResponderFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void destroy for InteractionEffect(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
}

uint64_t initializeWithCopy for InteractionEffect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  id v3 = *(void **)(a2 + 8);
  long long v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  id v5 = v3;
  id v6 = v4;
  return a1;
}

uint64_t assignWithCopy for InteractionEffect(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  long long v4 = *(void **)(a1 + 8);
  id v5 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  id v6 = v5;

  uint64_t v7 = *(void **)(a1 + 16);
  id v8 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v8;
  id v9 = v8;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for InteractionEffect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;

  long long v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for InteractionEffect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InteractionEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 28) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t type metadata completion function for InteractionRepresentableEffect()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for InteractionRepresentableEffect(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *int v4 = *a2;
    int v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unsigned int v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    int v11 = (void **)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v12 = *v11;
    *unsigned int v10 = *v11;
    int v13 = *(void **)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8) = v13;
    id v14 = v12;
    id v15 = v13;
  }
  return v4;
}

void destroy for InteractionRepresentableEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  int v4 = (id *)((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8);

  uint64_t v5 = *(void **)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t initializeWithCopy for InteractionRepresentableEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  id v8 = (void **)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *v8;
  *int v7 = *v8;
  unsigned int v10 = *(void **)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = v10;
  id v11 = v9;
  id v12 = v10;
  return a1;
}

uint64_t assignWithCopy for InteractionRepresentableEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  id v8 = (void **)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *v8;
  unsigned int v10 = *(void **)v7;
  *(void *)unint64_t v7 = *v8;
  v7 += 15;
  id v11 = v9;

  id v12 = *(void **)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v13 = *(void **)(v7 & 0xFFFFFFFFFFFFFFF8);
  *(void *)(v7 & 0xFFFFFFFFFFFFFFF8) = v12;
  id v14 = v12;

  return a1;
}

uint64_t assignWithTake for InteractionRepresentableEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  id v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void **)v7;
  *(void *)unint64_t v7 = *v8;
  v7 += 15;

  unsigned int v10 = *(void **)(v7 & 0xFFFFFFFFFFFFFFF8);
  *(void *)(v7 & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);

  return a1;
}

uint64_t getEnumTagSinglePayload for InteractionRepresentableEffect(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18814F6A0);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for InteractionRepresentableEffect(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              *uint64_t v19 = v20;
            }
            else
            {
              int v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x18814F8A4);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in InteractionRepresentableEffect<A>()
{
  return &protocol witness table for InteractionRepresentableEffect<A>;
}

uint64_t base witness table accessor for MultiViewModifier in InteractionRepresentableEffect<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in InteractionRepresentableEffect<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Animatable in InteractionRepresentableEffect<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _RendererEffect in InteractionRepresentableEffect<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in InteractionEffect<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in InteractionRepresentableResponderFilter<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityBridgedInteraction<A>()
{
  return swift_getWitnessTable();
}

void partial apply for closure #1 in InteractionEffect.updateValue()()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = (*(uint64_t (**)(void))(v0[3] + 16))(v0[2]);
  uint64_t v3 = *(void **)(v1 + 8);
  *(void *)(v1 + 8) = v2;
}

void type metadata accessor for (NSObject & UIInteraction)?(uint64_t a1)
{
}

unint64_t type metadata accessor for NSObject & UIInteraction()
{
  unint64_t result = lazy cache variable for type metadata for NSObject & UIInteraction;
  if (!lazy cache variable for type metadata for NSObject & UIInteraction)
  {
    type metadata accessor for NSObject();
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject & UIInteraction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<(NSObject & UIInteraction)?> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & UIInteraction)?> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & UIInteraction)?> and conformance AccessibilityPropertiesEntry<A>)
  {
    _sSay7SwiftUI13ViewResponderCGMaTm_5(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<(NSObject & UIInteraction)?>, (uint64_t (*)(uint64_t))type metadata accessor for (NSObject & UIInteraction)?, MEMORY[0x1E4F41090]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & UIInteraction)?> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

void type metadata accessor for Attribute<AccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_18814FB5C()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

void static ToolbarTitleDisplayMode.inline.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t View.toolbarTitleDisplayMode(_:)(char *a1)
{
  char v1 = *a1;
  *(unsigned char *)(swift_allocObject() + 16) = v1;
  View.transformPreference<A>(_:_:)();

  return swift_release();
}

void static ToolbarTitleDisplayMode.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static ToolbarTitleDisplayMode.large.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ToolbarTitleDisplayMode.inlineLarge.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t closure #1 in View.toolbarTitleDisplayMode(_:)(uint64_t result, unsigned __int8 a2)
{
  uint64_t v2 = *(void *)(result + 24);
  if (!v2)
  {
    uint64_t v3 = (unsigned char *)(result + 40);
    LOBYTE(v4) = *(unsigned char *)(result + 40);
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = 0;
    if (v4 != 5) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v2 == 1)
  {
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(void *)(result + 32) = 1;
    *(void *)(result + 40) = a2;
    *(void *)(result + 48) = 0;
    *(unsigned char *)(result + 56) = 3;
    return result;
  }
  uint64_t v3 = (unsigned char *)(result + 40);
  int v4 = *(unsigned __int8 *)(result + 40);
  if (v4 == 5)
  {
LABEL_7:
    LOBYTE(v4) = a2;
LABEL_8:
    *uint64_t v3 = v4;
    return result;
  }
  if (!*(void *)(result + 48)) {
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_18814FCE4()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ToolbarTitleDisplayMode()
{
  return &type metadata for ToolbarTitleDisplayMode;
}

uint64_t sub_18814FD08()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _PreferenceTransformModifier<NavigationTitleKey>()
{
  if (!lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationTitleKey>)
  {
    unint64_t v0 = type metadata accessor for _PreferenceTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationTitleKey>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ToolbarTitleDisplayMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18814FEA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarTitleDisplayMode.Role()
{
  return &type metadata for ToolbarTitleDisplayMode.Role;
}

unint64_t lazy protocol witness table accessor for type ToolbarTitleDisplayMode.Role and conformance ToolbarTitleDisplayMode.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarTitleDisplayMode.Role and conformance ToolbarTitleDisplayMode.Role;
  if (!lazy protocol witness table cache variable for type ToolbarTitleDisplayMode.Role and conformance ToolbarTitleDisplayMode.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarTitleDisplayMode.Role and conformance ToolbarTitleDisplayMode.Role);
  }
  return result;
}

uint64_t LimitedAvailabilityTableRowContent.init<A>(erasing:)(uint64_t a1)
{
  return LimitedAvailabilityTableRowContentStorage.__allocating_init(_:)(a1);
}

uint64_t type metadata accessor for LimitedAvailabilityTableRowContentStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t LimitedAvailabilityTableRowContentStorage.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 120) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 136), a1);
  return v2;
}

uint64_t static LimitedAvailabilityTableRowContent._makeRows(content:inputs:)@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  int v4 = *a1;
  long long v5 = a2[7];
  long long v40 = a2[6];
  long long v41 = v5;
  long long v42 = a2[8];
  uint64_t v43 = *((void *)a2 + 18);
  long long v6 = a2[3];
  long long v36 = a2[2];
  long long v37 = v6;
  long long v7 = a2[5];
  long long v38 = a2[4];
  long long v39 = v7;
  long long v8 = a2[1];
  long long v34 = *a2;
  long long v35 = v8;
  *(void *)&long long v21 = *((void *)&v42 + 1);
  DWORD2(v21) = v43;
  PreferencesInputs.makeIndirectOutputs()();
  uint64_t v9 = *(void *)&v33[0];
  int v10 = DWORD2(v33[0]);
  LODWORD(v33[0]) = v4;
  type metadata accessor for LimitedAvailabilityTableRowContent();
  type metadata accessor for _GraphValue();
  int v11 = _GraphValue.value.getter();
  id v12 = (id)AGSubgraphGetCurrent();
  if (!v12) {
    __break(1u);
  }
  long long v28 = v40;
  long long v29 = v41;
  long long v30 = v42;
  LODWORD(v21) = v11;
  long long v24 = v36;
  long long v25 = v37;
  long long v26 = v38;
  long long v27 = v39;
  long long v22 = v34;
  long long v23 = v35;
  *((void *)&v21 + 1) = v12;
  *(void *)&long long v31 = v43;
  *((void *)&v31 + 1) = v9;
  LODWORD(v32) = DWORD2(v33[0]);
  *((void *)&v32 + 1) = 0;
  MEMORY[0x1F4188790](v12);
  uint64_t v18 = type metadata accessor for LimitedAvailabilityTableRowContent.IndirectOutputs();
  uint64_t WitnessTable = swift_getWitnessTable();
  outlined retain of _TableRowInputs((uint64_t)&v34);
  type metadata accessor for Attribute<()>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F4E740]);
  uint64_t v14 = v13;
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v21, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)&v17, v18, MEMORY[0x1E4FBC248], v14, MEMORY[0x1E4FBC278], v15);
  v33[8] = v29;
  v33[9] = v30;
  v33[10] = v31;
  v33[11] = v32;
  v33[4] = v25;
  v33[5] = v26;
  v33[6] = v27;
  v33[7] = v28;
  v33[0] = v21;
  v33[1] = v22;
  v33[2] = v23;
  v33[3] = v24;
  outlined release of LimitedAvailabilityTableRowContent<A>.IndirectOutputs((uint64_t)v33);
  *(void *)&long long v21 = v9;
  DWORD2(v21) = v10;
  char v20 = 0;
  uint64_t result = PreferencesOutputs.setIndirectDependency(_:)();
  *(void *)a3 = v9;
  *(_DWORD *)(a3 + 8) = v10;
  return result;
}

uint64_t type metadata accessor for LimitedAvailabilityTableRowContent()
{
  return __swift_instantiateGenericMetadata();
}

void LimitedAvailabilityTableRowContent.IndirectOutputs.updateValue()()
{
  if (!*(void *)(v0 + 184))
  {
    id v1 = (id)AGSubgraphGetGraph();
    uint64_t v2 = (void *)AGSubgraphCreate();

    *(void *)(v0 + 184) = v2;
    id v4 = v2;
    AGSubgraphAddChild();
    AGGraphClearUpdate();
    id v3 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in LimitedAvailabilityTableRowContent.IndirectOutputs.updateValue()(v0);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t closure #1 in LimitedAvailabilityTableRowContent.IndirectOutputs.updateValue()(uint64_t a1)
{
  void (*v23)(uint64_t *__return_ptr, uint64_t *, _OWORD *);
  long long v25;
  long long v26;
  int v27;
  uint64_t v28;
  long long v29;
  unint64_t v30;
  uint64_t v31;
  long long v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _OWORD v39[9];
  uint64_t v40;
  uint64_t v41;
  int v42;
  _OWORD v43[2];
  long long v44;
  long long v45;
  long long v46;
  unsigned char v47[48];
  long long v48;
  uint64_t v49;
  long long v50;
  long long v51;
  unsigned long long v52;
  long long v53;
  unsigned long long v54;
  unsigned char v55[48];
  long long v56;
  uint64_t v57;

  long long v2 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)&v47[16] = *(_OWORD *)(a1 + 112);
  *(_OWORD *)&v47[32] = v2;
  uint64_t v48 = *(_OWORD *)(a1 + 144);
  char v49 = *(void *)(a1 + 160);
  long long v3 = *(_OWORD *)(a1 + 64);
  uint64_t v44 = *(_OWORD *)(a1 + 48);
  long long v45 = v3;
  long long v4 = *(_OWORD *)(a1 + 96);
  long long v46 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)long long v47 = v4;
  long long v5 = *(_OWORD *)(a1 + 32);
  v43[0] = *(_OWORD *)(a1 + 16);
  v43[1] = v5;
  long long v36 = *((void *)&v48 + 1);
  id v33 = v46;
  long long v34 = DWORD2(v45);
  long long v35 = v48;
  long long v28 = *(void *)&v43[0];
  long long v27 = DWORD2(v43[0]);
  uint64_t v6 = v5;
  long long v30 = *((void *)&v44 + 1);
  long long v31 = v45;
  long long v32 = *(_OWORD *)&v47[8];
  uint64_t v7 = *((void *)&v5 + 1);
  unint64_t v8 = v44;
  unint64_t v9 = *((void *)&v46 + 1);
  uint64_t v10 = *(void *)v47;
  long long v29 = *(_OWORD *)&v47[24];
  uint64_t v11 = *((void *)&v2 + 1);
  uint64_t v12 = v49;
  swift_beginAccess();
  int v13 = *(_DWORD *)(v6 + 16);
  uint64_t v14 = *(void *)(v6 + 24);
  long long v25 = *(_OWORD *)(v6 + 48);
  long long v26 = *(_OWORD *)(v6 + 32);
  uint64_t v16 = *(void *)(v6 + 64);
  uint64_t v15 = *(void *)(v6 + 72);
  char v17 = *(unsigned char *)(v6 + 80);
  char v18 = *(unsigned char *)(v6 + 81);
  uint64_t v19 = *(void *)(v6 + 88);
  type metadata accessor for Attribute<()>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E4F3FEE0], MEMORY[0x1E4F3F398]);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = v13;
  *(void *)(v20 + 24) = v14;
  *(_OWORD *)(v20 + 32) = v26;
  *(_OWORD *)(v20 + 48) = v25;
  *(void *)(v20 + 64) = v16;
  *(void *)(v20 + 72) = v15;
  *(unsigned char *)(v20 + 80) = v17;
  *(unsigned char *)(v20 + 81) = v18;
  *(void *)(v20 + 88) = v19;
  outlined retain of _TableRowInputs((uint64_t)v43);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v21 = *(void *)(a1 + 168);
  LODWORD(v19) = *(_DWORD *)(a1 + 176);
  type metadata accessor for LimitedAvailabilityTableRowContent.IndirectOutputs();
  type metadata accessor for LimitedAvailabilityTableRowContent();
  uint64_t v22 = *(void *)AGGraphGetValue();
  type metadata accessor for LimitedAvailabilityTableRowContent();
  swift_retain();
  swift_bridgeObjectRetain();
  _GraphValue.init(_:)();
  *(void *)&uint64_t v50 = v28;
  DWORD2(v50) = v27;
  *(void *)&long long v51 = v20;
  *((void *)&v51 + 1) = v7;
  long long v52 = __PAIR128__(v30, v8);
  *(void *)&long long v53 = v31;
  DWORD2(v53) = v34;
  long long v54 = __PAIR128__(v9, v33);
  *(void *)long long v55 = v10;
  *(_OWORD *)&v55[8] = v32;
  *(_OWORD *)&v55[24] = v29;
  *(void *)&v55[40] = v11;
  LODWORD(v56) = v35;
  *((void *)&v56 + 1) = v36;
  long long v57 = v12;
  v39[6] = *(_OWORD *)&v55[16];
  v39[7] = *(_OWORD *)&v55[32];
  v39[8] = v56;
  long long v40 = v12;
  v39[2] = __PAIR128__(v30, v8);
  uint64_t v39[3] = v53;
  v39[4] = __PAIR128__(v9, v33);
  void v39[5] = *(_OWORD *)v55;
  v39[0] = v50;
  v39[1] = v51;
  long long v23 = *(void (**)(uint64_t *__return_ptr, uint64_t *, _OWORD *))(*(void *)v22 + 96);
  outlined retain of _TableRowInputs((uint64_t)&v50);
  v23(&v41, &v37, v39);
  swift_release();
  outlined release of _TableRowInputs((uint64_t)&v50);
  *(void *)&v39[0] = v21;
  DWORD2(v39[0]) = v19;
  long long v37 = v41;
  long long v38 = v42;
  PreferencesOutputs.attachIndirectOutputs(to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined release of _TableRowInputs((uint64_t)&v50);
}

void LimitedAvailabilityTableRowContent.tableRowBody.getter()
{
}

void protocol witness for TableRowContent.tableRowBody.getter in conformance LimitedAvailabilityTableRowContent<A>()
{
}

uint64_t protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance LimitedAvailabilityTableRowContent<A>@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  return static LimitedAvailabilityTableRowContent._makeRows(content:inputs:)(a1, a2, a3);
}

uint64_t protocol witness for static TableRowContent._tableRowCount(inputs:) in conformance LimitedAvailabilityTableRowContent<A>()
{
  return protocol witness for static View._viewListCount(inputs:) in conformance RichTextEditor();
}

uint64_t protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance LimitedAvailabilityTableRowContent<A>()
{
  return protocol witness for static PreferenceKey._isReadableByHost.getter in conformance AccessibilityLargeContentViewTree.Key();
}

void LimitedAvailabilityTableRowContentStorageBase._makeRows(content:inputs:)()
{
}

uint64_t LimitedAvailabilityTableRowContentStorageBase.deinit()
{
  return v0;
}

uint64_t LimitedAvailabilityTableRowContentStorageBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t LimitedAvailabilityTableRowContentStorage._makeRows(content:inputs:)(int *a1, long long *a2)
{
  uint64_t v3 = *v2;
  int v4 = *a1;
  long long v5 = a2[7];
  long long v21 = a2[6];
  long long v22 = v5;
  long long v23 = a2[8];
  uint64_t v24 = *((void *)a2 + 18);
  long long v6 = a2[3];
  long long v17 = a2[2];
  long long v18 = v6;
  long long v7 = a2[5];
  long long v19 = a2[4];
  long long v20 = v7;
  long long v8 = a2[1];
  long long v15 = *a2;
  long long v16 = v8;
  uint64_t v9 = *(void *)(v3 + 120);
  LODWORD(v12[0]) = v4;
  uint64_t v10 = *(void *)(v3 + 128);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for LimitedAvailabilityTableRowContent();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  type metadata accessor for LimitedAvailabilityTableRowContentStorage.Child();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  void v12[6] = v21;
  v12[7] = v22;
  v12[8] = v23;
  uint64_t v13 = v24;
  v12[2] = v17;
  _OWORD v12[3] = v18;
  v12[4] = v19;
  v12[5] = v20;
  v12[0] = v15;
  v12[1] = v16;
  return (*(uint64_t (**)(unsigned char *, _OWORD *, uint64_t, uint64_t))(v10 + 48))(v14, v12, v9, v10);
}

uint64_t LimitedAvailabilityTableRowContentStorage.Child.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  specialized LimitedAvailabilityTableRowContentStorage.Child.content.getter();
  type metadata accessor for LimitedAvailabilityTableRowContentStorage();
  uint64_t v4 = swift_dynamicCastClassUnconditional();
  uint64_t v5 = v4 + *(void *)(*(void *)v4 + 136);
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);

  return v6(a2, v5, a1);
}

uint64_t protocol witness for Rule.value.getter in conformance LimitedAvailabilityTableRowContentStorage<A, B>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LimitedAvailabilityTableRowContentStorage.Child.value.getter(*(void *)(a1 + 24), a2);
}

uint64_t LimitedAvailabilityTableRowContentStorage.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 120) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 136));
}

uint64_t LimitedAvailabilityTableRowContentStorage.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 120) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 136));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LimitedAvailabilityTableRowContent.IndirectOutputs()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined release of LimitedAvailabilityTableRowContent<A>.IndirectOutputs(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 184);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();

  return a1;
}

uint64_t instantiation function for generic protocol witness table for LimitedAvailabilityTableRowContent<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for LimitedAvailabilityTableRowContentStorageBase()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for LimitedAvailabilityTableRowContentStorageBase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for LimitedAvailabilityTableRowContentStorageBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LimitedAvailabilityTableRowContentStorageBase);
}

uint64_t type metadata completion function for LimitedAvailabilityTableRowContentStorage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void destroy for LimitedAvailabilityTableRowContent.IndirectOutputs(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v2 = *(void **)(a1 + 184);
}

uint64_t initializeWithCopy for LimitedAvailabilityTableRowContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  uint64_t v6 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  long long v7 = *(void **)(a2 + 184);
  *(void *)(a1 + 184) = v7;
  id v8 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v7;
  return a1;
}

uint64_t assignWithCopy for LimitedAvailabilityTableRowContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  long long v7 = *(void **)(a1 + 184);
  id v8 = *(void **)(a2 + 184);
  *(void *)(a1 + 184) = v8;
  id v9 = v8;

  return a1;
}

__n128 __swift_memcpy192_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for LimitedAvailabilityTableRowContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  long long v4 = *(void **)(a1 + 184);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);

  return a1;
}

uint64_t getEnumTagSinglePayload for LimitedAvailabilityTableRowContent.IndirectOutputs(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 192)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LimitedAvailabilityTableRowContent.IndirectOutputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 192) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 192) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in LimitedAvailabilityTableRowContent<A>.IndirectOutputs()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for LimitedAvailabilityTableRowContentStorage.Child()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in LimitedAvailabilityTableRowContentStorage<A, B>.Child()
{
  return swift_getWitnessTable();
}

uint64_t specialized LimitedAvailabilityTableRowContentStorage.Child.content.getter()
{
  return *(void *)AGGraphGetValue();
}

ValueMetadata *type metadata accessor for Toolbar.LocationStorage()
{
  return &type metadata for Toolbar.LocationStorage;
}

uint64_t storeEnumTagSinglePayload for Toolbar.BarLocation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF1)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 2147483633;
    if (a3 >= 0x7FFFFFF1) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF1) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 14;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Toolbar.BarLocation()
{
  return &type metadata for Toolbar.BarLocation;
}

_DWORD *__swift_memcpy7_1(_DWORD *result, int *a2)
{
  int v2 = *a2;
  *(_DWORD *)((char *)result + 3) = *(int *)((char *)a2 + 3);
  *__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Toolbar.BarContext(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[7]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Toolbar.BarContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 6) = 0;
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 7) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 7) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Toolbar.BarContext()
{
  return &type metadata for Toolbar.BarContext;
}

uint64_t destroy for Toolbar.PlatformVended(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();

  return swift_release();
}

void *initializeWithCopy for Toolbar.PlatformVended(void *a1, uint64_t a2)
{
  unsigned int v3 = *(void **)a2;
  BOOL v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  long long v7 = *(void **)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  a1[4] = v7;
  a1[5] = v6;
  long long v9 = *(void **)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  a1[6] = v9;
  a1[7] = v8;
  id v10 = v3;
  id v11 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v12 = v7;
  swift_retain();
  id v13 = v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Toolbar.PlatformVended(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  long long v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v10 = *(void **)(a1 + 32);
  id v11 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v11;
  id v12 = v11;

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  id v13 = *(void **)(a1 + 48);
  uint64_t v14 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v14;
  id v15 = v14;

  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Toolbar.PlatformVended(uint64_t a1, _OWORD *a2)
{
  BOOL v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_bridgeObjectRelease();

  *(_OWORD *)(a1 + 32) = a2[2];
  swift_release();

  *(_OWORD *)(a1 + 48) = a2[3];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Toolbar.PlatformVended()
{
  return &type metadata for Toolbar.PlatformVended;
}

ValueMetadata *type metadata accessor for Toolbar()
{
  return &type metadata for Toolbar;
}

uint64_t assignWithCopy for Toolbar.UpdateContext(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((unsigned __int8 *)a2 + 8);
  if (*(unsigned char *)(a1 + 8) != 2)
  {
    if (v4 == 2)
    {
      outlined destroy of PushTarget(a1);
      long long v6 = *(long long *)((char *)a2 + 9);
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 9) = v6;
      goto LABEL_9;
    }
    swift_unknownObjectWeakCopyAssign();
LABEL_8:
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = *((void *)a2 + 2);
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    *(void *)(a1 + 16) = v7;
    goto LABEL_9;
  }
  if (v4 != 2)
  {
    swift_unknownObjectWeakCopyInit();
    goto LABEL_8;
  }
  long long v5 = *a2;
  *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
  *(_OWORD *)a1 = v5;
LABEL_9:
  swift_unknownObjectWeakCopyAssign();
  swift_unknownObjectWeakCopyAssign();
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  swift_unknownObjectWeakCopyAssign();
  swift_unknownObjectWeakCopyAssign();
  swift_unknownObjectWeakCopyAssign();
  *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
  *(unsigned char *)(a1 + 81) = *((unsigned char *)a2 + 81);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Toolbar.UpdateContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8) == 2)
  {
    if (v4 != 2)
    {
      swift_unknownObjectWeakTakeInit();
LABEL_8:
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      goto LABEL_9;
    }
  }
  else
  {
    if (v4 != 2)
    {
      swift_unknownObjectWeakTakeAssign();
      goto LABEL_8;
    }
    outlined destroy of PushTarget(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
LABEL_9:
  swift_unknownObjectWeakTakeAssign();
  swift_unknownObjectWeakTakeAssign();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_unknownObjectWeakTakeAssign();
  swift_unknownObjectWeakTakeAssign();
  swift_unknownObjectWeakTakeAssign();
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t EnvironmentValues.toolbarUpdateContext.setter(uint64_t a1)
{
  _s7SwiftUI010_ViewList_C0VSgWOcTm_0(a1, (uint64_t)&v4, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [Toolbar.BarLocation]);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarUpdateContextKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarUpdateContextKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of _ViewList_View?(a1, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for [Toolbar.BarLocation]);
}

uint64_t EnvironmentValues.toolbarUpdateContext.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarUpdateContextKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarUpdateContextKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarUpdateContextKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarUpdateContextKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

char *protocol witness for static CaseIterable.allCases.getter in conformance Toolbar.BarLocation@<X0>(char **a1@<X8>)
{
  __n128 result = specialized static Toolbar.BarLocation.allCases.getter();
  *a1 = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Toolbar.BarLocation()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type [Toolbar.BarLocation] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Toolbar.BarLocation] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Toolbar.BarLocation] and conformance [A])
  {
    type metadata accessor for [Toolbar.BarLocation](255, &lazy cache variable for type metadata for [Toolbar.BarLocation], (uint64_t)&type metadata for Toolbar.BarLocation, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Toolbar.BarLocation] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ToolbarUpdateContextKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  return _s7SwiftUI010_ViewList_C0VSgWOcTm_0((uint64_t)&static EnvironmentValues.ToolbarUpdateContextKey.defaultValue, a1, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [Toolbar.BarLocation]);
}

void *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ToolbarItemBridgingPreferenceKey(uint64_t a1, void *(*a2)(uint64_t *__return_ptr))
{
  unint64_t result = a2(&v5);
  if (__OFADD__(*(void *)a1, v5))
  {
    __break(1u);
  }
  else
  {
    char v4 = v6;
    *(void *)a1 += v5;
    *(unsigned char *)(a1 + 8) = (*(unsigned char *)(a1 + 8) | v4) & 1;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ToolbarItemBridgingConfiguration(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2) {
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t Toolbar.UpdateContext.description.getter()
{
  uint64_t v1 = MEMORY[0x18C119DF0](v0 + 64);
  if (v1)
  {
    int v2 = (void *)v1;
    _print_unlocked<A, B>(_:_:)();
  }
  _StringGuts.grow(_:)(39);
  v3._object = (void *)0x80000001883408B0;
  v3._uint64_t countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._uint64_t countAndFlagsBits = 8236;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_188152038()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of _ViewList_View?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t destroy for ToolbarPlacementEnvironment()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t assignWithCopy for ToolbarPlacementEnvironment(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ToolbarPlacementEnvironment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ToolbarPlacementEnvironment()
{
  return &type metadata for ToolbarPlacementEnvironment;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ToolbarForegroundStyleKey()
{
  return &type metadata for EnvironmentValues.ToolbarForegroundStyleKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ToolbarUpdateContextKey()
{
  return &type metadata for EnvironmentValues.ToolbarUpdateContextKey;
}

uint64_t initializeBufferWithCopyOfBuffer for Toolbar.VendedItem(uint64_t a1, uint64_t a2)
{
  Swift::String v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for Toolbar.VendedItem(uint64_t a1, uint64_t a2)
{
  Swift::String v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  id v6 = v3;

  return a1;
}

uint64_t assignWithTake for Toolbar.VendedItem(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for Toolbar.VendedItem(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Toolbar.VendedItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for Toolbar.VendedItem(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Toolbar.VendedItem()
{
  return &type metadata for Toolbar.VendedItem;
}

void *initializeBufferWithCopyOfBuffer for ToolbarViewListVisitor(void *a1, uint64_t *a2, int *a3)
{
  int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    id v6 = a3;
    *a1 = *a2;
    uint64_t v7 = a1 + 1;
    uint64_t v8 = a2 + 1;
    if (*((unsigned char *)a2 + 48) == 1)
    {
      long long v9 = *((_OWORD *)a2 + 2);
      *((_OWORD *)v4 + 2) = v9;
      (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
      *((unsigned char *)v4 + 48) = 1;
    }
    else
    {
      long long v11 = *(_OWORD *)(a2 + 3);
      *uint64_t v7 = *v8;
      *(_OWORD *)(v4 + 3) = v11;
      *(_OWORD *)((char *)v4 + 33) = *(_OWORD *)((char *)a2 + 33);
    }
    *(_DWORD *)((char *)v4 + 49) = *(_DWORD *)((char *)a2 + 49);
    v4[7] = a2[7];
    swift_weakCopyInit();
    *((unsigned char *)v4 + 72) = *((unsigned char *)a2 + 72);
    uint64_t v12 = a2[11];
    v4[10] = a2[10];
    v4[11] = v12;
    uint64_t v13 = v6[15];
    uint64_t v14 = (void **)((char *)v4 + v13);
    id v15 = (void **)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    uint64_t v17 = *(void *)(v16 - 8);
    long long v18 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v17 + 48);
    swift_bridgeObjectRetain();
    if (v18(v15, 1, v16))
    {
      type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
      memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
LABEL_55:
      uint64_t v96 = v6[16];
      uint64_t v97 = v6[17];
      uint64_t v98 = (void *)((char *)v4 + v96);
      char v99 = (uint64_t *)((char *)a2 + v96);
      uint64_t v100 = v99[1];
      *uint64_t v98 = *v99;
      v98[1] = v100;
      *((unsigned char *)v4 + v97) = *((unsigned char *)a2 + v97);
      *(void *)((char *)v4 + v6[18]) = *(uint64_t *)((char *)a2 + v6[18]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return v4;
    }
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      long long v39 = *(_OWORD *)(v15 + 3);
      *(_OWORD *)(v14 + 3) = v39;
      (**(void (***)(void **, void **))(v39 - 8))(v14, v15);
      long long v14[5] = v15[5];
      void v14[6] = v15[6];
      v14[7] = v15[7];
      *((_OWORD *)v14 + 4) = *((_OWORD *)v15 + 4);
      long long v40 = v15[10];
      v14[10] = v40;
      swift_retain();
      swift_bridgeObjectRetain();
      id v41 = v40;
LABEL_54:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void **, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_55;
    }
    uint64_t v118 = v6;
    uint64_t v105 = v17;
    uint64_t v106 = v16;
    long long v20 = *v15;
    long long v21 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v21;
    long long v22 = v15[3];
    void v14[2] = v15[2];
    _OWORD v14[3] = v22;
    *((unsigned char *)v14 + 32) = *((unsigned char *)v15 + 32);
    long long v23 = v15[6];
    long long v14[5] = v15[5];
    void v14[6] = v23;
    *((unsigned char *)v14 + 56) = *((unsigned char *)v15 + 56);
    uint64_t v24 = v14 + 8;
    long long v25 = v15 + 8;
    unint64_t v26 = (unint64_t)v15[23];
    id v27 = v20;
    id v28 = v21;
    unint64_t v29 = v26;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v26 >> 1 == 4294967294)
    {
      long long v30 = *((_OWORD *)v15 + 13);
      *((_OWORD *)v14 + 12) = *((_OWORD *)v15 + 12);
      *((_OWORD *)v14 + 13) = v30;
      *((_OWORD *)v14 + 14) = *((_OWORD *)v15 + 14);
      *(_DWORD *)((char *)v14 + 239) = *(_DWORD *)((char *)v15 + 239);
      long long v31 = *((_OWORD *)v15 + 9);
      *((_OWORD *)v14 + 8) = *((_OWORD *)v15 + 8);
      *((_OWORD *)v14 + 9) = v31;
      long long v32 = *((_OWORD *)v15 + 11);
      *((_OWORD *)v14 + 10) = *((_OWORD *)v15 + 10);
      *((_OWORD *)v14 + 11) = v32;
      long long v33 = *((_OWORD *)v15 + 5);
      *uint64_t v24 = *v25;
      *((_OWORD *)v14 + 5) = v33;
      long long v34 = *((_OWORD *)v15 + 7);
      *((_OWORD *)v14 + 6) = *((_OWORD *)v15 + 6);
      *((_OWORD *)v14 + 7) = v34;
      id v6 = v118;
      long long v35 = v15[32];
      if (v35)
      {
LABEL_11:
        v14[31] = v15[31];
        v14[32] = v35;
        long long v36 = v15[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v36 >= 2) {
          id v37 = v36;
        }
        v14[33] = v36;
        *((_DWORD *)v14 + 68) = *((_DWORD *)v15 + 68);
        *((unsigned char *)v14 + 276) = *((unsigned char *)v15 + 276);
        *(_WORD *)((char *)v14 + 277) = *(_WORD *)((char *)v15 + 277);
        long long v38 = v15[36];
        v14[35] = v15[35];
        v14[36] = v38;
        swift_retain();
        swift_retain();
LABEL_23:
        unint64_t v53 = (unint64_t)v15[41];
        if (v53 >> 2 == 0xFFFFFFFF)
        {
          long long v54 = *(_OWORD *)(v15 + 47);
          *(_OWORD *)(v14 + 45) = *(_OWORD *)(v15 + 45);
          *(_OWORD *)(v14 + 47) = v54;
          v14[49] = v15[49];
          long long v55 = *(_OWORD *)(v15 + 39);
          *(_OWORD *)(v14 + 37) = *(_OWORD *)(v15 + 37);
          *(_OWORD *)(v14 + 39) = v55;
          long long v56 = *(_OWORD *)(v15 + 43);
          *(_OWORD *)(v14 + 41) = *(_OWORD *)(v15 + 41);
          *(_OWORD *)(v14 + 43) = v56;
        }
        else
        {
          long long v57 = v15[37];
          uint64_t v102 = (uint64_t)v15[40];
          uint64_t v103 = (uint64_t)v15[39];
          uint64_t v58 = (uint64_t)v15[42];
          uint64_t v59 = (uint64_t)v15[43];
          long long v60 = v15[44];
          uint64_t v107 = (uint64_t)v15[38];
          uint64_t v109 = (uint64_t)v15[45];
          uint64_t v112 = (uint64_t)v15[46];
          uint64_t v114 = (uint64_t)v15[47];
          uint64_t v116 = v15[48];
          uint64_t v119 = (uint64_t)v15[49];
          outlined copy of PlatformItemList.Item.SystemItem(v57, v107, v103, v102, v53, v58, v59, (char)v60, v109, v112, v114, (char)v116, v119);
          v14[37] = v57;
          v14[38] = (void *)v107;
          v14[39] = (void *)v103;
          v14[40] = (void *)v102;
          v14[41] = (void *)v53;
          v14[42] = (void *)v58;
          v14[43] = (void *)v59;
          v14[44] = v60;
          v14[45] = (void *)v109;
          v14[46] = (void *)v112;
          v14[47] = (void *)v114;
          v14[48] = v116;
          v14[49] = (void *)v119;
        }
        long long v61 = v15[51];
        if (v61 == (void *)1)
        {
          long long v62 = *((_OWORD *)v15 + 28);
          *((_OWORD *)v14 + 27) = *((_OWORD *)v15 + 27);
          *((_OWORD *)v14 + 28) = v62;
          *((unsigned char *)v14 + 464) = *((unsigned char *)v15 + 464);
          long long v63 = *((_OWORD *)v15 + 26);
          *((_OWORD *)v14 + 25) = *((_OWORD *)v15 + 25);
          *((_OWORD *)v14 + 26) = v63;
LABEL_36:
          uint64_t v69 = v15[60];
          v14[59] = v15[59];
          v14[60] = v69;
          v14[61] = v15[61];
          *((unsigned char *)v14 + 496) = *((unsigned char *)v15 + 496);
          int v70 = v15[63];
          swift_bridgeObjectRetain();
          if (v70)
          {
            int v71 = v15[64];
            v14[63] = v70;
            v14[64] = v71;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v14 + 63) = *(_OWORD *)(v15 + 63);
          }
          *((_WORD *)v14 + 260) = *((_WORD *)v15 + 260);
          uint64_t v72 = v15[66];
          if (v72)
          {
            v14[66] = v72;
            v14[67] = v15[67];
            v14[68] = v15[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v14 + 33) = *((_OWORD *)v15 + 33);
            v14[68] = v15[68];
          }
          uint64_t v73 = v15[69];
          if (v73 == (void *)1)
          {
            *(_OWORD *)(v14 + 69) = *(_OWORD *)(v15 + 69);
            v14[71] = v15[71];
          }
          else
          {
            v14[69] = v73;
            uint64_t v74 = v15[70];
            swift_retain();
            if (v74)
            {
              uint64_t v75 = v15[71];
              v14[70] = v74;
              v14[71] = v75;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v14 + 35) = *((_OWORD *)v15 + 35);
            }
          }
          uint64_t v110 = v15[72];
          v14[72] = v110;
          v14[73] = v15[73];
          v14[74] = v15[74];
          v14[75] = v15[75];
          v14[76] = v15[76];
          v14[77] = v15[77];
          v14[78] = v15[78];
          *((_WORD *)v14 + 316) = *((_WORD *)v15 + 316);
          *((unsigned char *)v14 + 634) = *((unsigned char *)v15 + 634);
          uint64_t v76 = type metadata accessor for PlatformItemList.Item();
          uint64_t v77 = *(int *)(v76 + 112);
          uint64_t v117 = (int *)v76;
          uint64_t v120 = (char *)v14 + v77;
          long long v78 = (char *)v15 + v77;
          uint64_t v79 = type metadata accessor for CommandOperation();
          uint64_t v104 = *(void *)(v79 - 8);
          uint64_t v108 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v104 + 48);
          id v80 = v110;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v108(v78, 1, v79))
          {
            type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
            memcpy(v120, v78, *(void *)(*(void *)(v81 - 8) + 64));
            uint64_t v17 = v105;
            uint64_t v16 = v106;
          }
          else
          {
            *uint64_t v120 = *v78;
            uint64_t v82 = *(int *)(v79 + 20);
            uint64_t v113 = v78;
            uint64_t v115 = v79;
            uint64_t v83 = &v120[v82];
            uint64_t v84 = &v78[v82];
            uint64_t v85 = *(void *)&v78[v82];
            uint64_t v86 = *((void *)v84 + 1);
            char v87 = v84[16];
            outlined copy of Text.Storage(v85, v86, v87);
            *(void *)uint64_t v83 = v85;
            *((void *)v83 + 1) = v86;
            v83[16] = v87;
            *((void *)v83 + 3) = *((void *)v84 + 3);
            uint64_t v88 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            uint64_t v111 = &v83[v88];
            char v89 = &v84[v88];
            uint64_t v90 = type metadata accessor for UUID();
            uint64_t v91 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v90 - 8) + 16);
            swift_bridgeObjectRetain();
            v91(v111, v89, v90);
            uint64_t v92 = *(int *)(v115 + 24);
            uint64_t v93 = &v120[v92];
            uint64_t v94 = &v113[v92];
            if (*v94)
            {
              uint64_t v95 = v94[1];
              void *v93 = *v94;
              v93[1] = v95;
              swift_retain();
            }
            else
            {
              *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
            }
            uint64_t v17 = v105;
            uint64_t v16 = v106;
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v104 + 56))(v120, 0, 1, v115);
          }
          *((unsigned char *)v14 + v117[29]) = *((unsigned char *)v15 + v117[29]);
          *((unsigned char *)v14 + v117[30]) = *((unsigned char *)v15 + v117[30]);
          *((unsigned char *)v14 + v117[31]) = *((unsigned char *)v15 + v117[31]);
          *((unsigned char *)v14 + v117[32]) = *((unsigned char *)v15 + v117[32]);
          *(void **)((char *)v14 + v117[33]) = *(void **)((char *)v15 + v117[33]);
          swift_retain();
          goto LABEL_54;
        }
        *((_DWORD *)v14 + 100) = *((_DWORD *)v15 + 100);
        *((unsigned char *)v14 + 404) = *((unsigned char *)v15 + 404);
        if (v61)
        {
          long long v64 = v15[52];
          v14[51] = v61;
          v14[52] = v64;
          swift_retain();
          int v65 = v15[53];
          if (v65) {
            goto LABEL_30;
          }
        }
        else
        {
          *(_OWORD *)(v14 + 51) = *(_OWORD *)(v15 + 51);
          int v65 = v15[53];
          if (v65)
          {
LABEL_30:
            uint64_t v66 = v15[54];
            v14[53] = v65;
            v14[54] = v66;
            swift_retain();
            uint64_t v67 = v15[55];
            if (v67)
            {
LABEL_31:
              uint64_t v68 = v15[56];
              v14[55] = v67;
              v14[56] = v68;
              swift_retain();
LABEL_35:
              v14[57] = v15[57];
              *((unsigned char *)v14 + 464) = *((unsigned char *)v15 + 464);
              goto LABEL_36;
            }
LABEL_34:
            *(_OWORD *)(v14 + 55) = *(_OWORD *)(v15 + 55);
            goto LABEL_35;
          }
        }
        *(_OWORD *)(v14 + 53) = *(_OWORD *)(v15 + 53);
        uint64_t v67 = v15[55];
        if (v67) {
          goto LABEL_31;
        }
        goto LABEL_34;
      }
    }
    else
    {
      int v42 = *((unsigned __int8 *)v15 + 72);
      if (v42 == 255)
      {
        *(void *)uint64_t v24 = *(void *)v25;
        *((unsigned char *)v14 + 72) = *((unsigned char *)v15 + 72);
      }
      else
      {
        uint64_t v43 = v15[8];
        outlined copy of GraphicsImage.Contents(v43, *((unsigned char *)v15 + 72));
        v14[8] = v43;
        *((unsigned char *)v14 + 72) = v42;
        unint64_t v29 = (unint64_t)v15[23];
      }
      id v6 = v118;
      v14[10] = v15[10];
      *(_OWORD *)(v14 + 11) = *(_OWORD *)(v15 + 11);
      *((unsigned char *)v14 + 104) = *((unsigned char *)v15 + 104);
      *(_OWORD *)((char *)v14 + 108) = *(_OWORD *)((char *)v15 + 108);
      *((unsigned char *)v14 + 124) = *((unsigned char *)v15 + 124);
      long long v44 = *((_OWORD *)v15 + 9);
      *((_OWORD *)v14 + 8) = *((_OWORD *)v15 + 8);
      *((_OWORD *)v14 + 9) = v44;
      *((_WORD *)v14 + 80) = *((_WORD *)v15 + 80);
      *((unsigned char *)v14 + 162) = *((unsigned char *)v15 + 162);
      *((unsigned char *)v14 + 163) = *((unsigned char *)v15 + 163);
      if (v29 >> 1 == 0xFFFFFFFF)
      {
        long long v45 = *(_OWORD *)(v15 + 23);
        *(_OWORD *)(v14 + 21) = *(_OWORD *)(v15 + 21);
        *(_OWORD *)(v14 + 23) = v45;
      }
      else
      {
        uint64_t v46 = (uint64_t)v15[21];
        uint64_t v47 = (uint64_t)v15[22];
        uint64_t v48 = v15[24];
        outlined copy of AccessibilityImageLabel(v46, v47, v29);
        v14[21] = (void *)v46;
        v14[22] = (void *)v47;
        v14[23] = (void *)v29;
        v14[24] = v48;
      }
      char v49 = v15[26];
      v14[25] = v15[25];
      v14[26] = v49;
      *((_WORD *)v14 + 108) = *((_WORD *)v15 + 108);
      *((_DWORD *)v14 + 55) = *((_DWORD *)v15 + 55);
      *((unsigned char *)v14 + 224) = *((unsigned char *)v15 + 224);
      uint64_t v50 = v15[29];
      v14[29] = v50;
      *((_WORD *)v14 + 120) = *((_WORD *)v15 + 120);
      *((unsigned char *)v14 + 242) = *((unsigned char *)v15 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v51 = v50;
      long long v35 = v15[32];
      if (v35) {
        goto LABEL_11;
      }
    }
    long long v52 = *(_OWORD *)(v15 + 33);
    *(_OWORD *)(v14 + 31) = *(_OWORD *)(v15 + 31);
    *(_OWORD *)(v14 + 33) = v52;
    *(_OWORD *)(v14 + 35) = *(_OWORD *)(v15 + 35);
    goto LABEL_23;
  }
  uint64_t v10 = *a2;
  *int v4 = *a2;
  int v4 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

uint64_t initializeWithCopy for ToolbarViewListVisitor(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v7 = *a2;
  id v6 = a2 + 1;
  *(void *)a1 = v7;
  uint64_t v8 = (_OWORD *)(a1 + 8);
  if (*((unsigned char *)a2 + 48) == 1)
  {
    long long v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v8, v6);
    *(unsigned char *)(a1 + 48) = 1;
  }
  else
  {
    long long v10 = v6[1];
    *uint64_t v8 = *v6;
    v8[1] = v10;
    *(_OWORD *)((char *)v8 + 25) = *(_OWORD *)((char *)v6 + 25);
  }
  *(_DWORD *)(a1 + 49) = *(_DWORD *)((char *)a2 + 49);
  *(void *)(a1 + 56) = a2[7];
  swift_weakCopyInit();
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  uint64_t v11 = a2[11];
  *(void *)(a1 + 80) = a2[10];
  *(void *)(a1 + 88) = v11;
  uint64_t v12 = a3[15];
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (void **)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain();
  if (!v17(v14, 1, v15))
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      long long v37 = *(_OWORD *)(v14 + 3);
      *(_OWORD *)(v13 + 24) = v37;
      (**(void (***)(void *, const void *))(v37 - 8))(v13, v14);
      *((void *)v13 + 5) = v14[5];
      *((void *)v13 + 6) = v14[6];
      *((void *)v13 + 7) = v14[7];
      *((_OWORD *)v13 + 4) = *((_OWORD *)v14 + 4);
      long long v38 = v14[10];
      *((void *)v13 + 10) = v38;
      swift_retain();
      swift_bridgeObjectRetain();
      id v39 = v38;
LABEL_52:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_53;
    }
    uint64_t v110 = v16;
    uint64_t v111 = v15;
    uint64_t v112 = a3;
    uint64_t v19 = *v14;
    long long v20 = v14[1];
    *(void *)uint64_t v13 = *v14;
    *((void *)v13 + 1) = v20;
    long long v21 = v14[3];
    *((void *)v13 + 2) = v14[2];
    *((void *)v13 + 3) = v21;
    v13[32] = *((unsigned char *)v14 + 32);
    long long v22 = v14[6];
    *((void *)v13 + 5) = v14[5];
    *((void *)v13 + 6) = v22;
    v13[56] = *((unsigned char *)v14 + 56);
    long long v23 = v13 + 64;
    uint64_t v24 = v14 + 8;
    unint64_t v25 = (unint64_t)v14[23];
    id v26 = v19;
    id v27 = v20;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v25 >> 1 == 4294967294)
    {
      long long v28 = *((_OWORD *)v14 + 13);
      *((_OWORD *)v13 + 12) = *((_OWORD *)v14 + 12);
      *((_OWORD *)v13 + 13) = v28;
      *((_OWORD *)v13 + 14) = *((_OWORD *)v14 + 14);
      *(_DWORD *)(v13 + 239) = *(_DWORD *)((char *)v14 + 239);
      long long v29 = *((_OWORD *)v14 + 9);
      *((_OWORD *)v13 + 8) = *((_OWORD *)v14 + 8);
      *((_OWORD *)v13 + 9) = v29;
      long long v30 = *((_OWORD *)v14 + 11);
      *((_OWORD *)v13 + 10) = *((_OWORD *)v14 + 10);
      *((_OWORD *)v13 + 11) = v30;
      long long v31 = *((_OWORD *)v14 + 5);
      *long long v23 = *v24;
      *((_OWORD *)v13 + 5) = v31;
      long long v32 = *((_OWORD *)v14 + 7);
      *((_OWORD *)v13 + 6) = *((_OWORD *)v14 + 6);
      *((_OWORD *)v13 + 7) = v32;
      long long v33 = v14[32];
      if (v33)
      {
LABEL_9:
        *((void *)v13 + 31) = v14[31];
        *((void *)v13 + 32) = v33;
        long long v34 = v14[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v34 >= 2) {
          id v35 = v34;
        }
        *((void *)v13 + 33) = v34;
        *((_DWORD *)v13 + 68) = *((_DWORD *)v14 + 68);
        v13[276] = *((unsigned char *)v14 + 276);
        *(_WORD *)(v13 + 277) = *(_WORD *)((char *)v14 + 277);
        long long v36 = v14[36];
        *((void *)v13 + 35) = v14[35];
        *((void *)v13 + 36) = v36;
        swift_retain();
        swift_retain();
LABEL_21:
        unint64_t v51 = (unint64_t)v14[41];
        if (v51 >> 2 == 0xFFFFFFFF)
        {
          long long v52 = *(_OWORD *)(v14 + 47);
          *(_OWORD *)(v13 + 360) = *(_OWORD *)(v14 + 45);
          *(_OWORD *)(v13 + 376) = v52;
          *((void *)v13 + 49) = v14[49];
          long long v53 = *(_OWORD *)(v14 + 39);
          *(_OWORD *)(v13 + 296) = *(_OWORD *)(v14 + 37);
          *(_OWORD *)(v13 + 312) = v53;
          long long v54 = *(_OWORD *)(v14 + 43);
          *(_OWORD *)(v13 + 328) = *(_OWORD *)(v14 + 41);
          *(_OWORD *)(v13 + 344) = v54;
        }
        else
        {
          long long v55 = v14[37];
          uint64_t v56 = (uint64_t)v14[38];
          uint64_t v104 = (uint64_t)v14[40];
          uint64_t v106 = (uint64_t)v14[39];
          uint64_t v57 = (uint64_t)v14[42];
          uint64_t v58 = (uint64_t)v14[43];
          uint64_t v59 = v14[44];
          uint64_t v108 = (uint64_t)v14[45];
          uint64_t v113 = (uint64_t)v14[46];
          uint64_t v115 = (uint64_t)v14[47];
          uint64_t v116 = v14[48];
          uint64_t v118 = (uint64_t)v14[49];
          outlined copy of PlatformItemList.Item.SystemItem(v55, v56, v106, v104, v51, v57, v58, (char)v59, v108, v113, v115, (char)v116, v118);
          *((void *)v13 + 37) = v55;
          *((void *)v13 + 38) = v56;
          *((void *)v13 + 39) = v106;
          *((void *)v13 + 40) = v104;
          *((void *)v13 + 41) = v51;
          *((void *)v13 + 42) = v57;
          *((void *)v13 + 43) = v58;
          *((void *)v13 + 44) = v59;
          *((void *)v13 + 45) = v108;
          *((void *)v13 + 46) = v113;
          *((void *)v13 + 47) = v115;
          *((void *)v13 + 48) = v116;
          *((void *)v13 + 49) = v118;
        }
        long long v60 = v14[51];
        if (v60 == (void *)1)
        {
          long long v61 = *((_OWORD *)v14 + 28);
          *((_OWORD *)v13 + 27) = *((_OWORD *)v14 + 27);
          *((_OWORD *)v13 + 28) = v61;
          v13[464] = *((unsigned char *)v14 + 464);
          long long v62 = *((_OWORD *)v14 + 26);
          *((_OWORD *)v13 + 25) = *((_OWORD *)v14 + 25);
          *((_OWORD *)v13 + 26) = v62;
LABEL_34:
          uint64_t v68 = v14[60];
          *((void *)v13 + 59) = v14[59];
          *((void *)v13 + 60) = v68;
          *((void *)v13 + 61) = v14[61];
          v13[496] = *((unsigned char *)v14 + 496);
          uint64_t v69 = v14[63];
          swift_bridgeObjectRetain();
          if (v69)
          {
            int v70 = v14[64];
            *((void *)v13 + 63) = v69;
            *((void *)v13 + 64) = v70;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v13 + 504) = *(_OWORD *)(v14 + 63);
          }
          *((_WORD *)v13 + 260) = *((_WORD *)v14 + 260);
          int v71 = v14[66];
          if (v71)
          {
            *((void *)v13 + 66) = v71;
            *((void *)v13 + 67) = v14[67];
            *((void *)v13 + 68) = v14[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v13 + 33) = *((_OWORD *)v14 + 33);
            *((void *)v13 + 68) = v14[68];
          }
          uint64_t v72 = v14[69];
          if (v72 == (void *)1)
          {
            *(_OWORD *)(v13 + 552) = *(_OWORD *)(v14 + 69);
            *((void *)v13 + 71) = v14[71];
          }
          else
          {
            *((void *)v13 + 69) = v72;
            uint64_t v73 = v14[70];
            swift_retain();
            if (v73)
            {
              uint64_t v74 = v14[71];
              *((void *)v13 + 70) = v73;
              *((void *)v13 + 71) = v74;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v13 + 35) = *((_OWORD *)v14 + 35);
            }
          }
          uint64_t v75 = v14[72];
          *((void *)v13 + 72) = v75;
          *((void *)v13 + 73) = v14[73];
          *((void *)v13 + 74) = v14[74];
          *((void *)v13 + 75) = v14[75];
          *((void *)v13 + 76) = v14[76];
          *((void *)v13 + 77) = v14[77];
          *((void *)v13 + 78) = v14[78];
          *((_WORD *)v13 + 316) = *((_WORD *)v14 + 316);
          v13[634] = *((unsigned char *)v14 + 634);
          uint64_t v109 = type metadata accessor for PlatformItemList.Item();
          uint64_t v76 = *(int *)(v109 + 112);
          uint64_t v119 = &v13[v76];
          uint64_t v77 = (char *)v14 + v76;
          uint64_t v78 = type metadata accessor for CommandOperation();
          uint64_t v107 = *(void *)(v78 - 8);
          uint64_t v114 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v107 + 48);
          id v79 = v75;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v114(v77, 1, v78))
          {
            type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
            memcpy(v119, v77, *(void *)(*(void *)(v80 - 8) + 64));
            uint64_t v15 = v111;
            a3 = v112;
            uint64_t v81 = (int *)v109;
            uint64_t v16 = v110;
          }
          else
          {
            *uint64_t v119 = *v77;
            uint64_t v82 = *(int *)(v78 + 20);
            uint64_t v83 = v77;
            uint64_t v105 = v77;
            uint64_t v84 = &v119[v82];
            uint64_t v85 = &v83[v82];
            uint64_t v117 = v78;
            uint64_t v86 = *(void *)&v83[v82];
            uint64_t v87 = *(void *)&v83[v82 + 8];
            char v88 = v83[v82 + 16];
            outlined copy of Text.Storage(v86, v87, v88);
            *(void *)uint64_t v84 = v86;
            *((void *)v84 + 1) = v87;
            v84[16] = v88;
            *((void *)v84 + 3) = *((void *)v85 + 3);
            uint64_t v89 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            uint64_t v90 = &v84[v89];
            uint64_t v91 = &v85[v89];
            uint64_t v92 = type metadata accessor for UUID();
            uint64_t v93 = *(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v92 - 8) + 16);
            swift_bridgeObjectRetain();
            v93(v90, v91, v92);
            uint64_t v94 = *(int *)(v117 + 24);
            uint64_t v95 = &v119[v94];
            uint64_t v96 = &v105[v94];
            if (*v96)
            {
              uint64_t v97 = v96[1];
              *(void *)uint64_t v95 = *v96;
              *((void *)v95 + 1) = v97;
              swift_retain();
            }
            else
            {
              *(_OWORD *)uint64_t v95 = *(_OWORD *)v96;
            }
            uint64_t v15 = v111;
            a3 = v112;
            uint64_t v81 = (int *)v109;
            uint64_t v16 = v110;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v107 + 56))(v119, 0, 1, v117);
          }
          v13[v81[29]] = *((unsigned char *)v14 + v81[29]);
          v13[v81[30]] = *((unsigned char *)v14 + v81[30]);
          v13[v81[31]] = *((unsigned char *)v14 + v81[31]);
          v13[v81[32]] = *((unsigned char *)v14 + v81[32]);
          *(void *)&v13[v81[33]] = *(void **)((char *)v14 + v81[33]);
          swift_retain();
          goto LABEL_52;
        }
        *((_DWORD *)v13 + 100) = *((_DWORD *)v14 + 100);
        v13[404] = *((unsigned char *)v14 + 404);
        if (v60)
        {
          long long v63 = v14[52];
          *((void *)v13 + 51) = v60;
          *((void *)v13 + 52) = v63;
          swift_retain();
          long long v64 = v14[53];
          if (v64) {
            goto LABEL_28;
          }
        }
        else
        {
          *(_OWORD *)(v13 + 408) = *(_OWORD *)(v14 + 51);
          long long v64 = v14[53];
          if (v64)
          {
LABEL_28:
            int v65 = v14[54];
            *((void *)v13 + 53) = v64;
            *((void *)v13 + 54) = v65;
            swift_retain();
            uint64_t v66 = v14[55];
            if (v66)
            {
LABEL_29:
              uint64_t v67 = v14[56];
              *((void *)v13 + 55) = v66;
              *((void *)v13 + 56) = v67;
              swift_retain();
LABEL_33:
              *((void *)v13 + 57) = v14[57];
              v13[464] = *((unsigned char *)v14 + 464);
              goto LABEL_34;
            }
LABEL_32:
            *(_OWORD *)(v13 + 440) = *(_OWORD *)(v14 + 55);
            goto LABEL_33;
          }
        }
        *(_OWORD *)(v13 + 424) = *(_OWORD *)(v14 + 53);
        uint64_t v66 = v14[55];
        if (v66) {
          goto LABEL_29;
        }
        goto LABEL_32;
      }
    }
    else
    {
      int v40 = *((unsigned __int8 *)v14 + 72);
      if (v40 == 255)
      {
        *(void *)long long v23 = *(void *)v24;
        v13[72] = *((unsigned char *)v14 + 72);
      }
      else
      {
        id v41 = v14[8];
        outlined copy of GraphicsImage.Contents(v41, *((unsigned char *)v14 + 72));
        *((void *)v13 + 8) = v41;
        v13[72] = v40;
        unint64_t v25 = (unint64_t)v14[23];
      }
      *((void *)v13 + 10) = v14[10];
      *(_OWORD *)(v13 + 88) = *(_OWORD *)(v14 + 11);
      v13[104] = *((unsigned char *)v14 + 104);
      *(_OWORD *)(v13 + 108) = *(_OWORD *)((char *)v14 + 108);
      v13[124] = *((unsigned char *)v14 + 124);
      long long v42 = *((_OWORD *)v14 + 9);
      *((_OWORD *)v13 + 8) = *((_OWORD *)v14 + 8);
      *((_OWORD *)v13 + 9) = v42;
      *((_WORD *)v13 + 80) = *((_WORD *)v14 + 80);
      v13[162] = *((unsigned char *)v14 + 162);
      v13[163] = *((unsigned char *)v14 + 163);
      if (v25 >> 1 == 0xFFFFFFFF)
      {
        long long v43 = *(_OWORD *)(v14 + 23);
        *(_OWORD *)(v13 + 168) = *(_OWORD *)(v14 + 21);
        *(_OWORD *)(v13 + 184) = v43;
      }
      else
      {
        uint64_t v44 = (uint64_t)v14[21];
        uint64_t v45 = (uint64_t)v14[22];
        uint64_t v46 = v14[24];
        outlined copy of AccessibilityImageLabel(v44, v45, v25);
        *((void *)v13 + 21) = v44;
        *((void *)v13 + 22) = v45;
        *((void *)v13 + 23) = v25;
        *((void *)v13 + 24) = v46;
      }
      uint64_t v47 = v14[26];
      *((void *)v13 + 25) = v14[25];
      *((void *)v13 + 26) = v47;
      *((_WORD *)v13 + 108) = *((_WORD *)v14 + 108);
      *((_DWORD *)v13 + 55) = *((_DWORD *)v14 + 55);
      v13[224] = *((unsigned char *)v14 + 224);
      uint64_t v48 = v14[29];
      *((void *)v13 + 29) = v48;
      *((_WORD *)v13 + 120) = *((_WORD *)v14 + 120);
      v13[242] = *((unsigned char *)v14 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v49 = v48;
      long long v33 = v14[32];
      if (v33) {
        goto LABEL_9;
      }
    }
    long long v50 = *(_OWORD *)(v14 + 33);
    *(_OWORD *)(v13 + 248) = *(_OWORD *)(v14 + 31);
    *(_OWORD *)(v13 + 264) = v50;
    *(_OWORD *)(v13 + 280) = *(_OWORD *)(v14 + 35);
    goto LABEL_21;
  }
  type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
  memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
LABEL_53:
  uint64_t v98 = a3[16];
  uint64_t v99 = a3[17];
  uint64_t v100 = (void *)(a1 + v98);
  uint64_t v101 = (uint64_t *)((char *)a2 + v98);
  uint64_t v102 = v101[1];
  void *v100 = *v101;
  v100[1] = v102;
  *(unsigned char *)(a1 + v99) = *((unsigned char *)a2 + v99);
  *(void *)(a1 + a3[18]) = *(uint64_t *)((char *)a2 + a3[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ToolbarViewListVisitor(uint64_t a1, uint64_t a2, int *a3)
{
  id v6 = (long long *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v7 = (_OWORD *)(a1 + 8);
  if (a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role(a1 + 8);
    if (*(unsigned char *)(a2 + 48) == 1)
    {
      uint64_t v8 = *(void *)(a2 + 32);
      *(void *)(a1 + 32) = v8;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      (**(void (***)(_OWORD *, long long *))(v8 - 8))(v7, v6);
      *(unsigned char *)(a1 + 48) = 1;
    }
    else
    {
      long long v9 = *v6;
      long long v10 = v6[1];
      *(_OWORD *)((char *)v7 + 25) = *(long long *)((char *)v6 + 25);
      *uint64_t v7 = v9;
      v7[1] = v10;
    }
  }
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  *(unsigned char *)(a1 + 51) = *(unsigned char *)(a2 + 51);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_weakCopyAssign();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[15];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v55 = *(void *)(v13 + 24);
        *(void *)(v12 + 24) = v55;
        *(void *)(v12 + 32) = *(void *)(v13 + 32);
        (**(void (***)(uint64_t, uint64_t))(v55 - 8))(v12, v13);
        *(void *)(v12 + 40) = *(void *)(v13 + 40);
        *(_DWORD *)(v12 + 48) = *(_DWORD *)(v13 + 48);
        *(_DWORD *)(v12 + 52) = *(_DWORD *)(v13 + 52);
        *(void *)(v12 + 56) = *(void *)(v13 + 56);
        *(void *)(v12 + 64) = *(void *)(v13 + 64);
        *(void *)(v12 + 72) = *(void *)(v13 + 72);
        uint64_t v56 = *(void **)(v13 + 80);
        *(void *)(v12 + 80) = v56;
        swift_retain();
        swift_bridgeObjectRetain();
        id v57 = v56;
LABEL_64:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
        goto LABEL_65;
      }
      uint64_t v214 = v15;
      uint64_t v229 = v14;
      uint64_t v230 = a3;
      uint64_t v19 = *(void **)v13;
      *(void *)uint64_t v12 = *(void *)v13;
      long long v20 = *(void **)(v13 + 8);
      *(void *)(v12 + 8) = v20;
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      *(void *)(v12 + 24) = *(void *)(v13 + 24);
      *(unsigned char *)(v12 + 32) = *(unsigned char *)(v13 + 32);
      *(void *)(v12 + 40) = *(void *)(v13 + 40);
      *(void *)(v12 + 48) = *(void *)(v13 + 48);
      *(unsigned char *)(v12 + 56) = *(unsigned char *)(v13 + 56);
      long long v21 = (_OWORD *)(v12 + 64);
      long long v22 = (id *)(v13 + 64);
      unint64_t v23 = *(void *)(v13 + 184);
      id v24 = v19;
      id v25 = v20;
      swift_bridgeObjectRetain();
      swift_retain();
      if (v23 >> 1 == 4294967294)
      {
        long long v26 = *(_OWORD *)v22;
        long long v27 = *(_OWORD *)(v13 + 80);
        long long v28 = *(_OWORD *)(v13 + 112);
        *(_OWORD *)(v12 + 96) = *(_OWORD *)(v13 + 96);
        *(_OWORD *)(v12 + 112) = v28;
        *long long v21 = v26;
        *(_OWORD *)(v12 + 80) = v27;
        long long v29 = *(_OWORD *)(v13 + 128);
        long long v30 = *(_OWORD *)(v13 + 144);
        long long v31 = *(_OWORD *)(v13 + 176);
        *(_OWORD *)(v12 + 160) = *(_OWORD *)(v13 + 160);
        *(_OWORD *)(v12 + 176) = v31;
        *(_OWORD *)(v12 + 128) = v29;
        *(_OWORD *)(v12 + 144) = v30;
        long long v32 = *(_OWORD *)(v13 + 192);
        long long v33 = *(_OWORD *)(v13 + 208);
        long long v34 = *(_OWORD *)(v13 + 224);
        *(_DWORD *)(v12 + 239) = *(_DWORD *)(v13 + 239);
        *(_OWORD *)(v12 + 208) = v33;
        *(_OWORD *)(v12 + 224) = v34;
        *(_OWORD *)(v12 + 192) = v32;
        if (*(void *)(v13 + 256))
        {
LABEL_10:
          *(void *)(v12 + 248) = *(void *)(v13 + 248);
          *(void *)(v12 + 256) = *(void *)(v13 + 256);
          id v35 = *(void **)(v13 + 264);
          swift_bridgeObjectRetain();
          if ((unint64_t)v35 >= 2) {
            id v36 = v35;
          }
          *(void *)(v12 + 264) = v35;
          int v37 = *(_DWORD *)(v13 + 272);
          *(unsigned char *)(v12 + 276) = *(unsigned char *)(v13 + 276);
          *(_DWORD *)(v12 + 272) = v37;
          *(unsigned char *)(v12 + 277) = *(unsigned char *)(v13 + 277);
          *(unsigned char *)(v12 + 278) = *(unsigned char *)(v13 + 278);
          *(void *)(v12 + 280) = *(void *)(v13 + 280);
          *(void *)(v12 + 288) = *(void *)(v13 + 288);
          swift_retain();
          swift_retain();
LABEL_32:
          unint64_t v79 = *(void *)(v13 + 328);
          if (v79 >> 2 == 0xFFFFFFFF)
          {
            long long v80 = *(_OWORD *)(v13 + 296);
            long long v81 = *(_OWORD *)(v13 + 328);
            *(_OWORD *)(v12 + 312) = *(_OWORD *)(v13 + 312);
            *(_OWORD *)(v12 + 328) = v81;
            *(_OWORD *)(v12 + 296) = v80;
            long long v82 = *(_OWORD *)(v13 + 344);
            long long v83 = *(_OWORD *)(v13 + 360);
            long long v84 = *(_OWORD *)(v13 + 376);
            *(void *)(v12 + 392) = *(void *)(v13 + 392);
            *(_OWORD *)(v12 + 360) = v83;
            *(_OWORD *)(v12 + 376) = v84;
            *(_OWORD *)(v12 + 344) = v82;
          }
          else
          {
            uint64_t v85 = *(void **)(v13 + 296);
            uint64_t v86 = *(void *)(v13 + 304);
            uint64_t v201 = *(void *)(v13 + 320);
            uint64_t v202 = *(void *)(v13 + 312);
            uint64_t v87 = *(void *)(v13 + 336);
            uint64_t v88 = *(void *)(v13 + 344);
            uint64_t v89 = *(void *)(v13 + 352);
            __dstb = *(void **)(v13 + 360);
            uint64_t v210 = *(void *)(v13 + 368);
            uint64_t v217 = *(void *)(v13 + 376);
            uint64_t v221 = *(void *)(v13 + 384);
            v225 = *(void **)(v13 + 392);
            outlined copy of PlatformItemList.Item.SystemItem(v85, v86, v202, v201, v79, v87, v88, v89, (uint64_t)__dstb, v210, v217, v221, (uint64_t)v225);
            *(void *)(v12 + 296) = v85;
            *(void *)(v12 + 304) = v86;
            *(void *)(v12 + 312) = v202;
            *(void *)(v12 + 320) = v201;
            *(void *)(v12 + 328) = v79;
            *(void *)(v12 + 336) = v87;
            *(void *)(v12 + 344) = v88;
            *(void *)(v12 + 352) = v89;
            *(void *)(v12 + 360) = __dstb;
            *(void *)(v12 + 368) = v210;
            *(void *)(v12 + 376) = v217;
            *(void *)(v12 + 384) = v221;
            *(void *)(v12 + 392) = v225;
          }
          if (*(void *)(v13 + 408) == 1)
          {
            *(_OWORD *)(v12 + 400) = *(_OWORD *)(v13 + 400);
            long long v90 = *(_OWORD *)(v13 + 416);
            long long v91 = *(_OWORD *)(v13 + 432);
            long long v92 = *(_OWORD *)(v13 + 448);
            *(unsigned char *)(v12 + 464) = *(unsigned char *)(v13 + 464);
            *(_OWORD *)(v12 + 432) = v91;
            *(_OWORD *)(v12 + 448) = v92;
            *(_OWORD *)(v12 + 416) = v90;
            goto LABEL_45;
          }
          *(unsigned char *)(v12 + 400) = *(unsigned char *)(v13 + 400);
          *(unsigned char *)(v12 + 401) = *(unsigned char *)(v13 + 401);
          *(unsigned char *)(v12 + 402) = *(unsigned char *)(v13 + 402);
          *(unsigned char *)(v12 + 403) = *(unsigned char *)(v13 + 403);
          *(unsigned char *)(v12 + 404) = *(unsigned char *)(v13 + 404);
          uint64_t v93 = *(void *)(v13 + 408);
          if (v93)
          {
            uint64_t v94 = *(void *)(v13 + 416);
            *(void *)(v12 + 408) = v93;
            *(void *)(v12 + 416) = v94;
            swift_retain();
            uint64_t v95 = *(void *)(v13 + 424);
            if (v95) {
              goto LABEL_39;
            }
          }
          else
          {
            *(_OWORD *)(v12 + 408) = *(_OWORD *)(v13 + 408);
            uint64_t v95 = *(void *)(v13 + 424);
            if (v95)
            {
LABEL_39:
              uint64_t v96 = *(void *)(v13 + 432);
              *(void *)(v12 + 424) = v95;
              *(void *)(v12 + 432) = v96;
              swift_retain();
              uint64_t v97 = *(void *)(v13 + 440);
              if (v97)
              {
LABEL_40:
                uint64_t v98 = *(void *)(v13 + 448);
                *(void *)(v12 + 440) = v97;
                *(void *)(v12 + 448) = v98;
                swift_retain();
LABEL_44:
                *(void *)(v12 + 456) = *(void *)(v13 + 456);
                *(unsigned char *)(v12 + 464) = *(unsigned char *)(v13 + 464);
LABEL_45:
                *(void *)(v12 + 472) = *(void *)(v13 + 472);
                *(void *)(v12 + 480) = *(void *)(v13 + 480);
                *(void *)(v12 + 488) = *(void *)(v13 + 488);
                *(unsigned char *)(v12 + 496) = *(unsigned char *)(v13 + 496);
                uint64_t v99 = *(void *)(v13 + 504);
                swift_bridgeObjectRetain();
                if (v99)
                {
                  uint64_t v100 = *(void *)(v13 + 512);
                  *(void *)(v12 + 504) = v99;
                  *(void *)(v12 + 512) = v100;
                  swift_retain();
                }
                else
                {
                  *(_OWORD *)(v12 + 504) = *(_OWORD *)(v13 + 504);
                }
                *(_WORD *)(v12 + 520) = *(_WORD *)(v13 + 520);
                uint64_t v101 = *(void *)(v13 + 528);
                if (v101)
                {
                  *(void *)(v12 + 528) = v101;
                  *(void *)(v12 + 536) = *(void *)(v13 + 536);
                  *(void *)(v12 + 544) = *(void *)(v13 + 544);
                  swift_bridgeObjectRetain();
                  swift_retain();
                  swift_retain();
                }
                else
                {
                  long long v102 = *(_OWORD *)(v13 + 528);
                  *(void *)(v12 + 544) = *(void *)(v13 + 544);
                  *(_OWORD *)(v12 + 528) = v102;
                }
                uint64_t v103 = *(void *)(v13 + 552);
                if (v103 == 1)
                {
                  uint64_t v104 = (_OWORD *)(v12 + 552);
                  long long v105 = *(_OWORD *)(v13 + 552);
                  *(void *)(v12 + 568) = *(void *)(v13 + 568);
                }
                else
                {
                  *(void *)(v12 + 552) = v103;
                  uint64_t v106 = *(void *)(v13 + 560);
                  swift_retain();
                  if (v106)
                  {
                    uint64_t v107 = *(void *)(v13 + 568);
                    *(void *)(v12 + 560) = v106;
                    *(void *)(v12 + 568) = v107;
                    swift_retain();
LABEL_57:
                    uint64_t v108 = *(void **)(v13 + 576);
                    *(void *)(v12 + 576) = v108;
                    *(void *)(v12 + 584) = *(void *)(v13 + 584);
                    *(void *)(v12 + 592) = *(void *)(v13 + 592);
                    *(void *)(v12 + 600) = *(void *)(v13 + 600);
                    *(void *)(v12 + 608) = *(void *)(v13 + 608);
                    *(void *)(v12 + 616) = *(void *)(v13 + 616);
                    *(void *)(v12 + 624) = *(void *)(v13 + 624);
                    *(unsigned char *)(v12 + 632) = *(unsigned char *)(v13 + 632);
                    *(unsigned char *)(v12 + 633) = *(unsigned char *)(v13 + 633);
                    *(unsigned char *)(v12 + 634) = *(unsigned char *)(v13 + 634);
                    uint64_t v109 = type metadata accessor for PlatformItemList.Item();
                    uint64_t v110 = *(int *)(v109 + 112);
                    __dst = (unsigned char *)(v12 + v110);
                    uint64_t v211 = (int *)v109;
                    uint64_t v111 = (unsigned char *)(v13 + v110);
                    uint64_t v112 = type metadata accessor for CommandOperation();
                    uint64_t v203 = *(void *)(v112 - 8);
                    v218 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v203 + 48);
                    id v113 = v108;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    if (v218(v111, 1, v112))
                    {
                      type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
                      memcpy(__dst, v111, *(void *)(*(void *)(v114 - 8) + 64));
                      uint64_t v14 = v229;
                      a3 = v230;
                      uint64_t v15 = v214;
                    }
                    else
                    {
                      unsigned char *__dst = *v111;
                      uint64_t v115 = *(int *)(v112 + 20);
                      uint64_t v116 = &__dst[v115];
                      uint64_t v117 = &v111[v115];
                      v222 = v111;
                      v226 = (int *)v112;
                      uint64_t v118 = *(void *)&v111[v115];
                      uint64_t v119 = *((void *)v117 + 1);
                      char v120 = v117[16];
                      outlined copy of Text.Storage(v118, v119, v120);
                      *(void *)uint64_t v116 = v118;
                      *((void *)v116 + 1) = v119;
                      v116[16] = v120;
                      *((void *)v116 + 3) = *((void *)v117 + 3);
                      uint64_t v121 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                      uint64_t v219 = &v116[v121];
                      uint64_t v122 = &v117[v121];
                      uint64_t v123 = type metadata accessor for UUID();
                      uint64_t v124 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v123 - 8) + 16);
                      swift_bridgeObjectRetain();
                      v124(v219, v122, v123);
                      uint64_t v125 = v226[6];
                      unint64_t v126 = &__dst[v125];
                      uint64_t v127 = &v222[v125];
                      if (*v127)
                      {
                        uint64_t v128 = v127[1];
                        *unint64_t v126 = *v127;
                        v126[1] = v128;
                        swift_retain();
                      }
                      else
                      {
                        *(_OWORD *)unint64_t v126 = *(_OWORD *)v127;
                      }
                      uint64_t v14 = v229;
                      a3 = v230;
                      uint64_t v15 = v214;
                      (*(void (**)(unsigned char *, void, uint64_t, int *))(v203 + 56))(__dst, 0, 1, v226);
                    }
                    *(unsigned char *)(v12 + v211[29]) = *(unsigned char *)(v13 + v211[29]);
                    *(unsigned char *)(v12 + v211[30]) = *(unsigned char *)(v13 + v211[30]);
                    *(unsigned char *)(v12 + v211[31]) = *(unsigned char *)(v13 + v211[31]);
                    *(unsigned char *)(v12 + v211[32]) = *(unsigned char *)(v13 + v211[32]);
                    *(void *)(v12 + v211[33]) = *(void *)(v13 + v211[33]);
                    swift_retain();
                    goto LABEL_64;
                  }
                  uint64_t v104 = (_OWORD *)(v12 + 560);
                  long long v105 = *(_OWORD *)(v13 + 560);
                }
                *uint64_t v104 = v105;
                goto LABEL_57;
              }
LABEL_43:
              *(_OWORD *)(v12 + 440) = *(_OWORD *)(v13 + 440);
              goto LABEL_44;
            }
          }
          *(_OWORD *)(v12 + 424) = *(_OWORD *)(v13 + 424);
          uint64_t v97 = *(void *)(v13 + 440);
          if (v97) {
            goto LABEL_40;
          }
          goto LABEL_43;
        }
      }
      else
      {
        int v58 = *(unsigned __int8 *)(v13 + 72);
        if (v58 == 255)
        {
          id v65 = *v22;
          *(unsigned char *)(v12 + 72) = *(unsigned char *)(v13 + 72);
          *(void *)long long v21 = v65;
        }
        else
        {
          id v59 = *v22;
          outlined copy of GraphicsImage.Contents(*v22, *(unsigned char *)(v13 + 72));
          *(void *)(v12 + 64) = v59;
          *(unsigned char *)(v12 + 72) = v58;
        }
        *(void *)(v12 + 80) = *(void *)(v13 + 80);
        *(_OWORD *)(v12 + 88) = *(_OWORD *)(v13 + 88);
        *(unsigned char *)(v12 + 104) = *(unsigned char *)(v13 + 104);
        long long v66 = *(_OWORD *)(v13 + 108);
        *(unsigned char *)(v12 + 124) = *(unsigned char *)(v13 + 124);
        *(_OWORD *)(v12 + 108) = v66;
        long long v67 = *(_OWORD *)(v13 + 128);
        long long v68 = *(_OWORD *)(v13 + 144);
        *(unsigned char *)(v12 + 160) = *(unsigned char *)(v13 + 160);
        *(_OWORD *)(v12 + 128) = v67;
        *(_OWORD *)(v12 + 144) = v68;
        *(unsigned char *)(v12 + 161) = *(unsigned char *)(v13 + 161);
        *(unsigned char *)(v12 + 162) = *(unsigned char *)(v13 + 162);
        *(unsigned char *)(v12 + 163) = *(unsigned char *)(v13 + 163);
        unint64_t v69 = *(void *)(v13 + 184);
        if (v69 >> 1 == 0xFFFFFFFF)
        {
          long long v70 = *(_OWORD *)(v13 + 184);
          *(_OWORD *)(v12 + 168) = *(_OWORD *)(v13 + 168);
          *(_OWORD *)(v12 + 184) = v70;
        }
        else
        {
          uint64_t v71 = *(void *)(v13 + 168);
          uint64_t v72 = *(void *)(v13 + 176);
          uint64_t v73 = *(void *)(v13 + 192);
          outlined copy of AccessibilityImageLabel(v71, v72, *(void *)(v13 + 184));
          *(void *)(v12 + 168) = v71;
          *(void *)(v12 + 176) = v72;
          *(void *)(v12 + 184) = v69;
          *(void *)(v12 + 192) = v73;
        }
        *(void *)(v12 + 200) = *(void *)(v13 + 200);
        *(void *)(v12 + 208) = *(void *)(v13 + 208);
        *(unsigned char *)(v12 + 216) = *(unsigned char *)(v13 + 216);
        *(unsigned char *)(v12 + 217) = *(unsigned char *)(v13 + 217);
        int v74 = *(_DWORD *)(v13 + 220);
        *(unsigned char *)(v12 + 224) = *(unsigned char *)(v13 + 224);
        *(_DWORD *)(v12 + 220) = v74;
        uint64_t v75 = *(void **)(v13 + 232);
        *(void *)(v12 + 232) = v75;
        *(_WORD *)(v12 + 240) = *(_WORD *)(v13 + 240);
        *(unsigned char *)(v12 + 242) = *(unsigned char *)(v13 + 242);
        swift_unknownObjectRetain();
        swift_retain();
        id v76 = v75;
        if (*(void *)(v13 + 256)) {
          goto LABEL_10;
        }
      }
      long long v77 = *(_OWORD *)(v13 + 248);
      long long v78 = *(_OWORD *)(v13 + 280);
      *(_OWORD *)(v12 + 264) = *(_OWORD *)(v13 + 264);
      *(_OWORD *)(v12 + 280) = v78;
      *(_OWORD *)(v12 + 248) = v77;
      goto LABEL_32;
    }
    goto LABEL_15;
  }
  if (v18)
  {
    _s7SwiftUI7ToolbarO11BarLocationO_AEtWOhTm_0(v12, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
LABEL_15:
    type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
    memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_65;
  }
  if (a1 == a2) {
    goto LABEL_65;
  }
  _s7SwiftUI7ToolbarO11BarLocationO_AEtWOhTm_0(v12, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v60 = *(void *)(v13 + 24);
    *(void *)(v12 + 24) = v60;
    *(void *)(v12 + 32) = *(void *)(v13 + 32);
    (**(void (***)(uint64_t, uint64_t))(v60 - 8))(v12, v13);
    *(void *)(v12 + 40) = *(void *)(v13 + 40);
    *(_DWORD *)(v12 + 48) = *(_DWORD *)(v13 + 48);
    *(_DWORD *)(v12 + 52) = *(_DWORD *)(v13 + 52);
    *(void *)(v12 + 56) = *(void *)(v13 + 56);
    *(void *)(v12 + 64) = *(void *)(v13 + 64);
    *(void *)(v12 + 72) = *(void *)(v13 + 72);
    long long v61 = *(void **)(v13 + 80);
    *(void *)(v12 + 80) = v61;
    swift_retain();
    swift_bridgeObjectRetain();
    id v62 = v61;
    swift_storeEnumTagMultiPayload();
    goto LABEL_65;
  }
  uint64_t v231 = a3;
  id v39 = *(void **)v13;
  *(void *)uint64_t v12 = *(void *)v13;
  int v40 = *(void **)(v13 + 8);
  *(void *)(v12 + 8) = v40;
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  *(void *)(v12 + 24) = *(void *)(v13 + 24);
  *(unsigned char *)(v12 + 32) = *(unsigned char *)(v13 + 32);
  *(void *)(v12 + 40) = *(void *)(v13 + 40);
  *(void *)(v12 + 48) = *(void *)(v13 + 48);
  *(unsigned char *)(v12 + 56) = *(unsigned char *)(v13 + 56);
  id v41 = (_OWORD *)(v12 + 64);
  long long v42 = (id *)(v13 + 64);
  unint64_t v43 = *(void *)(v13 + 184);
  id v44 = v39;
  id v45 = v40;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v43 >> 1 == 4294967294)
  {
    long long v46 = *(_OWORD *)v42;
    long long v47 = *(_OWORD *)(v13 + 80);
    long long v48 = *(_OWORD *)(v13 + 112);
    *(_OWORD *)(v12 + 96) = *(_OWORD *)(v13 + 96);
    *(_OWORD *)(v12 + 112) = v48;
    *id v41 = v46;
    *(_OWORD *)(v12 + 80) = v47;
    long long v49 = *(_OWORD *)(v13 + 128);
    long long v50 = *(_OWORD *)(v13 + 144);
    long long v51 = *(_OWORD *)(v13 + 176);
    *(_OWORD *)(v12 + 160) = *(_OWORD *)(v13 + 160);
    *(_OWORD *)(v12 + 176) = v51;
    *(_OWORD *)(v12 + 128) = v49;
    *(_OWORD *)(v12 + 144) = v50;
    long long v52 = *(_OWORD *)(v13 + 192);
    long long v53 = *(_OWORD *)(v13 + 208);
    long long v54 = *(_OWORD *)(v13 + 224);
    *(_DWORD *)(v12 + 239) = *(_DWORD *)(v13 + 239);
    *(_OWORD *)(v12 + 208) = v53;
    *(_OWORD *)(v12 + 224) = v54;
    *(_OWORD *)(v12 + 192) = v52;
  }
  else
  {
    int v63 = *(unsigned __int8 *)(v13 + 72);
    if (v63 == 255)
    {
      id v133 = *v42;
      *(unsigned char *)(v12 + 72) = *(unsigned char *)(v13 + 72);
      *(void *)id v41 = v133;
    }
    else
    {
      id v64 = *v42;
      outlined copy of GraphicsImage.Contents(*v42, *(unsigned char *)(v13 + 72));
      *(void *)(v12 + 64) = v64;
      *(unsigned char *)(v12 + 72) = v63;
    }
    *(void *)(v12 + 80) = *(void *)(v13 + 80);
    *(_OWORD *)(v12 + 88) = *(_OWORD *)(v13 + 88);
    *(unsigned char *)(v12 + 104) = *(unsigned char *)(v13 + 104);
    long long v134 = *(_OWORD *)(v13 + 108);
    *(unsigned char *)(v12 + 124) = *(unsigned char *)(v13 + 124);
    *(_OWORD *)(v12 + 108) = v134;
    long long v135 = *(_OWORD *)(v13 + 128);
    long long v136 = *(_OWORD *)(v13 + 144);
    *(unsigned char *)(v12 + 160) = *(unsigned char *)(v13 + 160);
    *(_OWORD *)(v12 + 128) = v135;
    *(_OWORD *)(v12 + 144) = v136;
    *(unsigned char *)(v12 + 161) = *(unsigned char *)(v13 + 161);
    *(unsigned char *)(v12 + 162) = *(unsigned char *)(v13 + 162);
    *(unsigned char *)(v12 + 163) = *(unsigned char *)(v13 + 163);
    unint64_t v137 = *(void *)(v13 + 184);
    if (v137 >> 1 == 0xFFFFFFFF)
    {
      long long v138 = *(_OWORD *)(v13 + 184);
      *(_OWORD *)(v12 + 168) = *(_OWORD *)(v13 + 168);
      *(_OWORD *)(v12 + 184) = v138;
    }
    else
    {
      uint64_t v139 = *(void *)(v13 + 168);
      uint64_t v140 = *(void *)(v13 + 176);
      uint64_t v141 = *(void *)(v13 + 192);
      outlined copy of AccessibilityImageLabel(v139, v140, *(void *)(v13 + 184));
      *(void *)(v12 + 168) = v139;
      *(void *)(v12 + 176) = v140;
      *(void *)(v12 + 184) = v137;
      *(void *)(v12 + 192) = v141;
    }
    *(void *)(v12 + 200) = *(void *)(v13 + 200);
    *(void *)(v12 + 208) = *(void *)(v13 + 208);
    *(unsigned char *)(v12 + 216) = *(unsigned char *)(v13 + 216);
    *(unsigned char *)(v12 + 217) = *(unsigned char *)(v13 + 217);
    int v142 = *(_DWORD *)(v13 + 220);
    *(unsigned char *)(v12 + 224) = *(unsigned char *)(v13 + 224);
    *(_DWORD *)(v12 + 220) = v142;
    long long v143 = *(void **)(v13 + 232);
    *(void *)(v12 + 232) = v143;
    *(_WORD *)(v12 + 240) = *(_WORD *)(v13 + 240);
    *(unsigned char *)(v12 + 242) = *(unsigned char *)(v13 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    id v144 = v143;
  }
  if (*(void *)(v13 + 256))
  {
    *(void *)(v12 + 248) = *(void *)(v13 + 248);
    *(void *)(v12 + 256) = *(void *)(v13 + 256);
    v145 = *(void **)(v13 + 264);
    swift_bridgeObjectRetain();
    if ((unint64_t)v145 >= 2) {
      id v146 = v145;
    }
    *(void *)(v12 + 264) = v145;
    int v147 = *(_DWORD *)(v13 + 272);
    *(unsigned char *)(v12 + 276) = *(unsigned char *)(v13 + 276);
    *(_DWORD *)(v12 + 272) = v147;
    *(unsigned char *)(v12 + 277) = *(unsigned char *)(v13 + 277);
    *(unsigned char *)(v12 + 278) = *(unsigned char *)(v13 + 278);
    *(void *)(v12 + 280) = *(void *)(v13 + 280);
    *(void *)(v12 + 288) = *(void *)(v13 + 288);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v148 = *(_OWORD *)(v13 + 248);
    long long v149 = *(_OWORD *)(v13 + 280);
    *(_OWORD *)(v12 + 264) = *(_OWORD *)(v13 + 264);
    *(_OWORD *)(v12 + 280) = v149;
    *(_OWORD *)(v12 + 248) = v148;
  }
  unint64_t v150 = *(void *)(v13 + 328);
  if (v150 >> 2 == 0xFFFFFFFF)
  {
    long long v151 = *(_OWORD *)(v13 + 296);
    long long v152 = *(_OWORD *)(v13 + 328);
    *(_OWORD *)(v12 + 312) = *(_OWORD *)(v13 + 312);
    *(_OWORD *)(v12 + 328) = v152;
    *(_OWORD *)(v12 + 296) = v151;
    long long v153 = *(_OWORD *)(v13 + 344);
    long long v154 = *(_OWORD *)(v13 + 360);
    long long v155 = *(_OWORD *)(v13 + 376);
    *(void *)(v12 + 392) = *(void *)(v13 + 392);
    *(_OWORD *)(v12 + 360) = v154;
    *(_OWORD *)(v12 + 376) = v155;
    *(_OWORD *)(v12 + 344) = v153;
  }
  else
  {
    uint64_t v156 = *(void **)(v13 + 296);
    uint64_t v157 = *(void *)(v13 + 304);
    uint64_t v204 = *(void *)(v13 + 320);
    __dstc = *(void **)(v13 + 312);
    uint64_t v158 = *(void *)(v13 + 336);
    uint64_t v159 = *(void *)(v13 + 344);
    uint64_t v160 = *(void *)(v13 + 352);
    uint64_t v212 = *(void *)(v13 + 360);
    uint64_t v215 = *(void *)(v13 + 368);
    uint64_t v220 = *(void *)(v13 + 376);
    uint64_t v223 = *(void *)(v13 + 384);
    v227 = *(void **)(v13 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v156, v157, (uint64_t)__dstc, v204, v150, v158, v159, v160, v212, v215, v220, v223, (uint64_t)v227);
    *(void *)(v12 + 296) = v156;
    *(void *)(v12 + 304) = v157;
    *(void *)(v12 + 312) = __dstc;
    *(void *)(v12 + 320) = v204;
    *(void *)(v12 + 328) = v150;
    *(void *)(v12 + 336) = v158;
    *(void *)(v12 + 344) = v159;
    *(void *)(v12 + 352) = v160;
    *(void *)(v12 + 360) = v212;
    *(void *)(v12 + 368) = v215;
    *(void *)(v12 + 376) = v220;
    *(void *)(v12 + 384) = v223;
    *(void *)(v12 + 392) = v227;
  }
  if (*(void *)(v13 + 408) == 1)
  {
    *(_OWORD *)(v12 + 400) = *(_OWORD *)(v13 + 400);
    long long v161 = *(_OWORD *)(v13 + 416);
    long long v162 = *(_OWORD *)(v13 + 432);
    long long v163 = *(_OWORD *)(v13 + 448);
    *(unsigned char *)(v12 + 464) = *(unsigned char *)(v13 + 464);
    *(_OWORD *)(v12 + 432) = v162;
    *(_OWORD *)(v12 + 448) = v163;
    *(_OWORD *)(v12 + 416) = v161;
  }
  else
  {
    *(unsigned char *)(v12 + 400) = *(unsigned char *)(v13 + 400);
    *(unsigned char *)(v12 + 401) = *(unsigned char *)(v13 + 401);
    *(unsigned char *)(v12 + 402) = *(unsigned char *)(v13 + 402);
    *(unsigned char *)(v12 + 403) = *(unsigned char *)(v13 + 403);
    *(unsigned char *)(v12 + 404) = *(unsigned char *)(v13 + 404);
    uint64_t v164 = *(void *)(v13 + 408);
    if (v164)
    {
      uint64_t v165 = *(void *)(v13 + 416);
      *(void *)(v12 + 408) = v164;
      *(void *)(v12 + 416) = v165;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v12 + 408) = *(_OWORD *)(v13 + 408);
    }
    uint64_t v166 = *(void *)(v13 + 424);
    if (v166)
    {
      uint64_t v167 = *(void *)(v13 + 432);
      *(void *)(v12 + 424) = v166;
      *(void *)(v12 + 432) = v167;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v12 + 424) = *(_OWORD *)(v13 + 424);
    }
    uint64_t v168 = *(void *)(v13 + 440);
    if (v168)
    {
      uint64_t v169 = *(void *)(v13 + 448);
      *(void *)(v12 + 440) = v168;
      *(void *)(v12 + 448) = v169;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v12 + 440) = *(_OWORD *)(v13 + 440);
    }
    *(void *)(v12 + 456) = *(void *)(v13 + 456);
    *(unsigned char *)(v12 + 464) = *(unsigned char *)(v13 + 464);
  }
  *(void *)(v12 + 472) = *(void *)(v13 + 472);
  *(void *)(v12 + 480) = *(void *)(v13 + 480);
  *(void *)(v12 + 488) = *(void *)(v13 + 488);
  *(unsigned char *)(v12 + 496) = *(unsigned char *)(v13 + 496);
  uint64_t v170 = *(void *)(v13 + 504);
  swift_bridgeObjectRetain();
  if (v170)
  {
    uint64_t v171 = *(void *)(v13 + 512);
    *(void *)(v12 + 504) = v170;
    *(void *)(v12 + 512) = v171;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v12 + 504) = *(_OWORD *)(v13 + 504);
  }
  *(_WORD *)(v12 + 520) = *(_WORD *)(v13 + 520);
  uint64_t v172 = *(void *)(v13 + 528);
  if (v172)
  {
    *(void *)(v12 + 528) = v172;
    *(void *)(v12 + 536) = *(void *)(v13 + 536);
    *(void *)(v12 + 544) = *(void *)(v13 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v173 = *(_OWORD *)(v13 + 528);
    *(void *)(v12 + 544) = *(void *)(v13 + 544);
    *(_OWORD *)(v12 + 528) = v173;
  }
  uint64_t v174 = *(void *)(v13 + 552);
  if (v174 == 1)
  {
    v175 = (_OWORD *)(v12 + 552);
    long long v176 = *(_OWORD *)(v13 + 552);
    *(void *)(v12 + 568) = *(void *)(v13 + 568);
LABEL_102:
    _OWORD *v175 = v176;
    goto LABEL_103;
  }
  *(void *)(v12 + 552) = v174;
  uint64_t v177 = *(void *)(v13 + 560);
  swift_retain();
  if (!v177)
  {
    v175 = (_OWORD *)(v12 + 560);
    long long v176 = *(_OWORD *)(v13 + 560);
    goto LABEL_102;
  }
  uint64_t v178 = *(void *)(v13 + 568);
  *(void *)(v12 + 560) = v177;
  *(void *)(v12 + 568) = v178;
  swift_retain();
LABEL_103:
  unint64_t v179 = *(void **)(v13 + 576);
  *(void *)(v12 + 576) = v179;
  *(void *)(v12 + 584) = *(void *)(v13 + 584);
  *(void *)(v12 + 592) = *(void *)(v13 + 592);
  *(void *)(v12 + 600) = *(void *)(v13 + 600);
  *(void *)(v12 + 608) = *(void *)(v13 + 608);
  *(void *)(v12 + 616) = *(void *)(v13 + 616);
  *(void *)(v12 + 624) = *(void *)(v13 + 624);
  *(unsigned char *)(v12 + 632) = *(unsigned char *)(v13 + 632);
  *(unsigned char *)(v12 + 633) = *(unsigned char *)(v13 + 633);
  *(unsigned char *)(v12 + 634) = *(unsigned char *)(v13 + 634);
  uint64_t v213 = type metadata accessor for PlatformItemList.Item();
  uint64_t v180 = *(int *)(v213 + 112);
  v228 = (unsigned char *)(v12 + v180);
  v181 = (unsigned char *)(v13 + v180);
  uint64_t v182 = type metadata accessor for CommandOperation();
  __dsta = *(void **)(v182 - 8);
  uint64_t v216 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))__dsta[6];
  id v183 = v179;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v216(v181, 1, v182))
  {
    type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(v228, v181, *(void *)(*(void *)(v184 - 8) + 64));
    a3 = v231;
    uint64_t v185 = (int *)v213;
  }
  else
  {
    unsigned char *v228 = *v181;
    uint64_t v186 = *(int *)(v182 + 20);
    uint64_t v187 = &v228[v186];
    int v205 = v181;
    uint64_t v188 = &v181[v186];
    uint64_t v189 = *(void *)v188;
    uint64_t v190 = *((void *)v188 + 1);
    uint64_t v224 = v182;
    char v191 = v188[16];
    outlined copy of Text.Storage(*(void *)v188, v190, v191);
    *(void *)uint64_t v187 = v189;
    *((void *)v187 + 1) = v190;
    v187[16] = v191;
    *((void *)v187 + 3) = *((void *)v188 + 3);
    uint64_t v192 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v193 = &v187[v192];
    uint64_t v194 = &v188[v192];
    uint64_t v195 = type metadata accessor for UUID();
    uint64_t v196 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v195 - 8) + 16);
    swift_bridgeObjectRetain();
    v196(v193, v194, v195);
    uint64_t v197 = *(int *)(v224 + 24);
    v198 = &v228[v197];
    v199 = &v205[v197];
    if (*v199)
    {
      uint64_t v200 = v199[1];
      void *v198 = *v199;
      v198[1] = v200;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v198 = *(_OWORD *)v199;
    }
    a3 = v231;
    uint64_t v185 = (int *)v213;
    ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dsta[7])(v228, 0, 1, v224);
  }
  *(unsigned char *)(v12 + v185[29]) = *(unsigned char *)(v13 + v185[29]);
  *(unsigned char *)(v12 + v185[30]) = *(unsigned char *)(v13 + v185[30]);
  *(unsigned char *)(v12 + v185[31]) = *(unsigned char *)(v13 + v185[31]);
  *(unsigned char *)(v12 + v185[32]) = *(unsigned char *)(v13 + v185[32]);
  *(void *)(v12 + v185[33]) = *(void *)(v13 + v185[33]);
  swift_retain();
  swift_storeEnumTagMultiPayload();
LABEL_65:
  uint64_t v129 = a3[16];
  uint64_t v130 = (void *)(a1 + v129);
  uint64_t v131 = (void *)(a2 + v129);
  *uint64_t v130 = *v131;
  v130[1] = v131[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  *(void *)(a1 + a3[18]) = *(void *)(a2 + a3[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ToolbarViewListVisitor(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  *(_DWORD *)(a1 + 49) = *(_DWORD *)(a2 + 49);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_weakTakeInit();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  uint64_t v7 = a3[15];
  uint64_t v8 = (_OWORD *)(a1 + v7);
  long long v9 = (_OWORD *)(a2 + v7);
  uint64_t v10 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v13 = v9[1];
      *uint64_t v8 = *v9;
      v8[1] = v13;
      *((unsigned char *)v8 + 32) = *((unsigned char *)v9 + 32);
      uint64_t v14 = *((void *)v9 + 6);
      *((void *)v8 + 5) = *((void *)v9 + 5);
      *((void *)v8 + 6) = v14;
      *((unsigned char *)v8 + 56) = *((unsigned char *)v9 + 56);
      long long v15 = v9[13];
      v8[12] = v9[12];
      v8[13] = v15;
      v8[14] = v9[14];
      *(_DWORD *)((char *)v8 + 239) = *(_DWORD *)((char *)v9 + 239);
      long long v16 = v9[9];
      v8[8] = v9[8];
      _OWORD v8[9] = v16;
      long long v17 = v9[11];
      v8[10] = v9[10];
      v8[11] = v17;
      long long v18 = v9[5];
      v8[4] = v9[4];
      v8[5] = v18;
      long long v19 = v9[7];
      v8[6] = v9[6];
      v8[7] = v19;
      *(_OWORD *)((char *)v8 + 248) = *(_OWORD *)((char *)v9 + 248);
      long long v20 = *(_OWORD *)((char *)v9 + 280);
      *(_OWORD *)((char *)v8 + 264) = *(_OWORD *)((char *)v9 + 264);
      *(_OWORD *)((char *)v8 + 280) = v20;
      long long v21 = *(_OWORD *)((char *)v9 + 376);
      *(_OWORD *)((char *)v8 + 360) = *(_OWORD *)((char *)v9 + 360);
      *(_OWORD *)((char *)v8 + 376) = v21;
      *((void *)v8 + 49) = *((void *)v9 + 49);
      long long v22 = *(_OWORD *)((char *)v9 + 312);
      *(_OWORD *)((char *)v8 + 296) = *(_OWORD *)((char *)v9 + 296);
      *(_OWORD *)((char *)v8 + 312) = v22;
      long long v23 = *(_OWORD *)((char *)v9 + 344);
      *(_OWORD *)((char *)v8 + 328) = *(_OWORD *)((char *)v9 + 328);
      *(_OWORD *)((char *)v8 + 344) = v23;
      long long v24 = v9[28];
      v8[27] = v9[27];
      v8[28] = v24;
      *((unsigned char *)v8 + 464) = *((unsigned char *)v9 + 464);
      long long v25 = v9[26];
      v8[25] = v9[25];
      v8[26] = v25;
      *(_OWORD *)((char *)v8 + 472) = *(_OWORD *)((char *)v9 + 472);
      *(_OWORD *)((char *)v8 + 481) = *(_OWORD *)((char *)v9 + 481);
      uint64_t v26 = *((void *)v9 + 63);
      if (v26)
      {
        uint64_t v27 = *((void *)v9 + 64);
        *((void *)v8 + 63) = v26;
        *((void *)v8 + 64) = v27;
      }
      else
      {
        *(_OWORD *)((char *)v8 + 504) = *(_OWORD *)((char *)v9 + 504);
      }
      *((_WORD *)v8 + 260) = *((_WORD *)v9 + 260);
      v8[33] = v9[33];
      *((void *)v8 + 68) = *((void *)v9 + 68);
      *((void *)v8 + 71) = *((void *)v9 + 71);
      *(_OWORD *)((char *)v8 + 552) = *(_OWORD *)((char *)v9 + 552);
      *((void *)v8 + 72) = *((void *)v9 + 72);
      *(_OWORD *)((char *)v8 + 584) = *(_OWORD *)((char *)v9 + 584);
      *(_OWORD *)((char *)v8 + 600) = *(_OWORD *)((char *)v9 + 600);
      *((void *)v8 + 77) = *((void *)v9 + 77);
      *((void *)v8 + 78) = *((void *)v9 + 78);
      *((unsigned char *)v8 + 632) = *((unsigned char *)v9 + 632);
      *(_WORD *)((char *)v8 + 633) = *(_WORD *)((char *)v9 + 633);
      uint64_t v28 = type metadata accessor for PlatformItemList.Item();
      uint64_t v29 = *(int *)(v28 + 112);
      long long v53 = (int *)v28;
      __dst = (char *)v8 + v29;
      long long v30 = (char *)v9 + v29;
      uint64_t v31 = type metadata accessor for CommandOperation();
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
        memcpy(__dst, v30, *(void *)(*(void *)(v33 - 8) + 64));
        long long v34 = v53;
      }
      else
      {
        uint64_t v50 = v32;
        unsigned char *__dst = *v30;
        uint64_t v35 = *(int *)(v31 + 20);
        id v36 = &__dst[v35];
        long long v52 = v30;
        int v37 = &v30[v35];
        long long v38 = v37[1];
        *id v36 = *v37;
        v36[1] = v38;
        uint64_t v39 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        long long v51 = (char *)v36 + v39;
        int v40 = (char *)v37 + v39;
        uint64_t v41 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v51, v40, v41);
        uint64_t v42 = *(int *)(v31 + 24);
        unint64_t v43 = &__dst[v42];
        id v44 = (uint64_t *)&v52[v42];
        uint64_t v45 = *v44;
        uint64_t v46 = v31;
        if (*v44)
        {
          uint64_t v47 = v44[1];
          *unint64_t v43 = v45;
          v43[1] = v47;
        }
        else
        {
          *(_OWORD *)unint64_t v43 = *(_OWORD *)v44;
        }
        long long v34 = v53;
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v50 + 56))(__dst, 0, 1, v46);
      }
      *((unsigned char *)v8 + v34[29]) = *((unsigned char *)v9 + v34[29]);
      *((unsigned char *)v8 + v34[30]) = *((unsigned char *)v9 + v34[30]);
      *((unsigned char *)v8 + v34[31]) = *((unsigned char *)v9 + v34[31]);
      *((unsigned char *)v8 + v34[32]) = *((unsigned char *)v9 + v34[32]);
      *(void *)((char *)v8 + v34[33]) = *(void *)((char *)v9 + v34[33]);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(v11 + 64));
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v48 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  *(unsigned char *)(a1 + v48) = *(unsigned char *)(a2 + v48);
  *(void *)(a1 + a3[18]) = *(void *)(a2 + a3[18]);
  return a1;
}

uint64_t assignWithTake for ToolbarViewListVisitor(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  if (a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  }
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 50);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_weakTakeAssign();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[15];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      if (a1 == a2) {
        goto LABEL_30;
      }
      _s7SwiftUI7ToolbarO11BarLocationO_AEtWOhTm_0(v8, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        long long v32 = *(_OWORD *)(v9 + 16);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v32;
        *(unsigned char *)(v8 + 32) = *(unsigned char *)(v9 + 32);
        uint64_t v33 = *(void *)(v9 + 48);
        *(void *)(v8 + 40) = *(void *)(v9 + 40);
        *(void *)(v8 + 48) = v33;
        *(unsigned char *)(v8 + 56) = *(unsigned char *)(v9 + 56);
        long long v34 = *(_OWORD *)(v9 + 208);
        *(_OWORD *)(v8 + 192) = *(_OWORD *)(v9 + 192);
        *(_OWORD *)(v8 + 208) = v34;
        *(_OWORD *)(v8 + 224) = *(_OWORD *)(v9 + 224);
        *(_DWORD *)(v8 + 239) = *(_DWORD *)(v9 + 239);
        long long v35 = *(_OWORD *)(v9 + 144);
        *(_OWORD *)(v8 + 128) = *(_OWORD *)(v9 + 128);
        *(_OWORD *)(v8 + 144) = v35;
        long long v36 = *(_OWORD *)(v9 + 176);
        *(_OWORD *)(v8 + 160) = *(_OWORD *)(v9 + 160);
        *(_OWORD *)(v8 + 176) = v36;
        long long v37 = *(_OWORD *)(v9 + 80);
        *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
        *(_OWORD *)(v8 + 80) = v37;
        long long v38 = *(_OWORD *)(v9 + 112);
        *(_OWORD *)(v8 + 96) = *(_OWORD *)(v9 + 96);
        *(_OWORD *)(v8 + 112) = v38;
        *(_OWORD *)(v8 + 248) = *(_OWORD *)(v9 + 248);
        long long v39 = *(_OWORD *)(v9 + 280);
        *(_OWORD *)(v8 + 264) = *(_OWORD *)(v9 + 264);
        *(_OWORD *)(v8 + 280) = v39;
        long long v40 = *(_OWORD *)(v9 + 376);
        *(_OWORD *)(v8 + 360) = *(_OWORD *)(v9 + 360);
        *(_OWORD *)(v8 + 376) = v40;
        *(void *)(v8 + 392) = *(void *)(v9 + 392);
        long long v41 = *(_OWORD *)(v9 + 312);
        *(_OWORD *)(v8 + 296) = *(_OWORD *)(v9 + 296);
        *(_OWORD *)(v8 + 312) = v41;
        long long v42 = *(_OWORD *)(v9 + 344);
        *(_OWORD *)(v8 + 328) = *(_OWORD *)(v9 + 328);
        *(_OWORD *)(v8 + 344) = v42;
        long long v43 = *(_OWORD *)(v9 + 448);
        *(_OWORD *)(v8 + 432) = *(_OWORD *)(v9 + 432);
        *(_OWORD *)(v8 + 448) = v43;
        *(unsigned char *)(v8 + 464) = *(unsigned char *)(v9 + 464);
        long long v44 = *(_OWORD *)(v9 + 416);
        *(_OWORD *)(v8 + 400) = *(_OWORD *)(v9 + 400);
        *(_OWORD *)(v8 + 416) = v44;
        *(_OWORD *)(v8 + 472) = *(_OWORD *)(v9 + 472);
        *(_OWORD *)(v8 + 481) = *(_OWORD *)(v9 + 481);
        uint64_t v45 = *(void *)(v9 + 504);
        if (v45)
        {
          uint64_t v46 = *(void *)(v9 + 512);
          *(void *)(v8 + 504) = v45;
          *(void *)(v8 + 512) = v46;
        }
        else
        {
          *(_OWORD *)(v8 + 504) = *(_OWORD *)(v9 + 504);
        }
        *(_WORD *)(v8 + 520) = *(_WORD *)(v9 + 520);
        *(_OWORD *)(v8 + 528) = *(_OWORD *)(v9 + 528);
        *(void *)(v8 + 544) = *(void *)(v9 + 544);
        *(void *)(v8 + 568) = *(void *)(v9 + 568);
        *(_OWORD *)(v8 + 552) = *(_OWORD *)(v9 + 552);
        *(void *)(v8 + 576) = *(void *)(v9 + 576);
        *(_OWORD *)(v8 + 584) = *(_OWORD *)(v9 + 584);
        *(_OWORD *)(v8 + 600) = *(_OWORD *)(v9 + 600);
        *(void *)(v8 + 616) = *(void *)(v9 + 616);
        *(void *)(v8 + 624) = *(void *)(v9 + 624);
        *(unsigned char *)(v8 + 632) = *(unsigned char *)(v9 + 632);
        *(_WORD *)(v8 + 633) = *(_WORD *)(v9 + 633);
        id v64 = (int *)type metadata accessor for PlatformItemList.Item();
        uint64_t v65 = v64[28];
        __dsta = (unsigned char *)(v8 + v65);
        long long v66 = (unsigned char *)(v9 + v65);
        uint64_t v67 = type metadata accessor for CommandOperation();
        uint64_t v68 = *(void *)(v67 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
        {
          type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
          memcpy(__dsta, v66, *(void *)(*(void *)(v69 - 8) + 64));
        }
        else
        {
          uint64_t v91 = v68;
          unsigned char *__dsta = *v66;
          uint64_t v77 = *(int *)(v67 + 20);
          long long v78 = &__dsta[v77];
          uint64_t v95 = v66;
          unint64_t v79 = &v66[v77];
          long long v80 = v79[1];
          *long long v78 = *v79;
          v78[1] = v80;
          uint64_t v81 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          uint64_t v93 = (char *)v78 + v81;
          long long v82 = (char *)v79 + v81;
          uint64_t v83 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 32))(v93, v82, v83);
          uint64_t v84 = *(int *)(v67 + 24);
          uint64_t v85 = &__dsta[v84];
          uint64_t v86 = (uint64_t *)&v95[v84];
          uint64_t v87 = *v86;
          if (*v86)
          {
            uint64_t v88 = v86[1];
            void *v85 = v87;
            v85[1] = v88;
          }
          else
          {
            *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
          }
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v91 + 56))(__dsta, 0, 1, v67);
        }
        *(unsigned char *)(v8 + v64[29]) = *(unsigned char *)(v9 + v64[29]);
        *(unsigned char *)(v8 + v64[30]) = *(unsigned char *)(v9 + v64[30]);
        *(unsigned char *)(v8 + v64[31]) = *(unsigned char *)(v9 + v64[31]);
        *(unsigned char *)(v8 + v64[32]) = *(unsigned char *)(v9 + v64[32]);
        *(void *)(v8 + v64[33]) = *(void *)(v9 + v64[33]);
        swift_storeEnumTagMultiPayload();
        goto LABEL_30;
      }
      size_t v31 = *(void *)(v11 + 64);
LABEL_11:
      memcpy((void *)v8, (const void *)v9, v31);
      goto LABEL_30;
    }
    _s7SwiftUI7ToolbarO11BarLocationO_AEtWOhTm_0(v8, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
LABEL_10:
    type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
    size_t v31 = *(void *)(*(void *)(v30 - 8) + 64);
    goto LABEL_11;
  }
  if (v14) {
    goto LABEL_10;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v15 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v15;
    *(unsigned char *)(v8 + 32) = *(unsigned char *)(v9 + 32);
    uint64_t v16 = *(void *)(v9 + 48);
    *(void *)(v8 + 40) = *(void *)(v9 + 40);
    *(void *)(v8 + 48) = v16;
    *(unsigned char *)(v8 + 56) = *(unsigned char *)(v9 + 56);
    long long v17 = *(_OWORD *)(v9 + 208);
    *(_OWORD *)(v8 + 192) = *(_OWORD *)(v9 + 192);
    *(_OWORD *)(v8 + 208) = v17;
    *(_OWORD *)(v8 + 224) = *(_OWORD *)(v9 + 224);
    *(_DWORD *)(v8 + 239) = *(_DWORD *)(v9 + 239);
    long long v18 = *(_OWORD *)(v9 + 144);
    *(_OWORD *)(v8 + 128) = *(_OWORD *)(v9 + 128);
    *(_OWORD *)(v8 + 144) = v18;
    long long v19 = *(_OWORD *)(v9 + 176);
    *(_OWORD *)(v8 + 160) = *(_OWORD *)(v9 + 160);
    *(_OWORD *)(v8 + 176) = v19;
    long long v20 = *(_OWORD *)(v9 + 80);
    *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
    *(_OWORD *)(v8 + 80) = v20;
    long long v21 = *(_OWORD *)(v9 + 112);
    *(_OWORD *)(v8 + 96) = *(_OWORD *)(v9 + 96);
    *(_OWORD *)(v8 + 112) = v21;
    *(_OWORD *)(v8 + 248) = *(_OWORD *)(v9 + 248);
    long long v22 = *(_OWORD *)(v9 + 280);
    *(_OWORD *)(v8 + 264) = *(_OWORD *)(v9 + 264);
    *(_OWORD *)(v8 + 280) = v22;
    long long v23 = *(_OWORD *)(v9 + 376);
    *(_OWORD *)(v8 + 360) = *(_OWORD *)(v9 + 360);
    *(_OWORD *)(v8 + 376) = v23;
    *(void *)(v8 + 392) = *(void *)(v9 + 392);
    long long v24 = *(_OWORD *)(v9 + 312);
    *(_OWORD *)(v8 + 296) = *(_OWORD *)(v9 + 296);
    *(_OWORD *)(v8 + 312) = v24;
    long long v25 = *(_OWORD *)(v9 + 344);
    *(_OWORD *)(v8 + 328) = *(_OWORD *)(v9 + 328);
    *(_OWORD *)(v8 + 344) = v25;
    long long v26 = *(_OWORD *)(v9 + 448);
    *(_OWORD *)(v8 + 432) = *(_OWORD *)(v9 + 432);
    *(_OWORD *)(v8 + 448) = v26;
    *(unsigned char *)(v8 + 464) = *(unsigned char *)(v9 + 464);
    long long v27 = *(_OWORD *)(v9 + 416);
    *(_OWORD *)(v8 + 400) = *(_OWORD *)(v9 + 400);
    *(_OWORD *)(v8 + 416) = v27;
    *(_OWORD *)(v8 + 472) = *(_OWORD *)(v9 + 472);
    *(_OWORD *)(v8 + 481) = *(_OWORD *)(v9 + 481);
    uint64_t v28 = *(void *)(v9 + 504);
    if (v28)
    {
      uint64_t v29 = *(void *)(v9 + 512);
      *(void *)(v8 + 504) = v28;
      *(void *)(v8 + 512) = v29;
    }
    else
    {
      *(_OWORD *)(v8 + 504) = *(_OWORD *)(v9 + 504);
    }
    *(_WORD *)(v8 + 520) = *(_WORD *)(v9 + 520);
    *(_OWORD *)(v8 + 528) = *(_OWORD *)(v9 + 528);
    *(void *)(v8 + 544) = *(void *)(v9 + 544);
    *(void *)(v8 + 568) = *(void *)(v9 + 568);
    *(_OWORD *)(v8 + 552) = *(_OWORD *)(v9 + 552);
    *(void *)(v8 + 576) = *(void *)(v9 + 576);
    *(_OWORD *)(v8 + 584) = *(_OWORD *)(v9 + 584);
    *(_OWORD *)(v8 + 600) = *(_OWORD *)(v9 + 600);
    *(void *)(v8 + 616) = *(void *)(v9 + 616);
    *(void *)(v8 + 624) = *(void *)(v9 + 624);
    *(unsigned char *)(v8 + 632) = *(unsigned char *)(v9 + 632);
    *(_WORD *)(v8 + 633) = *(_WORD *)(v9 + 633);
    long long v92 = (int *)type metadata accessor for PlatformItemList.Item();
    uint64_t v47 = v92[28];
    __dst = (unsigned char *)(v8 + v47);
    uint64_t v48 = (unsigned char *)(v9 + v47);
    uint64_t v49 = type metadata accessor for CommandOperation();
    uint64_t v50 = *(void *)(v49 - 8);
    uint64_t v94 = v48;
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
    {
      type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
      memcpy(__dst, v48, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      uint64_t v90 = v50;
      unsigned char *__dst = *v48;
      uint64_t v52 = *(int *)(v49 + 20);
      long long v53 = &__dst[v52];
      long long v54 = &v94[v52];
      long long v55 = *(_OWORD *)&v94[v52 + 16];
      *long long v53 = *(_OWORD *)&v94[v52];
      v53[1] = v55;
      uint64_t v56 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      uint64_t v89 = (char *)v53 + v56;
      id v57 = &v54[v56];
      uint64_t v58 = type metadata accessor for UUID();
      (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v58 - 8) + 32))(v89, v57, v58);
      uint64_t v59 = *(int *)(v49 + 24);
      uint64_t v60 = &__dst[v59];
      long long v61 = (uint64_t *)&v94[v59];
      uint64_t v62 = *v61;
      if (*v61)
      {
        uint64_t v63 = v61[1];
        *uint64_t v60 = v62;
        v60[1] = v63;
      }
      else
      {
        *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
      }
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v90 + 56))(__dst, 0, 1, v49);
    }
    *(unsigned char *)(v8 + v92[29]) = *(unsigned char *)(v9 + v92[29]);
    *(unsigned char *)(v8 + v92[30]) = *(unsigned char *)(v9 + v92[30]);
    *(unsigned char *)(v8 + v92[31]) = *(unsigned char *)(v9 + v92[31]);
    *(unsigned char *)(v8 + v92[32]) = *(unsigned char *)(v9 + v92[32]);
    *(void *)(v8 + v92[33]) = *(void *)(v9 + v92[33]);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy((void *)v8, (const void *)v9, *(void *)(v11 + 64));
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_30:
  uint64_t v70 = a3[16];
  uint64_t v71 = (void *)(a1 + v70);
  uint64_t v72 = (uint64_t *)(a2 + v70);
  uint64_t v74 = *v72;
  uint64_t v73 = v72[1];
  void *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease();
  uint64_t v75 = a3[18];
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  *(void *)(a1 + v75) = *(void *)(a2 + v75);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarViewListVisitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_188155AE4);
}

uint64_t sub_188155AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 60);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 72));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ToolbarViewListVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_188155BEC);
}

void sub_188155BEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a4 + 60);
    unint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 72)) = (a2 - 1);
  }
}

unsigned char *storeEnumTagSinglePayload for ToolbarViewListVisitor.ContinuationMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x188155DA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarViewListVisitor.ContinuationMode()
{
  return &type metadata for ToolbarViewListVisitor.ContinuationMode;
}

unint64_t lazy protocol witness table accessor for type ToolbarViewListVisitor.ContinuationMode and conformance ToolbarViewListVisitor.ContinuationMode()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarViewListVisitor.ContinuationMode and conformance ToolbarViewListVisitor.ContinuationMode;
  if (!lazy protocol witness table cache variable for type ToolbarViewListVisitor.ContinuationMode and conformance ToolbarViewListVisitor.ContinuationMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarViewListVisitor.ContinuationMode and conformance ToolbarViewListVisitor.ContinuationMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions;
  if (!lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions;
  if (!lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions;
  if (!lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions;
  if (!lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarItemBridgingOptions and conformance ToolbarItemBridgingOptions);
  }
  return result;
}

uint64_t outlined assign with take of ToolbarStorage.GroupItem.CollapsedContent?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (offset: Int, element: ToolbarStorage.Item)?(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t ClarityUIPreviewContext.subscript.getter(ValueMetadata *a1, uint64_t a2, uint64_t a3)
{
  if (a1 != &type metadata for ClarityUIPreviewContextKey) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  }
  swift_getAssociatedTypeWitness();

  return swift_dynamicCast();
}

uint64_t protocol witness for PreviewContext.subscript.getter in conformance ClarityUIPreviewContext(ValueMetadata *a1, uint64_t a2, uint64_t a3)
{
  return ClarityUIPreviewContext.subscript.getter(a1, a2, a3);
}

void static ClarityUIPreviewContextKey.defaultValue.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

ValueMetadata *type metadata accessor for ClarityUIPreviewContext()
{
  return &type metadata for ClarityUIPreviewContext;
}

ValueMetadata *type metadata accessor for ClarityUIPreviewContextKey()
{
  return &type metadata for ClarityUIPreviewContextKey;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 32;
  for (uint64_t i = a2 + 32; ; i += 120)
  {
    outlined init with copy of SwiftUIAnySortComparator(i, (uint64_t)v8);
    char v6 = MEMORY[0x18C1174E0](&v9, v4);
    outlined destroy of SwiftUIAnySortComparator((uint64_t)v8);
    if (v6) {
      break;
    }
    if (v2 == ++v3) {
      return 0;
    }
  }
  return v3;
}

void specialized Collection<>.firstIndex(of:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        id v4 = (id)MEMORY[0x18C117680](0, a2);
      }
      else
      {
        if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v4 = *(id *)(a2 + 32);
      }
      uint64_t v5 = v4;
      type metadata accessor for AccessibilityNode();
      char v6 = static NSObject.== infix(_:_:)();

      if ((v6 & 1) == 0)
      {
        for (uint64_t i = 0; ; ++i)
        {
          unint64_t v11 = i + 1;
          if (__OFADD__(i, 1)) {
            break;
          }
          if (v11 == v3) {
            return;
          }
          if ((a2 & 0xC000000000000001) != 0)
          {
            id v8 = (id)MEMORY[0x18C117680](i + 1, a2);
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0) {
              goto LABEL_18;
            }
            if (v11 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_19;
            }
            id v8 = *(id *)(a2 + 32 + 8 * v11);
          }
          uint64_t v9 = v8;
          char v10 = static NSObject.== infix(_:_:)();

          if (v10) {
            return;
          }
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v3) {
          continue;
        }
      }
      return;
    }
  }
}

{
  uint64_t v3;
  id v4;
  void *v5;
  char v6;
  uint64_t i;
  id v8;
  void *v9;
  char v10;
  unint64_t v11;

  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        id v4 = (id)MEMORY[0x18C117680](0, a2);
      }
      else
      {
        if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v4 = *(id *)(a2 + 32);
      }
      uint64_t v5 = v4;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertAction);
      char v6 = static NSObject.== infix(_:_:)();

      if ((v6 & 1) == 0)
      {
        for (uint64_t i = 0; ; ++i)
        {
          unint64_t v11 = i + 1;
          if (__OFADD__(i, 1)) {
            break;
          }
          if (v11 == v3) {
            return;
          }
          if ((a2 & 0xC000000000000001) != 0)
          {
            id v8 = (id)MEMORY[0x18C117680](i + 1, a2);
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0) {
              goto LABEL_18;
            }
            if (v11 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_19;
            }
            id v8 = *(id *)(a2 + 32 + 8 * v11);
          }
          uint64_t v9 = v8;
          char v10 = static NSObject.== infix(_:_:)();

          if (v10) {
            return;
          }
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v3) {
          continue;
        }
      }
      return;
    }
  }
}

unint64_t specialized Dictionary.optimisticFilter(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16) >= 0x41uLL)
  {
    uint64_t v1 = swift_bridgeObjectRetain();
    uint64_t v2 = specialized _NativeDictionary.filter(_:)(v1, (uint64_t (*)(char *, unint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
    swift_bridgeObjectRelease();
    return v2;
  }
  uint64_t v47 = a1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(a1 + 64);
  int64_t v46 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain();
  unint64_t v6 = 0;
  unint64_t v49 = 0;
  int64_t i = 0;
  char v44 = 1;
  char v45 = 1;
  if (v5) {
    goto LABEL_8;
  }
LABEL_9:
  int64_t v9 = i + 1;
  if (__OFADD__(i, 1))
  {
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  if (v9 >= v46) {
    goto LABEL_31;
  }
  unint64_t v10 = *(void *)(v47 + 8 * v9);
  int64_t v11 = i + 1;
  if (v10) {
    goto LABEL_24;
  }
  int64_t v11 = i + 2;
  if (i + 2 >= v46)
  {
LABEL_31:
    uint64_t v2 = a1;
    outlined consume of Set<UIPress>.Iterator._Variant();
    if (v45) {
      return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    }
    if (v44)
    {
      swift_bridgeObjectRetain();
      return v2;
    }
    uint64_t v17 = -1;
    uint64_t v18 = -1 << *(unsigned char *)(a1 + 32);
    if (-v18 < 64) {
      uint64_t v17 = ~(-1 << -(char)v18);
    }
    unint64_t v19 = v17 & *(void *)(a1 + 64);
    int64_t v51 = (unint64_t)(63 - v18) >> 6;
    swift_bridgeObjectRetain();
    unint64_t v20 = 0;
    int64_t v21 = 0;
    long long v22 = (void *)MEMORY[0x1E4FBC868];
    while (!v19)
    {
      int64_t v25 = v21 + 1;
      if (__OFADD__(v21, 1)) {
        goto LABEL_81;
      }
      int64_t v27 = v21;
      if (v25 < v51)
      {
        unint64_t v28 = *(void *)(v47 + 8 * v25);
        if (v28) {
          goto LABEL_47;
        }
        int64_t v29 = v21 + 2;
        int64_t v27 = v21 + 1;
        if (v21 + 2 < v51)
        {
          unint64_t v28 = *(void *)(v47 + 8 * v29);
          if (v28) {
            goto LABEL_50;
          }
          int64_t v27 = v21 + 2;
          if (v21 + 3 < v51)
          {
            unint64_t v28 = *(void *)(v47 + 8 * (v21 + 3));
            if (v28)
            {
              int64_t v25 = v21 + 3;
              goto LABEL_47;
            }
            int64_t v27 = v21 + 3;
            if (v21 + 4 < v51)
            {
              unint64_t v28 = *(void *)(v47 + 8 * (v21 + 4));
              if (v28)
              {
                int64_t v25 = v21 + 4;
                goto LABEL_47;
              }
              int64_t v29 = v21 + 5;
              int64_t v27 = v21 + 4;
              if (v21 + 5 < v51)
              {
                unint64_t v28 = *(void *)(v47 + 8 * v29);
                if (!v28)
                {
                  while (1)
                  {
                    int64_t v25 = v29 + 1;
                    if (__OFADD__(v29, 1)) {
                      goto LABEL_85;
                    }
                    if (v25 >= v51)
                    {
                      int64_t v27 = v51 - 1;
                      goto LABEL_64;
                    }
                    unint64_t v28 = *(void *)(v47 + 8 * v25);
                    ++v29;
                    if (v28) {
                      goto LABEL_47;
                    }
                  }
                }
LABEL_50:
                int64_t v25 = v29;
LABEL_47:
                uint64_t v23 = (v28 - 1) & v28;
                unint64_t v24 = __clz(__rbit64(v28)) + (v25 << 6);
LABEL_43:
                uint64_t v26 = *(void *)(v2 + 56);
                v60[0] = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v24);
                outlined init with copy of ConfirmationDialog(v26 + 184 * v24, (uint64_t)&v60[2]);
                int64_t v27 = v25;
                goto LABEL_65;
              }
            }
          }
        }
      }
LABEL_64:
      uint64_t v23 = 0;
      memset(v60, 0, 185);
LABEL_65:
      _s7SwiftUI7WeakBoxVySo11UITextFieldCGWObTm_0((uint64_t)v60, (uint64_t)&v61, (uint64_t (*)(void))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog)?);
      if (!v62[2])
      {
        outlined consume of Set<UIPress>.Iterator._Variant();
        return (unint64_t)v22;
      }
      Swift::UInt32 v30 = v61;
      outlined init with take of ConfirmationDialog((uint64_t)v62, (uint64_t)v60);
      if (v20 == 0x8000000000000000) {
        goto LABEL_86;
      }
      if (v20 < 0x40 && ((v49 >> v20) & 1) != 0)
      {
        outlined init with copy of ConfirmationDialog((uint64_t)v60, (uint64_t)&v58);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v56 = v22;
        unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
        uint64_t v34 = v22[2];
        BOOL v35 = (v32 & 1) == 0;
        uint64_t v36 = v34 + v35;
        if (__OFADD__(v34, v35)) {
          goto LABEL_82;
        }
        char v37 = v32;
        if (v22[3] >= v36)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, isUniquelyReferenced_nonNull_native);
          unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
          if ((v37 & 1) != (v39 & 1)) {
            goto LABEL_87;
          }
          unint64_t v33 = v38;
        }
        uint64_t v2 = a1;
        long long v22 = v56;
        if (v37)
        {
          outlined assign with take of ConfirmationDialog((uint64_t)&v58, v56[7] + 184 * v33);
        }
        else
        {
          v56[(v33 >> 6) + 8] |= 1 << v33;
          *(_DWORD *)(v22[6] + 4 * v33) = v30;
          outlined init with take of ConfirmationDialog((uint64_t)&v58, v22[7] + 184 * v33);
          uint64_t v40 = v22[2];
          BOOL v41 = __OFADD__(v40, 1);
          uint64_t v42 = v40 + 1;
          if (v41) {
            goto LABEL_84;
          }
          void v22[2] = v42;
        }
        swift_bridgeObjectRelease();
      }
      outlined destroy of ConfirmationDialog((uint64_t)v60);
      ++v20;
      int64_t v21 = v27;
      unint64_t v19 = v23;
    }
    uint64_t v23 = (v19 - 1) & v19;
    unint64_t v24 = __clz(__rbit64(v19)) | (v21 << 6);
    int64_t v25 = v21;
    goto LABEL_43;
  }
  unint64_t v10 = *(void *)(v47 + 8 * v11);
  if (v10)
  {
LABEL_24:
    unint64_t v5 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
    for (i = v11; ; unint64_t v8 = v7 | (i << 6))
    {
      uint64_t v13 = *(void *)(a1 + 56);
      Swift::UInt32 v61 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * v8);
      Swift::UInt32 v14 = v61;
      outlined init with copy of ConfirmationDialog(v13 + 184 * v8, (uint64_t)v62);
      v60[0] = v14;
      outlined init with take of ConfirmationDialog((uint64_t)v62, (uint64_t)&v60[2]);
      Swift::UInt32 v58 = v14;
      outlined init with copy of ConfirmationDialog((uint64_t)&v60[2], (uint64_t)v59);
      LODWORD(v56) = v14;
      outlined init with copy of ConfirmationDialog((uint64_t)v59, (uint64_t)v57);
      Swift::UInt32 v54 = v14;
      outlined init with copy of ConfirmationDialog((uint64_t)v57, (uint64_t)v55);
      Swift::UInt32 v52 = v14;
      outlined init with take of ConfirmationDialog((uint64_t)v55, (uint64_t)v53);
      int v15 = v53[0];
      outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v52, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t (*)(void, uint64_t, ValueMetadata *))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog));
      outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v56, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t (*)(void, uint64_t, ValueMetadata *))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog));
      outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)v60, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t (*)(void, uint64_t, ValueMetadata *))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog));
      outlined destroy of ConfirmationDialog((uint64_t)v59);
      if (v15 == 1)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          goto LABEL_86;
        }
        char v45 = 0;
        uint64_t v16 = 1 << v6;
        if (v6 >= 0x40) {
          uint64_t v16 = 0;
        }
        v49 |= v16;
        ++v6;
        if (!v5) {
          goto LABEL_9;
        }
      }
      else
      {
        char v44 = 0;
        ++v6;
        if (!v5) {
          goto LABEL_9;
        }
      }
LABEL_8:
      unint64_t v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
    }
  }
  int64_t v11 = i + 3;
  if (i + 3 >= v46) {
    goto LABEL_31;
  }
  unint64_t v10 = *(void *)(v47 + 8 * v11);
  if (v10) {
    goto LABEL_24;
  }
  int64_t v11 = i + 4;
  if (i + 4 >= v46) {
    goto LABEL_31;
  }
  unint64_t v10 = *(void *)(v47 + 8 * v11);
  if (v10) {
    goto LABEL_24;
  }
  int64_t v12 = i + 5;
  if (i + 5 >= v46) {
    goto LABEL_31;
  }
  unint64_t v10 = *(void *)(v47 + 8 * v12);
  if (v10)
  {
    int64_t v11 = i + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v11 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v11 >= v46) {
      goto LABEL_31;
    }
    unint64_t v10 = *(void *)(v47 + 8 * v11);
    ++v12;
    if (v10) {
      goto LABEL_24;
    }
  }
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_87:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  unint64_t v5;
  int64_t i;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  int v35;
  uint64_t v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  Swift::UInt32 v56;
  unint64_t v57;
  char isUniquelyReferenced_nonNull_native;
  char v59;
  unint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  char v66;
  void *v67;
  uint64_t v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  long long v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  long long v95;
  long long v96;
  long long v97;
  long long v98;
  long long v99;
  long long v100;
  long long v101;
  long long v102;
  long long v103;
  long long v104;
  long long v105;
  long long v106;
  long long v107;
  long long v108;
  uint64_t v109;
  uint64_t v110;
  int64_t v111;
  void *v112;
  int64_t v113;
  uint64_t v114;
  unint64_t v115;
  _OWORD v116[15];
  uint64_t v117;
  void *v118;
  _OWORD v119[15];
  uint64_t v120;
  unsigned char v121[252];
  int v122;
  long long v123;
  long long v124;
  long long v125;
  long long v126;
  long long v127;
  long long v128;
  long long v129;
  long long v130;
  long long v131;
  long long v132;
  long long v133;
  long long v134;
  long long v135;
  long long v136;
  unsigned char v137[28];
  long long v138;
  long long v139;
  long long v140;
  long long v141;
  long long v142;
  long long v143;
  long long v144;
  long long v145;
  long long v146;
  long long v147;
  long long v148;
  long long v149;
  long long v150;
  long long v151;
  long long v152;
  uint64_t v153;
  Swift::UInt32 v154;
  long long v155;
  long long v156;
  long long v157;
  long long v158;
  long long v159;
  long long v160;
  long long v161;
  long long v162;
  long long v163;
  long long v164;
  long long v165;
  long long v166;
  long long v167;
  long long v168;
  long long v169;
  uint64_t v170;
  uint64_t vars8;

  uint64_t v1 = a1;
  if (*(void *)(a1 + 16) >= 0x41uLL)
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    uint64_t v3 = specialized _NativeDictionary.filter(_:)(v2, (uint64_t (*)(char *, unint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
    swift_bridgeObjectRelease();
    return v3;
  }
  unint64_t v5 = 0;
  int64_t i = 0;
  unint64_t v7 = 0;
  unint64_t v8 = a1 + 64;
  int64_t v9 = -1;
  unint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
  if (-v10 < 64) {
    int64_t v9 = ~(-1 << -(char)v10);
  }
  int64_t v11 = v9 & *(void *)(a1 + 64);
  int64_t v12 = (unint64_t)(63 - v10) >> 6;
  uint64_t v13 = 1;
  Swift::UInt32 v14 = 1;
  if (v11) {
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v17 = i + 1;
  if (!__OFADD__(i, 1))
  {
    if (v17 < v12)
    {
      uint64_t v18 = *(void *)(v8 + 8 * v17);
      unint64_t v19 = i + 1;
      if (v18) {
        goto LABEL_25;
      }
      unint64_t v19 = i + 2;
      if (i + 2 < v12)
      {
        uint64_t v18 = *(void *)(v8 + 8 * v19);
        if (v18) {
          goto LABEL_25;
        }
        unint64_t v19 = i + 3;
        if (i + 3 < v12)
        {
          uint64_t v18 = *(void *)(v8 + 8 * v19);
          if (v18) {
            goto LABEL_25;
          }
          unint64_t v19 = i + 4;
          if (i + 4 < v12)
          {
            uint64_t v18 = *(void *)(v8 + 8 * v19);
            if (!v18)
            {
              unint64_t v20 = i + 5;
              if (i + 5 < v12)
              {
                uint64_t v18 = *(void *)(v8 + 8 * v20);
                if (v18)
                {
                  unint64_t v19 = i + 5;
                  goto LABEL_25;
                }
                while (1)
                {
                  unint64_t v19 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_82;
                  }
                  if (v19 >= v12) {
                    goto LABEL_32;
                  }
                  uint64_t v18 = *(void *)(v8 + 8 * v19);
                  ++v20;
                  if (v18) {
                    goto LABEL_25;
                  }
                }
              }
              goto LABEL_32;
            }
LABEL_25:
            int64_t v11 = (v18 - 1) & v18;
            uint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
            for (i = v19; ; uint64_t v16 = v15 | (i << 6))
            {
              if (*(unsigned char *)(*(void *)(a1 + 56) + 248 * v16) == 1)
              {
                if ((v5 & 0x8000000000000000) != 0) {
                  goto LABEL_85;
                }
                uint64_t v13 = 0;
                int64_t v21 = 1 << v5;
                if (v5 >= 0x40) {
                  int64_t v21 = 0;
                }
                v7 |= v21;
                ++v5;
                if (!v11) {
                  goto LABEL_10;
                }
              }
              else
              {
                Swift::UInt32 v14 = 0;
                ++v5;
                if (!v11) {
                  goto LABEL_10;
                }
              }
LABEL_9:
              int v15 = __clz(__rbit64(v11));
              v11 &= v11 - 1;
            }
          }
        }
      }
    }
LABEL_32:
    swift_bridgeObjectRetain();
    outlined consume of Set<UIPress>.Iterator._Variant();
    if (v13)
    {
      long long v22 = MEMORY[0x1E4FBC860];
      return specialized Dictionary.init(dictionaryLiteral:)(v22);
    }
    if (v14)
    {
      swift_bridgeObjectRetain();
      return v1;
    }
    uint64_t v23 = -1;
    unint64_t v24 = -1 << *(unsigned char *)(v1 + 32);
    if (-v24 < 64) {
      uint64_t v23 = ~(-1 << -(char)v24);
    }
    int64_t v25 = v23 & *(void *)(v1 + 64);
    uint64_t v111 = (unint64_t)(63 - v24) >> 6;
    swift_bridgeObjectRetain();
    int64_t v29 = 0;
    id v113 = 0;
    uint64_t v112 = (void *)MEMORY[0x1E4FBC868];
    uint64_t v109 = v1 + 64;
    uint64_t v110 = v1;
    while (1)
    {
      uint64_t v115 = v29;
      if (v25)
      {
        uint64_t v114 = (v25 - 1) & v25;
        Swift::UInt32 v30 = __clz(__rbit64(v25)) | (v113 << 6);
      }
      else
      {
        size_t v31 = v113 + 1;
        if (__OFADD__(v113, 1)) {
          goto LABEL_80;
        }
        if (v31 >= v111)
        {
LABEL_78:
          outlined consume of Set<UIPress>.Iterator._Variant();
          return (unint64_t)v112;
        }
        char v32 = *(void *)(v8 + 8 * v31);
        unint64_t v33 = v113 + 1;
        if (!v32)
        {
          unint64_t v33 = v113 + 2;
          if (v113 + 2 >= v111) {
            goto LABEL_78;
          }
          char v32 = *(void *)(v8 + 8 * v33);
          if (!v32)
          {
            unint64_t v33 = v113 + 3;
            if (v113 + 3 >= v111) {
              goto LABEL_78;
            }
            char v32 = *(void *)(v8 + 8 * v33);
            if (!v32)
            {
              unint64_t v33 = v113 + 4;
              if (v113 + 4 >= v111) {
                goto LABEL_78;
              }
              char v32 = *(void *)(v8 + 8 * v33);
              if (!v32)
              {
                uint64_t v34 = v113 + 5;
                if (v113 + 5 >= v111) {
                  goto LABEL_78;
                }
                char v32 = *(void *)(v8 + 8 * v34);
                if (!v32)
                {
                  while (1)
                  {
                    unint64_t v33 = v34 + 1;
                    if (__OFADD__(v34, 1)) {
                      goto LABEL_84;
                    }
                    if (v33 >= v111) {
                      goto LABEL_78;
                    }
                    char v32 = *(void *)(v8 + 8 * v33);
                    ++v34;
                    if (v32) {
                      goto LABEL_60;
                    }
                  }
                }
                unint64_t v33 = v113 + 5;
              }
            }
          }
        }
LABEL_60:
        id v113 = v33;
        uint64_t v114 = (v32 - 1) & v32;
        Swift::UInt32 v30 = __clz(__rbit64(v32)) + (v33 << 6);
      }
      BOOL v35 = *(_DWORD *)(*(void *)(v1 + 48) + 4 * v30);
      uint64_t v36 = *(void *)(v1 + 56) + 248 * v30;
      char v37 = *(_OWORD *)(v36 + 48);
      char v39 = *(_OWORD *)v36;
      unint64_t v38 = *(_OWORD *)(v36 + 16);
      v119[2] = *(_OWORD *)(v36 + 32);
      v119[3] = v37;
      v119[0] = v39;
      v119[1] = v38;
      uint64_t v40 = *(_OWORD *)(v36 + 112);
      uint64_t v42 = *(_OWORD *)(v36 + 64);
      BOOL v41 = *(_OWORD *)(v36 + 80);
      v119[6] = *(_OWORD *)(v36 + 96);
      v119[7] = v40;
      v119[4] = v42;
      v119[5] = v41;
      long long v43 = *(_OWORD *)(v36 + 176);
      char v45 = *(_OWORD *)(v36 + 128);
      char v44 = *(_OWORD *)(v36 + 144);
      v119[10] = *(_OWORD *)(v36 + 160);
      v119[11] = v43;
      v119[8] = v45;
      v119[9] = v44;
      uint64_t v47 = *(_OWORD *)(v36 + 208);
      int64_t v46 = *(_OWORD *)(v36 + 224);
      uint64_t v48 = *(_OWORD *)(v36 + 192);
      char v120 = *(void *)(v36 + 240);
      v119[13] = v47;
      v119[14] = v46;
      v119[12] = v48;
      unint64_t v49 = *(_OWORD *)(v36 + 208);
      *(_OWORD *)&v121[196] = *(_OWORD *)(v36 + 192);
      *(_OWORD *)&v121[212] = v49;
      *(_OWORD *)&v121[228] = *(_OWORD *)(v36 + 224);
      *(void *)&v121[244] = *(void *)(v36 + 240);
      uint64_t v50 = *(_OWORD *)(v36 + 144);
      *(_OWORD *)&v121[132] = *(_OWORD *)(v36 + 128);
      *(_OWORD *)&v121[148] = v50;
      int64_t v51 = *(_OWORD *)(v36 + 176);
      *(_OWORD *)&v121[164] = *(_OWORD *)(v36 + 160);
      *(_OWORD *)&v121[180] = v51;
      Swift::UInt32 v52 = *(_OWORD *)(v36 + 80);
      *(_OWORD *)&v121[68] = *(_OWORD *)(v36 + 64);
      *(_OWORD *)&v121[84] = v52;
      long long v53 = *(_OWORD *)(v36 + 112);
      *(_OWORD *)&v121[100] = *(_OWORD *)(v36 + 96);
      *(_OWORD *)&v121[116] = v53;
      Swift::UInt32 v54 = *(_OWORD *)(v36 + 16);
      *(_OWORD *)&v121[4] = *(_OWORD *)v36;
      *(_OWORD *)&v121[20] = v54;
      long long v55 = *(_OWORD *)(v36 + 48);
      *(_OWORD *)&v121[36] = *(_OWORD *)(v36 + 32);
      *(_OWORD *)&v121[52] = v55;
      uint64_t v122 = v35;
      long long v135 = *(_OWORD *)&v121[192];
      long long v136 = *(_OWORD *)&v121[208];
      *(_OWORD *)unint64_t v137 = *(_OWORD *)&v121[224];
      *(_OWORD *)&v137[12] = *(_OWORD *)&v121[236];
      uint64_t v131 = *(_OWORD *)&v121[128];
      uint64_t v132 = *(_OWORD *)&v121[144];
      id v133 = *(_OWORD *)&v121[160];
      long long v134 = *(_OWORD *)&v121[176];
      uint64_t v127 = *(_OWORD *)&v121[64];
      uint64_t v128 = *(_OWORD *)&v121[80];
      uint64_t v129 = *(_OWORD *)&v121[96];
      uint64_t v130 = *(_OWORD *)&v121[112];
      uint64_t v123 = *(_OWORD *)v121;
      uint64_t v124 = *(_OWORD *)&v121[16];
      uint64_t v125 = *(_OWORD *)&v121[32];
      unint64_t v126 = *(_OWORD *)&v121[48];
      destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v122, v26, v27, v28);
      _s7SwiftUI7WeakBoxVySo11UITextFieldCGWObTm_0((uint64_t)&v122, (uint64_t)&v154, (uint64_t (*)(void))type metadata accessor for (key: ViewIdentity, value: AlertStorage)?);
      uint64_t v56 = v154;
      unint64_t v150 = v167;
      long long v151 = v168;
      long long v152 = v169;
      long long v153 = v170;
      id v146 = v163;
      int v147 = v164;
      long long v148 = v165;
      long long v149 = v166;
      int v142 = v159;
      long long v143 = v160;
      id v144 = v161;
      v145 = v162;
      long long v138 = v155;
      uint64_t v139 = v156;
      uint64_t v140 = v157;
      uint64_t v141 = v158;
      if (v115 == 0x8000000000000000) {
        goto LABEL_85;
      }
      if (v115 >= 0x41)
      {
        outlined retain of AlertStorage(v119);
        outlined release of AlertStorage(&v138);
        goto LABEL_42;
      }
      if (v115 == 64)
      {
        outlined retain of AlertStorage(v119);
      }
      else
      {
        outlined retain of AlertStorage(v119);
        if ((v7 >> v115))
        {
          id v57 = v7;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v118 = v112;
          uint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v56);
          Swift::UInt32 v61 = v112[2];
          uint64_t v62 = (v59 & 1) == 0;
          uint64_t v63 = v61 + v62;
          if (__OFADD__(v61, v62)) {
            goto LABEL_81;
          }
          id v64 = v59;
          if (v112[3] >= v63)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              specialized _NativeDictionary.copy()();
            }
            unint64_t v7 = v57;
            if ((v64 & 1) == 0) {
              goto LABEL_69;
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v63, isUniquelyReferenced_nonNull_native);
            uint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(v56);
            if ((v64 & 1) != (v66 & 1)) {
              goto LABEL_86;
            }
            uint64_t v60 = v65;
            unint64_t v7 = v57;
            if ((v64 & 1) == 0)
            {
LABEL_69:
              uint64_t v67 = v118;
              v118[(v60 >> 6) + 8] |= 1 << v60;
              *(_DWORD *)(v67[6] + 4 * v60) = v56;
              uint64_t v68 = v67[7] + 248 * v60;
              uint64_t v69 = v141;
              uint64_t v71 = v138;
              uint64_t v70 = v139;
              *(_OWORD *)(v68 + 32) = v140;
              *(_OWORD *)(v68 + 48) = v69;
              *(_OWORD *)uint64_t v68 = v71;
              *(_OWORD *)(v68 + 16) = v70;
              uint64_t v72 = v145;
              uint64_t v74 = v142;
              uint64_t v73 = v143;
              *(_OWORD *)(v68 + 96) = v144;
              *(_OWORD *)(v68 + 112) = v72;
              *(_OWORD *)(v68 + 64) = v74;
              *(_OWORD *)(v68 + 80) = v73;
              uint64_t v75 = v149;
              uint64_t v77 = v146;
              id v76 = v147;
              *(_OWORD *)(v68 + 160) = v148;
              *(_OWORD *)(v68 + 176) = v75;
              *(_OWORD *)(v68 + 128) = v77;
              *(_OWORD *)(v68 + 144) = v76;
              long long v78 = v150;
              unint64_t v79 = v151;
              long long v80 = v152;
              *(void *)(v68 + 240) = v153;
              *(_OWORD *)(v68 + 208) = v79;
              *(_OWORD *)(v68 + 224) = v80;
              *(_OWORD *)(v68 + 192) = v78;
              uint64_t v81 = v67[2];
              long long v82 = __OFADD__(v81, 1);
              uint64_t v83 = v81 + 1;
              if (v82) {
                goto LABEL_83;
              }
              uint64_t v112 = v67;
              v67[2] = v83;
              goto LABEL_75;
            }
          }
          uint64_t v112 = v118;
          uint64_t v84 = v118[7] + 248 * v60;
          uint64_t v85 = *(_OWORD *)(v84 + 48);
          uint64_t v87 = *(_OWORD *)v84;
          uint64_t v86 = *(_OWORD *)(v84 + 16);
          v116[2] = *(_OWORD *)(v84 + 32);
          v116[3] = v85;
          v116[0] = v87;
          v116[1] = v86;
          uint64_t v88 = *(_OWORD *)(v84 + 112);
          uint64_t v90 = *(_OWORD *)(v84 + 64);
          uint64_t v89 = *(_OWORD *)(v84 + 80);
          v116[6] = *(_OWORD *)(v84 + 96);
          v116[7] = v88;
          v116[4] = v90;
          v116[5] = v89;
          uint64_t v91 = *(_OWORD *)(v84 + 176);
          uint64_t v93 = *(_OWORD *)(v84 + 128);
          long long v92 = *(_OWORD *)(v84 + 144);
          v116[10] = *(_OWORD *)(v84 + 160);
          v116[11] = v91;
          v116[8] = v93;
          v116[9] = v92;
          uint64_t v95 = *(_OWORD *)(v84 + 208);
          uint64_t v94 = *(_OWORD *)(v84 + 224);
          uint64_t v96 = *(_OWORD *)(v84 + 192);
          uint64_t v117 = *(void *)(v84 + 240);
          v116[13] = v95;
          v116[14] = v94;
          v116[12] = v96;
          outlined release of AlertStorage(v116);
          uint64_t v97 = v141;
          uint64_t v99 = v138;
          uint64_t v98 = v139;
          *(_OWORD *)(v84 + 32) = v140;
          *(_OWORD *)(v84 + 48) = v97;
          *(_OWORD *)uint64_t v84 = v99;
          *(_OWORD *)(v84 + 16) = v98;
          uint64_t v100 = v145;
          long long v102 = v142;
          uint64_t v101 = v143;
          *(_OWORD *)(v84 + 96) = v144;
          *(_OWORD *)(v84 + 112) = v100;
          *(_OWORD *)(v84 + 64) = v102;
          *(_OWORD *)(v84 + 80) = v101;
          uint64_t v103 = v149;
          long long v105 = v146;
          uint64_t v104 = v147;
          *(_OWORD *)(v84 + 160) = v148;
          *(_OWORD *)(v84 + 176) = v103;
          *(_OWORD *)(v84 + 128) = v105;
          *(_OWORD *)(v84 + 144) = v104;
          uint64_t v107 = v151;
          uint64_t v106 = v152;
          uint64_t v108 = v150;
          *(void *)(v84 + 240) = v153;
          *(_OWORD *)(v84 + 208) = v107;
          *(_OWORD *)(v84 + 224) = v106;
          *(_OWORD *)(v84 + 192) = v108;
LABEL_75:
          swift_bridgeObjectRelease();
          unint64_t v8 = v109;
          uint64_t v1 = v110;
          goto LABEL_42;
        }
      }
      outlined release of AlertStorage(&v138);
LABEL_42:
      int64_t v25 = v114;
      int64_t v29 = v115 + 1;
    }
  }
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_86:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UIKitDialogBridge.ActivePresentation(int *a1, int *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  int v4 = *((unsigned __int8 *)a2 + 4);
  if (*((unsigned char *)a2 + 4)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v2 == v3;
  }
  unsigned int v6 = v5;
  BOOL v8 = v4 == 1 && v2 == v3;
  BOOL v10 = v4 == 2 && v3 == 0;
  if (*((unsigned char *)a1 + 4) != 1) {
    BOOL v8 = v10;
  }
  if (*((unsigned char *)a1 + 4)) {
    return v8;
  }
  else {
    return v6;
  }
}

void UIKitDialogBridge.updateExistingDialog(allDialogs:id:)(uint64_t a1, Swift::UInt32 a2)
{
  uint64_t v3 = v2;
  if (*(void *)(a1 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v6 & 1) != 0))
  {
    outlined init with copy of ConfirmationDialog(*(void *)(a1 + 56) + 184 * v5, (uint64_t)v17);
  }
  else
  {
    char v18 = 0;
    memset(v17, 0, sizeof(v17));
  }
  outlined init with copy of ConfirmationDialog?((uint64_t)v17, (uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t)&type metadata for ConfirmationDialog, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  if (v16)
  {
    int v7 = v15[0];
    outlined destroy of ConfirmationDialog((uint64_t)v15);
    BOOL v8 = *(void **)(v3 + 48);
    if (v8) {
      goto LABEL_7;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(void, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);
  int v7 = 0;
  BOOL v8 = *(void **)(v3 + 48);
  if (!v8) {
    goto LABEL_12;
  }
LABEL_7:
  outlined init with copy of ConfirmationDialog?((uint64_t)v17, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t)&type metadata for ConfirmationDialog, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  if (!v14)
  {
LABEL_13:
    id v11 = v8;
    outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(void, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);
    goto LABEL_14;
  }
  outlined init with take of ConfirmationDialog((uint64_t)v13, (uint64_t)v15);
  id v9 = objc_msgSend(v8, sel_popoverPresentationController);
  if (v9)
  {
    BOOL v10 = v9;
    UIKitDialogBridge.updateAnchor(dialog:presentationController:)((uint64_t)v15, v9);
  }
  outlined destroy of ConfirmationDialog((uint64_t)v15);
LABEL_14:
  if (v7 == *(unsigned __int8 *)(v3 + 44) < 2u)
  {
    outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(void, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);
  }
  else
  {
    if ((v7 & 1) == 0)
    {
      objc_msgSend(v8, sel_dismissViewControllerAnimated_completion_, 1, 0);
      UIKitDialogBridge.reset()();
    }
    outlined init with copy of ConfirmationDialog?((uint64_t)v17, (uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t)&type metadata for ConfirmationDialog, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
    if (v16)
    {
      swift_retain();
      swift_retain();
      outlined destroy of ConfirmationDialog((uint64_t)v15);
      v13[0] = v7;
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_release();

      int64_t v12 = v17;
    }
    else
    {
      outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(void, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);

      int64_t v12 = v15;
    }
    outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(void, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);
  }
}

uint64_t UIKitDialogBridge.showNewDialog(_:id:)(uint64_t a1, int a2)
{
  type metadata accessor for DialogActionContext?(0, &lazy cache variable for type metadata for DialogActionContext?, (void (*)(uint64_t))type metadata accessor for DialogActionContext);
  MEMORY[0x1F4188790](v5 - 8);
  int v7 = (char *)&v64 - v6;
  uint64_t v8 = type metadata accessor for DialogActionContext(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  id v11 = (uint64_t *)((char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (id *)((char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = AGWeakAttributeGetAttribute();
  int v16 = *MEMORY[0x1E4F4E7A0];
  if (result != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t result = AGWeakAttributeGetAttribute();
    if (result != v16)
    {
      uint64_t v64 = v8;
      if (*(unsigned __int8 *)(v2 + 44) < 2u)
      {
LABEL_45:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      uint64_t v70 = a1;
      uint64_t v68 = v9;
      MEMORY[0x1F4188790](result);
      type metadata accessor for (ToolbarPlacement.Role, ToolbarPlacement.Role)(0, &lazy cache variable for type metadata for (PlatformItemList, PlatformItemList));
      static Update.ensure<A>(_:)();
      uint64_t v17 = v72;
      PlatformItemList.mergedContentItem.getter(v73, (uint64_t)v14);
      swift_bridgeObjectRelease();
      id v18 = *v14;
      id v19 = *v14;
      _s7SwiftUI16PlatformItemListV0D0VWOhTm_2((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      if (v18)
      {
        id v20 = objc_msgSend(v19, sel_string);

        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v23 = v22;
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v23 = 0;
      }
      uint64_t v24 = *(void *)(v2 + 96);
      uint64_t v72 = *(void *)(v2 + 88);
      uint64_t v73 = v24;
      swift_retain();
      swift_retain();
      swift_retain();
      DialogActionContext.init(visiting:presentationType:environment:actionDelegate:)(v17, 1, &v72, v2, v11);
      type metadata accessor for PlatformAlertController();
      id v25 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_alertControllerWithTitle_message_preferredStyle_, 0, 0, 0);
      uint64_t v26 = v70;
      BOOL v27 = *(unsigned __int8 *)(v70 + 120) == 2;
      unint64_t v28 = (char *)v25;
      objc_msgSend(v28, sel_setSeverity_, v27);
      int v29 = *(unsigned __int8 *)(v26 + 104);
      if (v29 != 2)
      {
        if (v29) {
          uint64_t v30 = 2;
        }
        else {
          uint64_t v30 = 1;
        }
        objc_msgSend(v28, sel_setOverrideUserInterfaceStyle_, v30, v64);
      }
      uint64_t v31 = *(void *)(v70 + 112);
      uint64_t v71 = v28;
      if (v31)
      {
        char v32 = v28;
        swift_retain();
        unint64_t v33 = (void *)UIKitDialogBridge.resolveIcon(_:)();
        objc_msgSend(v32, sel_setImage_, v33);
        swift_release();

        unint64_t v28 = v71;
      }
      uint64_t v34 = swift_allocObject();
      swift_weakInit();
      BOOL v35 = (uint64_t (**)())&v28[OBJC_IVAR____TtC7SwiftUI23PlatformAlertController_onDismissAction];
      uint64_t v36 = *(void *)&v28[OBJC_IVAR____TtC7SwiftUI23PlatformAlertController_onDismissAction];
      *BOOL v35 = partial apply for closure #2 in UIKitDialogBridge.showNewDialog(_:id:);
      v35[1] = (uint64_t (*)())v34;
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v36);
      if (*(unsigned char *)(v70 + 64) == 1)
      {
        uint64_t v37 = *(void *)(v70 + 48);
        uint64_t v38 = *(void *)(v70 + 56);
        char v39 = v28;
        uint64_t v40 = (void *)MEMORY[0x18C115780](v37, v38);
        objc_msgSend(v39, sel_setTitle_, v40);

        unint64_t v28 = v71;
      }
      BOOL v41 = v28;
      if (v23)
      {
        uint64_t v42 = (void *)MEMORY[0x18C115780](v21, v23);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v42 = 0;
      }
      uint64_t v69 = v2;
      objc_msgSend(v28, sel_setMessage_, v42, v64);

      unint64_t v43 = v11[1];
      int v66 = a2;
      uint64_t v65 = v7;
      uint64_t v67 = v11;
      if (v43 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
        if (v44) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v44 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v44)
        {
LABEL_21:
          if (v44 >= 1)
          {
            uint64_t v45 = 0;
            char v46 = *(unsigned char *)(v70 + 84);
            while (1)
            {
              if ((v43 & 0xC000000000000001) != 0)
              {
                id v47 = (id)MEMORY[0x18C117680](v45, v43);
                if ((v46 & 1) == 0) {
                  goto LABEL_29;
                }
              }
              else
              {
                id v47 = *(id *)(v43 + 8 * v45 + 32);
                if ((v46 & 1) == 0)
                {
LABEL_29:
                  if (objc_msgSend(v47, sel_style) != (id)2)
                  {
                    uint64_t v48 = (void *)Color.Resolved.kitColor.getter();
                    self;
                    unint64_t v49 = (void *)swift_dynamicCastObjCClass();
                    if (!v49) {

                    }
                    objc_msgSend(v47, sel__setImageTintColor_, v49);
                    objc_msgSend(v47, sel__setTitleTextColor_, v49);

                    unint64_t v28 = v71;
                  }
                }
              }
              ++v45;
              objc_msgSend(v28, sel_addAction_, v47);

              if (v44 == v45) {
                goto LABEL_33;
              }
            }
          }
          __break(1u);
          goto LABEL_44;
        }
      }
LABEL_33:
      swift_bridgeObjectRelease();
      id v50 = objc_msgSend(v28, sel_popoverPresentationController);
      uint64_t v51 = v69;
      if (v50)
      {
        Swift::UInt32 v52 = v50;
        UIKitDialogBridge.updateAnchor(dialog:presentationController:)(v70, v50);
      }
      long long v53 = (void *)MEMORY[0x18C119DF0](v51 + 16);
      uint64_t v54 = (uint64_t)v67;
      uint64_t v55 = v68;
      if (!v53)
      {
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      uint64_t v56 = v53;
      id v57 = objc_msgSend(v53, sel_presentedViewController);
      if (v57)
      {
        Swift::UInt32 v58 = v57;
        if ((objc_msgSend(v57, sel_isBeingDismissed) & 1) == 0)
        {
          self;
          if (!swift_dynamicCastObjCClass()) {
            objc_msgSend(v56, sel_dismissViewControllerAnimated_completion_, 1, 0);
          }
        }
      }
      uint64_t v59 = v71;
      objc_msgSend(v56, sel_presentViewController_animated_completion_, v71, 1, 0);

      uint64_t v60 = *(void **)(v51 + 48);
      *(void *)(v51 + 48) = v59;

      uint64_t v61 = v54;
      uint64_t v62 = (uint64_t)v65;
      _s7SwiftUI7WeakBoxVySo11UITextFieldCGWObTm_0(v61, (uint64_t)v65, type metadata accessor for DialogActionContext);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(v62, 0, 1, v64);
      uint64_t v63 = v51 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastActionContext;
      swift_beginAccess();
      outlined assign with take of DialogActionContext?(v62, v63);
      uint64_t result = swift_endAccess();
      *(_DWORD *)(v51 + 40) = v66;
      *(unsigned char *)(v51 + 44) = 1;
    }
  }
  return result;
}

void UIKitDialogBridge.updateExistingAlert(allAlerts:id:)(uint64_t a1, Swift::UInt32 a2)
{
  uint64_t v3 = v2;
  if (*(void *)(a1 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v6 & 1) != 0))
  {
    int v7 = (_OWORD *)(*(void *)(a1 + 56) + 248 * v5);
    long long v8 = v7[3];
    long long v10 = *v7;
    long long v9 = v7[1];
    v27[2] = v7[2];
    v27[3] = v8;
    v27[0] = v10;
    v27[1] = v9;
    long long v11 = v7[7];
    long long v13 = v7[4];
    long long v12 = v7[5];
    v27[6] = v7[6];
    v27[7] = v11;
    unsigned char v27[4] = v13;
    v27[5] = v12;
    long long v14 = v7[11];
    long long v16 = v7[8];
    long long v15 = v7[9];
    v27[10] = v7[10];
    v27[11] = v14;
    v27[8] = v16;
    v27[9] = v15;
    long long v18 = v7[13];
    long long v17 = v7[14];
    long long v19 = v7[12];
    uint64_t v28 = *((void *)v7 + 30);
    v27[13] = v18;
    v27[14] = v17;
    v27[12] = v19;
    memmove(__dst, v7, 0xF8uLL);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__dst, v20, v21, v22);
    int v23 = LOBYTE(v27[0]);
    outlined retain of AlertStorage(v27);
    outlined init with take of AlertStorage?((uint64_t)__dst, (uint64_t)v30, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  }
  else
  {
    _s7SwiftUI12AlertStorageVSgWOi0_((uint64_t)__dst);
    outlined init with take of AlertStorage?((uint64_t)__dst, (uint64_t)v30, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
    int v23 = 0;
  }
  uint64_t v24 = *(void **)(v3 + 48);
  if (v24)
  {
    if (v23 == *(unsigned __int8 *)(v3 + 44) < 2u)
    {
      outlined release of AlertStorage?((uint64_t)v30);
    }
    else
    {
      id v25 = v24;
      uint64_t v26 = v25;
      if ((v23 & 1) == 0)
      {
        objc_msgSend(v25, sel_dismissViewControllerAnimated_completion_, 1, 0);
        UIKitDialogBridge.reset()();
      }
      outlined init with take of AlertStorage?((uint64_t)v30, (uint64_t)__dst, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
      if (_s7SwiftUI12AlertStorageVSgWOg((uint64_t)__dst) == 1)
      {
      }
      else
      {
        LOBYTE(v27[0]) = v23;
        swift_retain();
        swift_retain();
        dispatch thunk of AnyLocation.set(_:transaction:)();

        outlined release of AlertStorage?((uint64_t)v30);
        swift_release();
        swift_release();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t UIKitDialogBridge.showNewAlert(_:id:)(uint64_t a1, int a2)
{
  int v95 = a2;
  type metadata accessor for DialogActionContext?(0, &lazy cache variable for type metadata for DialogActionContext?, (void (*)(uint64_t))type metadata accessor for DialogActionContext);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v94 = (uint64_t)v84 - v4;
  uint64_t v102 = type metadata accessor for DialogActionContext(0);
  uint64_t v93 = *(void *)(v102 - 8);
  MEMORY[0x1F4188790](v102);
  uint64_t v104 = (void *)((char *)v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v6 - 8);
  long long v8 = (id *)((char *)v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(unsigned int *)(a1 + 28);
  uint64_t v10 = *(unsigned int *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 56);
  id v105 = *(id *)(a1 + 48);
  int v12 = *(unsigned __int8 *)(a1 + 65);
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 80);
  id v90 = *(id *)(a1 + 88);
  uint64_t v15 = *(unsigned __int8 *)(a1 + 96);
  int v16 = *(unsigned __int8 *)(a1 + 97);
  uint64_t v101 = *(void **)(a1 + 160);
  uint64_t v100 = *(void *)(a1 + 168);
  uint64_t v99 = *(void *)(a1 + 176);
  uint64_t v98 = *(void **)(a1 + 184);
  uint64_t v97 = *(void **)(a1 + 192);
  uint64_t v96 = *(void *)(a1 + 200);
  uint64_t v89 = *(void *)(a1 + 208);
  uint64_t v88 = *(void *)(a1 + 216);
  uint64_t v87 = *(void *)(a1 + 224);
  uint64_t v86 = *(void *)(a1 + 232);
  uint64_t v92 = v9;
  uint64_t v91 = v10;
  uint64_t v85 = *(void *)(a1 + 240);
  uint64_t result = AGWeakAttributeGetAttribute();
  int v18 = *MEMORY[0x1E4F4E7A0];
  if (result == *MEMORY[0x1E4F4E7A0]) {
    return result;
  }
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result == v18) {
    return result;
  }
  v84[1] = v13;
  if (*(unsigned __int8 *)(v103 + 44) < 2u)
  {
LABEL_53:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  MEMORY[0x1F4188790](result);
  type metadata accessor for (ToolbarPlacement.Role, ToolbarPlacement.Role)(0, &lazy cache variable for type metadata for (PlatformItemList, PlatformItemList));
  static Update.ensure<A>(_:)();
  uint64_t v19 = aBlock;
  PlatformItemList.mergedContentItem.getter(v108, (uint64_t)v8);
  swift_bridgeObjectRelease();
  id v20 = *v8;
  id v21 = *v8;
  _s7SwiftUI16PlatformItemListV0D0VWOhTm_2((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  if (v20)
  {
    id v22 = objc_msgSend(v21, sel_string);

    v84[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;
  }
  else
  {
    v84[0] = 0;
    uint64_t v24 = 0;
  }
  uint64_t v25 = v103;
  uint64_t v26 = *(void *)(v103 + 96);
  uint64_t aBlock = *(void *)(v103 + 88);
  uint64_t v108 = v26;
  swift_retain();
  swift_retain();
  swift_retain();
  DialogActionContext.init(visiting:presentationType:environment:actionDelegate:)(v19, 0, &aBlock, v25, v104);
  type metadata accessor for PlatformAlertController();
  BOOL v27 = (char *)objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_alertControllerWithTitle_message_preferredStyle_, 0, 0, 1);
  objc_msgSend(v27, sel_setSeverity_, v16 == 2);
  if (v12 != 2)
  {
    if (v12) {
      uint64_t v28 = 2;
    }
    else {
      uint64_t v28 = 1;
    }
    objc_msgSend(v27, sel_setOverrideUserInterfaceStyle_, v28, v84[0]);
  }
  if (v14)
  {
    int v29 = v27;
    swift_retain();
    uint64_t v30 = (void *)UIKitDialogBridge.resolveIcon(_:)();
    objc_msgSend(v29, sel_setImage_, v30);
    swift_release();
  }
  uint64_t v31 = swift_allocObject();
  swift_weakInit();
  char v32 = (uint64_t (**)())&v27[OBJC_IVAR____TtC7SwiftUI23PlatformAlertController_onDismissAction];
  uint64_t v33 = *(void *)&v27[OBJC_IVAR____TtC7SwiftUI23PlatformAlertController_onDismissAction];
  *char v32 = partial apply for closure #2 in UIKitDialogBridge.showNewAlert(_:id:);
  v32[1] = (uint64_t (*)())v31;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v33);
  uint64_t v34 = v27;
  BOOL v35 = (void *)MEMORY[0x18C115780](v105, v11);
  objc_msgSend(v34, sel_setTitle_, v35);

  uint64_t v36 = v34;
  if (v24)
  {
    uint64_t v37 = (void *)MEMORY[0x18C115780](v84[0], v24);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v37 = 0;
  }
  objc_msgSend(v34, sel_setMessage_, v37, v84[0]);

  id v105 = (id)v104[1];
  if ((unint64_t)v105 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
    if (v38) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v38 = *(void *)(((unint64_t)v105 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v38)
    {
LABEL_19:
      if (v38 >= 1)
      {
        uint64_t v39 = 0;
        unint64_t v40 = (unint64_t)v105 & 0xC000000000000001;
        BOOL v41 = &selRef_keyCode;
        uint64_t v42 = &selRef_showsMenuAsPrimaryAction;
        while (1)
        {
          if (v40)
          {
            id v43 = (id)MEMORY[0x18C117680](v39, v105);
            if ((v15 & 1) == 0) {
              goto LABEL_27;
            }
          }
          else
          {
            id v43 = *((id *)v105 + v39 + 4);
            if ((v15 & 1) == 0)
            {
LABEL_27:
              if ([v43 v42[50]] != (id)2)
              {
                uint64_t v44 = v34;
                uint64_t v45 = v41;
                uint64_t v46 = v15;
                id v47 = v42;
                uint64_t v48 = (void *)Color.Resolved.kitColor.getter();
                self;
                unint64_t v49 = (void *)swift_dynamicCastObjCClass();
                if (!v49) {

                }
                objc_msgSend(v43, sel__setImageTintColor_, v49);
                objc_msgSend(v43, sel__setTitleTextColor_, v49);

                uint64_t v42 = v47;
                uint64_t v15 = v46;
                BOOL v41 = v45;
                uint64_t v34 = v44;
              }
            }
          }
          ++v39;
          objc_msgSend(v34, v41[230], v43);

          if (v38 == v39) {
            goto LABEL_31;
          }
        }
      }
      __break(1u);
      goto LABEL_51;
    }
  }
LABEL_31:
  swift_bridgeObjectRelease();
  unint64_t v50 = *(void *)((char *)v104 + *(int *)(v102 + 32));
  if (v50 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
    if (v51) {
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v51 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v51)
    {
LABEL_33:
      if (v51 < 1)
      {
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      uint64_t v52 = 0;
      do
      {
        if ((v50 & 0xC000000000000001) != 0) {
          id v53 = (id)MEMORY[0x18C117680](v52, v50);
        }
        else {
          id v53 = *(id *)(v50 + 8 * v52 + 32);
        }
        uint64_t v54 = v53;
        ++v52;
        uint64_t v55 = swift_allocObject();
        *(void *)(v55 + 16) = v54;
        uint64_t v111 = partial apply for closure #3 in UIKitDialogBridge.showNewAlert(_:id:);
        uint64_t v112 = v55;
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        uint64_t v108 = 1107296256;
        uint64_t v109 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
        uint64_t v110 = &block_descriptor_77;
        uint64_t v56 = _Block_copy(&aBlock);
        id v57 = v34;
        id v58 = v54;
        swift_release();
        objc_msgSend(v57, sel_addTextFieldWithConfigurationHandler_, v56);
        _Block_release(v56);
      }
      while (v51 != v52);
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v59 = v101;
  uint64_t v60 = v34;
  if (v101)
  {
    uint64_t v61 = v100;
    uint64_t aBlock = (uint64_t)v101;
    uint64_t v108 = v100;
    LODWORD(v109) = v99;
    id v105 = v34;
    uint64_t v62 = v99;
    uint64_t v63 = (uint64_t)v98;
    uint64_t v64 = v97;
    uint64_t v110 = v98;
    uint64_t v111 = (void (*)())v97;
    uint64_t v112 = v96;
    int v113 = v89;
    uint64_t v114 = v88;
    uint64_t v115 = v87;
    uint64_t v116 = v86;
    uint64_t v117 = v85;
    type metadata accessor for UIHostingController<BoundInputsView>();
    id v90 = objc_allocWithZone(v65);
    outlined copy of BoundInputsView?(v59, v61, v62, v63, v64);
    int v66 = (char *)specialized UIHostingController.init(rootView:)((uint64_t)&aBlock);
    uint64_t v67 = *(void **)&v66[direct field offset for UIHostingController.host];
    uint64_t v68 = self;
    id v69 = v67;
    id v70 = objc_msgSend(v68, sel_clearColor);
    objc_msgSend(v69, sel_setBackgroundColor_, v70);

    uint64_t v60 = (char *)v105;
    objc_msgSend(v105, sel_setContentViewController_, v66);

    outlined consume of BoundInputsView?((uint64_t)v101, v100, v99, (uint64_t)v98, v97);
  }
  objc_msgSend(v60, sel_setPreferredAction_, *(void *)((char *)v104 + *(int *)(v102 + 36)));
  uint64_t v71 = v103;
  uint64_t v72 = (void *)MEMORY[0x18C119DF0](v103 + 16);
  if (!v72) {
    goto LABEL_52;
  }
  uint64_t v73 = v72;
  uint64_t v74 = v60;
  id v75 = objc_msgSend(v72, sel_presentedViewController);
  if (v75)
  {
    id v76 = v75;
    if ((objc_msgSend(v75, sel_isBeingDismissed) & 1) == 0)
    {
      self;
      if (!swift_dynamicCastObjCClass()) {
        objc_msgSend(v73, sel_dismissViewControllerAnimated_completion_, 1, 0);
      }
    }
  }
  uint64_t v77 = swift_allocObject();
  swift_weakInit();
  uint64_t v78 = swift_allocObject();
  *(void *)(v78 + 16) = v77;
  int v79 = v91;
  *(_DWORD *)(v78 + 24) = v92;
  *(_DWORD *)(v78 + 28) = v79;
  v106[4] = partial apply for closure #4 in UIKitDialogBridge.showNewAlert(_:id:);
  v106[5] = v78;
  v106[0] = MEMORY[0x1E4F143A8];
  v106[1] = 1107296256;
  v106[2] = thunk for @escaping @callee_guaranteed () -> ();
  v106[3] = &block_descriptor_23;
  long long v80 = _Block_copy(v106);
  swift_release();
  objc_msgSend(v73, sel_presentViewController_animated_completion_, v74, 1, v80);

  _Block_release(v80);
  uint64_t v81 = *(void **)(v71 + 48);
  *(void *)(v71 + 48) = v74;

  uint64_t v82 = v94;
  _s7SwiftUI7WeakBoxVySo11UITextFieldCGWObTm_0((uint64_t)v104, v94, type metadata accessor for DialogActionContext);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v93 + 56))(v82, 0, 1, v102);
  uint64_t v83 = v71 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastActionContext;
  swift_beginAccess();
  outlined assign with take of DialogActionContext?(v82, v83);
  uint64_t result = swift_endAccess();
  *(_DWORD *)(v71 + 40) = v95;
  *(unsigned char *)(v71 + 44) = 0;
  return result;
}

void UIKitDialogBridge.updateAnchor(dialog:presentationController:)(uint64_t a1, void *a2)
{
  uint64_t v4 = MEMORY[0x18C119DF0](a1 + 96);
  if (v4)
  {
    id v9 = (id)v4;
    objc_msgSend(a2, sel_setBarButtonItem_);
  }
  else
  {
    uint64_t v5 = MEMORY[0x18C119DF0](v2 + 24);
    if (v5)
    {
      uint64_t v6 = (void *)v5;
      uint64_t v7 = *(void *)(v2 + 32);
      uint64_t ObjectType = swift_getObjectType();
      objc_msgSend(a2, sel_setSourceView_, v6);
      (*(void (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);
      ViewGraph.transform.getter();
      swift_release();
      type metadata accessor for CGRect(0);
      Anchor.convert(to:)();
      objc_msgSend(a2, sel_setSourceRect_, v10, v11, v12, v13);

      swift_release();
    }
  }
}

uint64_t UIKitDialogBridge.reset()()
{
  uint64_t v1 = v0;
  type metadata accessor for DialogActionContext?(0, &lazy cache variable for type metadata for DialogActionContext?, (void (*)(uint64_t))type metadata accessor for DialogActionContext);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = &v33[-v3];
  uint64_t v5 = v0 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_actionsChangeDetector;
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_actionsChangeDetector + 4) & 1) == 0)
  {
    static AGAttributeFlags.transactional.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  Swift::UInt32 v6 = *(_DWORD *)(v0 + 40);
  if (!*(unsigned char *)(v0 + 44))
  {
    swift_beginAccess();
    uint64_t v10 = *(void *)(v0 + 80);
    if (v10)
    {
      if (*(void *)(v10 + 16) && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v12 & 1) != 0))
      {
        double v13 = (_OWORD *)(*(void *)(v10 + 56) + 248 * v11);
        long long v15 = v13[2];
        long long v14 = v13[3];
        long long v16 = v13[1];
        v35[0] = *v13;
        v35[1] = v16;
        v35[2] = v15;
        v35[3] = v14;
        long long v17 = v13[4];
        long long v18 = v13[5];
        long long v19 = v13[7];
        v35[6] = v13[6];
        v35[7] = v19;
        v35[4] = v17;
        v35[5] = v18;
        long long v20 = v13[8];
        long long v21 = v13[9];
        long long v22 = v13[11];
        v35[10] = v13[10];
        v35[11] = v22;
        v35[8] = v20;
        void v35[9] = v21;
        long long v23 = v13[12];
        long long v24 = v13[13];
        long long v25 = v13[14];
        uint64_t v36 = *((void *)v13 + 30);
        v35[13] = v24;
        v35[14] = v25;
        v35[12] = v23;
        memmove(&v37, v13, 0xF8uLL);
        destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v37, v26, v27, v28);
        outlined retain of AlertStorage(v35);
      }
      else
      {
        _s7SwiftUI12AlertStorageVSgWOi0_((uint64_t)v35);
        outlined init with take of AlertStorage?((uint64_t)v35, (uint64_t)&v37, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
      }
      outlined init with take of AlertStorage?((uint64_t)&v37, (uint64_t)v34, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
      outlined init with take of AlertStorage?((uint64_t)v34, (uint64_t)v35, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
      if (_s7SwiftUI12AlertStorageVSgWOg((uint64_t)v35) != 1)
      {
        outlined init with take of AlertStorage?((uint64_t)&v37, (uint64_t)v33, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
        swift_endAccess();
        swift_retain();
        swift_retain();
        outlined release of AlertStorage?((uint64_t)v33);
        char v49 = 0;
        goto LABEL_21;
      }
    }
    goto LABEL_19;
  }
  if (*(unsigned char *)(v0 + 44) == 1)
  {
    swift_beginAccess();
    uint64_t v7 = *(void *)(v0 + 64);
    if (v7)
    {
      if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v9 & 1) != 0))
      {
        outlined init with copy of ConfirmationDialog(*(void *)(v7 + 56) + 184 * v8, (uint64_t)&v37);
        if ((void)v38)
        {
          swift_retain();
          swift_retain();
          outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v37, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(void, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);
          swift_endAccess();
          LOBYTE(v35[0]) = 0;
LABEL_21:
          dispatch thunk of AnyLocation.set(_:transaction:)();
          swift_release();
          swift_release();
          goto LABEL_22;
        }
      }
      else
      {
        char v48 = 0;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
      }
      outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v37, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(void, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);
    }
LABEL_19:
    swift_endAccess();
  }
LABEL_22:
  *(_DWORD *)(v1 + 40) = 0;
  *(unsigned char *)(v1 + 44) = 2;
  int v29 = *(void **)(v1 + 48);
  *(void *)(v1 + 48) = 0;

  swift_beginAccess();
  *(void *)(v1 + 64) = 0;
  swift_bridgeObjectRelease();
  uint64_t v30 = type metadata accessor for DialogActionContext(0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v4, 1, 1, v30);
  uint64_t v31 = v1 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastActionContext;
  swift_beginAccess();
  outlined assign with take of DialogActionContext?((uint64_t)v4, v31);
  swift_endAccess();
  *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastPlatformItemList) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t UIKitDialogBridge.resolveIcon(_:)()
{
  type metadata accessor for DialogActionContext?(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, MEMORY[0x1E4F413C8]);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v14 - v2;
  uint64_t v4 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x1F4188790](v4 - 8);
  Swift::UInt32 v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = *(void **)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 96);
  id v26 = v8;
  uint64_t v27 = v7;
  uint64_t v9 = type metadata accessor for Text.Style();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v3, 1, 1, v9);
  swift_retain();
  swift_retain();
  default argument 2 of ImageResolutionContext.init(environment:textStyle:transaction:)();
  ImageResolutionContext.init(environment:textStyle:transaction:)();
  Image.resolve(in:)();
  if (v38)
  {
    swift_unknownObjectRetain();
    outlined release of Image.Resolved((uint64_t)&v26);
    self;
    uint64_t v10 = swift_dynamicCastObjCClassUnconditional();
  }
  else
  {
    id v11 = v26;
    char v12 = v27;
    id v14 = v26;
    char v15 = v27;
    long long v16 = v28;
    uint64_t v17 = v29;
    char v18 = v30;
    long long v19 = v31;
    char v20 = v32;
    long long v21 = v33;
    long long v22 = v34;
    char v23 = v35;
    char v24 = v36;
    __int16 v25 = v37;
    outlined copy of GraphicsImage.Contents?(v26, v27);
    uint64_t v10 = (uint64_t)GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, 0);
    outlined release of Image.Resolved((uint64_t)&v26);
    outlined consume of GraphicsImage.Contents?(v11, v12);
  }
  _s7SwiftUI16PlatformItemListV0D0VWOhTm_2((uint64_t)v6, MEMORY[0x1E4F40970]);
  return v10;
}

void UIKitDialogBridge.updateAlertActionsEnabled(_:)(uint64_t a1)
{
  uint64_t v64 = a1;
  uint64_t v2 = type metadata accessor for PlatformItemList.Item();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (id *)((char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v6);
  uint64_t v65 = (uint64_t)&v54 - v7;
  MEMORY[0x1F4188790](v8);
  uint64_t v66 = (uint64_t)&v54 - v9;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (uint64_t)&v54 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v67 = (id *)((char *)&v54 - v14);
  type metadata accessor for DialogActionContext?(0, &lazy cache variable for type metadata for DialogActionContext?, (void (*)(uint64_t))type metadata accessor for DialogActionContext);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v54 - v16;
  unint64_t v18 = type metadata accessor for DialogActionContext(0);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  long long v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(unsigned char *)(v1 + 44))
  {
    long long v22 = *(void **)(v1 + 48);
    if (v22)
    {
      uint64_t v23 = v1 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastActionContext;
      swift_beginAccess();
      outlined init with copy of ConfirmationDialog?(v23, (uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for DialogActionContext?, (uint64_t)type metadata accessor for DialogActionContext, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DialogActionContext?);
      if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v19 + 48))(v17, 1, v18) == 1)
      {
        _s7SwiftUI32CustomRecursiveStringConvertible_pSgWOhTm_0((uint64_t)v17, &lazy cache variable for type metadata for DialogActionContext?, (void (*)(uint64_t))type metadata accessor for DialogActionContext);
        return;
      }
      _s7SwiftUI7WeakBoxVySo11UITextFieldCGWObTm_0((uint64_t)v17, (uint64_t)v21, type metadata accessor for DialogActionContext);
      id v24 = v22;
      id v25 = objc_msgSend(v24, sel_actions);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertAction);
      unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v27 = v26;
      unint64_t v69 = v26;
      if (v26 >> 62)
      {
LABEL_41:
        swift_bridgeObjectRetain();
        uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        unint64_t v27 = v69;
        uint64_t v29 = v66;
        if (v28) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v28 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v29 = v66;
        if (v28)
        {
LABEL_8:
          id v54 = v24;
          unint64_t v55 = v1;
          uint64_t v62 = v5;
          uint64_t v63 = v3;
          if (v28 < 1)
          {
            __break(1u);
            return;
          }
          int v58 = 0;
          uint64_t v30 = 0;
          uint64_t v31 = *(int *)(v18 + 28);
          unint64_t v68 = v27 & 0xC000000000000001;
          uint64_t v3 = v64;
          uint64_t v56 = (char *)(v65 + 521);
          id v57 = (unsigned __int8 *)(v29 + 521);
          uint64_t v5 = v67;
          uint64_t v60 = v31;
          uint64_t v61 = v28;
          while (1)
          {
            id v32 = v68 ? (id)MEMORY[0x18C117680](v30, v27) : *(id *)(v27 + 8 * v30 + 32);
            id v24 = v32;
            uint64_t v33 = *(void *)&v21[v31];
            if (*(void *)(v33 + 16))
            {
              unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v32);
              if (v35)
              {
                unint64_t v1 = *(void *)(*(void *)(v33 + 56) + 8 * v34);
                if ((v1 & 0x8000000000000000) == 0 && v1 < *(void *)(v3 + 16)) {
                  break;
                }
              }
            }

LABEL_11:
            ++v30;
            unint64_t v27 = v69;
            if (v28 == v30)
            {
              swift_bridgeObjectRelease();

              _s7SwiftUI16PlatformItemListV0D0VWOhTm_2((uint64_t)v21, type metadata accessor for DialogActionContext);
              if (v58)
              {
                *(void *)(v55 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastPlatformItemList) = v3;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
              }
              return;
            }
          }
          char v36 = (void **)v12;
          unint64_t v18 = (*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
          uint64_t v12 = *(void *)(v63 + 72) * v1;
          _s7SwiftUI16PlatformItemListV0D0VWOcTm_4(v3 + v18 + v12, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
          if (v1 >= *(void *)(*(void *)v21 + 16))
          {
            __break(1u);
            goto LABEL_41;
          }
          _s7SwiftUI16PlatformItemListV0D0VWOcTm_4(*(void *)v21 + v18 + v12, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
          __int16 v37 = *v36;
          uint64_t v38 = *v5;
          char v39 = *v5 == 0;
          if (*v36)
          {
            if (!v38)
            {
              uint64_t v42 = v66;
              _s7SwiftUI16PlatformItemListV0D0VWOcTm_4((uint64_t)v36, v66, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
              uint64_t v43 = v65;
              _s7SwiftUI16PlatformItemListV0D0VWOcTm_4((uint64_t)v67, v65, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
              goto LABEL_28;
            }
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
            id v40 = v38;
            id v41 = v37;
            char v39 = static NSObject.== infix(_:_:)();
          }
          uint64_t v42 = v66;
          _s7SwiftUI16PlatformItemListV0D0VWOcTm_4((uint64_t)v36, v66, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
          uint64_t v43 = v65;
          _s7SwiftUI16PlatformItemListV0D0VWOcTm_4((uint64_t)v67, v65, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
          if (v39)
          {
            int v44 = *(unsigned __int8 *)(v42 + 520);
            int v59 = *v57;
            _s7SwiftUI16PlatformItemListV0D0VWOhTm_2(v42, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
            int v45 = *(unsigned __int8 *)(v43 + 520);
            uint64_t v46 = v43;
            char v47 = *v56;
            _s7SwiftUI16PlatformItemListV0D0VWOhTm_2(v46, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
            if (v59)
            {
              uint64_t v12 = (uint64_t)v36;
              if (v47)
              {
                uint64_t v5 = v67;
                uint64_t v48 = (uint64_t)v62;
                _s7SwiftUI16PlatformItemListV0D0VWOcTm_4((uint64_t)v67, (uint64_t)v62, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
                uint64_t v28 = v61;
                goto LABEL_35;
              }
            }
            else
            {
              int v49 = v45;
              uint64_t v12 = (uint64_t)v36;
              if ((v47 & 1) == 0)
              {
                int v50 = v44;
                uint64_t v5 = v67;
                uint64_t v48 = (uint64_t)v62;
                _s7SwiftUI16PlatformItemListV0D0VWOcTm_4((uint64_t)v67, (uint64_t)v62, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
                BOOL v51 = v50 == v49;
                uint64_t v28 = v61;
                if (v51)
                {
LABEL_35:
                  unsigned int v52 = objc_msgSend(v24, sel_isEnabled, v54);
                  int v53 = *(unsigned __int8 *)(v48 + 56);
                  _s7SwiftUI16PlatformItemListV0D0VWOhTm_2(v48, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
                  if (v52 == v53)
                  {
                  }
                  else
                  {
                    objc_msgSend(v24, sel_setEnabled_, objc_msgSend(v24, sel_isEnabled) ^ 1);

                    int v58 = 1;
                  }
                  goto LABEL_31;
                }
LABEL_30:

                _s7SwiftUI16PlatformItemListV0D0VWOhTm_2(v48, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
LABEL_31:
                uint64_t v3 = v64;
                uint64_t v31 = v60;
                _s7SwiftUI16PlatformItemListV0D0VWOhTm_2(v12, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
                _s7SwiftUI16PlatformItemListV0D0VWOhTm_2((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
                goto LABEL_11;
              }
            }
LABEL_29:
            uint64_t v5 = v67;
            uint64_t v48 = (uint64_t)v62;
            _s7SwiftUI16PlatformItemListV0D0VWOcTm_4((uint64_t)v67, (uint64_t)v62, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
            uint64_t v28 = v61;
            goto LABEL_30;
          }
LABEL_28:
          _s7SwiftUI16PlatformItemListV0D0VWOhTm_2(v43, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
          _s7SwiftUI16PlatformItemListV0D0VWOhTm_2(v42, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
          uint64_t v12 = (uint64_t)v36;
          goto LABEL_29;
        }
      }
      swift_bridgeObjectRelease();

      _s7SwiftUI16PlatformItemListV0D0VWOhTm_2((uint64_t)v21, type metadata accessor for DialogActionContext);
    }
  }
}

void UIKitDialogBridge.startTrackingUpdates(actions:)()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  static Semantics.v5.getter();
  if (isLinkedOnOrAfter(_:)())
  {
    int Attribute = AGWeakAttributeGetAttribute();
    if (Attribute != *MEMORY[0x1E4F4E7A0])
    {
      int v2 = Attribute;
      id v3 = (id)AGGraphGetAttributeSubgraph();
      int IsValid = AGSubgraphIsValid();

      if (IsValid)
      {
        uint64_t v5 = MEMORY[0x18C113CA0]();
        uint64_t v6 = v0 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_actionsChangeDetector;
        if (*(unsigned char *)(v0 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_actionsChangeDetector + 4))
        {
          id v7 = (id)AGGraphGetAttributeSubgraph();
          AGGraphClearUpdate();
          id v8 = (id)AGSubgraphGetCurrent();
          AGSubgraphSetCurrent();
          swift_weakInit();
          int v12 = v2;
          protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
          lazy protocol witness table accessor for type UIKitDialogBridge.UpdateAlertActions and conformance UIKitDialogBridge.UpdateAlertActions();
          int v9 = Attribute.init<A>(body:value:flags:update:)();
          outlined destroy of weak AnyGestureResponder?((uint64_t)v11);
          *(_DWORD *)uint64_t v6 = v9;
          *(unsigned char *)(v6 + 4) = 0;
          static AGAttributeFlags.transactional.getter();
          AGGraphGetFlags();
          AGGraphSetFlags();
          AGSubgraphSetCurrent();

          AGGraphSetUpdate();
        }
        else
        {
          MEMORY[0x1F4188790](v5);
          MEMORY[0x1F4188790](v10);
          AGGraphMutateAttribute();
          static AGAttributeFlags.transactional.getter();
          AGGraphGetFlags();
          AGGraphSetFlags();
        }
        static Update.end()();
      }
    }
  }
}

uint64_t protocol witness for StatefulRule.updateValue() in conformance UIKitDialogBridge.UpdateAlertActions()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    AGGraphGetValue();
    uint64_t v1 = swift_bridgeObjectRetain();
    UIKitDialogBridge.updateAlertActionsEnabled(_:)(v1);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for ObservedAttribute.destroy() in conformance UIKitDialogBridge.UpdateAlertActions()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_actionsChangeDetector;
    *(_DWORD *)uint64_t v1 = 0;
    *(unsigned char *)(v1 + 4) = 1;
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody._destroySelf(_:) in conformance UIKitDialogBridge.UpdateAlertActions()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_actionsChangeDetector;
    *(_DWORD *)uint64_t v1 = 0;
    *(unsigned char *)(v1 + 4) = 1;
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in UIKitDialogBridge.showNewDialog(_:id:)@<X0>(void *a1@<X8>)
{
  AGGraphClearUpdate();
  uint64_t v2 = *(void *)AGGraphGetValue();
  uint64_t v3 = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = AGGraphSetUpdate();
  *a1 = v2;
  a1[1] = v3;
  return result;
}

uint64_t closure #2 in UIKitDialogBridge.showNewDialog(_:id:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    static Semantics.v4.getter();
    if (isLinkedOnOrAfter(_:)())
    {
      uint64_t v2 = swift_allocObject();
      *(void *)(v2 + 16) = v1;
      *(unsigned char *)(v2 + 24) = 0;
      swift_retain();
      onNextMainRunLoop(do:)();
      swift_release();
    }
    else
    {
      dismissActually #1 () in UIKitDialogBridge.dismiss(triggerCancellation:)(v1, 0);
    }
    return swift_release();
  }
  return result;
}

void closure #3 in UIKitDialogBridge.showNewAlert(_:id:)()
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  _s7SwiftUI7WeakBoxVySo11UITextFieldCGWObTm_0((uint64_t)v0, (uint64_t)v1, (uint64_t (*)(void))type metadata accessor for WeakBox<UITextField>);
  v1[8] = 0;
  PlatformTextFieldCoordinator.configure(field:)((uint64_t)v1);
  outlined destroy of PlatformTextFieldCoordinator.FieldStorage((uint64_t)v1);
  PlatformTextFieldCoordinator.update()();
}

uint64_t closure #4 in UIKitDialogBridge.showNewAlert(_:id:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    UIKitDialogBridge.startTrackingUpdates(actions:)();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall UIKitDialogBridge.performDialogAction(_:)(UIAlertAction a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PlatformItemList.Item();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4 - 8);
  id v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastActionContext);
  swift_beginAccess();
  uint64_t v9 = type metadata accessor for DialogActionContext(0);
  uint64_t v10 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
  if (v10(v8, 1, v9)
    || (uint64_t v11 = *(uint64_t *)((char *)v8 + *(int *)(v9 + 28)), !*(void *)(v11 + 16))
    || (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a1.super.isa), (v13 & 1) == 0))
  {
    swift_endAccess();
    return;
  }
  unint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v12);
  swift_endAccess();
  if (*(void *)(v2 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastPlatformItemList))
  {
    uint64_t v15 = *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastPlatformItemList);
    if ((v14 & 0x8000000000000000) == 0) {
      goto LABEL_8;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v10(v8, 1, v9)) {
    return;
  }
  uint64_t v15 = *v8;
  swift_bridgeObjectRetain();
  if ((v14 & 0x8000000000000000) != 0) {
    goto LABEL_14;
  }
LABEL_8:
  if (v14 >= *(void *)(v15 + 16))
  {
LABEL_15:
    __break(1u);
    return;
  }
  _s7SwiftUI16PlatformItemListV0D0VWOcTm_4(v15+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v14, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = *((void *)v7 + 50);
  uint64_t v16 = (void (*)(void))*((void *)v7 + 51);
  uint64_t v18 = *((void *)v7 + 52);
  uint64_t v19 = *((void *)v7 + 53);
  uint64_t v20 = *((void *)v7 + 54);
  uint64_t v21 = *((void *)v7 + 55);
  uint64_t v22 = *((void *)v7 + 56);
  uint64_t v23 = *((void *)v7 + 57);
  char v24 = v7[464];
  LOBYTE(v25) = v24;
  outlined copy of PlatformItemList.Item.SelectionBehavior?(v17, (uint64_t)v16, v18, v19, v20, v21, v22, v23, v25, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  _s7SwiftUI16PlatformItemListV0D0VWOhTm_2((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  if (v16 != (void (*)(void))1)
  {
    outlined copy of AppIntentExecutor?((uint64_t)v16);
    LOBYTE(v26) = v24;
    outlined copy of PlatformItemList.Item.SelectionBehavior?(v17, (uint64_t)v16, v18, v19, v20, v21, v22, v23, v26, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    if (v16)
    {
      v16();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v16);
    }
  }
}

uint64_t dismissActually #1 () in UIKitDialogBridge.dismiss(triggerCancellation:)(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for DialogActionContext.CancelType(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v54 - v9;
  type metadata accessor for DialogActionContext?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
  MEMORY[0x1F4188790](v11 - 8);
  char v13 = (char *)&v54 - v12;
  Swift::UInt32 v14 = *(_DWORD *)(a1 + 40);
  if (*(unsigned char *)(a1 + 44))
  {
    if (*(unsigned char *)(a1 + 44) == 1)
    {
      swift_beginAccess();
      uint64_t v15 = *(void *)(a1 + 64);
      if (v15)
      {
        if (*(void *)(v15 + 16) && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v14), (v17 & 1) != 0))
        {
          outlined init with copy of ConfirmationDialog(*(void *)(v15 + 56) + 184 * v16, (uint64_t)&v60);
          if ((void)v61)
          {
            swift_retain();
            swift_retain();
            outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v60, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(void, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);
            swift_endAccess();
            LOBYTE(v58[0]) = 0;
            dispatch thunk of AnyLocation.set(_:transaction:)();
            swift_release();
            swift_release();
            if ((a2 & 1) == 0) {
              return UIKitDialogBridge.reset()();
            }
            goto LABEL_22;
          }
        }
        else
        {
          char v71 = 0;
          long long v69 = 0u;
          long long v70 = 0u;
          long long v67 = 0u;
          long long v68 = 0u;
          long long v65 = 0u;
          long long v66 = 0u;
          long long v63 = 0u;
          long long v64 = 0u;
          long long v61 = 0u;
          long long v62 = 0u;
          long long v60 = 0u;
        }
        outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v60, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t (*)(void, uint64_t, ValueMetadata *))type metadata accessor for AccessibilityValueStorage?);
      }
      swift_endAccess();
      if ((a2 & 1) == 0) {
        return UIKitDialogBridge.reset()();
      }
LABEL_22:
      uint64_t v38 = a1 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastActionContext;
      swift_beginAccess();
      uint64_t v39 = type metadata accessor for DialogActionContext(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v38, 1, v39))
      {
        uint64_t v40 = v38 + *(int *)(v39 + 24);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v40, 1, v4))
        {
          _s7SwiftUI16PlatformItemListV0D0VWOcTm_4(v40, (uint64_t)v10, type metadata accessor for DialogActionContext.CancelType);
          _s7SwiftUI16PlatformItemListV0D0VWOcTm_4((uint64_t)v10, (uint64_t)v7, type metadata accessor for DialogActionContext.CancelType);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            _s7SwiftUI7WeakBoxVySo11UITextFieldCGWObTm_0((uint64_t)v7, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
            uint64_t v41 = type metadata accessor for PlatformItemList.Item();
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v13, 0, 1, v41);
          }
          else
          {
            outlined init with take of PlatformItemList.Item?((uint64_t)v7, (uint64_t)v13);
          }
          _s7SwiftUI16PlatformItemListV0D0VWOhTm_2((uint64_t)v10, type metadata accessor for DialogActionContext.CancelType);
          uint64_t v42 = type metadata accessor for PlatformItemList.Item();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48))(v13, 1, v42) == 1)
          {
            _s7SwiftUI32CustomRecursiveStringConvertible_pSgWOhTm_0((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
          }
          else
          {
            uint64_t v43 = *((void *)v13 + 50);
            int v44 = (void (*)(void))*((void *)v13 + 51);
            uint64_t v45 = *((void *)v13 + 52);
            uint64_t v46 = *((void *)v13 + 53);
            uint64_t v47 = *((void *)v13 + 54);
            uint64_t v48 = *((void *)v13 + 55);
            uint64_t v49 = *((void *)v13 + 56);
            char v50 = v13[464];
            LOBYTE(v52) = v50;
            uint64_t v54 = *((void *)v13 + 57);
            uint64_t v55 = v43;
            outlined copy of PlatformItemList.Item.SelectionBehavior?(v43, (uint64_t)v44, v45, v46, v47, v48, v49, v54, v52, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
            _s7SwiftUI16PlatformItemListV0D0VWOhTm_2((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
            if (v44 != (void (*)(void))1)
            {
              outlined copy of AppIntentExecutor?((uint64_t)v44);
              LOBYTE(v53) = v50;
              outlined copy of PlatformItemList.Item.SelectionBehavior?(v55, (uint64_t)v44, v45, v46, v47, v48, v49, v54, v53, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
              if (v44)
              {
                v44();
                outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v44);
              }
            }
          }
        }
      }
      return UIKitDialogBridge.reset()();
    }
LABEL_21:
    if ((a2 & 1) == 0) {
      return UIKitDialogBridge.reset()();
    }
    goto LABEL_22;
  }
  swift_beginAccess();
  uint64_t v18 = *(void *)(a1 + 80);
  if (!v18)
  {
    swift_endAccess();
    goto LABEL_21;
  }
  uint64_t v19 = *(void *)(v18 + 16);
  uint64_t v55 = v5;
  if (v19 && (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v14), (v21 & 1) != 0))
  {
    uint64_t v22 = (_OWORD *)(*(void *)(v18 + 56) + 248 * v20);
    long long v24 = v22[2];
    long long v23 = v22[3];
    long long v25 = v22[1];
    v58[0] = *v22;
    v58[1] = v25;
    _OWORD v58[2] = v24;
    v58[3] = v23;
    long long v26 = v22[4];
    long long v27 = v22[5];
    long long v28 = v22[7];
    v58[6] = v22[6];
    v58[7] = v28;
    v58[4] = v26;
    v58[5] = v27;
    long long v29 = v22[8];
    long long v30 = v22[9];
    long long v31 = v22[11];
    v58[10] = v22[10];
    v58[11] = v31;
    v58[8] = v29;
    v58[9] = v30;
    long long v32 = v22[12];
    long long v33 = v22[13];
    long long v34 = v22[14];
    uint64_t v59 = *((void *)v22 + 30);
    v58[13] = v33;
    v58[14] = v34;
    v58[12] = v32;
    memmove(&v60, v22, 0xF8uLL);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v60, v35, v36, v37);
    outlined retain of AlertStorage(v58);
  }
  else
  {
    _s7SwiftUI12AlertStorageVSgWOi0_((uint64_t)v58);
    outlined init with take of AlertStorage?((uint64_t)v58, (uint64_t)&v60, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  }
  outlined init with take of AlertStorage?((uint64_t)&v60, (uint64_t)v57, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  outlined init with take of AlertStorage?((uint64_t)v57, (uint64_t)v58, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  if (_s7SwiftUI12AlertStorageVSgWOg((uint64_t)v58) == 1)
  {
    swift_endAccess();
  }
  else
  {
    outlined init with take of AlertStorage?((uint64_t)&v60, (uint64_t)v56, (uint64_t)&lazy cache variable for type metadata for AlertStorage?, (uint64_t)&type metadata for AlertStorage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
    swift_endAccess();
    swift_retain();
    swift_retain();
    outlined release of AlertStorage?((uint64_t)v56);
    char v72 = 0;
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
  }
  uint64_t v5 = v55;
  if (a2) {
    goto LABEL_22;
  }
  return UIKitDialogBridge.reset()();
}

uint64_t UIKitDialogBridge.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();
  outlined destroy of weak FallbackResponderProvider?(v0 + 24);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _s7SwiftUI32CustomRecursiveStringConvertible_pSgWOhTm_0(v0 + OBJC_IVAR____TtC7SwiftUI17UIKitDialogBridge_lastActionContext, &lazy cache variable for type metadata for DialogActionContext?, (void (*)(uint64_t))type metadata accessor for DialogActionContext);

  return swift_bridgeObjectRelease();
}

uint64_t ObjC metadata update function for UIKitDialogBridge()
{
  return type metadata accessor for UIKitDialogBridge();
}

id PlatformAlertController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlatformAlertController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PlatformAlertController()
{
  return self;
}

uint64_t getEnumTagSinglePayload for UIKitDialogBridge.ActivePresentation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitDialogBridge.ActivePresentation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for UIKitDialogBridge.ActivePresentation(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 4) <= 1u) {
    return *(unsigned __int8 *)(a1 + 4);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for UIKitDialogBridge.ActivePresentation(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 4) = a2;
  return result;
}

ValueMetadata *type metadata accessor for UIKitDialogBridge.ActivePresentation()
{
  return &type metadata for UIKitDialogBridge.ActivePresentation;
}

uint64_t UIKitDialogBridge.descriptionChildren.getter()
{
  uint64_t v1 = *(void **)(v0 + 48);
  if (!v1
    || (type metadata accessor for PlatformAlertController(),
        type metadata accessor for CustomRecursiveStringConvertible(),
        id v2 = v1,
        (swift_dynamicCast() & 1) == 0))
  {
    uint64_t v9 = 0;
    long long v7 = 0u;
    long long v8 = 0u;
    goto LABEL_6;
  }
  uint64_t v3 = *((void *)&v8 + 1);
  if (!*((void *)&v8 + 1))
  {
LABEL_6:
    _s7SwiftUI32CustomRecursiveStringConvertible_pSgWOhTm_0((uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for CustomRecursiveStringConvertible?, (void (*)(uint64_t))type metadata accessor for CustomRecursiveStringConvertible);
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v4 = v9;
  __swift_project_boxed_opaque_existential_1(&v7, *((uint64_t *)&v8 + 1));
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  return v5;
}

uint64_t UIKitDialogBridge.descriptionAttributes.getter()
{
  uint64_t v1 = *(void **)(v0 + 48);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  type metadata accessor for _ContiguousArrayStorage<(String, String)>();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  *(void *)(inited + 32) = 0x656C746974;
  *(void *)(inited + 40) = 0xE500000000000000;
  id v3 = v1;
  id v4 = objc_msgSend(v3, sel_title);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v8 = 0xE000000000000000;
  }
  *(void *)(inited + 48) = v6;
  *(void *)(inited + 56) = v8;
  id v10 = objc_msgSend(v3, sel_message);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    uint64_t inited = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)1, 2, 1, (void *)inited);
    *(void *)(inited + 16) = 2;
    *(void *)(inited + 64) = 0x6567617373656DLL;
    *(void *)(inited + 72) = 0xE700000000000000;
    *(void *)(inited + 80) = v12;
    *(void *)(inited + 88) = v14;
  }
  id v15 = objc_msgSend(v3, sel_preferredAction);
  if (!v15)
  {
LABEL_13:
    if (objc_msgSend(v3, sel_severity, v31) == (id)1)
    {
      unint64_t v29 = *(void *)(inited + 16);
      unint64_t v28 = *(void *)(inited + 24);
      if (v29 >= v28 >> 1) {
        uint64_t inited = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, (void *)inited);
      }
      *(void *)(inited + 16) = v29 + 1;
      long long v30 = (void *)(inited + 32 * v29);
      v30[4] = 0x7974697265766573;
      v30[5] = 0xE800000000000000;
      v30[6] = 0x6C61636974697263;
      v30[7] = 0xE800000000000000;
    }
    uint64_t v9 = specialized _arrayForceCast<A, B>(_:)(inited);
    swift_bridgeObjectRelease();

    return v9;
  }
  unint64_t v16 = v15;
  id v17 = objc_msgSend(v3, sel_actions);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAlertAction);
  unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Collection<>.firstIndex(of:)((uint64_t)v16, v18);
  uint64_t v20 = v19;
  char v22 = v21;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v22 & 1) == 0)
  {
    uint64_t v31 = v20;
    v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    unint64_t v26 = *(void *)(inited + 16);
    unint64_t v25 = *(void *)(inited + 24);
    if (v26 >= v25 >> 1) {
      uint64_t inited = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, (void *)inited);
    }
    *(void *)(inited + 16) = v26 + 1;
    long long v27 = (void *)(inited + 32 * v26);
    unsigned char v27[4] = 0x6572726566657270;
    v27[5] = 0xEF6E6F6974634164;
    v27[6] = 0;
    v27[7] = 0xE000000000000000;

    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for CustomRecursiveStringConvertible.descriptionName.getter in conformance UIKitDialogBridge()
{
  if (*(unsigned char *)(*(void *)v0 + 44) == 1) {
    return 0xD000000000000012;
  }
  else {
    return 0x7472656C41;
  }
}

uint64_t protocol witness for CustomRecursiveStringConvertible.descriptionAttributes.getter in conformance UIKitDialogBridge()
{
  return UIKitDialogBridge.descriptionAttributes.getter();
}

uint64_t protocol witness for CustomRecursiveStringConvertible.descriptionChildren.getter in conformance UIKitDialogBridge()
{
  return UIKitDialogBridge.descriptionChildren.getter();
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v4 = v2;
  uint64_t v5 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x1E4F143B8];
  char v6 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = a2((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v5);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v9;
    }
  }
  else
  {
    id v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v4 = a2((char *)v10, v7, v5);
    MEMORY[0x18C119C60](v10, -1, -1);
  }
  return v4;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  id v17 = (unint64_t *)result;
  uint64_t v18 = 0;
  int64_t v4 = 0;
  uint64_t v19 = a3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a3 + 64);
  int64_t v20 = (unint64_t)(v5 + 63) >> 6;
  unint64_t v28 = &v22;
  while (1)
  {
    if (v7)
    {
      unint64_t v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v9 = v8 | (v4 << 6);
      goto LABEL_5;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v12 >= v20) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
    }
    unint64_t v13 = *(void *)(v19 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v20) {
        return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
      }
      unint64_t v13 = *(void *)(v19 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v20) {
          return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
        }
        unint64_t v13 = *(void *)(v19 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v13 - 1) & v13;
    unint64_t v9 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_5:
    int v10 = *(_DWORD *)(*(void *)(a3 + 48) + 4 * v9);
    outlined init with copy of ConfirmationDialog(*(void *)(a3 + 56) + 184 * v9, (uint64_t)v27);
    int v25 = v10;
    outlined init with copy of ConfirmationDialog((uint64_t)v27, (uint64_t)v26);
    int v23 = v10;
    outlined init with copy of ConfirmationDialog((uint64_t)v26, (uint64_t)v24);
    int v21 = v10;
    outlined init with take of ConfirmationDialog((uint64_t)v24, (uint64_t)v28);
    int v11 = v22;
    outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v21, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t (*)(void, uint64_t, ValueMetadata *))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog));
    outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v25, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t (*)(void, uint64_t, ValueMetadata *))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog));
    uint64_t result = outlined destroy of ConfirmationDialog((uint64_t)v27);
    if (v11 == 1)
    {
      *(unint64_t *)((char *)v17 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
      if (__OFADD__(v18++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
      }
    }
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v20) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
  }
  unint64_t v13 = *(void *)(v19 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v20) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
    }
    unint64_t v13 = *(void *)(v19 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t *v17;
  uint64_t v18;
  unsigned char v19[96];
  uint64_t v20;
  void v21[13];
  unsigned char v22[96];
  uint64_t v23;
  unsigned char v24[96];
  unsigned char v25[104];
  int64_t v26;

  id v17 = (unint64_t *)result;
  uint64_t v18 = 0;
  int64_t v4 = 0;
  uint64_t v5 = a3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  unint64_t v7 = -1;
  if (v6 < 64) {
    unint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  unint64_t v26 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int v10 = v9 | (v4 << 6);
      goto LABEL_5;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v12 >= v26) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v26) {
        return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v26) {
          return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v13 - 1) & v13;
    int v10 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_5:
    int v11 = *(void *)(*(void *)(a3 + 48) + 8 * v10);
    outlined init with copy of NavigationDestinationPresentation(*(void *)(a3 + 56) + 96 * v10, (uint64_t)v25);
    int v23 = v11;
    outlined init with copy of NavigationDestinationPresentation((uint64_t)v25, (uint64_t)v24);
    v21[12] = v11;
    outlined init with copy of NavigationDestinationPresentation((uint64_t)v24, (uint64_t)v22);
    int64_t v20 = v11;
    outlined init with take of NavigationDestinationPresentation((uint64_t)v22, (uint64_t)v21);
    outlined init with copy of NavigationDestinationPresentation((uint64_t)v21, (uint64_t)v19);
    LOBYTE(v11) = v19[88];
    outlined destroy of NavigationDestinationPresentation((uint64_t)v19);
    outlined destroy of (key: Namespace.ID, value: NavigationDestinationPresentation)((uint64_t)&v20);
    outlined destroy of (key: Namespace.ID, value: NavigationDestinationPresentation)((uint64_t)&v23);
    uint64_t result = outlined destroy of NavigationDestinationPresentation((uint64_t)v25);
    if ((v11 & 1) == 0)
    {
      *(unint64_t *)((char *)v17 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      if (__OFADD__(v18++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
      }
    }
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v26) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v26) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v17, a2, v18, a3);
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, uint64_t, ValueMetadata *))
{
  uint64_t v4 = a3(0, a2, &type metadata for ConfirmationDialog);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined assign with take of DialogActionContext?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for DialogActionContext?(0, &lazy cache variable for type metadata for DialogActionContext?, (void (*)(uint64_t))type metadata accessor for DialogActionContext);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

double _s7SwiftUI12AlertStorageVSgWOi0_(uint64_t a1)
{
  *(void *)(a1 + 240) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t _s7SwiftUI12AlertStorageVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t outlined release of AlertStorage?(uint64_t a1)
{
  outlined consume of AlertStorage?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void **)(a1 + 192));
  return a1;
}

void outlined consume of AlertStorage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  if (a3)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    outlined consume of DialogSuppressionConfiguration?(a14, a15, a16, a17, a18, a19);
    outlined consume of BoundInputsView?(a21, a22, a23, a24, a25);
  }
}

uint64_t partial apply for closure #1 in UIKitDialogBridge.showNewDialog(_:id:)@<X0>(void *a1@<X8>)
{
  return closure #1 in UIKitDialogBridge.showNewDialog(_:id:)(a1);
}

uint64_t sub_18815BE50()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UIKitDialogBridge.showNewDialog(_:id:)()
{
  return closure #2 in UIKitDialogBridge.showNewDialog(_:id:)();
}

uint64_t sub_18815BEC0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitDialogBridge.dismiss(triggerCancellation:)()
{
  return dismissActually #1 () in UIKitDialogBridge.dismiss(triggerCancellation:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void type metadata accessor for (key: ViewIdentity, value: AlertStorage)?()
{
  if (!lazy cache variable for type metadata for (key: ViewIdentity, value: AlertStorage)?)
  {
    type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog)(255, &lazy cache variable for type metadata for (key: ViewIdentity, value: AlertStorage));
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: ViewIdentity, value: AlertStorage)?);
    }
  }
}

void type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog)(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t partial apply for closure #2 in UIKitDialogBridge.showNewAlert(_:id:)()
{
  return closure #2 in UIKitDialogBridge.showNewDialog(_:id:)();
}

uint64_t sub_18815BFFC()
{
  return swift_deallocObject();
}

void partial apply for closure #3 in UIKitDialogBridge.showNewAlert(_:id:)()
{
}

uint64_t sub_18815C03C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in UIKitDialogBridge.showNewAlert(_:id:)()
{
  return closure #4 in UIKitDialogBridge.showNewAlert(_:id:)();
}

void type metadata accessor for UIHostingController<BoundInputsView>()
{
  if (!lazy cache variable for type metadata for UIHostingController<BoundInputsView>)
  {
    unint64_t v0 = type metadata accessor for UIHostingController();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<BoundInputsView>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UIKitDialogBridge.UpdateAlertActions and conformance UIKitDialogBridge.UpdateAlertActions()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitDialogBridge.UpdateAlertActions and conformance UIKitDialogBridge.UpdateAlertActions;
  if (!lazy protocol witness table cache variable for type UIKitDialogBridge.UpdateAlertActions and conformance UIKitDialogBridge.UpdateAlertActions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitDialogBridge.UpdateAlertActions and conformance UIKitDialogBridge.UpdateAlertActions);
  }
  return result;
}

uint64_t partial apply for closure #1 in UIKitDialogBridge.startTrackingUpdates(actions:)(uint64_t result)
{
  *(_DWORD *)(result + 8) = *(_DWORD *)(v1 + 16);
  return result;
}

uint64_t outlined init with copy of ConfirmationDialog?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t outlined init with take of AlertStorage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t initializeWithCopy for UIKitDialogBridge.UpdateAlertActions(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_weakCopyInit();
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for UIKitDialogBridge.UpdateAlertActions(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_weakCopyAssign();
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for UIKitDialogBridge.UpdateAlertActions(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_weakTakeInit();
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for UIKitDialogBridge.UpdateAlertActions(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_weakTakeAssign();
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

void *type metadata accessor for UIKitDialogBridge.UpdateAlertActions()
{
  return &unk_1ED425B80;
}

uint64_t partial apply for closure #1 in UIKitDialogBridge.showNewAlert(_:id:)@<X0>(void *a1@<X8>)
{
  return partial apply for closure #1 in UIKitDialogBridge.showNewDialog(_:id:)(a1);
}

uint64_t assignWithCopy for NavigationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v24 = *(unsigned char *)(a2 + 64);
  outlined copy of NavigationRequest.Action(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v24);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  char v20 = *(unsigned char *)(a1 + 64);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v24;
  outlined consume of NavigationRequest.Action(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  long long v21 = *(_OWORD *)(a2 + 72);
  long long v22 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v22;
  *(_OWORD *)(a1 + 72) = v21;
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for NavigationRequest(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 64);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  char v13 = *(unsigned char *)(a1 + 64);
  long long v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  long long v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  *(unsigned char *)(a1 + 64) = v4;
  outlined consume of NavigationRequest.Action(v5, v6, v7, v8, v9, v10, v11, v12, v13);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationRequest(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 104) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for NavigationRequest(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(void *)(a1 + 104) = 2 * -a2;
      *(void *)(a1 + 112) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

__n128 static NavigationRequest.boundSelectionChange<A>(list:newValue:selectionPopsSubsequentColumn:transaction:)@<Q0>(__n128 *a1@<X0>, char a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  __n128 v13 = *a1;
  unint64_t v6 = a1[1].n128_u64[0];
  unint64_t v7 = a1[1].n128_u64[1];
  unint64_t v8 = a1[2].n128_u64[1];
  uint64_t v9 = a2 & 1;
  uint64_t v10 = a1[2].n128_u8[0] & 1 | 0x4000000000000000;
  char v11 = Transaction.disablesAnimations.getter();
  *(void *)a4 = a3;
  *(void *)(a4 + 8) = v9;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(unsigned char *)(a4 + 64) = 7;
  __n128 result = v13;
  *(__n128 *)(a4 + 72) = v13;
  *(void *)(a4 + 88) = v6;
  *(void *)(a4 + 96) = v7;
  *(void *)(a4 + 104) = v10;
  *(void *)(a4 + 112) = v8;
  *(unsigned char *)(a4 + 120) = v11 & 1;
  *(void *)(a4 + 128) = 0;
  return result;
}

__n128 static NavigationRequest.editingChanged<A>(forSelectionType:list:newValue:)@<Q0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  __n128 result = *(__n128 *)a1;
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a4 + 72) = *(_OWORD *)a1;
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned char *)(a1 + 32) & 1 | 0x4000000000000000;
  *(void *)a4 = a2 & 1;
  *(void *)(a4 + 8) = a3;
  *(unsigned char *)(a4 + 64) = 8;
  *(_OWORD *)(a4 + 88) = v5;
  *(void *)(a4 + 104) = v7;
  *(void *)(a4 + 112) = v6;
  *(unsigned char *)(a4 + 120) = 0;
  *(void *)(a4 + 128) = 0;
  return result;
}

uint64_t static NavigationRequest.updateView<A>(_:from:identifier:shouldTargetSourceColumn:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, uint64_t a4@<X8>)
{
  double v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = v10[2];
  uint64_t v14 = v10[3];
  (*(void (**)(char *, double))(v15 + 16))(v9, v7);
  *(void *)a4 = AnyNavigationLinkPresentedView.init<A>(_:)((uint64_t)v9);
  *(void *)(a4 + 8) = v11;
  *(void *)(a4 + 16) = v12;
  *(void *)(a4 + 24) = v13;
  *(void *)(a4 + 32) = v14;
  *(void *)(a4 + 40) = a3 & 1;
  *(void *)(a4 + 48) = 0;
  *(void *)(a4 + 56) = 0;
  *(unsigned char *)(a4 + 64) = 14;
  outlined init with take of NavigationRequest.KeyKind(a2, a4 + 72);
  *(unsigned char *)(a4 + 120) = 0;
  *(void *)(a4 + 128) = 0;
  swift_retain();
  return outlined copy of Text.LineStyle?(v12, v13);
}

uint64_t static NavigationRequest.programmaticallyPresentView<A>(_:from:transaction:depth:identifier:dismiss:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = a2;
  double v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  uint64_t v14 = v11[2];
  uint64_t v15 = v11[3];
  (*(void (**)(char *, double))(v16 + 16))(v10, v8);
  uint64_t v17 = AnyNavigationLinkPresentedView.init<A>(_:)((uint64_t)v10);
  swift_retain();
  outlined copy of Text.LineStyle?(v12, v14);
  swift_retain();
  char v18 = Transaction.disablesAnimations.getter();
  uint64_t v19 = v23;
  *(void *)a6 = v17;
  *(void *)(a6 + 8) = v19;
  *(void *)(a6 + 16) = v13;
  *(void *)(a6 + 24) = v12;
  *(void *)(a6 + 32) = v14;
  *(void *)(a6 + 40) = v15;
  uint64_t v20 = v25;
  *(void *)(a6 + 48) = v24;
  *(void *)(a6 + 56) = a5;
  *(unsigned char *)(a6 + 64) = 18;
  uint64_t result = outlined init with take of NavigationRequest.KeyKind(v20, a6 + 72);
  *(unsigned char *)(a6 + 120) = v18 & 1;
  *(void *)(a6 + 128) = 0;
  return result;
}

uint64_t NavigationRequest.KeyKind.previous.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = outlined init with take of NavigationRequest.KeyKind(v1, (uint64_t)v4);
  if ((unint64_t)v5 >> 62 == 1)
  {
    *(void *)&long long v5 = v5 & 0x3FFFFFFFFFFFFFFFLL;
    v6[0] = v4[0];
    v6[1] = v4[1];
    _OWORD v6[2] = v5;
    outlined init with take of NavigationState.StackContent.Key?((uint64_t)v6 + 8, (uint64_t)v7);
    uint64_t result = outlined init with take of NavigationState.StackContent.Key?((uint64_t)v7, (uint64_t)v8);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0x1FFFFFFFELL;
  a1[5] = 0;
  return result;
}

uint64_t static NavigationRequest.presentView<A>(_:from:identifier:binding:shouldTargetSourceColumn:transaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v25 = a6;
  HIDWORD(v24) = a5;
  uint64_t v27 = a2;
  double v10 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  uint64_t v16 = v13[2];
  uint64_t v26 = v13[3];
  (*(void (**)(char *, double))(v17 + 16))(v12, v10);
  uint64_t v18 = AnyNavigationLinkPresentedView.init<A>(_:)((uint64_t)v12);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a3;
  *(void *)(v19 + 24) = a4;
  *(unsigned char *)(v19 + 32) = BYTE4(v24);
  uint64_t v20 = v25 & 1;
  swift_retain();
  outlined copy of Text.LineStyle?(v15, v16);
  swift_retain();
  swift_retain();
  LOBYTE(a4) = Transaction.disablesAnimations.getter();
  uint64_t v21 = Transaction.animation.getter();
  *(void *)a7 = v18;
  *(void *)(a7 + 8) = v14;
  *(void *)(a7 + 16) = v15;
  *(void *)(a7 + 24) = v16;
  uint64_t v22 = v27;
  *(void *)(a7 + 32) = v26;
  *(void *)(a7 + 40) = partial apply for closure #1 in View.actionSheet(isPresented:content:);
  *(void *)(a7 + 48) = v19;
  *(void *)(a7 + 56) = v20;
  *(unsigned char *)(a7 + 64) = 13;
  uint64_t result = outlined init with take of NavigationRequest.KeyKind(v22, a7 + 72);
  *(unsigned char *)(a7 + 120) = a4 & 1;
  *(void *)(a7 + 128) = v21;
  return result;
}

double static NavigationRequest.setInitialPossibilities<A>(_:stack:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13 = *(void *)(a5 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  double v15 = MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v13 + 16))(v16, v15);
  unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a5;
  *(void *)(v18 + 24) = a6;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v18 + v17, v16, a5);
  *(void *)a7 = partial apply for closure #1 in static NavigationRequest.setInitialPossibilities<A>(_:stack:);
  *(void *)(a7 + 8) = v18;
  double result = 0.0;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(unsigned char *)(a7 + 64) = 0;
  *(void *)(a7 + 72) = a2;
  *(void *)(a7 + 80) = a3;
  *(void *)(a7 + 128) = 0;
  *(void *)(a7 + 88) = a4;
  *(void *)(a7 + 96) = 0;
  *(void *)(a7 + 104) = 0;
  *(void *)(a7 + 112) = 0;
  *(unsigned char *)(a7 + 120) = 0;
  return result;
}

unint64_t NavigationRequest.description.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 56);
  char v9 = *(unsigned char *)(v0 + 64);
  uint64_t v18 = *(void *)(v0 + 72);
  uint64_t v19 = *(void *)(v0 + 80);
  unint64_t v20 = *(void *)(v0 + 104);
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  outlined copy of NavigationRequest.Action(v1, v2, v3, v4, v5, v6, v8, v7, v9);
  v10._uint64_t countAndFlagsBits = NavigationRequest.Action.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  outlined consume of NavigationRequest.Action(v1, v2, v3, v4, v5, v6, v8, v7, v9);
  v11._uint64_t countAndFlagsBits = 0x203A79656B5B205DLL;
  v11._object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  if (v20 >> 62)
  {
    if (v20 >> 62 != 1)
    {
      unint64_t v14 = 0xE500000000000000;
      uint64_t v12 = 0x74696C7073;
      goto LABEL_7;
    }
    uint64_t v12 = NavigationState.ListKey.description.getter();
  }
  else
  {
    uint64_t v12 = NavigationState.StackContent.Key.debugDescription.getter(v18, v19);
  }
  unint64_t v14 = v13;
LABEL_7:
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 93;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return 0xD00000000000001ELL;
}

uint64_t closure #1 in static NavigationRequest.setInitialPossibilities<A>(_:stack:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ResolvedNavigationDestinations.possibilities<A>(from:depth:)(a2, 0, a3, a4);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NavigationRequest.KeyKind()
{
  unint64_t v1 = (unint64_t)v0[4] >> 62;
  if (!v1) {
    return NavigationState.StackContent.Key.debugDescription.getter(*v0, v0[1]);
  }
  if (v1 == 1) {
    return NavigationState.ListKey.description.getter();
  }
  return 0x74696C7073;
}

uint64_t NavigationRequest.debugDescription.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  uint64_t v8 = *(void *)(v0 + 56);
  int v9 = *(unsigned __int8 *)(v0 + 64);
  uint64_t v40 = *(void *)(v0 + 88);
  uint64_t v41 = *(void *)(v0 + 80);
  unint64_t v42 = *(void *)(v0 + 104);
  int v43 = *(unsigned __int8 *)(v0 + 120);
  uint64_t v38 = *(void *)(v0 + 72);
  uint64_t v39 = *(void *)(v0 + 128);
  _StringGuts.grow(_:)(105);
  v10._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v10._object = (void *)0x800000018833FD90;
  String.append(_:)(v10);
  uint64_t v11 = v4;
  uint64_t v12 = v8;
  uint64_t v13 = v11;
  outlined copy of NavigationRequest.Action(v1, v2, v11, v3, v6, v5, v7, v12, v9);
  v14._uint64_t countAndFlagsBits = NavigationRequest.Action.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = v13;
  char v16 = v5;
  outlined consume of NavigationRequest.Action(v1, v2, v15, v3, v6, v5, v7, v12, v9);
  v17._uint64_t countAndFlagsBits = 0x203A79656B5B205DLL;
  v17._object = (void *)0xE800000000000000;
  String.append(_:)(v17);
  unint64_t v18 = v42 >> 62;
  if (!(v42 >> 62))
  {
    unsigned __int8 v19 = v41;
    uint64_t v20 = NavigationState.StackContent.Key.debugDescription.getter(v38, v41);
    goto LABEL_5;
  }
  if (v18 == 1)
  {
    unsigned __int8 v19 = v41;
    uint64_t v20 = NavigationState.ListKey.description.getter();
LABEL_5:
    unint64_t v22 = v21;
    goto LABEL_7;
  }
  unint64_t v22 = 0xE500000000000000;
  uint64_t v20 = 0x74696C7073;
  unsigned __int8 v19 = v41;
LABEL_7:
  uint64_t v23 = 1702195828;
  unint64_t v24 = v22;
  String.append(_:)(*(Swift::String *)&v20);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 0xD000000000000017;
  v25._object = (void *)0x8000000188340DB0;
  String.append(_:)(v25);
  if (v43) {
    uint64_t v26 = 1702195828;
  }
  else {
    uint64_t v26 = 0x65736C6166;
  }
  if (v43) {
    unint64_t v27 = 0xE400000000000000;
  }
  else {
    unint64_t v27 = 0xE500000000000000;
  }
  unint64_t v28 = v27;
  String.append(_:)(*(Swift::String *)&v26);
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 0x616D696E615B205DLL;
  v29._object = (void *)0xEE00203A6E6F6974;
  String.append(_:)(v29);
  if (v39)
  {
    uint64_t v30 = Animation.description.getter();
    unint64_t v32 = v31;
  }
  else
  {
    unint64_t v32 = 0xEC0000006E6F6974;
    uint64_t v30 = 0x616D696E61206F4ELL;
  }
  unint64_t v33 = v32;
  String.append(_:)(*(Swift::String *)&v30);
  swift_bridgeObjectRelease();
  v34._object = (void *)0x8000000188340DD0;
  v34._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v34);
  if (v18)
  {
    if (v18 != 1) {
      goto LABEL_23;
    }
    unsigned __int8 v19 = v40;
    if (v40 == 6) {
      goto LABEL_23;
    }
  }
  if (v9 != 13)
  {
    if (v9 != 14) {
      goto LABEL_23;
    }
    LOBYTE(v12) = v16;
  }
  if (!(v19 & 0xFE | (unint64_t)(v12 & 1)))
  {
    uint64_t v35 = (void *)0xE400000000000000;
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v35 = (void *)0xE500000000000000;
  uint64_t v23 = 0x65736C6166;
LABEL_24:
  v36._uint64_t countAndFlagsBits = v23;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t NavigationRequest.TargetedRequest.description.getter()
{
  uint64_t v48 = *(void *)(v0 + 8);
  uint64_t v49 = *(void *)v0;
  uint64_t v46 = *(void *)(v0 + 24);
  uint64_t v47 = *(void *)(v0 + 16);
  uint64_t v44 = *(void *)(v0 + 40);
  uint64_t v45 = *(void *)(v0 + 32);
  uint64_t v42 = *(void *)(v0 + 56);
  uint64_t v43 = *(void *)(v0 + 48);
  char v41 = *(unsigned char *)(v0 + 64);
  uint64_t v51 = *(void *)(v0 + 80);
  uint64_t v52 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v50 = *(void *)(v0 + 88);
  unint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(v0 + 152);
  uint64_t v6 = *(void *)(v0 + 160);
  unint64_t v8 = *(void *)(v0 + 168);
  uint64_t v9 = *(void *)(v0 + 176);
  uint64_t v53 = *(void *)(v0 + 184);
  uint64_t v60 = *(void *)(v0 + 200);
  uint64_t v62 = *(void *)(v0 + 192);
  uint64_t v58 = *(void *)(v0 + 216);
  uint64_t v59 = *(void *)(v0 + 208);
  uint64_t v56 = *(void *)(v0 + 232);
  uint64_t v57 = *(void *)(v0 + 224);
  uint64_t v55 = *(void *)(v0 + 240);
  int v54 = *(unsigned __int8 *)(v0 + 248);
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  strcpy((char *)v63, "Request for ");
  BYTE5(v63[1]) = 0;
  HIWORD(v63[1]) = -5120;
  if (v8 >> 1 == 0xFFFFFFFF) {
    uint64_t v10 = v52;
  }
  else {
    uint64_t v10 = v4;
  }
  if (v8 >> 1 == 0xFFFFFFFF) {
    uint64_t v11 = v51;
  }
  else {
    uint64_t v11 = v5;
  }
  if (v8 >> 1 == 0xFFFFFFFF) {
    uint64_t v12 = v50;
  }
  else {
    uint64_t v12 = v7;
  }
  if (v8 >> 1 == 0xFFFFFFFF) {
    uint64_t v13 = v1;
  }
  else {
    uint64_t v13 = v6;
  }
  if (v8 >> 1 == 0xFFFFFFFF) {
    unint64_t v14 = v2;
  }
  else {
    unint64_t v14 = v8;
  }
  if (v8 >> 1 == 0xFFFFFFFF) {
    uint64_t v15 = v3;
  }
  else {
    uint64_t v15 = v9;
  }
  if (!(v14 >> 62))
  {
    uint64_t v16 = NavigationState.StackContent.Key.debugDescription.getter(v10, v11);
    goto LABEL_23;
  }
  if (v14 >> 62 == 1)
  {
    v63[2] = v10;
    v63[3] = v11;
    v63[4] = v12;
    v63[5] = v13;
    char v64 = v14 & 1;
    uint64_t v65 = v15;
    uint64_t v16 = NavigationState.ListKey.description.getter();
LABEL_23:
    unint64_t v18 = v17;
    goto LABEL_25;
  }
  unint64_t v18 = 0xE500000000000000;
  uint64_t v16 = 0x74696C7073;
LABEL_25:
  uint64_t v19 = v62;
  unint64_t v20 = v18;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 8250;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  uint64_t v22 = v53;
  uint64_t v23 = v62;
  uint64_t v25 = v59;
  uint64_t v24 = v60;
  uint64_t v26 = v60;
  uint64_t v27 = v59;
  uint64_t v29 = v57;
  uint64_t v28 = v58;
  uint64_t v30 = v58;
  uint64_t v31 = v57;
  uint64_t v33 = v55;
  uint64_t v32 = v56;
  uint64_t v34 = v56;
  uint64_t v35 = v55;
  unsigned __int8 v36 = v54;
  char v37 = v54;
  if (v54 == 255)
  {
    uint64_t v27 = v46;
    uint64_t v31 = v44;
    uint64_t v30 = v45;
    uint64_t v35 = v42;
    uint64_t v34 = v43;
    outlined copy of NavigationRequest.Action(v49, v48, v47, v46, v45, v44, v43, v42, v41);
    unsigned __int8 v36 = -1;
    uint64_t v33 = v55;
    uint64_t v32 = v56;
    uint64_t v29 = v57;
    uint64_t v28 = v58;
    uint64_t v25 = v59;
    uint64_t v24 = v60;
    uint64_t v22 = v49;
    uint64_t v23 = v48;
    uint64_t v26 = v47;
    char v37 = v41;
    uint64_t v19 = v62;
  }
  uint64_t v61 = v22;
  uint64_t v38 = v23;
  outlined copy of NavigationRequest.Action?(v53, v19, v24, v25, v28, v29, v32, v33, v36);
  v39._uint64_t countAndFlagsBits = NavigationRequest.Action.description.getter();
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  outlined consume of NavigationRequest.Action(v61, v38, v26, v27, v30, v31, v34, v35, v37);
  return v63[0];
}

uint64_t NavigationRequest.Action.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  uint64_t result = 0xD000000000000017;
  switch(*((unsigned char *)v0 + 64))
  {
    case 1:
      return 0x68746150746573;
    case 2:
      swift_retain();
      swift_retain();
      swift_retain();
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)v25, "setSelection: ");
      HIBYTE(v25[1]) = -18;
      type metadata accessor for Binding<Int>(0, &lazy cache variable for type metadata for Binding<AnyListSelection>, (uint64_t)&type metadata for AnyListSelection, MEMORY[0x1E4F41638]);
      MEMORY[0x18C113DA0](&v24);
      uint64_t v6 = v24;
      _StringGuts.grow(_:)(20);
      uint64_t v7 = swift_bridgeObjectRelease();
      v8._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 152))(v7);
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._uint64_t countAndFlagsBits = 0xD000000000000012;
      v9._object = (void *)0x800000018833CA10;
      String.append(_:)(v9);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return v25[0];
    case 3:
      _StringGuts.grow(_:)(62);
      v10._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
      v10._object = (void *)0x8000000188340D50;
      String.append(_:)(v10);
      uint64_t v11 = type metadata accessor for NavigationDestinationResolverBase();
      v12._uint64_t countAndFlagsBits = MEMORY[0x18C115B70](v1, v11);
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._uint64_t countAndFlagsBits = 0x706564202020200ALL;
      v13._object = (void *)0xEC000000203A6874;
      String.append(_:)(v13);
      v25[0] = v2;
      v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._uint64_t countAndFlagsBits = 0x616572202020200ALL;
      v15._object = (void *)0xED0000203A726564;
      String.append(_:)(v15);
      v16._uint64_t countAndFlagsBits = v3;
      v16._object = (void *)v4;
      String.append(_:)(v16);
      goto LABEL_8;
    case 4:
      unint64_t v17 = v3 >> 8;
      _StringGuts.grow(_:)(32);
      unint64_t v18 = 0xD00000000000001ELL;
      uint64_t v19 = "updatePreferredCompactColumn: ";
      goto LABEL_7;
    case 5:
      unint64_t v17 = v3 >> 8;
      _StringGuts.grow(_:)(31);
      unint64_t v18 = 0xD00000000000001DLL;
      uint64_t v19 = "updateRequiredCompactColumn: ";
LABEL_7:
      unint64_t v20 = (unint64_t)(v19 - 32) | 0x8000000000000000;
      String.append(_:)(*(Swift::String *)&v18);
      LOBYTE(v25[0]) = v17;
      _print_unlocked<A, B>(_:_:)();
LABEL_8:
      uint64_t result = 0;
      break;
    case 6:
      uint64_t result = 0x746150646E756F62;
      break;
    case 7:
      uint64_t result = 0xD000000000000014;
      break;
    case 8:
      uint64_t result = 0x43676E6974696465;
      break;
    case 9:
      uint64_t result = 7368560;
      break;
    case 0xA:
    case 0xD:
      uint64_t result = 0x56746E6573657270;
      break;
    case 0xB:
      uint64_t result = 0xD000000000000010;
      break;
    case 0xC:
      uint64_t result = 0x526563616C706572;
      break;
    case 0xE:
      uint64_t result = 0x6956657461647075;
      break;
    case 0xF:
    case 0x11:
      uint64_t result = 0xD000000000000012;
      break;
    case 0x10:
      uint64_t result = 0xD000000000000014;
      break;
    case 0x12:
      uint64_t result = 0xD00000000000001BLL;
      break;
    case 0x13:
      uint64_t result = 0xD00000000000001BLL;
      break;
    case 0x14:
      uint64_t result = 0xD000000000000018;
      break;
    case 0x15:
      uint64_t result = 0xD00000000000001DLL;
      break;
    case 0x16:
      uint64_t v21 = v0[4];
      uint64_t v22 = v0[7] | v0[6] | v0[5];
      uint64_t result = 0xD000000000000011;
      if (v3 | v2 | v1 | v4 | v22 | v21)
      {
        unint64_t v23 = v3 | v2 | v4 | v22 | v21;
        if (v1 != 1 || v23)
        {
          if (v1 != 2 || v23)
          {
            if (v1 != 3 || v23)
            {
              if (v1 != 4 || v23 != 0) {
                uint64_t result = 0xD000000000000017;
              }
            }
            else
            {
              uint64_t result = 0x6C65537261656C63;
            }
          }
          else
          {
            uint64_t result = 0xD000000000000016;
          }
        }
        else
        {
          uint64_t result = 0x6F6F527465736572;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined init with take of NavigationState.StackContent.Key?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<Int>(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18815DCC4()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t destroy for NavigationRequest.TargetedRequest(uint64_t a1)
{
  outlined consume of NavigationRequest.Action(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  uint64_t result = swift_release();
  if (*(unsigned __int8 *)(a1 + 248) != 255) {
    return outlined consume of NavigationRequest.Action(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)(a1 + 200), *(void *)(a1 + 208), *(void *)(a1 + 216), *(void *)(a1 + 224), *(void *)(a1 + 232), *(void *)(a1 + 240), *(unsigned char *)(a1 + 248));
  }
  return result;
}

uint64_t initializeWithCopy for NavigationRequest.TargetedRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v24 = *(unsigned char *)(a2 + 64);
  outlined copy of NavigationRequest.Action(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v24);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v24;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  int v12 = *(unsigned __int8 *)(a2 + 248);
  swift_retain();
  if (v12 == 255)
  {
    long long v21 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v21;
    *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
    long long v22 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v22;
  }
  else
  {
    uint64_t v13 = *(void *)(a2 + 184);
    uint64_t v14 = *(void *)(a2 + 192);
    uint64_t v15 = *(void *)(a2 + 200);
    uint64_t v16 = *(void *)(a2 + 208);
    uint64_t v17 = *(void *)(a2 + 216);
    uint64_t v18 = *(void *)(a2 + 224);
    uint64_t v20 = *(void *)(a2 + 232);
    uint64_t v19 = *(void *)(a2 + 240);
    outlined copy of NavigationRequest.Action(v13, v14, v15, v16, v17, v18, v20, v19, v12);
    *(void *)(a1 + 184) = v13;
    *(void *)(a1 + 192) = v14;
    *(void *)(a1 + 200) = v15;
    *(void *)(a1 + 208) = v16;
    *(void *)(a1 + 216) = v17;
    *(void *)(a1 + 224) = v18;
    *(void *)(a1 + 232) = v20;
    *(void *)(a1 + 240) = v19;
    *(unsigned char *)(a1 + 248) = v12;
  }
  return a1;
}

uint64_t assignWithCopy for NavigationRequest.TargetedRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v60 = *(unsigned char *)(a2 + 64);
  outlined copy of NavigationRequest.Action(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v60);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  char v20 = *(unsigned char *)(a1 + 64);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v60;
  outlined consume of NavigationRequest.Action(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  long long v21 = *(_OWORD *)(a2 + 72);
  long long v22 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v22;
  *(_OWORD *)(a1 + 72) = v21;
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_retain();
  swift_release();
  long long v23 = *(_OWORD *)(a2 + 136);
  long long v24 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v24;
  *(_OWORD *)(a1 + 136) = v23;
  uint64_t v25 = (_OWORD *)(a1 + 184);
  uint64_t v26 = (_OWORD *)(a2 + 184);
  int v27 = *(unsigned __int8 *)(a2 + 248);
  if (*(unsigned __int8 *)(a1 + 248) == 255)
  {
    if (v27 == 255)
    {
      *uint64_t v25 = *v26;
      long long v56 = *(_OWORD *)(a2 + 200);
      long long v57 = *(_OWORD *)(a2 + 216);
      long long v58 = *(_OWORD *)(a2 + 232);
      *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
      *(_OWORD *)(a1 + 216) = v57;
      *(_OWORD *)(a1 + 232) = v58;
      *(_OWORD *)(a1 + 200) = v56;
    }
    else
    {
      uint64_t v45 = *(void *)(a2 + 184);
      uint64_t v46 = *(void *)(a2 + 192);
      uint64_t v47 = *(void *)(a2 + 200);
      uint64_t v48 = *(void *)(a2 + 208);
      uint64_t v49 = *(void *)(a2 + 216);
      uint64_t v50 = *(void *)(a2 + 224);
      uint64_t v52 = *(void *)(a2 + 232);
      uint64_t v51 = *(void *)(a2 + 240);
      outlined copy of NavigationRequest.Action(v45, v46, v47, v48, v49, v50, v52, v51, v27);
      *(void *)(a1 + 184) = v45;
      *(void *)(a1 + 192) = v46;
      *(void *)(a1 + 200) = v47;
      *(void *)(a1 + 208) = v48;
      *(void *)(a1 + 216) = v49;
      *(void *)(a1 + 224) = v50;
      *(void *)(a1 + 232) = v52;
      *(void *)(a1 + 240) = v51;
      *(unsigned char *)(a1 + 248) = v27;
    }
  }
  else if (v27 == 255)
  {
    outlined destroy of NavigationRequest.Action(a1 + 184);
    *uint64_t v25 = *v26;
    long long v54 = *(_OWORD *)(a2 + 216);
    long long v53 = *(_OWORD *)(a2 + 232);
    long long v55 = *(_OWORD *)(a2 + 200);
    *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
    *(_OWORD *)(a1 + 216) = v54;
    *(_OWORD *)(a1 + 232) = v53;
    *(_OWORD *)(a1 + 200) = v55;
  }
  else
  {
    uint64_t v28 = *(void *)(a2 + 184);
    uint64_t v29 = *(void *)(a2 + 192);
    uint64_t v30 = *(void *)(a2 + 200);
    uint64_t v31 = *(void *)(a2 + 208);
    uint64_t v32 = *(void *)(a2 + 216);
    uint64_t v33 = *(void *)(a2 + 224);
    uint64_t v35 = *(void *)(a2 + 232);
    uint64_t v34 = *(void *)(a2 + 240);
    outlined copy of NavigationRequest.Action(v28, v29, v30, v31, v32, v33, v35, v34, v27);
    uint64_t v36 = *(void *)(a1 + 184);
    uint64_t v37 = *(void *)(a1 + 192);
    uint64_t v38 = *(void *)(a1 + 200);
    uint64_t v39 = *(void *)(a1 + 208);
    uint64_t v40 = *(void *)(a1 + 216);
    uint64_t v41 = *(void *)(a1 + 224);
    uint64_t v42 = *(void *)(a1 + 232);
    uint64_t v43 = *(void *)(a1 + 240);
    char v44 = *(unsigned char *)(a1 + 248);
    *(void *)(a1 + 184) = v28;
    *(void *)(a1 + 192) = v29;
    *(void *)(a1 + 200) = v30;
    *(void *)(a1 + 208) = v31;
    *(void *)(a1 + 216) = v32;
    *(void *)(a1 + 224) = v33;
    *(void *)(a1 + 232) = v35;
    *(void *)(a1 + 240) = v34;
    *(unsigned char *)(a1 + 248) = v27;
    outlined consume of NavigationRequest.Action(v36, v37, v38, v39, v40, v41, v42, v43, v44);
  }
  return a1;
}

uint64_t assignWithTake for NavigationRequest.TargetedRequest(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 64);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  char v13 = *(unsigned char *)(a1 + 64);
  long long v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  long long v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  *(unsigned char *)(a1 + 64) = v4;
  outlined consume of NavigationRequest.Action(v5, v6, v7, v8, v9, v10, v11, v12, v13);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_release();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  int v16 = *(unsigned __int8 *)(a1 + 248);
  if (v16 == 255) {
    goto LABEL_5;
  }
  int v17 = *(unsigned __int8 *)(a2 + 248);
  if (v17 == 255)
  {
    outlined destroy of NavigationRequest.Action(a1 + 184);
LABEL_5:
    long long v26 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v26;
    *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
    long long v27 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v27;
    return a1;
  }
  uint64_t v18 = *(void *)(a1 + 184);
  uint64_t v19 = *(void *)(a1 + 192);
  uint64_t v20 = *(void *)(a1 + 200);
  uint64_t v21 = *(void *)(a1 + 208);
  uint64_t v22 = *(void *)(a1 + 216);
  uint64_t v23 = *(void *)(a1 + 224);
  uint64_t v24 = *(void *)(a1 + 232);
  uint64_t v25 = *(void *)(a1 + 240);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(unsigned char *)(a1 + 248) = v17;
  outlined consume of NavigationRequest.Action(v18, v19, v20, v21, v22, v23, v24, v25, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationRequest.TargetedRequest(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 249)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 104) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for NavigationRequest.TargetedRequest(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 248) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 249) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(void *)(a1 + 104) = 2 * -a2;
      *(void *)(a1 + 112) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 249) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationRequest.TargetedRequest()
{
  return &type metadata for NavigationRequest.TargetedRequest;
}

uint64_t destroy for NavigationRequest.Action(uint64_t a1)
{
  return outlined consume of NavigationRequest.Action(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
}

uint64_t initializeWithCopy for NavigationRequest.Action(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  char v11 = *(unsigned char *)(a2 + 64);
  outlined copy of NavigationRequest.Action(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  return a1;
}

uint64_t assignWithCopy for NavigationRequest.Action(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  char v11 = *(unsigned char *)(a2 + 64);
  outlined copy of NavigationRequest.Action(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  char v20 = *(unsigned char *)(a1 + 64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  outlined consume of NavigationRequest.Action(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for NavigationRequest.Action(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 64);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  char v12 = *(unsigned char *)(a1 + 64);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 64) = v3;
  outlined consume of NavigationRequest.Action(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationRequest.Action(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xEA && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 234);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 0x16) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationRequest.Action(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xE9)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)double result = a2 - 234;
    if (a3 >= 0xEA) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xEA) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for NavigationRequest.Action(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 64) <= 0x15u) {
    return *(unsigned __int8 *)(a1 + 64);
  }
  else {
    return (*(_DWORD *)a1 + 22);
  }
}

uint64_t destructiveInjectEnumTag for NavigationRequest.Action(uint64_t result, unsigned int a2)
{
  if (a2 >= 0x16)
  {
    *(void *)double result = a2 - 22;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(void *)(result + 56) = 0;
    LOBYTE(a2) = 22;
  }
  *(unsigned char *)(result + 64) = a2;
  return result;
}

uint64_t sub_18815E628()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static NavigationRequest.setInitialPossibilities<A>(_:stack:)(uint64_t a1)
{
  return closure #1 in static NavigationRequest.setInitialPossibilities<A>(_:stack:)(a1, v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80)), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t View.badge(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (a1) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = 0x1FFFFFFFELL;
  }
  return BadgedView.init(badgeLabel:content:)(a1, 0, v2, 0, partial apply for closure #1 in View.badge(_:), a2);
}

uint64_t View.badge(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (a4) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (a4) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = 0;
  }
  if (a4) {
    unint64_t v9 = a3 & 1 | 0x8000000000000000;
  }
  else {
    unint64_t v9 = 0x1FFFFFFFELL;
  }
  outlined copy of Text?(a1, a2, a3, a4);
  return BadgedView.init(badgeLabel:content:)(v7, v8, v9, a4, partial apply for closure #2 in View.badge(_:), a5);
}

uint64_t closure #1 in View.badge(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a2);
}

uint64_t partial apply for closure #2 in View.badge(_:)()
{
  return closure #1 in View.badge(_:)(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

uint64_t View.badge(_:)@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = a1;
  if (a1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v4 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v2 = v5;
    uint64_t v7 = v6;
    char v9 = v8 & 1;
  }
  else
  {
    uint64_t v4 = 0;
    char v9 = 0;
    uint64_t v7 = 0;
  }
  View.badge(_:)(v4, v2, v9, v7, a2);

  return outlined consume of Text?(v4, v2, v9, v7);
}

uint64_t View.badge<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  void v12[2] = a1;
  _OWORD v12[3] = a2;
  v12[4] = a3;
  v12[5] = a4;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in View.badge<A>(_:), (uint64_t)v12, MEMORY[0x1E4FBC248], MEMORY[0x1E4F41420], v6, (uint64_t)&v13);
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  char v9 = v15;
  uint64_t v10 = v16;
  View.badge(_:)(v13, v14, v15, v16, a5);
  return outlined consume of Text?(v7, v8, v9, v10);
}

uint64_t implicit closure #1 in View.badge<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for implicit closure #1 in View.badge<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return implicit closure #1 in View.badge<A>(_:)(a1, a2);
}

void Scene.badge(_:)()
{
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  Scene.badge(_:)();
}

void Scene.badge<A>(_:)()
{
}

uint64_t sub_18815EC24()
{
  type metadata accessor for BadgedView();

  return swift_getWitnessTable();
}

uint64_t sub_18815EC6C()
{
  type metadata accessor for BadgedView();

  return swift_getWitnessTable();
}

uint64_t sub_18815ECB8()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _PreferenceWritingModifier<BadgePreferenceKey>()
{
  if (!lazy cache variable for type metadata for _PreferenceWritingModifier<BadgePreferenceKey>)
  {
    unint64_t v0 = type metadata accessor for _PreferenceWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceWritingModifier<BadgePreferenceKey>);
    }
  }
}

uint64_t sub_18815ED84()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for BadgePreferenceKey()
{
  return &type metadata for BadgePreferenceKey;
}

void *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance BadgePreferenceKey(void *result, void *(*a2)(long long *__return_ptr))
{
  uint64_t v2 = result;
  uint64_t v3 = result[3];
  if (v3)
  {
    uint64_t v4 = result[2];
    long long v5 = *(_OWORD *)result;
  }
  else
  {
    uint64_t result = a2(&v6);
    long long v5 = v6;
    uint64_t v4 = v7;
    uint64_t v3 = v8;
  }
  *(_OWORD *)uint64_t v2 = v5;
  v2[2] = v4;
  v2[3] = v3;
  return result;
}

uint64_t ScalarDeceleration.iter(_:minValue:maxValue:)(uint64_t a1, char a2, uint64_t a3, char a4, double a5)
{
  double v6 = *(double *)(v5 + 56);
  if (v6 == 0.0)
  {
    if ((a2 & 1) == 0)
    {
      double v7 = *(double *)(v5 + 8);
      if (v7 < *(double *)&a1
        && *(double *)(v5 + 16) * *(double *)(v5 + 24) < *(double *)&a1 - v7 + *(double *)&a1 - v7)
      {
        uint64_t v8 = (unsigned char *)(v5 + 80);
        if ((*(unsigned char *)(v5 + 80) & 1) == 0)
        {
          double v6 = *(double *)(v5 + 40);
          uint64_t v9 = *(void *)(v5 + 48);
          *(double *)(v5 + 64) = *(double *)&a1;
LABEL_12:
          *(double *)(v5 + 56) = v6;
          *(void *)(v5 + 24) = v9;
          goto LABEL_13;
        }
        goto LABEL_13;
      }
    }
    if ((a4 & 1) == 0)
    {
      double v10 = *(double *)(v5 + 8);
      if (v10 > *(double *)&a3
        && *(double *)&a3 - v10 + *(double *)&a3 - v10 < *(double *)(v5 + 16) * *(double *)(v5 + 24))
      {
        uint64_t v8 = (unsigned char *)(v5 + 80);
        if ((*(unsigned char *)(v5 + 80) & 1) == 0)
        {
          double v6 = *(double *)(v5 + 40);
          uint64_t v9 = *(void *)(v5 + 48);
          *(double *)(v5 + 64) = *(double *)&a3;
          goto LABEL_12;
        }
LABEL_13:
        *uint64_t v8 = 1;
      }
    }
  }
  double v11 = *(double *)v5;
  if (*(double *)v5 >= a5)
  {
    double v13 = *(double *)(v5 + 16);
  }
  else
  {
    double v12 = *(double *)(v5 + 8);
    double v13 = *(double *)(v5 + 16);
    double v14 = *(double *)(v5 + 32);
    do
    {
      double v15 = v13 + v14 * 0.00416666667;
      double v12 = v12 + v15 * 0.00833333333;
      double v14 = v6 * (*(double *)(v5 + 64) - v12) - *(double *)(v5 + 24) * v15;
      double v13 = v15 + v14 * 0.00416666667;
      double v11 = v11 + 0.00833333333;
    }
    while (v11 < a5);
    *(double *)(v5 + 8) = v12;
    *(double *)(v5 + 16) = v13;
    *(double *)(v5 + 32) = v14;
    *(double *)uint64_t v5 = v11;
  }
  if (fabs(v13) >= *(double *)(v5 + 72)) {
    return 0;
  }
  if (v6 == 0.0)
  {
    *(double *)(v5 + 8) = round(*(double *)(v5 + 8));
    return 1;
  }
  double v17 = *(double *)(v5 + 64);
  if (vabdd_f64(v17, *(double *)(v5 + 8)) >= 0.5) {
    return 0;
  }
  *(double *)(v5 + 8) = v17;
  *(void *)(v5 + 16) = 0;
  uint64_t result = 1;
  *(void *)(v5 + 32) = 0;
  return result;
}

double specialized Deceleration2D.init(time:offset:velocity:drag:bounceStiffness:bounceDrag:stoppedVelocity:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v35 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 2, 0);
  uint64_t v22 = v35;
  unint64_t v24 = *(void *)(v35 + 16);
  unint64_t v23 = *(void *)(v35 + 24);
  int64_t v25 = v23 >> 1;
  unint64_t v26 = v24 + 1;
  if (v23 >> 1 <= v24)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1);
    uint64_t v22 = v35;
    unint64_t v23 = *(void *)(v35 + 24);
    int64_t v25 = v23 >> 1;
  }
  double v27 = -a6;
  *(void *)(v22 + 16) = v26;
  uint64_t v28 = v22 + 88 * v24;
  *(double *)(v28 + 32) = a1;
  *(double *)(v28 + 40) = a2;
  *(double *)(v28 + 48) = a4;
  *(double *)(v28 + 56) = a6;
  *(double *)(v28 + 64) = -(a6 * a4);
  *(double *)(v28 + 72) = a7;
  *(double *)(v28 + 80) = a8;
  *(void *)(v28 + 88) = 0;
  *(void *)(v28 + 96) = 0;
  *(void *)(v28 + 104) = a17;
  *(unsigned char *)(v28 + 112) = 0;
  int64_t v29 = v24 + 2;
  if (v25 < v29)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v29, 1);
    uint64_t v22 = v35;
  }
  double result = v27 * a5;
  *(void *)(v22 + 16) = v29;
  uint64_t v31 = v22 + 88 * v26;
  *(double *)(v31 + 32) = a1;
  *(double *)(v31 + 40) = a3;
  *(double *)(v31 + 48) = a5;
  *(double *)(v31 + 56) = a6;
  *(double *)(v31 + 64) = v27 * a5;
  *(double *)(v31 + 72) = a7;
  *(double *)(v31 + 80) = a8;
  *(void *)(v31 + 88) = 0;
  *(void *)(v31 + 96) = 0;
  *(void *)(v31 + 104) = a17;
  *(unsigned char *)(v31 + 112) = 0;
  return result;
}

uint64_t getEnumTagSinglePayload for ScalarDeceleration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 80);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScalarDeceleration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 80) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScalarDeceleration()
{
  return &type metadata for ScalarDeceleration;
}

ValueMetadata *type metadata accessor for Deceleration2D()
{
  return &type metadata for Deceleration2D;
}

uint64_t View.controlGroupStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  double v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ControlGroupStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  double v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

unint64_t instantiation function for generic protocol witness table for ControlGroupStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in ControlGroupStyleConfiguration.Content()
{
  return &protocol witness table for ControlGroupStyleConfiguration.Content;
}

unint64_t instantiation function for generic protocol witness table for ControlGroupStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in ControlGroupStyleConfiguration.Label()
{
  return &protocol witness table for ControlGroupStyleConfiguration.Label;
}

uint64_t dispatch thunk of ControlGroupStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for ControlGroupStyleConfiguration.Content()
{
  return &type metadata for ControlGroupStyleConfiguration.Content;
}

ValueMetadata *type metadata accessor for ControlGroupStyleConfiguration.Label()
{
  return &type metadata for ControlGroupStyleConfiguration.Label;
}

uint64_t sub_18815F51C()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for ResolvedControlGroup()
{
  return &type metadata for ResolvedControlGroup;
}

uint64_t getEnumTagSinglePayload for ControlGroupStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ControlGroupStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18815F910);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in ControlGroupStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ResolvedControlGroup.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_allocObject();
  *(unsigned char *)(v2 + 16) = 2;
  if (one-time initialization token for contain != -1) {
    swift_once();
  }
  uint64_t v3 = static AccessibilityChildBehavior.contain;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for MutableBox<AccessibilityAttachment>();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v7;
  *(void *)(v4 + 24) = v8;
  uint64_t v5 = qword_1ED431E38;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v4 + 16, v5, v5);
  swift_endAccess();
  swift_release();
  uint64_t result = swift_release();
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = _s7SwiftUI4ViewPAAE36accessibilityShowsLargeContentVieweryQrAA013AccessibilityfgC8BehaviorOFyAA0ifgC4TreeOzcfU_TA_0;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v3;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedControlGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedControlGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedControlGroup()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance ResolvedControlGroup@<X0>(uint64_t a1@<X8>)
{
  return ResolvedControlGroup.body.getter(a1);
}

uint64_t ControlGroupStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  unsigned int v10 = (char *)&v13 - v9;
  (*(void (**)(double))(v2 + 24))(v8);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v6);
  int v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v6, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, AssociatedTypeWitness);
}

unint64_t lazy protocol witness table accessor for type ControlGroupStyleModifier<AutomaticControlGroupStyle> and conformance ControlGroupStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ControlGroupStyleModifier<AutomaticControlGroupStyle> and conformance ControlGroupStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type ControlGroupStyleModifier<AutomaticControlGroupStyle> and conformance ControlGroupStyleModifier<A>)
  {
    type metadata accessor for ControlGroupStyleModifier<AutomaticControlGroupStyle>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlGroupStyleModifier<AutomaticControlGroupStyle> and conformance ControlGroupStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for ControlGroupStyleModifier<AutomaticControlGroupStyle>()
{
  if (!lazy cache variable for type metadata for ControlGroupStyleModifier<AutomaticControlGroupStyle>)
  {
    lazy protocol witness table accessor for type AutomaticControlGroupStyle and conformance AutomaticControlGroupStyle();
    unint64_t v0 = type metadata accessor for ControlGroupStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ControlGroupStyleModifier<AutomaticControlGroupStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticControlGroupStyle and conformance AutomaticControlGroupStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomaticControlGroupStyle and conformance AutomaticControlGroupStyle;
  if (!lazy protocol witness table cache variable for type AutomaticControlGroupStyle and conformance AutomaticControlGroupStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticControlGroupStyle and conformance AutomaticControlGroupStyle);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ControlGroupStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ControlGroupStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedControlGroup()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18815FFE4()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, AccessibilityAttachmentModifier>();
    lazy protocol witness table accessor for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, AccessibilityAttachmentModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, AccessibilityAttachmentModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>)
  {
    type metadata accessor for ControlGroup<ControlGroupStyleConfiguration.Content>(255, (unint64_t *)&lazy cache variable for type metadata for ControlGroup<ControlGroupStyleConfiguration.Content>, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Content, (uint64_t)&protocol witness table for ControlGroupStyleConfiguration.Content, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ControlGroup);
    type metadata accessor for ControlGroup<ControlGroupStyleConfiguration.Content>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>, (uint64_t)&type metadata for AccessibilityLargeContentViewTree.Key, (uint64_t)&protocol witness table for AccessibilityLargeContentViewTree.Key, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>);
    }
  }
}

void type metadata accessor for ControlGroup<ControlGroupStyleConfiguration.Content>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>();
    lazy protocol witness table accessor for type ControlGroup<ControlGroupStyleConfiguration.Content> and conformance ControlGroup<A>();
    lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key> and conformance _PreferenceTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1881602AC()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t static EmptyControlWidgetTemplate._controlType.getter()
{
  return MEMORY[0x1E4FBC248];
}

_UNKNOWN **associated type witness table accessor for ControlWidgetTemplate.Body : ControlWidgetTemplate in EmptyControlWidgetTemplate()
{
  return &protocol witness table for Never;
}

uint64_t protocol witness for static ControlWidgetTemplate._controlType.getter in conformance EmptyControlWidgetTemplate()
{
  return MEMORY[0x1E4FBC248];
}

ValueMetadata *type metadata accessor for EmptyControlWidgetTemplate()
{
  return &type metadata for EmptyControlWidgetTemplate;
}

uint64_t specialized static EnvironmentKey<>._valuesEqual(_:_:)(int a1, int a2)
{
  unsigned int v2 = ((a2 & 0x10000) == 0) ^ ((a1 & 0x10000u) >> 16);
  if (((a2 & 0x100) == 0) == (unsigned __int16)(a1 & 0x100) >> 8) {
    unsigned int v2 = 0;
  }
  if (((a2 & 1) == 0) == (a1 & 1)) {
    unsigned int v2 = 0;
  }
  if (a2 == 2) {
    unsigned int v2 = 0;
  }
  if (a1 == 2) {
    return a2 == 2;
  }
  else {
    return v2;
  }
}

uint64_t specialized static EnvironmentKey<>._valuesEqual(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (!a2)
  {
    if (!a6) {
      return 1;
    }
    goto LABEL_10;
  }
  if (!a6)
  {
    swift_bridgeObjectRetain();
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (a1 == a5 && a2 == a6)
  {
    if (a3 == a7) {
      return a4 == a8;
    }
    return 0;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if ((v13 & 1) != 0 && a3 == a7) {
    return a4 == a8;
  }
  return result;
}

void *KeyboardShortcut.init(_:modifiers:)@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result[1];
  *(void *)a3 = *result;
  *(void *)(a3 + 8) = v3;
  *(void *)(a3 + 16) = a2;
  *(unsigned char *)(a3 + 24) = 0;
  return result;
}

uint64_t EnvironmentValues.keyboardShortcut.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>, (uint64_t)&type metadata for ButtonKeyboardShortcutKey, (uint64_t)&protocol witness table for ButtonKeyboardShortcutKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>, (uint64_t)&type metadata for ButtonKeyboardShortcutKey, (uint64_t)&protocol witness table for ButtonKeyboardShortcutKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void *KeyboardShortcut.init(_:modifiers:localization:)@<X0>(void *result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = result[1];
  char v5 = *a3;
  *(void *)a4 = *result;
  *(void *)(a4 + 8) = v4;
  *(void *)(a4 + 16) = a2;
  *(unsigned char *)(a4 + 24) = v5;
  return result;
}

SwiftUI::KeyEquivalent __swiftcall KeyEquivalent.init(_:)(SwiftUI::KeyEquivalent result)
{
  SwiftUI::KeyEquivalent *v1 = result;
  return result;
}

uint64_t View.keyboardShortcut(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3 = *((void *)a1 + 2);
  char v4 = *((unsigned char *)a1 + 24);
  long long v6 = *a1;
  uint64_t v7 = v3;
  char v8 = v4;
  return View.keyboardShortcut(_:)((uint64_t *)&v6, a2, a3);
}

uint64_t View.keyboardShortcut(_:modifiers:localization:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5 = a1[1];
  char v6 = *a3;
  v8[0] = *a1;
  v8[1] = v5;
  _OWORD v8[2] = a2;
  char v9 = v6;
  return View.keyboardShortcut(_:)(v8, a4, a5);
}

void static KeyboardShortcut.Localization.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void Scene.keyboardShortcut(_:modifiers:localization:)()
{
}

void Scene.keyboardShortcut(_:)()
{
}

void static KeyboardShortcut.Localization.withoutMirroring.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static KeyboardShortcut.Localization.custom.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static KeyboardShortcut.cancelAction.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 27;
  *(void *)(a1 + 8) = 0xE100000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
}

uint64_t KeyboardShortcut.key.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t KeyboardShortcut.key.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = v2;
  v1[1] = v3;
  return result;
}

uint64_t (*KeyboardShortcut.key.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t KeyboardShortcut.modifiers.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t KeyboardShortcut.modifiers.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*KeyboardShortcut.modifiers.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void KeyboardShortcut.localization.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 24);
}

unsigned char *KeyboardShortcut.localization.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 24) = *result;
  return result;
}

uint64_t (*KeyboardShortcut.localization.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void static KeyEquivalent.escape.getter(void *a1@<X8>)
{
  *a1 = 27;
  a1[1] = 0xE100000000000000;
}

void static KeyEquivalent.delete.getter(void *a1@<X8>)
{
  *a1 = 8;
  a1[1] = 0xE100000000000000;
}

void static KeyEquivalent.deleteForward.getter(void *a1@<X8>)
{
  *a1 = 11050223;
  a1[1] = 0xA300000000000000;
}

void static KeyEquivalent.home.getter(void *a1@<X8>)
{
  *a1 = 11115759;
  a1[1] = 0xA300000000000000;
}

void static KeyEquivalent.end.getter(void *a1@<X8>)
{
  *a1 = 11246831;
  a1[1] = 0xA300000000000000;
}

void static KeyEquivalent.pageUp.getter(void *a1@<X8>)
{
  *a1 = 11312367;
  a1[1] = 0xA300000000000000;
}

void static KeyEquivalent.pageDown.getter(void *a1@<X8>)
{
  *a1 = 11377903;
  a1[1] = 0xA300000000000000;
}

void static KeyEquivalent.clear.getter(void *a1@<X8>)
{
  *a1 = 12164335;
  a1[1] = 0xA300000000000000;
}

void static KeyEquivalent.tab.getter(void *a1@<X8>)
{
  *a1 = 9;
  a1[1] = 0xE100000000000000;
}

void static KeyEquivalent.space.getter(void *a1@<X8>)
{
  *a1 = 32;
  a1[1] = 0xE100000000000000;
}

uint64_t KeyEquivalent.character.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t KeyEquivalent.character.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*KeyEquivalent.character.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t KeyEquivalent.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t static KeyEquivalent.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int KeyEquivalent.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance KeyEquivalent()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance KeyEquivalent()
{
  return String.hash(into:)();
}

unint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.SceneKeyboardShortcutsKey@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.SceneKeyboardShortcutsKey(uint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance ButtonKeyboardShortcutKey(uint64_t a1, uint64_t a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned char *)(a2 + 24));
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance HasKeyboardShortcut()
{
  lazy protocol witness table accessor for type HasKeyboardShortcut and conformance HasKeyboardShortcut();
  PropertyList.subscript.getter();
  return v1;
}

void KeyboardShortcut.hash(into:)()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 24);
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int KeyboardShortcut.hashValue.getter()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance KeyboardShortcut()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance KeyboardShortcut()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 24);
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance KeyboardShortcut()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t closure #1 in static KeyboardShortcutBindingBehavior._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeyboardShortcutBindingBehavior();
  uint64_t v5 = a1 + *(int *)(v4 + 36);
  void v9[2] = v4;
  void v9[3] = a2;
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v9[5];
}

uint64_t BindKeyboardShortcutItems.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for KeyboardShortcutBindingBehavior();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t BindKeyboardShortcutItems.shortcut.getter@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI16KeyboardShortcutVSgMaTm_0(0, &lazy cache variable for type metadata for KeyboardShortcut?, (uint64_t)&type metadata for KeyboardShortcut, MEMORY[0x1E4FBB718]);
  uint64_t Value = AGGraphGetValue();
  char v3 = *(unsigned char *)(Value + 24);
  *(void *)a1 = *(void *)Value;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
  *(unsigned char *)(a1 + 24) = v3;

  return swift_bridgeObjectRetain();
}

uint64_t BindKeyboardShortcutItems.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (id *)((char *)v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v9 = type metadata accessor for KeyboardShortcutBindingBehavior();
  uint64_t v65 = *(void *)(v9 - 8);
  uint64_t v66 = v9;
  MEMORY[0x1F4188790](v9);
  int v11 = (void *)((char *)v51 - v10);
  long long v12 = v1[7];
  long long v83 = v1[6];
  long long v84 = v12;
  int v85 = *((_DWORD *)v1 + 32);
  long long v13 = v1[3];
  long long v79 = v1[2];
  long long v80 = v13;
  long long v14 = v1[5];
  long long v81 = v1[4];
  long long v82 = v14;
  long long v15 = v1[1];
  long long v77 = *v1;
  long long v78 = v15;
  uint64_t v16 = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  *(void *)&long long v71 = v16;
  char v17 = PreferenceKeys.contains(_:)();
  swift_bridgeObjectRelease();
  if ((v17 & 1) == 0) {
    goto LABEL_9;
  }
  if (*(unsigned char *)AGGraphGetValue() != 1) {
    goto LABEL_9;
  }
  long long v74 = v83;
  long long v75 = v84;
  int v76 = v85;
  *(_OWORD *)uint64_t v73 = v79;
  *(_OWORD *)&v73[16] = v80;
  *(_OWORD *)&v73[32] = v81;
  *(_OWORD *)&v73[48] = v82;
  long long v71 = v77;
  long long v72 = v78;
  BindKeyboardShortcutItems.shortcut.getter((uint64_t)&v67);
  if (v68)
  {
    uint64_t v64 = v68;
    uint64_t v61 = v67;
    long long v63 = v69;
    int v62 = v70;
    int v18 = v85;
    if (v85 == *MEMORY[0x1E4F4E7A0])
    {
      uint64_t v19 = *((void *)&v77 + 1);
      int v58 = v78;
      uint64_t v57 = *((void *)&v78 + 1);
      int v56 = v79;
      uint64_t v55 = *((void *)&v79 + 1);
      long long v20 = v80;
      long long v59 = v81;
      long long v21 = v82;
      uint64_t v22 = v83;
      int v53 = BYTE12(v83);
      int v54 = DWORD2(v83);
      int v52 = v84;
      id v60 = (id)AGSubgraphGetCurrent();
      if (AGGraphGetCurrentAttribute() == v18) {
        __break(1u);
      }
      id v23 = (id)AGGraphGetAttributeSubgraph();
      AGSubgraphSetCurrent();

      v51[1] = v51;
      *(void *)&long long v71 = v19;
      DWORD2(v71) = v58;
      *(void *)&long long v72 = v57;
      DWORD2(v72) = v56;
      *(void *)uint64_t v73 = v55;
      *(_OWORD *)&v73[8] = v20;
      *(_OWORD *)&v73[24] = v59;
      *(_OWORD *)&v73[40] = v21;
      *(void *)&v73[56] = v22;
      LODWORD(v74) = v54;
      BYTE4(v74) = v53;
      DWORD2(v74) = v52;
      MEMORY[0x1F4188790](v24);
      long long v67 = &type metadata for TextPlatformItemListFlags;
      uint64_t v68 = v8;
      long long v69 = &protocol witness table for TextPlatformItemListFlags;
      uint64_t v70 = v7;
      uint64_t v25 = type metadata accessor for PlatformItemListGenerator();
      v51[-2] = v25;
      v51[-1] = swift_getWitnessTable();
      outlined retain of BindKeyboardShortcutItems<A>((uint64_t)&v77);
      _s7SwiftUI16KeyboardShortcutVSgMaTm_0(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E740]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v71, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v51[-4], v25, MEMORY[0x1E4FBC248], v26, MEMORY[0x1E4FBC278], v27);
      uint64_t v28 = (void *)v71;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();

      swift_release();
      int v18 = (int)v67;
      int64_t v29 = v60;
      AGSubgraphSetCurrent();

      *((_DWORD *)v2 + 32) = v18;
    }
    _s7SwiftUI16KeyboardShortcutVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<KeyboardShortcutBinding>, (uint64_t)&type metadata for KeyboardShortcutBinding, MEMORY[0x1E4FBBE00]);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_18834BB80;
    uint64_t v31 = *((void *)v2 + 1);
    int v32 = *((_DWORD *)v2 + 4);
    uint64_t v33 = *((void *)v2 + 3);
    int v34 = *((_DWORD *)v2 + 8);
    uint64_t v35 = *((void *)v2 + 5);
    int v36 = *((_DWORD *)v2 + 26);
    char v37 = *((unsigned char *)v2 + 108);
    LODWORD(v71) = *(_DWORD *)v2;
    *((void *)&v71 + 1) = v31;
    LODWORD(v72) = v32;
    *((void *)&v72 + 1) = v33;
    *(_DWORD *)uint64_t v73 = v34;
    *(void *)&v73[8] = v35;
    long long v38 = v2[4];
    *(_OWORD *)&v73[16] = v2[3];
    *(_OWORD *)&v73[32] = v38;
    *(_OWORD *)&v73[48] = v2[5];
    *(void *)&long long v74 = *((void *)v2 + 12);
    DWORD2(v74) = v36;
    BYTE12(v74) = v37;
    long long v75 = v2[7];
    int v76 = v18;
    BindKeyboardShortcutItems.modifier.getter((uint64_t)v11);
    uint64_t v40 = *v11;
    uint64_t v39 = v11[1];
    uint64_t v41 = *(void (**)(uint64_t *, uint64_t))(v65 + 8);
    swift_retain();
    v41(v11, v66);
    AGGraphGetValue();
    uint64_t v42 = swift_bridgeObjectRetain();
    PlatformItemList.mergedContentItem.getter(v42, (uint64_t)v6);
    swift_bridgeObjectRelease();
    id v43 = *v6;
    id v44 = *v6;
    _s7SwiftUI16PlatformItemListV0D0VWOhTm_3((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    if (v43)
    {
      id v45 = objc_msgSend(v44, sel_string);

      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v48 = v47;
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v48 = 0;
    }
    uint64_t v50 = v64;
    *(void *)(v30 + 32) = v61;
    *(void *)(v30 + 40) = v50;
    *(void *)(v30 + 48) = v63;
    *(unsigned char *)(v30 + 56) = v62;
    *(void *)(v30 + 64) = v40;
    *(void *)(v30 + 72) = v39;
    *(void *)(v30 + 80) = v46;
    *(void *)(v30 + 88) = v48;
    *(void *)&long long v71 = v30;
    _s7SwiftUI16KeyboardShortcutVSgMaTm_0(0, &lazy cache variable for type metadata for [KeyboardShortcutBinding], (uint64_t)&type metadata for KeyboardShortcutBinding, MEMORY[0x1E4FBB320]);
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_9:
    *(void *)&long long v71 = MEMORY[0x1E4FBC860];
    _s7SwiftUI16KeyboardShortcutVSgMaTm_0(0, &lazy cache variable for type metadata for [KeyboardShortcutBinding], (uint64_t)&type metadata for KeyboardShortcutBinding, MEMORY[0x1E4FBB320]);
    return AGGraphSetOutputValue();
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance KeyboardShortcutBinding()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 56);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v3) {
    String.hash(into:)();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance KeyboardShortcutBinding()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 56);
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v3)
  {
    String.hash(into:)();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance KeyboardShortcutBinding()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 56);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v3) {
    String.hash(into:)();
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance KeyboardShortcutBindingsKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in KeyEquivalent()
{
  return MEMORY[0x1E4FBAF88];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in KeyEquivalent()
{
  return MEMORY[0x1E4FBAF80];
}

ValueMetadata *type metadata accessor for KeyboardShortcut.Localization()
{
  return &type metadata for KeyboardShortcut.Localization;
}

uint64_t sub_188161C58()
{
  return swift_getWitnessTable();
}

uint64_t sub_188161D9C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

unsigned char *storeEnumTagSinglePayload for KeyboardShortcut.Localization(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x188161E70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyboardShortcut.Localization.Style()
{
  return &type metadata for KeyboardShortcut.Localization.Style;
}

uint64_t destroy for KeyboardShortcutBinding()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KeyboardShortcutBinding(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for KeyboardShortcutBinding(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for KeyboardShortcutBinding(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeBufferWithCopyOfBuffer for KeyboardShortcutBindingBehavior(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *a2;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    *a1 = v7;
    a1 = (void *)(v7 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = a2[1];
    *a1 = v7;
    a1[1] = v10;
    uint64_t v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    uint64_t v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    long long v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v13(v11, v12, v4);
  }
  return a1;
}

_OWORD *assignWithTake for KeyboardShortcutBindingBehavior(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyboardShortcutBindingBehavior(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 16) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for KeyboardShortcutBindingBehavior(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1881625E8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 16] & ~v9;
          long long v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v18 = a2 ^ 0x80000000;
            *((void *)a1 + 1) = 0;
          }
          else
          {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for ButtonKeyboardShortcutKey()
{
  return &type metadata for ButtonKeyboardShortcutKey;
}

unint64_t lazy protocol witness table accessor for type KeyboardShortcut.Localization.Style and conformance KeyboardShortcut.Localization.Style()
{
  unint64_t result = lazy protocol witness table cache variable for type KeyboardShortcut.Localization.Style and conformance KeyboardShortcut.Localization.Style;
  if (!lazy protocol witness table cache variable for type KeyboardShortcut.Localization.Style and conformance KeyboardShortcut.Localization.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyboardShortcut.Localization.Style and conformance KeyboardShortcut.Localization.Style);
  }
  return result;
}

uint64_t outlined retain of TableColumnCustomizationID?(uint64_t a1)
{
  return a1;
}

uint64_t specialized static KeyboardShortcutBinding.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a2 + 16);
  int v7 = *(unsigned __int8 *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    uint64_t result = 0;
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v11 & 1) == 0) {
      return result;
    }
  }
  if (v2 == v6 && v3 == v7)
  {
    uint64_t result = (v5 | v9) == 0;
    if (v5)
    {
      if (v9)
      {
        if (v4 == v8 && v5 == v9)
        {
          return 1;
        }
        else
        {
          return _stringCompareWithSmolCheck(_:_:expecting:)();
        }
      }
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SceneKeyboardShortcutsKey()
{
  return &type metadata for EnvironmentValues.SceneKeyboardShortcutsKey;
}

uint64_t destroy for BindKeyboardShortcutItems(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for BindKeyboardShortcutItems(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  return a1;
}

__n128 __swift_memcpy132_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for BindKeyboardShortcutItems(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  long long v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for BindKeyboardShortcutItems(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 132)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BindKeyboardShortcutItems(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 128) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 132) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 132) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyboardShortcutBindingsKey()
{
  return &type metadata for KeyboardShortcutBindingsKey;
}

uint64_t outlined retain of BindKeyboardShortcutItems<A>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return a1;
}

uint64_t outlined destroy of (Toolbar.UpdateContext?, Toolbar.UpdateContext?)(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for (Toolbar.UpdateContext?, Toolbar.UpdateContext?)(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void type metadata accessor for (Toolbar.UpdateContext?, Toolbar.UpdateContext?)(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    _s7SwiftUI16KeyboardShortcutVSgMaTm_0(255, a3, a4, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

ValueMetadata *type metadata accessor for TabCustomizationID()
{
  return &type metadata for TabCustomizationID;
}

uint64_t TabCustomizationID.Base.encode(to:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v25 = a3;
  int v26 = a4;
  uint64_t v24 = a2;
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDE0];
  type metadata accessor for KeyedEncodingContainer<TabCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabCustomizationID.Base.TransientCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys, (uint64_t)&unk_1ED429C28, MEMORY[0x1E4FBBDE0]);
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v22 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v19 - v7;
  type metadata accessor for KeyedEncodingContainer<TabCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabCustomizationID.Base.ExplicitCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys, (uint64_t)&unk_1ED429B98, v5);
  uint64_t v10 = v9;
  uint64_t v20 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unsigned int v12 = (char *)&v19 - v11;
  type metadata accessor for KeyedEncodingContainer<TabCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabCustomizationID.Base.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys, (uint64_t)&unk_1ED429B08, v5);
  uint64_t v14 = v13;
  uint64_t v23 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  unsigned int v16 = (char *)&v19 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v26)
  {
    char v28 = 1;
    lazy protocol witness table accessor for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v17 = v22;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v17);
  }
  else
  {
    char v27 = 0;
    lazy protocol witness table accessor for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v12, v10);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v16, v14);
}

uint64_t TabCustomizationID.encode(to:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  HIDWORD(v13) = a4;
  type metadata accessor for KeyedEncodingContainer<TabCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabCustomizationID.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys, (uint64_t)&unk_1ED429A78, MEMORY[0x1E4FBBDE0]);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v13 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  char v16 = BYTE4(v13) & 1;
  lazy protocol witness table accessor for type TabCustomizationID.Base and conformance TabCustomizationID.Base();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationID.Base.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabCustomizationID.Base.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationID.Base.ExplicitCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabCustomizationID.Base.ExplicitCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationID.Base.TransientCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabCustomizationID.Base.TransientCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TabCustomizationID.Base@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized TabCustomizationID.Base.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TabCustomizationID.Base(void *a1)
{
  return TabCustomizationID.Base.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TabCustomizationID.Base()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TabCustomizationID.Base()
{
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 16));

  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TabCustomizationID.Base()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TabCustomizationID.Base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance TabCustomizationID.Base(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized static TabCustomizationID.Base.== infix(_:_:));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationID.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabCustomizationID.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

void *protocol witness for Decodable.init(from:) in conformance TabCustomizationID@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized TabCustomizationID.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TabCustomizationID(void *a1)
{
  return TabCustomizationID.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TabCustomizationID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance TabCustomizationID.Base(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized static TabCustomizationID.== infix(_:_:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TabCustomizationID.Base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

unint64_t TabCustomizationID.description.getter(uint64_t a1, void *a2, char a3)
{
  if (a3)
  {
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    unint64_t v7 = 0xD000000000000022;
  }
  else
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v7 = 0xD000000000000021;
  }
  v5._uint64_t countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  return v7;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabCustomizationID()
{
  return TabCustomizationID.description.getter(*(void *)v0, *(void **)(v0 + 8), *(unsigned char *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationID.Base and conformance TabCustomizationID.Base()
{
  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID.Base and conformance TabCustomizationID.Base;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base and conformance TabCustomizationID.Base)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base and conformance TabCustomizationID.Base);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID.Base and conformance TabCustomizationID.Base;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base and conformance TabCustomizationID.Base)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base and conformance TabCustomizationID.Base);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID.Base and conformance TabCustomizationID.Base;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base and conformance TabCustomizationID.Base)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base and conformance TabCustomizationID.Base);
  }
  return result;
}

uint64_t specialized static TabCustomizationID.Base.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if ((a6 & 1) == 0) {
      return 0;
    }
  }
  else if (a6)
  {
    return 0;
  }
  if (a1 == a4 && a2 == a5) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

BOOL specialized static TabCustomizationID.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if ((a6 & 1) == 0) {
      return 0;
    }
    if (a1 == a4 && a2 == a5) {
      return 1;
    }
  }
  else
  {
    if (a6) {
      return 0;
    }
    if (a1 == a4 && a2 == a5) {
      return 1;
    }
  }
  return (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0;
}

uint64_t specialized TabCustomizationID.Base.init(from:)(void *a1)
{
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDC0];
  type metadata accessor for KeyedEncodingContainer<TabCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabCustomizationID.Base.TransientCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys, (uint64_t)&unk_1ED429C28, MEMORY[0x1E4FBBDC0]);
  uint64_t v27 = v3;
  uint64_t v24 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  int v26 = (char *)&v23 - v4;
  type metadata accessor for KeyedEncodingContainer<TabCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabCustomizationID.Base.ExplicitCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys, (uint64_t)&unk_1ED429B98, v2);
  uint64_t v6 = v5;
  uint64_t v23 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v23 - v7;
  type metadata accessor for KeyedEncodingContainer<TabCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabCustomizationID.Base.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys, (uint64_t)&unk_1ED429B08, v2);
  uint64_t v10 = v9;
  uint64_t v25 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unsigned int v12 = (char *)&v23 - v11;
  uint64_t v13 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys();
  uint64_t v14 = (uint64_t)v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    goto LABEL_6;
  }
  uint64_t v15 = v26;
  uint64_t v16 = v27;
  char v28 = a1;
  uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v17 + 16) != 1)
  {
    uint64_t v19 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v21 = v20;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v21 = &type metadata for TabCustomizationID.Base;
    uint64_t v13 = (uint64_t)v12;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x1E4FBBA70], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
    a1 = v28;
LABEL_6:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v13;
  }
  int v29 = *(unsigned __int8 *)(v17 + 32);
  if (v29)
  {
    char v31 = 1;
    lazy protocol witness table accessor for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v18 = v25;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v15, v16);
  }
  else
  {
    char v30 = 0;
    lazy protocol witness table accessor for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v6);
    uint64_t v18 = v25;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v12, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  return v13;
}

void *specialized TabCustomizationID.init(from:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<TabCustomizationID.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabCustomizationID.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys, (uint64_t)&unk_1ED429A78, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v11 - v6;
  uint64_t v8 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabCustomizationID.CodingKeys and conformance TabCustomizationID.CodingKeys();
  uint64_t v9 = v8;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type TabCustomizationID.Base and conformance TabCustomizationID.Base();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v9 = (void *)v11[1];
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v9;
}

void *type metadata accessor for TabCustomizationID.CodingKeys()
{
  return &unk_1ED429A78;
}

ValueMetadata *type metadata accessor for TabCustomizationID.Base()
{
  return &type metadata for TabCustomizationID.Base;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.TransientCodingKeys and conformance TabCustomizationID.Base.TransientCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.ExplicitCodingKeys and conformance TabCustomizationID.Base.ExplicitCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationID.Base.CodingKeys and conformance TabCustomizationID.Base.CodingKeys);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<TabCustomizationID.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for TabCustomizationID.Base.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18816436CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TabCustomizationID.Base.CodingKeys()
{
  return &unk_1ED429B08;
}

void *type metadata accessor for TabCustomizationID.Base.ExplicitCodingKeys()
{
  return &unk_1ED429B98;
}

unsigned char *storeEnumTagSinglePayload for TabCustomizationID.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x188164450);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for TabCustomizationID.Base.TransientCodingKeys()
{
  return &unk_1ED429C28;
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TouchInfoKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v4, (uint64_t)v12);
    uint64_t v6 = v13;
    uint64_t v7 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v15, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTouchInfo?, (uint64_t)&type metadata for AccessibilityTouchInfo, v8);
  uint64_t result = swift_dynamicCast();
  uint64_t v10 = v12[0];
  uint64_t v11 = v12[1];
  if (!result)
  {
    uint64_t v10 = 2;
    uint64_t v11 = 0;
  }
  *a2 = v10;
  a2[1] = v11;
  return result;
}

uint64_t specialized AccessibilityProperties.subscript.getter(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a1 + 16) && (unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v10 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v9, (uint64_t)v14);
    uint64_t v11 = v15;
    uint64_t v12 = v16;
    __swift_project_boxed_opaque_existential_1(v14, v15);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v12 + 8))(v17, v11, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  type metadata accessor for (NSObject & PlatformAccessibilityElementProtocol)?(0, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NSObject & UIInteraction);
  if (swift_dynamicCast()) {
    return v14[0];
  }
  else {
    return 0;
  }
}

int8x16_t specialized AccessibilityProperties.subscript.getter@<Q0>(uint64_t a1@<X0>, int8x16_t *a2@<X8>)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TemporalState),
        (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v4, (uint64_t)&v14);
    uint64_t v6 = v17;
    uint64_t v7 = v18;
    __swift_project_boxed_opaque_existential_1(&v14, v17);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v19, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  else
  {
    memset(v19, 0, sizeof(v19));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, &lazy cache variable for type metadata for StrongHash?, MEMORY[0x1E4F3F3B8], v8);
  int v9 = swift_dynamicCast();
  char v10 = v16;
  __int32 v11 = v15;
  if (v9)
  {
    unint64_t v12 = -1;
  }
  else
  {
    __int32 v11 = 0;
    unint64_t v12 = 0;
  }
  int8x16_t result = vandq_s8(v14, (int8x16_t)vdupq_n_s64(v12));
  *a2 = result;
  a2[1].i32[0] = v11;
  a2[1].i8[4] = v10 & 1 | ((v9 & 1) == 0);
  return result;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void, uint64_t);
  int v9;
  uint64_t v10;
  unint64_t v11;
  int8x16_t v12;
  int8x16_t result;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  _OWORD v18[2];

  if (*(void *)(a1 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40AF0]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v4, (uint64_t)&v15);
    uint64_t v6 = v16.i64[1];
    uint64_t v7 = v17;
    __swift_project_boxed_opaque_existential_1(&v15, v16.i64[1]);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v18, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  }
  else
  {
    memset(v18, 0, sizeof(v18));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?, MEMORY[0x1E4F412D8], v8);
  int v9 = swift_dynamicCast();
  char v10 = v17;
  if (v9) {
    __int32 v11 = -1;
  }
  else {
    __int32 v11 = 0;
  }
  unint64_t v12 = (int8x16_t)vdupq_n_s64(v11);
  if (!v9) {
    char v10 = 0;
  }
  int8x16_t result = vandq_s8(v15, v12);
  int8x16_t v14 = vandq_s8(v16, v12);
  *a2 = result;
  a2[1] = v14;
  a2[2].i64[0] = v10;
  return result;
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x100000000) != 0)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.TemporalState, (uint64_t)v8);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
  else
  {
    int v3 = a3;
    type metadata accessor for AccessibilityPropertiesEntry<StrongHash?>();
    uint64_t v11 = v6;
    uint64_t v12 = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<StrongHash?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<StrongHash?>);
    v8[0] = a1;
    v8[1] = a2;
    int v9 = v3;
    char v10 = 0;
    return specialized Dictionary.subscript.setter((uint64_t)v8, (uint64_t)&type metadata for AccessibilityProperties.TemporalState);
  }
}

BOOL AccessibilityProperties.merge(with:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for Locale?(0, (unint64_t *)&lazy cache variable for type metadata for Locale?, MEMORY[0x1E4F27A78], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v180 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  int v9 = (char *)&v180 - v8;
  type metadata accessor for LinkDestination.Configuration?(0);
  MEMORY[0x1F4188790](v10 - 8);
  MEMORY[0x1F4188790](v11);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = *a1;
  uint64_t v17 = *(void *)(*a1 + 16);
  if (!v17) {
    return v17 != 0;
  }
  uint64_t v185 = (uint64_t)&v180 - v13;
  uint64_t v186 = v9;
  uint64_t v181 = v15;
  uint64_t v182 = v14;
  id v183 = v6;
  uint64_t v187 = v17;
  v204.i64[0] = v16;
  AccessibilityProperties.visibility.getter();
  __int32 v18 = v200.i32[0];
  __int32 v19 = v200.i32[1];
  uint64_t v20 = (void (*)(int8x16_t *, void))AccessibilityProperties.visibility.modify();
  __int32 v22 = v21[1];
  *uint64_t v21 = *v21 & (v22 | ~v19) | v18 & ~v22;
  v21[1] = v22 | v19;
  v20(&v204, 0);
  v204.i64[0] = v16;
  AccessibilityProperties.traits.getter();
  int8x16_t v23 = v200;
  uint64_t v24 = (void (*)(int8x16_t *, void))AccessibilityProperties.traits.modify();
  uint64_t v26 = v25[1];
  *uint64_t v25 = *v25 & (v26 | ~v23.i64[1]) | v23.i64[0] & ~v26;
  v25[1] = v26 | v23.i64[1];
  v24(&v204, 0);
  uint64_t v27 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v27, (uint64_t)&v204);
  swift_bridgeObjectRelease();
  uint64_t v28 = v204.i64[0];
  swift_bridgeObjectRelease();
  if (!v28)
  {
    uint64_t v34 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v34, (uint64_t)&v196);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v196.i64[0], v196.i8[8]);
    goto LABEL_13;
  }
  uint64_t v29 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v29, (uint64_t)&v204);
  swift_bridgeObjectRelease();
  uint64_t v30 = v204.i64[0];
  char v31 = v204.i8[8];
  uint64_t v32 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v32, (uint64_t)&v200);
  swift_bridgeObjectRelease();
  if (!v200.i64[0])
  {
    if (v30)
    {
      specialized AccessibilityProperties.subscript.setter(v30, v31);
      goto LABEL_10;
    }
LABEL_11:
    specialized AccessibilityProperties.subscript.setter(v200.i64[0], v200.i8[8]);
    goto LABEL_12;
  }
  if (!v30) {
    goto LABEL_11;
  }
  v196.i64[0] = v200.i64[0];
  v196.i8[8] = v200.i8[8];
  *(void *)&unsigned long long v188 = v30;
  BYTE8(v188) = v31;
  char v33 = AccessibilityLabelStorage.merge(with:)();
  swift_bridgeObjectRelease();
  specialized AccessibilityProperties.subscript.setter(v196.i64[0], v196.i8[8]);
  if (v33)
  {
LABEL_10:
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.TextLayoutPropertiesKey, (uint64_t)&v204);
    _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)&v204, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v35 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v35, (uint64_t)&v204);
  swift_bridgeObjectRelease();
  uint64_t v36 = v204.i64[0];
  swift_bridgeObjectRelease();
  if (!v36)
  {
LABEL_13:
    uint64_t v37 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v37, (uint64_t)&v196);
    swift_bridgeObjectRelease();
    outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)&v196, (uint64_t)&v200, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
    outlined release of AccessibilityTextLayoutProperties?(v200.i64);
    outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)&v200, (uint64_t)&v204, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
    if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)&v204) == 1)
    {
      uint64_t v38 = swift_bridgeObjectRetain();
      specialized AccessibilityProperties.subscript.getter(v38, (uint64_t)&v196);
      swift_bridgeObjectRelease();
      outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)&v196, (uint64_t)v209, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
      specialized AccessibilityProperties.subscript.setter((uint64_t)v209);
    }
  }
LABEL_15:
  uint64_t v39 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v39, &v204);
  swift_bridgeObjectRelease();
  uint64_t v40 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v40, &v200);
  swift_bridgeObjectRelease();
  specialized Optional<A>.merge(with:)((uint64_t)&v204);
  uint64_t v41 = MEMORY[0x1E4F40E80];
  _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3((uint64_t)&v204, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80]);
  _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_1((uint64_t)&v200, (uint64_t)&v196, &lazy cache variable for type metadata for AccessibilityValueStorage?, v41);
  specialized AccessibilityProperties.subscript.setter((uint64_t)&v196);
  _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3((uint64_t)&v200, &lazy cache variable for type metadata for AccessibilityValueStorage?, v41);
  v204.i64[0] = *v2;
  uint64_t v42 = *(void *)(AccessibilityProperties.hints.getter() + 16);
  swift_bridgeObjectRelease();
  if (!v42)
  {
    v204.i64[0] = v16;
    uint64_t v43 = AccessibilityProperties.hints.getter();
    MEMORY[0x18C111DD0](v43);
  }
  uint64_t v44 = swift_bridgeObjectRetain();
  uint64_t v45 = specialized AccessibilityProperties.subscript.getter(v44);
  uint64_t v47 = v46;
  char v49 = v48;
  uint64_t v51 = v50;
  swift_bridgeObjectRelease();
  outlined consume of Text?(v45, v47, v49, v51);
  if (!v51)
  {
    uint64_t v52 = swift_bridgeObjectRetain();
    uint64_t v53 = specialized AccessibilityProperties.subscript.getter(v52);
    uint64_t v55 = v54;
    uint64_t v57 = v56;
    uint64_t v59 = v58;
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v53, v55, v57, v59);
  }
  uint64_t v60 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v60, &v204);
  swift_bridgeObjectRelease();
  int8x16_t v61 = v204;
  uint64_t v62 = v205;
  uint64_t v63 = v206;
  uint64_t v64 = v207;
  uint64_t v65 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v65, &v200);
  swift_bridgeObjectRelease();
  uint64_t v67 = v200.i64[1];
  uint64_t v66 = v200.i64[0];
  uint64_t v68 = v201;
  uint64_t v69 = v203;
  if (v202)
  {
    if (v63)
    {
      int8x16_t v196 = v200;
      unsigned __int8 v197 = v201;
      uint64_t v198 = v202;
      uint64_t v199 = v203;
      unsigned long long v188 = (unsigned __int128)v61;
      LOBYTE(v189) = v62;
      uint64_t v191 = v63;
      uint64_t v192 = v64;
      AccessibilityActivationPointStorage.merge(with:)();
      outlined consume of AccessibilityActivationPointStorage?(v61.i64[0], v61.i64[1], v62, v63);
      uint64_t v67 = v196.i64[1];
      uint64_t v66 = v196.i64[0];
      uint64_t v68 = v197;
      uint64_t v63 = v198;
      uint64_t v69 = v199;
    }
    else
    {
      uint64_t v63 = v202;
    }
  }
  else if (v63)
  {
    uint64_t v67 = v61.i64[1];
    uint64_t v66 = v61.i64[0];
    uint64_t v68 = v62;
    uint64_t v69 = v64;
  }
  v208[0] = v66;
  v208[1] = v67;
  v208[2] = v68;
  v208[3] = v63;
  v208[4] = v69;
  specialized AccessibilityProperties.subscript.setter((uint64_t)v208);
  uint64_t v70 = swift_bridgeObjectRetain();
  uint64_t v71 = specialized AccessibilityProperties.subscript.getter(v70, MEMORY[0x1E4F40AB8], (void (*)(void))type metadata accessor for [Text]?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v71)
  {
    uint64_t v72 = swift_bridgeObjectRetain();
    uint64_t v73 = MEMORY[0x1E4F40AB8];
    uint64_t v74 = specialized AccessibilityProperties.subscript.getter(v72, MEMORY[0x1E4F40AB8], (void (*)(void))type metadata accessor for [Text]?);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v74, v73, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Text]?>, (uint64_t (*)(uint64_t))type metadata accessor for [Text]?, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[Text]?> and conformance AccessibilityPropertiesEntry<A>);
  }
  uint64_t v75 = swift_bridgeObjectRetain();
  uint64_t v76 = specialized AccessibilityProperties.subscript.getter(v75);
  swift_bridgeObjectRelease();
  uint64_t v77 = swift_bridgeObjectRetain();
  uint64_t v78 = specialized AccessibilityProperties.subscript.getter(v77);
  swift_bridgeObjectRelease();
  v204.i64[0] = v78;
  specialized Array.append<A>(contentsOf:)(v76);
  specialized AccessibilityProperties.subscript.setter(v204.i64[0]);
  uint64_t v79 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v79, &v204);
  swift_bridgeObjectRelease();
  uint64_t v80 = v204.i64[0];
  uint64_t v81 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v81, &v200);
  swift_bridgeObjectRelease();
  if (v200.i64[0])
  {
    if (v80)
    {
      v196.i64[0] = v200.i64[0];
      *(void *)&unsigned long long v188 = v80;
      AccessibilityCustomAttributes.merge(with:)();
      swift_bridgeObjectRelease();
      uint64_t v80 = v196.i64[0];
    }
    else
    {
      uint64_t v80 = v200.i64[0];
    }
  }
  specialized AccessibilityProperties.subscript.setter(v80);
  uint64_t v82 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v82, (uint64_t)&v204);
  swift_bridgeObjectRelease();
  uint64_t v84 = v204.i64[1];
  uint64_t v83 = v204.i64[0];
  char v85 = v205;
  uint64_t v86 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v86, (uint64_t)&v200);
  swift_bridgeObjectRelease();
  uint64_t v87 = v200.i64[0];
  char v88 = v201;
  if (v200.i64[1])
  {
    if (v84)
    {
      int8x16_t v196 = v200;
      unsigned __int8 v197 = v201;
      unsigned long long v188 = __PAIR128__(v84, v83);
      LOBYTE(v189) = v85;
      AccessibilityIdentifierStorage.merge(with:)();
      swift_bridgeObjectRelease();
      uint64_t v84 = v196.i64[1];
      uint64_t v87 = v196.i64[0];
      char v88 = v197;
    }
    else
    {
      uint64_t v84 = v200.i64[1];
    }
  }
  else if (v84)
  {
    uint64_t v87 = v83;
    char v88 = v85;
  }
  specialized AccessibilityProperties.subscript.setter(v87, v84, v88);
  uint64_t v89 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v89);
  char v91 = v90;
  swift_bridgeObjectRelease();
  if (v91)
  {
    uint64_t v92 = swift_bridgeObjectRetain();
    uint64_t v93 = specialized AccessibilityProperties.subscript.getter(v92);
    char v95 = v94;
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v93, v95 & 1, MEMORY[0x1E4F40AC8], (uint64_t (*)(void))type metadata accessor for AccessibilityPropertiesEntry<Double?>, lazy protocol witness table accessor for type AccessibilityPropertiesEntry<Double?> and conformance AccessibilityPropertiesEntry<A>);
  }
  v204.i64[0] = *v2;
  AccessibilityProperties.explicitAutomationType.getter();
  if (v96)
  {
    v204.i64[0] = v16;
    AccessibilityProperties.explicitAutomationType.getter();
    AccessibilityProperties.explicitAutomationType.setter();
  }
  uint64_t v97 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v97, (uint64_t)&v204);
  swift_bridgeObjectRelease();
  uint64_t v98 = MEMORY[0x1E4F412F0];
  outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)&v204, (uint64_t)&v196, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E4F412F0]);
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)&v196);
  outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)&v196, (uint64_t)&v200, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v98);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)&v200) == 1)
  {
    uint64_t v99 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v99, (uint64_t)&v188);
    swift_bridgeObjectRelease();
    outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)&v188, (uint64_t)&v204, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E4F412F0]);
    specialized AccessibilityProperties.subscript.setter((uint64_t)&v204);
  }
  uint64_t v100 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v100, (uint64_t)&v188);
  swift_bridgeObjectRelease();
  uint64_t v101 = v191;
  _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)&v188, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (uint64_t)&lazy cache variable for type metadata for ScrollableCollection, MEMORY[0x1E4F40678]);
  if (!v101)
  {
    uint64_t v102 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v102, (uint64_t)&v188);
    swift_bridgeObjectRelease();
    outlined init with copy of ScrollableCollection?((uint64_t)&v188, (uint64_t)v195);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v195);
    _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)&v188, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (uint64_t)&lazy cache variable for type metadata for ScrollableCollection, MEMORY[0x1E4F40678]);
  }
  uint64_t v103 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v103, (uint64_t)&v188);
  swift_bridgeObjectRelease();
  unint64_t v104 = v194;
  _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3((uint64_t)&v188, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
  if (v104 >= 0xFF)
  {
    uint64_t v105 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v105, (uint64_t)&v188);
    swift_bridgeObjectRelease();
    _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_1((uint64_t)&v188, (uint64_t)v195, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v195);
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3((uint64_t)&v188, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
  }
  uint64_t v106 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v106, (uint64_t *)&v188);
  swift_bridgeObjectRelease();
  if (v188 == 2)
  {
    uint64_t v107 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v107, (uint64_t *)&v188);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v188, *((uint64_t *)&v188 + 1));
  }
  uint64_t v108 = swift_bridgeObjectRetain();
  uint64_t v109 = specialized AccessibilityProperties.subscript.getter(v108);
  uint64_t v111 = v110;
  char v113 = v112;
  swift_bridgeObjectRelease();
  int v184 = v113 & 1;
  uint64_t v114 = swift_bridgeObjectRetain();
  uint64_t v115 = specialized AccessibilityProperties.subscript.getter(v114);
  uint64_t v117 = v116;
  uint64_t v118 = v16;
  uint64_t v119 = v2;
  char v121 = v120;
  swift_bridgeObjectRelease();
  if (v113) {
    uint64_t v122 = v115;
  }
  else {
    uint64_t v122 = v109;
  }
  if (v113) {
    uint64_t v123 = v117;
  }
  else {
    uint64_t v123 = v111;
  }
  uint64_t v124 = (v117 | v111) & ~v115;
  uint64_t v125 = (v115 | v109) & ~v124;
  if (v113)
  {
    uint64_t v125 = v115;
    uint64_t v124 = v117;
  }
  unint64_t v126 = v119;
  uint64_t v127 = v118;
  if (v121) {
    uint64_t v128 = v122;
  }
  else {
    uint64_t v128 = v125;
  }
  if (v121) {
    uint64_t v129 = v123;
  }
  else {
    uint64_t v129 = v124;
  }
  if (v121) {
    char v130 = v184;
  }
  else {
    char v130 = 0;
  }
  specialized AccessibilityProperties.subscript.setter(v128, v129, v130);
  uint64_t v131 = swift_bridgeObjectRetain();
  uint64_t v132 = (void *)specialized AccessibilityProperties.subscript.getter(v131, (uint64_t)&type metadata for AccessibilityProperties.UIKitBridgedInteractionKey, &lazy cache variable for type metadata for (NSObject & UIInteraction)?, (uint64_t)&lazy cache variable for type metadata for NSObject & UIInteraction, (uint64_t)&protocolRef_UIInteraction);
  swift_bridgeObjectRelease();

  if (!v132)
  {
    uint64_t v133 = swift_bridgeObjectRetain();
    uint64_t v134 = specialized AccessibilityProperties.subscript.getter(v133, (uint64_t)&type metadata for AccessibilityProperties.UIKitBridgedInteractionKey, &lazy cache variable for type metadata for (NSObject & UIInteraction)?, (uint64_t)&lazy cache variable for type metadata for NSObject & UIInteraction, (uint64_t)&protocolRef_UIInteraction);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v134);
  }
  uint64_t v135 = swift_bridgeObjectRetain();
  uint64_t v136 = v185;
  specialized AccessibilityProperties.subscript.getter(v135, v185);
  swift_bridgeObjectRelease();
  uint64_t v137 = type metadata accessor for LinkDestination.Configuration();
  int v138 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v137 - 8) + 48))(v136, 1, v137);
  outlined destroy of AccessibilityValueStorage??(v136, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
  if (v138 == 1)
  {
    uint64_t v139 = swift_bridgeObjectRetain();
    uint64_t v140 = v181;
    specialized AccessibilityProperties.subscript.getter(v139, v181);
    swift_bridgeObjectRelease();
    uint64_t v141 = v182;
    outlined init with copy of AccessibilityCustomAttributes.Value(v140, v182, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
    specialized AccessibilityProperties.subscript.setter(v141);
    outlined destroy of AccessibilityValueStorage??(v140, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
  }
  *(void *)&unsigned long long v188 = v127;
  uint64_t v142 = AccessibilityProperties.customContentList.getter();
  long long v143 = (void (*)(unsigned long long *, void))AccessibilityProperties.customContentList.modify();
  specialized Array.append<A>(contentsOf:)(v142);
  v143(&v188, 0);
  uint64_t v144 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v144, (char *)&v188);
  swift_bridgeObjectRelease();
  if (v188 == 8)
  {
    uint64_t v145 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v145, (char *)&v188);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v188);
  }
  uint64_t v146 = swift_bridgeObjectRetain();
  int v147 = specialized AccessibilityProperties.subscript.getter(v146);
  swift_bridgeObjectRelease();
  if (v147 == 7)
  {
    uint64_t v148 = swift_bridgeObjectRetain();
    char v149 = specialized AccessibilityProperties.subscript.getter(v148);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v149);
  }
  uint64_t v150 = swift_bridgeObjectRetain();
  uint64_t v151 = specialized AccessibilityProperties.subscript.getter(v150);
  swift_bridgeObjectRelease();
  uint64_t v152 = swift_bridgeObjectRetain();
  uint64_t v153 = specialized AccessibilityProperties.subscript.getter(v152);
  swift_bridgeObjectRelease();
  *(void *)&unsigned long long v188 = v153;
  specialized Array.append<A>(contentsOf:)(v151);
  specialized AccessibilityProperties.subscript.setter(v188);
  uint64_t v154 = swift_bridgeObjectRetain();
  uint64_t v155 = specialized AccessibilityProperties.subscript.getter(v154);
  swift_bridgeObjectRelease();
  uint64_t v156 = swift_bridgeObjectRetain();
  uint64_t v157 = specialized AccessibilityProperties.subscript.getter(v156);
  swift_bridgeObjectRelease();
  *(void *)&unsigned long long v188 = v157;
  specialized Array.append<A>(contentsOf:)(v155);
  specialized AccessibilityProperties.subscript.setter(v188);
  uint64_t v158 = swift_bridgeObjectRetain();
  uint64_t v159 = specialized AccessibilityProperties.subscript.getter(v158, MEMORY[0x1E4F40AF8], type metadata accessor for AccessibilityChartDescriptorStorage?);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v159)
  {
    uint64_t v160 = swift_bridgeObjectRetain();
    uint64_t v161 = MEMORY[0x1E4F40AF8];
    uint64_t v162 = specialized AccessibilityProperties.subscript.getter(v160, MEMORY[0x1E4F40AF8], type metadata accessor for AccessibilityChartDescriptorStorage?);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v162, v161, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityChartDescriptorStorage?, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?> and conformance AccessibilityPropertiesEntry<A>);
  }
  uint64_t v163 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v163, (uint64_t)&v188);
  swift_bridgeObjectRelease();
  int v164 = v193;
  _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3((uint64_t)&v188, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  if (v164 == 255)
  {
    uint64_t v165 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v165, (uint64_t)&v188);
    swift_bridgeObjectRelease();
    _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_1((uint64_t)&v188, (uint64_t)v195, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v195);
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3((uint64_t)&v188, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  }
  *(void *)&unsigned long long v188 = *v126;
  uint64_t v166 = (uint64_t)v186;
  AccessibilityProperties.locale.getter();
  uint64_t v167 = type metadata accessor for Locale();
  int v168 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v167 - 8) + 48))(v166, 1, v167);
  outlined destroy of LinkDestination.Configuration??(v166, (unint64_t *)&lazy cache variable for type metadata for Locale?, MEMORY[0x1E4F27A78]);
  if (v168 == 1)
  {
    *(void *)&unsigned long long v188 = v127;
    AccessibilityProperties.locale.getter();
    AccessibilityProperties.locale.setter();
  }
  uint64_t v169 = swift_bridgeObjectRetain();
  uint64_t v170 = (void *)specialized AccessibilityProperties.subscript.getter(v169, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey, &lazy cache variable for type metadata for (NSObject & PlatformAccessibilityElementProtocol)?, (uint64_t)&lazy cache variable for type metadata for NSObject & PlatformAccessibilityElementProtocol, (uint64_t)&protocolRef__TtP7SwiftUI36PlatformAccessibilityElementProtocol_);
  swift_bridgeObjectRelease();

  if (!v170)
  {
    uint64_t v171 = swift_bridgeObjectRetain();
    uint64_t v172 = specialized AccessibilityProperties.subscript.getter(v171, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey, &lazy cache variable for type metadata for (NSObject & PlatformAccessibilityElementProtocol)?, (uint64_t)&lazy cache variable for type metadata for NSObject & PlatformAccessibilityElementProtocol, (uint64_t)&protocolRef__TtP7SwiftUI36PlatformAccessibilityElementProtocol_);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v172);
  }
  uint64_t v173 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v173, (char *)&v188);
  swift_bridgeObjectRelease();
  if (v188 == 2)
  {
    uint64_t v174 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v174, (char *)&v188);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v188);
  }
  uint64_t v175 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v175, (int8x16_t *)&v188);
  swift_bridgeObjectRelease();
  if (v190 == 1)
  {
    uint64_t v176 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v176, (int8x16_t *)&v188);
    swift_bridgeObjectRelease();
    v195[0] = v190;
    specialized AccessibilityProperties.subscript.setter(v188, *((uint64_t *)&v188 + 1), v189 | ((unint64_t)v190 << 32));
  }
  uint64_t v177 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v177, (uint64_t)&v188);
  swift_bridgeObjectRelease();
  if (BYTE8(v188) == 1)
  {
    uint64_t v178 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v178, (uint64_t)&v188);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v188, SBYTE8(v188), (uint64_t)&type metadata for AccessibilityProperties.AutomationVisibilityKey, (uint64_t (*)(void))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>?>, lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>?> and conformance AccessibilityPropertiesEntry<A>);
  }
  uint64_t v17 = v187;
  return v17 != 0;
}

BOOL AccessibilityAttachment.merge(with:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v8 = *a1;
  BOOL v4 = AccessibilityProperties.merge(with:)(&v8);
  uint64_t v5 = v1[1];
  uint64_t v8 = *v1;
  uint64_t v9 = v5;
  uint64_t v6 = (void *)AccessibilityAttachment.platformElement.getter();

  if (!v6)
  {
    uint64_t v8 = v2;
    uint64_t v9 = v3;
    if (AccessibilityAttachment.platformElement.getter())
    {
      AccessibilityAttachment.platformElement.setter();
      return 1;
    }
  }
  return v4;
}

uint64_t static AccessibilityAttachment.combine(_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v7 = (void *)a1[5];
    *a2 = a1[4];
    a2[1] = (uint64_t)v7;
    id v8 = v7;
    return swift_bridgeObjectRetain();
  }
  else if (v4)
  {
    uint64_t v9 = &a1[2 * v5];
    uint64_t v10 = (void *)v9[5];
    uint64_t v21 = v9[4];
    __int32 v22 = v10;
    swift_bridgeObjectRetain();
    id v11 = v10;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v12 = (void **)&a1[2 * v4 + 1];
    uint64_t v13 = v4 - 2;
    while (v13 < v5)
    {
      uint64_t v14 = (uint64_t)*(v12 - 1);
      uint64_t v15 = *v12;
      uint64_t v19 = v14;
      id v16 = v15;
      swift_bridgeObjectRetain();
      AccessibilityProperties.merge(with:)(&v19);
      uint64_t v19 = v21;
      uint64_t v20 = v22;
      uint64_t v17 = (void *)AccessibilityAttachment.platformElement.getter();

      if (!v17)
      {
        uint64_t v19 = v14;
        uint64_t v20 = v15;
        if (AccessibilityAttachment.platformElement.getter()) {
          AccessibilityAttachment.platformElement.setter();
        }
      }

      uint64_t result = swift_bridgeObjectRelease();
      v12 -= 2;
      if (--v13 == -1)
      {
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v18 = (uint64_t)v22;
        *a2 = v21;
        a2[1] = v18;
        return result;
      }
    }
    __break(1u);
  }
  else
  {
    return AccessibilityAttachment.init()();
  }
  return result;
}

uint64_t protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.BridgedElementKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return type metadata accessor for NSObject & UIInteraction(0, (unint64_t *)&lazy cache variable for type metadata for NSObject & PlatformAccessibilityElementProtocol);
}

uint64_t protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.TemporalState()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return MEMORY[0x1E4F3F3B8];
}

void protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.TemporalState(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 1;
}

uint64_t protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.TemporalState(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

uint64_t protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.ImagesKey@<X0>(void *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusableBounds.Key(&one-time initialization token for defaultValue, &static AccessibilityProperties.ImagesKey.defaultValue, a1);
}

uint64_t protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.ImagesKey(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.ActionsKey(a1, a2, a3, &one-time initialization token for defaultValue, &static AccessibilityProperties.ImagesKey.defaultValue, specialized static Array<A>.== infix(_:_:));
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.RotorInfoKey(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 16) == 0;
}

uint64_t protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.ScrollableCollectionKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.ScrollableCollectionKey(uint64_t a1)
{
  outlined init with copy of ScrollableCollection?(a1, (uint64_t)v3);
  uint64_t v1 = v4;
  if (v4) {
    _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (uint64_t)&lazy cache variable for type metadata for ScrollableCollection, MEMORY[0x1E4F40678]);
  }
  return v1 == 0;
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.ScrollableContextKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return &type metadata for AccessibilityScrollableContext;
}

double protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.ScrollableContextKey@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 70) = -1;
  return result;
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.ScrollableContextKey(uint64_t a1)
{
  _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_1(a1, (uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
  unint64_t v1 = v4 | ((unint64_t)((v5 | (v6 << 16)) & 0xFFFFFF) << 32);
  if (v6 != 255) {
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
  }
  return HIWORD(v1) > 0xFEu;
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.TextLayoutPropertiesKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return &type metadata for AccessibilityTextLayoutProperties;
}

uint64_t protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.TextLayoutPropertiesKey@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOi0_((uint64_t)v3);
  return outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)v3, a1, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.TextLayoutPropertiesKey(uint64_t a1)
{
  outlined init with take of AccessibilityDataSeriesConfiguration?(a1, (uint64_t)v2, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
  return _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v2) == 1;
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.TableContextKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return &type metadata for AccessibilityTableContext;
}

double protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.TableContextKey@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 40) = -1;
  return result;
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.TableContextKey(uint64_t a1)
{
  _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_1(a1, (uint64_t)v3, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  int v1 = v4;
  if (v4 != 255) {
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3((uint64_t)v3, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  }
  return v1 == 255;
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.TouchInfoKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return &type metadata for AccessibilityTouchInfo;
}

double protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.TouchInfoKey@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 2;
  *a1 = xmmword_18838AA10;
  return result;
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.TouchInfoKey(unsigned __int8 *a1)
{
  return *a1 == 2;
}

void type metadata accessor for LinkDestination.Configuration?(uint64_t a1)
{
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, char a2)
{
  if (a1)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>();
    uint64_t v8 = v4;
    uint64_t v9 = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>);
    uint64_t v6 = a1;
    char v7 = a2;
    return specialized Dictionary.subscript.setter((uint64_t)&v6, MEMORY[0x1E4F40B88]);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E4F40B88], (uint64_t)&v6);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)&v6, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40AE0]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v4, (uint64_t)v11);
    uint64_t v6 = v12;
    uint64_t v7 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v14, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorKind?, MEMORY[0x1E4F41158], v8);
  uint64_t result = swift_dynamicCast();
  char v10 = v11[0];
  if (!result) {
    char v10 = 2;
  }
  *a2 = v10;
  return result;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void, uint64_t);
  uint64_t result;
  char v10;
  void v11[3];
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  if (*(void *)(a1 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40B28]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v4, (uint64_t)v11);
    uint64_t v6 = v12;
    uint64_t v7 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v14, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTextContentType?, MEMORY[0x1E4F410A0], v8);
  uint64_t result = swift_dynamicCast();
  char v10 = v11[0];
  if (!result) {
    char v10 = 8;
  }
  *a2 = v10;
  return result;
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), unint64_t *a5)
{
  if (a1)
  {
    type metadata accessor for Locale?(0, a3, a4, MEMORY[0x1E4F41090]);
    void v12[3] = v10;
    v12[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_0(a5, a3, a4);
    v12[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v12, a2);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)(a2, (uint64_t)v12);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    type metadata accessor for AccessibilityPropertiesEntry<Text?>();
    void v11[3] = v8;
    void v11[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<Text?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<Text?>);
    uint64_t v9 = (void *)swift_allocObject();
    v11[0] = v9;
    void v9[2] = a1;
    void v9[3] = a2;
    v9[4] = a3;
    _OWORD v9[5] = a4;
    return specialized Dictionary.subscript.setter((uint64_t)v11, MEMORY[0x1E4F40B18]);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E4F40B18], (uint64_t)v11);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  if (a2)
  {
    specialized Dictionary.removeValue(forKey:)(a3, (uint64_t)&v9);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
  else
  {
    uint64_t v11 = a4(0);
    uint64_t v12 = a5();
    uint64_t v9 = a1;
    char v10 = 0;
    return specialized Dictionary.subscript.setter((uint64_t)&v9, a3);
  }
}

uint64_t outlined destroy of AccessibilityValueStorage??(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of AccessibilityCustomAttributes.Value(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t specialized AccessibilityProperties.subscript.setter(char a1)
{
  if (a1 == 8)
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E4F40B28], (uint64_t)v4);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTextContentType?>();
    uint64_t v5 = v3;
    uint64_t v6 = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityTextContentType?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTextContentType?>);
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, MEMORY[0x1E4F40B28]);
  }
}

{
  uint64_t v3;
  unsigned char v4[24];
  uint64_t v5;
  uint64_t v6;

  if (a1 == 7)
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E4F40B48], (uint64_t)v4);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityHeadingLevel?>();
    uint64_t v5 = v3;
    uint64_t v6 = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityHeadingLevel?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityHeadingLevel?>);
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, MEMORY[0x1E4F40B48]);
  }
}

{
  uint64_t v3;
  unsigned char v4[24];
  uint64_t v5;
  uint64_t v6;

  if (a1 == 2)
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E4F40AE0], (uint64_t)v4);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?>();
    uint64_t v5 = v3;
    uint64_t v6 = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?>);
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, MEMORY[0x1E4F40AE0]);
  }
}

uint64_t specialized AccessibilityProperties.subscript.getter(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (*(void *)(a1 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v6 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v5, (uint64_t)v10);
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v8 + 8))(v13, v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  a3(0);
  if (swift_dynamicCast()) {
    return v10[0];
  }
  else {
    return 0;
  }
}

uint64_t outlined destroy of LinkDestination.Configuration??(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  type metadata accessor for Locale?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.ActionsKey()
{
  return &type metadata for AccessibilityProperties.ActionsKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.TouchInfoKey()
{
  return &type metadata for AccessibilityProperties.TouchInfoKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.TextLayoutPropertiesKey()
{
  return &type metadata for AccessibilityProperties.TextLayoutPropertiesKey;
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.TextLayoutPropertiesKey and conformance AccessibilityProperties.TextLayoutPropertiesKey()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProperties.TextLayoutPropertiesKey and conformance AccessibilityProperties.TextLayoutPropertiesKey;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.TextLayoutPropertiesKey and conformance AccessibilityProperties.TextLayoutPropertiesKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.TextLayoutPropertiesKey and conformance AccessibilityProperties.TextLayoutPropertiesKey);
  }
  return result;
}

double _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 112) = 1;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  return result;
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?>)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?>);
    }
  }
}

uint64_t sub_188168DFC()
{
  if (*(void *)(v0 + 128) != 1) {
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

void type metadata accessor for AccessibilityPropertiesEntry<Text?>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<Text?>)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, &lazy cache variable for type metadata for Text?, MEMORY[0x1E4F41420], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<Text?>);
    }
  }
}

uint64_t sub_188168EB8()
{
  if (*(void *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityDataSeriesConfiguration?>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityDataSeriesConfiguration?>)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E4F412F0], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityDataSeriesConfiguration?>);
    }
  }
}

uint64_t sub_188168F80()
{
  if (*(void *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 136))
    {
      if (*(void *)(v0 + 96))
      {
        outlined consume of Text.Storage(*(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
        swift_bridgeObjectRelease();
      }
      if (*(void *)(v0 + 128))
      {
        outlined consume of Text.Storage(*(void *)(v0 + 104), *(void *)(v0 + 112), *(unsigned char *)(v0 + 120));
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(void *)(v0 + 264))
    {
      if (*(void *)(v0 + 224))
      {
        outlined consume of Text.Storage(*(void *)(v0 + 200), *(void *)(v0 + 208), *(unsigned char *)(v0 + 216));
        swift_bridgeObjectRelease();
      }
      if (*(void *)(v0 + 256))
      {
        outlined consume of Text.Storage(*(void *)(v0 + 232), *(void *)(v0 + 240), *(unsigned char *)(v0 + 248));
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }

  return swift_deallocObject();
}

void type metadata accessor for AccessibilityPropertiesEntry<(NSObject & UIInteraction)?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for (NSObject & PlatformAccessibilityElementProtocol)?(255, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NSObject & UIInteraction);
    unint64_t v6 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata accessor for NSObject & UIInteraction(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    type metadata accessor for NSObject();
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>?>(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>?> and conformance AccessibilityPropertiesEntry<A>()
{
  return _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>?>);
}

void type metadata accessor for AccessibilityPropertiesEntry<StrongHash?>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<StrongHash?>)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, &lazy cache variable for type metadata for StrongHash?, MEMORY[0x1E4F3F3B8], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<StrongHash?>);
    }
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?>)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, &lazy cache variable for type metadata for AccessibilityChildBehaviorKind?, MEMORY[0x1E4F41158], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?>);
    }
  }
}

uint64_t sub_1881692A8()
{
  if (!*(unsigned char *)(v0 + 56)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return swift_deallocObject();
}

void type metadata accessor for AccessibilityTableContext??()
{
  if (!lazy cache variable for type metadata for AccessibilityTableContext??)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTableContext??);
    }
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityHeadingLevel?>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityHeadingLevel?>)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, &lazy cache variable for type metadata for AccessibilityHeadingLevel?, MEMORY[0x1E4F40E30], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityHeadingLevel?>);
    }
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTextContentType?>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTextContentType?>)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTextContentType?, MEMORY[0x1E4F410A0], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTextContentType?>);
    }
  }
}

uint64_t outlined init with take of AccessibilityDataSeriesConfiguration??(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityUIKitTraits?>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityUIKitTraits?>)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityUIKitTraits?>);
    }
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTouchInfo?>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTouchInfo?>)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTouchInfo?, (uint64_t)&type metadata for AccessibilityTouchInfo, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTouchInfo?>);
    }
  }
}

uint64_t sub_1881695BC()
{
  if (*(unsigned __int8 *)(v0 + 86) != 255)
  {
    unint64_t v1 = (*(unsigned int *)(v0 + 80) | ((unint64_t)((*(unsigned __int16 *)(v0 + 84) | (*(unsigned __int8 *)(v0 + 86) << 16)) & 0xFFFFFF) << 32)) >> 48;
    if (v1 != 2)
    {
      if (v1 == 1)
      {
LABEL_6:
        swift_release();
        goto LABEL_7;
      }
      if (v1) {
        goto LABEL_7;
      }
    }
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    goto LABEL_6;
  }
LABEL_7:

  return swift_deallocObject();
}

void type metadata accessor for AccessibilityScrollableContext??()
{
  if (!lazy cache variable for type metadata for AccessibilityScrollableContext??)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext??);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<ScrollableCollection?> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<ScrollableCollection?> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<ScrollableCollection?> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for ScrollableCollection??(255, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<ScrollableCollection?>, MEMORY[0x1E4F41090]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<ScrollableCollection?> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

uint64_t sub_18816973C()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return swift_deallocObject();
}

double _s7SwiftUI36AccessibilityDataSeriesConfigurationVSgWOi0_(uint64_t a1)
{
  *(void *)(a1 + 304) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void type metadata accessor for AccessibilityDataSeriesConfiguration??()
{
  if (!lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration??)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E4F412F0], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration??);
    }
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<Double?>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<Double?>)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, &lazy cache variable for type metadata for Double?, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<Double?>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<Double?> and conformance AccessibilityPropertiesEntry<A>()
{
  return _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<Double?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<Double?>);
}

uint64_t sub_1881698C8()
{
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t sub_18816990C()
{
  if (*(void *)(v0 + 56))
  {
    if (*(void *)(v0 + 40)) {
      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    }
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

void type metadata accessor for AccessibilityValueStorage??()
{
  if (!lazy cache variable for type metadata for AccessibilityValueStorage??)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityValueStorage??);
    }
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E4F40E40], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>);
    }
  }
}

ValueMetadata *type metadata accessor for AccessibilityProperties.ImagesKey()
{
  return &type metadata for AccessibilityProperties.ImagesKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.RotorInfoKey()
{
  return &type metadata for AccessibilityProperties.RotorInfoKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.TableContextKey()
{
  return &type metadata for AccessibilityProperties.TableContextKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.BridgedElementKey()
{
  return &type metadata for AccessibilityProperties.BridgedElementKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.TemporalState()
{
  return &type metadata for AccessibilityProperties.TemporalState;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.ScrollableContextKey()
{
  return &type metadata for AccessibilityProperties.ScrollableContextKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.ScrollableCollectionKey()
{
  return &type metadata for AccessibilityProperties.ScrollableCollectionKey;
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.ScrollableCollectionKey and conformance AccessibilityProperties.ScrollableCollectionKey()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProperties.ScrollableCollectionKey and conformance AccessibilityProperties.ScrollableCollectionKey;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.ScrollableCollectionKey and conformance AccessibilityProperties.ScrollableCollectionKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.ScrollableCollectionKey and conformance AccessibilityProperties.ScrollableCollectionKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.ScrollableContextKey and conformance AccessibilityProperties.ScrollableContextKey()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProperties.ScrollableContextKey and conformance AccessibilityProperties.ScrollableContextKey;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.ScrollableContextKey and conformance AccessibilityProperties.ScrollableContextKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.ScrollableContextKey and conformance AccessibilityProperties.ScrollableContextKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.TemporalState and conformance AccessibilityProperties.TemporalState()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProperties.TemporalState and conformance AccessibilityProperties.TemporalState;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.TemporalState and conformance AccessibilityProperties.TemporalState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.TemporalState and conformance AccessibilityProperties.TemporalState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.BridgedElementKey and conformance AccessibilityProperties.BridgedElementKey()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProperties.BridgedElementKey and conformance AccessibilityProperties.BridgedElementKey;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.BridgedElementKey and conformance AccessibilityProperties.BridgedElementKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.BridgedElementKey and conformance AccessibilityProperties.BridgedElementKey);
  }
  return result;
}

uint64_t EnvironmentValues.disableAutocorrection.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.disableAutocorrection.setter()
{
  type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View._disableAutocorrection(_:)()
{
  return swift_release();
}

uint64_t EnvironmentValues.autocorrectionDisabled.getter()
{
  return EnvironmentValues.disableAutocorrection.getter() & 1;
}

uint64_t EnvironmentValues.disableAutocorrection.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *((unsigned char *)a1 + 9) = *((unsigned char *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AutocorrectionTypeKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t sub_188169FE8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.disableAutocorrection.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18816A028()
{
  return EnvironmentValues.disableAutocorrection.setter();
}

uint64_t sub_18816A050@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.disableAutocorrection.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18816A08C()
{
  return EnvironmentValues.disableAutocorrection.setter();
}

ValueMetadata *type metadata accessor for AutocorrectionTypeKey()
{
  return &type metadata for AutocorrectionTypeKey;
}

uint64_t sub_18816A0C4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues._disableAutocorrection.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18816A100()
{
  return EnvironmentValues._disableAutocorrection.setter();
}

Swift::Bool __swiftcall UINavigationItemAdaptor.viewControllerWillAppear(_:child:)(UIViewController *_, UIViewController *child)
{
  return 1;
}

Swift::Bool __swiftcall UINavigationItemAdaptor.viewControllerWillDisappear(_:child:)(UIViewController *_, UIViewController *child)
{
  return 1;
}

uint64_t UINavigationItemAdaptorOptions.rawValue.getter()
{
  return *(void *)v0;
}

SwiftUI::UINavigationItemAdaptorOptions __swiftcall UINavigationItemAdaptorOptions.init(rawValue:)(SwiftUI::UINavigationItemAdaptorOptions rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

void static UINavigationItemAdaptorOptions.propagatesChildViewControllers.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static UINavigationItemAdaptorOptions.disableUpdates.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void protocol witness for ViewModifier.body(content:) in conformance NavigationItemAdaptorModifier()
{
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance UINavigationItemAdaptorKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

unint64_t lazy protocol witness table accessor for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions;
  if (!lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions;
  if (!lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions;
  if (!lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions;
  if (!lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UINavigationItemAdaptorOptions and conformance UINavigationItemAdaptorOptions);
  }
  return result;
}

uint64_t dispatch thunk of UINavigationItemAdaptor.options.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of UINavigationItemAdaptor.updateUINavigationItem(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of UINavigationItemAdaptor.viewControllerWillAppear(_:child:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of UINavigationItemAdaptor.viewControllerWillDisappear(_:child:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

ValueMetadata *type metadata accessor for UINavigationItemAdaptorContext()
{
  return &type metadata for UINavigationItemAdaptorContext;
}

ValueMetadata *type metadata accessor for UINavigationItemAdaptorOptions()
{
  return &type metadata for UINavigationItemAdaptorOptions;
}

uint64_t sub_18816A40C()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for UINavigationItemAdaptorKey()
{
  return &type metadata for UINavigationItemAdaptorKey;
}

uint64_t assignWithCopy for UINavigationItemAdaptorStorage.Adaptor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for UINavigationItemAdaptorStorage.Adaptor(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for UINavigationItemAdaptorStorage.Adaptor()
{
  return &type metadata for UINavigationItemAdaptorStorage.Adaptor;
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationItemAdaptorModifier()
{
  return &protocol witness table for NavigationItemAdaptorModifier;
}

uint64_t sub_18816A518()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void *type metadata accessor for NavigationItemAdaptorModifier.MakeAdaptor()
{
  return &unk_1ED456208;
}

uint64_t getEnumTagSinglePayload for TransactionalPreferenceModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18816A6B0);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for TransactionalPreferenceModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18816A8A4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          void *v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in TransactionalPreferenceModifier<A, B>()
{
  return &protocol witness table for TransactionalPreferenceModifier<A, B>;
}

uint64_t View.transactionalPreference<A, B>(key:value:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v30 = a8;
  uint64_t v28 = a9;
  uint64_t v29 = a5;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v14 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  int v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = v17;
  uint64_t v32 = v18;
  uint64_t v33 = a10;
  uint64_t v34 = a11;
  uint64_t v19 = type metadata accessor for TransactionalPreferenceModifier();
  uint64_t v20 = *(void *)(v19 - 8);
  double v21 = MEMORY[0x1F4188790](v19);
  int8x16_t v23 = (char *)&v26 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v16, v26, a6, v21);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v23, v16, a6);
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v33 = a10;
  uint64_t v34 = a11;
  uint64_t v24 = &v23[*(int *)(type metadata accessor for TransactionalPreferenceModifier() + 52)];
  *(void *)uint64_t v24 = v27;
  *((void *)v24 + 1) = a4;
  swift_retain();
  MEMORY[0x18C113660](v23, v29, v19, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
}

uint64_t IsAnimated.init(modifier:transaction:lastValue:lastTransaction:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  uint64_t IsAnimated = type metadata accessor for IsAnimated();
  uint64_t v9 = (char *)a5 + *(int *)(IsAnimated + 56);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9, a3, v10);
  *(void *)((char *)a5 + *(int *)(IsAnimated + 60)) = a4;
  return result;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TransactionalPreferenceModifier<A, B>@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, double *a6@<X8>)
{
  return static TransactionalPreferenceModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a5[5], a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TransactionalPreferenceModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t static IsAnimated.initialValue.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unsigned int v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v5(a3, 0, 1, AssociatedTypeWitness);
}

uint64_t closure #1 in IsAnimated.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, BOOL *a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  double v6 = MEMORY[0x1F4188790](a1);
  unsigned int v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v5 + 16))(v8, v6);
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, a2);
  *a3 = (v9 & 1) == 0;
  return result;
}

uint64_t closure #2 in IsAnimated.updateValue()@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)AGGraphGetValue();
  return swift_retain();
}

uint64_t closure #3 in IsAnimated.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v22[1] = a7;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  int v16 = (char *)v22 - v15;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v17 = *(void (**)(char *, uint64_t))(a1
                                               + *(int *)(type metadata accessor for TransactionalPreferenceModifier()
                                                        + 52));
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t IsAnimated = type metadata accessor for IsAnimated();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2 + *(int *)(IsAnimated + 56), v13);
  uint64_t v19 = *(void *)(a3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, a3);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v21 = *(void *)(a2 + *(int *)(IsAnimated + 60));
    swift_retain();
    v17(v16, v21);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v16, a3);
  }
  return result;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance IsAnimated<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static IsAnimated.initialValue.getter(*(void *)(a1 + 24), *(void *)(a1 + 40), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IsAnimated<A, B>()
{
  return specialized IsAnimated.description.getter();
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance IsAnimated<A, B>(uint64_t a1, uint64_t a2)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v9 = (char *)v17 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v17 - v12;
  static IsAnimated.initialValue.getter(v4, v3, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v13, v9, AssociatedTypeWitness);
  MEMORY[0x1F4188790](v15);
  v17[-2] = a2;
  v17[-1] = swift_getWitnessTable();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v13, (uint64_t)_s14AttributeGraph12StatefulRulePAAE5value5ValueQzvsySPyAFGXEfU_TA_0, (uint64_t)&v17[-4], AssociatedTypeWitness, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v16);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance IsAnimated<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t partial apply for implicit closure #1 in static TransactionalPreferenceModifier._makeView(modifier:inputs:body:)()
{
  return *(unsigned int *)(v0 + 48);
}

uint64_t type metadata completion function for IsAnimated()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for IsAnimated(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v10 = ((v9 + 7 + ((v7 + 8) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8) + 8;
  int v11 = v7 & 0x100000;
  if (v8 > 7 || v11 != 0 || v10 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v15 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v16 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v15 = *v16;
    uint64_t v17 = (void *)(((unint64_t)v15 + v8 + 4) & ~v8);
    uint64_t v18 = (const void *)(((unint64_t)v16 + v8 + 4) & ~v8);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v16 + v8 + 4) & ~v8, 1, v4))
    {
      memcpy(v17, v18, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v17, v18, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v4);
    }
    *(void *)(((unint64_t)v17 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v18 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v3;
}

uint64_t destroy for IsAnimated(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  unint64_t v4 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2)) {
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  }

  return swift_release();
}

_DWORD *initializeWithCopy for IsAnimated(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  unint64_t v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
    if (v11) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v12 + 1;
    }
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
    uint64_t v15 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v14 = v7 + 56;
    v15(v9, 0, 1, v6);
    int v11 = *(_DWORD *)(v14 + 28);
    size_t v12 = *(void *)(v14 + 8);
  }
  if (v11) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v12 + 1;
  }
  *(void *)(((unint64_t)v9 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

_DWORD *assignWithCopy for IsAnimated(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  unint64_t v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  int v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_12;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  if (v14) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v15 + 1;
  }
  memcpy(v9, v10, v16);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v17 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v7 + 64) + 1;
  }
  *(void *)(((unint64_t)v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

_DWORD *initializeWithTake for IsAnimated(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  unint64_t v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
    if (v11) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v12 + 1;
    }
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    size_t v15 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v14 = v7 + 56;
    v15(v9, 0, 1, v6);
    int v11 = *(_DWORD *)(v14 + 28);
    size_t v12 = *(void *)(v14 + 8);
  }
  if (v11) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v12 + 1;
  }
  *(void *)(((unint64_t)v9 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for IsAnimated(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  unint64_t v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  int v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_12;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  if (v14) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v15 + 1;
  }
  memcpy(v9, v10, v16);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v17 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v7 + 64) + 1;
  }
  *(void *)(((unint64_t)v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IsAnimated(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v6) {
    ++v10;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = v10 + 7;
  if (v8 < a2)
  {
    unint64_t v12 = ((v11 + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v13 = a2 - v8;
    uint64_t v14 = v12 & 0xFFFFFFF8;
    if ((v12 & 0xFFFFFFF8) != 0) {
      unsigned int v15 = 2;
    }
    else {
      unsigned int v15 = v13 + 1;
    }
    if (v15 >= 0x10000) {
      LODWORD(v16) = 4;
    }
    else {
      LODWORD(v16) = 2;
    }
    if (v15 < 0x100) {
      LODWORD(v16) = 1;
    }
    if (v15 >= 2) {
      uint64_t v16 = v16;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v12);
        if (!v17) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v12);
        if (v17) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18816BEBCLL);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v12);
        if (!v17) {
          break;
        }
LABEL_27:
        int v19 = v17 - 1;
        if (v14)
        {
          int v19 = 0;
          LODWORD(v14) = *a1;
        }
        int v20 = v8 + (v14 | v19);
        return (v20 + 1);
      default:
        break;
    }
  }
  unint64_t v21 = ((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 4) & ~v9;
  if (v7 < 0x7FFFFFFE)
  {
    unint64_t v23 = *(void *)((v11 + v21) & 0xFFFFFFFFFFFFFFF8);
    if (v23 >= 0xFFFFFFFF) {
      LODWORD(v23) = -1;
    }
    int v20 = v23 - 1;
    if (v20 < 0) {
      int v20 = -1;
    }
    return (v20 + 1);
  }
  else
  {
    unsigned int v22 = (*(uint64_t (**)(unint64_t))(v5 + 48))(v21);
    if (v22 >= 2) {
      return v22 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for IsAnimated(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v12 + 7 + ((v11 + 8) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v10 < a3)
  {
    unsigned int v14 = a3 - v10;
    if (((v12 + 7 + ((v11 + 8) & ~v11)) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v6 = v16;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((v12 + 7 + ((v11 + 8) & ~v11)) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v17 = a2 - v10;
    }
    else {
      int v17 = 1;
    }
    if (((v12 + 7 + ((v11 + 8) & ~v11)) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      unsigned int v18 = ~v10 + a2;
      bzero(a1, v13);
      *(_DWORD *)a1 = v18;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v17;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v13] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x18816C180);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        unint64_t v19 = (((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v11 + 4) & ~v11;
        if (v9 < 0x7FFFFFFE)
        {
          if (a2 > 0x7FFFFFFE) {
            uint64_t v23 = a2 - 0x7FFFFFFF;
          }
          else {
            uint64_t v23 = a2;
          }
          *(void *)((v12 + 7 + v19) & 0xFFFFFFFFFFFFFFF8) = v23;
        }
        else if (v9 >= a2)
        {
          uint64_t v24 = a2 + 1;
          uint64_t v25 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
          unint64_t v26 = (((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v11 + 4) & ~v11;
          v25(v26, v24);
        }
        else
        {
          if (v12 <= 3) {
            int v20 = ~(-1 << (8 * v12));
          }
          else {
            int v20 = -1;
          }
          if (v12)
          {
            int v21 = v20 & (~v9 + a2);
            if (v12 <= 3) {
              int v22 = v12;
            }
            else {
              int v22 = 4;
            }
            bzero((void *)((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v11 + 4) & ~v11), v12);
            switch(v22)
            {
              case 2:
                *(_WORD *)unint64_t v19 = v21;
                break;
              case 3:
                *(_WORD *)unint64_t v19 = v21;
                *(unsigned char *)(v19 + 2) = BYTE2(v21);
                break;
              case 4:
                *(_DWORD *)unint64_t v19 = v21;
                break;
              default:
                *(unsigned char *)unint64_t v19 = v21;
                break;
            }
          }
        }
      }
      return;
  }
}

uint64_t base witness table accessor for _AttributeBody in IsAnimated<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in IsAnimated.updateValue()@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return closure #1 in IsAnimated.updateValue()(a1, *(void *)(v2 + 16), a2);
}

uint64_t partial apply for closure #3 in IsAnimated.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #3 in IsAnimated.updateValue()(a1, v2[6], v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t specialized IsAnimated.description.getter()
{
  strcpy((char *)v2, "Transaction: ");
  v0._uint64_t countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return v2[0];
}

void static NavigationSplitViewVisibility.automatic.getter(BOOL *a1@<X8>)
{
  id v2 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v2, sel_bounds);
  CGFloat v4 = v3;
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  CGFloat v10 = v9;

  v13.origin.x = v4;
  v13.origin.y = v6;
  v13.size.width = v8;
  v13.size.height = v10;
  double Width = CGRectGetWidth(v13);
  v14.origin.x = v4;
  v14.origin.y = v6;
  v14.size.width = v8;
  v14.size.height = v10;
  if (CGRectGetHeight(v14) >= Width) {
    double v12 = 1194.0;
  }
  else {
    double v12 = 1024.0;
  }
  v15.origin.x = v4;
  v15.origin.y = v6;
  v15.size.width = v8;
  v15.size.height = v10;
  *a1 = CGRectGetWidth(v15) >= v12;
  a1[1] = 1;
}

void static NavigationSplitViewVisibility.detailOnly.getter(_WORD *a1@<X8>)
{
  *a1 = 0;
}

void static NavigationSplitViewVisibility.doubleColumn.getter(_WORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t NavigationSplitView.init(sidebar:content:detail:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X2>, void (*a3)(uint64_t)@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, long long a9)
{
  uint64_t v25 = a4;
  unint64_t v26 = a3;
  uint64_t v28 = a7;
  long long v27 = a9;
  MEMORY[0x1F4188790](a1);
  CGRect v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  int v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  unint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v32 = xmmword_1883CF100;
  __int16 v33 = 0;
  char v34 = 0;
  __int16 v31 = 512;
  uint64_t v22 = v20(v20, v21);
  uint64_t v23 = a2(v22);
  v26(v23);
  v29[0] = 0;
  v29[1] = 0;
  __int16 v30 = 0;
  return NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)((uint64_t *)&v32, &v31, v29, (uint64_t)v19, (uint64_t)v16, (uint64_t)v13, a5, a6, v28, a8);
}

uint64_t NavigationSplitView.init(columnVisibility:sidebar:content:detail:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  uint64_t v36 = a7;
  uint64_t v37 = a6;
  uint64_t v33 = a5;
  char v34 = a4;
  v31[1] = a3;
  long long v32 = a2;
  uint64_t v39 = a9;
  long long v38 = a12;
  uint64_t v35 = a13;
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)v20;
  if (*(unsigned char *)(v20 + 17)) {
    __int16 v24 = 256;
  }
  else {
    __int16 v24 = 0;
  }
  __int16 v25 = v24 | *(unsigned __int8 *)(v20 + 16) | 0x8000;
  lazy protocol witness table accessor for type AnyNavigationSplitVisibility.ToThreeColumns and conformance AnyNavigationSplitVisibility.ToThreeColumns();
  uint64_t v26 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  uint64_t v27 = swift_release();
  v43[0] = v23;
  v43[1] = v26;
  __int16 v44 = v25;
  char v45 = 1;
  __int16 v42 = 512;
  uint64_t v28 = v32(v27);
  uint64_t v29 = v34(v28);
  v37(v29);
  v40[0] = 0;
  v40[1] = 0;
  __int16 v41 = 0;
  return NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)(v43, &v42, v40, (uint64_t)v22, (uint64_t)v18, (uint64_t)v15, a8, a10, v39, a11);
}

uint64_t NavigationSplitView.init(columnVisibility:sidebar:content:detail:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, void (*a3)(uint64_t)@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, long long a9)
{
  uint64_t v27 = a4;
  uint64_t v28 = a3;
  uint64_t v30 = a6;
  long long v29 = a9;
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __int16 v21 = *v17;
  int v22 = v17[1];
  long long v34 = xmmword_1883CF100;
  __int16 v35 = 0;
  char v36 = 0;
  if (v22) {
    __int16 v23 = 256;
  }
  else {
    __int16 v23 = 0;
  }
  __int16 v33 = v23 | v21;
  uint64_t v24 = v18(v17, v18);
  uint64_t v25 = a2(v24);
  v28(v25);
  v31[0] = 0;
  v31[1] = 0;
  __int16 v32 = 0;
  return NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)((uint64_t *)&v34, &v33, v31, (uint64_t)v20, (uint64_t)v15, (uint64_t)v12, a5, a7, v30, a8);
}

uint64_t NavigationSplitView.init<>(columnVisibility:sidebar:detail:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X3>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  MEMORY[0x1F4188790](a1);
  CGFloat v10 = (char *)&v23[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v23[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __int16 v16 = *v15;
  int v17 = v15[1];
  long long v26 = xmmword_1883CF110;
  __int16 v27 = 0;
  char v28 = 0;
  if (v17) {
    __int16 v18 = 256;
  }
  else {
    __int16 v18 = 0;
  }
  __int16 v25 = v18 | v16;
  uint64_t v19 = v12();
  a2(v19);
  v23[0] = 0;
  v23[1] = 0;
  __int16 v24 = 0;
  return NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)((uint64_t *)&v26, &v25, v23, (uint64_t)v14, v20, (uint64_t)v10, a3, MEMORY[0x1E4F417F8], a5, a4);
}

void NavigationSplitView.init(topColumn:sidebar:content:detail:)()
{
}

void NavigationSplitView.init<>(topColumn:sidebar:detail:)()
{
}

void NavigationSplitView.init<>(columnVisibility:topColumn:sidebar:detail:)()
{
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t NavigationSplitView.init<>(preferredCompactColumn:sidebar:detail:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X3>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  MEMORY[0x1F4188790](a1);
  CGFloat v10 = (char *)&v23[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v23[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)v14;
  uint64_t v16 = *(void *)(v14 + 8);
  char v17 = *(unsigned char *)(v14 + 16);
  long long v27 = xmmword_1883CF110;
  __int16 v28 = 0;
  char v29 = 0;
  __int16 v26 = 512;
  v23[0] = v15;
  v23[1] = v16;
  char v24 = v17;
  char v25 = 1;
  uint64_t v19 = v18();
  a2(v19);
  return NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)((uint64_t *)&v27, &v26, v23, (uint64_t)v13, v20, (uint64_t)v10, a3, MEMORY[0x1E4F417F8], a5, a4);
}

uint64_t NavigationSplitView.init<>(columnVisibility:preferredCompactColumn:sidebar:detail:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X2>, uint64_t a3@<X3>, void (*a4)(uint64_t)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v32 = a6;
  uint64_t v33 = a5;
  long long v34 = a4;
  uint64_t v35 = a8;
  v29[1] = a3;
  uint64_t v30 = a2;
  uint64_t v31 = a9;
  v29[0] = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)v14;
  uint64_t v19 = *(void *)v18;
  uint64_t v20 = *(void *)(v18 + 8);
  char v21 = *(unsigned char *)(v18 + 16);
  if (*(unsigned char *)(v14 + 17)) {
    __int16 v22 = 256;
  }
  else {
    __int16 v22 = 0;
  }
  __int16 v23 = v22 | *(unsigned __int8 *)(v14 + 16) | 0x4000;
  lazy protocol witness table accessor for type AnyNavigationSplitVisibility.ToTwoColumns and conformance AnyNavigationSplitVisibility.ToTwoColumns();
  uint64_t v24 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  uint64_t v25 = swift_release();
  v40[0] = v17;
  v40[1] = v24;
  __int16 v41 = v23;
  char v42 = 1;
  __int16 v39 = 512;
  v36[0] = v19;
  v36[1] = v20;
  char v37 = v21;
  char v38 = 1;
  uint64_t v26 = v30(v25);
  v34(v26);
  return NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)(v40, &v39, v36, (uint64_t)v16, v27, (uint64_t)v12, v32, MEMORY[0x1E4F417F8], v35, a7);
}

uint64_t NavigationSplitView.init(columnVisibility:preferredCompactColumn:sidebar:content:detail:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X4>, void (*a3)(uint64_t)@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  uint64_t v31 = a4;
  uint64_t v32 = a3;
  uint64_t v33 = a5;
  long long v30 = a9;
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __int16 v20 = *v19;
  int v21 = v19[1];
  uint64_t v23 = *(void *)v22;
  uint64_t v24 = *(void *)(v22 + 8);
  char v25 = *(unsigned char *)(v22 + 16);
  long long v38 = xmmword_1883CF100;
  __int16 v39 = 0;
  char v40 = 0;
  if (v21) {
    __int16 v26 = 256;
  }
  else {
    __int16 v26 = 0;
  }
  __int16 v37 = v26 | v20;
  v34[0] = v23;
  v34[1] = v24;
  char v35 = v25;
  char v36 = 1;
  uint64_t v27 = v16();
  uint64_t v28 = a2(v27);
  v32(v28);
  return NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)((uint64_t *)&v38, &v37, v34, (uint64_t)v18, (uint64_t)v14, (uint64_t)v11, a6, a7, v33, a8);
}

uint64_t NavigationSplitView.init<>(columnVisibility:preferredCompactColumn:sidebar:detail:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X4>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v27[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v27[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __int16 v16 = *v15;
  int v17 = v15[1];
  uint64_t v19 = *(void *)v18;
  uint64_t v20 = *(void *)(v18 + 8);
  char v21 = *(unsigned char *)(v18 + 16);
  long long v31 = xmmword_1883CF110;
  __int16 v32 = 0;
  char v33 = 0;
  if (v17) {
    __int16 v22 = 256;
  }
  else {
    __int16 v22 = 0;
  }
  __int16 v30 = v22 | v16;
  v27[0] = v19;
  v27[1] = v20;
  char v28 = v21;
  char v29 = 1;
  uint64_t v23 = v12();
  a2(v23);
  return NavigationSplitView.init(visibility:pureProgrammaticVisibility:preferredCompactColumn:sidebar:content:detail:)((uint64_t *)&v31, &v30, v27, (uint64_t)v14, v24, (uint64_t)v10, a3, MEMORY[0x1E4F417F8], a5, a4);
}

BOOL static NavigationSplitViewVisibility.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t *protocol witness for RawRepresentable.init(rawValue:) in conformance NavigationSplitViewVisibility.Kind@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NavigationSplitViewVisibility.Kind()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NavigationSplitViewVisibility.Kind()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NavigationSplitViewVisibility.CodingKeys()
{
  if (*v0) {
    return 0x616D6F7475417369;
  }
  else {
    return 1684957547;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NavigationSplitViewVisibility.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NavigationSplitViewVisibility.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NavigationSplitViewVisibility.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NavigationSplitViewVisibility.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NavigationSplitViewVisibility@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return NavigationSplitViewVisibility.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NavigationSplitViewVisibility(void *a1)
{
  return NavigationSplitViewVisibility.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationSplitView(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = a3[3];
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v6 + v9) & ~v9;
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v13 = a3[4] - 8;
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *(_DWORD *)(*(void *)v13 + 80);
  uint64_t v16 = v12 + v15;
  uint64_t v17 = *(void *)(*(void *)v13 + 64) + 7;
  unint64_t v18 = ((((v17 + ((v12 + v15 + v11) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 26) & 0xFFFFFFFFFFFFFFF8) + 20;
  unsigned int v19 = v15 | *(_DWORD *)(v5 + 80) & 0xF8 | v9;
  if (v19 > 7 || ((*(_DWORD *)(v14 + 80) | *(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) != 0 || v18 > 0x18)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    uint64_t v23 = v22 + (((v19 | 7) + 16) & ~(unint64_t)(v19 | 7));
    swift_retain();
  }
  else
  {
    uint64_t v24 = ~v9;
    uint64_t v25 = ~v15;
    uint64_t v39 = a3[4];
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    char v40 = a1;
    unint64_t v26 = ((unint64_t)a1 + v10) & v24;
    unint64_t v27 = ((unint64_t)a2 + v10) & v24;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v26, v27, v7);
    unint64_t v28 = (v27 + v16) & v25;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 16))((v26 + v16) & v25, v28, v39);
    unint64_t v29 = (v17 + ((v26 + v16) & v25)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v30 = (v17 + v28) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v31 = *(unsigned __int8 *)(v30 + 18);
    if (v31 >= 2) {
      unsigned int v31 = *(_DWORD *)v30 + 2;
    }
    if (v31 == 1)
    {
      *(void *)unint64_t v29 = *(void *)v30;
      *(void *)(v29 + 8) = *(void *)(v30 + 8);
      *(_WORD *)(v29 + 16) = *(_WORD *)(v30 + 16);
      swift_retain();
      char v32 = 1;
    }
    else
    {
      char v32 = 0;
      *(_WORD *)unint64_t v29 = *(_WORD *)v30;
      *(void *)(v29 + 8) = *(void *)(v30 + 8);
    }
    swift_retain();
    *(unsigned char *)(v29 + 18) = v32;
    unint64_t v33 = v29 + 26;
    unint64_t v34 = (v30 + 26) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v35 = *(unsigned __int8 *)(v34 + 17);
    if (v35 >= 2) {
      unsigned int v35 = *(_DWORD *)v34 + 2;
    }
    unint64_t v36 = v33 & 0xFFFFFFFFFFFFFFF8;
    if (v35 == 1)
    {
      *(void *)unint64_t v36 = *(void *)v34;
      *(void *)(v36 + 8) = *(void *)(v34 + 8);
      *(unsigned char *)(v36 + 16) = *(unsigned char *)(v34 + 16);
      swift_retain();
      char v37 = 1;
    }
    else
    {
      char v37 = 0;
      *(unsigned char *)unint64_t v36 = *(unsigned char *)v34;
      *(void *)(v36 + 8) = *(void *)(v34 + 8);
    }
    swift_retain();
    *(unsigned char *)(v36 + 17) = v37;
    *(_WORD *)(v36 + 18) = *(_WORD *)(v34 + 18);
    return v40;
  }
  return (uint64_t *)v23;
}

uint64_t assignWithTake for NavigationSplitView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 24);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 40;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 40))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 24) + 7;
  unint64_t v21 = (v20 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v20 + v19) & 0xFFFFFFFFFFFFFFF8;
  if (v21 != v22)
  {
    unsigned int v23 = *(unsigned __int8 *)(v21 + 18);
    if (v23 >= 2) {
      unsigned int v23 = *(_DWORD *)v21 + 2;
    }
    if (v23 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v24 = *(unsigned __int8 *)(v22 + 18);
    if (v24 >= 2) {
      unsigned int v24 = *(_DWORD *)v22 + 2;
    }
    if (v24 == 1)
    {
      long long v25 = *(_OWORD *)v22;
      *(_WORD *)(v21 + 16) = *(_WORD *)(v22 + 16);
      *(_OWORD *)unint64_t v21 = v25;
      char v26 = 1;
    }
    else
    {
      char v26 = 0;
      *(_OWORD *)unint64_t v21 = *(_OWORD *)v22;
    }
    *(unsigned char *)(v21 + 18) = v26;
  }
  unint64_t v27 = (v21 + 26) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = (v22 + 26) & 0xFFFFFFFFFFFFFFF8;
  if (v27 != v28)
  {
    unsigned int v29 = *(unsigned __int8 *)(v27 + 17);
    if (v29 >= 2) {
      unsigned int v29 = *(_DWORD *)v27 + 2;
    }
    if (v29 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v30 = *(unsigned __int8 *)(v28 + 17);
    if (v30 >= 2) {
      unsigned int v30 = *(_DWORD *)v28 + 2;
    }
    if (v30 == 1)
    {
      long long v31 = *(_OWORD *)v28;
      *(unsigned char *)(v27 + 16) = *(unsigned char *)(v28 + 16);
      *(_OWORD *)unint64_t v27 = v31;
      char v32 = 1;
    }
    else
    {
      char v32 = 0;
      *(_OWORD *)unint64_t v27 = *(_OWORD *)v28;
    }
    *(unsigned char *)(v27 + 17) = v32;
  }
  *(_WORD *)(v27 + 18) = *(_WORD *)(v28 + 18);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationSplitView(_DWORD *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = a3[4];
  uint64_t v10 = *(void *)(v9 - 8);
  if (v8 <= v6) {
    unsigned int v11 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v12 = *(unsigned int *)(v10 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v16 = *(void *)(v10 + 64);
  if (v12 <= v11) {
    unsigned int v17 = v11;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v10 + 84);
  }
  if (v17 <= 0xFE) {
    unsigned int v17 = 254;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v18 = *(void *)(*(void *)(a3[2] - 8) + 64) + v13;
  uint64_t v19 = v16 + 7;
  if (v17 < a2
    && *((unsigned char *)a1
       + ((((v19 + ((v14 + v15 + (v18 & ~v13)) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 26) & 0xFFFFFFFFFFFFFFF8)
       + 20))
  {
    return v17 + *a1 + 1;
  }
  if (v6 == v17)
  {
    unint64_t v21 = *(uint64_t (**)(void))(v5 + 48);
    return v21();
  }
  else
  {
    unint64_t v22 = ((unint64_t)a1 + v18) & ~v13;
    if (v8 == v17)
    {
      unsigned int v23 = *(uint64_t (**)(unint64_t))(v7 + 48);
      return v23(v22);
    }
    else
    {
      unint64_t v24 = (v22 + v14 + v15) & ~v15;
      if (v12 == v17)
      {
        long long v25 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
        return v25(v24, v12, v9);
      }
      else
      {
        unsigned int v26 = *(unsigned __int8 *)(((v19 + v24) & 0xFFFFFFFFFFFFFFF8) + 18);
        if (v26 >= 2) {
          return (v26 ^ 0xFF) + 1;
        }
        else {
          return 0;
        }
      }
    }
  }
}

void storeEnumTagSinglePayload for NavigationSplitView(unsigned int *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v5 = a1;
  uint64_t v6 = a4[2];
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(a4[3] - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = a4[4];
  uint64_t v12 = *(void *)(v11 - 8);
  if (v10 <= v8) {
    unsigned int v13 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v14 = *(void *)(v11 - 8);
  unsigned int v15 = *(_DWORD *)(v12 + 84);
  uint64_t v16 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v17 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v18 = *(void *)(*(void *)(a4[3] - 8) + 64);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = *(void *)(v12 + 64);
  if (v15 <= v13) {
    unsigned int v21 = v13;
  }
  else {
    unsigned int v21 = v15;
  }
  if (v21 <= 0xFE) {
    unsigned int v22 = 254;
  }
  else {
    unsigned int v22 = v21;
  }
  uint64_t v23 = v20 + 7;
  size_t v24 = ((((v23 + ((v18 + v19 + ((v16 + v17) & ~v17)) & ~v19)) & 0xFFFFFFFFFFFFFFF8) + 26) & 0xFFFFFFFFFFFFFFF8)
      + 20;
  if (v22 < a2)
  {
    unsigned int v25 = ~v22 + a2;
    bzero(a1, v24);
    *uint64_t v5 = v25;
    if (v22 < a3) {
      *((unsigned char *)v5 + v24) = 1;
    }
    return;
  }
  if (v22 < a3) {
    *((unsigned char *)a1 + v24) = 0;
  }
  if (a2)
  {
    if (v8 == v22)
    {
      unsigned int v26 = *(void (**)(unsigned int *))(v7 + 56);
LABEL_19:
      v26(a1);
      return;
    }
    unint64_t v27 = ((unint64_t)a1 + v16 + v17) & ~v17;
    if (v10 == v22)
    {
      unint64_t v28 = *(void (**)(unint64_t))(v9 + 56);
      v28(v27);
    }
    else
    {
      a1 = (unsigned int *)((v27 + v18 + v19) & ~v19);
      if (v15 == v22)
      {
        unsigned int v26 = *(void (**)(unsigned int *))(v14 + 56);
        goto LABEL_19;
      }
      unint64_t v29 = ((unint64_t)a1 + v23) & 0xFFFFFFFFFFFFFFF8;
      if (a2 > 0xFE)
      {
        *(void *)unint64_t v29 = 0;
        *(void *)(v29 + 8) = 0;
        *(_DWORD *)(v29 + 15) = 0;
        *(_DWORD *)unint64_t v29 = a2 - 255;
      }
      else
      {
        *(unsigned char *)(v29 + 18) = -(char)a2;
      }
    }
  }
}

uint64_t sub_18816DFB8()
{
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for NavigationSplitViewVisibility.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18816E0D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NavigationSplitViewVisibility.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18816E1CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for NavigationSplitViewVisibility.CodingKeys()
{
  return &unk_1ED4562B8;
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationSplitView.InternalBody(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = v6 + v8;
  uint64_t v10 = (v6 + v8) & ~v8;
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = a3[4] - 8;
  uint64_t v13 = *(void *)v12;
  uint64_t v14 = *(_DWORD *)(*(void *)v12 + 80);
  uint64_t v15 = v11 + v14;
  uint64_t v16 = *(void *)(*(void *)v12 + 64) + 7;
  unint64_t v17 = ((v16 + ((v11 + v14 + v10) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 49;
  unsigned int v18 = v14 | *(_DWORD *)(v5 + 80) & 0xF8 | v8;
  if (v18 > 7 || ((*(_DWORD *)(v13 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) != 0 || v17 > 0x18)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    unsigned int v26 = (uint64_t *)(v21 + (((v18 | 7) + 16) & ~(unint64_t)(v18 | 7)));
  }
  else
  {
    uint64_t v22 = ~v8;
    uint64_t v23 = ~v14;
    uint64_t v31 = a3[3];
    uint64_t v32 = a3[4];
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v24 = ((unint64_t)a1 + v9) & v22;
    unint64_t v25 = ((unint64_t)a2 + v9) & v22;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(v24, v25, v31);
    unsigned int v26 = a1;
    unint64_t v27 = (v25 + v15) & v23;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16))((v24 + v15) & v23, v27, v32);
    unint64_t v28 = (v16 + ((v24 + v15) & v23)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v29 = (v16 + v27) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v28 = *(void *)v29;
    *(void *)(v28 + 8) = *(void *)(v29 + 8);
    *(_WORD *)(v28 + 16) = *(_WORD *)(v29 + 16);
    *(_WORD *)(v28 + 18) = *(_WORD *)(v29 + 18);
    *(void *)(v28 + 24) = *(void *)(v29 + 24);
    *(void *)(v28 + 32) = *(void *)(v29 + 32);
    *(void *)(v28 + 40) = *(void *)(v29 + 40);
    *(unsigned char *)(v28 + 48) = *(unsigned char *)(v29 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v26;
}

uint64_t assignWithCopy for NavigationSplitView.InternalBody(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 40);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 24;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 40) + 7;
  unint64_t v21 = (v20 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v20 + v19) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v21 = *(void *)v22;
  swift_retain();
  swift_release();
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  swift_retain();
  swift_release();
  *(_WORD *)(v21 + 16) = *(_WORD *)(v22 + 16);
  *(_WORD *)(v21 + 18) = *(_WORD *)(v22 + 18);
  *(void *)(v21 + 24) = *(void *)(v22 + 24);
  *(void *)(v21 + 32) = *(void *)(v22 + 32);
  swift_retain();
  swift_release();
  *(void *)(v21 + 40) = *(void *)(v22 + 40);
  swift_retain();
  swift_release();
  *(unsigned char *)(v21 + 48) = *(unsigned char *)(v22 + 48);
  return a1;
}

uint64_t initializeWithTake for NavigationSplitView.InternalBody(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 32);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 32;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 32) + 7;
  unint64_t v21 = (v20 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v20 + v19) & 0xFFFFFFFFFFFFFFF8;
  long long v24 = *(_OWORD *)(v22 + 16);
  long long v23 = *(_OWORD *)(v22 + 32);
  long long v25 = *(_OWORD *)v22;
  *(unsigned char *)(v21 + 48) = *(unsigned char *)(v22 + 48);
  *(_OWORD *)(v21 + 16) = v24;
  *(_OWORD *)(v21 + 32) = v23;
  *(_OWORD *)unint64_t v21 = v25;
  return a1;
}

uint64_t assignWithTake for NavigationSplitView.InternalBody(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 24);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 40;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 40))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 24) + 7;
  unint64_t v21 = (v20 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v20 + v19) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v21 = *(void *)v22;
  swift_release();
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  swift_release();
  *(_WORD *)(v21 + 16) = *(_WORD *)(v22 + 16);
  *(_WORD *)(v21 + 18) = *(_WORD *)(v22 + 18);
  *(void *)(v21 + 24) = *(void *)(v22 + 24);
  *(void *)(v21 + 32) = *(void *)(v22 + 32);
  swift_release();
  *(void *)(v21 + 40) = *(void *)(v22 + 40);
  swift_release();
  *(unsigned char *)(v21 + 48) = *(unsigned char *)(v22 + 48);
  return a1;
}

double storeEnumTagSinglePayload for NavigationSplitView.InternalBody(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  uint64_t v10 = *(void *)(v8 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(v9 - 8);
  unsigned int v14 = *(_DWORD *)(v13 + 84);
  uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v16 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v17 = *(unsigned __int8 *)(v13 + 80);
  if (v14 <= v12) {
    unsigned int v18 = v12;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v13 + 84);
  }
  if (v18 <= 0x7FFFFFFF) {
    unsigned int v18 = 0x7FFFFFFF;
  }
  uint64_t v19 = *(void *)(*(void *)(a4[2] - 8) + 64) + v15;
  uint64_t v20 = *(void *)(*(void *)(v9 - 8) + 64) + 7;
  size_t v21 = ((v20 + ((v16 + v17 + (v19 & ~v15)) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 49;
  char v22 = 8 * v21;
  if (v18 >= a3)
  {
    int v26 = 0;
    if (v18 >= a2) {
      goto LABEL_22;
    }
LABEL_26:
    if (v21 < 4) {
      unsigned int v28 = ((~v18 + a2) >> v22) + 1;
    }
    else {
      unsigned int v28 = 1;
    }
    if (v21 >= 4) {
      unsigned int v29 = ~v18 + a2;
    }
    else {
      unsigned int v29 = (~(_BYTE)v18 + a2);
    }
    bzero(a1, v21);
    if (v21 == 1) {
      *a1 = v29;
    }
    else {
      *(_DWORD *)a1 = v29;
    }
    switch(v26)
    {
      case 1:
        a1[v21] = v28;
        break;
      case 2:
        *(_WORD *)&a1[v21] = v28;
        break;
      case 3:
LABEL_59:
        __break(1u);
        JUMPOUT(0x18816EC84);
      case 4:
        *(_DWORD *)&a1[v21] = v28;
        break;
      default:
        return result;
    }
    return result;
  }
  unsigned int v23 = (a3 - v18 + 255) >> v22;
  if (v21 <= 3) {
    unsigned int v24 = v23 + 1;
  }
  else {
    unsigned int v24 = 2;
  }
  if (v24 >= 0x10000) {
    int v25 = 4;
  }
  else {
    int v25 = 2;
  }
  if (v24 < 0x100) {
    int v25 = 1;
  }
  if (v24 >= 2) {
    int v26 = v25;
  }
  else {
    int v26 = 0;
  }
  if (v18 < a2) {
    goto LABEL_26;
  }
LABEL_22:
  uint64_t v27 = ~v15;
  switch(v26)
  {
    case 1:
      a1[v21] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_39;
    case 2:
      *(_WORD *)&a1[v21] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_39;
    case 3:
      goto LABEL_59;
    case 4:
      *(_DWORD *)&a1[v21] = 0;
      goto LABEL_38;
    default:
LABEL_38:
      if (!a2) {
        return result;
      }
LABEL_39:
      if (v7 == v18)
      {
        uint64_t v31 = *(void (**)(char *))(v6 + 56);
        uint64_t v32 = a1;
LABEL_42:
        v31(v32);
        return result;
      }
      unint64_t v33 = (unint64_t)&a1[v19] & v27;
      if (v11 == v18)
      {
        unint64_t v34 = *(void (**)(unint64_t))(v10 + 56);
        v34(v33);
      }
      else
      {
        uint64_t v32 = (char *)((v33 + v16 + v17) & ~v17);
        if (v14 == v18)
        {
          uint64_t v31 = *(void (**)(char *))(v13 + 56);
          goto LABEL_42;
        }
        unint64_t v35 = (unint64_t)&v32[v20] & 0xFFFFFFFFFFFFFFF8;
        if ((a2 & 0x80000000) != 0)
        {
          *(void *)(v35 + 40) = 0;
          double result = 0.0;
          *(_OWORD *)(v35 + 24) = 0u;
          *(_OWORD *)(v35 + 8) = 0u;
          *(unsigned char *)(v35 + 48) = 0;
          *(void *)unint64_t v35 = a2 ^ 0x80000000;
        }
        else
        {
          *(void *)(v35 + 8) = a2 - 1;
        }
      }
      break;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NavigationSplitView.DetailContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for NavigationSplitView.DetailContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 32) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18816F1D4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationSplitView.ContentListContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for NavigationSplitView.ContentListContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for NavigationSplitView.ContentListContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for NavigationSplitView.ContentListContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationSplitView.ContentListContent(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18816F57CLL);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for NavigationSplitView.ContentListContent(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18816F73CLL);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t getEnumTagSinglePayload for NavigationSplitView.SidebarContent(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18816F878);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for NavigationSplitView.SidebarContent(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18816FA38);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t sub_18816FA60()
{
  return swift_getWitnessTable();
}

uint64_t sub_18816FC9C()
{
  return swift_getWitnessTable();
}

uint64_t sub_18816FDCC()
{
  return swift_getWitnessTable();
}

uint64_t sub_18816FEFC()
{
  return swift_getWitnessTable();
}

uint64_t static ControlWidgetTemplateModifier._makeControlWidgetTemplate(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v6 = *a1;
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  int v12 = *((_DWORD *)a2 + 14);
  static DynamicPropertyCache.fields(of:)();
  uint64_t v13 = v46;
  uint64_t v14 = v47;
  char v15 = v48;
  int v16 = HIDWORD(v48);
  uint64_t v46 = v7;
  LODWORD(v47) = v8;
  uint64_t v48 = v9;
  long long v49 = *(_OWORD *)(a2 + 3);
  uint64_t v50 = v10;
  uint64_t v51 = v11;
  int v52 = v12;
  int v25 = v16;
  int v26 = v6;
  int v41 = v6;
  uint64_t v31 = v14;
  uint64_t v32 = v13;
  char v30 = v15;
  LOBYTE(v36) = v15;
  HIDWORD(v36) = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ControlWidgetTemplateModifier.makeBody(modifier:inputs:fields:)();
  int v17 = v45;
  uint64_t v18 = v43;
  uint64_t v27 = v42;
  LOBYTE(v11) = v44;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v19 = type metadata accessor for ControlWidgetTemplateModifier_Content.BodyInput();
  type metadata accessor for (_:_:)();
  swift_getWitnessTable();
  _SceneInputs.append<A, B>(_:to:)((uint64_t)&v34, v19, v19);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v45 = v17;
  uint64_t v34 = v46;
  LODWORD(v35) = v47;
  uint64_t v36 = v48;
  long long v37 = v49;
  uint64_t v38 = v50;
  uint64_t v39 = v51;
  int v40 = v52;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(&v42, &v45, &v34, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v22 = v42;
  int v23 = v43;
  if ((v11 & 1) == 0)
  {
    uint64_t v42 = v27;
    uint64_t v43 = v18;
    int v45 = v26;
    uint64_t v34 = v32;
    uint64_t v35 = v31;
    LOBYTE(v36) = v30;
    HIDWORD(v36) = v25;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a5 = v22;
  *(_DWORD *)(a5 + 8) = v23;
  return result;
}

uint64_t static ControlWidgetTemplateModifier._controlType.getter()
{
  return static ControlWidgetTemplateModifier._controlType.getter();
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t static ControlWidgetTemplateModifier.makeBody(modifier:inputs:fields:)()
{
  if (AGTypeID.isValueType.getter())
  {
    type metadata accessor for ControlWidgetTemplateModifierBodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v1._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ControlWidgetTemplateModifier_Content.BodyInput()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ControlWidgetTemplateModifierBodyAccessor.updateBody(of:changed:)(uint64_t result, char a2)
{
  if (a2)
  {
    MEMORY[0x1F4188790](result);
    type metadata accessor for ControlWidgetTemplateModifierBodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ControlWidgetTemplateModifierBodyAccessor<A>(uint64_t result, char a2)
{
  return ControlWidgetTemplateModifierBodyAccessor.updateBody(of:changed:)(result, a2);
}

void ControlWidgetTemplateModifier<>.body(content:)()
{
}

uint64_t static EmptyControlWidgetTemplate._makeControlWidgetTemplate(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  int v5 = *((_DWORD *)a2 + 14);
  uint64_t v7 = *a2;
  int v8 = v3;
  uint64_t v9 = v4;
  long long v10 = *(_OWORD *)(a2 + 3);
  long long v11 = *(_OWORD *)(a2 + 5);
  int v12 = v5;
  return a3(a1, &v7);
}

void protocol witness for ControlWidgetTemplateModifier.body(content:) in conformance EmptyControlWidgetTemplate()
{
}

uint64_t ControlWidgetTemplate.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  return ModifiedContent.init(content:modifier:)();
}

uint64_t static ModifiedContent<>._controlType.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t static ModifiedContent<>._makeControlWidgetTemplate(control:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a2;
  int v13 = *((_DWORD *)a2 + 2);
  uint64_t v14 = a2[2];
  int v15 = *((_DWORD *)a2 + 14);
  LODWORD(v21) = *a1;
  int v11 = v21;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  long long v20 = *(_OWORD *)(a2 + 5);
  uint64_t v16 = a2[3];
  uint64_t v17 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v21 = v12;
  int v22 = v13;
  uint64_t v23 = v14;
  uint64_t v24 = v16;
  uint64_t v25 = v17;
  long long v26 = v20;
  int v27 = v15;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a3;
  *(void *)(v18 + 24) = a4;
  *(void *)(v18 + 32) = a5;
  *(void *)(v18 + 40) = a6;
  *(_DWORD *)(v18 + 48) = v11;
  (*(void (**)(unsigned char *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a6 + 32))(v28, &v21, partial apply for closure #2 in static ModifiedContent<>._makeControlWidgetTemplate(control:inputs:), v18, a4, a6);
  return swift_release();
}

uint64_t closure #2 in static ModifiedContent<>._makeControlWidgetTemplate(control:inputs:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *a2;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  int v12 = *((_DWORD *)a2 + 14);
  LODWORD(v17) = a3;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  long long v16 = *(_OWORD *)(a2 + 5);
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v17 = v9;
  int v18 = v10;
  uint64_t v19 = v11;
  uint64_t v20 = v13;
  uint64_t v21 = v14;
  long long v22 = v16;
  int v23 = v12;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(a6 + 40))(v24, &v17, a4, a6);
}

void protocol witness for ControlWidgetTemplate.body.getter in conformance <> ModifiedContent<A, B>()
{
}

uint64_t protocol witness for static ControlWidgetTemplate._controlType.getter in conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2)
{
  return static ModifiedContent<>._controlType.getter(*(void *)(a1 + 16), a2, *(void *)(a2 - 8));
}

uint64_t protocol witness for static ControlWidgetTemplate._makeControlWidgetTemplate(control:inputs:) in conformance <> ModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static ModifiedContent<>._makeControlWidgetTemplate(control:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t static ModifiedContent<>._makeControlWidgetTemplate(modifier:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *a2;
  int v16 = *((_DWORD *)a2 + 2);
  uint64_t v17 = a2[2];
  int v24 = *((_DWORD *)a2 + 14);
  LODWORD(v26) = *a1;
  int v14 = v26;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  long long v23 = *(_OWORD *)(a2 + 5);
  uint64_t v18 = a2[3];
  uint64_t v19 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v26 = v15;
  int v27 = v16;
  uint64_t v28 = v17;
  uint64_t v29 = v18;
  uint64_t v30 = v19;
  long long v31 = v23;
  int v32 = v24;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a5;
  *(void *)(v20 + 24) = a6;
  *(void *)(v20 + 32) = a7;
  *(void *)(v20 + 40) = a8;
  *(_DWORD *)(v20 + 48) = v14;
  *(void *)(v20 + 56) = a3;
  *(void *)(v20 + 64) = a4;
  uint64_t v21 = *(void (**)(unsigned char *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a8 + 32);
  swift_retain();
  v21(v33, &v26, partial apply for closure #2 in static ModifiedContent<>._makeControlWidgetTemplate(modifier:inputs:body:), v20, a6, a8);
  return swift_release();
}

void protocol witness for ControlWidgetTemplateModifier.body(content:) in conformance <> ModifiedContent<A, B>()
{
}

uint64_t protocol witness for static ControlWidgetTemplateModifier._makeControlWidgetTemplate(modifier:inputs:body:) in conformance <> ModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ModifiedContent<>._makeControlWidgetTemplate(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), *(void *)(a6 - 8), *(void *)(a6 - 16));
}

uint64_t static ControlWidgetTemplateModifier_Content._controlType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

unint64_t static ControlWidgetTemplateModifier_Content.BodyInput.defaultValue.getter@<X0>(void *a1@<X8>)
{
  unint64_t result = type metadata accessor for (_:_:)();
  *a1 = 0;
  return result;
}

unint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance ControlWidgetTemplateModifier_Content<A>.BodyInput@<X0>(void *a1@<X8>)
{
  return static ControlWidgetTemplateModifier_Content.BodyInput.defaultValue.getter(a1);
}

uint64_t protocol witness for static ControlWidgetTemplate._controlType.getter in conformance ControlWidgetTemplateModifier_Content<A>(uint64_t a1)
{
  return static ControlWidgetTemplateModifier_Content._controlType.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t protocol witness for static ControlWidgetTemplate._makeControlWidgetTemplate(control:inputs:) in conformance ControlWidgetTemplateModifier_Content<A>(uint64_t a1, uint64_t a2)
{
  return static ControlWidgetTemplateModifier_Content._makeControlWidgetTemplate(control:inputs:)(a1, a2);
}

void specialized ControlWidgetTemplateModifier<>.body(content:)()
{
}

uint64_t sub_188170D8C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeControlWidgetTemplate(control:inputs:)(uint64_t a1, uint64_t *a2)
{
  return closure #2 in static ModifiedContent<>._makeControlWidgetTemplate(control:inputs:)(a1, a2, *(_DWORD *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_188170DAC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t dispatch thunk of ControlWidgetTemplateModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static ControlWidgetTemplateModifier._makeControlWidgetTemplate(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of static ControlWidgetTemplateModifier._controlType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t type metadata accessor for ControlWidgetTemplateModifier_Content()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for PropertyKey in ControlWidgetTemplateModifier_Content<A>.BodyInput()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for ControlWidgetTemplateModifier_Content<A>.BodyInput(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for ControlWidgetTemplateModifierBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in ControlWidgetTemplateModifierBodyAccessor.updateBody(of:changed:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 + 24) + 24))(a1, *(void *)(v1 + 16));
}

uint64_t type metadata accessor for PrimitiveDragResponder()
{
  uint64_t result = type metadata singleton initialization cache for PrimitiveDragResponder;
  if (!type metadata singleton initialization cache for PrimitiveDragResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for PrimitiveDragResponder()
{
  return swift_initClassMetadata2();
}

uint64_t PrimitiveDragResponder.__allocating_init(inputs:)()
{
  *(unsigned char *)(swift_allocObject() + 216) = 0;
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t PrimitiveDragResponder.__allocating_init(inputs:viewSubgraph:)()
{
  *(unsigned char *)(swift_allocObject() + 216) = 0;
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t ObjC metadata update function for PrimitiveDragResponder()
{
  return type metadata accessor for PrimitiveDragResponder();
}

void CustomHoverEffect.hoverEffectGroup(id:in:behavior:)()
{
}

void HoverEffectGroup.init(id:in:behavior:)()
{
}

void CustomHoverEffect.hoverEffectGroup(_:)()
{
}

void View.hoverEffectGroup()()
{
}

void static HoverEffectGroup.Behavior.followsGroup.getter()
{
}

void HoverEffectGroup.init(_:behavior:)()
{
}

void HoverEffectGroup.behavior(_:)()
{
}

void static HoverEffectGroup.== infix(_:_:)()
{
}

void static HoverEffectGroup.named(_:in:)()
{
}

void static HoverEffectGroup.custom(_:)()
{
}

void HoverEffectGroup.scope(_:)()
{
}

void static HoverEffectGroup.implicit(_:)()
{
}

void static HoverEffectGroup.view(_:)()
{
}

uint64_t outlined copy of HoverEffectGroupInfo.Identifier(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 - 1 <= 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of HoverEffectGroupInfo.Identifier(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 - 1 <= 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for HoverEffectGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 24);
  outlined copy of HoverEffectGroupInfo.Identifier(*(void *)a2, v5, v6, v7);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  return a1;
}

uint64_t assignWithCopy for HoverEffectGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 24);
  outlined copy of HoverEffectGroupInfo.Identifier(*(void *)a2, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  unsigned __int8 v11 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v7;
  outlined consume of HoverEffectGroupInfo.Identifier(v8, v9, v10, v11);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  return a1;
}

uint64_t assignWithTake for HoverEffectGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v5;
  outlined consume of HoverEffectGroupInfo.Identifier(v6, v7, v8, v9);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverEffectGroup(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 27)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 26);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverEffectGroup(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 26) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 27) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 27) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 26) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectGroup()
{
  return &type metadata for HoverEffectGroup;
}

unsigned char *storeEnumTagSinglePayload for HoverEffectGroup.Behavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1881714E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectGroup.Behavior()
{
  return &type metadata for HoverEffectGroup.Behavior;
}

unsigned char *storeEnumTagSinglePayload for HoverEffectGroup.Scope(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1881715ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectGroup.Scope()
{
  return &type metadata for HoverEffectGroup.Scope;
}

uint64_t sub_188171624(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t destroy for HoverEffectGroup.Identifier(uint64_t a1)
{
  return outlined consume of HoverEffectGroupInfo.Identifier(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t initializeWithCopy for HoverEffectGroup.Identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  outlined copy of HoverEffectGroupInfo.Identifier(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for HoverEffectGroup.Identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  outlined copy of HoverEffectGroupInfo.Identifier(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of HoverEffectGroupInfo.Identifier(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for HoverEffectGroup.Identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of HoverEffectGroupInfo.Identifier(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverEffectGroup.Identifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}